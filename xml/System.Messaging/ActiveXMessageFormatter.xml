<Type Name="ActiveXMessageFormatter" FullName="System.Messaging.ActiveXMessageFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bcb0d5ed5e9f2af7770e251b62d11f1b941dd6ec" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30558421" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ActiveXMessageFormatter : ICloneable, System.Messaging.IMessageFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ActiveXMessageFormatter extends System.Object implements class System.ICloneable, class System.Messaging.IMessageFormatter" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.ActiveXMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Class ActiveXMessageFormatter&#xA;Implements ICloneable, IMessageFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ActiveXMessageFormatter : ICloneable, System::Messaging::IMessageFormatter" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Messaging.IMessageFormatter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Serializuje i deserializuje typy pierwotne danych i innych obiektów do lub z treści wiadomości MSMQ, przy użyciu formatu, który jest zgodny z składnika ActiveX usługi MSMQ.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.ActiveXMessageFormatter> Jest zgodny z komunikatów wysyłanych za pomocą komunikatów usługi kolejkowania składniki modelu COM, umożliwiając współdziałanie z aplikacji, które używają kontrolki COM usługi MSMQ.  
  
 <xref:System.Messaging.ActiveXMessageFormatter> Może serializować większość podstawowych, jak również obiektów implementujących `IPersistStream` interfejsu OLE. Może wykonywać deserializację ten sam zestaw obiektów pierwotnych, ale wymaga więcej wysiłku podczas deserializacji obiektu COM (na przykład obiekt utworzony za pomocą Visual Basic 6.0), który implementuje `IPersistStream`. Obiekt do deserializacji musi być w pamięci, importując pierwszy obiekt do aplikacji autonomicznej .NET Framework.  
  
 Gdy aplikacja wysyła wiadomość do kolejki, używając wystąpienia <xref:System.Messaging.MessageQueue> klasy, program formatujący serializuje obiekt do strumienia i wstawia je do treści wiadomości. Podczas czytania z kolejki przy użyciu <xref:System.Messaging.MessageQueue>, element formatujący deserializuje dane wiadomości do <xref:System.Messaging.Message.Body%2A> właściwość <xref:System.Messaging.Message>.  
  
 Serializacji ActiveX jest bardzo compact, co czyni przy użyciu <xref:System.Messaging.ActiveXMessageFormatter> i MSMQ COM kontroli bardzo szybko metoda serializacji.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ActiveXMessageFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ActiveXMessageFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Messaging.ActiveXMessageFormatter" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanRead(System::Messaging::Message ^ message);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">
          <see cref="T:System.Messaging.Message" /> Do zbadania.</param>
        <summary>Określa, czy element formatujący może wykonywać deserializację treści wiadomości.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.Messaging.ActiveXMessageFormatter" /> może wykonywać deserializację komunikatu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.ActiveXMessageFormatter.CanRead%2A> Zwraca `false` Jeśli treść komunikatu nie jest właściwością pierwotną, który może deserializować formantu ActiveX usługi kolejkowania komunikatów lub nie implementuje `IPersistStream` interfejsu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> Parametr jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy wystąpienie <see cref="T:System.Messaging.ActiveXMessageFormatter" /> klasy, która jest taka sama jak bieżący <see cref="T:System.Messaging.ActiveXMessageFormatter" />.</summary>
        <returns>Obiekt, którego właściwości są identyczne z to <see cref="T:System.Messaging.ActiveXMessageFormatter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest używana przez <xref:System.Messaging.MessageQueue> klasy w celu odbierania wiele komunikatów w tym samym czasie (na przykład jeśli aplikacja odbiera asynchronicznie). Zwykle nie trzeba wywołać tę metodę w kodzie aplikacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.IMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="InitStreamedObject">
      <MemberSignature Language="C#" Value="public static void InitStreamedObject (object streamedObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitStreamedObject(object streamedObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.InitStreamedObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitStreamedObject (streamedObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitStreamedObject(System::Object ^ streamedObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamedObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="streamedObject">Obiekt OLE, który implementuje <see langword="IPersistStreamInit" />.</param>
        <summary>Oferuje narzędzia ułatwiające serializować COM obiekty, które implementują <see langword="IPersistStream" /> i wymagają <see langword="IPersistStreamInit" /> do wywołania.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">
          <see cref="T:System.Messaging.Message" />, W formacie formantu ActiveX usługi MSMQ, służącego do deserializacji.</param>
        <summary>Odczytuje zawartość z podanym komunikatem i tworzy obiekt, który zawiera komunikat zdeserializowany.</summary>
        <returns>Zdeserializowana komunikat.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli treść wiadomości reprezentuje typ pierwotny, wiadomości w <xref:System.Messaging.Message.BodyType%2A> właściwość musi być jednego z typów zarządzanych w poniższej tabeli.  
  
|Wartość BodyType|Typ zarządzany|  
|--------------------|------------------|  
|VT_LPSTR|<xref:System.Char> Tablica (deserializacji, za pomocą kodu ASCII)|  
|VT_BSTR, VT_LPWSTR|<xref:System.String> (deserializacji, za pomocą kodowania Unicode)|  
|VT_VECTOR &AMP;#124; VT_UI1|<xref:System.Byte> Tablica|  
|VT_BOOL|<xref:System.Boolean>|  
|VT_CLSID|<xref:System.Guid>|  
|VT_CY|<xref:System.Decimal>|  
|VT_DATE|<xref:System.DateTime>|  
|VT_I1, VT_UI1|<xref:System.Byte>|  
|VT_I2|<xref:System.Int16>|  
|VT_UI2|<xref:System.UInt16>|  
|VT_I4|<xref:System.Int32>|  
|VT_UI4|<xref:System.UInt32>|  
|VT_I8|<xref:System.Int64>|  
|VT_UI8|<xref:System.UInt64>|  
|VT_R4|<xref:System.Single>|  
|VT_R8|<xref:System.Double>|  
|VT_NULL|`null`|  
|VT_STREAMED_OBJECT|<xref:System.Object>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Messaging.Message.BodyType" /> Właściwość <paramref name="message" /> przekazany jako parametr nie można zamapować na typ pierwotny, ani reprezentuje obiektu przesyłany strumieniowo.</exception>
        <exception cref="T:System.NotSupportedException">Treść reprezentuje obiekt przechowywane. <see cref="T:System.Messaging.ActiveXMessageFormatter" /> Nie obsługuje deserializacji obiektów przechowywanych.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> Parametr jest <see langword="null" />.</exception>
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">
          <see cref="T:System.Messaging.Message" /> Których <see cref="P:System.Messaging.Message.Body" /> właściwości będzie zawierać Zserializowany obiekt.</param>
        <param name="obj">Obiekt do serializacji w treści wiadomości.</param>
        <summary>Serializuje obiektu na treść komunikatu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono relacje między typy zarządzane i <xref:System.Messaging.Message.BodyType%2A> właściwości. Obiekt, który można serializować musi mieć jedną z następujących typów zarządzanych lub musi implementować OLE `IPersistStream` interfejsu.  
  
|Wartość BodyType|Typ zarządzany|  
|--------------------|------------------|  
|VT_LPSTR|<xref:System.Char>|  
|VT_BSTR, VT_LPWSTR|<xref:System.String>|  
|VT_VECTOR &AMP;#124; VT_UI1|<xref:System.Byte>|  
|VT_BOOL|<xref:System.Boolean>|  
|VT_CLSID|<xref:System.Guid>|  
|VT_CY|<xref:System.Decimal>|  
|VT_DATE|<xref:System.DateTime>|  
|VT_I1, VT_UI1|<xref:System.Byte>|  
|VT_I2|<xref:System.Int16>|  
|VT_UI2|<xref:System.UInt16>|  
|VT_I4|<xref:System.Int32>|  
|VT_UI4|<xref:System.UInt32>|  
|VT_I8|<xref:System.Int64>|  
|VT_UI8|<xref:System.UInt64>|  
|VT_R4|<xref:System.Single>|  
|VT_R8|<xref:System.Double>|  
|VT_NULL|`null`|  
|VT_STREAMED_OBJECT|`IPersistStream` (OLE) <xref:System.Object>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Obiekt do zserializowania jest właściwością pierwotną ani przesyłanej strumieniowo obiekt, który implementuje OLE <see langword="IPersistStream" /> interfejsu.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> Parametr jest <see langword="null" />.</exception>
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>