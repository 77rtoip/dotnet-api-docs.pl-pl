<Type Name="MessageQueueTransaction" FullName="System.Messaging.MessageQueueTransaction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="df2bba2ae283f2c37807a5d0bc8068d3e44d3e91" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36476770" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueTransaction extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="F#" Value="type MessageQueueTransaction = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Udostępnia usługi kolejkowania komunikatów transakcja wewnętrzna.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby wysyłać ani odbierać wiadomości w ramach transakcji, można użyć <xref:System.Messaging.MessageQueueTransaction> klasę, aby utworzyć transakcji i przekaż go do przeciążenia <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> metody lub <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> metody pobierającej `transaction` parametru. Komunikaty wysyłane jako część transakcji należy wysłać do kolejek transakcyjnych. Komunikatów odebranych z kolejek transakcyjnych musi otrzymać przy użyciu określonej transakcji.  
  
 Oprócz <xref:System.Messaging.MessageQueue.Receive%2A> metody mogą odbierać komunikaty z określonego identyfikatora lub identyfikatora korelacji określony. Zobacz <xref:System.Messaging.MessageQueue.ReceiveById%2A> i <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> metody, aby uzyskać więcej informacji na temat selektywnego odbierania komunikatów z kolejek transakcyjnych.  
  
 Komunikaty wysyłane do kolejek transakcyjnych zostaną usunięte, jeśli transakcja została przekazana. Podobnie komunikatów odebranych z kolejek transakcyjnych są zwracane do kolejki, jeśli transakcja zostanie wycofana.  
  
 Jeśli można utworzyć wystąpienia <xref:System.Messaging.MessageQueueTransaction> i przekaż go do odpowiednich przeciążenia <xref:System.Messaging.MessageQueue.Send%2A> metody lub <xref:System.Messaging.MessageQueue.Receive%2A> metodę, aby wysłać komunikat do kolejki nietransakcyjnej lub komunikat z kolejki nietransakcyjnej, metoda zgłasza wyjątek Wskazuje "Nieprawidłowe użycie transakcji."  
  
 <xref:System.Messaging.MessageQueueTransaction> jest wątkowości typu apartment wiedzieć, tak więc jeśli nazwa stanu apartamentu jest `STA`, transakcji nie można używać w wielu wątków. Visual Basic ustawia stan wątku głównego do `STA`, więc należy zastosować <xref:System.MTAThreadAttribute> w `Main` procedury. W przeciwnym razie wysyła wiadomości transakcyjne przy użyciu innego wątku zgłasza <xref:System.Messaging.MessageQueueException> wyjątku. Należy zastosować <xref:System.MTAThreadAttribute> za pomocą następującego fragmentu.  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>Ten typ jest bezpieczny wątkowo.</threadsafe>
    <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Messaging.MessageQueueTransaction" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor ustawia <xref:System.Messaging.MessageQueueTransaction.Status%2A> właściwości `Initialized`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="messageQueueTransaction.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przywraca oczekująca transakcja wewnętrzna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> oznacza niepomyślnych ukończenia procesu rozpoczętej w wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  
  
 Zwykle, co sprawia, że wywołanie <xref:System.Messaging.MessageQueueTransaction.Begin%2A> w `Try...Catch` bloku obsługi wyjątków, umieszczanie wywołania <xref:System.Messaging.MessageQueueTransaction.Commit%2A> w `Try` klauzul i wywołanie <xref:System.Messaging.MessageQueueTransaction.Abort%2A> w `Catch` klauzuli.  
  
 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> Przywraca cała transakcja. Obejmuje to wszystkie wiadomości wysyłane lub odbierane po wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Transakcja wewnętrzna, które próbujesz wycofać nie została uruchomiona.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Występuje błąd wewnętrzny usługi kolejkowania komunikatów.</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="messageQueueTransaction.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rozpoczyna nową transakcję wewnętrzną usługi kolejkowania komunikatów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> oznacza początek przetwarzania, które będą zatwierdzenia lub wycofania, w zależności od Powodzenie transakcji. Jeśli wystąpi wyjątek podczas przetwarzania, cała transakcja zostanie wycofana. Obejmuje to wszystkie wiadomości wysyłane lub odbierane po wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  
  
 Zwykle, co sprawia, że wywołanie <xref:System.Messaging.MessageQueueTransaction.Begin%2A> w `Try...Catch` bloku obsługi wyjątków, umieszczanie wywołania <xref:System.Messaging.MessageQueueTransaction.Commit%2A> w `Try` klauzul i wywołanie <xref:System.Messaging.MessageQueueTransaction.Abort%2A> w `Catch` klauzuli.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Transakcja została już uruchomiona.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Występuje błąd wewnętrzny usługi kolejkowania komunikatów.</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberSignature Language="F#" Value="member this.Commit : unit -&gt; unit" Usage="messageQueueTransaction.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zatwierdza oczekująca transakcja wewnętrzna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Commit%2A> oznacza pomyślne zakończenie przetwarzania rozpoczętej w wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>. Jeśli wystąpi wyjątek między wywołanie <xref:System.Messaging.MessageQueueTransaction.Begin%2A> i wywołania w celu <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, cała transakcja zostanie wycofana. Obejmuje to wszystkie wiadomości wysyłane lub odbierane po wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  
  
 Zwykle, co sprawia, że wywołanie <xref:System.Messaging.MessageQueueTransaction.Begin%2A> w `Try...Catch` bloku obsługi wyjątków, umieszczanie wywołania <xref:System.Messaging.MessageQueueTransaction.Commit%2A> w `Try` klauzul i wywołanie <xref:System.Messaging.MessageQueueTransaction.Abort%2A> w `Catch` klauzuli.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Transakcja, który próbujesz przekazać, nie została uruchomiona.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Występuje błąd wewnętrzny usługi kolejkowania komunikatów.</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:System.Messaging.MessageQueueTransaction" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageQueueTransaction.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez <see cref="T:System.Messaging.MessageQueueTransaction" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> umożliwia zasoby używane przez <xref:System.Messaging.MessageQueueTransaction> odbiorczego do innych celów. Aby uzyskać więcej informacji na temat `Dispose`, zobacz [czyszczenie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md).  
  
 Wszelkie oczekujące wewnętrzne transakcje są wycofywane <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageQueueTransaction.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko zasoby niezarządzane.</param>
        <summary>Zwalnia zasoby niezarządzane używane przez <see cref="T:System.Messaging.MessageQueueTransaction" /> i opcjonalnie zwalnia zasoby zarządzane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana przez metodę publiczną <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> — metoda i <xref:System.Object.Finalize%2A> metody. `Dispose` wywołuje chronioną metodę `Dispose(Boolean)` metody z `disposing` ustawiono parametr `true`. <xref:System.Object.Finalize%2A> wywołuje `Dispose` z `disposing` ustawioną `false`.  
  
 Gdy `disposing` parametr jest `true`, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane przez to <xref:System.Messaging.MessageQueueTransaction> odwołania. Ta metoda wywołuje `Dispose` metody każdego odwołuje się do obiektu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> można wywoływać wielokrotnie przez inne obiekty. W przypadku przesłaniania <see langword="Dispose(Boolean)" />, nie odwołują się obiekty, które zostały wcześniej zlikwidowane w wywołaniu wcześniejszych <see langword="Dispose" />. Aby uzyskać więcej informacji na temat sposobu wdrażania <see langword="Dispose" />, zobacz [implementacja Method](~/docs/standard/garbage-collection/implementing-dispose.md) Dispose.  Aby uzyskać więcej informacji na temat <see langword="Dispose" /> i <see langword="Finalize" />, zobacz [czyszczenia Resources](~/docs/standard/garbage-collection/unmanaged.md) niezarządzane i [zastąpienie metody Finalize] (http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueTransaction ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageQueueTransaction.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby blokowane przez bieżące wystąpienie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zastępuje <xref:System.Object.Finalize%2A?displayProperty=nameWithType>. Kod aplikacji nie powinny wywoływać tej metody; obiekt <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> metoda jest wywoływana automatycznie podczas wyrzucania elementów bezużytecznych, chyba że finalizacji przez moduł garbage collector została wyłączona przez wywołanie do <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> metody.  
  
 Aby uzyskać więcej informacji, zobacz [metody Finalize i destruktory](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70), [czyszczenie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md), i [przesłaniania metody Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueTransactionStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueTransactionStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueTransaction.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As MessageQueueTransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueueTransactionStatus Status { System::Messaging::MessageQueueTransactionStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Messaging.MessageQueueTransactionStatus" Usage="System.Messaging.MessageQueueTransaction.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueTransactionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera stan transakcji.</summary>
        <value>Jeden z <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> wartości, które wskazuje, czy transakcja został przekazany, zostało przerwane, został zainicjowany, czy jest w stanie oczekiwania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy wystąpienie klasy <xref:System.Messaging.MessageQueueTransaction> klasy został utworzony, <xref:System.Messaging.MessageQueueTransaction.Status%2A> jest ustawiana przez konstruktora, aby `Initialized`. Po wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A> , ale przed wywołaniem <xref:System.Messaging.MessageQueueTransaction.Commit%2A> lub <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, <xref:System.Messaging.MessageQueueTransaction.Status%2A> jest `Pending`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueTransactionStatus" />
      </Docs>
    </Member>
  </Members>
</Type>