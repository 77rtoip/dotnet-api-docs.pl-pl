<Type Name="MessageQueueTransaction" FullName="System.Messaging.MessageQueueTransaction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2437017ed9b6b1b0bf366b5d4b834fcb0bdf84bd" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69115824" /></Metadata><TypeSignature Language="C#" Value="public class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueTransaction extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="F#" Value="type MessageQueueTransaction = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Zapewnia wewnętrzną transakcję usługi kolejkowania komunikatów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby wysłać lub odebrać komunikat w ramach <xref:System.Messaging.MessageQueueTransaction> transakcji, można użyć klasy do utworzenia transakcji i przekazania jej do przeciążenia <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> metody lub <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> metody pobierającej `transaction` parametr. Komunikaty wysyłane jako część transakcji muszą być wysyłane do kolejek transakcyjnych. Komunikaty odebrane z kolejek transakcyjnych muszą zostać odebrane przy użyciu określonej transakcji.  
  
 Oprócz <xref:System.Messaging.MessageQueue.Receive%2A> metody można odbierać komunikaty o określonym identyfikatorze lub określonym identyfikatorze korelacji. Zobacz i <xref:System.Messaging.MessageQueue.ReceiveById%2A> <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> , aby uzyskać więcej informacji na temat selektywnego otrzymywania komunikatów z kolejek transakcyjnych.  
  
 Komunikaty wysyłane do kolejek transakcyjnych są usuwane, jeśli transakcja została zatwierdzona. Podobnie komunikaty odebrane z kolejek transakcyjnych są zwracane do kolejki, jeśli transakcja jest wycofywana.  
  
 Jeśli tworzysz wystąpienie <xref:System.Messaging.MessageQueueTransaction> a i przekażesz go do odpowiedniego przeciążenia <xref:System.Messaging.MessageQueue.Send%2A> metody lub <xref:System.Messaging.MessageQueue.Receive%2A> metody, aby wysłać komunikat do kolejki nietransakcyjnej lub odebrać komunikat z kolejki nietransakcyjnej, metoda zgłasza wyjątek, który wskazuje "Nieprawidłowe użycie transakcji".  
  
 <xref:System.Messaging.MessageQueueTransaction>jest wątkem wątków, dlatego jeśli stanem apartamentu jest `STA`, nie można używać transakcji w wielu wątkach. Visual Basic ustawia stan wątku głównego na `STA`, dlatego należy <xref:System.MTAThreadAttribute> zastosować w `Main` procedurze podrzędnej. W przeciwnym razie wysyłanie wiadomości transakcyjnej przy użyciu innego wątku <xref:System.Messaging.MessageQueueException> zgłasza wyjątek. Należy zastosować, <xref:System.MTAThreadAttribute> korzystając z poniższego fragmentu.  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>Ten typ jest bezpieczny wątkowo.</threadsafe>
    <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Messaging.MessageQueueTransaction" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor ustawia <xref:System.Messaging.MessageQueueTransaction.Status%2A> właściwość na `Initialized`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="messageQueueTransaction.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wycofuje oczekującą wewnętrzną transakcję.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Abort%2A>oznacza nieudane zakończenie procesu rozpoczętego w wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  
  
 Zazwyczaj jeden <xref:System.Messaging.MessageQueueTransaction.Begin%2A> wywołuje wywołanie `Try...Catch` w bloku obsługi wyjątków <xref:System.Messaging.MessageQueueTransaction.Commit%2A> , wywołując wywołanie w `Try` klauzuli i wywołanie do <xref:System.Messaging.MessageQueueTransaction.Abort%2A> w `Catch` klauzuli.  
  
 <xref:System.Messaging.MessageQueueTransaction.Abort%2A>wycofuje całą transakcję. Obejmuje to wszystkie komunikaty wysłane lub odebrane po wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wewnętrzna transakcja, którą próbujesz przywrócić, nie została rozpoczęta.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Wystąpił wewnętrzny błąd usługi kolejkowania komunikatów.</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="messageQueueTransaction.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rozpoczyna nową wewnętrzną transakcję usługi kolejkowania komunikatów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>oznacza rozpoczęcie przetwarzania, które zostanie zatwierdzone lub wycofane, w zależności od sukcesu transakcji. Jeśli podczas przetwarzania wystąpi wyjątek, cała transakcja zostanie wycofana. Obejmuje to wszystkie komunikaty wysłane lub odebrane po wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  
  
 Zazwyczaj jeden <xref:System.Messaging.MessageQueueTransaction.Begin%2A> wywołuje wywołanie `Try...Catch` w bloku obsługi wyjątków <xref:System.Messaging.MessageQueueTransaction.Commit%2A> , wywołując wywołanie w `Try` klauzuli i wywołanie do <xref:System.Messaging.MessageQueueTransaction.Abort%2A> w `Catch` klauzuli.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Transakcja została już uruchomiona.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Wystąpił wewnętrzny błąd usługi kolejkowania komunikatów.</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberSignature Language="F#" Value="member this.Commit : unit -&gt; unit" Usage="messageQueueTransaction.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zatwierdza oczekującą wewnętrzną transakcję.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Commit%2A>oznacza pomyślne zakończenie przetwarzania rozpoczęte w wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>. Jeśli wystąpi wyjątek między wywołaniem <xref:System.Messaging.MessageQueueTransaction.Begin%2A> i <xref:System.Messaging.MessageQueueTransaction.Commit%2A>wywołaniem, cała transakcja jest wycofywana. Obejmuje to wszystkie komunikaty wysłane lub odebrane po wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  
  
 Zazwyczaj jeden <xref:System.Messaging.MessageQueueTransaction.Begin%2A> wywołuje wywołanie `Try...Catch` w bloku obsługi wyjątków <xref:System.Messaging.MessageQueueTransaction.Commit%2A> , wywołując wywołanie w `Try` klauzuli i wywołanie do <xref:System.Messaging.MessageQueueTransaction.Abort%2A> w `Catch` klauzuli.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Transakcja, którą próbujesz zatwierdzić, nie została rozpoczęta.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Wystąpił wewnętrzny błąd usługi kolejkowania komunikatów.</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:System.Messaging.MessageQueueTransaction" />program.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageQueueTransaction.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby używane przez <see cref="T:System.Messaging.MessageQueueTransaction" />program.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> zezwala na przydzielenie zasobów używanych <xref:System.Messaging.MessageQueueTransaction> przez program do innych celów. Aby uzyskać więcej informacji `Dispose`na temat, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md).  
  
 Wszystkie oczekujące transakcje wewnętrzne są wycofywane przez <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>program.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageQueueTransaction.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> do zwolnienia tylko zasobów niezarządzanych.</param>
        <summary>Zwalnia niezarządzane zasoby używane przez <see cref="T:System.Messaging.MessageQueueTransaction" /> program i opcjonalnie zwalnia zarządzane zasoby.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana przez metodę publiczną <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> <xref:System.Object.Finalize%2A> i metodę. `Dispose`wywołuje metodę chronioną `Dispose(Boolean)` `disposing` z parametrem ustawionym `true`na. <xref:System.Object.Finalize%2A>wywołuje `Dispose` `false`z `disposing` ustawionym na.  
  
 Gdy parametr ma wartość `true`, ta metoda zwalnia wszystkie zasoby przechowywane przez wszystkie obiekty zarządzane, do <xref:System.Messaging.MessageQueueTransaction> których odwołują się te odwołania. `disposing` Ta metoda wywołuje `Dispose` metodę każdego przywoływanego obiektu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" />może być wywoływana wiele razy przez inne obiekty. Podczas zastępowania <see langword="Dispose(Boolean)" />należy zachować ostrożność, aby nie odwoływać się do obiektów, które zostały wcześniej usunięte <see langword="Dispose" />w ramach wcześniejszego wywołania do. Aby uzyskać więcej informacji na temat sposobu <see langword="Dispose" />implementacji, zobacz [implementowanie metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
Aby uzyskać więcej informacji <see langword="Dispose" /> na <see langword="Finalize" />temat i, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i [Zastępowanie metody Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</para></block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueTransaction ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageQueueTransaction.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby blokowane przez bieżące wystąpienie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda przesłania <xref:System.Object.Finalize%2A?displayProperty=nameWithType>. Kod aplikacji nie powinien wywoływać tej metody; <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> metoda obiektu jest automatycznie wywoływana podczas wyrzucania elementów bezużytecznych, chyba że finalizacja przez moduł wyrzucania elementów bezużytecznych została wyłączona przez wywołanie <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> metody.  
  
 Aby uzyskać więcej informacji, zobacz [finalizowanie metod i destruktorów](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100)), Oczyszczanie zasobów niezarządzanych i zastępowanie [metody Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)). [](~/docs/standard/garbage-collection/unmanaged.md)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueTransactionStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueTransactionStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueTransaction.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As MessageQueueTransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueueTransactionStatus Status { System::Messaging::MessageQueueTransactionStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Messaging.MessageQueueTransactionStatus" Usage="System.Messaging.MessageQueueTransaction.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueTransactionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera stan transakcji.</summary>
        <value>Jedna z <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> wartości wskazujących, czy transakcja została zatwierdzona, przerwana, zainicjowana lub oczekująca.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu <xref:System.Messaging.MessageQueueTransaction> <xref:System.Messaging.MessageQueueTransaction.Status%2A> wystąpienia klasy jest ono ustawiane przez Konstruktor na. `Initialized` Po <xref:System.Messaging.MessageQueueTransaction.Begin%2A> wywołaniu, ale przed <xref:System.Messaging.MessageQueueTransaction.Abort%2A> <xref:System.Messaging.MessageQueueTransaction.Commit%2A> wywołaniem lub, <xref:System.Messaging.MessageQueueTransaction.Status%2A> jest `Pending`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueTransactionStatus" />
      </Docs>
    </Member>
  </Members>
</Type>
