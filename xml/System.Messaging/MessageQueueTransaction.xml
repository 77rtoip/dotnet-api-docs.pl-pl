<Type Name="MessageQueueTransaction" FullName="System.Messaging.MessageQueueTransaction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4f12a8d9c6a690488981339541fb26547f821bcf" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64012532" /></Metadata><TypeSignature Language="C#" Value="public class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueTransaction extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="F#" Value="type MessageQueueTransaction = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Zawiera wewnętrzny transakcję usługi kolejkowania komunikatów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby wysłać lub odebrać wiadomość jako część transakcji, należy użyć <xref:System.Messaging.MessageQueueTransaction> klasy, aby utworzyć transakcji i przekazać go do przeciążenia <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> metody lub <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> metody, która przyjmuje `transaction` parametru. Komunikaty wysyłane w ramach transakcji musi być wysyłane do kolejek transakcyjnych. Komunikaty odbierane z kolejek transakcyjnych musi zostać odebrana, przy użyciu określonej transakcji.  
  
 Oprócz <xref:System.Messaging.MessageQueue.Receive%2A> metody może odbierać wiadomości przy użyciu określonego identyfikatora lub identyfikator korelacji określony. Zobacz <xref:System.Messaging.MessageQueue.ReceiveById%2A> i <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> metody, aby uzyskać więcej informacji na temat selektywnego odbierania komunikatów z kolejek transakcyjnych.  
  
 Komunikaty wysyłane do kolejki transakcyjne są usuwane, jeśli transakcja została zatwierdzona. Podobnie komunikaty odbierane z kolejek transakcyjnych są zwracane do kolejki, jeśli transakcja zostanie wycofana.  
  
 W przypadku tworzenia wystąpienia <xref:System.Messaging.MessageQueueTransaction> i przekazywać je do odpowiednich przeciążenia <xref:System.Messaging.MessageQueue.Send%2A> metody lub <xref:System.Messaging.MessageQueue.Receive%2A> metodę, aby wysłać komunikat do kolejki nietransakcyjnej lub odebrania komunikatu z kolejki nietransakcyjnej, metoda zgłasza wyjątek Wskazuje "Nieprawidłowe użycie transakcji".  
  
 <xref:System.Messaging.MessageQueueTransaction> jest wątkowości rozpoznające, więc jeśli Twoje stan apartamentu `STA`, transakcji nie można używać w wielu wątkach. Visual Basic ustawia stan wątku głównego do `STA`, więc należy najpierw zastosować <xref:System.MTAThreadAttribute> w `Main` procedurę. W przeciwnym razie wysyła wiadomości transakcyjne przy użyciu innego wątku zgłasza <xref:System.Messaging.MessageQueueException> wyjątku. Należy zastosować <xref:System.MTAThreadAttribute> przy użyciu poniższy fragment.  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>Ten typ jest bezpieczny wątkowo.</threadsafe>
    <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Messaging.MessageQueueTransaction" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor ustawia <xref:System.Messaging.MessageQueueTransaction.Status%2A> właściwość `Initialized`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="messageQueueTransaction.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wycofanie oczekujące wewnętrzną transakcję.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> oznacza niepomyślnych ukończenie procesu uruchomione w wywołaniu do <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  
  
 Zazwyczaj jedną wywołuje <xref:System.Messaging.MessageQueueTransaction.Begin%2A> w ramach `Try...Catch` bloku obsługi wyjątków, umieszczając wywołanie <xref:System.Messaging.MessageQueueTransaction.Commit%2A> w `Try` klauzuli i wywołania <xref:System.Messaging.MessageQueueTransaction.Abort%2A> w `Catch` klauzuli.  
  
 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> wycofanie cała transakcja. Obejmuje to wszystkie wiadomości wysyłane lub odbierane po wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wewnętrzny transakcji, które próbujesz wycofać nie została uruchomiona.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Występuje błąd wewnętrzny usługi kolejkowania komunikatów.</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="messageQueueTransaction.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rozpoczyna nową transakcję wewnętrzną usługę kolejkowania komunikatów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> oznacza początek przetwarzania, które zostanie przekazana lub wycofana, w zależności od Powodzenie transakcji. Jeśli wystąpi wyjątek podczas przetwarzania, cała transakcja zostanie wycofana. Obejmuje to wszystkie wiadomości wysyłane lub odbierane po wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  
  
 Zazwyczaj jedną wywołuje <xref:System.Messaging.MessageQueueTransaction.Begin%2A> w ramach `Try...Catch` bloku obsługi wyjątków, umieszczając wywołanie <xref:System.Messaging.MessageQueueTransaction.Commit%2A> w `Try` klauzuli i wywołania <xref:System.Messaging.MessageQueueTransaction.Abort%2A> w `Catch` klauzuli.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Transakcja została już uruchomiona.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Występuje błąd wewnętrzny usługi kolejkowania komunikatów.</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberSignature Language="F#" Value="member this.Commit : unit -&gt; unit" Usage="messageQueueTransaction.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zatwierdza oczekujące wewnętrzną transakcję.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Commit%2A> oznacza pomyślne zakończenie przetwarzanie rozpoczęte w wywołaniu do <xref:System.Messaging.MessageQueueTransaction.Begin%2A>. Jeśli wystąpi wyjątek między wywołanie <xref:System.Messaging.MessageQueueTransaction.Begin%2A> i wywołania <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, cała transakcja zostanie wycofana. Obejmuje to wszystkie wiadomości wysyłane lub odbierane po wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  
  
 Zazwyczaj jedną wywołuje <xref:System.Messaging.MessageQueueTransaction.Begin%2A> w ramach `Try...Catch` bloku obsługi wyjątków, umieszczając wywołanie <xref:System.Messaging.MessageQueueTransaction.Commit%2A> w `Try` klauzuli i wywołania <xref:System.Messaging.MessageQueueTransaction.Abort%2A> w `Catch` klauzuli.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Transakcji, które chcesz zatwierdzić nie została uruchomiona.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Występuje błąd wewnętrzny usługi kolejkowania komunikatów.</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:System.Messaging.MessageQueueTransaction" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageQueueTransaction.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez <see cref="T:System.Messaging.MessageQueueTransaction" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> umożliwia zasoby używane przez <xref:System.Messaging.MessageQueueTransaction> zostają przeniesione do innych celów. Aby uzyskać więcej informacji na temat `Dispose`, zobacz [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).  
  
 Wszystkie oczekujące wewnętrzne transakcje są wycofywane <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageQueueTransaction.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko niezarządzane zasoby.</param>
        <summary>Zwalnia zasoby niezarządzane używane przez <see cref="T:System.Messaging.MessageQueueTransaction" /> i opcjonalnie zwalnia zasoby zarządzane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana przez publiczną <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> metody i <xref:System.Object.Finalize%2A> metody. `Dispose` wywołuje chronioną metodę `Dispose(Boolean)` metody z `disposing` parametr `true`. <xref:System.Object.Finalize%2A> wywołuje `Dispose` z `disposing` równa `false`.  
  
 Gdy `disposing` parametr jest `true`, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane że <xref:System.Messaging.MessageQueueTransaction> odwołania. Ta metoda wywołuje `Dispose` metoda każdego obiektu, do którego istnieje odwołanie.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" /> może być wywoływana wiele razy przez inne obiekty. Podczas zastępowania <see langword="Dispose(Boolean)" />, nie należy odwoływać się do obiektów, które zostały wcześniej zlikwidowane wcześniejszym wywołaniem do <see langword="Dispose" />. Aby uzyskać więcej informacji o sposobie wdrażania <see langword="Dispose" />, zobacz [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
Aby uzyskać więcej informacji na temat <see langword="Dispose" /> i <see langword="Finalize" />, zobacz [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) i [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</para></block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueTransaction ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageQueueTransaction.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby blokowane przez bieżące wystąpienie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zastępuje <xref:System.Object.Finalize%2A?displayProperty=nameWithType>. Kod aplikacji nie powinna wywołać tę metodę; obiekt <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> metoda jest wywoływana automatycznie podczas wyrzucania elementów bezużytecznych, chyba że finalizacja przez moduł garbage collector została wyłączona przez wywołanie <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> metody.  
  
 Aby uzyskać więcej informacji, zobacz [Finalize metody i destruktory](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100)), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), i [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueTransactionStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueTransactionStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueTransaction.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As MessageQueueTransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueueTransactionStatus Status { System::Messaging::MessageQueueTransactionStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Messaging.MessageQueueTransactionStatus" Usage="System.Messaging.MessageQueueTransaction.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueTransactionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera stan transakcji.</summary>
        <value>Jedną z <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> wartości, które wskazuje, czy transakcja została zatwierdzona, przerwane i zainicjowany, lub jest w stanie oczekiwania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wystąpienie <xref:System.Messaging.MessageQueueTransaction> klasy została już utworzona, <xref:System.Messaging.MessageQueueTransaction.Status%2A> została ustawiona przez Konstruktor `Initialized`. Po wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A> , ale przed wywołaniem do <xref:System.Messaging.MessageQueueTransaction.Commit%2A> lub <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, <xref:System.Messaging.MessageQueueTransaction.Status%2A> jest `Pending`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueTransactionStatus" />
      </Docs>
    </Member>
  </Members>
</Type>