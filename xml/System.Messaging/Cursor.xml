<Type Name="Cursor" FullName="System.Messaging.Cursor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3229898682b853b3e471f90feae68e1ac6922200" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30457206" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Cursor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Cursor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.Cursor" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Cursor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Cursor sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>A <see cref="T:System.Messaging.Cursor" /> służy do obsługi określonych lokalizacji w <see cref="T:System.Messaging.MessageQueue" /> podczas czytania wiadomości z kolejki.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać kursora dla <xref:System.Messaging.MessageQueue>, wywołaj <xref:System.Messaging.MessageQueue.CreateCursor%2A> metody dla tej kolejki.  
  
 A <xref:System.Messaging.Cursor> jest używany z tych metod jako <xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29> i <xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29> konieczność odczytywać wiadomości, które nie są na początek kolejki. Obejmuje to odczytywanie wiadomości synchronicznie lub asynchronicznie. Kursory nie trzeba używać odczytać tylko do pierwszej wiadomości w kolejce.  
  
 Podczas odczytywania wiadomości w obrębie transakcji, usługi kolejkowania komunikatów nie wycofać ruch kursora Jeśli transakcja została przerwana. Na przykład załóżmy, że istnieje kolejka z dwóch komunikatów A1 i A2. Jeśli usuniesz komunikat A1 znajduje się w transakcji usługi kolejkowania komunikatów przenosi kursor komunikat A2. Jednak jeśli transakcja została przerwana z jakiegokolwiek powodu, wskazujące komunikatów A2 pozostaje wiadomość A1 jest dodanych do kolejki, ale kursor.  
  
 Aby zamknąć kursora, należy wywołać <xref:System.Messaging.Cursor.Close%2A>.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Messaging.MessageQueue.CreateCursor" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Cursor.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka kursora, umożliwiając zwolnić zasoby skojarzone usługi kolejkowania komunikatów.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Messaging.Cursor" />
        <altmember cref="M:System.Messaging.MessageQueue.CreateCursor" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Cursor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez <see cref="T:System.Messaging.Cursor" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Messaging.Cursor" />
        <altmember cref="M:System.Messaging.MessageQueue.CreateCursor" />
      </Docs>
    </Member>
  </Members>
</Type>