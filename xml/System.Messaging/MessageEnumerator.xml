<Type Name="MessageEnumerator" FullName="System.Messaging.MessageEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2e3490f70119c8c572eb3d2d44434ff7788fc926" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69382649" /></Metadata><TypeSignature Language="C#" Value="public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type MessageEnumerator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IEnumerator&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="69739-101">Udostępnia kursor tylko do przodu w celu wyliczenia komunikatów w kolejce komunikatów.</span><span class="sxs-lookup"><span data-stu-id="69739-101">Provides a forward-only cursor to enumerate through messages in a message queue.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69739-102">Służy <xref:System.Messaging.MessageEnumerator> do interakcji dynamicznej z wiadomościami w kolejce.</span><span class="sxs-lookup"><span data-stu-id="69739-102">Use <xref:System.Messaging.MessageEnumerator> for dynamic interaction with messages in a queue.</span></span> <span data-ttu-id="69739-103">Metody dostępne za pomocą <xref:System.Messaging.MessageQueue> klasy mogą zwracać wynik <xref:System.Messaging.MessageEnumerator> wskazujący dynamiczną listę komunikatów w kolejce lub tablicę zawierającą kopię w danym momencie — migawką kolejki w czasie wywołania określonej metody.</span><span class="sxs-lookup"><span data-stu-id="69739-103">Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageEnumerator> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.</span></span>  
  
 <span data-ttu-id="69739-104">W przeciwieństwie do migawki statycznej moduł wyliczający umożliwia modyfikowanie kolekcji.</span><span class="sxs-lookup"><span data-stu-id="69739-104">Unlike a static snapshot, an enumerator allows you to modify the collection.</span></span> <span data-ttu-id="69739-105">Przy użyciu <xref:System.Messaging.MessageEnumerator>, można usunąć komunikaty z kolejki, a zmiana zostanie natychmiast odzwierciedlona w kolejce.</span><span class="sxs-lookup"><span data-stu-id="69739-105">Using a <xref:System.Messaging.MessageEnumerator>, you can remove messages from the queue, and the change is immediately reflected in the queue.</span></span>  
  
 <span data-ttu-id="69739-106">Moduł wyliczający nie usuwa komunikatów z kolejki, gdy wysyła zapytanie do kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-106">An enumerator does not remove the messages from the queue when it queries the queue.</span></span> <span data-ttu-id="69739-107">Zwraca informacje o komunikacie w bieżącym położeniu kursora, ale pozostawia komunikat w kolejce.</span><span class="sxs-lookup"><span data-stu-id="69739-107">It returns information about the message at the current cursor position, but it leaves the message in the queue.</span></span>  
  
 <span data-ttu-id="69739-108">A <xref:System.Messaging.MessageEnumerator> jest kursorem, zainicjowany do szefa listy dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="69739-108">A <xref:System.Messaging.MessageEnumerator> is a cursor, initialized to the head of a dynamic list.</span></span> <span data-ttu-id="69739-109">Kolejność list jest taka sama jak kolejność komunikatów w kolejce, zgodnie z priorytetem wiadomości.</span><span class="sxs-lookup"><span data-stu-id="69739-109">The list order is the same as the order of the messages in the queue, according to message priority.</span></span> <span data-ttu-id="69739-110">Możesz przenieść kursor do pierwszej wiadomości w kolejce przez wywołanie <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</span><span class="sxs-lookup"><span data-stu-id="69739-110">You can move the cursor to the first message in the queue by calling <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</span></span> <span data-ttu-id="69739-111">Po zainicjowaniu modułu wyliczającego możesz użyć <xref:System.Messaging.MessageEnumerator.MoveNext%2A> , aby krokowo przekazywać pozostałe komunikaty.</span><span class="sxs-lookup"><span data-stu-id="69739-111">After the enumerator has been initialized, you can use <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to step forward through the remaining messages.</span></span> <span data-ttu-id="69739-112">Możesz określić, czy poczekać, aż komunikat stanie się dostępny, przekazując do <xref:System.Messaging.MessageEnumerator.MoveNext%2A> metody limit czasu.</span><span class="sxs-lookup"><span data-stu-id="69739-112">You can specify whether to wait for a message to become available by passing a timeout into the <xref:System.Messaging.MessageEnumerator.MoveNext%2A> method.</span></span>  
  
 <span data-ttu-id="69739-113">Ponieważ moduł wyliczający jest dynamiczny, komunikat, który jest dołączany poza bieżącą pozycją kursora (na przykład ze względu na niski priorytet), może być dostępny przez moduł wyliczający.</span><span class="sxs-lookup"><span data-stu-id="69739-113">Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator.</span></span> <span data-ttu-id="69739-114">Nie można uzyskać dostępu do komunikatu wstawionego przed bieżącą pozycją kursora.</span><span class="sxs-lookup"><span data-stu-id="69739-114">A message that is inserted before the cursor's current position cannot be accessed.</span></span> <span data-ttu-id="69739-115">Nie można przejść do tyłu <xref:System.Messaging.MessageEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="69739-115">It is not possible to step backward with a <xref:System.Messaging.MessageEnumerator>.</span></span> <span data-ttu-id="69739-116">Kursor umożliwia przemieszczenie tylko do przodu.</span><span class="sxs-lookup"><span data-stu-id="69739-116">A cursor allows forward-only movement.</span></span> <span data-ttu-id="69739-117"><xref:System.Messaging.MessageEnumerator.Reset%2A> Metoda umożliwia umieszczenie kursora z powrotem na początku kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-117">The <xref:System.Messaging.MessageEnumerator.Reset%2A> method enables you to place the cursor back at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="69739-118"><xref:System.Messaging.MessageEnumerator> Wystąpienia dla danej kolejki działają niezależnie.</span><span class="sxs-lookup"><span data-stu-id="69739-118">Instances of <xref:System.Messaging.MessageEnumerator> for a given queue work independently.</span></span> <span data-ttu-id="69739-119">Można utworzyć dwa <xref:System.Messaging.MessageEnumerator> wystąpienia, które mają zastosowanie do tej samej kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-119">You can create two <xref:System.Messaging.MessageEnumerator> instances that apply to the same queue.</span></span> <span data-ttu-id="69739-120">Zmiany <xref:System.Messaging.MessageEnumerator> wprowadzane do komunikatów w kolejce zostaną natychmiast odzwierciedlone w drugim wyliczeniu, jeśli drugi moduł wyliczający jest umieszczony przed pierwszym.</span><span class="sxs-lookup"><span data-stu-id="69739-120">The changes that one <xref:System.Messaging.MessageEnumerator> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first.</span></span> <span data-ttu-id="69739-121">Jeśli jednak dwa moduły wyliczające mają tę samą pozycję, a jeden z nich usunie komunikat w tym miejscu, zostanie zgłoszony wyjątek, jeśli inny moduł wyliczający spróbuje pobrać wartość <xref:System.Messaging.MessageEnumerator.Current%2A> właściwości w wiadomości teraz usuniętej.</span><span class="sxs-lookup"><span data-stu-id="69739-121">However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <xref:System.Messaging.MessageEnumerator.Current%2A> property on the now-deleted message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="69739-122">Jeśli utworzysz wystąpienie <xref:System.Messaging.MessageQueue> <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> o wartości ustawiony na `true`, żadna inna aplikacja nie będzie mogła modyfikować komunikatów w module wyliczającym, gdy masz połączenie z kolejką.</span><span class="sxs-lookup"><span data-stu-id="69739-122">If you create an instance of <xref:System.Messaging.MessageQueue> with <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> set to `true`, no other application can modify the messages in your enumerator while you have the connection to the queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="69739-123">Poniższy przykład pobiera dynamiczną listę komunikatów w kolejce i zlicza wszystkie komunikaty z <xref:System.Messaging.Message.Priority%2A> właściwością ustawioną na. <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="69739-123">The following example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="messageEnumerator.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="69739-124">Zwalnia zasoby skojarzone z modułem wyliczającym.</span><span class="sxs-lookup"><span data-stu-id="69739-124">Frees the resources associated with the enumerator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69739-125">System operacyjny zachowuje otwarte dojście do kolejki w czasie trwania kursora.</span><span class="sxs-lookup"><span data-stu-id="69739-125">The operating system retains an open handle to the queue during the lifetime of the cursor.</span></span> <span data-ttu-id="69739-126">Po zakończeniu pracy z modułem wyliczającym Wywołaj metodę <xref:System.Messaging.MessageEnumerator.Close%2A> zwolnienia zasobów skojarzonych z dojściem.</span><span class="sxs-lookup"><span data-stu-id="69739-126">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release the resources associated with the handle.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Current { System::Messaging::Message ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Messaging.Message" Usage="System.Messaging.MessageEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="69739-127">Pobiera bieżącą <see cref="T:System.Messaging.Message" /> , do której wskazuje ten moduł wyliczający.</span><span class="sxs-lookup"><span data-stu-id="69739-127">Gets the current <see cref="T:System.Messaging.Message" /> that this enumerator points to.</span></span></summary>
        <value><span data-ttu-id="69739-128">Bieżący komunikat.</span><span class="sxs-lookup"><span data-stu-id="69739-128">The current message.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69739-129">Po utworzeniu modułu wyliczającego wskazuje on nagłówek kolejki w lokalizacji przed pierwszą wiadomością.</span><span class="sxs-lookup"><span data-stu-id="69739-129">When the enumerator is created, it points to the head of the queue, at a location before the first message.</span></span> <span data-ttu-id="69739-130">W tym przypadku jest <xref:System.Messaging.MessageEnumerator.Current%2A> nieprawidłowa i zgłosi wyjątek, jeśli jest dostępny.</span><span class="sxs-lookup"><span data-stu-id="69739-130">In this case, <xref:System.Messaging.MessageEnumerator.Current%2A> is not valid and will throw an exception if it is accessed.</span></span> <span data-ttu-id="69739-131">Musisz wywołać <xref:System.Messaging.MessageEnumerator.MoveNext%2A> , aby umieścić kursor na pierwszej wiadomości w kolejce.</span><span class="sxs-lookup"><span data-stu-id="69739-131">You must call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to position the cursor at the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="69739-132">Wywołano <see cref="P:System.Messaging.MessageEnumerator.Current" /> przed pierwszym wywołaniem do <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span><span class="sxs-lookup"><span data-stu-id="69739-132">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> before the first call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span></span> <span data-ttu-id="69739-133">Kursor znajduje się przed pierwszym elementem wyliczenia komunikatów.</span><span class="sxs-lookup"><span data-stu-id="69739-133">The cursor is located before the first element of the message enumeration.</span></span>  
  
<span data-ttu-id="69739-134">—lub—</span><span class="sxs-lookup"><span data-stu-id="69739-134">-or-</span></span> 
<span data-ttu-id="69739-135">Wywołano <see cref="P:System.Messaging.MessageEnumerator.Current" /> po <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> wywołaniu zwróconego <see langword="false" /> (wskazujące, że kursor znajduje się po ostatnim elemencie wyliczenia wiadomości).</span><span class="sxs-lookup"><span data-stu-id="69739-135">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> after a call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> had returned <see langword="false" /> (indicating the cursor is located after the last element of the message enumeration.)</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="69739-136">Komunikat, który jest obecnie wskazywany przez moduł wyliczający, już nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="69739-136">The message the enumerator is currently pointing to no longer exists.</span></span> <span data-ttu-id="69739-137">Mógł zostać usunięty.</span><span class="sxs-lookup"><span data-stu-id="69739-137">It might have been deleted.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="CursorHandle">
      <MemberSignature Language="C#" Value="public IntPtr CursorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int CursorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CursorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr CursorHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.CursorHandle : nativeint" Usage="System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="69739-138">Pobiera natywne dojście kursora usługi kolejkowania komunikatów używane do przeglądania komunikatów w kolejce.</span><span class="sxs-lookup"><span data-stu-id="69739-138">Gets the native Message Queuing cursor handle used to browse messages in the queue.</span></span></summary>
        <value><span data-ttu-id="69739-139">Natywny uchwyt kursora.</span><span class="sxs-lookup"><span data-stu-id="69739-139">The native cursor handle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69739-140">Ta właściwość zawiera natywne dojście do wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="69739-140">This property contains the native handle to the enumeration.</span></span> <span data-ttu-id="69739-141">Po zakończeniu pracy z modułem wyliczającym Wywołaj <xref:System.Messaging.MessageEnumerator.Close%2A> polecenie Zwolnij ten zasób.</span><span class="sxs-lookup"><span data-stu-id="69739-141">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release this resource.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="69739-142">Dojście nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="69739-142">The handle does not exist.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="69739-143">Zwalnia zasoby używane przez <see cref="T:System.Messaging.MessageEnumerator" />program.</span><span class="sxs-lookup"><span data-stu-id="69739-143">Releases the resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="69739-144">Zwalnia wszystkie zasoby używane przez <see cref="T:System.Messaging.MessageEnumerator" />program.</span><span class="sxs-lookup"><span data-stu-id="69739-144">Releases all resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69739-145">Wywołanie <xref:System.Messaging.MessageEnumerator.Dispose%2A> zezwala na przydzielenie zasobów używanych <xref:System.Messaging.MessageEnumerator> przez program do innych celów.</span><span class="sxs-lookup"><span data-stu-id="69739-145">Calling <xref:System.Messaging.MessageEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageEnumerator> to be reallocated for other purposes.</span></span> <span data-ttu-id="69739-146">Aby uzyskać więcej informacji <xref:System.Messaging.MessageEnumerator.Dispose%2A>na temat, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="69739-146">For more information about <xref:System.Messaging.MessageEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md"><span data-ttu-id="69739-147">Oczyszczanie zasobów niezarządzanych</span><span class="sxs-lookup"><span data-stu-id="69739-147">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageEnumerator.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="69739-148"><see langword="true" />Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> do zwolnienia tylko zasobów niezarządzanych.</span><span class="sxs-lookup"><span data-stu-id="69739-148"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="69739-149">Zwalnia niezarządzane zasoby używane przez <see cref="T:System.Messaging.MessageEnumerator" /> program i opcjonalnie zwalnia zarządzane zasoby.</span><span class="sxs-lookup"><span data-stu-id="69739-149">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageEnumerator" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69739-150">Ta metoda jest wywoływana przez metodę publiczną <xref:System.Messaging.MessageEnumerator.Dispose%2A> <xref:System.Object.Finalize%2A> i metodę.</span><span class="sxs-lookup"><span data-stu-id="69739-150">This method is called by the public <xref:System.Messaging.MessageEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="69739-151">`Dispose()`wywołuje metodę chronioną `Dispose(Boolean)` `disposing` z parametrem ustawionym `true`na.</span><span class="sxs-lookup"><span data-stu-id="69739-151">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="69739-152"><xref:System.Object.Finalize%2A>wywołuje `Dispose` `false`z `disposing` ustawionym na.</span><span class="sxs-lookup"><span data-stu-id="69739-152"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="69739-153">Gdy parametr ma wartość `true`, ta metoda zwalnia wszystkie zasoby przechowywane przez wszystkie obiekty zarządzane, do <xref:System.Messaging.MessageEnumerator> których odwołują się te odwołania. `disposing`</span><span class="sxs-lookup"><span data-stu-id="69739-153">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageEnumerator> references.</span></span> <span data-ttu-id="69739-154">Ta metoda wywołuje `Dispose()` metodę każdego przywoływanego obiektu.</span><span class="sxs-lookup"><span data-stu-id="69739-154">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="69739-155">
            <see langword="Dispose" />może być wywoływana wiele razy przez inne obiekty.</span><span class="sxs-lookup"><span data-stu-id="69739-155">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="69739-156">Podczas zastępowania <see langword="Dispose(Boolean)" />należy zachować ostrożność, aby nie odwoływać się do obiektów, które zostały wcześniej usunięte <see langword="Dispose" />w ramach wcześniejszego wywołania do.</span><span class="sxs-lookup"><span data-stu-id="69739-156">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="69739-157">Aby uzyskać więcej informacji na temat sposobu <see langword="Dispose" />implementacji, zobacz [implementowanie metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="69739-157">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="69739-158">Aby uzyskać więcej informacji <see langword="Dispose" /> na <see langword="Finalize" />temat i, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i [Zastępowanie metody Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span><span class="sxs-lookup"><span data-stu-id="69739-158">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="69739-159">Implementowanie metody Dispose</span><span class="sxs-lookup"><span data-stu-id="69739-159">Implementing a Dispose method</span></span></related>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md"><span data-ttu-id="69739-160">Oczyszczanie zasobów niezarządzanych</span><span class="sxs-lookup"><span data-stu-id="69739-160">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageEnumerator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageEnumerator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="69739-161">Zwalnia zasoby przechowywane przez moduł wyliczający.</span><span class="sxs-lookup"><span data-stu-id="69739-161">Releases the resources held by the enumerator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="69739-162">Ta metoda przesłania <xref:System.Object.Finalize>.</span><span class="sxs-lookup"><span data-stu-id="69739-162">This method overrides <xref:System.Object.Finalize>.</span></span> <span data-ttu-id="69739-163">Kod aplikacji nie powinien wywoływać tej metody; Metoda Finalize obiektu jest automatycznie wywoływana podczas wyrzucania elementów bezużytecznych, chyba że finalizacja przez moduł wyrzucania elementów bezużytecznych <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> została wyłączona przez wywołanie metody.</span><span class="sxs-lookup"><span data-stu-id="69739-163">Application code should not call this method; an object's Finalize method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>

<span data-ttu-id="69739-164">Aby uzyskać więcej informacji, zobacz [finalizowanie metod i destruktorów](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100)), Oczyszczanie zasobów niezarządzanych i zastępowanie [metody Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)). [](~/docs/standard/garbage-collection/unmanaged.md)</span><span class="sxs-lookup"><span data-stu-id="69739-164">For more information, see [Finalize Methods and Destructors](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100)), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveNext">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="69739-165">Przesuwa moduł wyliczający do następnej wiadomości w kolejce.</span><span class="sxs-lookup"><span data-stu-id="69739-165">Advances the enumerator to the next message in the queue.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="messageEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="69739-166">Przesuwa moduł wyliczający do następnej wiadomości w kolejce, jeśli jest ona obecnie dostępna.</span><span class="sxs-lookup"><span data-stu-id="69739-166">Advances the enumerator to the next message in the queue, if one is currently available.</span></span></summary>
        <returns><span data-ttu-id="69739-167"><see langword="true" />Jeśli moduł wyliczający został pomyślnie zaawansowana do następnej wiadomości; <see langword="false" /> Jeśli moduł wyliczający osiągnął koniec kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-167"><see langword="true" /> if the enumerator was successfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69739-168">To Przeciążenie zwraca natychmiast, jeśli w kolejce nie ma komunikatu.</span><span class="sxs-lookup"><span data-stu-id="69739-168">This overload returns immediately if there is no message in the queue.</span></span> <span data-ttu-id="69739-169">Istnieje inne Przeciążenie, które oczekuje na nadejście określonego <xref:System.TimeSpan> komunikatu.</span><span class="sxs-lookup"><span data-stu-id="69739-169">There is another overload that waits a specified <xref:System.TimeSpan> for a message to arrive.</span></span>  
  
 <span data-ttu-id="69739-170">Jeśli komunikat nie jest obecnie dostępny, ponieważ kolejka jest pusta lub przeniesiono poza ostatni element w kolekcji, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> wraca `false` do metody wywołującej.</span><span class="sxs-lookup"><span data-stu-id="69739-170">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> returns `false` to the calling method.</span></span>  
  
 <span data-ttu-id="69739-171">Po utworzeniu moduł wyliczający jest koncepcyjnie pozycjonowany przed pierwszym komunikatem kolejki, a pierwsze wywołanie, aby <xref:System.Messaging.MessageEnumerator.MoveNext%2A> przywrócić pierwszy komunikat kolejki do widoku.</span><span class="sxs-lookup"><span data-stu-id="69739-171">Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the queue into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="69739-172">Zgłoszono wyjątek specyficzny dla usługi kolejkowania komunikatów.</span><span class="sxs-lookup"><span data-stu-id="69739-172">An exception specific to Message Queuing was thrown.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.MoveNext : TimeSpan -&gt; bool" Usage="messageEnumerator.MoveNext timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="69739-173"><see cref="T:System.TimeSpan" /> Czas oczekiwania na udostępnienie komunikatu, jeśli moduł wyliczający jest umieszczony na końcu kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-173">The <see cref="T:System.TimeSpan" /> to wait for a message to be available if the enumerator is positioned at the end of the queue.</span></span></param>
        <summary><span data-ttu-id="69739-174">Przesuwa moduł wyliczający do następnej wiadomości w kolejce.</span><span class="sxs-lookup"><span data-stu-id="69739-174">Advances the enumerator to the next message in the queue.</span></span> <span data-ttu-id="69739-175">Jeśli moduł wyliczający jest umieszczony na końcu kolejki, czeka, <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> aż wiadomość zostanie udostępniona lub upłynie limit czasu.</span><span class="sxs-lookup"><span data-stu-id="69739-175">If the enumerator is positioned at the end of the queue, <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> waits until a message is available or the given timeout expires.</span></span></summary>
        <returns><span data-ttu-id="69739-176"><see langword="true" />Jeśli moduł wyliczający został pomyślnie zaawansowani do następnej wiadomości; Jeśli moduł wyliczający osiągnął koniec kolejki, a komunikat nie stanie się dostępny w czasie określonym <paramref name="timeout" /> przez parametr. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="69739-176"><see langword="true" /> if the enumerator successfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <paramref name="timeout" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69739-177">To Przeciążenie oczekuje, że w kolejce nie ma komunikatu lub jeśli kursor osiągnął koniec kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-177">This overload waits if there is no message in the queue or if the cursor has reached the end of the queue.</span></span> <span data-ttu-id="69739-178">Jeśli komunikat nie jest obecnie dostępny, ponieważ kolejka jest pusta lub przeniesiono poza ostatni element w kolekcji, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> czeka na określony limit czasu.</span><span class="sxs-lookup"><span data-stu-id="69739-178">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> waits the specified timeout.</span></span>  
  
 <span data-ttu-id="69739-179">Jeśli kursor znajduje się już na końcu kolejki, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> zwraca `true` tylko wtedy, gdy nowy komunikat dociera do określonego interwału czasu, ma niższy priorytet niż wszystkie komunikaty w kolejce i są umieszczane na końcu kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-179">If the cursor is already at the end of the queue, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> only returns `true` if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue.</span></span> <span data-ttu-id="69739-180">Przeciążenie bez parametru zwraca wartość natychmiast, jeśli w kolejce nie ma dalszych komunikatów.</span><span class="sxs-lookup"><span data-stu-id="69739-180">An overload with no parameter returns immediately if no further messages are in the queue.</span></span>  
  
 <span data-ttu-id="69739-181">Po utworzeniu moduł wyliczający jest koncepcyjnie pozycjonowany przed pierwszym komunikatem wyliczenia, a pierwsze wywołanie, aby <xref:System.Messaging.MessageEnumerator.MoveNext%2A> przywrócić pierwszy komunikat wyliczenia do widoku.</span><span class="sxs-lookup"><span data-stu-id="69739-181">Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the enumeration into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="69739-182">Wartość określona dla parametru timeout jest nieprawidłowa.</span><span class="sxs-lookup"><span data-stu-id="69739-182">The value specified for the timeout parameter is invalid.</span></span> <span data-ttu-id="69739-183">Może reprezentować liczbę ujemną.</span><span class="sxs-lookup"><span data-stu-id="69739-183">It might represent a negative number.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="69739-184">Zgłoszono wyjątek specyficzny dla usługi kolejkowania komunikatów.</span><span class="sxs-lookup"><span data-stu-id="69739-184">An exception specific to Message Queuing was thrown.</span></span>  
  
 <span data-ttu-id="69739-185">—lub—</span><span class="sxs-lookup"><span data-stu-id="69739-185">-or-</span></span>  
  
 <span data-ttu-id="69739-186">Upłynął limit czasu.</span><span class="sxs-lookup"><span data-stu-id="69739-186">The timeout has expired.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveCurrent">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="69739-187">Usuwa bieżący komunikat z kolejki i zwraca komunikat do aplikacji wywołującej.</span><span class="sxs-lookup"><span data-stu-id="69739-187">Removes the current message from the queue and returns the message to the calling application.</span></span> <span data-ttu-id="69739-188">Usunięcie wiadomości spowoduje usunięcie jej z kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-188">Removing the message deletes it from the queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69739-189">Zachowanie opisane dla tych przeciążeń ma zastosowanie tylko wtedy <xref:System.Messaging.MessageEnumerator> , gdy wystąpienie jest pobierane przy <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>użyciu.</span><span class="sxs-lookup"><span data-stu-id="69739-189">The behavior described for these overloads is applicable only if the <xref:System.Messaging.MessageEnumerator> instance is retrieved by using the <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>.</span></span> <span data-ttu-id="69739-190">Nie należy używać <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> do pobierania <xref:System.Messaging.MessageEnumerator> wystąpienia, ponieważ ta metoda jest przestarzała.</span><span class="sxs-lookup"><span data-stu-id="69739-190">Do not use <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> to retrieve an instance of <xref:System.Messaging.MessageEnumerator> as this method has been deprecated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent();" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : unit -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="69739-191">Usuwa bieżącą wiadomość z kolejki transakcyjnej lub nietransakcyjnej oraz zwraca komunikat do aplikacji wywołującej.</span><span class="sxs-lookup"><span data-stu-id="69739-191">Removes the current message from a transactional or non-transactional queue and returns the message to the calling application.</span></span> <span data-ttu-id="69739-192">Nie określono limitu czasu dla wiadomości, która ma zostać dostarczona do kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-192">There is no timeout specified for a message to arrive in the queue.</span></span></summary>
        <returns><span data-ttu-id="69739-193"><see cref="T:System.Messaging.Message" /> , Który odwołuje się do pierwszego komunikatu dostępnego w kolejce.</span><span class="sxs-lookup"><span data-stu-id="69739-193">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69739-194"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>usuwa i zwraca komunikat w bieżącej lokalizacji kursora.</span><span class="sxs-lookup"><span data-stu-id="69739-194"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span>  
  
 <span data-ttu-id="69739-195">W przypadku korzystania z funkcji rejestrowania w kolejce usunięcie komunikatu powoduje, że kopia zostanie zachowana w kolejce dziennika, tak jak w <xref:System.Messaging.MessageQueue> przypadku <xref:System.Messaging.MessageQueue.Receive%2A> metody klasy.</span><span class="sxs-lookup"><span data-stu-id="69739-195">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="69739-196">Po usunięciu bieżącej wiadomości kursor zostanie przeniesiony do następnego komunikatu.</span><span class="sxs-lookup"><span data-stu-id="69739-196">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="69739-197">Nie ma potrzeby wywoływania <xref:System.Messaging.MessageEnumerator.MoveNext%2A> po wywołaniu. <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A></span><span class="sxs-lookup"><span data-stu-id="69739-197">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="69739-198">W przypadku wywołania tego przeciążenia w kolejce transakcyjnej usługa kolejkowania komunikatów tworzy pojedynczą transakcję wewnętrzną.</span><span class="sxs-lookup"><span data-stu-id="69739-198">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="transaction"><span data-ttu-id="69739-199"><see cref="T:System.Messaging.MessageQueueTransaction" /> Obiekt, który określa transakcję, w której zostanie usunięty komunikat.</span><span class="sxs-lookup"><span data-stu-id="69739-199">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction in which the message will be removed.</span></span></param>
        <summary><span data-ttu-id="69739-200">Usuwa bieżącą wiadomość z kolejki transakcyjnej i zwraca komunikat do aplikacji wywołującej.</span><span class="sxs-lookup"><span data-stu-id="69739-200">Removes the current message from a transactional queue and returns the message to the calling application.</span></span> <span data-ttu-id="69739-201">Nie określono limitu czasu dla wiadomości, która ma zostać dostarczona do kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-201">There is no timeout specified for a message to arrive in the queue.</span></span></summary>
        <returns><span data-ttu-id="69739-202"><see cref="T:System.Messaging.Message" /> , Który odwołuje się do pierwszego komunikatu dostępnego w kolejce.</span><span class="sxs-lookup"><span data-stu-id="69739-202">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69739-203"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>usuwa i zwraca komunikat w bieżącej lokalizacji kursora przy użyciu wewnętrznego kontekstu transakcji zdefiniowanego przez `transaction` parametr.</span><span class="sxs-lookup"><span data-stu-id="69739-203"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using the internal transaction context defined by the `transaction` parameter.</span></span>  
  
 <span data-ttu-id="69739-204">W przypadku korzystania z funkcji rejestrowania w kolejce usunięcie komunikatu powoduje, że kopia zostanie zachowana w kolejce dziennika, tak jak w <xref:System.Messaging.MessageQueue> przypadku <xref:System.Messaging.MessageQueue.Receive%2A> metody klasy.</span><span class="sxs-lookup"><span data-stu-id="69739-204">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="69739-205">Podczas pracy z kolejkami transakcyjnymi wycofywanie transakcji powoduje zwrócenie wszelkich komunikatów usuniętych przez wywołanie <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> do kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-205">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="69739-206">Usunięcie nie jest nieodwracalne, dopóki transakcja nie zostanie zatwierdzona.</span><span class="sxs-lookup"><span data-stu-id="69739-206">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="69739-207">Po usunięciu bieżącej wiadomości kursor zostanie przeniesiony do następnego komunikatu.</span><span class="sxs-lookup"><span data-stu-id="69739-207">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="69739-208">Nie ma potrzeby wywoływania <xref:System.Messaging.MessageEnumerator.MoveNext%2A> po wywołaniu. <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A></span><span class="sxs-lookup"><span data-stu-id="69739-208">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="69739-209">Parametr ma wartość <see langword="null" />. <paramref name="transaction" /></span><span class="sxs-lookup"><span data-stu-id="69739-209">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transactionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="transactionType"><span data-ttu-id="69739-210">Jedna z <see cref="T:System.Messaging.MessageQueueTransactionType" /> wartości opisująca typ kontekstu transakcji, który ma zostać skojarzony z wiadomością.</span><span class="sxs-lookup"><span data-stu-id="69739-210">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="69739-211">Usuwa bieżący komunikat z kolejki i zwraca komunikat do aplikacji wywołującej.</span><span class="sxs-lookup"><span data-stu-id="69739-211">Removes the current message from a queue and returns the message to the calling application.</span></span> <span data-ttu-id="69739-212">Nie określono limitu czasu dla wiadomości, która ma zostać dostarczona do kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-212">There is no timeout specified for a message to arrive in the queue.</span></span></summary>
        <returns><span data-ttu-id="69739-213"><see cref="T:System.Messaging.Message" /> , Który odwołuje się do pierwszego komunikatu dostępnego w kolejce.</span><span class="sxs-lookup"><span data-stu-id="69739-213">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69739-214"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>usuwa i zwraca komunikat w bieżącej lokalizacji kursora przy użyciu kontekstu transakcji zdefiniowanego przez `transactionType` parametr.</span><span class="sxs-lookup"><span data-stu-id="69739-214"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span>  
  
 <span data-ttu-id="69739-215">`Automatic` Określ`transactionType` dla parametru, jeśli istnieje już zewnętrzny kontekst transakcji dołączony do wątku, który ma być używany do odbierania wiadomości.</span><span class="sxs-lookup"><span data-stu-id="69739-215">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="69739-216">Określ `Single` , czy chcesz otrzymywać komunikat jako pojedynczą transakcję wewnętrzną.</span><span class="sxs-lookup"><span data-stu-id="69739-216">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="69739-217">Możesz określić `None` , czy chcesz otrzymywać komunikat z kolejki transakcyjnej poza kontekstem transakcji.</span><span class="sxs-lookup"><span data-stu-id="69739-217">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="69739-218">W przypadku korzystania z funkcji rejestrowania w kolejce usunięcie komunikatu powoduje, że kopia zostanie zachowana w kolejce dziennika, tak jak w <xref:System.Messaging.MessageQueue> przypadku <xref:System.Messaging.MessageQueue.Receive%2A> metody klasy.</span><span class="sxs-lookup"><span data-stu-id="69739-218">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="69739-219">Podczas pracy z kolejkami transakcyjnymi wycofywanie transakcji powoduje zwrócenie wszelkich komunikatów usuniętych przez wywołanie <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> do kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-219">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="69739-220">Usunięcie nie jest nieodwracalne, dopóki transakcja nie zostanie zatwierdzona.</span><span class="sxs-lookup"><span data-stu-id="69739-220">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="69739-221">Po usunięciu bieżącej wiadomości kursor zostanie przeniesiony do następnego komunikatu.</span><span class="sxs-lookup"><span data-stu-id="69739-221">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="69739-222">Nie ma potrzeby wywoływania <xref:System.Messaging.MessageEnumerator.MoveNext%2A> po wywołaniu. <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A></span><span class="sxs-lookup"><span data-stu-id="69739-222">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="69739-223">Parametr nie jest jednym <see cref="T:System.Messaging.MessageQueueTransactionType" /> z elementów członkowskich. <paramref name="transactionType" /></span><span class="sxs-lookup"><span data-stu-id="69739-223">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="69739-224">Przedział czasu oczekiwania na nadejście komunikatu w kolejce.</span><span class="sxs-lookup"><span data-stu-id="69739-224">The interval of time to wait for a message to arrive in the queue.</span></span></param>
        <summary><span data-ttu-id="69739-225">Usuwa bieżący komunikat z kolejki i zwraca komunikat do aplikacji wywołującej.</span><span class="sxs-lookup"><span data-stu-id="69739-225">Removes the current message from the queue and returns the message to the calling application.</span></span> <span data-ttu-id="69739-226">Jeśli istnieje komunikat do usunięcia, Metoda natychmiast zwróci ją.</span><span class="sxs-lookup"><span data-stu-id="69739-226">If there is a message to remove, the method returns it immediately.</span></span> <span data-ttu-id="69739-227">W przeciwnym razie metoda czeka określony limit czasu na nadejście nowej wiadomości.</span><span class="sxs-lookup"><span data-stu-id="69739-227">Otherwise, the method waits the specified timeout for a new message to arrive.</span></span></summary>
        <returns><span data-ttu-id="69739-228"><see cref="T:System.Messaging.Message" /> , Który odwołuje się do pierwszego komunikatu dostępnego w kolejce.</span><span class="sxs-lookup"><span data-stu-id="69739-228">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69739-229"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>usuwa i zwraca komunikat w bieżącej lokalizacji kursora.</span><span class="sxs-lookup"><span data-stu-id="69739-229"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="69739-230">Jeśli kursor znajduje się na końcu kolejki, to Przeciążenie metody będzie oczekiwać do momentu udostępnienia komunikatu lub interwału określonego przez `timeout` parametr.</span><span class="sxs-lookup"><span data-stu-id="69739-230">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="69739-231">W przypadku korzystania z funkcji rejestrowania w kolejce usunięcie komunikatu powoduje, że kopia zostanie zachowana w kolejce dziennika, tak jak w <xref:System.Messaging.MessageQueue> przypadku <xref:System.Messaging.MessageQueue.Receive%2A> metody klasy.</span><span class="sxs-lookup"><span data-stu-id="69739-231">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="69739-232">Po usunięciu bieżącej wiadomości kursor zostanie przeniesiony do następnego komunikatu.</span><span class="sxs-lookup"><span data-stu-id="69739-232">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="69739-233">Nie ma potrzeby wywoływania <xref:System.Messaging.MessageEnumerator.MoveNext%2A> po wywołaniu. <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A></span><span class="sxs-lookup"><span data-stu-id="69739-233">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="69739-234">W przypadku wywołania tego przeciążenia w kolejce transakcyjnej usługa kolejkowania komunikatów tworzy pojedynczą transakcję wewnętrzną.</span><span class="sxs-lookup"><span data-stu-id="69739-234">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="69739-235">Wartość określona dla <paramref name="timeout" /> parametru jest nieprawidłowa.</span><span class="sxs-lookup"><span data-stu-id="69739-235">The value specified for the <paramref name="timeout" /> parameter is invalid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="69739-236">Upłynął limit czasu.</span><span class="sxs-lookup"><span data-stu-id="69739-236">The timeout has expired.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="69739-237">Przedział czasu oczekiwania na usunięcie wiadomości.</span><span class="sxs-lookup"><span data-stu-id="69739-237">The interval of time to wait for the message to be removed.</span></span></param>
        <param name="transaction"><span data-ttu-id="69739-238"><see cref="T:System.Messaging.MessageQueueTransaction" /> Obiekt, który określa kontekst transakcji dla wiadomości.</span><span class="sxs-lookup"><span data-stu-id="69739-238">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction context for the message.</span></span></param>
        <summary><span data-ttu-id="69739-239">Usuwa bieżącą wiadomość z kolejki transakcyjnej i zwraca komunikat do aplikacji wywołującej.</span><span class="sxs-lookup"><span data-stu-id="69739-239">Removes the current message from a transactional queue and returns the message to the calling application.</span></span> <span data-ttu-id="69739-240">Jeśli istnieje komunikat do usunięcia, Metoda natychmiast zwróci ją.</span><span class="sxs-lookup"><span data-stu-id="69739-240">If there is a message to remove, the method returns it immediately.</span></span> <span data-ttu-id="69739-241">W przeciwnym razie metoda czeka określony limit czasu na nadejście nowej wiadomości.</span><span class="sxs-lookup"><span data-stu-id="69739-241">Otherwise, the method waits the specified timeout for a new message to arrive.</span></span></summary>
        <returns><span data-ttu-id="69739-242"><see cref="T:System.Messaging.Message" /> , Który odwołuje się do pierwszego komunikatu dostępnego w kolejce.</span><span class="sxs-lookup"><span data-stu-id="69739-242">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69739-243"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>usuwa i zwraca komunikat w bieżącej lokalizacji kursora.</span><span class="sxs-lookup"><span data-stu-id="69739-243"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="69739-244">Jeśli kursor znajduje się na końcu kolejki, to Przeciążenie metody będzie oczekiwać do momentu udostępnienia komunikatu lub interwału określonego przez `timeout` parametr.</span><span class="sxs-lookup"><span data-stu-id="69739-244">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="69739-245">Podczas pracy z kolejkami transakcyjnymi wycofywanie transakcji powoduje zwrócenie wszelkich komunikatów usuniętych przez wywołanie <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> do kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-245">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="69739-246">Usunięcie nie jest nieodwracalne, dopóki transakcja nie zostanie zatwierdzona.</span><span class="sxs-lookup"><span data-stu-id="69739-246">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="69739-247">W przypadku korzystania z funkcji rejestrowania w kolejce usunięcie komunikatu powoduje, że kopia zostanie zachowana w kolejce dziennika, tak jak w <xref:System.Messaging.MessageQueue> przypadku <xref:System.Messaging.MessageQueue.Receive%2A> metody klasy.</span><span class="sxs-lookup"><span data-stu-id="69739-247">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="69739-248">Po usunięciu bieżącej wiadomości kursor zostanie przeniesiony do następnego komunikatu.</span><span class="sxs-lookup"><span data-stu-id="69739-248">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="69739-249">Nie ma potrzeby wywoływania <xref:System.Messaging.MessageEnumerator.MoveNext%2A> po wywołaniu. <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A></span><span class="sxs-lookup"><span data-stu-id="69739-249">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="69739-250">Wartość określona dla <paramref name="timeout" /> parametru jest nieprawidłowa.</span><span class="sxs-lookup"><span data-stu-id="69739-250">The value specified for the <paramref name="timeout" /> parameter is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="69739-251">Parametr ma wartość <see langword="null" />. <paramref name="transaction" /></span><span class="sxs-lookup"><span data-stu-id="69739-251">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="69739-252">Upłynął limit czasu.</span><span class="sxs-lookup"><span data-stu-id="69739-252">The timeout has expired.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="69739-253">Przedział czasu oczekiwania na usunięcie wiadomości.</span><span class="sxs-lookup"><span data-stu-id="69739-253">The interval of time to wait for the message to be removed.</span></span></param>
        <param name="transactionType"><span data-ttu-id="69739-254">Jedna z <see cref="T:System.Messaging.MessageQueueTransactionType" /> wartości opisująca typ kontekstu transakcji, który ma zostać skojarzony z wiadomością.</span><span class="sxs-lookup"><span data-stu-id="69739-254">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="69739-255">Usuwa bieżący komunikat z kolejki i zwraca komunikat do aplikacji wywołującej.</span><span class="sxs-lookup"><span data-stu-id="69739-255">Removes the current message from a queue and returns the message to the calling application.</span></span> <span data-ttu-id="69739-256">Jeśli istnieje komunikat do usunięcia, Metoda natychmiast zwróci ją.</span><span class="sxs-lookup"><span data-stu-id="69739-256">If there is a message to remove, the method returns it immediately.</span></span> <span data-ttu-id="69739-257">W przeciwnym razie metoda czeka określony limit czasu na nadejście nowej wiadomości.</span><span class="sxs-lookup"><span data-stu-id="69739-257">Otherwise, the method waits the specified timeout for a new message to arrive.</span></span></summary>
        <returns><span data-ttu-id="69739-258"><see cref="T:System.Messaging.Message" /> , Który odwołuje się do pierwszego komunikatu dostępnego w kolejce.</span><span class="sxs-lookup"><span data-stu-id="69739-258">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69739-259"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>usuwa i zwraca komunikat w bieżącej lokalizacji kursora przy użyciu kontekstu transakcji zdefiniowanego przez `transactionType` parametr.</span><span class="sxs-lookup"><span data-stu-id="69739-259"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span> <span data-ttu-id="69739-260">Jeśli kursor znajduje się na końcu kolejki, to Przeciążenie metody będzie oczekiwać do momentu udostępnienia komunikatu lub interwału określonego przez `timeout` parametr.</span><span class="sxs-lookup"><span data-stu-id="69739-260">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="69739-261">`Automatic` Określ`transactionType` dla parametru, jeśli istnieje już zewnętrzny kontekst transakcji dołączony do wątku, który ma być używany do odbierania wiadomości.</span><span class="sxs-lookup"><span data-stu-id="69739-261">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="69739-262">Określ `Single` , czy chcesz otrzymywać komunikat jako pojedynczą transakcję wewnętrzną.</span><span class="sxs-lookup"><span data-stu-id="69739-262">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="69739-263">Możesz określić `None` , czy chcesz otrzymywać komunikat z kolejki transakcyjnej poza kontekstem transakcji.</span><span class="sxs-lookup"><span data-stu-id="69739-263">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="69739-264">W przypadku korzystania z funkcji rejestrowania w kolejce usunięcie komunikatu powoduje, że kopia zostanie zachowana w kolejce dziennika, tak jak w <xref:System.Messaging.MessageQueue> przypadku <xref:System.Messaging.MessageQueue.Receive%2A> metody klasy.</span><span class="sxs-lookup"><span data-stu-id="69739-264">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="69739-265">Podczas pracy z kolejkami transakcyjnymi wycofywanie transakcji powoduje zwrócenie wszelkich komunikatów usuniętych przez wywołanie <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> do kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-265">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="69739-266">Usunięcie nie jest nieodwracalne, dopóki transakcja nie zostanie zatwierdzona.</span><span class="sxs-lookup"><span data-stu-id="69739-266">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="69739-267">Po usunięciu bieżącej wiadomości kursor zostanie przeniesiony do następnego komunikatu.</span><span class="sxs-lookup"><span data-stu-id="69739-267">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="69739-268">Nie ma potrzeby wywoływania <xref:System.Messaging.MessageEnumerator.MoveNext%2A> po wywołaniu. <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A></span><span class="sxs-lookup"><span data-stu-id="69739-268">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="69739-269">Wartość określona dla <paramref name="timeout" /> parametru jest nieprawidłowa.</span><span class="sxs-lookup"><span data-stu-id="69739-269">The value specified for the <paramref name="timeout" /> parameter is invalid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="69739-270">Upłynął limit czasu.</span><span class="sxs-lookup"><span data-stu-id="69739-270">The timeout has expired.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="69739-271">Parametr nie jest jednym <see cref="T:System.Messaging.MessageQueueTransactionType" /> z elementów członkowskich. <paramref name="transactionType" /></span><span class="sxs-lookup"><span data-stu-id="69739-271">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="messageEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="69739-272">Resetuje bieżący moduł wyliczający, aby wskazywał na nagłówek kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-272">Resets the current enumerator so it points to the head of the queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69739-273">Moduł wyliczający można przenieść tylko w kierunku do przodu.</span><span class="sxs-lookup"><span data-stu-id="69739-273">An enumerator can only move in a forward direction.</span></span> <span data-ttu-id="69739-274">Użyj tej metody, aby zacząć od początku kolejki.</span><span class="sxs-lookup"><span data-stu-id="69739-274">Use this method to start over at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="69739-275">Po wywołaniu <xref:System.Messaging.MessageEnumerator.Reset%2A>kursor wskazuje pierwszy komunikat.</span><span class="sxs-lookup"><span data-stu-id="69739-275">After calling <xref:System.Messaging.MessageEnumerator.Reset%2A>, the cursor points to the first message.</span></span> <span data-ttu-id="69739-276">Nie ma potrzeby wywoływania <xref:System.Messaging.MessageEnumerator.MoveNext%2A> po wywołaniu <xref:System.Messaging.MessageEnumerator.Reset%2A> kursora do pierwszej wiadomości w kolejce.</span><span class="sxs-lookup"><span data-stu-id="69739-276">You do not need to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.Reset%2A> to move the cursor forward to the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="69739-277"><see cref="T:System.Messaging.Message" /> Zwraca odwołanie odwołujące się do komunikatu w bieżącym położeniu kursora.</span><span class="sxs-lookup"><span data-stu-id="69739-277">Returns a <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span></span></summary>
        <value><span data-ttu-id="69739-278">Obiekt <see cref="T:System.Messaging.Message" /> , który odwołuje się do komunikatu w bieżącym położeniu kursora.</span><span class="sxs-lookup"><span data-stu-id="69739-278">A <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="69739-279">Uzyskano dostęp do tej właściwości przed pierwszym wywołaniem do <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span><span class="sxs-lookup"><span data-stu-id="69739-279">You accessed this property before the first call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span></span> <span data-ttu-id="69739-280">Kursor znajduje się przed pierwszym elementem wyliczenia komunikatów.-lub — uzyskano dostęp do tej właściwości po wywołaniu <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> zwraca wartość false (wskazującą, że kursor znajduje się po ostatnim elemencie wyliczenia wiadomości).</span><span class="sxs-lookup"><span data-stu-id="69739-280">The cursor is located before the first element of the message enumeration.-or- You accessed this property after a call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> had returned false (indicating the cursor is located after the last element of the message enumeration.)</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="69739-281">Komunikat, który jest obecnie wskazywany przez moduł wyliczający, już nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="69739-281">The message the enumerator is currently pointing to no longer exists.</span></span> <span data-ttu-id="69739-282">Mógł zostać usunięty.</span><span class="sxs-lookup"><span data-stu-id="69739-282">It might have been deleted.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
