<Type Name="MessageEnumerator" FullName="System.Messaging.MessageEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dfbd83b435486357a91721f19b050fdc1e7aa258" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52611164" /></Metadata><TypeSignature Language="C#" Value="public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type MessageEnumerator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IEnumerator&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="fb156-101">Zawiera tylko do przodu kursora wyliczyć za pośrednictwem wiadomości z kolejki komunikatów.</span><span class="sxs-lookup"><span data-stu-id="fb156-101">Provides a forward-only cursor to enumerate through messages in a message queue.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb156-102">Użyj <xref:System.Messaging.MessageEnumerator> dynamiczne interakcji z komunikatów w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-102">Use <xref:System.Messaging.MessageEnumerator> for dynamic interaction with messages in a queue.</span></span> <span data-ttu-id="fb156-103">Dostępne za pośrednictwem metody <xref:System.Messaging.MessageQueue> klasy może zwracać albo <xref:System.Messaging.MessageEnumerator> wskazuje dynamiczną listę komunikatów w kolejce lub tablica, która zawiera kopię w danej chwili — migawki - kolejki w czasie określonej metody została wywołana.</span><span class="sxs-lookup"><span data-stu-id="fb156-103">Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageEnumerator> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.</span></span>  
  
 <span data-ttu-id="fb156-104">W przeciwieństwie do statycznej migawki moduł wyliczający umożliwia modyfikowanie kolekcji.</span><span class="sxs-lookup"><span data-stu-id="fb156-104">Unlike a static snapshot, an enumerator allows you to modify the collection.</span></span> <span data-ttu-id="fb156-105">Za pomocą <xref:System.Messaging.MessageEnumerator>, możesz usunąć komunikaty z kolejki i zmiana jest natychmiast odzwierciedlana w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-105">Using a <xref:System.Messaging.MessageEnumerator>, you can remove messages from the queue, and the change is immediately reflected in the queue.</span></span>  
  
 <span data-ttu-id="fb156-106">Moduł wyliczający nie powoduje usunięcia komunikaty z kolejki, gdy wysyła zapytanie kolejki.</span><span class="sxs-lookup"><span data-stu-id="fb156-106">An enumerator does not remove the messages from the queue when it queries the queue.</span></span> <span data-ttu-id="fb156-107">Zwraca informacje o wiadomości w bieżącym położeniu kursora, ale pozostawia wiadomości w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-107">It returns information about the message at the current cursor position, but it leaves the message in the queue.</span></span>  
  
 <span data-ttu-id="fb156-108">Element <xref:System.Messaging.MessageEnumerator> jest kursor, inicjowany do głowy listy dynamicznej.</span><span class="sxs-lookup"><span data-stu-id="fb156-108">A <xref:System.Messaging.MessageEnumerator> is a cursor, initialized to the head of a dynamic list.</span></span> <span data-ttu-id="fb156-109">Kolejność na liście jest taka sama jak kolejność komunikatów w kolejce, na podstawie priorytetu wiadomości.</span><span class="sxs-lookup"><span data-stu-id="fb156-109">The list order is the same as the order of the messages in the queue, according to message priority.</span></span> <span data-ttu-id="fb156-110">Możesz przenieść kursor do pierwszej wiadomości w kolejce przez wywołanie metody <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</span><span class="sxs-lookup"><span data-stu-id="fb156-110">You can move the cursor to the first message in the queue by calling <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</span></span> <span data-ttu-id="fb156-111">Po zainicjowaniu modułu wyliczającego, można użyć <xref:System.Messaging.MessageEnumerator.MoveNext%2A> można przejść do przodu przez pozostałe komunikaty.</span><span class="sxs-lookup"><span data-stu-id="fb156-111">After the enumerator has been initialized, you can use <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to step forward through the remaining messages.</span></span> <span data-ttu-id="fb156-112">Można określić, czy oczekiwania na udostępnienie przez przekazanie przekroczenie limitu czasu w wiadomości <xref:System.Messaging.MessageEnumerator.MoveNext%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="fb156-112">You can specify whether to wait for a message to become available by passing a timeout into the <xref:System.Messaging.MessageEnumerator.MoveNext%2A> method.</span></span>  
  
 <span data-ttu-id="fb156-113">Ponieważ moduł wyliczający jest dynamiczny, komunikat, który jest dołączany po bieżącej pozycji kursora (na przykład z powodu — niski priorytet), uzyskiwania dostępu przez moduł wyliczający.</span><span class="sxs-lookup"><span data-stu-id="fb156-113">Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator.</span></span> <span data-ttu-id="fb156-114">Komunikat, który jest wstawiany przed nie można uzyskać dostępu do bieżącego położenia kursora.</span><span class="sxs-lookup"><span data-stu-id="fb156-114">A message that is inserted before the cursor's current position cannot be accessed.</span></span> <span data-ttu-id="fb156-115">Nie jest możliwe poruszać się za pomocą <xref:System.Messaging.MessageEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="fb156-115">It is not possible to step backward with a <xref:System.Messaging.MessageEnumerator>.</span></span> <span data-ttu-id="fb156-116">Kursor zezwala na ruch tylko do przodu.</span><span class="sxs-lookup"><span data-stu-id="fb156-116">A cursor allows forward-only movement.</span></span> <span data-ttu-id="fb156-117"><xref:System.Messaging.MessageEnumerator.Reset%2A> Metoda umożliwia umieść kursor ponownie na początku kolejki.</span><span class="sxs-lookup"><span data-stu-id="fb156-117">The <xref:System.Messaging.MessageEnumerator.Reset%2A> method enables you to place the cursor back at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="fb156-118">Wystąpienia elementu <xref:System.Messaging.MessageEnumerator> do danej kolejki działać niezależnie.</span><span class="sxs-lookup"><span data-stu-id="fb156-118">Instances of <xref:System.Messaging.MessageEnumerator> for a given queue work independently.</span></span> <span data-ttu-id="fb156-119">Należy utworzyć dwa <xref:System.Messaging.MessageEnumerator> wystąpień, które są stosowane do tej samej kolejki.</span><span class="sxs-lookup"><span data-stu-id="fb156-119">You can create two <xref:System.Messaging.MessageEnumerator> instances that apply to the same queue.</span></span> <span data-ttu-id="fb156-120">Zmiany jednego <xref:System.Messaging.MessageEnumerator> sprawia, że komunikaty w kolejce zostaną natychmiast odzwierciedlone w drugim modułu wyliczającego, jeśli drugi moduł wyliczający jest umieszczony przed pierwszym.</span><span class="sxs-lookup"><span data-stu-id="fb156-120">The changes that one <xref:System.Messaging.MessageEnumerator> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first.</span></span> <span data-ttu-id="fb156-121">Jednakże, jeśli dwa moduły wyliczające mają taką samą pozycję i jeden z nich usuwa komunikat w tej pozycji, wyjątek jest generowany, jeśli próbuje pobrać wartość modułu wyliczającego <xref:System.Messaging.MessageEnumerator.Current%2A> właściwości w komunikacie usunięty teraz.</span><span class="sxs-lookup"><span data-stu-id="fb156-121">However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <xref:System.Messaging.MessageEnumerator.Current%2A> property on the now-deleted message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb156-122">Jeśli utworzysz wystąpienie <xref:System.Messaging.MessageQueue> z <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> równa `true`, żadna inna aplikacja nie mogą modyfikować wiadomości w sieci modułu wyliczającego, gdy masz połączenie do kolejki.</span><span class="sxs-lookup"><span data-stu-id="fb156-122">If you create an instance of <xref:System.Messaging.MessageQueue> with <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> set to `true`, no other application can modify the messages in your enumerator while you have the connection to the queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb156-123">Poniższy przykład pobiera dynamiczną listę komunikatów w kolejce i zlicza wszystkie komunikaty z <xref:System.Messaging.Message.Priority%2A> właściwością <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="fb156-123">The following example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="messageEnumerator.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fb156-124">Zwalnia zasoby skojarzone z modułu wyliczającego.</span><span class="sxs-lookup"><span data-stu-id="fb156-124">Frees the resources associated with the enumerator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb156-125">System operacyjny zachowuje otwarte dojście do kolejki w okresie istnienia kursora.</span><span class="sxs-lookup"><span data-stu-id="fb156-125">The operating system retains an open handle to the queue during the lifetime of the cursor.</span></span> <span data-ttu-id="fb156-126">Po zakończeniu pracy z modułu wyliczającego, należy wywołać <xref:System.Messaging.MessageEnumerator.Close%2A> aby zwolnić zasoby skojarzone z uchwytu.</span><span class="sxs-lookup"><span data-stu-id="fb156-126">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release the resources associated with the handle.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Current { System::Messaging::Message ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Messaging.Message" Usage="System.Messaging.MessageEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fb156-127">Pobiera bieżący <see cref="T:System.Messaging.Message" /> wskazuje dla tego modułu wyliczającego.</span><span class="sxs-lookup"><span data-stu-id="fb156-127">Gets the current <see cref="T:System.Messaging.Message" /> that this enumerator points to.</span></span></summary>
        <value><span data-ttu-id="fb156-128">Bieżący komunikat.</span><span class="sxs-lookup"><span data-stu-id="fb156-128">The current message.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb156-129">Podczas tworzenia modułu wyliczającego wskazuje head kolejki, w miejscu przed pierwszą wiadomością.</span><span class="sxs-lookup"><span data-stu-id="fb156-129">When the enumerator is created, it points to the head of the queue, at a location before the first message.</span></span> <span data-ttu-id="fb156-130">W tym przypadku <xref:System.Messaging.MessageEnumerator.Current%2A> jest nieprawidłowy i spowoduje zgłoszenie wyjątku, jeśli jest on dostępny.</span><span class="sxs-lookup"><span data-stu-id="fb156-130">In this case, <xref:System.Messaging.MessageEnumerator.Current%2A> is not valid and will throw an exception if it is accessed.</span></span> <span data-ttu-id="fb156-131">Należy wywołać <xref:System.Messaging.MessageEnumerator.MoveNext%2A> aby umieść kursor wglądu do pierwszej wiadomości w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-131">You must call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to position the cursor at the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fb156-132">Nastąpiło wywołanie <see cref="P:System.Messaging.MessageEnumerator.Current" /> przed pierwszym wywołaniu <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span><span class="sxs-lookup"><span data-stu-id="fb156-132">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> before the first call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span></span> <span data-ttu-id="fb156-133">Kursor znajduje się przed pierwszym elementem wyliczenie wiadomości.</span><span class="sxs-lookup"><span data-stu-id="fb156-133">The cursor is located before the first element of the message enumeration.</span></span>  
  
<span data-ttu-id="fb156-134">—lub—</span><span class="sxs-lookup"><span data-stu-id="fb156-134">-or-</span></span> 
<span data-ttu-id="fb156-135">Nastąpiło wywołanie <see cref="P:System.Messaging.MessageEnumerator.Current" /> po wywołaniu <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> zwrócił <see langword="false" /> (wskazujący kursor znajduje się po ostatnim elemencie wyliczenie komunikat.)</span><span class="sxs-lookup"><span data-stu-id="fb156-135">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> after a call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> had returned <see langword="false" /> (indicating the cursor is located after the last element of the message enumeration.)</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="fb156-136">Komunikat, który moduł wyliczający aktualnie wskazuje już nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="fb156-136">The message the enumerator is currently pointing to no longer exists.</span></span> <span data-ttu-id="fb156-137">Być może został usunięty.</span><span class="sxs-lookup"><span data-stu-id="fb156-137">It might have been deleted.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="CursorHandle">
      <MemberSignature Language="C#" Value="public IntPtr CursorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int CursorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CursorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr CursorHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.CursorHandle : nativeint" Usage="System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fb156-138">Pobiera usługę kolejkowania komunikatów kursora uchwyt macierzysty używane do przeglądania wiadomości w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-138">Gets the native Message Queuing cursor handle used to browse messages in the queue.</span></span></summary>
        <value><span data-ttu-id="fb156-139">Uchwyt kursora natywnych.</span><span class="sxs-lookup"><span data-stu-id="fb156-139">The native cursor handle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb156-140">Ta właściwość zawiera natywny dojścia do wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="fb156-140">This property contains the native handle to the enumeration.</span></span> <span data-ttu-id="fb156-141">Po zakończeniu pracy z modułu wyliczającego, należy wywołać <xref:System.Messaging.MessageEnumerator.Close%2A> zwolnić tego zasobu.</span><span class="sxs-lookup"><span data-stu-id="fb156-141">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release this resource.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="fb156-142">Dojście nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="fb156-142">The handle does not exist.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fb156-143">Zwalnia zasoby używane przez <see cref="T:System.Messaging.MessageEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="fb156-143">Releases the resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fb156-144">Zwalnia wszelkie zasoby używane przez <see cref="T:System.Messaging.MessageEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="fb156-144">Releases all resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb156-145">Wywoływanie <xref:System.Messaging.MessageEnumerator.Dispose%2A> umożliwia zasoby używane przez <xref:System.Messaging.MessageEnumerator> zostają przeniesione do innych celów.</span><span class="sxs-lookup"><span data-stu-id="fb156-145">Calling <xref:System.Messaging.MessageEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageEnumerator> to be reallocated for other purposes.</span></span> <span data-ttu-id="fb156-146">Aby uzyskać więcej informacji na temat <xref:System.Messaging.MessageEnumerator.Dispose%2A>, zobacz [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="fb156-146">For more information about <xref:System.Messaging.MessageEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md"><span data-ttu-id="fb156-147">Oczyszczanie zasobów niezarządzanych</span><span class="sxs-lookup"><span data-stu-id="fb156-147">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageEnumerator.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="fb156-148"><see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko niezarządzane zasoby.</span><span class="sxs-lookup"><span data-stu-id="fb156-148"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="fb156-149">Zwalnia zasoby niezarządzane używane przez <see cref="T:System.Messaging.MessageEnumerator" /> i opcjonalnie zwalnia zasoby zarządzane.</span><span class="sxs-lookup"><span data-stu-id="fb156-149">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageEnumerator" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb156-150">Ta metoda jest wywoływana przez publiczną <xref:System.Messaging.MessageEnumerator.Dispose%2A> metody i <xref:System.Object.Finalize%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="fb156-150">This method is called by the public <xref:System.Messaging.MessageEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="fb156-151">`Dispose()` wywołuje chronioną metodę `Dispose(Boolean)` metody z `disposing` parametr `true`.</span><span class="sxs-lookup"><span data-stu-id="fb156-151">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="fb156-152"><xref:System.Object.Finalize%2A> wywołuje `Dispose` z `disposing` równa `false`.</span><span class="sxs-lookup"><span data-stu-id="fb156-152"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="fb156-153">Gdy `disposing` parametr jest `true`, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane że <xref:System.Messaging.MessageEnumerator> odwołania.</span><span class="sxs-lookup"><span data-stu-id="fb156-153">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageEnumerator> references.</span></span> <span data-ttu-id="fb156-154">Ta metoda wywołuje `Dispose()` metoda każdego obiektu, do którego istnieje odwołanie.</span><span class="sxs-lookup"><span data-stu-id="fb156-154">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="fb156-155">
            <see langword="Dispose" /> może być wywoływana wiele razy przez inne obiekty.</span><span class="sxs-lookup"><span data-stu-id="fb156-155">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="fb156-156">Podczas zastępowania <see langword="Dispose(Boolean)" />, nie należy odwoływać się do obiektów, które zostały wcześniej zlikwidowane wcześniejszym wywołaniem do <see langword="Dispose" />.</span><span class="sxs-lookup"><span data-stu-id="fb156-156">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="fb156-157">Aby uzyskać więcej informacji o sposobie wdrażania <see langword="Dispose" />, zobacz [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="fb156-157">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="fb156-158">Aby uzyskać więcej informacji na temat <see langword="Dispose" /> i <see langword="Finalize" />, zobacz [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) i [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span><span class="sxs-lookup"><span data-stu-id="fb156-158">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="fb156-159">Implementacja metody Dispose</span><span class="sxs-lookup"><span data-stu-id="fb156-159">Implementing a Dispose method</span></span></related>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md"><span data-ttu-id="fb156-160">Oczyszczanie zasobów niezarządzanych</span><span class="sxs-lookup"><span data-stu-id="fb156-160">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageEnumerator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageEnumerator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fb156-161">Zwalnia zasoby blokowane przez moduł wyliczający.</span><span class="sxs-lookup"><span data-stu-id="fb156-161">Releases the resources held by the enumerator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="fb156-162">Ta metoda zastępuje <xref:System.Object.Finalize>.</span><span class="sxs-lookup"><span data-stu-id="fb156-162">This method overrides <xref:System.Object.Finalize>.</span></span> <span data-ttu-id="fb156-163">Kod aplikacji nie powinna wywołać tę metodę; metody Finalize obiektu jest wywoływana automatycznie podczas wyrzucania elementów bezużytecznych, chyba że finalizacja przez moduł garbage collector została wyłączona przez wywołanie <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="fb156-163">Application code should not call this method; an object's Finalize method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>

<span data-ttu-id="fb156-164">Aby uzyskać więcej informacji, zobacz [Finalize metody i destruktory](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100)), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), i [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span><span class="sxs-lookup"><span data-stu-id="fb156-164">For more information, see [Finalize Methods and Destructors](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100)), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveNext">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fb156-165">Przesuwa modułu wyliczającego do następnej wiadomości w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-165">Advances the enumerator to the next message in the queue.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="messageEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fb156-166">Przechodzi do następnej wiadomości w kolejce, moduł wyliczający, jeśli jest aktualnie dostępna.</span><span class="sxs-lookup"><span data-stu-id="fb156-166">Advances the enumerator to the next message in the queue, if one is currently available.</span></span></summary>
        <returns><span data-ttu-id="fb156-167"><see langword="true" /> Jeśli moduł wyliczający został pomyślnie zaawansowane do następnej wiadomości; <see langword="false" /> Jeśli moduł wyliczający osiągnął koniec kolejki.</span><span class="sxs-lookup"><span data-stu-id="fb156-167"><see langword="true" /> if the enumerator was succesfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb156-168">Tego przeciążenia zwraca niezwłocznie, jeśli nie ma w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-168">This overload returns immediately if there is no message in the queue.</span></span> <span data-ttu-id="fb156-169">Brak innego przeciążenia metody, która czeka określoną <xref:System.TimeSpan> na odbierania wiadomości.</span><span class="sxs-lookup"><span data-stu-id="fb156-169">There is another overload that waits a specified <xref:System.TimeSpan> for a message to arrive.</span></span>  
  
 <span data-ttu-id="fb156-170">Jeśli komunikat jest obecnie niedostępna, ponieważ kolejka jest pusta lub przeniesiono za ostatnim elementem w kolekcji, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> zwraca `false` do metody wywołującej.</span><span class="sxs-lookup"><span data-stu-id="fb156-170">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> returns `false` to the calling method.</span></span>  
  
 <span data-ttu-id="fb156-171">Po utworzeniu, moduł wyliczający jest koncepcyjnie umieszczony przed pierwszą wiadomość z kolejki, a pierwsze wywołanie <xref:System.Messaging.MessageEnumerator.MoveNext%2A> wnosi pierwszy komunikat kolejki do widoku.</span><span class="sxs-lookup"><span data-stu-id="fb156-171">Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the queue into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="fb156-172">Zgłoszono wyjątek, które są specyficzne dla usługi kolejkowania komunikatów.</span><span class="sxs-lookup"><span data-stu-id="fb156-172">An exception specific to Message Queuing was thrown.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.MoveNext : TimeSpan -&gt; bool" Usage="messageEnumerator.MoveNext timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="fb156-173"><see cref="T:System.TimeSpan" /> Oczekiwania na udostępnienie, jeśli moduł wyliczający jest umieszczony na końcu kolejki wiadomości.</span><span class="sxs-lookup"><span data-stu-id="fb156-173">The <see cref="T:System.TimeSpan" /> to wait for a message to be available if the enumerator is positioned at the end of the queue.</span></span></param>
        <summary><span data-ttu-id="fb156-174">Przesuwa modułu wyliczającego do następnej wiadomości w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-174">Advances the enumerator to the next message in the queue.</span></span> <span data-ttu-id="fb156-175">Jeśli moduł wyliczający jest umieszczony na końcu kolejki <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> czeka, aż komunikat jest dostępny lub upłynie limit czasu danego.</span><span class="sxs-lookup"><span data-stu-id="fb156-175">If the enumerator is positioned at the end of the queue, <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> waits until a message is available or the given timeout expires.</span></span></summary>
        <returns><span data-ttu-id="fb156-176"><see langword="true" /> Jeśli moduł wyliczający pomyślnie zaawansowane do następnej wiadomości; <see langword="false" /> Jeśli moduł wyliczający osiągnął koniec kolejki wiadomości nie są dostępne w czasie określonym przez <paramref name="timeout" /> parametru.</span><span class="sxs-lookup"><span data-stu-id="fb156-176"><see langword="true" /> if the enumerator successfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <paramref name="timeout" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb156-177">To przeciążenie czeka, jeśli nie ma w kolejce lub kursor osiągnął koniec kolejki.</span><span class="sxs-lookup"><span data-stu-id="fb156-177">This overload waits if there is no message in the queue or if the cursor has reached the end of the queue.</span></span> <span data-ttu-id="fb156-178">Jeśli komunikat jest obecnie niedostępna, ponieważ kolejka jest pusta lub przeniesiono za ostatnim elementem w kolekcji, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> określony limit czasu oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="fb156-178">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> waits the specified timeout.</span></span>  
  
 <span data-ttu-id="fb156-179">Jeśli kursor znajduje się już na końcu kolejki <xref:System.Messaging.MessageEnumerator.MoveNext%2A> zwraca tylko `true` Jeśli nowa wiadomość zostanie odebrana w określonym interwale, obecnie ma niższy priorytet niż wszystkie komunikaty w kolejce i znajduje się na końcu kolejki.</span><span class="sxs-lookup"><span data-stu-id="fb156-179">If the cursor is already at the end of the queue, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> only returns `true` if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue.</span></span> <span data-ttu-id="fb156-180">Przeciążenie nie parametru zwraca niezwłocznie, jeśli żadne dalsze komunikaty nie znajdują się w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-180">An overload with no parameter returns immediately if no further messages are in the queue.</span></span>  
  
 <span data-ttu-id="fb156-181">Po utworzeniu, moduł wyliczający koncepcyjnie jest umieszczony przed pierwszą wiadomość wyliczenia, a pierwsze wywołanie <xref:System.Messaging.MessageEnumerator.MoveNext%2A> łączy pierwszy komunikat wyliczenia w widoku.</span><span class="sxs-lookup"><span data-stu-id="fb156-181">Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the enumeration into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fb156-182">Wartość określona dla parametru limitu czasu jest nieprawidłowa.</span><span class="sxs-lookup"><span data-stu-id="fb156-182">The value specified for the timeout parameter is invalid.</span></span> <span data-ttu-id="fb156-183">Może ona reprezentować liczbą ujemną.</span><span class="sxs-lookup"><span data-stu-id="fb156-183">It might represent a negative number.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="fb156-184">Zgłoszono wyjątek, które są specyficzne dla usługi kolejkowania komunikatów.</span><span class="sxs-lookup"><span data-stu-id="fb156-184">An exception specific to Message Queuing was thrown.</span></span>  
  
<span data-ttu-id="fb156-185">—lub—</span><span class="sxs-lookup"><span data-stu-id="fb156-185">-or-</span></span> 
<span data-ttu-id="fb156-186">Upłynął limit czasu.</span><span class="sxs-lookup"><span data-stu-id="fb156-186">The timeout has expired.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveCurrent">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fb156-187">Usuwa bieżący komunikat z kolejki i zwraca komunikat do aplikacji wywołującej.</span><span class="sxs-lookup"><span data-stu-id="fb156-187">Removes the current message from the queue and returns the message to the calling application.</span></span> <span data-ttu-id="fb156-188">Usuwanie wiadomości usuwa je z kolejki.</span><span class="sxs-lookup"><span data-stu-id="fb156-188">Removing the message deletes it from the queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb156-189">Zachowanie opisane dla tych przeciążeń ma zastosowanie tylko wtedy, gdy <xref:System.Messaging.MessageEnumerator> wystąpienia jest pobierany za pomocą <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>.</span><span class="sxs-lookup"><span data-stu-id="fb156-189">The behavior described for these overloads is applicable only if the <xref:System.Messaging.MessageEnumerator> instance is retrieved by using the <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>.</span></span> <span data-ttu-id="fb156-190">Nie używaj <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> można pobrać wystąpienia <xref:System.Messaging.MessageEnumerator> jak ta metoda jest przestarzała.</span><span class="sxs-lookup"><span data-stu-id="fb156-190">Do not use <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> to retrieve an instance of <xref:System.Messaging.MessageEnumerator> as this method has been deprecated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent();" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : unit -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fb156-191">Usuwa bieżący komunikat z kolejki transakcyjne i nietransakcyjnej i zwraca komunikat do aplikacji wywołującej.</span><span class="sxs-lookup"><span data-stu-id="fb156-191">Removes the current message from a transactional or non-transactional queue and returns the message to the calling application.</span></span> <span data-ttu-id="fb156-192">Brak limitu czasu określony dla wiadomości w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-192">There is no timeout specified for a message to arrive in the queue.</span></span></summary>
        <returns><span data-ttu-id="fb156-193">A <see cref="T:System.Messaging.Message" /> odwołujący się pierwszy komunikat dostępnymi w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-193">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb156-194"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Usuwa i zwraca komunikat wyświetlany u bieżącej lokalizacji kursora.</span><span class="sxs-lookup"><span data-stu-id="fb156-194"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span>  
  
 <span data-ttu-id="fb156-195">Jeśli używasz rejestrowanie kolejki usuwając wiadomość powoduje, że kopii mają być przechowywane w kolejce dziennika, podobnie jak <xref:System.Messaging.MessageQueue> klasy <xref:System.Messaging.MessageQueue.Receive%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="fb156-195">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="fb156-196">Po usunięciu bieżącego komunikatu kursora jest przenoszona do następnego komunikatu.</span><span class="sxs-lookup"><span data-stu-id="fb156-196">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="fb156-197">Nie trzeba wywoływać <xref:System.Messaging.MessageEnumerator.MoveNext%2A> po wywołaniu <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="fb156-197">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="fb156-198">Jeśli chcesz wywołać tego przeciążenia w kolejkę transakcyjną, usługi kolejkowania komunikatów tworzy pojedynczą transakcję wewnętrznego.</span><span class="sxs-lookup"><span data-stu-id="fb156-198">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="transaction"><span data-ttu-id="fb156-199"><see cref="T:System.Messaging.MessageQueueTransaction" /> Obiekt, który określa transakcji, w którym komunikat zostanie usunięty.</span><span class="sxs-lookup"><span data-stu-id="fb156-199">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction in which the message will be removed.</span></span></param>
        <summary><span data-ttu-id="fb156-200">Usuwa bieżący komunikat z kolejki transakcyjne i zwraca komunikat do aplikacji wywołującej.</span><span class="sxs-lookup"><span data-stu-id="fb156-200">Removes the current message from a transactional queue and returns the message to the calling application.</span></span> <span data-ttu-id="fb156-201">Brak limitu czasu określony dla wiadomości w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-201">There is no timeout specified for a message to arrive in the queue.</span></span></summary>
        <returns><span data-ttu-id="fb156-202">A <see cref="T:System.Messaging.Message" /> odwołujący się pierwszy komunikat dostępnymi w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-202">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb156-203"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Usuwa i zwraca komunikat wyświetlany u bieżącej lokalizacji kursora, przy użyciu tego kontekstu transakcji wewnętrznej zdefiniowany przez `transaction` parametru.</span><span class="sxs-lookup"><span data-stu-id="fb156-203"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using the internal transaction context defined by the `transaction` parameter.</span></span>  
  
 <span data-ttu-id="fb156-204">Jeśli używasz rejestrowanie kolejki usuwając wiadomość powoduje, że kopii mają być przechowywane w kolejce dziennika, podobnie jak <xref:System.Messaging.MessageQueue> klasy <xref:System.Messaging.MessageQueue.Receive%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="fb156-204">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="fb156-205">Podczas pracy z kolejek transakcyjnych, wycofywanie transakcji powoduje, że wszystkie komunikaty usunięte przez wywołanie <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> zwracane do kolejki.</span><span class="sxs-lookup"><span data-stu-id="fb156-205">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="fb156-206">Usunięcie jest nieodwracalne, dopóki transakcja została zatwierdzona.</span><span class="sxs-lookup"><span data-stu-id="fb156-206">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="fb156-207">Po usunięciu bieżącego komunikatu kursora jest przenoszona do następnego komunikatu.</span><span class="sxs-lookup"><span data-stu-id="fb156-207">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="fb156-208">Nie trzeba wywoływać <xref:System.Messaging.MessageEnumerator.MoveNext%2A> po wywołaniu <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="fb156-208">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb156-209"><paramref name="transaction" /> Parametr <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fb156-209">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transactionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="transactionType"><span data-ttu-id="fb156-210">Jedną z <see cref="T:System.Messaging.MessageQueueTransactionType" /> wartości opisujące typ kontekstu transakcji do skojarzenia z komunikatem.</span><span class="sxs-lookup"><span data-stu-id="fb156-210">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="fb156-211">Usuwa bieżący komunikat z kolejki i zwraca komunikat do aplikacji wywołującej.</span><span class="sxs-lookup"><span data-stu-id="fb156-211">Removes the current message from a queue and returns the message to the calling application.</span></span> <span data-ttu-id="fb156-212">Brak limitu czasu określony dla wiadomości w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-212">There is no timeout specified for a message to arrive in the queue.</span></span></summary>
        <returns><span data-ttu-id="fb156-213">A <see cref="T:System.Messaging.Message" /> odwołujący się pierwszy komunikat dostępnymi w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-213">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb156-214"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Usuwa i zwraca komunikat wyświetlany u bieżącej lokalizacji kursora, przy użyciu kontekstu transakcji, zdefiniowane przez `transactionType` parametru.</span><span class="sxs-lookup"><span data-stu-id="fb156-214"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span>  
  
 <span data-ttu-id="fb156-215">Określ `Automatic` dla `transactionType` parametru, jeśli kontekst transakcji zewnętrznego istnieje już dołączone do wątku, który chcesz użyć do odbierania wiadomości.</span><span class="sxs-lookup"><span data-stu-id="fb156-215">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="fb156-216">Określ `Single` Jeśli chcesz otrzymywać wiadomości jako jedna transakcja wewnętrznego.</span><span class="sxs-lookup"><span data-stu-id="fb156-216">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="fb156-217">Można określić `None` Aby komunikat o błędzie z kolejką transakcyjną poza kontekstem transakcji.</span><span class="sxs-lookup"><span data-stu-id="fb156-217">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="fb156-218">Jeśli używasz rejestrowanie kolejki usuwając wiadomość powoduje, że kopii mają być przechowywane w kolejce dziennika, podobnie jak <xref:System.Messaging.MessageQueue> klasy <xref:System.Messaging.MessageQueue.Receive%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="fb156-218">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="fb156-219">Podczas pracy z kolejek transakcyjnych, wycofywanie transakcji powoduje, że wszystkie komunikaty usunięte przez wywołanie <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> zwracane do kolejki.</span><span class="sxs-lookup"><span data-stu-id="fb156-219">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="fb156-220">Usunięcie jest nieodwracalne, dopóki transakcja została zatwierdzona.</span><span class="sxs-lookup"><span data-stu-id="fb156-220">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="fb156-221">Po usunięciu bieżącego komunikatu kursora jest przenoszona do następnego komunikatu.</span><span class="sxs-lookup"><span data-stu-id="fb156-221">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="fb156-222">Nie trzeba wywoływać <xref:System.Messaging.MessageEnumerator.MoveNext%2A> po wywołaniu <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="fb156-222">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="fb156-223"><paramref name="transactionType" /> Parametr nie jest jednym z <see cref="T:System.Messaging.MessageQueueTransactionType" /> elementów członkowskich.</span><span class="sxs-lookup"><span data-stu-id="fb156-223">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="fb156-224">Interwał czasu oczekiwania na komunikat w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-224">The interval of time to wait for a message to arrive in the queue.</span></span></param>
        <summary><span data-ttu-id="fb156-225">Usuwa bieżący komunikat z kolejki i zwraca komunikat do aplikacji wywołującej.</span><span class="sxs-lookup"><span data-stu-id="fb156-225">Removes the current message from the queue and returns the message to the calling application.</span></span> <span data-ttu-id="fb156-226">Jeśli istnieje komunikat do usunięcia, metoda zwraca go natychmiast.</span><span class="sxs-lookup"><span data-stu-id="fb156-226">If there is a message to remove, the method returns it immediately.</span></span> <span data-ttu-id="fb156-227">W przeciwnym razie metoda czeka określony limit czasu dla nowych wiadomości dostarczenie.</span><span class="sxs-lookup"><span data-stu-id="fb156-227">Otherwise, the method waits the specified timeout for a new message to arrive.</span></span></summary>
        <returns><span data-ttu-id="fb156-228">A <see cref="T:System.Messaging.Message" /> odwołujący się pierwszy komunikat dostępnymi w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-228">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb156-229"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Usuwa i zwraca komunikat wyświetlany u bieżącej lokalizacji kursora.</span><span class="sxs-lookup"><span data-stu-id="fb156-229"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="fb156-230">Jeśli kursor znajduje się na końcu kolejki, tego przeciążenia metody czeka, aż komunikat jest dostępny lub interwału określonego przez `timeout` parametru utracił ważność.</span><span class="sxs-lookup"><span data-stu-id="fb156-230">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="fb156-231">Jeśli używasz rejestrowanie kolejki usuwając wiadomość powoduje, że kopii mają być przechowywane w kolejce dziennika, podobnie jak <xref:System.Messaging.MessageQueue> klasy <xref:System.Messaging.MessageQueue.Receive%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="fb156-231">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="fb156-232">Po usunięciu bieżącego komunikatu kursora jest przenoszona do następnego komunikatu.</span><span class="sxs-lookup"><span data-stu-id="fb156-232">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="fb156-233">Nie trzeba wywoływać <xref:System.Messaging.MessageEnumerator.MoveNext%2A> po wywołaniu <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="fb156-233">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="fb156-234">Jeśli chcesz wywołać tego przeciążenia w kolejkę transakcyjną, usługi kolejkowania komunikatów tworzy pojedynczą transakcję wewnętrznego.</span><span class="sxs-lookup"><span data-stu-id="fb156-234">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fb156-235">Wartość określona dla <paramref name="timeout" /> parametr jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="fb156-235">The value specified for the <paramref name="timeout" /> parameter is invalid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="fb156-236">Upłynął limit czasu.</span><span class="sxs-lookup"><span data-stu-id="fb156-236">The timeout has expired.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="fb156-237">Interwał czasu oczekiwania na komunikat, który ma zostać usunięty.</span><span class="sxs-lookup"><span data-stu-id="fb156-237">The interval of time to wait for the message to be removed.</span></span></param>
        <param name="transaction"><span data-ttu-id="fb156-238"><see cref="T:System.Messaging.MessageQueueTransaction" /> Obiekt, który określa kontekst transakcji dla wiadomości.</span><span class="sxs-lookup"><span data-stu-id="fb156-238">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction context for the message.</span></span></param>
        <summary><span data-ttu-id="fb156-239">Usuwa bieżący komunikat z kolejki transakcyjne i zwraca komunikat do aplikacji wywołującej.</span><span class="sxs-lookup"><span data-stu-id="fb156-239">Removes the current message from a transactional queue and returns the message to the calling application.</span></span> <span data-ttu-id="fb156-240">Jeśli istnieje komunikat do usunięcia, metoda zwraca go natychmiast.</span><span class="sxs-lookup"><span data-stu-id="fb156-240">If there is a message to remove, the method returns it immediately.</span></span> <span data-ttu-id="fb156-241">W przeciwnym razie metoda czeka określony limit czasu dla nowych wiadomości dostarczenie.</span><span class="sxs-lookup"><span data-stu-id="fb156-241">Otherwise, the method waits the specified timeout for a new message to arrive.</span></span></summary>
        <returns><span data-ttu-id="fb156-242">A <see cref="T:System.Messaging.Message" /> odwołujący się pierwszy komunikat dostępnymi w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-242">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb156-243"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Usuwa i zwraca komunikat wyświetlany u bieżącej lokalizacji kursora.</span><span class="sxs-lookup"><span data-stu-id="fb156-243"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="fb156-244">Jeśli kursor znajduje się na końcu kolejki, tego przeciążenia metody czeka, aż komunikat jest dostępny lub interwału określonego przez `timeout` parametru utracił ważność.</span><span class="sxs-lookup"><span data-stu-id="fb156-244">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="fb156-245">Podczas pracy z kolejek transakcyjnych, wycofywanie transakcji powoduje, że wszystkie komunikaty usunięte przez wywołanie <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> zwracane do kolejki.</span><span class="sxs-lookup"><span data-stu-id="fb156-245">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="fb156-246">Usunięcie jest nieodwracalne, dopóki transakcja została zatwierdzona.</span><span class="sxs-lookup"><span data-stu-id="fb156-246">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="fb156-247">Jeśli używasz rejestrowanie kolejki usuwając wiadomość powoduje, że kopii mają być przechowywane w kolejce dziennika, podobnie jak <xref:System.Messaging.MessageQueue> klasy <xref:System.Messaging.MessageQueue.Receive%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="fb156-247">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="fb156-248">Po usunięciu bieżącego komunikatu kursora jest przenoszona do następnego komunikatu.</span><span class="sxs-lookup"><span data-stu-id="fb156-248">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="fb156-249">Nie trzeba wywoływać <xref:System.Messaging.MessageEnumerator.MoveNext%2A> po wywołaniu <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="fb156-249">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fb156-250">Wartość określona dla <paramref name="timeout" /> parametr jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="fb156-250">The value specified for the <paramref name="timeout" /> parameter is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb156-251"><paramref name="transaction" /> Parametr <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fb156-251">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="fb156-252">Upłynął limit czasu.</span><span class="sxs-lookup"><span data-stu-id="fb156-252">The timeout has expired.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="fb156-253">Interwał czasu oczekiwania na komunikat, który ma zostać usunięty.</span><span class="sxs-lookup"><span data-stu-id="fb156-253">The interval of time to wait for the message to be removed.</span></span></param>
        <param name="transactionType"><span data-ttu-id="fb156-254">Jedną z <see cref="T:System.Messaging.MessageQueueTransactionType" /> wartości opisujące typ kontekstu transakcji do skojarzenia z komunikatem.</span><span class="sxs-lookup"><span data-stu-id="fb156-254">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="fb156-255">Usuwa bieżący komunikat z kolejki i zwraca komunikat do aplikacji wywołującej.</span><span class="sxs-lookup"><span data-stu-id="fb156-255">Removes the current message from a queue and returns the message to the calling application.</span></span> <span data-ttu-id="fb156-256">Jeśli istnieje komunikat do usunięcia, metoda zwraca go natychmiast.</span><span class="sxs-lookup"><span data-stu-id="fb156-256">If there is a message to remove, the method returns it immediately.</span></span> <span data-ttu-id="fb156-257">W przeciwnym razie metoda czeka określony limit czasu dla nowych wiadomości dostarczenie.</span><span class="sxs-lookup"><span data-stu-id="fb156-257">Otherwise, the method waits the specified timeout for a new message to arrive.</span></span></summary>
        <returns><span data-ttu-id="fb156-258">A <see cref="T:System.Messaging.Message" /> odwołujący się pierwszy komunikat dostępnymi w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-258">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb156-259"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Usuwa i zwraca komunikat wyświetlany u bieżącej lokalizacji kursora, przy użyciu kontekstu transakcji, zdefiniowane przez `transactionType` parametru.</span><span class="sxs-lookup"><span data-stu-id="fb156-259"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span> <span data-ttu-id="fb156-260">Jeśli kursor znajduje się na końcu kolejki, tego przeciążenia metody czeka, aż komunikat jest dostępny lub interwału określonego przez `timeout` parametru utracił ważność.</span><span class="sxs-lookup"><span data-stu-id="fb156-260">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="fb156-261">Określ `Automatic` dla `transactionType` parametru, jeśli kontekst transakcji zewnętrznego istnieje już dołączone do wątku, który chcesz użyć do odbierania wiadomości.</span><span class="sxs-lookup"><span data-stu-id="fb156-261">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="fb156-262">Określ `Single` Jeśli chcesz otrzymywać wiadomości jako jedna transakcja wewnętrznego.</span><span class="sxs-lookup"><span data-stu-id="fb156-262">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="fb156-263">Można określić `None` Aby komunikat o błędzie z kolejką transakcyjną poza kontekstem transakcji.</span><span class="sxs-lookup"><span data-stu-id="fb156-263">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="fb156-264">Jeśli używasz rejestrowanie kolejki usuwając wiadomość powoduje, że kopii mają być przechowywane w kolejce dziennika, podobnie jak <xref:System.Messaging.MessageQueue> klasy <xref:System.Messaging.MessageQueue.Receive%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="fb156-264">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="fb156-265">Podczas pracy z kolejek transakcyjnych, wycofywanie transakcji powoduje, że wszystkie komunikaty usunięte przez wywołanie <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> zwracane do kolejki.</span><span class="sxs-lookup"><span data-stu-id="fb156-265">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="fb156-266">Usunięcie jest nieodwracalne, dopóki transakcja została zatwierdzona.</span><span class="sxs-lookup"><span data-stu-id="fb156-266">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="fb156-267">Po usunięciu bieżącego komunikatu kursora jest przenoszona do następnego komunikatu.</span><span class="sxs-lookup"><span data-stu-id="fb156-267">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="fb156-268">Nie trzeba wywoływać <xref:System.Messaging.MessageEnumerator.MoveNext%2A> po wywołaniu <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="fb156-268">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fb156-269">Wartość określona dla <paramref name="timeout" /> parametr jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="fb156-269">The value specified for the <paramref name="timeout" /> parameter is invalid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="fb156-270">Upłynął limit czasu.</span><span class="sxs-lookup"><span data-stu-id="fb156-270">The timeout has expired.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="fb156-271"><paramref name="transactionType" /> Parametr nie jest jednym z <see cref="T:System.Messaging.MessageQueueTransactionType" /> elementów członkowskich.</span><span class="sxs-lookup"><span data-stu-id="fb156-271">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="messageEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fb156-272">Resetuje bieżącego modułu wyliczającego, więc wskazuje porównanie kolejki.</span><span class="sxs-lookup"><span data-stu-id="fb156-272">Resets the current enumerator so it points to the head of the queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb156-273">Moduł wyliczający można przenosić tylko w kierunku do przodu.</span><span class="sxs-lookup"><span data-stu-id="fb156-273">An enumerator can only move in a forward direction.</span></span> <span data-ttu-id="fb156-274">Ta metoda zacząć od początku, na początku kolejki.</span><span class="sxs-lookup"><span data-stu-id="fb156-274">Use this method to start over at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="fb156-275">Po wywołaniu <xref:System.Messaging.MessageEnumerator.Reset%2A>, kursor wskazuje na pierwszy komunikat.</span><span class="sxs-lookup"><span data-stu-id="fb156-275">After calling <xref:System.Messaging.MessageEnumerator.Reset%2A>, the cursor points to the first message.</span></span> <span data-ttu-id="fb156-276">Nie trzeba wywoływać <xref:System.Messaging.MessageEnumerator.MoveNext%2A> po wywołaniu <xref:System.Messaging.MessageEnumerator.Reset%2A> przenieść kursor do przodu do pierwszej wiadomości w kolejce.</span><span class="sxs-lookup"><span data-stu-id="fb156-276">You do not need to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.Reset%2A> to move the cursor forward to the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fb156-277">Zwraca <see cref="T:System.Messaging.Message" /> odwołujący się komunikat w bieżącym położeniu kursora.</span><span class="sxs-lookup"><span data-stu-id="fb156-277">Returns a <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span></span></summary>
        <value><span data-ttu-id="fb156-278">A <see cref="T:System.Messaging.Message" /> odwołujący się komunikat w bieżącym położeniu kursora.</span><span class="sxs-lookup"><span data-stu-id="fb156-278">A <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>