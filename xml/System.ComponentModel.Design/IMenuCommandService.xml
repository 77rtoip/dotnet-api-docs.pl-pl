<Type Name="IMenuCommandService" FullName="System.ComponentModel.Design.IMenuCommandService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8aa0fa44d982fdcea967c4dced5f556a4619487a" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69348743" /></Metadata><TypeSignature Language="C#" Value="public interface IMenuCommandService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMenuCommandService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.IMenuCommandService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMenuCommandService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMenuCommandService" />
  <TypeSignature Language="F#" Value="type IMenuCommandService = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia metody zarządzania globalnymi zleceniami projektanta i poleceń menu dostępnych w trybie projektowania oraz do wyświetlania niektórych typów menu skrótów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten interfejs zapewnia następujące metody:  
  
-   Znajdź, wywołaj, Dodaj i Usuń globalne polecenia zleceń projektanta.  
  
-   Znajdowanie, wywoływanie, Dodawanie i usuwanie standardowych poleceń menu.  
  
-   Zmień obsługę zdarzeń skojarzonych z poleceniami menu Standard.  
  
-   Wyświetla menu skrótów poleceń standardowych, które są skojarzone z menu <xref:System.ComponentModel.Design.CommandID>.  
  
 Zlecenia projektanta reprezentują polecenia zdefiniowane przez użytkownika, które są wyświetlane w menu skrótów w trybie projektowania. Zlecenie projektanta może dostarczyć określoną etykietę tekstową. Każdy czasownik projektanta jest automatycznie przypisywany unikatowy <xref:System.ComponentModel.Design.CommandID>. Projektant może udostępnić czasowniki projektanta za pomocą <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> jego właściwości, ale są one dostępne tylko wtedy, gdy składnik projektanta jest obecnie zaznaczony. Globalne zlecenia projektanta to polecenia projektanta, do których można uzyskać dostęp z menu skrótów trybu projektowania, niezależnie od wybranego składnika. Ten interfejs umożliwia zarządzanie zestawem globalnych zleceń projektanta, które są dostępne w trybie projektowania.  
  
 Można dodać zlecenie projektanta globalnego przy użyciu <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> metody, a także usunąć zlecenie projektanta globalnego <xref:System.ComponentModel.Design.IMenuCommandService.RemoveVerb%2A> przy użyciu metody. Można wywołać zlecenie projektanta przy użyciu metody, <xref:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke%2A> Jeśli wiesz, <xref:System.ComponentModel.Design.CommandID> że zlecenie. <xref:System.ComponentModel.Design.IMenuCommandService.Verbs%2A> Właściwość tego interfejsu zawiera bieżący zestaw poleceń programu Designer, które mają być wyświetlane w menu skrótów. Ten zestaw poleceń programu Designer zawiera wszystkie zlecenia projektanta globalnego i wszystkie czasowniki projektanta oferowane przez projektanta dowolnego aktualnie zaznaczonego składnika. Ten zestaw zleceń jest aktualizowany za każdym razem, gdy składnik z ofertą Projektant oferty projektanta jest wybierany lub niezaznaczony.  
  
 Polecenia menu są ograniczone do zestawu wstępnie zdefiniowanych poleceń standardowych. Większość wstępnie zdefiniowanych poleceń standardowych są zdefiniowane w <xref:System.ComponentModel.Design.StandardCommands> wyliczeniach i. <xref:System.Windows.Forms.Design.MenuCommands> Można dodawać, usuwać i wywoływać polecenia menu i wyszukiwać polecenia menu, które zostały dodane do menu przy użyciu metod tego interfejsu.  
  
 Możesz dodać standardowe polecenie menu przy użyciu <xref:System.ComponentModel.Design.IMenuCommandService.AddCommand%2A> metody i usunąć standardowe polecenie menu <xref:System.ComponentModel.Design.IMenuCommandService.RemoveCommand%2A> przy użyciu metody. Procedurę obsługi zdarzeń można dołączyć do wstępnie zdefiniowanego standardowego polecenia menu, wykonując czynności opisane w dokumentacji dotyczącej <xref:System.ComponentModel.Design.IMenuCommandService.AddCommand%2A> metody. Polecenie menu można pobrać, <xref:System.ComponentModel.Design.CommandID> jeśli zostało dodane do menu <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> przy użyciu metody. Możesz wywołać polecenie menu lub zlecenie projektanta przy <xref:System.ComponentModel.Design.CommandID> <xref:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke%2A> użyciu metody.  
  
> [!NOTE]
>  Próba dodania polecenia menu z już istniejącym <xref:System.ComponentModel.Design.CommandID> spowoduje zgłoszenie elementu. <xref:System.InvalidOperationException> Gdy dodajesz polecenie menu, pamiętaj, aby sprawdzić, czy nie zostało ono jeszcze w menu przy użyciu <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> metody, czy też użyć obsługi wyjątków.  
  
> [!NOTE]
>  Polecenie menu można dodać do menu i mieć <xref:System.ComponentModel.Design.MenuCommand.Visible%2A> ustawione `false`właściwości lub <xref:System.ComponentModel.Design.MenuCommand.Enabled%2A> . Jeśli nie możesz wizualnie zlokalizować polecenia menu, które zostało dodane do menu, jedną z tych właściwości można ustawić na `false`.  
  
 Można wyświetlić niektóre standardowe menu skrótów zawierające polecenia menu w określonej lokalizacji przy użyciu <xref:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu%2A> metody. Dokumentacja tej metody zawiera tabelę zawierającą listę identyfikatorów poleceń, które określają prawidłowe menu do wyświetlenia.  
  
   
  
## Examples  
 W tym przykładzie pokazano, <xref:System.ComponentModel.Design.IMenuCommandService> jak <xref:System.ComponentModel.Design.MenuCommand>dodać.  
  
 [!code-cpp[MenuCommand Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuCommand Example/CPP/component1.cpp#1)]
 [!code-csharp[MenuCommand Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuCommand Example/CS/component1.cs#1)]
 [!code-vb[MenuCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuCommand Example/VB/component1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
    <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
    <altmember cref="T:System.ComponentModel.Design.CommandID" />
    <altmember cref="T:System.Windows.Forms.Design.MenuCommands" />
    <altmember cref="T:System.ComponentModel.Design.StandardCommands" />
  </Docs>
  <Members>
    <Member MemberName="AddCommand">
      <MemberSignature Language="C#" Value="public void AddCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="iMenuCommandService.AddCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command"><see cref="T:System.ComponentModel.Design.MenuCommand" /> Do dodania.</param>
        <summary>Dodaje określone polecenie menu standardowego do menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wyliczenia <xref:System.Windows.Forms.Design.MenuCommands> i <xref:System.ComponentModel.Design.StandardCommands> zawierają<xref:System.ComponentModel.Design.CommandID> identyfikatory wstępnie zdefiniowanych poleceń standardowych i poleceń menu, które są już skojarzone z lokalizacją w konkretnym menu.  
  
> [!NOTE]
>  Próba dodania polecenia menu z już istniejącym <xref:System.ComponentModel.Design.CommandID> spowoduje zgłoszenie elementu. <xref:System.InvalidOperationException> Gdy dodajesz polecenie menu, pamiętaj, aby sprawdzić, czy nie zostało ono jeszcze w menu przy użyciu <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> metody, czy też użyć obsługi wyjątków.  
  
 Możesz dołączyć procedurę obsługi zdarzeń do wstępnie zdefiniowanego polecenia menu, wykonując następującą procedurę:  
  
1.  Jeśli polecenie menu, które ma zostać połączone z programem obsługi zdarzeń, zostało dodane do menu lub znajduje się w <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> metodzie, należy rozważyć, czy chcesz przywrócić to polecenie menu później, oraz czy chcesz wywołać bieżącą procedurę obsługi zdarzeń z nowego programu obsługi zdarzeń. Jeśli kod może przywrócić polecenie menu lub łańcuch wywołań obsługi zdarzeń, pamiętaj, aby w dowolnym miejscu zapisać odwołanie do polecenia menu.  
  
2.  Upewnij się, że wszystkie poprzednio istniejące polecenie menu z <xref:System.ComponentModel.Design.CommandID> tą samą, zostało usunięte z menu <xref:System.ComponentModel.Design.IMenuCommandService.RemoveCommand%2A> przy użyciu metody.  
  
3.  Utwórz nowy <xref:System.ComponentModel.Design.MenuCommand> i określ procedurę obsługi zdarzeń w konstruktorze wraz <xref:System.ComponentModel.Design.CommandID> z reprezentuje polecenie do dodania. Każde standardowe polecenie menu jest skojarzone z wstępnie zdefiniowaną lokalizacją menu, do której jest dodawany. Obsługiwane Identyfikatory poleceń są zdefiniowane w <xref:System.ComponentModel.Design.StandardCommands> wyliczeniach i. <xref:System.Windows.Forms.Design.MenuCommands>  
  
4.  Jeśli chcesz wywołać wszystkie istniejące procedury obsługi zdarzeń dla polecenia menu, wywołaj <xref:System.ComponentModel.Design.MenuCommand.Invoke%2A> metodę polecenia menu zamienionego w menu programu obsługi zdarzeń, która obsługuje zdarzenie invoke polecenia menu.  
  
5.  Jeśli interesuje Cię przywrócenie programu obsługi zdarzeń istniejącego wcześniej polecenia menu, Dodaj zapisane, istniejące polecenie menu po usunięciu utworzonego polecenia menu zamiany. Możesz chcieć dodać to zachowanie do `Dispose` metody dla danego typu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.ComponentModel.Design.CommandID" /> Określony<see cref="T:System.ComponentModel.Design.MenuCommand" /> element jest już obecny w menu.</exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="AddVerb">
      <MemberSignature Language="C#" Value="public void AddVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member AddVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="iMenuCommandService.AddVerb verb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb"><see cref="T:System.ComponentModel.Design.DesignerVerb" /> Do dodania.</param>
        <summary>Dodaje określone zlecenie projektanta do zestawu zleceń projektanta globalnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Projektanci składników, którzy udostępniają zlecenia projektanta, powinni <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> używać właściwości swojego projektanta zamiast wywoływania tej metody. Ta metoda dodaje czasownik projektanta globalnego, do którego można uzyskać dostęp z menu skrótów kliknij prawym przyciskiem myszy w trybie projektowania niezależnie od aktualnie zaznaczonego składnika.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="FindCommand">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.MenuCommand FindCommand (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.MenuCommand FindCommand(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Design::MenuCommand ^ FindCommand(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member FindCommand : System.ComponentModel.Design.CommandID -&gt; System.ComponentModel.Design.MenuCommand" Usage="iMenuCommandService.FindCommand commandID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID"><see cref="T:System.ComponentModel.Design.CommandID" /> Aby wyszukać.</param>
        <summary>Wyszukuje określony identyfikator polecenia i zwraca skojarzone z nim polecenie menu.</summary>
        <returns>Skojarzona z identyfikatorem polecenia lub <see langword="null" /> Jeśli nie można odnaleźć polecenia. <see cref="T:System.ComponentModel.Design.MenuCommand" /></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="GlobalInvoke">
      <MemberSignature Language="C#" Value="public bool GlobalInvoke (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GlobalInvoke(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GlobalInvoke(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member GlobalInvoke : System.ComponentModel.Design.CommandID -&gt; bool" Usage="iMenuCommandService.GlobalInvoke commandID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID"><see cref="T:System.ComponentModel.Design.CommandID" /> Polecenie, które ma zostać wyszukane i wykonane.</param>
        <summary>Wywołuje polecenie menu lub zlecenie projektanta pasujące do określonego identyfikatora polecenia.</summary>
        <returns><see langword="true" />Jeśli polecenie zostało znalezione i wywołane pomyślnie; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wyszukuje polecenie menu lub zlecenie projektanta z <xref:System.ComponentModel.Design.CommandID> pasującym określonym. <xref:System.ComponentModel.Design.CommandID> Ta metoda najpierw przeszukuje kolekcję zleceń projektanta składającą się z globalnych i aktywnych zleceń dostarczonych przez projektanta przed kontynuowaniem wyszukiwania, w razie potrzeby, za pomocą usługi globalne polecenie środowiska. Jeśli znajduje się zgodne polecenie menu lub zlecenie projektanta, polecenie jest wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCommand">
      <MemberSignature Language="C#" Value="public void RemoveCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member RemoveCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="iMenuCommandService.RemoveCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command"><see cref="T:System.ComponentModel.Design.MenuCommand" /> Do usunięcia.</param>
        <summary>Usuwa określone standardowe polecenie menu z menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda usuwa określony <xref:System.ComponentModel.Design.MenuCommand> , jeśli zostanie znaleziona. Ta metoda nie wywołuje wyjątku ani nie zwraca wartości, jeśli nie można odnaleźć <xref:System.ComponentModel.Design.MenuCommand> określonego elementu. Użyj metody <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> , aby określić, <xref:System.ComponentModel.Design.MenuCommand> czy pasujący określony <xref:System.ComponentModel.Design.CommandID> element znajduje się w menu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="RemoveVerb">
      <MemberSignature Language="C#" Value="public void RemoveVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member RemoveVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="iMenuCommandService.RemoveVerb verb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb"><see cref="T:System.ComponentModel.Design.DesignerVerb" /> Do usunięcia.</param>
        <summary>Usuwa określone zlecenie projektanta z kolekcji zleceń projektanta globalnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda usuwa określone zlecenie projektanta globalnego, jeśli znajduje się w kolekcji zleceń projektanta globalnego. Można dodać zlecenie projektanta do kolekcji zleceń projektanta globalnego przy użyciu <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenu">
      <MemberSignature Language="C#" Value="public void ShowContextMenu (System.ComponentModel.Design.CommandID menuID, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowContextMenu(class System.ComponentModel.Design.CommandID menuID, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowContextMenu (menuID As CommandID, x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowContextMenu(System::ComponentModel::Design::CommandID ^ menuID, int x, int y);" />
      <MemberSignature Language="F#" Value="abstract member ShowContextMenu : System.ComponentModel.Design.CommandID * int * int -&gt; unit" Usage="iMenuCommandService.ShowContextMenu (menuID, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuID" Type="System.ComponentModel.Design.CommandID" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="menuID"><see cref="T:System.ComponentModel.Design.CommandID" /> Do wyświetlania menu skrótów.</param>
        <param name="x">Współrzędna x, w której ma być wyświetlane menu, we współrzędnych ekranu.</param>
        <param name="y">Współrzędna y, w której ma być wyświetlane menu, we współrzędnych ekranu.</param>
        <summary>Pokazuje określone menu skrótów w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu%2A> Metoda może wyświetlać dowolne z następujących menu skrótów programu Visual Studio, które zawierają polecenia menu w określonym punkcie:  
  
|Menu|CommandID|  
|----------|---------------|  
|Menu skrótów wyświetlane dla kontenera|<xref:System.Windows.Forms.Design.MenuCommands.ContainerMenu>|  
|Menu skrótów wyświetlane na pasku składnika|<xref:System.Windows.Forms.Design.MenuCommands.ComponentTrayMenu>|  
|Menu skrótów wyświetlane dla zaznaczenia|<xref:System.Windows.Forms.Design.MenuCommands.SelectionMenu>|  
|Menu skrótów wyświetlane dla zaznaczenia paska|<xref:System.Windows.Forms.Design.MenuCommands.TraySelectionMenu>|  
  
 Ta metoda może również wyświetlać inne zarejestrowane menu skrótów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="Verbs">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.DesignerVerbCollection Verbs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.DesignerVerbCollection Verbs" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.IMenuCommandService.Verbs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Verbs As DesignerVerbCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::Design::DesignerVerbCollection ^ Verbs { System::ComponentModel::Design::DesignerVerbCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Verbs : System.ComponentModel.Design.DesignerVerbCollection" Usage="System.ComponentModel.Design.IMenuCommandService.Verbs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerVerbCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję zleceń projektanta, które są obecnie dostępne.</summary>
        <value>A <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> , który zawiera zlecenia projektanta, które są obecnie dostępne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zestaw obecnie dostępnych zleceń projektanta składa się ze wszystkich zleceń projektanta globalnego, które są dodawane przez <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> metodę w tym interfejsie i poszczególnych zleceń projektanta, które są oferowane <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> przez właściwość poszczególnych projektantów. Jeśli nazwa czasownika globalnego powoduje konflikt z nazwą zlecenia projektanta, pierwszeństwo ma zlecenie projektanta udostępniane przez projektanta.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerbCollection" />
        <altmember cref="P:System.ComponentModel.Design.IDesigner.Verbs" />
      </Docs>
    </Member>
  </Members>
</Type>
