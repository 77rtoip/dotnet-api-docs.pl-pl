<Type Name="IMenuCommandService" FullName="System.ComponentModel.Design.IMenuCommandService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="415c35c6249a55e7d53fa47552431a18daadcc25" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39816956" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IMenuCommandService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMenuCommandService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.IMenuCommandService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMenuCommandService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMenuCommandService" />
  <TypeSignature Language="F#" Value="type IMenuCommandService = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia metody do zarządzania globalnego zlecenia projektanta i poleceń menu są dostępne w trybie projektowania oraz niektóre typy menu skrótów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten interfejs zapewnia metody do:  
  
-   Znajdź, wywołania, dodawać i usuwać polecenia globalnego zlecenia projektanta.  
  
-   Znajdź, wywołania, dodawać i usuwać standardowe menu poleceń.  
  
-   Zmiany programów obsługi zdarzeń skojarzonych z polecenia standardowe menu.  
  
-   Wyświetlić menu skrótów standardowych poleceń, który jest skojarzony z menu <xref:System.ComponentModel.Design.CommandID>.  
  
 Zlecenia projektanta reprezentują niestandardowy poleceń, które są wyświetlane w menu skrótów w trybie projektowania. Zlecenia projektanta może zapewnić etykietę określony tekst. Każdego zlecenia projektanta zostanie automatycznie przypisany unikatowy <xref:System.ComponentModel.Design.CommandID>. Projektant może zapewnić zlecenia projektanta za pośrednictwem jego <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> właściwości, ale te są dostępne tylko podczas składnik projektanta jest aktualnie wybrany. Zlecenia projektanta globalne są poleceń projektanta zlecenia, które są dostępne z menu skrótów trybu projektowania, niezależnie od wybranego składnika. Ten interfejs umożliwia zarządzanie zestaw globalnych zlecenia projektanta, które są dostępne w trybie projektowania.  
  
 Możesz dodać za pomocą globalnego zlecenia projektanta <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> metody, na które można usunąć za pomocą globalnego zlecenia projektanta <xref:System.ComponentModel.Design.IMenuCommandService.RemoveVerb%2A> metody. Można wywołać za pomocą projektanta zlecenie <xref:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke%2A> metody, jeśli znasz <xref:System.ComponentModel.Design.CommandID> zlecenia. <xref:System.ComponentModel.Design.IMenuCommandService.Verbs%2A> Właściwość ten interfejs zawiera bieżący zestaw poleceń zlecenia projektanta do wyświetlenia w menu skrótów. Ten zbiór poleceń projektanta zlecenie składa się z wszystkie zlecenia projektanta globalne i wszelkie zlecenia projektanta oferowane przez projektanta wszelkich aktualnie wybranego składnika. Ten zbiór poleceń jest aktualizowana każdorazowo składnika za pomocą projektanta oferty poleceń projektanta zlecenie jest zaznaczenia lub usunięcia zaznaczenia.  
  
 Polecenia menu są ograniczone do zestawu wstępnie zdefiniowanych standardowych poleceń. Większość wstępnie zdefiniowanych standardowych poleceń są zdefiniowane w <xref:System.ComponentModel.Design.StandardCommands> i <xref:System.Windows.Forms.Design.MenuCommands> wyliczenia. Możesz dodać, usunąć i wywołania polecenia menu i wyszukaj polecenia menu, które zostały dodane do menu przy użyciu metody tego interfejsu.  
  
 Możesz dodać polecenie menu standardowego przy użyciu <xref:System.ComponentModel.Design.IMenuCommandService.AddCommand%2A> metoda i usuń polecenia standardowe menu przy użyciu <xref:System.ComponentModel.Design.IMenuCommandService.RemoveCommand%2A> metody. Program obsługi zdarzeń można dołączyć do wstępnie zdefiniowanych standardowego polecenia menu, wykonując poniższe kroki szczegółowo opisane w dokumentacji <xref:System.ComponentModel.Design.IMenuCommandService.AddCommand%2A> metody. Polecenia menu, można pobrać <xref:System.ComponentModel.Design.CommandID> jeżeli został dodany do menu za pomocą <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> metody. Możesz wywołać polecenie menu lub przez polecenia projektanta zlecenie <xref:System.ComponentModel.Design.CommandID> przy użyciu <xref:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke%2A> metody.  
  
> [!NOTE]
>  Próba dodania polecenia menu z istniejącym już <xref:System.ComponentModel.Design.CommandID> zgłosi <xref:System.InvalidOperationException>. Podczas dodawania polecenia menu, pamiętaj sprawdzić, czy nie jest jeszcze w menu przy użyciu <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> metody lub rozsądny sposób obsługi wyjątków, użycie.  
  
> [!NOTE]
>  Polecenia menu mogą być dodawane do menu i mieć jej <xref:System.ComponentModel.Design.MenuCommand.Visible%2A> lub <xref:System.ComponentModel.Design.MenuCommand.Enabled%2A> właściwości ustawione na `false`. Jeśli nie możesz wizualnie zlokalizować polecenia menu, który został dodany do menu, może być jedną z tych właściwości zostały ustawione na `false`.  
  
 Można wyświetlić niektórych menu skrótów w standardowych, zawierający polecenia menu w określonej lokalizacji za pomocą <xref:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu%2A> metody. Dokumentacja dla tej metody zawiera tabelę z listą identyfikatorów poleceń, określających prawidłowe menu do wyświetlenia.  
  
   
  
## Examples  
 Ten przykład demonstruje użycie <xref:System.ComponentModel.Design.IMenuCommandService> dodać <xref:System.ComponentModel.Design.MenuCommand>.  
  
 [!code-cpp[MenuCommand Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuCommand Example/CPP/component1.cpp#1)]
 [!code-csharp[MenuCommand Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuCommand Example/CS/component1.cs#1)]
 [!code-vb[MenuCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuCommand Example/VB/component1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
    <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
    <altmember cref="T:System.ComponentModel.Design.CommandID" />
    <altmember cref="T:System.Windows.Forms.Design.MenuCommands" />
    <altmember cref="T:System.ComponentModel.Design.StandardCommands" />
  </Docs>
  <Members>
    <Member MemberName="AddCommand">
      <MemberSignature Language="C#" Value="public void AddCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="iMenuCommandService.AddCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command">
          <see cref="T:System.ComponentModel.Design.MenuCommand" /> Do dodania.</param>
        <summary>Dodaje określony standardowego polecenia menu do menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.MenuCommands> i <xref:System.ComponentModel.Design.StandardCommands> wyliczenia zawierają <xref:System.ComponentModel.Design.CommandID> identyfikatory dla wstępnie zdefiniowanych standardowych poleceń i polecenia menu, które zostały już skojarzone z lokalizacji, w szczególności menu.  
  
> [!NOTE]
>  Próba dodania polecenia menu z istniejącym już <xref:System.ComponentModel.Design.CommandID> zgłosi <xref:System.InvalidOperationException>. Podczas dodawania polecenia menu, pamiętaj sprawdzić, czy nie jest jeszcze w menu przy użyciu <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> metody lub rozsądny sposób obsługi wyjątków, użycie.  
  
 Polecenia menu wstępnie zdefiniowane przy użyciu poniższej procedury, można dołączyć program obsługi zdarzeń:  
  
1.  Jeśli polecenie menu do dołączenia programu obsługi zdarzeń został dodany do menu lub znajduje się za pomocą <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> metody, należy rozważyć, czy chcesz później przywrócić tego polecenia menu i tego, czy chcesz wywołać bieżącego programu obsługi zdarzeń z nowy program obsługi zdarzeń. Twój kod może przywrócić polecenie menu lub łańcucha wywołanie procedury obsługi zdarzeń, należy przechowywać odniesienie do polecenia menu w jakimś miejscu.  
  
2.  Upewnij się, że wszystkie uprzednio istniejące polecenia menu z takimi samymi <xref:System.ComponentModel.Design.CommandID> został usunięty z menu przy użyciu <xref:System.ComponentModel.Design.IMenuCommandService.RemoveCommand%2A> metody.  
  
3.  Utwórz nową <xref:System.ComponentModel.Design.MenuCommand> i określ obsługi zdarzenia w konstruktorze, wraz z <xref:System.ComponentModel.Design.CommandID> reprezentujący polecenie do dodania. Każdy standardowego polecenia menu jest skojarzony z lokalizacją wstępnie zdefiniowanych menu, w których jest ona dodawana do. Identyfikatory poleceń obsługiwane są zdefiniowane w <xref:System.ComponentModel.Design.StandardCommands> i <xref:System.Windows.Forms.Design.MenuCommands> wyliczenia.  
  
4.  Jeśli chcesz wywołać wszelkie istniejące wcześniej programu obsługi zdarzeń dla polecenia menu, wywołaj <xref:System.ComponentModel.Design.MenuCommand.Invoke%2A> metoda polecenia menu, które zostały zmienione w dniu menu z programu obsługi zdarzeń, który obsługuje zdarzenia Wywołaj polecenie menu.  
  
5.  Jeśli interesuje Cię przywracania programu obsługi zdarzeń przeniosła istniejące wcześniej polecenia menu, który został zastąpiony, Dodaj przechowywane, istniejący wcześniej polecenia menu, po usunięciu zastępczy polecenia menu, został utworzony. Możesz chcieć dodać to zachowanie, aby `Dispose` metody dla danego typu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.ComponentModel.Design.CommandID" /> Określonego <see cref="T:System.ComponentModel.Design.MenuCommand" /> znajduje się już menu.</exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="AddVerb">
      <MemberSignature Language="C#" Value="public void AddVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member AddVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="iMenuCommandService.AddVerb verb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb">
          <see cref="T:System.ComponentModel.Design.DesignerVerb" /> Do dodania.</param>
        <summary>Dodaje określone zlecenie projektanta do zestawu globalnego zlecenia projektanta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy użyć projektantów składniki, które zapewniają zlecenia projektanta <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> właściwość ich projektanta, a nie wywołanie tej metody. Metoda ta umożliwia dodanie czasownikiem projektanta globalne są dostępne z menu skrótów kliknij prawym przyciskiem myszy w trybie projektowania, niezależnie od aktualnie wybranego składnika.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="FindCommand">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.MenuCommand FindCommand (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.MenuCommand FindCommand(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Design::MenuCommand ^ FindCommand(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member FindCommand : System.ComponentModel.Design.CommandID -&gt; System.ComponentModel.Design.MenuCommand" Usage="iMenuCommandService.FindCommand commandID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID">
          <see cref="T:System.ComponentModel.Design.CommandID" /> Do wyszukania.</param>
        <summary>Wyszukuje polecenie o określonym identyfikatorze i zwraca skojarzonego z nim polecenia menu.</summary>
        <returns>
          <see cref="T:System.ComponentModel.Design.MenuCommand" /> Skojarzonych z Identyfikatorem polecenia lub <see langword="null" /> Jeśli polecenie nie zostanie znaleziony.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="GlobalInvoke">
      <MemberSignature Language="C#" Value="public bool GlobalInvoke (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GlobalInvoke(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GlobalInvoke(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member GlobalInvoke : System.ComponentModel.Design.CommandID -&gt; bool" Usage="iMenuCommandService.GlobalInvoke commandID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID">
          <see cref="T:System.ComponentModel.Design.CommandID" /> Polecenia do wyszukiwania i wykonywanie.</param>
        <summary>Wywołuje polecenie zlecenie menu lub Projektant dopasowania identyfikatora określonego polecenia.</summary>
        <returns>
          <see langword="true" /> Jeśli polecenie zostało znalezione i pomyślnie; wywołany w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda ta wyszukuje polecenie menu lub zlecenia projektanta z <xref:System.ComponentModel.Design.CommandID> pasujących do określonego <xref:System.ComponentModel.Design.CommandID>. Metoda ta przeszukuje najpierw w obrębie kolekcji zlecenia projektanta składający się z globalnym i aktywne zleceń dostarczone do projektanta przed kontynuowaniem wyszukiwania, jeśli to konieczne, za pośrednictwem usługi polecenia w środowisku globalnym. Znajduje pasujące polecenie menu lub zlecenia projektanta, wywoływania polecenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCommand">
      <MemberSignature Language="C#" Value="public void RemoveCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member RemoveCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="iMenuCommandService.RemoveCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command">
          <see cref="T:System.ComponentModel.Design.MenuCommand" /> Do usunięcia.</param>
        <summary>Usuwa określony standardowego polecenia menu z menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda usuwa określony <xref:System.ComponentModel.Design.MenuCommand> Jeśli zostanie znaleziony. Ta metoda nie jest w stanie zgłosić wyjątek ani zwracać wartości, jeśli określony <xref:System.ComponentModel.Design.MenuCommand> nie zostanie znaleziony. Użyj <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> metodę pozwala ustalić czy <xref:System.ComponentModel.Design.MenuCommand> pasujących do określonego <xref:System.ComponentModel.Design.CommandID> znajduje się w menu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="RemoveVerb">
      <MemberSignature Language="C#" Value="public void RemoveVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member RemoveVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="iMenuCommandService.RemoveVerb verb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb">
          <see cref="T:System.ComponentModel.Design.DesignerVerb" /> Do usunięcia.</param>
        <summary>Usuwa określone zlecenie projektanta z kolekcji globalnego zlecenia projektanta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda usuwa określone zlecenie projektanta globalnych, jeśli znajduje się w kolekcji globalnego zlecenia projektanta. Zlecenia projektanta można dodać za pomocą kolekcji globalnego zlecenia projektanta <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenu">
      <MemberSignature Language="C#" Value="public void ShowContextMenu (System.ComponentModel.Design.CommandID menuID, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowContextMenu(class System.ComponentModel.Design.CommandID menuID, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowContextMenu (menuID As CommandID, x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowContextMenu(System::ComponentModel::Design::CommandID ^ menuID, int x, int y);" />
      <MemberSignature Language="F#" Value="abstract member ShowContextMenu : System.ComponentModel.Design.CommandID * int * int -&gt; unit" Usage="iMenuCommandService.ShowContextMenu (menuID, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuID" Type="System.ComponentModel.Design.CommandID" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="menuID">
          <see cref="T:System.ComponentModel.Design.CommandID" /> Do menu skrótów, aby wyświetlić.</param>
        <param name="x">Współrzędna x jaką do wyświetlenia w menu w współrzędne ekranu.</param>
        <param name="y">Współrzędna y jaką do wyświetlenia w menu w współrzędne ekranu.</param>
        <summary>Pokazuje menu skrótów określony w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu%2A> Metoda można wyświetlić żadnego z następujących menu skrótów programu Visual Studio, zawierający polecenia menu w określonym punkcie:  
  
|Menu|Identyfikator polecenia|  
|----------|---------------|  
|Menu skrótów dla kontenera|<xref:System.Windows.Forms.Design.MenuCommands.ContainerMenu>|  
|Menu skrótów dla zasobnika składnika|<xref:System.Windows.Forms.Design.MenuCommands.ComponentTrayMenu>|  
|Menu skrótów dla zaznaczonego elementu|<xref:System.Windows.Forms.Design.MenuCommands.SelectionMenu>|  
|Menu skrótów dla zaznaczenia na pasku zadań|<xref:System.Windows.Forms.Design.MenuCommands.TraySelectionMenu>|  
  
 Tę metodę można również wyświetlić inne menu skrótów zarejestrowane.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="Verbs">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.DesignerVerbCollection Verbs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.DesignerVerbCollection Verbs" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.IMenuCommandService.Verbs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Verbs As DesignerVerbCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::Design::DesignerVerbCollection ^ Verbs { System::ComponentModel::Design::DesignerVerbCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Verbs : System.ComponentModel.Design.DesignerVerbCollection" Usage="System.ComponentModel.Design.IMenuCommandService.Verbs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerVerbCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję zlecenia projektanta, które są obecnie dostępne.</summary>
        <value>Element <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> zawierający zlecenia projektanta, które są obecnie dostępne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zestaw dostępnych zlecenia projektanta składa się z wszystkich globalnego zlecenia projektanta, które są dodawane przez <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> metody tego interfejsu, a poszczególne zlecenia projektanta, które są oferowane przez <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> właściwości poszczególnych twórców. Jeśli nazwa globalnej zlecenie konflikt nazw zlecenia projektanta, pierwszeństwo ma zlecenia projektanta dostarczone do projektanta.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerbCollection" />
        <altmember cref="P:System.ComponentModel.Design.IDesigner.Verbs" />
      </Docs>
    </Member>
  </Members>
</Type>