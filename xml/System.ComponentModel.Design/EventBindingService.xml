<Type Name="EventBindingService" FullName="System.ComponentModel.Design.EventBindingService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dc56f648219b4e97c4e37c132a6deff8e9104682" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69349122" /></Metadata><TypeSignature Language="C#" Value="public abstract class EventBindingService : System.ComponentModel.Design.IEventBindingService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EventBindingService extends System.Object implements class System.ComponentModel.Design.IEventBindingService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.EventBindingService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EventBindingService&#xA;Implements IEventBindingService" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventBindingService abstract : System::ComponentModel::Design::IEventBindingService" />
  <TypeSignature Language="F#" Value="type EventBindingService = class&#xA;    interface IEventBindingService" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.IEventBindingService</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4056d-101">Domyślna implementacja <see cref="T:System.ComponentModel.Design.IEventBindingService" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="4056d-101">A default implementation of the <see cref="T:System.ComponentModel.Design.IEventBindingService" /> interface.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4056d-102">Udostępniając usługę do rejestrowania programów obsługi zdarzeń dla zdarzeń składników, <xref:System.ComponentModel.Design.EventBindingService> zapewnia sposób powiązania procedury obsługi zdarzeń ze zdarzeniem składnika z kodu projektanta.</span><span class="sxs-lookup"><span data-stu-id="4056d-102">By providing a service for registering event handlers for component events, <xref:System.ComponentModel.Design.EventBindingService> provides a way to link an event handler with a component event from designer code.</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.NamedPermissionSet"><span data-ttu-id="4056d-103">Aby uzyskać pełny dostęp do zasobów systemowych.</span><span class="sxs-lookup"><span data-stu-id="4056d-103">for full access to system resources.</span></span> <span data-ttu-id="4056d-104">Wartości popytu: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />.</span><span class="sxs-lookup"><span data-stu-id="4056d-104">Demand values: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />.</span></span> <span data-ttu-id="4056d-105">Stan skojarzony:</span><span class="sxs-lookup"><span data-stu-id="4056d-105">Associated state:</span></span></permission>
    <altmember cref="T:System.IServiceProvider" />
    <altmember cref="T:System.ComponentModel.EventDescriptor" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventBindingService (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (provider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EventBindingService(IServiceProvider ^ provider);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.EventBindingService : IServiceProvider -&gt; System.ComponentModel.Design.EventBindingService" Usage="new System.ComponentModel.Design.EventBindingService provider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4056d-106">Dostawca usług, z którego <see cref="T:System.ComponentModel.Design.EventBindingService" /> będzie wysyłać zapytania o usługi.</span><span class="sxs-lookup"><span data-stu-id="4056d-106">The service provider from which <see cref="T:System.ComponentModel.Design.EventBindingService" /> will query for services.</span></span></param>
        <summary><span data-ttu-id="4056d-107">Inicjuje nowe wystąpienie klasy <see cref="T:System.ComponentModel.Design.EventBindingService" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="4056d-107">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.EventBindingService" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4056d-108"><paramref name="provider" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4056d-108"><paramref name="provider" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="CreateUniqueMethodName">
      <MemberSignature Language="C#" Value="protected abstract string CreateUniqueMethodName (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateUniqueMethodName(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateUniqueMethodName (component As IComponent, e As EventDescriptor) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::String ^ CreateUniqueMethodName(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e);" />
      <MemberSignature Language="F#" Value="abstract member CreateUniqueMethodName : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor -&gt; string" Usage="eventBindingService.CreateUniqueMethodName (component, e)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="4056d-109">Składnik, dla którego zostanie utworzona nazwa metody.</span><span class="sxs-lookup"><span data-stu-id="4056d-109">The component for which the method name will be created.</span></span></param>
        <param name="e"><span data-ttu-id="4056d-110">Zdarzenie, dla którego ma zostać utworzona nazwa.</span><span class="sxs-lookup"><span data-stu-id="4056d-110">The event to create a name for.</span></span></param>
        <summary><span data-ttu-id="4056d-111">Tworzy unikatową nazwę metody.</span><span class="sxs-lookup"><span data-stu-id="4056d-111">Creates a unique method name.</span></span></summary>
        <returns><span data-ttu-id="4056d-112">Unikatowa nazwa metody.</span><span class="sxs-lookup"><span data-stu-id="4056d-112">The unique method name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4056d-113">Nazwa zwrócona przez <xref:System.ComponentModel.Design.EventBindingService.CreateUniqueMethodName%2A> metodę musi być zgodna z używanym językiem skryptu i nie może powodować konfliktu z żadną inną nazwą w kodzie.</span><span class="sxs-lookup"><span data-stu-id="4056d-113">The name returned by the <xref:System.ComponentModel.Design.EventBindingService.CreateUniqueMethodName%2A> method must be compatible with the script language being used and it must not conflict with any other name in your code.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4056d-114"><paramref name="component" />lub <paramref name="e" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4056d-114"><paramref name="component" /> or <paramref name="e" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="FreeMethod">
      <MemberSignature Language="C#" Value="protected virtual void FreeMethod (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FreeMethod(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e, string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.FreeMethod(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FreeMethod (component As IComponent, e As EventDescriptor, methodName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FreeMethod(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e, System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="abstract member FreeMethod : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; unit&#xA;override this.FreeMethod : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; unit" Usage="eventBindingService.FreeMethod (component, e, methodName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="4056d-115">Składnik, z którym jest powiązana ta metoda.</span><span class="sxs-lookup"><span data-stu-id="4056d-115">The component to which the method is bound.</span></span></param>
        <param name="e"><span data-ttu-id="4056d-116"><see cref="T:System.ComponentModel.EventDescriptor" /> Dla programu obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="4056d-116">The <see cref="T:System.ComponentModel.EventDescriptor" /> for the event handler.</span></span></param>
        <param name="methodName"><span data-ttu-id="4056d-117">Nazwa metody, która ma zostać zwolniona.</span><span class="sxs-lookup"><span data-stu-id="4056d-117">The name of the method to be freed.</span></span></param>
        <summary><span data-ttu-id="4056d-118">Dostarcza powiadomienia, że dana metoda nie jest już używana przez program obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="4056d-118">Provides a notification that a particular method is no longer being used by an event handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4056d-119">Niektóre implementacje mogą zamiarować usunięcie programu obsługi zdarzeń, gdy nie są używane żadne zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="4056d-119">Some implementations may intend to remove the event handler when no events are using it.</span></span> <span data-ttu-id="4056d-120">Zastępowanie <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> i <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, implementacja może wnioskować, gdy metoda nie jest już wymagana.</span><span class="sxs-lookup"><span data-stu-id="4056d-120">By overriding <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> and <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, an implementation can infer when a method is no longer needed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="GetCompatibleMethods">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.ICollection GetCompatibleMethods (System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.ICollection GetCompatibleMethods(class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetCompatibleMethods (e As EventDescriptor) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Collections::ICollection ^ GetCompatibleMethods(System::ComponentModel::EventDescriptor ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GetCompatibleMethods : System.ComponentModel.EventDescriptor -&gt; System.Collections.ICollection" Usage="eventBindingService.GetCompatibleMethods e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="4056d-121"><see cref="T:System.ComponentModel.EventDescriptor" /> Zawierający zgodny delegat.</span><span class="sxs-lookup"><span data-stu-id="4056d-121">The <see cref="T:System.ComponentModel.EventDescriptor" /> containing the compatible delegate.</span></span></param>
        <summary><span data-ttu-id="4056d-122">Zwraca kolekcję nazw zgodnych metod.</span><span class="sxs-lookup"><span data-stu-id="4056d-122">Returns a collection of names of compatible methods.</span></span></summary>
        <returns><span data-ttu-id="4056d-123">Kolekcja ciągów, które są nazwami zgodnych metod.</span><span class="sxs-lookup"><span data-stu-id="4056d-123">A collection of strings that are names of compatible methods.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4056d-124">Każdy ciąg zwracany w kolekcji to nazwa metody metody, której podpis jest zgodny z delegatem zawartym w `e`.</span><span class="sxs-lookup"><span data-stu-id="4056d-124">Each string returned in the collection is the method name of a method whose signature is compatible with the delegate contained in `e`.</span></span> <span data-ttu-id="4056d-125"><xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A>powinna zwracać pustą kolekcję, jeśli nazwy nie są zgodne.</span><span class="sxs-lookup"><span data-stu-id="4056d-125"><xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A> should return an empty collection if no names are compatible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4056d-126"><paramref name="e" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4056d-126"><paramref name="e" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="member this.GetService : Type -&gt; obj" Usage="eventBindingService.GetService serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="4056d-127">Typ usługi do pobrania.</span><span class="sxs-lookup"><span data-stu-id="4056d-127">The type of service to retrieve.</span></span></param>
        <summary><span data-ttu-id="4056d-128">Pobiera żądaną usługę od dostawcy usług.</span><span class="sxs-lookup"><span data-stu-id="4056d-128">Gets the requested service from the service provider.</span></span></summary>
        <returns><span data-ttu-id="4056d-129">Odwołanie do usługi określonej przez <paramref name="serviceType" />lub <see langword="null" /> Jeśli żądana usługa jest niedostępna.</span><span class="sxs-lookup"><span data-stu-id="4056d-129">A reference to the service specified by <paramref name="serviceType" />, or <see langword="null" /> if the requested service is not available.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ShowCode">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4056d-130">Wyświetla kod użytkownika.</span><span class="sxs-lookup"><span data-stu-id="4056d-130">Displays user code.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="protected abstract bool ShowCode ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShowCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ShowCode" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ShowCode () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ShowCode();" />
      <MemberSignature Language="F#" Value="abstract member ShowCode : unit -&gt; bool" Usage="eventBindingService.ShowCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.ShowCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4056d-131">Wyświetla kod użytkownika.</span><span class="sxs-lookup"><span data-stu-id="4056d-131">Displays user code.</span></span></summary>
        <returns><span data-ttu-id="4056d-132"><see langword="true" />Jeśli jest możliwe wyświetlenie kodu; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="4056d-132"><see langword="true" /> if it is possible to display the code; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4056d-133"><xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> Metoda nie wyświetla żadnego określonego kodu; na ogół wyświetla ostatni kod, który wpisano użytkownik.</span><span class="sxs-lookup"><span data-stu-id="4056d-133">The <xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> method does not display any particular code; generally it displays the last code the user typed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="protected abstract bool ShowCode (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShowCode(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ShowCode(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ShowCode (lineNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ShowCode(int lineNumber);" />
      <MemberSignature Language="F#" Value="abstract member ShowCode : int -&gt; bool" Usage="eventBindingService.ShowCode lineNumber" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber"><span data-ttu-id="4056d-134">Numer wiersza do wyświetlenia.</span><span class="sxs-lookup"><span data-stu-id="4056d-134">The line number to show.</span></span></param>
        <summary><span data-ttu-id="4056d-135">Wyświetla kod użytkownika w danym numerze wiersza.</span><span class="sxs-lookup"><span data-stu-id="4056d-135">Displays the user code at the given line number.</span></span></summary>
        <returns><span data-ttu-id="4056d-136"><see langword="true" />Jeśli jest możliwe wyświetlenie kodu; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="4056d-136"><see langword="true" /> if it is possible to display the code; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4056d-137">Numery wierszy są zależne od siebie.</span><span class="sxs-lookup"><span data-stu-id="4056d-137">Line numbers are one-based.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="protected abstract bool ShowCode (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShowCode(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e, string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ShowCode (component As IComponent, e As EventDescriptor, methodName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ShowCode(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e, System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="abstract member ShowCode : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; bool" Usage="eventBindingService.ShowCode (component, e, methodName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="4056d-138">Składnik, z którym jest powiązana ta metoda.</span><span class="sxs-lookup"><span data-stu-id="4056d-138">The component to which the method is bound.</span></span></param>
        <param name="e"><span data-ttu-id="4056d-139"><see cref="T:System.ComponentModel.EventDescriptor" /> Dla programu obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="4056d-139">The <see cref="T:System.ComponentModel.EventDescriptor" /> for the event handler.</span></span></param>
        <param name="methodName"><span data-ttu-id="4056d-140">Nazwa metody, dla której ma zostać wyświetlony kod.</span><span class="sxs-lookup"><span data-stu-id="4056d-140">The name of the method for which to display code.</span></span></param>
        <summary><span data-ttu-id="4056d-141">Wyświetla kod użytkownika dla określonej metody.</span><span class="sxs-lookup"><span data-stu-id="4056d-141">Displays the user code for the specified method.</span></span></summary>
        <returns><span data-ttu-id="4056d-142"><see langword="true" />Jeśli jest możliwe wyświetlenie kodu; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="4056d-142"><see langword="true" /> if it is possible to display the code; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4056d-143"><xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> Metoda wyświetla treść kodu użytkownika przy użyciu podaną nazwę metody.</span><span class="sxs-lookup"><span data-stu-id="4056d-143">The <xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> method displays the body of the user code with the given method name.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName">
      <MemberSignature Language="C#" Value="string IEventBindingService.CreateUniqueMethodName (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function CreateUniqueMethodName (component As IComponent, e As EventDescriptor) As String Implements IEventBindingService.CreateUniqueMethodName" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::CreateUniqueMethodName;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="4056d-144">Wystąpienie składnika, z którym jest połączone zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="4056d-144">The component instance the event is connected to.</span></span></param>
        <param name="e"><span data-ttu-id="4056d-145">Zdarzenie, dla którego ma zostać utworzona nazwa.</span><span class="sxs-lookup"><span data-stu-id="4056d-145">The event to create a name for.</span></span></param>
        <summary><span data-ttu-id="4056d-146">Tworzy unikatową nazwę metody obsługi zdarzeń dla określonego składnika i zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="4056d-146">Creates a unique name for an event-handler method for the specified component and event.</span></span></summary>
        <returns><span data-ttu-id="4056d-147">Zalecana nazwa metody obsługi zdarzeń dla tego zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="4056d-147">The recommended name for the event-handler method for this event.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4056d-148"><paramref name="component" />lub <paramref name="e" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4056d-148"><paramref name="component" /> or <paramref name="e" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IEventBindingService.GetCompatibleMethods (System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetCompatibleMethods(System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function GetCompatibleMethods (e As EventDescriptor) As ICollection Implements IEventBindingService.GetCompatibleMethods" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::ICollection ^ System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::GetCompatibleMethods;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="4056d-149">Zdarzenie, aby uzyskać zgodne metody obsługi zdarzeń dla programu.</span><span class="sxs-lookup"><span data-stu-id="4056d-149">The event to get the compatible event-handler methods for.</span></span></param>
        <summary><span data-ttu-id="4056d-150">Pobiera kolekcję metod obsługi zdarzeń, które mają sygnaturę metody zgodną z określonym zdarzeniem.</span><span class="sxs-lookup"><span data-stu-id="4056d-150">Gets a collection of event-handler methods that have a method signature compatible with the specified event.</span></span></summary>
        <returns><span data-ttu-id="4056d-151">Kolekcja ciągów, które są nazwami zgodnych metod.</span><span class="sxs-lookup"><span data-stu-id="4056d-151">A collection of strings that are names of compatible methods.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4056d-152">Każdy ciąg zwracany w kolekcji to nazwa metody metody, której podpis jest zgodny z delegatem zawartym w `e`.</span><span class="sxs-lookup"><span data-stu-id="4056d-152">Each string returned in the collection is the method name of a method whose signature is compatible with the delegate contained in `e`.</span></span> <span data-ttu-id="4056d-153"><xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A>powinna zwracać pustą kolekcję, jeśli nazwy nie są zgodne.</span><span class="sxs-lookup"><span data-stu-id="4056d-153"><xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A> should return an empty collection if no names are compatible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4056d-154"><paramref name="e" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4056d-154"><paramref name="e" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetEvent">
      <MemberSignature Language="C#" Value="System.ComponentModel.EventDescriptor IEventBindingService.GetEvent (System.ComponentModel.PropertyDescriptor property);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ComponentModel.EventDescriptor System.ComponentModel.Design.IEventBindingService.GetEvent(class System.ComponentModel.PropertyDescriptor property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEvent(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function GetEvent (property As PropertyDescriptor) As EventDescriptor Implements IEventBindingService.GetEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::ComponentModel::EventDescriptor ^ System.ComponentModel.Design.IEventBindingService.GetEvent(System::ComponentModel::PropertyDescriptor ^ property) = System::ComponentModel::Design::IEventBindingService::GetEvent;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.EventDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="property"><span data-ttu-id="4056d-155">Właściwość, która reprezentuje zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="4056d-155">The property that represents an event.</span></span></param>
        <summary><span data-ttu-id="4056d-156"><see cref="T:System.ComponentModel.EventDescriptor" /> Pobiera dla zdarzenia, które reprezentuje określony deskryptor właściwości, jeśli reprezentuje zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="4056d-156">Gets an <see cref="T:System.ComponentModel.EventDescriptor" /> for the event that the specified property descriptor represents, if it represents an event.</span></span></summary>
        <returns><span data-ttu-id="4056d-157">Element <see cref="T:System.ComponentModel.EventDescriptor" /> dla zdarzenia reprezentowanego przez właściwość lub <see langword="null" /> Jeśli właściwość nie reprezentuje zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="4056d-157">An <see cref="T:System.ComponentModel.EventDescriptor" /> for the event that the property represents, or <see langword="null" /> if the property does not represent an event.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetEventProperties">
      <MemberSignature Language="C#" Value="System.ComponentModel.PropertyDescriptorCollection IEventBindingService.GetEventProperties (System.ComponentModel.EventDescriptorCollection events);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptorCollection System.ComponentModel.Design.IEventBindingService.GetEventProperties(class System.ComponentModel.EventDescriptorCollection events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEventProperties(System.ComponentModel.EventDescriptorCollection)" />
      <MemberSignature Language="VB.NET" Value="Function GetEventProperties (events As EventDescriptorCollection) As PropertyDescriptorCollection Implements IEventBindingService.GetEventProperties" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::ComponentModel::PropertyDescriptorCollection ^ System.ComponentModel.Design.IEventBindingService.GetEventProperties(System::ComponentModel::EventDescriptorCollection ^ events) = System::ComponentModel::Design::IEventBindingService::GetEventProperties;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.ComponentModel.EventDescriptorCollection" />
      </Parameters>
      <Docs>
        <param name="events"><span data-ttu-id="4056d-158">Zdarzenia do przekonwertowania na właściwości.</span><span class="sxs-lookup"><span data-stu-id="4056d-158">The events to convert to properties.</span></span></param>
        <summary><span data-ttu-id="4056d-159">Konwertuje zestaw deskryptorów zdarzeń na zestaw deskryptorów właściwości.</span><span class="sxs-lookup"><span data-stu-id="4056d-159">Converts a set of event descriptors to a set of property descriptors.</span></span></summary>
        <returns><span data-ttu-id="4056d-160">Tablica <see cref="T:System.ComponentModel.PropertyDescriptor" /> obiektów, które opisują zestaw zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="4056d-160">An array of <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects that describe the event set.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4056d-161"><paramref name="events" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4056d-161"><paramref name="events" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetEventProperty">
      <MemberSignature Language="C#" Value="System.ComponentModel.PropertyDescriptor IEventBindingService.GetEventProperty (System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptor System.ComponentModel.Design.IEventBindingService.GetEventProperty(class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEventProperty(System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function GetEventProperty (e As EventDescriptor) As PropertyDescriptor Implements IEventBindingService.GetEventProperty" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::ComponentModel::PropertyDescriptor ^ System.ComponentModel.Design.IEventBindingService.GetEventProperty(System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::GetEventProperty;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="4056d-162">Zdarzenie do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="4056d-162">The event to convert.</span></span></param>
        <summary><span data-ttu-id="4056d-163">Konwertuje pojedynczy deskryptor zdarzenia do deskryptora właściwości.</span><span class="sxs-lookup"><span data-stu-id="4056d-163">Converts a single event descriptor to a property descriptor.</span></span></summary>
        <returns><span data-ttu-id="4056d-164">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> opisującym zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="4056d-164">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that describes the event.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4056d-165"><paramref name="e" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4056d-165"><paramref name="e" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4056d-166">Wyświetla kod użytkownika projektanta.</span><span class="sxs-lookup"><span data-stu-id="4056d-166">Displays the user code for the designer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <MemberSignature Language="C#" Value="bool IEventBindingService.ShowCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.Design.IEventBindingService.ShowCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode" />
      <MemberSignature Language="VB.NET" Value="Function ShowCode () As Boolean Implements IEventBindingService.ShowCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ComponentModel.Design.IEventBindingService.ShowCode() = System::ComponentModel::Design::IEventBindingService::ShowCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.ShowCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4056d-167">Wyświetla kod użytkownika projektanta.</span><span class="sxs-lookup"><span data-stu-id="4056d-167">Displays the user code for the designer.</span></span></summary>
        <returns><span data-ttu-id="4056d-168"><see langword="true" />Jeśli kod jest wyświetlany; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="4056d-168"><see langword="true" /> if the code is displayed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <MemberSignature Language="C#" Value="bool IEventBindingService.ShowCode (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.Design.IEventBindingService.ShowCode(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function ShowCode (lineNumber As Integer) As Boolean Implements IEventBindingService.ShowCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ComponentModel.Design.IEventBindingService.ShowCode(int lineNumber) = System::ComponentModel::Design::IEventBindingService::ShowCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber"><span data-ttu-id="4056d-169">Numer wiersza, w którym ma zostać umieszczony karetka.</span><span class="sxs-lookup"><span data-stu-id="4056d-169">The line number to place the caret on.</span></span></param>
        <summary><span data-ttu-id="4056d-170">Wyświetla kod użytkownika projektanta w określonym wierszu.</span><span class="sxs-lookup"><span data-stu-id="4056d-170">Displays the user code for the designer at the specified line.</span></span></summary>
        <returns><span data-ttu-id="4056d-171"><see langword="true" />Jeśli kod jest wyświetlany; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="4056d-171"><see langword="true" /> if the code is displayed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <MemberSignature Language="C#" Value="bool IEventBindingService.ShowCode (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.Design.IEventBindingService.ShowCode(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function ShowCode (component As IComponent, e As EventDescriptor) As Boolean Implements IEventBindingService.ShowCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ComponentModel.Design.IEventBindingService.ShowCode(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::ShowCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="4056d-172">Składnik, z którym jest połączone zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="4056d-172">The component that the event is connected to.</span></span></param>
        <param name="e"><span data-ttu-id="4056d-173">Zdarzenie, które ma zostać wyświetlone.</span><span class="sxs-lookup"><span data-stu-id="4056d-173">The event to display.</span></span></param>
        <summary><span data-ttu-id="4056d-174">Wyświetla kod użytkownika dla określonego zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="4056d-174">Displays the user code for the specified event.</span></span></summary>
        <returns><span data-ttu-id="4056d-175"><see langword="true" />Jeśli kod jest wyświetlany; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="4056d-175"><see langword="true" /> if the code is displayed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4056d-176"><paramref name="events" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4056d-176"><paramref name="events" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UseMethod">
      <MemberSignature Language="C#" Value="protected virtual void UseMethod (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void UseMethod(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e, string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.UseMethod(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub UseMethod (component As IComponent, e As EventDescriptor, methodName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void UseMethod(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e, System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="abstract member UseMethod : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; unit&#xA;override this.UseMethod : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; unit" Usage="eventBindingService.UseMethod (component, e, methodName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="4056d-177">Składnik, z którym jest powiązana ta metoda.</span><span class="sxs-lookup"><span data-stu-id="4056d-177">The component to which the method is bound.</span></span></param>
        <param name="e"><span data-ttu-id="4056d-178"><see cref="T:System.ComponentModel.EventDescriptor" /> Dla programu obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="4056d-178">The <see cref="T:System.ComponentModel.EventDescriptor" /> for the event handler.</span></span></param>
        <param name="methodName"><span data-ttu-id="4056d-179">Nazwa metody.</span><span class="sxs-lookup"><span data-stu-id="4056d-179">The name of the method.</span></span></param>
        <summary><span data-ttu-id="4056d-180">Dostarcza powiadomienia, że dana metoda jest używana przez program obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="4056d-180">Provides a notification that a particular method is being used by an event handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4056d-181">Niektóre implementacje mogą zamiarować usunięcie programu obsługi zdarzeń, gdy nie są używane żadne zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="4056d-181">Some implementations may intend to remove the event handler when no events are using it.</span></span> <span data-ttu-id="4056d-182">Zastępowanie <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> i <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, implementacja może wnioskować, gdy metoda nie jest już wymagana.</span><span class="sxs-lookup"><span data-stu-id="4056d-182">By overriding <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> and <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, an implementation can infer when a method is no longer needed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="ValidateMethodName">
      <MemberSignature Language="C#" Value="protected virtual void ValidateMethodName (string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateMethodName(string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ValidateMethodName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateMethodName (methodName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ValidateMethodName(System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="abstract member ValidateMethodName : string -&gt; unit&#xA;override this.ValidateMethodName : string -&gt; unit" Usage="eventBindingService.ValidateMethodName methodName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="methodName"><span data-ttu-id="4056d-183">Nazwa metody do walidacji.</span><span class="sxs-lookup"><span data-stu-id="4056d-183">The method name to validate.</span></span></param>
        <summary><span data-ttu-id="4056d-184">Sprawdza, czy podana nazwa metody jest prawidłowa dla używanego języka lub skryptu.</span><span class="sxs-lookup"><span data-stu-id="4056d-184">Validates that the provided method name is valid for the language or script being used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4056d-185">Domyślna implementacja nie robi nic.</span><span class="sxs-lookup"><span data-stu-id="4056d-185">The default implementation does nothing.</span></span> <span data-ttu-id="4056d-186">Można to zastąpić i zgłosić wyjątek, jeśli nazwa jest nieprawidłowa do użycia.</span><span class="sxs-lookup"><span data-stu-id="4056d-186">You may override this and throw an exception if the name is invalid for your use.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
