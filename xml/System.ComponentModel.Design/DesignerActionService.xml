<Type Name="DesignerActionService" FullName="System.ComponentModel.Design.DesignerActionService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8a00ce2feccd9bba63525680d0cb158f25785e5a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36707501" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DesignerActionService : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DesignerActionService extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.DesignerActionService" />
  <TypeSignature Language="VB.NET" Value="Public Class DesignerActionService&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DesignerActionService : IDisposable" />
  <TypeSignature Language="F#" Value="type DesignerActionService = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Usługi czasu projektowania, która zarządza kolekcja ustanawia <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> obiekty na składniki.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService> Klasy jest odpowiedzialny za zarządzanie Kolekcja <xref:System.ComponentModel.Design.DesignerActionItem> obiektów dla każdego wystąpienia składnika, który istnieje w formularzu w czasie projektowania. Ta klasa umożliwia modelu tryb direct push utworzenia elementu i jest przeznaczone głównie dla użycia przez deweloperów narzędzia do projektowania, chociaż może również służyć według składnika i deweloperów kontrolki niestandardowej.  
  
 Deweloperzy czasu projektowania narzędzi należy ustalić listy elementów do wyświetlenia dla składnika i określić podczas zmiany tej listy. Może również tworzyć dodatków, które działają w połączeniu z obiektami panelu tagów inteligentnych.  
  
 Zaawansowane składnika deweloperzy może być konieczne dynamicznie kontrolować elementy skojarzone ze składnikiem, w związku z tym zastępowania lub uzupełniające model polegający na ściąganiu standardowa. Na przykład polecenia panelu można zmienić w zależności od kontekstu ich wykorzystania i stanu czasu projektowania składnika.  
  
> [!NOTE]
>  <xref:System.ComponentModel.Design.DesignerActionService> Jest rzeczywiście pobudzenie usługa za modeli wypychania i ściągania; jednak w tym przypadku niejawnie działa.  
  
 <xref:System.ComponentModel.Design.DesignerActionService> udostępnia interfejs prostego na potrzeby uzyskiwania dostępu do i operowanie nimi elementy dla każdego składnika, łącznie z następujących metod i zdarzeń:  
  
-   <xref:System.ComponentModel.Design.DesignerActionService.Contains%2A> Metoda określa, czy <xref:System.ComponentModel.Design.DesignerActionService> obecnie zarządza tą poszczególnych składników.  
  
-   <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> Metoda obsługuje wyliczenia list elementów.  
  
-   <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> Metoda umożliwia dodawanie <xref:System.ComponentModel.Design.DesignerActionList> lub <xref:System.ComponentModel.Design.DesignerActionListCollection> do zestawu istniejących elementów dla wystąpienia składnika. Z kolei <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> metoda usuwa jednego lub wszystkich list elementów, skojarzonego ze składnikiem.  
  
    > [!NOTE]
    >  <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> Metody reprezentuje model tryb direct push Kojarzenie elementów panel ze składnikiem. Z kolei model polegający na ściąganiu opiera się na zastępowanie <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> właściwość klasy projektanta dla tego składnika. W środowisku projektowania jest odpowiedzialny za dodawanie te elementy do bieżącego <xref:System.ComponentModel.Design.DesignerActionService> podczas tworzenia składnika na powierzchni projektu.  
  
    > [!IMPORTANT]
    >  <xref:System.ComponentModel.Design.DesignerActionService.Add%2A>, <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A>, <xref:System.ComponentModel.Design.DesignerActionService.Contains%2A>, I <xref:System.ComponentModel.Design.DesignerActionService.Clear%2A> metody tylko należy wziąć pod uwagę lub mają wpływ na elementy modelu wypychania.  
  
-   <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> Wskazuje zdarzenia zmiany Kolekcja elementów dla składnika.  
  
 Duży stopień współdziałanie, ponieważ często jest to pożądane, aby korzystać z niektórych elementów panelu w menu skrótów czasu projektowania elementu i jego panelu, istnieje między <xref:System.ComponentModel.Design.DesignerActionItem> obiektów i projektanta zleceń.  
  
 Jeśli projektanta składników nie jawnie określa <xref:System.ComponentModel.Design.DesignerActionList> (oznacza to, że nie zawiera on zastąpiony <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> właściwości), listy, zostanie utworzony z istniejących zleceń projektanta. Te polecenia są określane przez <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> właściwości. W takim przypadku klasa listy wewnętrznych zlecenie jest używana zawiera zbiór zlecenie pozycji panel.  
  
 Jeśli chcesz <xref:System.ComponentModel.Design.DesignerActionMethodItem> do użycia zarówno jako wpis panelu i pozycji menu skrótów czasu projektowania można ustawić `includeAsDesignerVerb` parametru konstruktora elementu.  
  
 Użyj <xref:System.ComponentModel.Design.DesignerActionUIService> do sterowania wyświetlaniem z projektantem <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.DesignerActionListCollection" />
    <altmember cref="T:System.ComponentModel.Design.ComponentDesigner" />
    <altmember cref="T:System.ComponentModel.Design.DesignerActionItem" />
    <altmember cref="T:System.ComponentModel.Design.DesignerActionUIService" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionService (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionService(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.DesignerActionService : IServiceProvider -&gt; System.ComponentModel.Design.DesignerActionService" Usage="new System.ComponentModel.Design.DesignerActionService serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Dostawcy usług dla bieżącego środowiska czasu projektowania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ComponentModel.Design.DesignerActionService" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dostawcy usług jest niezbędne do monitorowania, a wybór zmiany składnika. Oczekuje się, aby obsługiwać <xref:System.ComponentModel.Design.IDesignerHost> i <xref:System.ComponentModel.Design.IComponentChangeService> typów. <xref:System.ComponentModel.Design.DesignerActionService> Klasy używa wewnętrznej tabeli do zarządzania składnikami i skojarzone z nimi <xref:System.ComponentModel.Design.DesignerActionList> tagów inteligentnych.  
  
 Zwykle deweloperzy składnik nie będzie można utworzyć wystąpienia tej klasy; Zamiast tego można uzyskać za pomocą wywołania do istniejącego wystąpienia <xref:System.ComponentModel.Component.GetService%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Dispose" />
        <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
        <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
        <altmember cref="M:System.ComponentModel.Component.GetService(System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje co najmniej jeden <see cref="T:System.ComponentModel.Design.DesignerActionList" /> obiektów do bieżącej kolekcji zarządzanych tagów inteligentnych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.ComponentModel.IComponent comp, System.ComponentModel.Design.DesignerActionList actionList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.ComponentModel.IComponent comp, class System.ComponentModel.Design.DesignerActionList actionList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Add(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (comp As IComponent, actionList As DesignerActionList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::ComponentModel::IComponent ^ comp, System::ComponentModel::Design::DesignerActionList ^ actionList);" />
      <MemberSignature Language="F#" Value="member this.Add : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionList -&gt; unit" Usage="designerActionService.Add (comp, actionList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
      </Parameters>
      <Docs>
        <param name="comp">
          <see cref="T:System.ComponentModel.IComponent" /> Aby skojarzyć tagi inteligentne z.</param>
        <param name="actionList">
          <see cref="T:System.ComponentModel.Design.DesignerActionList" /> Zawiera nowe elementy tagów inteligentnych do dodania.</param>
        <summary>Dodaje <see cref="T:System.ComponentModel.Design.DesignerActionList" /> do bieżącej kolekcji zarządzanych tagów inteligentnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> Metody reprezentuje model polegający na wypychaniu dodawania tagów inteligentnych. Model polegający na ściąganiu alternatywne polega na zastępowanie <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> właściwości w projektancie do odpowiadającego składnika.  
  
 Gdy ta metoda jest wywoływana, list, które ma zostać dodana są skanowane pod kątem żadnego <xref:System.ComponentModel.Design.DesignerActionMethodItem> z <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> ustawioną właściwość `true`. Te elementy są dodawane do listy zleceń projektanta dla tego składnika, poprzez wywołanie <xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A?displayProperty=nameWithType> metody.  
  
 Tagi inteligentne są zarządzane na podstawie wystąpienia składnika. Zarządzana Kolekcja może zawierać zduplikowanych wpisów.  
  
 Ta metoda zgłasza <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> zdarzeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Jeden lub oba parametry są <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.ActionLists" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.ComponentModel.IComponent comp, System.ComponentModel.Design.DesignerActionListCollection designerActionListCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.ComponentModel.IComponent comp, class System.ComponentModel.Design.DesignerActionListCollection designerActionListCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Add(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::ComponentModel::IComponent ^ comp, System::ComponentModel::Design::DesignerActionListCollection ^ designerActionListCollection);" />
      <MemberSignature Language="F#" Value="member this.Add : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit" Usage="designerActionService.Add (comp, designerActionListCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
        <Parameter Name="designerActionListCollection" Type="System.ComponentModel.Design.DesignerActionListCollection" />
      </Parameters>
      <Docs>
        <param name="comp">
          <see cref="T:System.ComponentModel.IComponent" /> Aby skojarzyć tagi inteligentne z.</param>
        <param name="designerActionListCollection">
          <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> Zawiera nowe elementy tagów inteligentnych do dodania.</param>
        <summary>Dodaje <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> do bieżącej kolekcji zarządzanych tagów inteligentnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> Metody reprezentuje model polegający na wypychaniu dodawania tagów inteligentnych. Model polegający na ściąganiu alternatywne polega na zastępowanie <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> właściwości w projektancie do odpowiadającego składnika.  
  
 Gdy ta metoda jest wywoływana, list, które ma zostać dodana są skanowane pod kątem żadnego <xref:System.ComponentModel.Design.DesignerActionMethodItem> z <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> ustawioną właściwość `true`. Te elementy są dodawane do listy zleceń projektanta dla tego składnika, poprzez wywołanie <xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A?displayProperty=nameWithType> metody.  
  
 Tagi inteligentne są zarządzane na podstawie wystąpienia składnika. Zarządzana Kolekcja może zawierać zduplikowanych wpisów.  
  
 Ta metoda zgłasza <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> zdarzeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Jeden lub oba parametry są <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.ActionLists" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="designerActionService.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie składniki z zarządzania i czyści wszystkie listy tagów inteligentnych modelem wypychania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.Clear%2A> Metody opróżnia wewnętrznej tabeli używany do przechowywania informacji o składniki i ich model wypychania listy tagów inteligentnych.  
  
> [!CAUTION]
>  Ponieważ ta metoda ma wpływ na wszystkie składniki zarządzane przez usługę bieżącej i nie tylko bieżącego składnika, tej metody należy używać z rozwagą. Zazwyczaj dewelopera narzędzie czasu projektowania używa go po zresetowaniu powierzchnię projektu. Deweloperzy składnika należy użyć jednej z <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> metody zamiast tego można usunąć tagów inteligentnych poszczególnych elementów lub wyświetla ich listę.  
  
 A <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> zdarzenie jest wywoływane dla każdego składnika, który został wcześniej zarządzane przez usługę bieżącej.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (comp As IComponent) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.ComponentModel.IComponent -&gt; bool" Usage="designerActionService.Contains comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">
          <see cref="T:System.ComponentModel.IComponent" /> Do wyszukania.</param>
        <summary>Określa, czy bieżąca usługa tagów inteligentnych zarządza listy akcji dla określonego składnika.</summary>
        <returns>
          <see langword="true" /> Jeśli składnik jest zarządzane przez usługę bieżącego; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.Contains%2A> Metody rozpoznaje tylko tagów inteligentnych modelu wypychania, które są skojarzone ze składnikiem z <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> metody.  
  
 Nie ma żadnych strukturalnych ograniczenie liczby równoczesnych ale <xref:System.ComponentModel.Design.DesignerActionService> wystąpienia utworzone przez narzędzie czasu projektowania, zazwyczaj tylko jedno wystąpienie usługi jest tworzona na powierzchnię projektu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> jest <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
      </Docs>
    </Member>
    <Member MemberName="DesignerActionListsChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.Design.DesignerActionListsChangedEventHandler DesignerActionListsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.Design.DesignerActionListsChangedEventHandler DesignerActionListsChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DesignerActionListsChanged As DesignerActionListsChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::Design::DesignerActionListsChangedEventHandler ^ DesignerActionListsChanged;" />
      <MemberSignature Language="F#" Value="member this.DesignerActionListsChanged : System.ComponentModel.Design.DesignerActionListsChangedEventHandler " Usage="member this.DesignerActionListsChanged : System.ComponentModel.Design.DesignerActionListsChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListsChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy <see cref="T:System.ComponentModel.Design.DesignerActionList" /> usunięte lub dodane dla każdego składnika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono zestaw specjalistycznych klasy skojarzone z <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> zdarzeń.  
  
|Specjalistyczną odmianą|Opis|  
|----------------------|-----------------|  
|<xref:System.ComponentModel.Design.DesignerActionListsChangedEventArgs>|Dodaje informacje dotyczące zarządzania listy tagów inteligentnych. Ta klasa jest specjalizowany z <xref:System.EventArgs>.|  
|<xref:System.ComponentModel.Design.DesignerActionListsChangedEventHandler>|Łączy <xref:System.ComponentModel.Design.DesignerActionListsChangedEventArgs> jego obsługi.|  
|<xref:System.ComponentModel.Design.DesignerActionListsChangedType>|Określa, czy listy został dodany lub usunięty.|  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [NIB: Korzystanie z zdarzenia](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListsChangedEventArgs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListsChangedType" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListsChangedEventHandler" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:System.ComponentModel.Design.DesignerActionService" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="designerActionService.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez <see cref="T:System.ComponentModel.Design.DesignerActionService" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> Metoda jest implementacją metody tylko upoważnieni przez <xref:System.IDisposable> interfejsu. Ta metoda jest wywoływana po zakończeniu przy użyciu <xref:System.ComponentModel.Design.DesignerActionService>. Wykonuje dwie główne akcje:  
  
-   Usuwa aktualnie usługi z listy dostępnych usług w środowisku projektowania poprzez wywołanie <xref:System.ComponentModel.Design.IServiceContainer.RemoveService%2A> metody.  
  
-   Cofnięć subskrypcji do składnika zdarzenia zmiany z skojarzony <xref:System.ComponentModel.Design.IComponentChangeService> interfejsu.  
  
 Wywołanie <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> po zakończeniu przy użyciu <xref:System.ComponentModel.Design.DesignerActionService>. <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> Pozostawia metody <xref:System.ComponentModel.Design.DesignerActionService> w stanie uniemożliwiającym jego używanie. Po wywołaniu <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A>, konieczne jest zwolnienie wszystkich odwołań do <xref:System.ComponentModel.Design.DesignerActionService> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć który <xref:System.ComponentModel.Design.DesignerActionService> klasy. Aby uzyskać więcej informacji, zobacz [czyszczenie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i [implementacja metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Wywoływanie zawsze <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> przed zwolnieniem ostatniego odwołania do <xref:System.ComponentModel.Design.DesignerActionService>. W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <xref:System.ComponentModel.Design.DesignerActionService> obiektu `Finalize` metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.Design.IServiceContainer.RemoveService" />
        <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="designerActionService.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko zasoby niezarządzane.</param>
        <summary>Zwalnia zasoby niezarządzane używane przez <see cref="T:System.ComponentModel.Design.DesignerActionService" /> i opcjonalnie zwalnia zasoby zarządzane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> Metoda jest implementacją metody tylko upoważnieni przez <xref:System.IDisposable> interfejsu. Ta metoda jest wywoływana po zakończeniu przy użyciu <xref:System.ComponentModel.Design.DesignerActionService>. Wykonuje dwie główne akcje:  
  
-   Usuwa aktualnie usługi z listy dostępnych usług w środowisku projektowania poprzez wywołanie <xref:System.ComponentModel.Design.IServiceContainer.RemoveService%2A> metody.  
  
-   Cofnięć subskrypcji do składnika zdarzenia zmiany z skojarzony <xref:System.ComponentModel.Design.IComponentChangeService> interfejsu.  
  
 Ta metoda jest wywoływana przez metodę publiczną `Dispose()` — metoda i <xref:System.Object.Finalize%2A> metody. `Dispose()` wywołuje chronioną metodę `Dispose(Boolean)` metody z `disposing` ustawiono parametr `true`. <xref:System.Object.Finalize%2A> wywołuje `Dispose` z `disposing` ustawioną `false`.  
  
 Gdy `disposing` parametr jest `true`, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane przez to <xref:System.ComponentModel.Design.DesignerActionService> odwołania. Ta metoda wywołuje `Dispose()` metody każdego odwołuje się do obiektu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> można wywoływać wielokrotnie przez inne obiekty. W przypadku przesłaniania <see langword="Dispose(Boolean)" /> należy uważać, aby nie odwołują się obiekty, które zostały wcześniej zlikwidowane w wywołaniu wcześniejszych <see langword="Dispose" />. Aby uzyskać więcej informacji na temat sposobu wdrażania <see langword="Dispose(Boolean)" />, zobacz [implementacja Method](~/docs/standard/garbage-collection/implementing-dispose.md) Dispose.  Aby uzyskać więcej informacji na temat <see langword="Dispose" /> i <see cref="M:System.Object.Finalize" />, zobacz [czyszczenia Resources](~/docs/standard/garbage-collection/unmanaged.md) niezarządzane i [zastąpienie metody Finalize] (http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
        <altmember cref="Overload:System.ComponentModel.Design.IServiceContainer.RemoveService" />
        <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetComponentActions">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca kolekcję tagów inteligentnych list elementów, skojarzonego ze składnikiem.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetComponentActions">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.DesignerActionListCollection GetComponentActions (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Design.DesignerActionListCollection GetComponentActions(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentActions(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetComponentActions (component As IComponent) As DesignerActionListCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Design::DesignerActionListCollection ^ GetComponentActions(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="member this.GetComponentActions : System.ComponentModel.IComponent -&gt; System.ComponentModel.Design.DesignerActionListCollection" Usage="designerActionService.GetComponentActions component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">Składnik, który tagów inteligentnych są skojarzone z.</param>
        <summary>Zwraca kolekcję tagów inteligentnych list elementów, skojarzonego ze składnikiem.</summary>
        <returns>Kolekcja tagów inteligentnych dla określonego składnika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> Jest odpowiednikiem wywołania metody <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%28System.ComponentModel.IComponent%2CSystem.ComponentModel.Design.ComponentActionsType%29> przy użyciu metody `type` parametr <xref:System.ComponentModel.Design.ComponentActionsType.All>. W związku z tym zwracana kolekcja będzie zawierać wypychania i ściągania listy tagów inteligentnych.  
  
 Zwrócona <xref:System.ComponentModel.Design.DesignerActionListCollection> jest złożenie list elementów dodane za pośrednictwem <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> metod, a także listy uzyskane z <xref:System.ComponentModel.Design.DesignerCommandSet> wystąpienia pobrany z witryny składnika.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="T:System.ComponentModel.Design.DesignerCommandSet" />
      </Docs>
    </Member>
    <Member MemberName="GetComponentActions">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.Design.DesignerActionListCollection GetComponentActions (System.ComponentModel.IComponent component, System.ComponentModel.Design.ComponentActionsType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.DesignerActionListCollection GetComponentActions(class System.ComponentModel.IComponent component, valuetype System.ComponentModel.Design.ComponentActionsType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentActions(System.ComponentModel.IComponent,System.ComponentModel.Design.ComponentActionsType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetComponentActions (component As IComponent, type As ComponentActionsType) As DesignerActionListCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::Design::DesignerActionListCollection ^ GetComponentActions(System::ComponentModel::IComponent ^ component, System::ComponentModel::Design::ComponentActionsType type);" />
      <MemberSignature Language="F#" Value="abstract member GetComponentActions : System.ComponentModel.IComponent * System.ComponentModel.Design.ComponentActionsType -&gt; System.ComponentModel.Design.DesignerActionListCollection&#xA;override this.GetComponentActions : System.ComponentModel.IComponent * System.ComponentModel.Design.ComponentActionsType -&gt; System.ComponentModel.Design.DesignerActionListCollection" Usage="designerActionService.GetComponentActions (component, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="type" Type="System.ComponentModel.Design.ComponentActionsType" />
      </Parameters>
      <Docs>
        <param name="component">Składnik, który tagów inteligentnych są skojarzone z.</param>
        <param name="type">
          <see cref="T:System.ComponentModel.Design.ComponentActionsType" /> Skojarzonych tagów inteligentnych z filtrowania.</param>
        <summary>Zwraca kolekcję tagów inteligentnych list elementów określonego typu skojarzone ze składnikiem.</summary>
        <returns>Kolekcja tagów inteligentnych określonego typu dla określonego składnika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta wersja przeciążone <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> metody filtry `type` parametr, który może mieć jeden z następujących wartości.  
  
|Wartość|Opis|  
|-----------|-----------------|  
|<xref:System.ComponentModel.Design.ComponentActionsType.All>|Wszystkie powiązane tagi inteligentne.|  
|<xref:System.ComponentModel.Design.ComponentActionsType.Component>|Model ściągania tagów inteligentnych tylko.|  
|<xref:System.ComponentModel.Design.ComponentActionsType.Service>|Model wypychania tagów inteligentnych tylko.|  
  
 Jeśli skojarzone Projektant składnik nie dostarcza listy tagów inteligentnych model ściągania, a następnie <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> metoda zamiast tego użyje elementy menu skrótów czasu projektowania projektanta z <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListCollection" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.ComponentActionsType" />
      </Docs>
    </Member>
    <Member MemberName="GetComponentDesignerActions">
      <MemberSignature Language="C#" Value="protected virtual void GetComponentDesignerActions (System.ComponentModel.IComponent component, System.ComponentModel.Design.DesignerActionListCollection actionLists);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetComponentDesignerActions(class System.ComponentModel.IComponent component, class System.ComponentModel.Design.DesignerActionListCollection actionLists) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GetComponentDesignerActions (component As IComponent, actionLists As DesignerActionListCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GetComponentDesignerActions(System::ComponentModel::IComponent ^ component, System::ComponentModel::Design::DesignerActionListCollection ^ actionLists);" />
      <MemberSignature Language="F#" Value="abstract member GetComponentDesignerActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit&#xA;override this.GetComponentDesignerActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit" Usage="designerActionService.GetComponentDesignerActions (component, actionLists)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionLists" Type="System.ComponentModel.Design.DesignerActionListCollection" />
      </Parameters>
      <Docs>
        <param name="component">Składnik, który tagów inteligentnych są skojarzone z.</param>
        <param name="actionLists">Kolekcja do skojarzonych tagów inteligentnych do dodania.</param>
        <summary>Pobiera model ściągania tagów inteligentnych skojarzone ze składnikiem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions%2A> Metoda to metoda pomocnika <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> metody. <xref:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions%2A> Wyszukuje model ściągania inteligentne tagi typu <xref:System.ComponentModel.Design.ComponentActionsType.Component>, a następnie dodaje je do podane `actionLists` kolekcji.  
  
 Jeśli developer składnika nie dostarcza jawnie kolekcji tagów inteligentnych za pośrednictwem <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> właściwości jego projektanta, ta metoda będzie używał zapisów menu skrótów w czasie projektowania, które są uzyskiwane poprzez <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> właściwości Projektant.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Jeden lub oba parametry są <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.GetComponentActions" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.ActionLists" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
      </Docs>
    </Member>
    <Member MemberName="GetComponentServiceActions">
      <MemberSignature Language="C#" Value="protected virtual void GetComponentServiceActions (System.ComponentModel.IComponent component, System.ComponentModel.Design.DesignerActionListCollection actionLists);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetComponentServiceActions(class System.ComponentModel.IComponent component, class System.ComponentModel.Design.DesignerActionListCollection actionLists) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GetComponentServiceActions (component As IComponent, actionLists As DesignerActionListCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GetComponentServiceActions(System::ComponentModel::IComponent ^ component, System::ComponentModel::Design::DesignerActionListCollection ^ actionLists);" />
      <MemberSignature Language="F#" Value="abstract member GetComponentServiceActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit&#xA;override this.GetComponentServiceActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit" Usage="designerActionService.GetComponentServiceActions (component, actionLists)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionLists" Type="System.ComponentModel.Design.DesignerActionListCollection" />
      </Parameters>
      <Docs>
        <param name="component">Składnik, który tagów inteligentnych są skojarzone z.</param>
        <param name="actionLists">Kolekcja do skojarzonych tagów inteligentnych do dodania.</param>
        <summary>Pobiera tagi inteligentne modelem wypychania skojarzonych ze składnikiem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions%2A> Metoda to metoda pomocnika <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> metody. Wyszukuje modelem wypychania tagów inteligentnych typu <xref:System.ComponentModel.Design.ComponentActionsType.Service>, a następnie dodaje je do wybranych `actionLists` kolekcji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Jeden lub oba parametry są <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.GetComponentActions" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Usuwa skojarzenia listy tagów inteligentnych co najmniej jeden z co najmniej jednego składnika.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.ComponentModel.Design.DesignerActionList actionList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.ComponentModel.Design.DesignerActionList actionList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.Design.DesignerActionList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (actionList As DesignerActionList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::ComponentModel::Design::DesignerActionList ^ actionList);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.ComponentModel.Design.DesignerActionList -&gt; unit" Usage="designerActionService.Remove actionList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
      </Parameters>
      <Docs>
        <param name="actionList">Listy tagów inteligentnych do usunięcia.</param>
        <summary>Usuwa listy określonego tagu inteligentnego z wszystkich składników zarządzanych przez usługę bieżącej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta wersja <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> metoda jest zwykle używana przez deweloperów narzędzia do projektowania, ponieważ składnik Deweloperzy zazwyczaj nie wiadomo, jakie inne składniki istnieje w obszarze bieżącego projektu.  
  
 Jeśli się powiedzie, ta metoda zgłasza <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> zdarzeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="actionList" /> jest <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (comp As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.ComponentModel.IComponent -&gt; unit" Usage="designerActionService.Remove comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">Składnik, aby usunąć skojarzenie tagi inteligentne.</param>
        <summary>Usuwa wszystkie listy tagów inteligentnych skojarzone z określonego składnika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku powodzenia <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> metoda zgłasza <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> zdarzeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> jest <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.ComponentModel.IComponent comp, System.ComponentModel.Design.DesignerActionList actionList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.ComponentModel.IComponent comp, class System.ComponentModel.Design.DesignerActionList actionList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (comp As IComponent, actionList As DesignerActionList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::ComponentModel::IComponent ^ comp, System::ComponentModel::Design::DesignerActionList ^ actionList);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionList -&gt; unit" Usage="designerActionService.Remove (comp, actionList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
      </Parameters>
      <Docs>
        <param name="comp">Składnik, aby usunąć skojarzenie tagi inteligentne.</param>
        <param name="actionList">Listy tagów inteligentnych do usunięcia.</param>
        <summary>Usuwa listy określonego tagu inteligentnego z określonego składnika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku powodzenia <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> metoda zgłasza <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> zdarzeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Jeden lub oba parametry są <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
  </Members>
</Type>