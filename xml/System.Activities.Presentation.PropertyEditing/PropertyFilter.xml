<Type Name="PropertyFilter" FullName="System.Activities.Presentation.PropertyEditing.PropertyFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2cde5bd75af874716d0787303b9ad6fe3dfa9976" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36721044" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PropertyFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyFilter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyFilter" />
  <TypeSignature Language="F#" Value="type PropertyFilter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia funkcję filtrowania hosta edycji właściwości.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zawiera listę ciągów, nazywany *predykaty*, które są porównywane nazwę właściwości docelowej, aż do znalezienia dopasowania.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyFilter (System.Collections.Generic.IEnumerable&lt;System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate&gt; predicates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate&gt; predicates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.Collections.Generic.IEnumerable{System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (predicates As IEnumerable(Of PropertyFilterPredicate))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyFilter(System::Collections::Generic::IEnumerable&lt;System::Activities::Presentation::PropertyEditing::PropertyFilterPredicate ^&gt; ^ predicates);" />
      <MemberSignature Language="F#" Value="new System.Activities.Presentation.PropertyEditing.PropertyFilter : seq&lt;System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate&gt; -&gt; System.Activities.Presentation.PropertyEditing.PropertyFilter" Usage="new System.Activities.Presentation.PropertyEditing.PropertyFilter predicates" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="predicates" Type="System.Collections.Generic.IEnumerable&lt;System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate&gt;" />
      </Parameters>
      <Docs>
        <param name="predicates">
          <see cref="T:System.Collections.IEnumerable" /> Listy predykaty lub ciągów używanych do dopasowania.</param>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> klasa, która zawiera wyliczenie filtrowania ciągów, o nazwie * predykaty *, które można porównać z nazwę właściwości docelowej, aż do znalezienia dopasowania.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyFilter (string filterText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filterText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filterText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyFilter(System::String ^ filterText);" />
      <MemberSignature Language="F#" Value="new System.Activities.Presentation.PropertyEditing.PropertyFilter : string -&gt; System.Activities.Presentation.PropertyEditing.PropertyFilter" Usage="new System.Activities.Presentation.PropertyEditing.PropertyFilter filterText" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filterText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterText">A <see cref="T:System.String" /> zawierający rozdzielonych spacjami predykaty do filtrowania według właściwości.</param>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> klasa, która zawiera <see cref="T:System.String" /> zawiera sekwencję rozdzielonych spacjami filtrowania fraz o nazwie * predykaty *, które można porównać z nazwę właściwości docelowej, aż do znalezienia dopasowania.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Właściwości tylko do odczytu, która wskazuje, czy to <see cref="T:System.Activities.Design.PropertyEditing.PropertyFilter" /> nie ma żadnych predykatów filtrowania.</summary>
        <value>
          <see langword="true" /> Jeśli predykaty nie są zarejestrowane; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public bool Match (System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Match(class System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.PropertyEditing.PropertyFilter.Match(System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (target As IPropertyFilterTarget) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Match(System::Activities::Presentation::PropertyEditing::IPropertyFilterTarget ^ target);" />
      <MemberSignature Language="F#" Value="member this.Match : System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget -&gt; bool" Usage="propertyFilter.Match target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" />
      </Parameters>
      <Docs>
        <param name="target">Nazwa właściwości bieżącego filtru jest porównywana przed podczas wyszukiwania w celu dopasowania.</param>
        <summary>Dopasowuje ciągi predykatu bieżącego obiektu filtrowania i nazwa właściwości określonego obiektu docelowego i zwraca wartość Boolean wskazującą, czy co najmniej jednego z ciągów predykatu jest zgodna z nazwą docelowej lub czy to <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> nie ma żadnych Predykaty.</summary>
        <returns>
          <see langword="true" /> Jeśli dopasowanie filtru/docelowej lub jeśli nie ma nic do użycia na potrzeby porównania; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>