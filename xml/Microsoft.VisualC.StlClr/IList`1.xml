<Type Name="IList&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fcb75af1375c99e149fcd7ec90a3cd7dc64e54f0" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52611333" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IList&lt;TValue&gt; : ICloneable, Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer&lt;TValue&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IList`1&lt;TValue&gt; implements class Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1&lt;!TValue&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.IList`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IList(Of TValue)&#xA;Implements IBidirectionalContainer(Of TValue), ICloneable, ICollection" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public interface class IList : ICloneable, Microsoft::VisualC::StlClr::Generic::IBidirectionalContainer&lt;TValue&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type IList&lt;'Value&gt; = interface&#xA;    interface IBidirectionalContainer&lt;'Value&gt;&#xA;    interface ICloneable&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue">
      <span data-ttu-id="717b3-101">Typ elementu listy.</span>
      <span class="sxs-lookup">
        <span data-stu-id="717b3-101">The type of a list element.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="717b3-102">Definiuje interfejs dla STL/CLR <see href="https://docs.microsoft.com/cpp/dotnet/list-stl-clr">listy</see> obiektu.</span>
      <span class="sxs-lookup">
        <span data-stu-id="717b3-102">Defines the interface for an STL/CLR <see href="https://docs.microsoft.com/cpp/dotnet/list-stl-clr">list</see> object.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="assign">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="717b3-103">Zamienia wszystkie elementy kontenera przy użyciu określonych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-103">Replaces all elements of the container with the specified elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-104">Aby uzyskać więcej informacji, zobacz [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span><span class="sxs-lookup"><span data-stu-id="717b3-104">For more information, see [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (System.Collections.IEnumerable _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(class System.Collections.IEnumerable _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_Right As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(System::Collections::IEnumerable ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member assign : System.Collections.IEnumerable -&gt; unit" Usage="iList.assign _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="717b3-105">Wyliczenie, którego elementy mają zostać wstawione do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-105">The enumeration whose elements are to be inserted into the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-106">Zamienia sekwencji, który jest wyznaczone przez dany moduł wyliczający kontrolowanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-106">Replaces the controlled sequence with the sequence that is designated by the given enumerator.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-107">Aby uzyskać więcej informacji, zobacz [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span><span class="sxs-lookup"><span data-stu-id="717b3-107">For more information, see [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_First As IInputIterator(Of TValue), _Last As IInputIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member assign : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; unit" Usage="iList.assign (_First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_First">
          <span data-ttu-id="717b3-108">Pozycja początku zakres elementów do wstawienia do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-108">The beginning position of the range of elements to insert into the container.</span>
          </span>
        </param>
        <param name="_Last">
          <span data-ttu-id="717b3-109">Pierwszej pozycji poza zakres elementów do wstawienia do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-109">The first position beyond the range of elements to insert into the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-110">Zamienia sekwencji kontrolowanej sekwencji <c>[</c><paramref name="_First" /><c>,</c><paramref name="_Last" /><c>)</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-110">Replaces the controlled sequence with the sequence <c>[</c><paramref name="_First" /><c>,</c><paramref name="_Last" /><c>)</c>.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-111">Aby uzyskać więcej informacji, zobacz [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span><span class="sxs-lookup"><span data-stu-id="717b3-111">For more information, see [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (int _Count, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(int32 _Count, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_Count As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(int _Count, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member assign : int * 'Value -&gt; unit" Usage="iList.assign (_Count, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Count" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Count">
          <span data-ttu-id="717b3-112">Liczba elementów do wstawienia do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-112">The number of elements to insert into the container.</span>
          </span>
        </param>
        <param name="_Val">
          <span data-ttu-id="717b3-113">Wartość elementów do wstawienia do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-113">The value of the elements to insert into the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-114">Zamienia określoną liczbę danego elementu kontrolowanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-114">Replaces the controlled sequence with the specified number of the given element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-115">Aby uzyskać więcej informacji, zobacz [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span><span class="sxs-lookup"><span data-stu-id="717b3-115">For more information, see [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="back">
      <MemberSignature Language="C#" Value="public TValue back ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue back() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.back" />
      <MemberSignature Language="VB.NET" Value="Public Function back () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue % back();" />
      <MemberSignature Language="F#" Value="abstract member back : unit -&gt; " Usage="iList.back " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="717b3-116">Uzyskuje dostęp do ostatniego elementu w kontenerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-116">Accesses the last element of the container.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="717b3-117">Ostatniego elementu w kontrolowanej sekwencji musi być niepusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-117">The last element of the controlled sequence, which must be non-empty.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-118">Aby uzyskać więcej informacji, zobacz [list::back (STL/CLR)](/cpp/dotnet/list-stl-clr#back).</span><span class="sxs-lookup"><span data-stu-id="717b3-118">For more information, see [list::back (STL/CLR)](/cpp/dotnet/list-stl-clr#back).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="back_item">
      <MemberSignature Language="C#" Value="public TValue back_item { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue back_item" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.IList`1.back_item" />
      <MemberSignature Language="VB.NET" Value="Public Property back_item As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue back_item { TValue get(); void set(TValue value); };" />
      <MemberSignature Language="F#" Value="member this.back_item : 'Value with get, set" Usage="Microsoft.VisualC.StlClr.IList&lt;'Value&gt;.back_item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="717b3-119">Uzyskuje dostęp do ostatniego elementu w kontenerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-119">Accesses the last element of the container.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="717b3-120">Ostatniego elementu w kontrolowanej sekwencji musi być niepusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-120">The last element of the controlled sequence, which must be non-empty.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-121">Aby uzyskać więcej informacji, zobacz [list::back_item (STL/CLR)](/cpp/dotnet/list-stl-clr#back_item).</span><span class="sxs-lookup"><span data-stu-id="717b3-121">For more information, see [list::back_item (STL/CLR)](/cpp/dotnet/list-stl-clr#back_item).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="begin">
      <MemberSignature Language="C#" Value="public void begin (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void begin(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function begin (ByRef  As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ begin(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member begin :  -&gt; unit" Usage="iList.begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="717b3-122">Iterator dostępu swobodnego, który wyznacza pierwszego elementu w kontrolowanej sekwencji lub tuż za koniec pustą sekwencją.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-122">A random-access iterator that designates the first element of the controlled sequence, or just beyond the end of an empty sequence.</span>
          </span>
          <span data-ttu-id="717b3-123">Służy do uzyskiwania iterator, który wyznacza <paramref name="current" /> początek kontrolowanej sekwencji, ale jej stan można zmienić, jeśli zmieni się długość kontrolowanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-123">You use it to obtain an iterator that designates the <paramref name="current" /> beginning of the controlled sequence, but its status can change if the length of the controlled sequence changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-124">Określa początek kontrolowanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-124">Designates the beginning of the controlled sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="717b3-125">Iterator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-125">An iterator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 <span data-ttu-id="717b3-126">Aby uzyskać więcej informacji, zobacz [list::begin (STL/CLR)](/cpp/dotnet/list-stl-clr#begin).</span><span class="sxs-lookup"><span data-stu-id="717b3-126">For more information, see [list::begin (STL/CLR)](/cpp/dotnet/list-stl-clr#begin).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="clear">
      <MemberSignature Language="C#" Value="public void clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void clear();" />
      <MemberSignature Language="F#" Value="abstract member clear : unit -&gt; unit" Usage="iList.clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="717b3-127">Usuwa wszystkie elementy z kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-127">Removes all elements from the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-128">Aby uzyskać więcej informacji, zobacz [list::clear (STL/CLR)](/cpp/dotnet/list-stl-clr#clear).</span><span class="sxs-lookup"><span data-stu-id="717b3-128">For more information, see [list::clear (STL/CLR)](/cpp/dotnet/list-stl-clr#clear).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="empty">
      <MemberSignature Language="C#" Value="public bool empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool empty() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.empty" />
      <MemberSignature Language="VB.NET" Value="Public Function empty () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool empty();" />
      <MemberSignature Language="F#" Value="abstract member empty : unit -&gt; bool" Usage="iList.empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="717b3-129">Sprawdza, czy kontener nie ma żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-129">Tests whether the container has no elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="717b3-130">
            <see langword="true" /> Jeśli kontener nie ma żadnych elementów; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-130">
              <see langword="true" /> if the container has no elements; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-131">Aby uzyskać więcej informacji, zobacz [list::empty (STL/CLR)](/cpp/dotnet/list-stl-clr#empty).</span><span class="sxs-lookup"><span data-stu-id="717b3-131">For more information, see [list::empty (STL/CLR)](/cpp/dotnet/list-stl-clr#empty).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="end">
      <MemberSignature Language="C#" Value="public void end (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void end(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function end (ByRef  As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ end(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member end :  -&gt; unit" Usage="iList.end " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="717b3-132">Iterator dostępu swobodnego, który wskazuje tuż za koniec kontrolowanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-132">A random-access iterator that points just beyond the end of the controlled sequence.</span>
          </span>
          <span data-ttu-id="717b3-133">Umożliwia ona uzyskać iterator, który określa koniec kontrolowanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-133">You use it to obtain an iterator that designates the end of the controlled sequence.</span>
          </span>
          <span data-ttu-id="717b3-134">Jego stan nie zmienia się w przypadku zmiany długości kontrolowanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-134">Its status does not change if the length of the controlled sequence changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-135">Określa koniec kontrolowanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-135">Designates the end of the controlled sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="717b3-136">Iterator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-136">An iterator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 <span data-ttu-id="717b3-137">Aby uzyskać więcej informacji, zobacz [list::end (STL/CLR)](/cpp/dotnet/list-stl-clr#end).</span><span class="sxs-lookup"><span data-stu-id="717b3-137">For more information, see [list::end (STL/CLR)](/cpp/dotnet/list-stl-clr#end).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="erase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="717b3-138">Usuwa elementy z kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-138">Removes elements from the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-139">Aby uzyskać więcej informacji, zobacz [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span><span class="sxs-lookup"><span data-stu-id="717b3-139">For more information, see [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public void erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void erase(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (ByRef  As ContainerBidirectionalIterator(Of TValue), _Where As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ erase(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where);" />
      <MemberSignature Language="F#" Value="abstract member erase :  * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iList.erase (, _Where)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="717b3-140">Iterator opisujący pierwszy element pozostający poza wszelkimi elementami usuniętymi lub <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> jeśli taki element nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-140">An iterator that designates the first element remaining beyond any elements removed, or <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> if no such element exists.</span>
          </span>
        </param>
        <param name="_Where">
          <span data-ttu-id="717b3-141">Położenie elementu, aby wymazać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-141">The position of the element to erase.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-142">Usuwa pojedynczy element kontrolowanej sekwencji wskazywany przez dany iteratora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-142">Removes the single element of the controlled sequence pointed to by the given iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="717b3-143">Iterator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-143">An iterator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="717b3-144">Aby uzyskać więcej informacji, zobacz [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span><span class="sxs-lookup"><span data-stu-id="717b3-144">For more information, see [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public void erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _First_iter, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Last_iter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void erase(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _First_iter, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Last_iter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (ByRef  As ContainerBidirectionalIterator(Of TValue), _First_iter As ContainerBidirectionalIterator(Of TValue), _Last_iter As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ erase(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _First_iter, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Last_iter);" />
      <MemberSignature Language="F#" Value="abstract member erase :  * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iList.erase (, _First_iter, _Last_iter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_First_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Last_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="717b3-145">Iterator opisujący pierwszy element pozostający poza wszelkimi elementami usuniętymi lub <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> jeśli taki element nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-145">An iterator that designates the first element remaining beyond any elements removed, or <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> if no such element exists.</span>
          </span>
        </param>
        <param name="_First_iter">
          <span data-ttu-id="717b3-146">Pozycja początku zakresu elementów, aby wymazać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-146">The beginning position of the range of elements to erase.</span>
          </span>
        </param>
        <param name="_Last_iter">
          <span data-ttu-id="717b3-147">Pierwszej pozycji poza zakresem elementów, aby wymazać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-147">The first position beyond the range of elements to erase.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-148">Usuwa elementy kontrolowanej sekwencji w zakresie \[  *\_pierwszy\_iter*,  *\_ostatniego\_iter*).</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-148">Removes the elements of the controlled sequence in the range \[*\_First\_iter*, *\_Last\_iter*).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="717b3-149">Iterator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-149">An iterator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="717b3-150">Aby uzyskać więcej informacji, zobacz [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span><span class="sxs-lookup"><span data-stu-id="717b3-150">For more information, see [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="front">
      <MemberSignature Language="C#" Value="public TValue front ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue front() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.front" />
      <MemberSignature Language="VB.NET" Value="Public Function front () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue % front();" />
      <MemberSignature Language="F#" Value="abstract member front : unit -&gt; " Usage="iList.front " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="717b3-151">Uzyskuje dostęp do pierwszego elementu w kontenerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-151">Accesses the first element of the container.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="717b3-152">Pierwszy element w kontrolowanej sekwencji musi być niepusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-152">The first element of the controlled sequence, which must be non-empty.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-153">Aby uzyskać więcej informacji, zobacz [list::front (STL/CLR)](/cpp/dotnet/list-stl-clr#front).</span><span class="sxs-lookup"><span data-stu-id="717b3-153">For more information, see [list::front (STL/CLR)](/cpp/dotnet/list-stl-clr#front).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="front_item">
      <MemberSignature Language="C#" Value="public TValue front_item { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue front_item" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.IList`1.front_item" />
      <MemberSignature Language="VB.NET" Value="Public Property front_item As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue front_item { TValue get(); void set(TValue value); };" />
      <MemberSignature Language="F#" Value="member this.front_item : 'Value with get, set" Usage="Microsoft.VisualC.StlClr.IList&lt;'Value&gt;.front_item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="717b3-154">Uzyskuje dostęp do pierwszego elementu w kontenerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-154">Accesses the first element of the container.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="717b3-155">Pierwszy element w kontrolowanej sekwencji musi być niepusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-155">The first element of the controlled sequence, which must be non-empty.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-156">Aby uzyskać więcej informacji, zobacz [list::front_item (STL/CLR)](/cpp/dotnet/list-stl-clr#front_item).</span><span class="sxs-lookup"><span data-stu-id="717b3-156">For more information, see [list::front_item (STL/CLR)](/cpp/dotnet/list-stl-clr#front_item).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="insert">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="717b3-157">Dodaje elementy do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-157">Adds elements to the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-158">Aby uzyskać więcej informacji, zobacz [list::insert (STL/CLR)](/cpp/dotnet/list-stl-clr#insert).</span><span class="sxs-lookup"><span data-stu-id="717b3-158">For more information, see [list::insert (STL/CLR)](/cpp/dotnet/list-stl-clr#insert).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where_iter, System.Collections.IEnumerable _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where_iter, class System.Collections.IEnumerable _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where_iter As ContainerBidirectionalIterator(Of TValue), _Right As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where_iter, System::Collections::IEnumerable ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * System.Collections.IEnumerable -&gt; unit" Usage="iList.insert (_Where_iter, _Right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="_Where_iter">
          <span data-ttu-id="717b3-159">Pozycja w kontenerze, aby wstawić przed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-159">The position in the container to insert before.</span>
          </span>
        </param>
        <param name="_Right">
          <span data-ttu-id="717b3-160">Wyliczenie, którego elementy mają zostać wstawione do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-160">The enumeration whose elements are to be inserted into the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-161">Wstawia elementy określonego modułu wyliczającego do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-161">Inserts the elements of the specified enumerator into the container.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function insert (ByRef  As ContainerBidirectionalIterator(Of TValue), _Where As ContainerBidirectionalIterator(Of TValue), _Val As TValue) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member insert :  * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * 'Value -&gt; unit" Usage="iList.insert (, _Where, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="717b3-162">Iterator, który wyznacza nowo wstawionego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-162">An iterator that designates the newly inserted element.</span>
          </span>
        </param>
        <param name="_Where">
          <span data-ttu-id="717b3-163">Pozycja w kontenerze, bezpośrednio po elementach nowo wstawionej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-163">The position in the container immediately following the newly inserted elements.</span>
          </span>
        </param>
        <param name="_Val">
          <span data-ttu-id="717b3-164">Wartość elementu do wstawienia do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-164">The value of the element to insert into the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-165">Wstawia element z danej wartości do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-165">Inserts an element of the given value into the container.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="717b3-166">Iterator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-166">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where As ContainerBidirectionalIterator(Of TValue), _First As IInputIterator(Of TValue), _Last As IInputIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; unit" Usage="iList.insert (_Where, _First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where">
          <span data-ttu-id="717b3-167">Pozycja w kontenerze, bezpośrednio po elementach nowo wstawionej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-167">The position in the container immediately following the newly inserted elements.</span>
          </span>
        </param>
        <param name="_First">
          <span data-ttu-id="717b3-168">Pozycja początku zakres elementów do wstawienia do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-168">The beginning position of the range of elements to insert into the container.</span>
          </span>
        </param>
        <param name="_Last">
          <span data-ttu-id="717b3-169">Pierwszej pozycji poza zakres elementów do wstawienia do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-169">The first position beyond the range of elements to insert into the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-170">Wstawia sekwencję [<paramref name="_First" />, <paramref name="_Last" />) do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-170">Inserts the sequence [<paramref name="_First" />, <paramref name="_Last" />) into the container.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, int _Count, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, int32 _Count, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where As ContainerBidirectionalIterator(Of TValue), _Count As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, int _Count, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * int * 'Value -&gt; unit" Usage="iList.insert (_Where, _Count, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Count" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Where">
          <span data-ttu-id="717b3-171">Pozycja w kontenerze, bezpośrednio po elementach nowo wstawionej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-171">The position in the container immediately following the newly inserted elements.</span>
          </span>
        </param>
        <param name="_Count">
          <span data-ttu-id="717b3-172">Liczba elementów do wstawienia do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-172">The number of elements to insert into the container.</span>
          </span>
        </param>
        <param name="_Val">
          <span data-ttu-id="717b3-173">Wartość elementu do wstawienia do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-173">The value of the element to insert into the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-174">Wstawia element z danej wartości do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-174">Inserts an element of the given value into the container.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="717b3-175">Iterator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-175">An iterator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="717b3-176">Aby uzyskać więcej informacji, zobacz [list::insert (STL/CLR)](/cpp/dotnet/list-stl-clr#insert).</span><span class="sxs-lookup"><span data-stu-id="717b3-176">For more information, see [list::insert (STL/CLR)](/cpp/dotnet/list-stl-clr#insert).</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="merge">
      <MemberSignature Language="C#" Value="public void merge (Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right, Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,bool&gt; _Pred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void merge(class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right, class Microsoft.VisualC.StlClr.BinaryDelegate`3&lt;!TValue, !TValue, bool&gt; _Pred) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub merge (_Right As IList(Of TValue), _Pred As BinaryDelegate(Of TValue, TValue, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void merge(Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right, Microsoft::VisualC::StlClr::BinaryDelegate&lt;TValue, TValue, bool&gt; ^ _Pred);" />
      <MemberSignature Language="F#" Value="abstract member merge : Microsoft.VisualC.StlClr.IList&lt;'Value&gt; * Microsoft.VisualC.StlClr.BinaryDelegate&lt;'Value, 'Value, bool&gt; -&gt; unit" Usage="iList.merge (_Right, _Pred)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
        <Parameter Name="_Pred" Type="Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="717b3-177">Kontener do scalenia w tym kontenerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-177">The container to merge into this container.</span>
          </span>
        </param>
        <param name="_Pred">
          <span data-ttu-id="717b3-178">Wartość logiczna funktor porównywania pary elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-178">The Boolean functor for comparing pairs of elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-179">Scala dwa uporządkowane kontrolowanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-179">Merges two ordered controlled sequences.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-180">Aby uzyskać więcej informacji, zobacz [list::merge (STL/CLR)](/cpp/dotnet/list-stl-clr#merge).</span><span class="sxs-lookup"><span data-stu-id="717b3-180">For more information, see [list::merge (STL/CLR)](/cpp/dotnet/list-stl-clr#merge).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="pop_back">
      <MemberSignature Language="C#" Value="public void pop_back ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void pop_back() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.pop_back" />
      <MemberSignature Language="VB.NET" Value="Public Sub pop_back ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void pop_back();" />
      <MemberSignature Language="F#" Value="abstract member pop_back : unit -&gt; unit" Usage="iList.pop_back " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="717b3-181">Usuwa ostatni element z kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-181">Removes the last element from the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-182">Aby uzyskać więcej informacji, zobacz [list::pop_back (STL/CLR)](/cpp/dotnet/list-stl-clr#pop_back).</span><span class="sxs-lookup"><span data-stu-id="717b3-182">For more information, see [list::pop_back (STL/CLR)](/cpp/dotnet/list-stl-clr#pop_back).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="pop_front">
      <MemberSignature Language="C#" Value="public void pop_front ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void pop_front() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.pop_front" />
      <MemberSignature Language="VB.NET" Value="Public Sub pop_front ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void pop_front();" />
      <MemberSignature Language="F#" Value="abstract member pop_front : unit -&gt; unit" Usage="iList.pop_front " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="717b3-183">Usuwa pierwszy element z kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-183">Removes the first element from the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-184">Aby uzyskać więcej informacji, zobacz [list::pop_front (STL/CLR)](/cpp/dotnet/list-stl-clr#pop_front).</span><span class="sxs-lookup"><span data-stu-id="717b3-184">For more information, see [list::pop_front (STL/CLR)](/cpp/dotnet/list-stl-clr#pop_front).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="push_back">
      <MemberSignature Language="C#" Value="public void push_back (TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void push_back(!TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.push_back(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub push_back (_Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void push_back(TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member push_back : 'Value -&gt; unit" Usage="iList.push_back _Val" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Val">
          <span data-ttu-id="717b3-185">Wartość elementu do dołączenia do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-185">The value of the element to append to the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-186">Dodaje nowy element na końcu kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-186">Adds a new element to the end of the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-187">Aby uzyskać więcej informacji, zobacz [list::push_back (STL/CLR)](/cpp/dotnet/list-stl-clr#push_back).</span><span class="sxs-lookup"><span data-stu-id="717b3-187">For more information, see [list::push_back (STL/CLR)](/cpp/dotnet/list-stl-clr#push_back).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="push_front">
      <MemberSignature Language="C#" Value="public void push_front (TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void push_front(!TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.push_front(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub push_front (_Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void push_front(TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member push_front : 'Value -&gt; unit" Usage="iList.push_front _Val" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Val">
          <span data-ttu-id="717b3-188">Wartość elementu, aby wstawić na początku kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-188">The value of the element to insert at the beginning of the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-189">Dodaje nowy element na początku tego kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-189">Adds a new element to the beginning of the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-190">Aby uzyskać więcej informacji, zobacz [list::push_front (STL/CLR)](/cpp/dotnet/list-stl-clr#push_front).</span><span class="sxs-lookup"><span data-stu-id="717b3-190">For more information, see [list::push_front (STL/CLR)](/cpp/dotnet/list-stl-clr#push_front).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rbegin">
      <MemberSignature Language="C#" Value="public void rbegin (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void rbegin(class Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function rbegin (ByRef  As ReverseBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ rbegin(Microsoft::VisualC::StlClr::Generic::ReverseBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member rbegin :  -&gt; unit" Usage="iList.rbegin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="717b3-191">Iterator odwrotny wyznacza ostatniego elementu w kontrolowanej sekwencji lub położenie tuż za początku pustą sekwencją.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-191">A reverse iterator that designates the last element of the controlled sequence, or the position just beyond the beginning of an empty sequence.</span>
          </span>
          <span data-ttu-id="717b3-192">Dzięki temu wyznacza <paramref name="beginning" /> odwrotnej kolejności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-192">Hence, it designates the <paramref name="beginning" /> of the reverse sequence.</span>
          </span>
          <span data-ttu-id="717b3-193">Służy do uzyskiwania iterator, który wyznacza <paramref name="current" /> początek kontrolowanej sekwencji, która jest widoczna w odwrotnej kolejności, ale jej stan można zmienić, jeśli zmieni się długość kontrolowanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-193">You use it to obtain an iterator that designates the <paramref name="current" /> beginning of the controlled sequence that is seen in reverse order, but its status can change if the length of the controlled sequence changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-194">Określa początek kontrolowanej sekwencji odwróconej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-194">Designates the beginning of the reversed controlled sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="717b3-195">Iterator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-195">An iterator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 <span data-ttu-id="717b3-196">Aby uzyskać więcej informacji, zobacz [list::rbegin (STL/CLR)](/cpp/dotnet/list-stl-clr#rbegin).</span><span class="sxs-lookup"><span data-stu-id="717b3-196">For more information, see [list::rbegin (STL/CLR)](/cpp/dotnet/list-stl-clr#rbegin).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="remove">
      <MemberSignature Language="C#" Value="public void remove (TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void remove(!TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub remove (_Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void remove(TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member remove : 'Value -&gt; unit" Usage="iList.remove _Val" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Val">
          <span data-ttu-id="717b3-197">Wartość elementu do usunięcia z kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-197">The value of the element to remove from the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-198">Usuwa element, który ma określoną wartość z kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-198">Removes an element that has a specified value from the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-199">Aby uzyskać więcej informacji, zobacz [list::remove (STL/CLR)](/cpp/dotnet/list-stl-clr#remove).</span><span class="sxs-lookup"><span data-stu-id="717b3-199">For more information, see [list::remove (STL/CLR)](/cpp/dotnet/list-stl-clr#remove).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="remove_if">
      <MemberSignature Language="C#" Value="public void remove_if (Microsoft.VisualC.StlClr.UnaryDelegate&lt;TValue,bool&gt; _Pred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void remove_if(class Microsoft.VisualC.StlClr.UnaryDelegate`2&lt;!TValue, bool&gt; _Pred) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.remove_if(Microsoft.VisualC.StlClr.UnaryDelegate{`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub remove_if (_Pred As UnaryDelegate(Of TValue, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void remove_if(Microsoft::VisualC::StlClr::UnaryDelegate&lt;TValue, bool&gt; ^ _Pred);" />
      <MemberSignature Language="F#" Value="abstract member remove_if : Microsoft.VisualC.StlClr.UnaryDelegate&lt;'Value, bool&gt; -&gt; unit" Usage="iList.remove_if _Pred" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pred" Type="Microsoft.VisualC.StlClr.UnaryDelegate&lt;TValue,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="_Pred">
          <span data-ttu-id="717b3-200">Wartość logiczna test, który określa elementy, które zostaną usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-200">A Boolean test that determines which elements will be removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-201">Usuwa elementy z kontenera, które przechodzą określonego testu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-201">Removes elements from the container that pass a specified test.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="717b3-202">Aby uzyskać więcej informacji, zobacz [list::remove_if (STL/CLR)](/cpp/dotnet/list-stl-clr#remove_if).</span><span class="sxs-lookup"><span data-stu-id="717b3-202">For more information, see [list::remove_if (STL/CLR)](/cpp/dotnet/list-stl-clr#remove_if).</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rend">
      <MemberSignature Language="C#" Value="public void rend (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void rend(class Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function rend (ByRef  As ReverseBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ rend(Microsoft::VisualC::StlClr::Generic::ReverseBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member rend :  -&gt; unit" Usage="iList.rend " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="717b3-203">Iterator odwrotny, który wskazuje tuż za koniec kontrolowanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-203">A reverse iterator that points just beyond the beginning of the controlled sequence.</span>
          </span>
          <span data-ttu-id="717b3-204">Dzięki temu wyznacza <paramref name="end" /> odwrotnej kolejności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-204">Hence, it designates the <paramref name="end" /> of the reverse sequence.</span>
          </span>
          <span data-ttu-id="717b3-205">Służy do uzyskiwania iterator, który wyznacza <paramref name="current" /> koniec kontrolowanej sekwencji występuje w odwrotnej kolejności, ale jej stan można zmienić, jeśli zmieni się długość kontrolowanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-205">You use it to obtain an iterator that designates the <paramref name="current" /> end of the controlled sequence seen in reverse order, but its status can change if the length of the controlled sequence changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-206">Określa koniec kontrolowanej sekwencji odwróconej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-206">Designates the end of the reversed controlled sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="717b3-207">Iterator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-207">An iterator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 <span data-ttu-id="717b3-208">Aby uzyskać więcej informacji, zobacz [list::rend (STL/CLR)](/cpp/dotnet/list-stl-clr#rend).</span><span class="sxs-lookup"><span data-stu-id="717b3-208">For more information, see [list::rend (STL/CLR)](/cpp/dotnet/list-stl-clr#rend).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="resize">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="717b3-209">Zmienia liczbę elementów w kontenerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-209">Changes the number of elements in the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-210">Aby uzyskać więcej informacji, zobacz [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span><span class="sxs-lookup"><span data-stu-id="717b3-210">For more information, see [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="resize">
      <MemberSignature Language="C#" Value="public void resize (int _Newsize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void resize(int32 _Newsize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub resize (_Newsize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void resize(int _Newsize);" />
      <MemberSignature Language="F#" Value="abstract member resize : int -&gt; unit" Usage="iList.resize _Newsize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Newsize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Newsize">
          <span data-ttu-id="717b3-211">Nowy rozmiar kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-211">The new size of the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-212">Liczba elementów w kontenerze zmieni się z określonym rozmiarem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-212">Changes the number of elements in the container to the specified size.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-213">Aby uzyskać więcej informacji, zobacz [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span><span class="sxs-lookup"><span data-stu-id="717b3-213">For more information, see [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="resize">
      <MemberSignature Language="C#" Value="public void resize (int _Newsize, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void resize(int32 _Newsize, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub resize (_Newsize As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void resize(int _Newsize, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member resize : int * 'Value -&gt; unit" Usage="iList.resize (_Newsize, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Newsize" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Newsize">
          <span data-ttu-id="717b3-214">Nowy rozmiar kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-214">The new size of the container.</span>
          </span>
        </param>
        <param name="_Val">
          <span data-ttu-id="717b3-215">Wartość elementów na dopełnienie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-215">The value of the padding elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-216">Liczba elementów w kontenerze zmieni się z określonym rozmiarem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-216">Changes the number of elements in the container to the specified size.</span>
          </span>
          <span data-ttu-id="717b3-217">Jeśli nowy rozmiar jest większy niż stary rozmiar, podanych wartości zostanie dołączony do kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-217">If the new size is larger than the old size, the given values will be appended to the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-218">Aby uzyskać więcej informacji, zobacz [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span><span class="sxs-lookup"><span data-stu-id="717b3-218">For more information, see [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="reverse">
      <MemberSignature Language="C#" Value="public void reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.reverse" />
      <MemberSignature Language="VB.NET" Value="Public Sub reverse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void reverse();" />
      <MemberSignature Language="F#" Value="abstract member reverse : unit -&gt; unit" Usage="iList.reverse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="717b3-219">Odwraca elementy kontrolowanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-219">Reverses the elements of the controlled sequence.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-220">Aby uzyskać więcej informacji, zobacz [list::reverse (STL/CLR)](/cpp/dotnet/list-stl-clr#reverse).</span><span class="sxs-lookup"><span data-stu-id="717b3-220">For more information, see [list::reverse (STL/CLR)](/cpp/dotnet/list-stl-clr#reverse).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="size">
      <MemberSignature Language="C#" Value="public int size ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 size() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.size" />
      <MemberSignature Language="VB.NET" Value="Public Function size () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int size();" />
      <MemberSignature Language="F#" Value="abstract member size : unit -&gt; int" Usage="iList.size " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="717b3-221">Zlicza liczbę elementów w kontenerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-221">Counts the number of elements in the container.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="717b3-222">Długość kontrolowanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-222">The length of the controlled sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-223">Aby uzyskać więcej informacji, zobacz [list::size (STL/CLR)](/cpp/dotnet/list-stl-clr#size).</span><span class="sxs-lookup"><span data-stu-id="717b3-223">For more information, see [list::size (STL/CLR)](/cpp/dotnet/list-stl-clr#size).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="sort">
      <MemberSignature Language="C#" Value="public void sort (Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,bool&gt; _Pred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void sort(class Microsoft.VisualC.StlClr.BinaryDelegate`3&lt;!TValue, !TValue, bool&gt; _Pred) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub sort (_Pred As BinaryDelegate(Of TValue, TValue, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void sort(Microsoft::VisualC::StlClr::BinaryDelegate&lt;TValue, TValue, bool&gt; ^ _Pred);" />
      <MemberSignature Language="F#" Value="abstract member sort : Microsoft.VisualC.StlClr.BinaryDelegate&lt;'Value, 'Value, bool&gt; -&gt; unit" Usage="iList.sort _Pred" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pred" Type="Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="_Pred">
          <span data-ttu-id="717b3-224">Operator, który będzie służyć do porównywania elementów do ustalania kolejności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-224">The operator that will be used to compare elements for ordering.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-225">Ustala kolejność kontrolowanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-225">Orders the controlled sequence.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-226">Aby uzyskać więcej informacji, zobacz [list::sort (STL/CLR)](/cpp/dotnet/list-stl-clr#sort).</span><span class="sxs-lookup"><span data-stu-id="717b3-226">For more information, see [list::sort (STL/CLR)](/cpp/dotnet/list-stl-clr#sort).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="splice">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="717b3-227">Zmienia kolejność łącza między węzłami.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-227">Reorders links between nodes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-228">Aby uzyskać więcej informacji, zobacz [list::splice (STL/CLR)](/cpp/dotnet/list-stl-clr#splice).</span><span class="sxs-lookup"><span data-stu-id="717b3-228">For more information, see [list::splice (STL/CLR)](/cpp/dotnet/list-stl-clr#splice).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="splice">
      <MemberSignature Language="C#" Value="public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void splice(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub splice (_Where As ContainerBidirectionalIterator(Of TValue), _Right As IList(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void splice(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member splice : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.IList&lt;'Value&gt; -&gt; unit" Usage="iList.splice (_Where, _Right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where">
          <span data-ttu-id="717b3-229">Pozycja w kontenerze, którego ma zostać splice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-229">The position in the container before which to splice.</span>
          </span>
        </param>
        <param name="_Right">
          <span data-ttu-id="717b3-230">Kontener splice z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-230">The container to splice from.</span>
          </span>
          <span data-ttu-id="717b3-231">Wszystkie elementy zostaną usunięte po zakończeniu operacji splice — z tego kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-231">All elements will be removed from this container after the splice operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-232">Wstawia danej sekwencji do kontenera przed określonej pozycji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-232">Inserts the given sequence into the container before the specified position.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="splice">
      <MemberSignature Language="C#" Value="public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _First);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void splice(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _First) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub splice (_Where As ContainerBidirectionalIterator(Of TValue), _Right As IList(Of TValue), _First As ContainerBidirectionalIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void splice(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _First);" />
      <MemberSignature Language="F#" Value="abstract member splice : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.IList&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iList.splice (_Where, _Right, _First)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where">
          <span data-ttu-id="717b3-233">Pozycja w kontenerze, którego ma zostać splice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-233">The position in the container before which to splice.</span>
          </span>
        </param>
        <param name="_Right">
          <span data-ttu-id="717b3-234">Kontener splice z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-234">The container to splice from.</span>
          </span>
        </param>
        <param name="_First">
          <span data-ttu-id="717b3-235">Położenie elementu splice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-235">The position of the element to splice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-236">Usuwa element z podanym kontenerem wskazywany przez <paramref name="_First" /> i wstawia go przed elementu w kontrolowanej sekwencji wskazywany przez <paramref name="_Where" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-236">Removes the element from the given container pointed to by <paramref name="_First" /> and inserts it before the element in the controlled sequence pointed to by <paramref name="_Where" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="splice">
      <MemberSignature Language="C#" Value="public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void splice(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub splice (_Where As ContainerBidirectionalIterator(Of TValue), _Right As IList(Of TValue), _First As ContainerBidirectionalIterator(Of TValue), _Last As ContainerBidirectionalIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void splice(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member splice : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.IList&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iList.splice (_Where, _Right, _First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where">
          <span data-ttu-id="717b3-237">Pozycja w kontenerze, którego ma zostać splice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-237">The position in the container before which to splice.</span>
          </span>
        </param>
        <param name="_Right">
          <span data-ttu-id="717b3-238">Kontener splice z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-238">The container to splice from.</span>
          </span>
        </param>
        <param name="_First">
          <span data-ttu-id="717b3-239">Pozycja początku zakresu elementów, które mają splice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-239">The beginning position of the range of elements to splice.</span>
          </span>
        </param>
        <param name="_Last">
          <span data-ttu-id="717b3-240">Pierwszej pozycji poza zakresem elementów, które mają splice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-240">The first position beyond the range of elements to splice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-241">Usuwa zakres elementów [<paramref name="_First" />, <paramref name="_Last" />) z podanym kontenerem i wstawia go przed elementem w kontrolowanej sekwencji wskazywany przez <paramref name="_Where" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-241">Removes the range of elements [<paramref name="_First" />, <paramref name="_Last" />) from the given container and inserts it before the element in the controlled sequence pointed to by <paramref name="_Where" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="swap">
      <MemberSignature Language="C#" Value="public void swap (Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void swap(class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub swap (_Right As IList(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void swap(Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member swap : Microsoft.VisualC.StlClr.IList&lt;'Value&gt; -&gt; unit" Usage="iList.swap _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="717b3-242">Kontener do wymiany zawartości z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-242">The container to swap contents with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-243">Zamienia zawartości dwóch kontenerów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-243">Swaps the contents of two containers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-244">Aby uzyskać więcej informacji, zobacz [list::swap (STL/CLR)](/cpp/dotnet/list-stl-clr#swap).</span><span class="sxs-lookup"><span data-stu-id="717b3-244">For more information, see [list::swap (STL/CLR)](/cpp/dotnet/list-stl-clr#swap).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="unique">
      <MemberSignature Language="C#" Value="public void unique (Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,bool&gt; _Pred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void unique(class Microsoft.VisualC.StlClr.BinaryDelegate`3&lt;!TValue, !TValue, bool&gt; _Pred) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub unique (_Pred As BinaryDelegate(Of TValue, TValue, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void unique(Microsoft::VisualC::StlClr::BinaryDelegate&lt;TValue, TValue, bool&gt; ^ _Pred);" />
      <MemberSignature Language="F#" Value="abstract member unique : Microsoft.VisualC.StlClr.BinaryDelegate&lt;'Value, 'Value, bool&gt; -&gt; unit" Usage="iList.unique _Pred" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pred" Type="Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="_Pred">
          <span data-ttu-id="717b3-245">Modułu porównującego, który określa, czy element pary są unikatowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-245">The comparer that determines whether element pairs are unique.</span>
          </span>
          <span data-ttu-id="717b3-246">Element, który nie jest unikatowa, zostaną usunięte z kontenera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-246">An element that is not unique will be removed from the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="717b3-247">Usuwa sąsiadujące elementy, które przekazać określonego testu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="717b3-247">Removes adjacent elements that pass a specified test.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="717b3-248">Aby uzyskać więcej informacji, zobacz [list::unique (STL/CLR)](/cpp/dotnet/list-stl-clr#unique).</span><span class="sxs-lookup"><span data-stu-id="717b3-248">For more information, see [list::unique (STL/CLR)](/cpp/dotnet/list-stl-clr#unique).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>