<Type Name="IList&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eb6d7f4ba3ad56339428e0e813beac848a5c7a97" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69316285" /></Metadata><TypeSignature Language="C#" Value="public interface IList&lt;TValue&gt; : ICloneable, Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer&lt;TValue&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IList`1&lt;TValue&gt; implements class Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1&lt;!TValue&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.IList`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IList(Of TValue)&#xA;Implements IBidirectionalContainer(Of TValue), ICloneable, ICollection" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public interface class IList : ICloneable, Microsoft::VisualC::StlClr::Generic::IBidirectionalContainer&lt;TValue&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type IList&lt;'Value&gt; = interface&#xA;    interface IBidirectionalContainer&lt;'Value&gt;&#xA;    interface ICloneable&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue"><span data-ttu-id="bee2a-101">Typ elementu listy.</span><span class="sxs-lookup"><span data-stu-id="bee2a-101">The type of a list element.</span></span></typeparam>
    <summary><span data-ttu-id="bee2a-102">Definiuje interfejs dla obiektu <see href="https://docs.microsoft.com/cpp/dotnet/list-stl-clr">listy</see> STL/CLR.</span><span class="sxs-lookup"><span data-stu-id="bee2a-102">Defines the interface for an STL/CLR <see href="https://docs.microsoft.com/cpp/dotnet/list-stl-clr">list</see> object.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="assign">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bee2a-103">Zastępuje wszystkie elementy kontenera określonymi elementami.</span><span class="sxs-lookup"><span data-stu-id="bee2a-103">Replaces all elements of the container with the specified elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-104">Aby uzyskać więcej informacji, zobacz [list:: Assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span><span class="sxs-lookup"><span data-stu-id="bee2a-104">For more information, see [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (System.Collections.IEnumerable _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(class System.Collections.IEnumerable _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_Right As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(System::Collections::IEnumerable ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member assign : System.Collections.IEnumerable -&gt; unit" Usage="iList.assign _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="bee2a-105">Wyliczenie, którego elementy mają zostać wstawione do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-105">The enumeration whose elements are to be inserted into the container.</span></span></param>
        <summary><span data-ttu-id="bee2a-106">Zastępuje kontrolowaną sekwencję sekwencją wydaną przez dany moduł wyliczający.</span><span class="sxs-lookup"><span data-stu-id="bee2a-106">Replaces the controlled sequence with the sequence that is designated by the given enumerator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-107">Aby uzyskać więcej informacji, zobacz [list:: Assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span><span class="sxs-lookup"><span data-stu-id="bee2a-107">For more information, see [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_First As IInputIterator(Of TValue), _Last As IInputIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member assign : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; unit" Usage="iList.assign (_First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_First"><span data-ttu-id="bee2a-108">Pozycja początkowa zakresu elementów do wstawienia do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-108">The beginning position of the range of elements to insert into the container.</span></span></param>
        <param name="_Last"><span data-ttu-id="bee2a-109">Pierwsza pozycja poza zakresem elementów do wstawienia do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-109">The first position beyond the range of elements to insert into the container.</span></span></param>
        <summary><span data-ttu-id="bee2a-110">Zastępuje kontrolowaną sekwencję sekwencją <c>[</c><paramref name="_First" /><c>,</c><paramref name="_Last" /><c>)</c>.</span><span class="sxs-lookup"><span data-stu-id="bee2a-110">Replaces the controlled sequence with the sequence <c>[</c><paramref name="_First" /><c>,</c><paramref name="_Last" /><c>)</c>.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-111">Aby uzyskać więcej informacji, zobacz [list:: Assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span><span class="sxs-lookup"><span data-stu-id="bee2a-111">For more information, see [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (int _Count, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(int32 _Count, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_Count As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(int _Count, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member assign : int * 'Value -&gt; unit" Usage="iList.assign (_Count, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Count" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Count"><span data-ttu-id="bee2a-112">Liczba elementów do wstawienia do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-112">The number of elements to insert into the container.</span></span></param>
        <param name="_Val"><span data-ttu-id="bee2a-113">Wartość elementów do wstawienia do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-113">The value of the elements to insert into the container.</span></span></param>
        <summary><span data-ttu-id="bee2a-114">Zamienia kontrolowaną sekwencję na określoną liczbę danego elementu.</span><span class="sxs-lookup"><span data-stu-id="bee2a-114">Replaces the controlled sequence with the specified number of the given element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-115">Aby uzyskać więcej informacji, zobacz [list:: Assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span><span class="sxs-lookup"><span data-stu-id="bee2a-115">For more information, see [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="back">
      <MemberSignature Language="C#" Value="public TValue back ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue back() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.back" />
      <MemberSignature Language="VB.NET" Value="Public Function back () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue % back();" />
      <MemberSignature Language="F#" Value="abstract member back : unit -&gt; " Usage="iList.back " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bee2a-116">Uzyskuje dostęp do ostatniego elementu kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-116">Accesses the last element of the container.</span></span></summary>
        <returns><span data-ttu-id="bee2a-117">Ostatni element kontrolowanej sekwencji, który nie może być pusty.</span><span class="sxs-lookup"><span data-stu-id="bee2a-117">The last element of the controlled sequence, which must be non-empty.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-118">Aby uzyskać więcej informacji, zobacz [list:: Back (STL/CLR)](/cpp/dotnet/list-stl-clr#back).</span><span class="sxs-lookup"><span data-stu-id="bee2a-118">For more information, see [list::back (STL/CLR)](/cpp/dotnet/list-stl-clr#back).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="back_item">
      <MemberSignature Language="C#" Value="public TValue back_item { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue back_item" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.IList`1.back_item" />
      <MemberSignature Language="VB.NET" Value="Public Property back_item As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue back_item { TValue get(); void set(TValue value); };" />
      <MemberSignature Language="F#" Value="member this.back_item : 'Value with get, set" Usage="Microsoft.VisualC.StlClr.IList&lt;'Value&gt;.back_item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bee2a-119">Uzyskuje dostęp do ostatniego elementu kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-119">Accesses the last element of the container.</span></span></summary>
        <value><span data-ttu-id="bee2a-120">Ostatni element kontrolowanej sekwencji, który nie może być pusty.</span><span class="sxs-lookup"><span data-stu-id="bee2a-120">The last element of the controlled sequence, which must be non-empty.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-121">Aby uzyskać więcej informacji, zobacz [list:: back_item (STL/CLR)](/cpp/dotnet/list-stl-clr#back_item).</span><span class="sxs-lookup"><span data-stu-id="bee2a-121">For more information, see [list::back_item (STL/CLR)](/cpp/dotnet/list-stl-clr#back_item).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="begin">
      <MemberSignature Language="C#" Value="public void begin (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void begin(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function begin (ByRef  As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ begin(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member begin :  -&gt; unit" Usage="iList.begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="bee2a-122">Iterator dostępu swobodnego, który wyznacza pierwszy element kontrolowanej sekwencji lub tuż poza końcem pustej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="bee2a-122">A random-access iterator that designates the first element of the controlled sequence, or just beyond the end of an empty sequence.</span></span> <span data-ttu-id="bee2a-123">Służy do uzyskania iteratora, który wyznacza <paramref name="current" /> początek kontrolowanej sekwencji, ale jego stan może ulec zmianie w przypadku zmiany długości kontrolowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="bee2a-123">You use it to obtain an iterator that designates the <paramref name="current" /> beginning of the controlled sequence, but its status can change if the length of the controlled sequence changes.</span></span></param>
        <summary><span data-ttu-id="bee2a-124">Określa początek kontrolowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="bee2a-124">Designates the beginning of the controlled sequence.</span></span></summary>
        <returns><span data-ttu-id="bee2a-125">Iterator.</span><span class="sxs-lookup"><span data-stu-id="bee2a-125">An iterator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 <span data-ttu-id="bee2a-126">Aby uzyskać więcej informacji, zobacz [list:: begin (STL/CLR)](/cpp/dotnet/list-stl-clr#begin).</span><span class="sxs-lookup"><span data-stu-id="bee2a-126">For more information, see [list::begin (STL/CLR)](/cpp/dotnet/list-stl-clr#begin).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="clear">
      <MemberSignature Language="C#" Value="public void clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void clear();" />
      <MemberSignature Language="F#" Value="abstract member clear : unit -&gt; unit" Usage="iList.clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bee2a-127">Usuwa wszystkie elementy z kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-127">Removes all elements from the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-128">Aby uzyskać więcej informacji, zobacz [list:: Clear (STL/CLR)](/cpp/dotnet/list-stl-clr#clear).</span><span class="sxs-lookup"><span data-stu-id="bee2a-128">For more information, see [list::clear (STL/CLR)](/cpp/dotnet/list-stl-clr#clear).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="empty">
      <MemberSignature Language="C#" Value="public bool empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool empty() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.empty" />
      <MemberSignature Language="VB.NET" Value="Public Function empty () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool empty();" />
      <MemberSignature Language="F#" Value="abstract member empty : unit -&gt; bool" Usage="iList.empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bee2a-129">Testuje, czy kontener nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="bee2a-129">Tests whether the container has no elements.</span></span></summary>
        <returns><span data-ttu-id="bee2a-130"><see langword="true" />Jeśli kontener nie ma elementów; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="bee2a-130"><see langword="true" /> if the container has no elements; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-131">Aby uzyskać więcej informacji, zobacz [list:: empty (STL/CLR)](/cpp/dotnet/list-stl-clr#empty).</span><span class="sxs-lookup"><span data-stu-id="bee2a-131">For more information, see [list::empty (STL/CLR)](/cpp/dotnet/list-stl-clr#empty).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="end">
      <MemberSignature Language="C#" Value="public void end (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void end(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function end (ByRef  As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ end(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member end :  -&gt; unit" Usage="iList.end " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="bee2a-132">Iterator dostępu swobodnego, który wskazuje tuż poza końcem kontrolowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="bee2a-132">A random-access iterator that points just beyond the end of the controlled sequence.</span></span> <span data-ttu-id="bee2a-133">Służy do uzyskania iteratora, który wyznacza koniec kontrolowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="bee2a-133">You use it to obtain an iterator that designates the end of the controlled sequence.</span></span> <span data-ttu-id="bee2a-134">Jego stan nie zmienia się w przypadku zmiany długości kontrolowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="bee2a-134">Its status does not change if the length of the controlled sequence changes.</span></span></param>
        <summary><span data-ttu-id="bee2a-135">Określa koniec kontrolowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="bee2a-135">Designates the end of the controlled sequence.</span></span></summary>
        <returns><span data-ttu-id="bee2a-136">Iterator.</span><span class="sxs-lookup"><span data-stu-id="bee2a-136">An iterator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 <span data-ttu-id="bee2a-137">Aby uzyskać więcej informacji, zobacz [list:: end (STL/CLR)](/cpp/dotnet/list-stl-clr#end).</span><span class="sxs-lookup"><span data-stu-id="bee2a-137">For more information, see [list::end (STL/CLR)](/cpp/dotnet/list-stl-clr#end).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="erase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bee2a-138">Usuwa elementy z kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-138">Removes elements from the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-139">Aby uzyskać więcej informacji, zobacz [list:: Erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span><span class="sxs-lookup"><span data-stu-id="bee2a-139">For more information, see [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public void erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void erase(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (ByRef  As ContainerBidirectionalIterator(Of TValue), _Where As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ erase(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where);" />
      <MemberSignature Language="F#" Value="abstract member erase :  * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iList.erase (, _Where)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="bee2a-140">Iterator, który wyznacza pierwszy element, który nie został usunięty, lub <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> jeśli taki element nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="bee2a-140">An iterator that designates the first element remaining beyond any elements removed, or <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> if no such element exists.</span></span></param>
        <param name="_Where"><span data-ttu-id="bee2a-141">Pozycja elementu do wymazania.</span><span class="sxs-lookup"><span data-stu-id="bee2a-141">The position of the element to erase.</span></span></param>
        <summary><span data-ttu-id="bee2a-142">Usuwa pojedynczy element kontrolowanej sekwencji wskazywany przez dany iterator.</span><span class="sxs-lookup"><span data-stu-id="bee2a-142">Removes the single element of the controlled sequence pointed to by the given iterator.</span></span></summary>
        <returns><span data-ttu-id="bee2a-143">Iterator.</span><span class="sxs-lookup"><span data-stu-id="bee2a-143">An iterator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="bee2a-144">Aby uzyskać więcej informacji, zobacz [list:: Erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span><span class="sxs-lookup"><span data-stu-id="bee2a-144">For more information, see [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public void erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _First_iter, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Last_iter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void erase(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _First_iter, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Last_iter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (ByRef  As ContainerBidirectionalIterator(Of TValue), _First_iter As ContainerBidirectionalIterator(Of TValue), _Last_iter As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ erase(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _First_iter, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Last_iter);" />
      <MemberSignature Language="F#" Value="abstract member erase :  * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iList.erase (, _First_iter, _Last_iter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_First_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Last_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="bee2a-145">Iterator, który wyznacza pierwszy element, który nie został usunięty, lub <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> jeśli taki element nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="bee2a-145">An iterator that designates the first element remaining beyond any elements removed, or <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> if no such element exists.</span></span></param>
        <param name="_First_iter"><span data-ttu-id="bee2a-146">Pozycja początkowa zakresu elementów do wymazania.</span><span class="sxs-lookup"><span data-stu-id="bee2a-146">The beginning position of the range of elements to erase.</span></span></param>
        <param name="_Last_iter"><span data-ttu-id="bee2a-147">Pierwsza pozycja poza zakresem elementów do wymazania.</span><span class="sxs-lookup"><span data-stu-id="bee2a-147">The first position beyond the range of elements to erase.</span></span></param>
        <summary><span data-ttu-id="bee2a-148">Usuwa elementy z kontrolowanej sekwencji z zakresu \[  *\_pierwszego\_ITER*,  *\_Ostatnia\_ITER*).</span><span class="sxs-lookup"><span data-stu-id="bee2a-148">Removes the elements of the controlled sequence in the range \[*\_First\_iter*, *\_Last\_iter*).</span></span></summary>
        <returns><span data-ttu-id="bee2a-149">Iterator.</span><span class="sxs-lookup"><span data-stu-id="bee2a-149">An iterator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="bee2a-150">Aby uzyskać więcej informacji, zobacz [list:: Erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span><span class="sxs-lookup"><span data-stu-id="bee2a-150">For more information, see [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="front">
      <MemberSignature Language="C#" Value="public TValue front ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue front() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.front" />
      <MemberSignature Language="VB.NET" Value="Public Function front () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue % front();" />
      <MemberSignature Language="F#" Value="abstract member front : unit -&gt; " Usage="iList.front " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bee2a-151">Uzyskuje dostęp do pierwszego elementu kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-151">Accesses the first element of the container.</span></span></summary>
        <returns><span data-ttu-id="bee2a-152">Pierwszy element kontrolowanej sekwencji, który nie może być pusty.</span><span class="sxs-lookup"><span data-stu-id="bee2a-152">The first element of the controlled sequence, which must be non-empty.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-153">Aby uzyskać więcej informacji, zobacz [list:: front (STL/CLR)](/cpp/dotnet/list-stl-clr#front).</span><span class="sxs-lookup"><span data-stu-id="bee2a-153">For more information, see [list::front (STL/CLR)](/cpp/dotnet/list-stl-clr#front).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="front_item">
      <MemberSignature Language="C#" Value="public TValue front_item { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue front_item" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.IList`1.front_item" />
      <MemberSignature Language="VB.NET" Value="Public Property front_item As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue front_item { TValue get(); void set(TValue value); };" />
      <MemberSignature Language="F#" Value="member this.front_item : 'Value with get, set" Usage="Microsoft.VisualC.StlClr.IList&lt;'Value&gt;.front_item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bee2a-154">Uzyskuje dostęp do pierwszego elementu kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-154">Accesses the first element of the container.</span></span></summary>
        <value><span data-ttu-id="bee2a-155">Pierwszy element kontrolowanej sekwencji, który nie może być pusty.</span><span class="sxs-lookup"><span data-stu-id="bee2a-155">The first element of the controlled sequence, which must be non-empty.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-156">Aby uzyskać więcej informacji, zobacz [list:: front_item (STL/CLR)](/cpp/dotnet/list-stl-clr#front_item).</span><span class="sxs-lookup"><span data-stu-id="bee2a-156">For more information, see [list::front_item (STL/CLR)](/cpp/dotnet/list-stl-clr#front_item).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="insert">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bee2a-157">Dodaje elementy do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-157">Adds elements to the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-158">Aby uzyskać więcej informacji, zobacz [list:: Insert (STL/CLR)](/cpp/dotnet/list-stl-clr#insert).</span><span class="sxs-lookup"><span data-stu-id="bee2a-158">For more information, see [list::insert (STL/CLR)](/cpp/dotnet/list-stl-clr#insert).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where_iter, System.Collections.IEnumerable _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where_iter, class System.Collections.IEnumerable _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where_iter As ContainerBidirectionalIterator(Of TValue), _Right As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where_iter, System::Collections::IEnumerable ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * System.Collections.IEnumerable -&gt; unit" Usage="iList.insert (_Where_iter, _Right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="_Where_iter"><span data-ttu-id="bee2a-159">Pozycja w kontenerze, która ma zostać wstawiona wcześniej.</span><span class="sxs-lookup"><span data-stu-id="bee2a-159">The position in the container to insert before.</span></span></param>
        <param name="_Right"><span data-ttu-id="bee2a-160">Wyliczenie, którego elementy mają zostać wstawione do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-160">The enumeration whose elements are to be inserted into the container.</span></span></param>
        <summary><span data-ttu-id="bee2a-161">Wstawia elementy określonego modułu wyliczającego do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-161">Inserts the elements of the specified enumerator into the container.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function insert (ByRef  As ContainerBidirectionalIterator(Of TValue), _Where As ContainerBidirectionalIterator(Of TValue), _Val As TValue) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member insert :  * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * 'Value -&gt; unit" Usage="iList.insert (, _Where, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="bee2a-162">Iterator, który wyznacza nowo wstawiony element.</span><span class="sxs-lookup"><span data-stu-id="bee2a-162">An iterator that designates the newly inserted element.</span></span></param>
        <param name="_Where"><span data-ttu-id="bee2a-163">Pozycja w kontenerze bezpośrednio po nowo wstawionych elementach.</span><span class="sxs-lookup"><span data-stu-id="bee2a-163">The position in the container immediately following the newly inserted elements.</span></span></param>
        <param name="_Val"><span data-ttu-id="bee2a-164">Wartość elementu, który ma zostać wstawiony do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-164">The value of the element to insert into the container.</span></span></param>
        <summary><span data-ttu-id="bee2a-165">Wstawia element danej wartości do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-165">Inserts an element of the given value into the container.</span></span></summary>
        <returns><span data-ttu-id="bee2a-166">Iterator.</span><span class="sxs-lookup"><span data-stu-id="bee2a-166">An iterator.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where As ContainerBidirectionalIterator(Of TValue), _First As IInputIterator(Of TValue), _Last As IInputIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; unit" Usage="iList.insert (_Where, _First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where"><span data-ttu-id="bee2a-167">Pozycja w kontenerze bezpośrednio po nowo wstawionych elementach.</span><span class="sxs-lookup"><span data-stu-id="bee2a-167">The position in the container immediately following the newly inserted elements.</span></span></param>
        <param name="_First"><span data-ttu-id="bee2a-168">Pozycja początkowa zakresu elementów do wstawienia do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-168">The beginning position of the range of elements to insert into the container.</span></span></param>
        <param name="_Last"><span data-ttu-id="bee2a-169">Pierwsza pozycja poza zakresem elementów do wstawienia do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-169">The first position beyond the range of elements to insert into the container.</span></span></param>
        <summary><span data-ttu-id="bee2a-170">Wstawia sekwencję [<paramref name="_First" />, <paramref name="_Last" />) do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-170">Inserts the sequence [<paramref name="_First" />, <paramref name="_Last" />) into the container.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, int _Count, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, int32 _Count, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where As ContainerBidirectionalIterator(Of TValue), _Count As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, int _Count, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * int * 'Value -&gt; unit" Usage="iList.insert (_Where, _Count, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Count" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Where"><span data-ttu-id="bee2a-171">Pozycja w kontenerze bezpośrednio po nowo wstawionych elementach.</span><span class="sxs-lookup"><span data-stu-id="bee2a-171">The position in the container immediately following the newly inserted elements.</span></span></param>
        <param name="_Count"><span data-ttu-id="bee2a-172">Liczba elementów do wstawienia do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-172">The number of elements to insert into the container.</span></span></param>
        <param name="_Val"><span data-ttu-id="bee2a-173">Wartość elementu, który ma zostać wstawiony do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-173">The value of the element to insert into the container.</span></span></param>
        <summary><span data-ttu-id="bee2a-174">Wstawia element danej wartości do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-174">Inserts an element of the given value into the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="bee2a-175">Aby uzyskać więcej informacji, zobacz [list:: Insert (STL/CLR)](/cpp/dotnet/list-stl-clr#insert).</span><span class="sxs-lookup"><span data-stu-id="bee2a-175">For more information, see [list::insert (STL/CLR)](/cpp/dotnet/list-stl-clr#insert).</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="merge">
      <MemberSignature Language="C#" Value="public void merge (Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right, Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,bool&gt; _Pred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void merge(class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right, class Microsoft.VisualC.StlClr.BinaryDelegate`3&lt;!TValue, !TValue, bool&gt; _Pred) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub merge (_Right As IList(Of TValue), _Pred As BinaryDelegate(Of TValue, TValue, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void merge(Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right, Microsoft::VisualC::StlClr::BinaryDelegate&lt;TValue, TValue, bool&gt; ^ _Pred);" />
      <MemberSignature Language="F#" Value="abstract member merge : Microsoft.VisualC.StlClr.IList&lt;'Value&gt; * Microsoft.VisualC.StlClr.BinaryDelegate&lt;'Value, 'Value, bool&gt; -&gt; unit" Usage="iList.merge (_Right, _Pred)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
        <Parameter Name="_Pred" Type="Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="bee2a-176">Kontener, który ma zostać scalony w tym kontenerze.</span><span class="sxs-lookup"><span data-stu-id="bee2a-176">The container to merge into this container.</span></span></param>
        <param name="_Pred"><span data-ttu-id="bee2a-177">Wartość logiczna Funktor do porównywania par elementów.</span><span class="sxs-lookup"><span data-stu-id="bee2a-177">The Boolean functor for comparing pairs of elements.</span></span></param>
        <summary><span data-ttu-id="bee2a-178">Scala dwie uporządkowane sekwencje kontrolowane.</span><span class="sxs-lookup"><span data-stu-id="bee2a-178">Merges two ordered controlled sequences.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-179">Aby uzyskać więcej informacji, zobacz [list:: merge (STL/CLR)](/cpp/dotnet/list-stl-clr#merge).</span><span class="sxs-lookup"><span data-stu-id="bee2a-179">For more information, see [list::merge (STL/CLR)](/cpp/dotnet/list-stl-clr#merge).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="pop_back">
      <MemberSignature Language="C#" Value="public void pop_back ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void pop_back() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.pop_back" />
      <MemberSignature Language="VB.NET" Value="Public Sub pop_back ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void pop_back();" />
      <MemberSignature Language="F#" Value="abstract member pop_back : unit -&gt; unit" Usage="iList.pop_back " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bee2a-180">Usuwa ostatni element z kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-180">Removes the last element from the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-181">Aby uzyskać więcej informacji, zobacz [list::p op_back (STL/CLR)](/cpp/dotnet/list-stl-clr#pop_back).</span><span class="sxs-lookup"><span data-stu-id="bee2a-181">For more information, see [list::pop_back (STL/CLR)](/cpp/dotnet/list-stl-clr#pop_back).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="pop_front">
      <MemberSignature Language="C#" Value="public void pop_front ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void pop_front() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.pop_front" />
      <MemberSignature Language="VB.NET" Value="Public Sub pop_front ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void pop_front();" />
      <MemberSignature Language="F#" Value="abstract member pop_front : unit -&gt; unit" Usage="iList.pop_front " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bee2a-182">Usuwa pierwszy element z kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-182">Removes the first element from the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-183">Aby uzyskać więcej informacji, zobacz [list::p op_front (STL/CLR)](/cpp/dotnet/list-stl-clr#pop_front).</span><span class="sxs-lookup"><span data-stu-id="bee2a-183">For more information, see [list::pop_front (STL/CLR)](/cpp/dotnet/list-stl-clr#pop_front).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="push_back">
      <MemberSignature Language="C#" Value="public void push_back (TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void push_back(!TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.push_back(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub push_back (_Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void push_back(TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member push_back : 'Value -&gt; unit" Usage="iList.push_back _Val" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Val"><span data-ttu-id="bee2a-184">Wartość elementu do dołączenia do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-184">The value of the element to append to the container.</span></span></param>
        <summary><span data-ttu-id="bee2a-185">Dodaje nowy element na końcu kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-185">Adds a new element to the end of the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-186">Aby uzyskać więcej informacji, zobacz [list::p ush_back (STL/CLR)](/cpp/dotnet/list-stl-clr#push_back).</span><span class="sxs-lookup"><span data-stu-id="bee2a-186">For more information, see [list::push_back (STL/CLR)](/cpp/dotnet/list-stl-clr#push_back).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="push_front">
      <MemberSignature Language="C#" Value="public void push_front (TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void push_front(!TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.push_front(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub push_front (_Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void push_front(TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member push_front : 'Value -&gt; unit" Usage="iList.push_front _Val" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Val"><span data-ttu-id="bee2a-187">Wartość elementu do wstawienia na początku kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-187">The value of the element to insert at the beginning of the container.</span></span></param>
        <summary><span data-ttu-id="bee2a-188">Dodaje nowy element na początku kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-188">Adds a new element to the beginning of the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-189">Aby uzyskać więcej informacji, zobacz [list::p ush_front (STL/CLR)](/cpp/dotnet/list-stl-clr#push_front).</span><span class="sxs-lookup"><span data-stu-id="bee2a-189">For more information, see [list::push_front (STL/CLR)](/cpp/dotnet/list-stl-clr#push_front).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rbegin">
      <MemberSignature Language="C#" Value="public void rbegin (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void rbegin(class Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function rbegin (ByRef  As ReverseBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ rbegin(Microsoft::VisualC::StlClr::Generic::ReverseBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member rbegin :  -&gt; unit" Usage="iList.rbegin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="bee2a-190">Iterator odwrotny, który wyznacza ostatni element kontrolowanej sekwencji lub pozycji tuż poza początkiem pustej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="bee2a-190">A reverse iterator that designates the last element of the controlled sequence, or the position just beyond the beginning of an empty sequence.</span></span> <span data-ttu-id="bee2a-191">W związku <paramref name="beginning" /> z tym określa odwrotną sekwencję.</span><span class="sxs-lookup"><span data-stu-id="bee2a-191">Hence, it designates the <paramref name="beginning" /> of the reverse sequence.</span></span> <span data-ttu-id="bee2a-192">Służy do uzyskania iteratora, który wyznacza <paramref name="current" /> początek kontrolowanej sekwencji, która jest widoczna w odwrotnej kolejności, ale jej stan może ulec zmianie w przypadku zmiany długości kontrolowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="bee2a-192">You use it to obtain an iterator that designates the <paramref name="current" /> beginning of the controlled sequence that is seen in reverse order, but its status can change if the length of the controlled sequence changes.</span></span></param>
        <summary><span data-ttu-id="bee2a-193">Określa początek odwróconej sekwencji kontrolowanej.</span><span class="sxs-lookup"><span data-stu-id="bee2a-193">Designates the beginning of the reversed controlled sequence.</span></span></summary>
        <returns><span data-ttu-id="bee2a-194">Iterator.</span><span class="sxs-lookup"><span data-stu-id="bee2a-194">An iterator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 <span data-ttu-id="bee2a-195">Aby uzyskać więcej informacji, zobacz [list:: rbegin (STL/CLR)](/cpp/dotnet/list-stl-clr#rbegin).</span><span class="sxs-lookup"><span data-stu-id="bee2a-195">For more information, see [list::rbegin (STL/CLR)](/cpp/dotnet/list-stl-clr#rbegin).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="remove">
      <MemberSignature Language="C#" Value="public void remove (TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void remove(!TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub remove (_Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void remove(TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member remove : 'Value -&gt; unit" Usage="iList.remove _Val" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Val"><span data-ttu-id="bee2a-196">Wartość elementu do usunięcia z kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-196">The value of the element to remove from the container.</span></span></param>
        <summary><span data-ttu-id="bee2a-197">Usuwa element, który ma określoną wartość z kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-197">Removes an element that has a specified value from the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-198">Aby uzyskać więcej informacji, zobacz [list:: Remove (STL/CLR)](/cpp/dotnet/list-stl-clr#remove).</span><span class="sxs-lookup"><span data-stu-id="bee2a-198">For more information, see [list::remove (STL/CLR)](/cpp/dotnet/list-stl-clr#remove).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="remove_if">
      <MemberSignature Language="C#" Value="public void remove_if (Microsoft.VisualC.StlClr.UnaryDelegate&lt;TValue,bool&gt; _Pred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void remove_if(class Microsoft.VisualC.StlClr.UnaryDelegate`2&lt;!TValue, bool&gt; _Pred) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.remove_if(Microsoft.VisualC.StlClr.UnaryDelegate{`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub remove_if (_Pred As UnaryDelegate(Of TValue, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void remove_if(Microsoft::VisualC::StlClr::UnaryDelegate&lt;TValue, bool&gt; ^ _Pred);" />
      <MemberSignature Language="F#" Value="abstract member remove_if : Microsoft.VisualC.StlClr.UnaryDelegate&lt;'Value, bool&gt; -&gt; unit" Usage="iList.remove_if _Pred" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pred" Type="Microsoft.VisualC.StlClr.UnaryDelegate&lt;TValue,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="_Pred"><span data-ttu-id="bee2a-199">Test logiczny określający, które elementy zostaną usunięte.</span><span class="sxs-lookup"><span data-stu-id="bee2a-199">A Boolean test that determines which elements will be removed.</span></span></param>
        <summary><span data-ttu-id="bee2a-200">Usuwa elementy z kontenera, który przeszedł do określonego testu.</span><span class="sxs-lookup"><span data-stu-id="bee2a-200">Removes elements from the container that pass a specified test.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="bee2a-201">Aby uzyskać więcej informacji, zobacz [list:: remove_if (STL/CLR)](/cpp/dotnet/list-stl-clr#remove_if).</span><span class="sxs-lookup"><span data-stu-id="bee2a-201">For more information, see [list::remove_if (STL/CLR)](/cpp/dotnet/list-stl-clr#remove_if).</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rend">
      <MemberSignature Language="C#" Value="public void rend (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void rend(class Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function rend (ByRef  As ReverseBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ rend(Microsoft::VisualC::StlClr::Generic::ReverseBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member rend :  -&gt; unit" Usage="iList.rend " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="bee2a-202">Iterator odwrotny, który wskazuje tuż poza początkiem kontrolowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="bee2a-202">A reverse iterator that points just beyond the beginning of the controlled sequence.</span></span> <span data-ttu-id="bee2a-203">W związku <paramref name="end" /> z tym określa odwrotną sekwencję.</span><span class="sxs-lookup"><span data-stu-id="bee2a-203">Hence, it designates the <paramref name="end" /> of the reverse sequence.</span></span> <span data-ttu-id="bee2a-204">Służy do uzyskania iteratora, który wyznacza <paramref name="current" /> koniec kontrolowanej sekwencji widoczny w odwrotnej kolejności, ale jego stan może ulec zmianie w przypadku zmiany długości kontrolowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="bee2a-204">You use it to obtain an iterator that designates the <paramref name="current" /> end of the controlled sequence seen in reverse order, but its status can change if the length of the controlled sequence changes.</span></span></param>
        <summary><span data-ttu-id="bee2a-205">Określa koniec odwróconej kontrolowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="bee2a-205">Designates the end of the reversed controlled sequence.</span></span></summary>
        <returns><span data-ttu-id="bee2a-206">Iterator.</span><span class="sxs-lookup"><span data-stu-id="bee2a-206">An iterator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 <span data-ttu-id="bee2a-207">Aby uzyskać więcej informacji, zobacz [list:: rend (STL/CLR)](/cpp/dotnet/list-stl-clr#rend).</span><span class="sxs-lookup"><span data-stu-id="bee2a-207">For more information, see [list::rend (STL/CLR)](/cpp/dotnet/list-stl-clr#rend).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="resize">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bee2a-208">Zmienia liczbę elementów w kontenerze.</span><span class="sxs-lookup"><span data-stu-id="bee2a-208">Changes the number of elements in the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-209">Aby uzyskać więcej informacji, zobacz [Lista:: zmiana rozmiaru (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span><span class="sxs-lookup"><span data-stu-id="bee2a-209">For more information, see [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="resize">
      <MemberSignature Language="C#" Value="public void resize (int _Newsize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void resize(int32 _Newsize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub resize (_Newsize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void resize(int _Newsize);" />
      <MemberSignature Language="F#" Value="abstract member resize : int -&gt; unit" Usage="iList.resize _Newsize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Newsize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Newsize"><span data-ttu-id="bee2a-210">Nowy rozmiar kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-210">The new size of the container.</span></span></param>
        <summary><span data-ttu-id="bee2a-211">Zmienia liczbę elementów w kontenerze na określony rozmiar.</span><span class="sxs-lookup"><span data-stu-id="bee2a-211">Changes the number of elements in the container to the specified size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-212">Aby uzyskać więcej informacji, zobacz [Lista:: zmiana rozmiaru (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span><span class="sxs-lookup"><span data-stu-id="bee2a-212">For more information, see [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="resize">
      <MemberSignature Language="C#" Value="public void resize (int _Newsize, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void resize(int32 _Newsize, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub resize (_Newsize As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void resize(int _Newsize, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member resize : int * 'Value -&gt; unit" Usage="iList.resize (_Newsize, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Newsize" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Newsize"><span data-ttu-id="bee2a-213">Nowy rozmiar kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-213">The new size of the container.</span></span></param>
        <param name="_Val"><span data-ttu-id="bee2a-214">Wartość elementów wypełnienia.</span><span class="sxs-lookup"><span data-stu-id="bee2a-214">The value of the padding elements.</span></span></param>
        <summary><span data-ttu-id="bee2a-215">Zmienia liczbę elementów w kontenerze na określony rozmiar.</span><span class="sxs-lookup"><span data-stu-id="bee2a-215">Changes the number of elements in the container to the specified size.</span></span> <span data-ttu-id="bee2a-216">Jeśli nowy rozmiar jest większy niż stary rozmiar, dane wartości zostaną dołączone do kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-216">If the new size is larger than the old size, the given values will be appended to the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-217">Aby uzyskać więcej informacji, zobacz [Lista:: zmiana rozmiaru (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span><span class="sxs-lookup"><span data-stu-id="bee2a-217">For more information, see [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="reverse">
      <MemberSignature Language="C#" Value="public void reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.reverse" />
      <MemberSignature Language="VB.NET" Value="Public Sub reverse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void reverse();" />
      <MemberSignature Language="F#" Value="abstract member reverse : unit -&gt; unit" Usage="iList.reverse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bee2a-218">Odwraca elementy kontrolowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="bee2a-218">Reverses the elements of the controlled sequence.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-219">Aby uzyskać więcej informacji, zobacz [list:: Reverse (STL/CLR)](/cpp/dotnet/list-stl-clr#reverse).</span><span class="sxs-lookup"><span data-stu-id="bee2a-219">For more information, see [list::reverse (STL/CLR)](/cpp/dotnet/list-stl-clr#reverse).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="size">
      <MemberSignature Language="C#" Value="public int size ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 size() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.size" />
      <MemberSignature Language="VB.NET" Value="Public Function size () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int size();" />
      <MemberSignature Language="F#" Value="abstract member size : unit -&gt; int" Usage="iList.size " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bee2a-220">Zlicza elementy w kontenerze.</span><span class="sxs-lookup"><span data-stu-id="bee2a-220">Counts the number of elements in the container.</span></span></summary>
        <returns><span data-ttu-id="bee2a-221">Długość kontrolowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="bee2a-221">The length of the controlled sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-222">Aby uzyskać więcej informacji, zobacz [list:: size (STL/CLR)](/cpp/dotnet/list-stl-clr#size).</span><span class="sxs-lookup"><span data-stu-id="bee2a-222">For more information, see [list::size (STL/CLR)](/cpp/dotnet/list-stl-clr#size).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="sort">
      <MemberSignature Language="C#" Value="public void sort (Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,bool&gt; _Pred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void sort(class Microsoft.VisualC.StlClr.BinaryDelegate`3&lt;!TValue, !TValue, bool&gt; _Pred) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub sort (_Pred As BinaryDelegate(Of TValue, TValue, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void sort(Microsoft::VisualC::StlClr::BinaryDelegate&lt;TValue, TValue, bool&gt; ^ _Pred);" />
      <MemberSignature Language="F#" Value="abstract member sort : Microsoft.VisualC.StlClr.BinaryDelegate&lt;'Value, 'Value, bool&gt; -&gt; unit" Usage="iList.sort _Pred" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pred" Type="Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="_Pred"><span data-ttu-id="bee2a-223">Operator, który będzie używany do porównywania elementów do uporządkowania.</span><span class="sxs-lookup"><span data-stu-id="bee2a-223">The operator that will be used to compare elements for ordering.</span></span></param>
        <summary><span data-ttu-id="bee2a-224">Zamówienie kontrolowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="bee2a-224">Orders the controlled sequence.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-225">Aby uzyskać więcej informacji, zobacz [list:: sort (STL/CLR)](/cpp/dotnet/list-stl-clr#sort).</span><span class="sxs-lookup"><span data-stu-id="bee2a-225">For more information, see [list::sort (STL/CLR)](/cpp/dotnet/list-stl-clr#sort).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="splice">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bee2a-226">Zmienia kolejność linków między węzłami.</span><span class="sxs-lookup"><span data-stu-id="bee2a-226">Reorders links between nodes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-227">Aby uzyskać więcej informacji, zobacz [list:: splice (STL/CLR)](/cpp/dotnet/list-stl-clr#splice).</span><span class="sxs-lookup"><span data-stu-id="bee2a-227">For more information, see [list::splice (STL/CLR)](/cpp/dotnet/list-stl-clr#splice).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="splice">
      <MemberSignature Language="C#" Value="public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void splice(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub splice (_Where As ContainerBidirectionalIterator(Of TValue), _Right As IList(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void splice(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member splice : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.IList&lt;'Value&gt; -&gt; unit" Usage="iList.splice (_Where, _Right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where"><span data-ttu-id="bee2a-228">Pozycja w kontenerze, przed którą ma zostać nadana Metoda łączenia.</span><span class="sxs-lookup"><span data-stu-id="bee2a-228">The position in the container before which to splice.</span></span></param>
        <param name="_Right"><span data-ttu-id="bee2a-229">Kontener, z którego ma zostać nadana Metoda łączenia.</span><span class="sxs-lookup"><span data-stu-id="bee2a-229">The container to splice from.</span></span> <span data-ttu-id="bee2a-230">Wszystkie elementy zostaną usunięte z tego kontenera po operacji splice.</span><span class="sxs-lookup"><span data-stu-id="bee2a-230">All elements will be removed from this container after the splice operation.</span></span></param>
        <summary><span data-ttu-id="bee2a-231">Wstawia daną sekwencję do kontenera przed określoną pozycją.</span><span class="sxs-lookup"><span data-stu-id="bee2a-231">Inserts the given sequence into the container before the specified position.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="splice">
      <MemberSignature Language="C#" Value="public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _First);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void splice(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _First) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub splice (_Where As ContainerBidirectionalIterator(Of TValue), _Right As IList(Of TValue), _First As ContainerBidirectionalIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void splice(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _First);" />
      <MemberSignature Language="F#" Value="abstract member splice : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.IList&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iList.splice (_Where, _Right, _First)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where"><span data-ttu-id="bee2a-232">Pozycja w kontenerze, przed którą ma zostać nadana Metoda łączenia.</span><span class="sxs-lookup"><span data-stu-id="bee2a-232">The position in the container before which to splice.</span></span></param>
        <param name="_Right"><span data-ttu-id="bee2a-233">Kontener, z którego ma zostać nadana Metoda łączenia.</span><span class="sxs-lookup"><span data-stu-id="bee2a-233">The container to splice from.</span></span></param>
        <param name="_First"><span data-ttu-id="bee2a-234">Pozycja elementu do odłączenia.</span><span class="sxs-lookup"><span data-stu-id="bee2a-234">The position of the element to splice.</span></span></param>
        <summary><span data-ttu-id="bee2a-235">Usuwa element z danego kontenera wskazywanego przez <paramref name="_First" /> i wstawia go przed elementem w kontrolowanej sekwencji wskazywanym przez. <paramref name="_Where" /></span><span class="sxs-lookup"><span data-stu-id="bee2a-235">Removes the element from the given container pointed to by <paramref name="_First" /> and inserts it before the element in the controlled sequence pointed to by <paramref name="_Where" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="splice">
      <MemberSignature Language="C#" Value="public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void splice(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub splice (_Where As ContainerBidirectionalIterator(Of TValue), _Right As IList(Of TValue), _First As ContainerBidirectionalIterator(Of TValue), _Last As ContainerBidirectionalIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void splice(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member splice : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.IList&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iList.splice (_Where, _Right, _First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where"><span data-ttu-id="bee2a-236">Pozycja w kontenerze, przed którą ma zostać nadana Metoda łączenia.</span><span class="sxs-lookup"><span data-stu-id="bee2a-236">The position in the container before which to splice.</span></span></param>
        <param name="_Right"><span data-ttu-id="bee2a-237">Kontener, z którego ma zostać nadana Metoda łączenia.</span><span class="sxs-lookup"><span data-stu-id="bee2a-237">The container to splice from.</span></span></param>
        <param name="_First"><span data-ttu-id="bee2a-238">Pozycja początkowa zakresu elementów do odłączenia.</span><span class="sxs-lookup"><span data-stu-id="bee2a-238">The beginning position of the range of elements to splice.</span></span></param>
        <param name="_Last"><span data-ttu-id="bee2a-239">Pierwsza pozycja poza zakresem elementów do odłączenia.</span><span class="sxs-lookup"><span data-stu-id="bee2a-239">The first position beyond the range of elements to splice.</span></span></param>
        <summary><span data-ttu-id="bee2a-240">Usuwa zakres elementów [<paramref name="_First" />, <paramref name="_Last" />) z danego kontenera i wstawia go przed elementem w kontrolowanej sekwencji wskazywanym przez <paramref name="_Where" />.</span><span class="sxs-lookup"><span data-stu-id="bee2a-240">Removes the range of elements [<paramref name="_First" />, <paramref name="_Last" />) from the given container and inserts it before the element in the controlled sequence pointed to by <paramref name="_Where" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="swap">
      <MemberSignature Language="C#" Value="public void swap (Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void swap(class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub swap (_Right As IList(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void swap(Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member swap : Microsoft.VisualC.StlClr.IList&lt;'Value&gt; -&gt; unit" Usage="iList.swap _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="bee2a-241">Kontener, za pomocą którego ma zostać zamieniony zawartość.</span><span class="sxs-lookup"><span data-stu-id="bee2a-241">The container to swap contents with.</span></span></param>
        <summary><span data-ttu-id="bee2a-242">Zamienia zawartości dwóch kontenerów.</span><span class="sxs-lookup"><span data-stu-id="bee2a-242">Swaps the contents of two containers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-243">Aby uzyskać więcej informacji, zobacz [list:: swap (STL/CLR)](/cpp/dotnet/list-stl-clr#swap).</span><span class="sxs-lookup"><span data-stu-id="bee2a-243">For more information, see [list::swap (STL/CLR)](/cpp/dotnet/list-stl-clr#swap).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="unique">
      <MemberSignature Language="C#" Value="public void unique (Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,bool&gt; _Pred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void unique(class Microsoft.VisualC.StlClr.BinaryDelegate`3&lt;!TValue, !TValue, bool&gt; _Pred) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub unique (_Pred As BinaryDelegate(Of TValue, TValue, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void unique(Microsoft::VisualC::StlClr::BinaryDelegate&lt;TValue, TValue, bool&gt; ^ _Pred);" />
      <MemberSignature Language="F#" Value="abstract member unique : Microsoft.VisualC.StlClr.BinaryDelegate&lt;'Value, 'Value, bool&gt; -&gt; unit" Usage="iList.unique _Pred" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pred" Type="Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="_Pred"><span data-ttu-id="bee2a-244">Moduł porównujący, który określa, czy pary elementów są unikatowe.</span><span class="sxs-lookup"><span data-stu-id="bee2a-244">The comparer that determines whether element pairs are unique.</span></span> <span data-ttu-id="bee2a-245">Element, który nie jest unikatowy, zostanie usunięty z kontenera.</span><span class="sxs-lookup"><span data-stu-id="bee2a-245">An element that is not unique will be removed from the container.</span></span></param>
        <summary><span data-ttu-id="bee2a-246">Usuwa przylegające elementy, które przechodzą do określonego testu.</span><span class="sxs-lookup"><span data-stu-id="bee2a-246">Removes adjacent elements that pass a specified test.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bee2a-247">Aby uzyskać więcej informacji, zobacz [list:: Unique (STL/CLR)](/cpp/dotnet/list-stl-clr#unique).</span><span class="sxs-lookup"><span data-stu-id="bee2a-247">For more information, see [list::unique (STL/CLR)](/cpp/dotnet/list-stl-clr#unique).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
