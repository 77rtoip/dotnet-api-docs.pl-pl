<Type Name="TextPatternRange" FullName="System.Windows.Automation.Text.TextPatternRange">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d7bcd9a4828f7d9edd1295a3f32e75c3df0428db" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69224775" /></Metadata><TypeSignature Language="C#" Value="public class TextPatternRange" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextPatternRange extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Text.TextPatternRange" />
  <TypeSignature Language="VB.NET" Value="Public Class TextPatternRange" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextPatternRange" />
  <TypeSignature Language="F#" Value="type TextPatternRange = class" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="6457a-101">Reprezentuje zakres ciągłego tekstu w <see cref="T:System.Windows.Automation.TextPattern" /> kontenerze.</span><span class="sxs-lookup"><span data-stu-id="6457a-101">Represents a span of continuous text in a <see cref="T:System.Windows.Automation.TextPattern" /> container.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6457a-102">Może reprezentować punkt wstawiania, podzbiór lub cały tekst <xref:System.Windows.Automation.TextPattern> w kontenerze. <xref:System.Windows.Automation.Text.TextPatternRange></span><span class="sxs-lookup"><span data-stu-id="6457a-102">A <xref:System.Windows.Automation.Text.TextPatternRange> can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container.</span></span>  
  
 <span data-ttu-id="6457a-103">Element <xref:System.Windows.Automation.Text.TextPatternRange> stanie się nieprawidłowy <xref:System.Windows.Automation.TextPattern> ,jeśli<xref:System.Windows.Automation.ValuePattern.SetValue%2A> wystąpi jedna z następujących sytuacji: tekst w kontenerze zmienia się z powodu niektórych działań użytkownika lub metoda jestużywanadoprogramistycznegozmienianiawartościtekstuw<xref:System.Windows.Automation.ValuePattern> <xref:System.Windows.Automation.TextPattern> kontener.</span><span class="sxs-lookup"><span data-stu-id="6457a-103">A <xref:System.Windows.Automation.Text.TextPatternRange> will become invalid if one of the following occurs: the text in the <xref:System.Windows.Automation.TextPattern> container changes because of some user activity, or the <xref:System.Windows.Automation.ValuePattern.SetValue%2A> method of <xref:System.Windows.Automation.ValuePattern> is used to programmatically change the value of the text in the <xref:System.Windows.Automation.TextPattern> container.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-control-patterns-overview.md"><span data-ttu-id="6457a-104">Wzorce formantów automatyzacji interfejsu użytkownika — omówienie</span><span class="sxs-lookup"><span data-stu-id="6457a-104">UI Automation Control Patterns Overview</span></span></related>
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-control-patterns-for-clients.md"><span data-ttu-id="6457a-105">Wzorce kontrolek automatyzacji interfejsu użytkownika dla klientów</span><span class="sxs-lookup"><span data-stu-id="6457a-105">UI Automation Control Patterns for Clients</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="AddToSelection">
      <MemberSignature Language="C#" Value="public void AddToSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToSelection();" />
      <MemberSignature Language="F#" Value="member this.AddToSelection : unit -&gt; unit" Usage="textPatternRange.AddToSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6457a-106">Dodaje do kolekcji wyróżnionego tekstu w kontenerze tekstu, który obsługuje wiele rozłączonych opcji.</span><span class="sxs-lookup"><span data-stu-id="6457a-106">Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6457a-107">Punkt wstawiania tekstu jest przenoszony do obszaru nowego zaznaczenia.</span><span class="sxs-lookup"><span data-stu-id="6457a-107">The text insertion point moves to the area of the new selection.</span></span>  
  
 <span data-ttu-id="6457a-108">Podawanie wygenerowanego zakresu tekstu powoduje przeniesienie punktu wstawiania.</span><span class="sxs-lookup"><span data-stu-id="6457a-108">Providing a degenerate text range moves the insertion point.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6457a-109">Jeśli dostawca tekstu nie obsługuje wielu rozłączonych opcji (na przykład <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> musi mieć <see langword="Multiple" />wartość).</span><span class="sxs-lookup"><span data-stu-id="6457a-109">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of <see langword="Multiple" />).</span></span></exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.Select" />
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Windows.Automation.Text.TextPatternRange" Usage="textPatternRange.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6457a-110">Pobiera nowy <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> identyczny do oryginału <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> i dziedziczy wszystkie właściwości oryginalnego.</span><span class="sxs-lookup"><span data-stu-id="6457a-110">Retrieves a new <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> identical to the original <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> and inheriting all properties of the original.</span></span></summary>
        <returns><span data-ttu-id="6457a-111">Nowy zakres tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-111">The new text range.</span></span> <span data-ttu-id="6457a-112">Odwołanie o wartości null<see langword="Nothing" /> (w Visual Basic) nigdy nie jest zwracane.</span><span class="sxs-lookup"><span data-stu-id="6457a-112">A null reference (<see langword="Nothing" /> in Visual Basic) is never returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6457a-113">Alternatywnie możesz utworzyć nowy <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> <xref:System.Windows.Automation.TextPattern> z i przenieść dwa punkty końcowe, aby odpowiadały punktom końcowym oryginalnego zakresu tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-113">Alternatively, create a new <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> from the <xref:System.Windows.Automation.TextPattern> and move the two endpoints to correspond with the endpoints of the original text range.</span></span>  
  
 <span data-ttu-id="6457a-114">Nowy zakres można manipulować niezależnie od oryginalnego.</span><span class="sxs-lookup"><span data-stu-id="6457a-114">The new range can be manipulated independently from the original.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1060](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1060)]  
  
 [!code-vb[UIATextPattern_snip#2060](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2060)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <altmember cref="M:System.Windows.Automation.TextPattern.RangeFromChild(System.Windows.Automation.AutomationElement)" />
        <altmember cref="M:System.Windows.Automation.TextPattern.RangeFromPoint(System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public bool Compare (System.Windows.Automation.Text.TextPatternRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Compare(class System.Windows.Automation.Text.TextPatternRange range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (range As TextPatternRange) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Compare(System::Windows::Automation::Text::TextPatternRange ^ range);" />
      <MemberSignature Language="F#" Value="member this.Compare : System.Windows.Automation.Text.TextPatternRange -&gt; bool" Usage="textPatternRange.Compare range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Windows.Automation.Text.TextPatternRange" />
      </Parameters>
      <Docs>
        <param name="range"><span data-ttu-id="6457a-115">Zakres tekstu do porównania.</span><span class="sxs-lookup"><span data-stu-id="6457a-115">A text range to compare.</span></span></param>
        <summary><span data-ttu-id="6457a-116">Zwraca wartość wskazującą, czy zakres <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> (punkt końcowy do <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> punktu końcowego) zakresu tekstu jest taki sam jak inny zakres tekstu. <see cref="T:System.Boolean" /></span><span class="sxs-lookup"><span data-stu-id="6457a-116">Returns a <see cref="T:System.Boolean" /> value indicating whether the span (the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> endpoint to the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint) of a text range is the same as another text range.</span></span></summary>
        <returns><span data-ttu-id="6457a-117"><see langword="true" />Jeśli zakres obu zakresów tekstu jest identyczny; w <see langword="false" />przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="6457a-117"><see langword="true" /> if the span of both text ranges is identical; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1061](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1061)]  
  
 [!code-vb[UIATextPattern_snip#2061](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2061)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6457a-118">Jeśli porównywany zakres nie pochodzi od tego samego dostawcy tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-118">If the range being compared does not come from the same text provider.</span></span></exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="CompareEndpoints">
      <MemberSignature Language="C#" Value="public int CompareEndpoints (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareEndpoints(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Text.TextPatternRange targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareEndpoints (endpoint As TextPatternRangeEndpoint, targetRange As TextPatternRange, targetEndpoint As TextPatternRangeEndpoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareEndpoints(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextPatternRange ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="F#" Value="member this.CompareEndpoints : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextPatternRange * System.Windows.Automation.Text.TextPatternRangeEndpoint -&gt; int" Usage="textPatternRange.CompareEndpoints (endpoint, targetRange, targetEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Text.TextPatternRange" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="6457a-119">Punkt końcowy <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> obiektu wywołującego lub.<see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /></span><span class="sxs-lookup"><span data-stu-id="6457a-119">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the caller.</span></span></param>
        <param name="targetRange"><span data-ttu-id="6457a-120">Zakres docelowy do porównania.</span><span class="sxs-lookup"><span data-stu-id="6457a-120">The target range for comparison.</span></span></param>
        <param name="targetEndpoint"><span data-ttu-id="6457a-121">Punkt końcowy <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" />lubelementdocelowy. <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /></span><span class="sxs-lookup"><span data-stu-id="6457a-121">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the target.</span></span></param>
        <summary><span data-ttu-id="6457a-122">Zwraca wartość <see cref="T:System.Int32" /> wskazującą, czy dwa zakresy tekstu mają identyczne punkty końcowe.</span><span class="sxs-lookup"><span data-stu-id="6457a-122">Returns an <see cref="T:System.Int32" /> indicating whether two text ranges have identical endpoints.</span></span></summary>
        <returns><span data-ttu-id="6457a-123">Zwraca wartość ujemną, jeśli punkt końcowy obiektu wywołującego występuje wcześniej w tekście niż docelowy punkt końcowy.</span><span class="sxs-lookup"><span data-stu-id="6457a-123">Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.</span></span>  
  
 <span data-ttu-id="6457a-124">Zwraca zero, jeśli punkt końcowy obiektu wywołującego znajduje się w tej samej lokalizacji co docelowy punkt końcowy.</span><span class="sxs-lookup"><span data-stu-id="6457a-124">Returns zero if the caller's endpoint is at the same location as the target endpoint.</span></span>  
  
 <span data-ttu-id="6457a-125">Zwraca wartość dodatnią, jeśli punkt końcowy obiektu wywołującego występuje w dalszej części tekstu niż docelowy punkt końcowy.</span><span class="sxs-lookup"><span data-stu-id="6457a-125">Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6457a-126">Porównując początkową i końcową punkty końcowe tego samego zakresu tekstu, można ustalić, czy zakres tekstu jest wygenerowany lub czy punkty końcowe są w kolejności logicznego przepływu tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-126">By comparing the starting and ending endpoints of the same text range you can identify if a text range is degenerate or if the endpoints are in the order of logical text flow.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1062](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1062)]  
  
 [!code-vb[UIATextPattern_snip#2062](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2062)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6457a-127">Jeśli zakres jest odwołaniem null (<see langword="Nothing" /> w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6457a-127">If range is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6457a-128">Jeśli zakres pochodzi z innego kontenera.</span><span class="sxs-lookup"><span data-stu-id="6457a-128">If range is from another container.</span></span></exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="ExpandToEnclosingUnit">
      <MemberSignature Language="C#" Value="public void ExpandToEnclosingUnit (System.Windows.Automation.Text.TextUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExpandToEnclosingUnit(valuetype System.Windows.Automation.Text.TextUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExpandToEnclosingUnit (unit As TextUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExpandToEnclosingUnit(System::Windows::Automation::Text::TextUnit unit);" />
      <MemberSignature Language="F#" Value="member this.ExpandToEnclosingUnit : System.Windows.Automation.Text.TextUnit -&gt; unit" Usage="textPatternRange.ExpandToEnclosingUnit unit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
      </Parameters>
      <Docs>
        <param name="unit"><span data-ttu-id="6457a-129">Jednostka tekstowa.</span><span class="sxs-lookup"><span data-stu-id="6457a-129">The textual unit.</span></span></param>
        <summary><span data-ttu-id="6457a-130">Rozwija zakres tekstu do określonego <see cref="T:System.Windows.Automation.Text.TextUnit" />.</span><span class="sxs-lookup"><span data-stu-id="6457a-130">Expands the text range to the specified <see cref="T:System.Windows.Automation.Text.TextUnit" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6457a-131">Jeśli zakres jest już dokładną ilością określonych jednostek, pozostaje niezmieniona.</span><span class="sxs-lookup"><span data-stu-id="6457a-131">If the range is already an exact quantity of the specified units then it remains unchanged.</span></span>  
  
 <span data-ttu-id="6457a-132"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> Aby metoda została wykonana pomyślnie, sekwencja akcji jest wykonywana w tle.</span><span class="sxs-lookup"><span data-stu-id="6457a-132">In order for the <xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> method to execute successfully, a sequence of actions is performed behind the scenes.</span></span>  
  
1.  <span data-ttu-id="6457a-133">Zakres tekstu jest znormalizowany; oznacza to, że zakres tekstu jest zwijany do zakresu degeneracji w <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> punkcie końcowym, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> dzięki czemu punkt końcowy jest zbędny.</span><span class="sxs-lookup"><span data-stu-id="6457a-133">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, making the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="6457a-134">Ten krok jest niezbędny do usunięcia niejednoznaczności w sytuacjach, gdy zakres tekstu `unit` rozciąga się na granice, na przykład "{a} [https://www.microsoft.com/](https://www.microsoft.com/) RL jest osadzony w tekście" gdzie "{" i "}" to punkty końcowe zakresu tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-134">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="6457a-135">Zakres wyników jest przenoszony do tyłu <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> na początku żądanej `unit` granicy.</span><span class="sxs-lookup"><span data-stu-id="6457a-135">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="6457a-136">Zakres jest przenoszony do przodu lub do tyłu <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> w kolejności przez żądaną `unit` liczbę granic.</span><span class="sxs-lookup"><span data-stu-id="6457a-136">The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries.</span></span>  
  
4.  <span data-ttu-id="6457a-137">Zakres jest następnie rozwinięty z stanu degeneracji przez przeniesienie <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> punktu końcowego przez jedną żądaną `unit` granicę.</span><span class="sxs-lookup"><span data-stu-id="6457a-137">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="6457a-138">![Dopasowanie zakresu według przenoszenia & ExpandToEnclosingUnit] (~/add/media/uia-textpattern-moveandexpand-examples.png "Dopasowanie zakresu według przenoszenia & ExpandToEnclosingUnit")</span><span class="sxs-lookup"><span data-stu-id="6457a-138">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="6457a-139">Przykłady sposobu, w jaki zakres tekstu jest dostosowywany dla operacji Move () i ExpandToEnclosingUnit ()</span><span class="sxs-lookup"><span data-stu-id="6457a-139">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6457a-140">Te kroki są niezbędne, ponieważ są wspólne dla czytnika ekranu, aby odczytać pełny wyraz, zdanie lub cały akapit w punkcie wstawiania lub w dowolnym położeniu kursora wirtualnego.</span><span class="sxs-lookup"><span data-stu-id="6457a-140">These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.</span></span>  
  
 <span data-ttu-id="6457a-141"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A>uwzględnia tekst ukryty i widoczny.</span><span class="sxs-lookup"><span data-stu-id="6457a-141"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="6457a-142">Klient automatyzacji interfejsu użytkownika może sprawdzić <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> widoczność tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-142">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="6457a-143"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A>odnosi się do najbliższej największego <xref:System.Windows.Automation.Text.TextUnit> obsługiwanej, jeśli dana <xref:System.Windows.Automation.Text.TextUnit> kontrolka nie jest obsługiwana przez formant.</span><span class="sxs-lookup"><span data-stu-id="6457a-143"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="6457a-144">Poniżej wymieniono kolejność od najmniejszej jednostki do największej.</span><span class="sxs-lookup"><span data-stu-id="6457a-144">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1063](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1063)]  
  
 [!code-vb[UIATextPattern_snip#2063](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2063)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="FindAttribute">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange FindAttribute (System.Windows.Automation.AutomationTextAttribute attribute, object value, bool backward);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange FindAttribute(class System.Windows.Automation.AutomationTextAttribute attribute, object value, bool backward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAttribute (attribute As AutomationTextAttribute, value As Object, backward As Boolean) As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ FindAttribute(System::Windows::Automation::AutomationTextAttribute ^ attribute, System::Object ^ value, bool backward);" />
      <MemberSignature Language="F#" Value="member this.FindAttribute : System.Windows.Automation.AutomationTextAttribute * obj * bool -&gt; System.Windows.Automation.Text.TextPatternRange" Usage="textPatternRange.FindAttribute (attribute, value, backward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Windows.Automation.AutomationTextAttribute" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="backward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attribute"><span data-ttu-id="6457a-145">Atrybut, który ma zostać wyszukany.</span><span class="sxs-lookup"><span data-stu-id="6457a-145">The attribute to search for.</span></span></param>
        <param name="value"><span data-ttu-id="6457a-146">Wartość atrybutu do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="6457a-146">The attribute value to search for.</span></span> <span data-ttu-id="6457a-147">Ta wartość musi być zgodna z typem określonym dla atrybutu.</span><span class="sxs-lookup"><span data-stu-id="6457a-147">This value must match the type specified for the attribute.</span></span></param>
        <param name="backward"><span data-ttu-id="6457a-148"><see langword="true" />Jeśli ostatni zachodzący zakres tekstu powinien być zwracany zamiast pierwszego; w <see langword="false" />przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="6457a-148"><see langword="true" /> if the last occurring text range should be returned instead of the first; otherwise <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6457a-149">Zwraca podzestaw zakresu tekstu, który ma określoną wartość atrybutu.</span><span class="sxs-lookup"><span data-stu-id="6457a-149">Returns a text range subset that has the specified attribute value.</span></span></summary>
        <returns><span data-ttu-id="6457a-150">Zakres tekstu mający pasujący atrybut i wartość atrybutu; w przeciwnym razie<see langword="Nothing" /> wartość null (w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6457a-150">A text range having a matching attribute and attribute value; otherwise null (<see langword="Nothing" /> in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6457a-151">Nie ma rozróżnienia między ukrytym i widocznym tekstem.</span><span class="sxs-lookup"><span data-stu-id="6457a-151">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="6457a-152">Klienci automatyzacji interfejsu użytkownika mogą <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> używać do sprawdzania widoczności tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-152">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6457a-153">Użyj <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> , aby przeszukać cały dokument.</span><span class="sxs-lookup"><span data-stu-id="6457a-153">Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1064](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1064)]  
  
 [!code-vb[UIATextPattern_snip#2064](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2064)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.TextPattern" />
      </Docs>
    </Member>
    <Member MemberName="FindText">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange FindText (string text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange FindText(string text, bool backward, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindText (text As String, backward As Boolean, ignoreCase As Boolean) As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ FindText(System::String ^ text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="member this.FindText : string * bool * bool -&gt; System.Windows.Automation.Text.TextPatternRange" Usage="textPatternRange.FindText (text, backward, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="backward" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="6457a-154">Ciąg tekstowy do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="6457a-154">The text string to search for.</span></span></param>
        <param name="backward"><span data-ttu-id="6457a-155"><see langword="true" />Jeśli ostatni zachodzący zakres tekstu powinien być zwracany zamiast pierwszego; w <see langword="false" />przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="6457a-155"><see langword="true" /> if the last occurring text range should be returned instead of the first; otherwise <see langword="false" />.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="6457a-156"><see langword="true" />Jeśli przypadek powinien być ignorowany; w <see langword="false" />przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="6457a-156"><see langword="true" /> if case should be ignored; otherwise <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6457a-157">Zwraca podzestaw zakresu tekstu, który zawiera określony tekst.</span><span class="sxs-lookup"><span data-stu-id="6457a-157">Returns a text range subset that contains the specified text.</span></span></summary>
        <returns><span data-ttu-id="6457a-158">Zakres tekstu pasujący do określonego tekstu; w przeciwnym razie<see langword="Nothing" /> wartość null (w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6457a-158">A text range matching the specified text; otherwise null (<see langword="Nothing" /> in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6457a-159">Nie ma rozróżnienia między ukrytym i widocznym tekstem.</span><span class="sxs-lookup"><span data-stu-id="6457a-159">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="6457a-160">Klienci automatyzacji interfejsu użytkownika mogą <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> używać do sprawdzania widoczności tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-160">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6457a-161">Użyj <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> , aby przeszukać cały dokument.</span><span class="sxs-lookup"><span data-stu-id="6457a-161">Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1065](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1065)]  
  
 [!code-vb[UIATextPattern_snip#2065](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2065)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.TextPattern" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeValue">
      <MemberSignature Language="C#" Value="public object GetAttributeValue (System.Windows.Automation.AutomationTextAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetAttributeValue(class System.Windows.Automation.AutomationTextAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttributeValue (attribute As AutomationTextAttribute) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetAttributeValue(System::Windows::Automation::AutomationTextAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeValue : System.Windows.Automation.AutomationTextAttribute -&gt; obj" Usage="textPatternRange.GetAttributeValue attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Windows.Automation.AutomationTextAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute"><span data-ttu-id="6457a-162">Atrybut tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-162">The text attribute.</span></span></param>
        <summary><span data-ttu-id="6457a-163">Zwraca wartość określonego atrybutu w całym zakresie tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-163">Returns the value of the specified attribute across the entire text range.</span></span></summary>
        <returns><span data-ttu-id="6457a-164">Zwraca wartość określonego atrybutu.</span><span class="sxs-lookup"><span data-stu-id="6457a-164">Returns the value of the specified attribute.</span></span> <span data-ttu-id="6457a-165">Na przykład GetAttributeValue (TextPattern. FontNameAttribute) zwróci ciąg, który reprezentuje nazwę czcionki, jeśli unikatowa, z zakresu tekstu podczas GetAttributeValue (TextPattern. iskursywattribute) zwróci wartość logiczną.</span><span class="sxs-lookup"><span data-stu-id="6457a-165">For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name, if unique, of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a boolean.</span></span>  
  
<span data-ttu-id="6457a-166">Zwraca <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> czy wartość określonego atrybutu jest różna w zakresie tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-166">Returns <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> if the value of the specified attribute varies over the text range.</span></span>  
  
<span data-ttu-id="6457a-167">Zwraca <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> czy określony atrybut nie jest obsługiwany przez dostawcę lub kontrolkę.</span><span class="sxs-lookup"><span data-stu-id="6457a-167">Returns <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> if the specified attribute is not supported by the provider or the control.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6457a-168">Nie ma rozróżnienia między ukrytym i widocznym tekstem.</span><span class="sxs-lookup"><span data-stu-id="6457a-168">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="6457a-169">Klienci automatyzacji interfejsu użytkownika mogą <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> używać do sprawdzania widoczności tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-169">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1066](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1066)]  
  
 [!code-vb[UIATextPattern_snip#2066](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2066)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6457a-170">Jeśli określony atrybut jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="6457a-170">If the specified attribute is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetBoundingRectangles">
      <MemberSignature Language="C#" Value="public System.Windows.Rect[] GetBoundingRectangles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Rect[] GetBoundingRectangles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoundingRectangles () As Rect()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Rect&gt; ^ GetBoundingRectangles();" />
      <MemberSignature Language="F#" Value="member this.GetBoundingRectangles : unit -&gt; System.Windows.Rect[]" Usage="textPatternRange.GetBoundingRectangles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6457a-171">Pobiera kolekcję prostokątów ograniczających dla każdego pełnego lub częściowo widocznego wiersza tekstu w zakresie tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-171">Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</span></span></summary>
        <returns><span data-ttu-id="6457a-172">Tablica powiązanych prostokątów dla każdego pełnego lub częściowego wiersza tekstu w zakresie tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-172">An array of bounding rectangles for each full or partial line of text in a text range.</span></span>  
  
 <span data-ttu-id="6457a-173">Pusta tablica dla wygenerowanego zakresu tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-173">An empty array for a degenerate text range.</span></span>  
  
 <span data-ttu-id="6457a-174">Pusta tablica dla zakresu tekstu, który ma współrzędne ekranu, umieszczając je całkowicie poza ekranem, przewijanie w widoku lub zasłonięte przez nakładające się okno.</span><span class="sxs-lookup"><span data-stu-id="6457a-174">An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1067](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1067)]  
  
 [!code-vb[UIATextPattern_snip#2067](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2067)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElement[] GetChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationElement[] GetChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetChildren" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildren () As AutomationElement()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::AutomationElement ^&gt; ^ GetChildren();" />
      <MemberSignature Language="F#" Value="member this.GetChildren : unit -&gt; System.Windows.Automation.AutomationElement[]" Usage="textPatternRange.GetChildren " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElement[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6457a-175">Pobiera kolekcję wszystkich obiektów osadzonych, które mieszczą się w zakresie tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-175">Retrieves a collection of all embedded objects that fall within the text range.</span></span></summary>
        <returns><span data-ttu-id="6457a-176">Kolekcja wszystkich obiektów podrzędnych, które mieszczą się w zakresie.</span><span class="sxs-lookup"><span data-stu-id="6457a-176">A collection of all child objects that fall within the range.</span></span> <span data-ttu-id="6457a-177">Elementy podrzędne, które pokrywają się z zakresem, ale nie są w całości uwzględniane w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="6457a-177">Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.</span></span>  
  
 <span data-ttu-id="6457a-178">Zwraca pustą kolekcję, jeśli nie ma żadnych obiektów podrzędnych.</span><span class="sxs-lookup"><span data-stu-id="6457a-178">Returns an empty collection if there are no child objects.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#StartTarget](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#starttarget)]
 [!code-vb[UIATextPattern_snip#StartTarget](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#starttarget)]  
[!code-csharp[UIATextPattern_snip#GetTextElement](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#gettextelement)]
[!code-vb[UIATextPattern_snip#GetTextElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#gettextelement)]  
[!code-csharp[UIATextPattern_snip#GetEmbeddedObjects](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#getembeddedobjects)]
[!code-vb[UIATextPattern_snip#GetEmbeddedObjects](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#getembeddedobjects)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnclosingElement">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElement GetEnclosingElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationElement GetEnclosingElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnclosingElement () As AutomationElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::AutomationElement ^ GetEnclosingElement();" />
      <MemberSignature Language="F#" Value="member this.GetEnclosingElement : unit -&gt; System.Windows.Automation.AutomationElement" Usage="textPatternRange.GetEnclosingElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6457a-179">Zwraca wewnętrzna <see cref="T:System.Windows.Automation.AutomationElement" /> , która jest otaczająca zakresem tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-179">Returns the innermost <see cref="T:System.Windows.Automation.AutomationElement" /> that encloses the text range.</span></span></summary>
        <returns><span data-ttu-id="6457a-180">Wewnętrzny element otaczający obiekt wywołujący.</span><span class="sxs-lookup"><span data-stu-id="6457a-180">The innermost element enclosing the caller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6457a-181">Otaczający <xref:System.Windows.Automation.AutomationElement>, zazwyczaj dostawca tekstu, który dostarcza zakres tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-181">The enclosing <xref:System.Windows.Automation.AutomationElement>, typically the text provider that supplies the text range.</span></span> <span data-ttu-id="6457a-182">Jeśli jednak dostawca tekstu obsługuje elementy podrzędne, takie jak tabele lub hiperłącza, element otaczający może być obiektem podrzędnym dostawcy tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-182">However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1069](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1069)]  
  
 [!code-vb[UIATextPattern_snip#2069](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2069)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetText">
      <MemberSignature Language="C#" Value="public string GetText (int maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetText(int32 maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetText (maxLength As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetText(int maxLength);" />
      <MemberSignature Language="F#" Value="member this.GetText : int -&gt; string" Usage="textPatternRange.GetText maxLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxLength"><span data-ttu-id="6457a-183">Maksymalna długość ciągu do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="6457a-183">The maximum length of the string to return.</span></span> <span data-ttu-id="6457a-184">Użyj <c>-1</c> , jeśli nie jest wymagany żaden limit.</span><span class="sxs-lookup"><span data-stu-id="6457a-184">Use <c>-1</c> if no limit is required.</span></span></param>
        <summary><span data-ttu-id="6457a-185">Zwraca zwykły tekst zakresu tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-185">Returns the plain text of the text range.</span></span></summary>
        <returns><span data-ttu-id="6457a-186">Zwykły tekst zakresu tekstu, prawdopodobnie obcięty w określonym <paramref name="maxLength" />.</span><span class="sxs-lookup"><span data-stu-id="6457a-186">The plain text of the text range, possibly truncated at the specified <paramref name="maxLength" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6457a-187"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A>uwzględnia tekst ukryty i widoczny.</span><span class="sxs-lookup"><span data-stu-id="6457a-187"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="6457a-188">Klient automatyzacji interfejsu użytkownika może sprawdzić <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> widoczność tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-188">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="6457a-189">Jeśli `maxLength` jest większa niż długość zakresu tekstu obiektu wywołującego, zwracany ciąg będzie zwykłym tekstem zakresu tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-189">If `maxLength` is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.</span></span>  
  
 <span data-ttu-id="6457a-190"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A>nie wpłynie to na kolejność punktów końcowych w przepływie tekstu; zawsze będzie zwracany tekst między początkowym i końcowym punktem końcowym zakresu tekstu w kolejności tekstu logicznego.</span><span class="sxs-lookup"><span data-stu-id="6457a-190"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1070](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1070)]  
  
 [!code-vb[UIATextPattern_snip#2070](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2070)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6457a-191">Jeśli <paramref name="maxLength" /> jest mniejsza niż-1.</span><span class="sxs-lookup"><span data-stu-id="6457a-191">If <paramref name="maxLength" /> is less than -1.</span></span></exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public int Move (System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Move(valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Move (unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Move(System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberSignature Language="F#" Value="member this.Move : System.Windows.Automation.Text.TextUnit * int -&gt; int" Usage="textPatternRange.Move (unit, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unit"><span data-ttu-id="6457a-192">Granica jednostki tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-192">The text unit boundary.</span></span></param>
        <param name="count"><span data-ttu-id="6457a-193">Liczba jednostek tekstu do przeniesienia.</span><span class="sxs-lookup"><span data-stu-id="6457a-193">The number of text units to move.</span></span> <span data-ttu-id="6457a-194">Wartość dodatnia przesuwa zakres tekstu do przodu, a wartość ujemna przesuwa zakres tekstu do tyłu, a 0 nie ma żadnego efektu.</span><span class="sxs-lookup"><span data-stu-id="6457a-194">A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</span></span></param>
        <summary><span data-ttu-id="6457a-195">Przenosi zakres tekstu o określoną liczbę jednostek tekstowych.</span><span class="sxs-lookup"><span data-stu-id="6457a-195">Moves the text range the specified number of text units.</span></span></summary>
        <returns><span data-ttu-id="6457a-196">Liczba rzeczywiście przenoszonych jednostek.</span><span class="sxs-lookup"><span data-stu-id="6457a-196">The number of units actually moved.</span></span> <span data-ttu-id="6457a-197">Może to być mniejsze niż żądana liczba, jeśli jeden z nowych punktów końcowych zakresu tekstu jest większy lub mniejszy od <see cref="P:System.Windows.Automation.TextPattern.DocumentRange" /> punktów końcowych.</span><span class="sxs-lookup"><span data-stu-id="6457a-197">This can be less than the number requested if either of the new text range endpoints is greater than or less than the <see cref="P:System.Windows.Automation.TextPattern.DocumentRange" /> endpoints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6457a-198">Gdy konieczne jest przechodzenie zawartości zakresu tekstu, seria kroków jest uwzględniana w <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> tle, aby metoda została pomyślnie wykonana.</span><span class="sxs-lookup"><span data-stu-id="6457a-198">When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="6457a-199">Zakres tekstu jest znormalizowany; oznacza to, że zakres tekstu jest zwijany do zakresu degeneracji w <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> punkcie końcowym, co <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> sprawia, że punkt końcowy jest zbędny.</span><span class="sxs-lookup"><span data-stu-id="6457a-199">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="6457a-200">Ten krok jest niezbędny do usunięcia niejednoznaczności w sytuacjach, gdy zakres tekstu `unit` rozciąga się na granice, na przykład "{a} [https://www.microsoft.com/](https://www.microsoft.com/) RL jest osadzony w tekście" gdzie "{" i "}" to punkty końcowe zakresu tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-200">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="6457a-201">Zakres wyników jest przenoszony do tyłu <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> na początku żądanej `unit` granicy.</span><span class="sxs-lookup"><span data-stu-id="6457a-201">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="6457a-202">Zakres jest przenoszony do przodu lub do tyłu <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> w kolejności przez żądaną `unit` liczbę granic.</span><span class="sxs-lookup"><span data-stu-id="6457a-202">The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries.</span></span>  
  
4.  <span data-ttu-id="6457a-203">Zakres jest następnie rozwinięty z stanu degeneracji przez przeniesienie <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> punktu końcowego przez jedną żądaną `unit` granicę.</span><span class="sxs-lookup"><span data-stu-id="6457a-203">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="6457a-204">![Dopasowanie zakresu według przenoszenia & ExpandToEnclosingUnit] (~/add/media/uia-textpattern-moveandexpand-examples.png "Dopasowanie zakresu według przenoszenia & ExpandToEnclosingUnit")</span><span class="sxs-lookup"><span data-stu-id="6457a-204">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="6457a-205">Przykłady sposobu, w jaki zakres tekstu jest dostosowywany dla operacji Move () i ExpandToEnclosingUnit ()</span><span class="sxs-lookup"><span data-stu-id="6457a-205">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
 <span data-ttu-id="6457a-206">Zawartość tekstowa (lub tekst wewnętrzny) kontenera tekstu i osadzonego obiektu, takiego jak hiperłącze lub komórka tabeli, jest udostępniana jako pojedynczy, ciągły strumień tekstowy w widoku kontrolki i widok [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] zawartości drzewa; granice obiektów są ignorowane.</span><span class="sxs-lookup"><span data-stu-id="6457a-206">The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.</span></span> <span data-ttu-id="6457a-207">Jeśli klient automatyzacji interfejsu użytkownika Pobiera tekst służący do przeszukiwania, interpretacji lub analizy w jakiś sposób, zakres tekstu należy sprawdzać pod kątem specjalnych przypadków, takich jak tabela z zawartością tekstową lub innymi osadzonymi obiektami.</span><span class="sxs-lookup"><span data-stu-id="6457a-207">If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</span></span> <span data-ttu-id="6457a-208">Można to osiągnąć, wywołując <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> do <xref:System.Windows.Automation.AutomationElement> uzyskania dla każdego osadzonego obiektu, a następnie wywołując <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> do uzyskania zakresu tekstu dla każdego elementu. jest to wykonywane cyklicznie do momentu pobrania całej zawartości tekstowej.</span><span class="sxs-lookup"><span data-stu-id="6457a-208">This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</span></span>  
  
 <span data-ttu-id="6457a-209">![Zakresy tekstu łączone przez obiekty osadzone.] (~/add/media/uia-textpattern-embeddedobjecttextranges.png "Zakresy tekstu łączone przez obiekty osadzone.")</span><span class="sxs-lookup"><span data-stu-id="6457a-209">![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png "Text ranges spanned by embedded objects.")</span></span>  
<span data-ttu-id="6457a-210">Przykładowy strumień tekstowy z obiektami osadzonymi i zakresem ich zakresu</span><span class="sxs-lookup"><span data-stu-id="6457a-210">Example of a text stream with embedded objects and their range spans</span></span>  
  
 <span data-ttu-id="6457a-211"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A>uwzględnia tekst ukryty i widoczny.</span><span class="sxs-lookup"><span data-stu-id="6457a-211"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="6457a-212">Klient automatyzacji interfejsu użytkownika może sprawdzić <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> widoczność tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-212">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="6457a-213"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A>odnosi się do najbliższej największego <xref:System.Windows.Automation.Text.TextUnit> obsługiwanej, jeśli dana <xref:System.Windows.Automation.Text.TextUnit> kontrolka nie jest obsługiwana przez formant.</span><span class="sxs-lookup"><span data-stu-id="6457a-213"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="6457a-214">Poniżej wymieniono kolejność od najmniejszej jednostki do największej.</span><span class="sxs-lookup"><span data-stu-id="6457a-214">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
> [!NOTE]
>  <span data-ttu-id="6457a-215">Tekst nie jest zmieniany w żaden sposób, ponieważ zakres tekstu rozciąga się na inną część tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-215">The text is not altered in any way as the text range just spans a different part of the text.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#StartTarget](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#starttarget)]
 [!code-vb[UIATextPattern_snip#StartTarget](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#starttarget)]  
[!code-csharp[UIATextPattern_snip#GetTextElement](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#gettextelement)]
[!code-vb[UIATextPattern_snip#GetTextElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#gettextelement)]  
[!code-csharp[UIATextPattern_snip#MoveSelection](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#moveselection)]
[!code-vb[UIATextPattern_snip#MoveSelection](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#moveselection)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByRange">
      <MemberSignature Language="C#" Value="public void MoveEndpointByRange (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveEndpointByRange(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Text.TextPatternRange targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveEndpointByRange (endpoint As TextPatternRangeEndpoint, targetRange As TextPatternRange, targetEndpoint As TextPatternRangeEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveEndpointByRange(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextPatternRange ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="F#" Value="member this.MoveEndpointByRange : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextPatternRange * System.Windows.Automation.Text.TextPatternRangeEndpoint -&gt; unit" Usage="textPatternRange.MoveEndpointByRange (endpoint, targetRange, targetEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Text.TextPatternRange" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="6457a-216">Punkt końcowy do przeniesienia.</span><span class="sxs-lookup"><span data-stu-id="6457a-216">The endpoint to move.</span></span></param>
        <param name="targetRange"><span data-ttu-id="6457a-217">Inny zakres od tego samego dostawcy tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-217">Another range from the same text provider.</span></span></param>
        <param name="targetEndpoint"><span data-ttu-id="6457a-218">Punkt końcowy w innym zakresie.</span><span class="sxs-lookup"><span data-stu-id="6457a-218">An endpoint on the other range.</span></span></param>
        <summary><span data-ttu-id="6457a-219">Przenosi jeden punkt końcowy zakresu tekstu do określonego punktu końcowego drugiego zakresu tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-219">Moves one endpoint of a text range to the specified endpoint of a second text range.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6457a-220">Jeśli przenoszony punkt końcowy przekracza inny punkt końcowy tego samego zakresu tekstu, to drugi punkt końcowy jest przenoszony również, co skutkuje wygenerowaniem zakresu i zapewnieniem prawidłowej kolejności punktów końcowych (to znaczy <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> , jest zawsze mniejsze lub równe <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).</span><span class="sxs-lookup"><span data-stu-id="6457a-220">If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> is always less than or equal to <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1072](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1072)]  
  
 [!code-vb[UIATextPattern_snip#2072](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2072)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByUnit">
      <MemberSignature Language="C#" Value="public int MoveEndpointByUnit (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 MoveEndpointByUnit(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveEndpointByUnit (endpoint As TextPatternRangeEndpoint, unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int MoveEndpointByUnit(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberSignature Language="F#" Value="member this.MoveEndpointByUnit : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextUnit * int -&gt; int" Usage="textPatternRange.MoveEndpointByUnit (endpoint, unit, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="6457a-221">Punkt końcowy do przeniesienia.</span><span class="sxs-lookup"><span data-stu-id="6457a-221">The endpoint to move.</span></span></param>
        <param name="unit"><span data-ttu-id="6457a-222">Jednostka tekstowa do przeniesienia.</span><span class="sxs-lookup"><span data-stu-id="6457a-222">The textual unit for moving.</span></span></param>
        <param name="count"><span data-ttu-id="6457a-223">Liczba jednostek do przeniesienia.</span><span class="sxs-lookup"><span data-stu-id="6457a-223">The number of units to move.</span></span> <span data-ttu-id="6457a-224">Liczba dodatnia przesuwa punkt końcowy do przodu.</span><span class="sxs-lookup"><span data-stu-id="6457a-224">A positive count moves the endpoint forward.</span></span> <span data-ttu-id="6457a-225">Ujemna liczba jest przesuwana do tyłu.</span><span class="sxs-lookup"><span data-stu-id="6457a-225">A negative count moves backward.</span></span> <span data-ttu-id="6457a-226">Liczba 0 nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="6457a-226">A count of 0 has no effect.</span></span></param>
        <summary><span data-ttu-id="6457a-227">Przenosi jeden punkt końcowy zakresu tekstu określoną liczbę elementów <see cref="T:System.Windows.Automation.Text.TextUnit" />w zakresie dokumentu.</span><span class="sxs-lookup"><span data-stu-id="6457a-227">Moves one endpoint of the text range the specified number of <see cref="T:System.Windows.Automation.Text.TextUnit" />s within the document range.</span></span></summary>
        <returns><span data-ttu-id="6457a-228">Liczba faktycznie przenoszonych jednostek, które mogą być mniejsze niż żądana liczba, jeśli przeniesienie punktu końcowego zostanie uruchomione na początku lub na końcu dokumentu.</span><span class="sxs-lookup"><span data-stu-id="6457a-228">The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6457a-229">Gdy konieczne jest przechodzenie zawartości zakresu tekstu, seria kroków jest uwzględniana w <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> tle, aby metoda została pomyślnie wykonana.</span><span class="sxs-lookup"><span data-stu-id="6457a-229">When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="6457a-230">Zakres tekstu jest znormalizowany; oznacza to, że zakres tekstu jest zwijany do zakresu degeneracji w <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> punkcie końcowym, co <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> sprawia, że punkt końcowy jest zbędny.</span><span class="sxs-lookup"><span data-stu-id="6457a-230">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="6457a-231">Ten krok jest niezbędny do usunięcia niejednoznaczności w sytuacjach, gdy zakres tekstu `unit` rozciąga się na granice, na przykład "{a} [https://www.microsoft.com/](https://www.microsoft.com/) RL jest osadzony w tekście" gdzie "{" i "}" to punkty końcowe zakresu tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-231">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="6457a-232">Zakres wyników jest przenoszony do tyłu <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> na początku żądanej `unit` granicy.</span><span class="sxs-lookup"><span data-stu-id="6457a-232">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="6457a-233">Zakres jest następnie rozwinięty z stanu degeneracji przez przeniesienie <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> punktu końcowego przez jedną żądaną `unit` granicę.</span><span class="sxs-lookup"><span data-stu-id="6457a-233">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="6457a-234">![Dopasowanie zakresu według przenoszenia & ExpandToEnclosingUnit] (~/add/media/uia-textpattern-moveandexpand-examples.png "Dopasowanie zakresu według przenoszenia & ExpandToEnclosingUnit")</span><span class="sxs-lookup"><span data-stu-id="6457a-234">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="6457a-235">Przykłady sposobu, w jaki zakres tekstu jest dostosowywany dla operacji Move () i ExpandToEnclosingUnit ()</span><span class="sxs-lookup"><span data-stu-id="6457a-235">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
 <span data-ttu-id="6457a-236">Zawartość tekstowa (lub tekst wewnętrzny) kontenera tekstu i osadzonego obiektu, takiego jak hiperłącze lub komórka tabeli, jest udostępniana jako pojedynczy, ciągły strumień tekstowy w widoku kontrolki i widok [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] zawartości drzewa; granice obiektów są ignorowane.</span><span class="sxs-lookup"><span data-stu-id="6457a-236">The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.</span></span> <span data-ttu-id="6457a-237">Jeśli klient automatyzacji interfejsu użytkownika Pobiera tekst służący do przeszukiwania, interpretacji lub analizy w jakiś sposób, zakres tekstu należy sprawdzać pod kątem specjalnych przypadków, takich jak tabela z zawartością tekstową lub innymi osadzonymi obiektami.</span><span class="sxs-lookup"><span data-stu-id="6457a-237">If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</span></span> <span data-ttu-id="6457a-238">Można to osiągnąć, wywołując <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> do <xref:System.Windows.Automation.AutomationElement> uzyskania dla każdego osadzonego obiektu, a następnie wywołując <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> do uzyskania zakresu tekstu dla każdego elementu. jest to wykonywane cyklicznie do momentu pobrania całej zawartości tekstowej.</span><span class="sxs-lookup"><span data-stu-id="6457a-238">This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</span></span>  
  
 <span data-ttu-id="6457a-239">![Zakresy tekstu łączone przez obiekty osadzone.] (~/add/media/uia-textpattern-embeddedobjecttextranges.png "Zakresy tekstu łączone przez obiekty osadzone.")</span><span class="sxs-lookup"><span data-stu-id="6457a-239">![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png "Text ranges spanned by embedded objects.")</span></span>  
<span data-ttu-id="6457a-240">Przykładowy strumień tekstowy z obiektami osadzonymi i zakresem ich zakresu</span><span class="sxs-lookup"><span data-stu-id="6457a-240">Example of a text stream with embedded objects and their range spans</span></span>  
  
 <span data-ttu-id="6457a-241"><xref:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit%2A>odnosi się do najbliższej największego <xref:System.Windows.Automation.Text.TextUnit> obsługiwanej, jeśli dana <xref:System.Windows.Automation.Text.TextUnit> kontrolka nie jest obsługiwana przez formant.</span><span class="sxs-lookup"><span data-stu-id="6457a-241"><xref:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="6457a-242">Poniżej wymieniono kolejność od najmniejszej jednostki do największej.</span><span class="sxs-lookup"><span data-stu-id="6457a-242">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1073](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1073)]  
  
 [!code-vb[UIATextPattern_snip#2073](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2073)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromSelection">
      <MemberSignature Language="C#" Value="public void RemoveFromSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFromSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFromSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFromSelection();" />
      <MemberSignature Language="F#" Value="member this.RemoveFromSelection : unit -&gt; unit" Usage="textPatternRange.RemoveFromSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6457a-243">Usuwa wyróżnioną sekcję tekstu, odpowiadającą zakresowi <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> tekstu wywołującego i <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> punktom końcowym, z istniejącej kolekcji wyróżnionego tekstu w kontenerze tekstu obsługującym wiele rozłączonych opcji.</span><span class="sxs-lookup"><span data-stu-id="6457a-243">Removes a highlighted section of text, corresponding to the calling text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6457a-244">Punkt wstawiania tekstu zostanie przeniesiony do obszaru usuniętego wyróżnienia.</span><span class="sxs-lookup"><span data-stu-id="6457a-244">The text insertion point will move to the area of the removed highlight.</span></span>  
  
 <span data-ttu-id="6457a-245">Podawanie wygenerowanego zakresu tekstu spowoduje przeniesienie punktu wstawiania.</span><span class="sxs-lookup"><span data-stu-id="6457a-245">Providing a degenerate text range will move the insertion point.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6457a-246">Jeśli dostawca tekstu nie obsługuje wielu rozłączonych opcji (na przykład <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> musi mieć <see langword="Multiple" />wartość).</span><span class="sxs-lookup"><span data-stu-id="6457a-246">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of <see langword="Multiple" />).</span></span></exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.Select" />
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (bool alignToTop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollIntoView(bool alignToTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollIntoView (alignToTop As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollIntoView(bool alignToTop);" />
      <MemberSignature Language="F#" Value="member this.ScrollIntoView : bool -&gt; unit" Usage="textPatternRange.ScrollIntoView alignToTop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignToTop" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="alignToTop"><span data-ttu-id="6457a-247"><see langword="true" />Jeśli kontrolka tekstowa powinna zostać przeczyszczona, a zakres tekstu jest opróżniany w górnej części okienka ekranu; <see langword="false" /> Jeśli powinna zostać opróżniona u dołu okienka ekranu.</span><span class="sxs-lookup"><span data-stu-id="6457a-247"><see langword="true" /> if the text control should be scrolled so the text range is flush with the top of the viewport; <see langword="false" /> if it should be flush with the bottom of the viewport.</span></span></param>
        <summary><span data-ttu-id="6457a-248">Powoduje przewijanie kontrolki tekst w pionie, dopóki zakres tekstu będzie widoczny w okienku ekranu.</span><span class="sxs-lookup"><span data-stu-id="6457a-248">Causes the text control to scroll vertically until the text range is visible in the viewport.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6457a-249"><xref:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView%2A>uwzględnia tekst ukryty i widoczny.</span><span class="sxs-lookup"><span data-stu-id="6457a-249"><xref:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="6457a-250">Klient automatyzacji interfejsu użytkownika może sprawdzić <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> widoczność tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-250">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span> <span data-ttu-id="6457a-251">Jeśli zakres tekstu jest ukryty, kontrolka tekst przewinie się tylko wtedy, gdy ukryty tekst ma kotwicę w okienku ekranu.</span><span class="sxs-lookup"><span data-stu-id="6457a-251">If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1074](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1074)]  
  
 [!code-vb[UIATextPattern_snip#2074](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2074)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6457a-252">Jeśli przewijanie nie jest obsługiwane przez formant.</span><span class="sxs-lookup"><span data-stu-id="6457a-252">If scrolling is not supported by the control.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; unit" Usage="textPatternRange.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6457a-253">Podświetla tekst w kontrolce tekstowej odpowiadającej <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> zakresowi <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> tekstu i punktom końcowym.</span><span class="sxs-lookup"><span data-stu-id="6457a-253">Highlights text in the text control corresponding to the text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6457a-254">Jeśli zostanie podany wygenerowany zakres tekstu, punkt wstawiania tekstu zostanie przeniesiony do <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> punktu końcowego zakresu tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-254">If a degenerate text range is provided, the text insertion point will move to the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint of the text range.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1075](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1075)]  
  
 [!code-vb[UIATextPattern_snip#2075](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2075)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6457a-255">Występuje, gdy formant tekstu nie obsługuje wyboru tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-255">Occurs when text selection is not supported by the text control.</span></span></exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
        <altmember cref="M:System.Windows.Automation.SelectionItemPattern.RemoveFromSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="TextPattern">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TextPattern TextPattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.TextPattern TextPattern" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Text.TextPatternRange.TextPattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TextPattern As TextPattern" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TextPattern ^ TextPattern { System::Windows::Automation::TextPattern ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TextPattern : System.Windows.Automation.TextPattern" Usage="System.Windows.Automation.Text.TextPatternRange.TextPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TextPattern</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6457a-256"><see cref="T:System.Windows.Automation.TextPattern" /> Pobiera skojarzoną z zakresem tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-256">Gets the <see cref="T:System.Windows.Automation.TextPattern" /> associated with the text range.</span></span></summary>
        <value><span data-ttu-id="6457a-257">Dostawca tekstu.</span><span class="sxs-lookup"><span data-stu-id="6457a-257">The text provider.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1076](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1076)]  
  
 [!code-vb[UIATextPattern_snip#2076](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2076)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
