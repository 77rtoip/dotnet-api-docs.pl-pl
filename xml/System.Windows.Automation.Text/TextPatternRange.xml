<Type Name="TextPatternRange" FullName="System.Windows.Automation.Text.TextPatternRange">
  <TypeSignature Language="C#" Value="public class TextPatternRange" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextPatternRange extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Text.TextPatternRange" />
  <TypeSignature Language="VB.NET" Value="Public Class TextPatternRange" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextPatternRange" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="eed2b-101">Reprezentuje fragment tekstu ciągłej w <see cref="T:System.Windows.Automation.TextPattern" /> kontenera.</span><span class="sxs-lookup"><span data-stu-id="eed2b-101">Represents a span of continuous text in a <see cref="T:System.Windows.Automation.TextPattern" /> container.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eed2b-102">A <xref:System.Windows.Automation.Text.TextPatternRange> można reprezentuje punkt wstawienia, podzbiór lub cały tekst w <xref:System.Windows.Automation.TextPattern> kontenera.</span><span class="sxs-lookup"><span data-stu-id="eed2b-102">A <xref:System.Windows.Automation.Text.TextPatternRange> can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container.</span></span>  
  
 <span data-ttu-id="eed2b-103">A <xref:System.Windows.Automation.Text.TextPatternRange> staną się nieprawidłowe, jeśli wystąpi jedno z następujących: tekst w <xref:System.Windows.Automation.TextPattern> kontenera zmian z powodu niektóre działania użytkownika lub <xref:System.Windows.Automation.ValuePattern.SetValue%2A> metoda <xref:System.Windows.Automation.ValuePattern> służy do programowo zmienić wartość tekstu w <xref:System.Windows.Automation.TextPattern> kontenera.</span><span class="sxs-lookup"><span data-stu-id="eed2b-103">A <xref:System.Windows.Automation.Text.TextPatternRange> will become invalid if one of the following occurs: the text in the <xref:System.Windows.Automation.TextPattern> container changes because of some user activity, or the <xref:System.Windows.Automation.ValuePattern.SetValue%2A> method of <xref:System.Windows.Automation.ValuePattern> is used to programmatically change the value of the text in the <xref:System.Windows.Automation.TextPattern> container.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />
  </Docs>
  <Members>
    <Member MemberName="AddToSelection">
      <MemberSignature Language="C#" Value="public void AddToSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToSelection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eed2b-104">Dodaje do kolekcji wyróżnionego tekstu w kontenerze tekst, który obsługuje wielu rozłączne wybrane opcje.</span><span class="sxs-lookup"><span data-stu-id="eed2b-104">Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eed2b-105">Przenosi punkt wstawiania do obszaru nowe zaznaczenie.</span><span class="sxs-lookup"><span data-stu-id="eed2b-105">The text insertion point moves to the area of the new selection.</span></span>  
  
 <span data-ttu-id="eed2b-106">Zapewniającym zakres tekstu degeneracji przenosi punkt wstawiania.</span><span class="sxs-lookup"><span data-stu-id="eed2b-106">Providing a degenerate text range moves the insertion point.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="eed2b-107">Jeśli tekst dostawca nie obsługuje wielu rozłączne opcje (na przykład <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> musi mieć wartość <see langword="Multiple" />).</span><span class="sxs-lookup"><span data-stu-id="eed2b-107">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of <see langword="Multiple" />).</span></span></exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.Select" />
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eed2b-108">Pobiera nową <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> takie same jak oryginalne <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> i dziedziczenia wszystkich właściwości oryginału.</span><span class="sxs-lookup"><span data-stu-id="eed2b-108">Retrieves a new <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> identical to the original <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> and inheriting all properties of the original.</span></span></summary>
        <returns><span data-ttu-id="eed2b-109">Nowy zakres tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-109">The new text range.</span></span> <span data-ttu-id="eed2b-110">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic) nigdy nie jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="eed2b-110">A null reference (<see langword="Nothing" /> in Visual Basic) is never returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eed2b-111">Można również utworzyć nową <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> z <xref:System.Windows.Automation.TextPattern> i Przenieś dwa punkty końcowe do punktów końcowych oryginalny zakres tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-111">Alternatively, create a new <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> from the <xref:System.Windows.Automation.TextPattern> and move the two endpoints to correspond with the endpoints of the original text range.</span></span>  
  
 <span data-ttu-id="eed2b-112">Nowy zakres może manipulować niezależnie od oryginału.</span><span class="sxs-lookup"><span data-stu-id="eed2b-112">The new range can be manipulated independently from the original.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1060](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1060)]  
  
 [!code-vb[UIATextPattern_snip#2060](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2060)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <altmember cref="M:System.Windows.Automation.TextPattern.RangeFromChild(System.Windows.Automation.AutomationElement)" />
        <altmember cref="M:System.Windows.Automation.TextPattern.RangeFromPoint(System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public bool Compare (System.Windows.Automation.Text.TextPatternRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Compare(class System.Windows.Automation.Text.TextPatternRange range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (range As TextPatternRange) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Compare(System::Windows::Automation::Text::TextPatternRange ^ range);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Windows.Automation.Text.TextPatternRange" />
      </Parameters>
      <Docs>
        <param name="range"><span data-ttu-id="eed2b-113">Zakres tekstu do porównania.</span><span class="sxs-lookup"><span data-stu-id="eed2b-113">A text range to compare.</span></span></param>
        <summary><span data-ttu-id="eed2b-114">Zwraca <see cref="T:System.Boolean" /> wartość wskazującą, czy zakres ( <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> punktu końcowego <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> punktu końcowego) tekstu zakres jest taki sam jak inny zakres tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-114">Returns a <see cref="T:System.Boolean" /> value indicating whether the span (the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> endpoint to the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint) of a text range is the same as another text range.</span></span></summary>
        <returns>
          <span data-ttu-id="eed2b-115"><see langword="true" /> Jeśli zakres obu zakresów tekst jest identyczny; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="eed2b-115"><see langword="true" /> if the span of both text ranges is identical; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1061](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1061)]  
  
 [!code-vb[UIATextPattern_snip#2061](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2061)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="eed2b-116">Jeśli porównywane zakres nie pochodzi z tego samego dostawcy tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-116">If the range being compared does not come from the same text provider.</span></span></exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="CompareEndpoints">
      <MemberSignature Language="C#" Value="public int CompareEndpoints (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareEndpoints(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Text.TextPatternRange targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareEndpoints (endpoint As TextPatternRangeEndpoint, targetRange As TextPatternRange, targetEndpoint As TextPatternRangeEndpoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareEndpoints(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextPatternRange ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Text.TextPatternRange" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="eed2b-117"><see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> Lub <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> punktu końcowego obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="eed2b-117">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the caller.</span></span></param>
        <param name="targetRange"><span data-ttu-id="eed2b-118">Zakres docelowy dla porównania.</span><span class="sxs-lookup"><span data-stu-id="eed2b-118">The target range for comparison.</span></span></param>
        <param name="targetEndpoint"><span data-ttu-id="eed2b-119"><see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> Lub <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> punktu końcowego obiektu docelowego.</span><span class="sxs-lookup"><span data-stu-id="eed2b-119">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the target.</span></span></param>
        <summary><span data-ttu-id="eed2b-120">Zwraca <see cref="T:System.Int32" /> wskazującą, czy dwa zakresy tekstu mają identyczne punkty końcowe.</span><span class="sxs-lookup"><span data-stu-id="eed2b-120">Returns an <see cref="T:System.Int32" /> indicating whether two text ranges have identical endpoints.</span></span></summary>
        <returns><span data-ttu-id="eed2b-121">Zwraca wartość ujemną, jeśli punkt końcowy wywołującego występuje wcześniej w tekście niż docelowego punktu końcowego.</span><span class="sxs-lookup"><span data-stu-id="eed2b-121">Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.</span></span>  
  
 <span data-ttu-id="eed2b-122">Zwraca zero, jeśli punkt końcowy wywołującego jest w tej samej lokalizacji co docelowego punktu końcowego.</span><span class="sxs-lookup"><span data-stu-id="eed2b-122">Returns zero if the caller's endpoint is at the same location as the target endpoint.</span></span>  
  
 <span data-ttu-id="eed2b-123">Zwraca wartość dodatnią, w przypadku punktu końcowego obiektu wywołującego później w tekście niż docelowego punktu końcowego.</span><span class="sxs-lookup"><span data-stu-id="eed2b-123">Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eed2b-124">Porównując punkty końcowe początkowy i końcowy zakresu tekst można zidentyfikować Jeśli zakres tekstu jest degeneracji lub punktów końcowych, które są kolejności przepływu logicznego tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-124">By comparing the starting and ending endpoints of the same text range you can identify if a text range is degenerate or if the endpoints are in the order of logical text flow.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1062](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1062)]  
  
 [!code-vb[UIATextPattern_snip#2062](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2062)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eed2b-125">Jeśli zakres to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="eed2b-125">If range is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="eed2b-126">Jeśli jest zakres od innego kontenera.</span><span class="sxs-lookup"><span data-stu-id="eed2b-126">If range is from another container.</span></span></exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="ExpandToEnclosingUnit">
      <MemberSignature Language="C#" Value="public void ExpandToEnclosingUnit (System.Windows.Automation.Text.TextUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExpandToEnclosingUnit(valuetype System.Windows.Automation.Text.TextUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExpandToEnclosingUnit (unit As TextUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExpandToEnclosingUnit(System::Windows::Automation::Text::TextUnit unit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
      </Parameters>
      <Docs>
        <param name="unit"><span data-ttu-id="eed2b-127">Jednostka tekstową.</span><span class="sxs-lookup"><span data-stu-id="eed2b-127">The textual unit.</span></span></param>
        <summary><span data-ttu-id="eed2b-128">Rozwija zakres tekstu do określonego <see cref="T:System.Windows.Automation.Text.TextUnit" />.</span><span class="sxs-lookup"><span data-stu-id="eed2b-128">Expands the text range to the specified <see cref="T:System.Windows.Automation.Text.TextUnit" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eed2b-129">Jeśli zakres znajduje się już dokładne ilości określonej jednostki pozostaje bez zmian.</span><span class="sxs-lookup"><span data-stu-id="eed2b-129">If the range is already an exact quantity of the specified units then it remains unchanged.</span></span>  
  
 <span data-ttu-id="eed2b-130">Aby <xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> metodę, aby pomyślnie wykonać sekwencję akcji jest wykonywane w tle.</span><span class="sxs-lookup"><span data-stu-id="eed2b-130">In order for the <xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> method to execute successfully, a sequence of actions is performed behind the scenes.</span></span>  
  
1.  <span data-ttu-id="eed2b-131">Zakres tekstu jest znormalizowany; oznacza to, że zakres tekstu jest zwinięty degeneracji zakres na <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> punktu końcowego, co <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> zbędny punktu końcowego.</span><span class="sxs-lookup"><span data-stu-id="eed2b-131">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, making the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="eed2b-132">Ten krok jest niezbędny usunąć niejednoznaczności w sytuacjach, gdy zakres tekstu obejmuje `unit` granice, na przykład "{U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) jest osadzony w tekście" gdzie "{" i "}" są punkty końcowe zakresu tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-132">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="eed2b-133">Wynikowy zakres jest przenoszony do tyłu <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> na początku żądany `unit` granic.</span><span class="sxs-lookup"><span data-stu-id="eed2b-133">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="eed2b-134">Zakres zostanie przeniesiona do przodu i do tyłu w <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> przez żądaną liczbę `unit` granic.</span><span class="sxs-lookup"><span data-stu-id="eed2b-134">The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries.</span></span>  
  
4.  <span data-ttu-id="eed2b-135">Zakres jest rozszerzana ze stanu degeneracji zakresu przenosząc <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> punktu końcowego o jeden żądany `unit` granic.</span><span class="sxs-lookup"><span data-stu-id="eed2b-135">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="eed2b-136">![Zakres dostosowania Przenieś & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "zakres dostosowania Przenieś & ExpandToEnclosingUnit")</span><span class="sxs-lookup"><span data-stu-id="eed2b-136">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="eed2b-137">Przykłady sposobu zakres tekstu jest uwzględniany Move() i ExpandToEnclosingUnit()</span><span class="sxs-lookup"><span data-stu-id="eed2b-137">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eed2b-138">Te kroki są niezbędne, ponieważ często czytniki odczytać pełnego wyrazu, zdanie lub całego akapitu w punkt wstawiania lub dowolnej pozycji kursora wirtualnego.</span><span class="sxs-lookup"><span data-stu-id="eed2b-138">These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.</span></span>  
  
 <span data-ttu-id="eed2b-139"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> uwzględnia tekst zarówno ukryte i są widoczne.</span><span class="sxs-lookup"><span data-stu-id="eed2b-139"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="eed2b-140">Automatyzacja interfejsu użytkownika klienta można sprawdzić <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> widoczność tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-140">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="eed2b-141"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> różni się do następnego największy <xref:System.Windows.Automation.Text.TextUnit> obsługiwanych w przypadku danego <xref:System.Windows.Automation.Text.TextUnit> nie jest obsługiwana przez formant.</span><span class="sxs-lookup"><span data-stu-id="eed2b-141"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="eed2b-142">Poniżej przedstawiono kolejność, od najmniejszego do największej.</span><span class="sxs-lookup"><span data-stu-id="eed2b-142">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1063](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1063)]  
  
 [!code-vb[UIATextPattern_snip#2063](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2063)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="FindAttribute">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange FindAttribute (System.Windows.Automation.AutomationTextAttribute attribute, object value, bool backward);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange FindAttribute(class System.Windows.Automation.AutomationTextAttribute attribute, object value, bool backward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAttribute (attribute As AutomationTextAttribute, value As Object, backward As Boolean) As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ FindAttribute(System::Windows::Automation::AutomationTextAttribute ^ attribute, System::Object ^ value, bool backward);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Windows.Automation.AutomationTextAttribute" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="backward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attribute"><span data-ttu-id="eed2b-143">Atrybut do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="eed2b-143">The attribute to search for.</span></span></param>
        <param name="value"><span data-ttu-id="eed2b-144">Wartość atrybutu do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="eed2b-144">The attribute value to search for.</span></span> <span data-ttu-id="eed2b-145">Ta wartość musi odpowiadać typowi określona dla atrybutu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-145">This value must match the type specified for the attribute.</span></span></param>
        <param name="backward">
          <span data-ttu-id="eed2b-146"><see langword="true" /> Jeśli ma zostać zwrócony ostatni zakres tekstu występującą zamiast pierwszy; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="eed2b-146"><see langword="true" /> if the last occurring text range should be returned instead of the first; otherwise <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="eed2b-147">Zwraca podzestaw zakres tekstu zawierającego wartość określonego atrybutu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-147">Returns a text range subset that has the specified attribute value.</span></span></summary>
        <returns><span data-ttu-id="eed2b-148">Zakres tekstu pasującego atrybut i wartość atrybutu; w przeciwnym razie wartość null (<see langword="Nothing" /> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="eed2b-148">A text range having a matching attribute and attribute value; otherwise null (<see langword="Nothing" /> in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eed2b-149">Nie ma rozróżnienia między tekstu ukrytego i są widoczne.</span><span class="sxs-lookup"><span data-stu-id="eed2b-149">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="eed2b-150">Klienci automatyzacji interfejsu użytkownika można użyć <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> do sprawdzenia widoczność tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-150">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eed2b-151">Użyj <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> wyszukiwania w całym dokumencie.</span><span class="sxs-lookup"><span data-stu-id="eed2b-151">Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1064](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1064)]  
  
 [!code-vb[UIATextPattern_snip#2064](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2064)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.TextPattern" />
      </Docs>
    </Member>
    <Member MemberName="FindText">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange FindText (string text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange FindText(string text, bool backward, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindText (text As String, backward As Boolean, ignoreCase As Boolean) As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ FindText(System::String ^ text, bool backward, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="backward" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="eed2b-152">Ciąg tekstowy do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="eed2b-152">The text string to search for.</span></span></param>
        <param name="backward">
          <span data-ttu-id="eed2b-153"><see langword="true" /> Jeśli ma zostać zwrócony ostatni zakres tekstu występującą zamiast pierwszy; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="eed2b-153"><see langword="true" /> if the last occurring text range should be returned instead of the first; otherwise <see langword="false" />.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="eed2b-154"><see langword="true" /> Jeśli należy zignorować w przypadku; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="eed2b-154"><see langword="true" /> if case should be ignored; otherwise <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="eed2b-155">Zwraca podzestaw zakres tekstu zawiera określony tekst.</span><span class="sxs-lookup"><span data-stu-id="eed2b-155">Returns a text range subset that contains the specified text.</span></span></summary>
        <returns><span data-ttu-id="eed2b-156">Zakres tekstu pasującego tekstu określonego; w przeciwnym razie wartość null (<see langword="Nothing" /> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="eed2b-156">A text range matching the specified text; otherwise null (<see langword="Nothing" /> in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eed2b-157">Nie ma rozróżnienia między tekstu ukrytego i są widoczne.</span><span class="sxs-lookup"><span data-stu-id="eed2b-157">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="eed2b-158">Klienci automatyzacji interfejsu użytkownika można użyć <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> do sprawdzenia widoczność tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-158">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eed2b-159">Użyj <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> wyszukiwania w całym dokumencie.</span><span class="sxs-lookup"><span data-stu-id="eed2b-159">Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1065](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1065)]  
  
 [!code-vb[UIATextPattern_snip#2065](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2065)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.TextPattern" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeValue">
      <MemberSignature Language="C#" Value="public object GetAttributeValue (System.Windows.Automation.AutomationTextAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetAttributeValue(class System.Windows.Automation.AutomationTextAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttributeValue (attribute As AutomationTextAttribute) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetAttributeValue(System::Windows::Automation::AutomationTextAttribute ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Windows.Automation.AutomationTextAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute"><span data-ttu-id="eed2b-160">Atrybut tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-160">The text attribute.</span></span></param>
        <summary><span data-ttu-id="eed2b-161">Zwraca wartość określonego atrybutu w zakresie cały tekst.</span><span class="sxs-lookup"><span data-stu-id="eed2b-161">Returns the value of the specified attribute across the entire text range.</span></span></summary>
        <returns><span data-ttu-id="eed2b-162">Zwraca wartość określonego atrybutu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-162">Returns the value of the specified attribute.</span></span> <span data-ttu-id="eed2b-163">Na przykład GetAttributeValue(TextPattern.FontNameAttribute) zwróci ciąg reprezentujący nazwę czcionek, gdy unikatowy zakresem tekstu podczas GetAttributeValue(TextPattern.IsItalicAttribute) zwróci wartość logiczną.</span><span class="sxs-lookup"><span data-stu-id="eed2b-163">For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name, if unique, of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a boolean.</span></span>  
  
 <span data-ttu-id="eed2b-164">Zwraca <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> Jeśli wartość określonego atrybutu zmienia się w zakresie tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-164">Returns <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> if the value of the specified attribute varies over the text range.</span></span>  
  
 <span data-ttu-id="eed2b-165">Zwraca <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> Jeśli określony atrybut nie jest obsługiwana przez dostawcę lub kontrolki.</span><span class="sxs-lookup"><span data-stu-id="eed2b-165">Returns <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> if the specified attribute is not supported by the provider or the control.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eed2b-166">Nie ma rozróżnienia między tekstu ukrytego i są widoczne.</span><span class="sxs-lookup"><span data-stu-id="eed2b-166">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="eed2b-167">Klienci automatyzacji interfejsu użytkownika można użyć <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> do sprawdzenia widoczność tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-167">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1066](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1066)]  
  
 [!code-vb[UIATextPattern_snip#2066](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2066)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="eed2b-168">Jeśli określony atrybut nie jest prawidłowy.</span><span class="sxs-lookup"><span data-stu-id="eed2b-168">If the specified attribute is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetBoundingRectangles">
      <MemberSignature Language="C#" Value="public System.Windows.Rect[] GetBoundingRectangles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Rect[] GetBoundingRectangles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoundingRectangles () As Rect()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Rect&gt; ^ GetBoundingRectangles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eed2b-169">Pobiera kolekcję ograniczenia prostokąty dla pełni lub częściowo widocznych wierszy tekstu w zakresie tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-169">Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</span></span></summary>
        <returns><span data-ttu-id="eed2b-170">Tablica ograniczenia prostokąty dla każdego wiersza pełnej lub częściowej tekstu w zakres tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-170">An array of bounding rectangles for each full or partial line of text in a text range.</span></span>  
  
 <span data-ttu-id="eed2b-171">Pusta tablica zakresu degeneracji tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-171">An empty array for a degenerate text range.</span></span>  
  
 <span data-ttu-id="eed2b-172">Pusta tablica zakresu tekst, który ma współrzędne ekranu umieszczenia go całkowicie ukrytej przewijane niewidocznymi lub zasłonięty przez nakładające się okna.</span><span class="sxs-lookup"><span data-stu-id="eed2b-172">An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1067](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1067)]  
  
 [!code-vb[UIATextPattern_snip#2067](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2067)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElement[] GetChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationElement[] GetChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetChildren" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildren () As AutomationElement()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::AutomationElement ^&gt; ^ GetChildren();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElement[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eed2b-173">Pobiera kolekcję wszystkich osadzonych obiektów, które wchodzi w zakres tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-173">Retrieves a collection of all embedded objects that fall within the text range.</span></span></summary>
        <returns><span data-ttu-id="eed2b-174">Kolekcja wszystkich obiektów podrzędnych, które należą do zakresu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-174">A collection of all child objects that fall within the range.</span></span> <span data-ttu-id="eed2b-175">Elementy podrzędne, które pokrywają się z zakresem, ale nie zostały całkowicie objęte przez nią będą również uwzględniane w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="eed2b-175">Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.</span></span>  
  
 <span data-ttu-id="eed2b-176">Zwraca pustą kolekcję, jeśli nie ma żadnych obiektów podrzędnych.</span><span class="sxs-lookup"><span data-stu-id="eed2b-176">Returns an empty collection if there are no child objects.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#StartTarget](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#starttarget)]
 [!code-vb[UIATextPattern_snip#StartTarget](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#starttarget)]  
[!code-csharp[UIATextPattern_snip#GetTextElement](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#gettextelement)]
[!code-vb[UIATextPattern_snip#GetTextElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#gettextelement)]  
[!code-csharp[UIATextPattern_snip#GetEmbeddedObjects](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#getembeddedobjects)]
[!code-vb[UIATextPattern_snip#GetEmbeddedObjects](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#getembeddedobjects)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnclosingElement">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElement GetEnclosingElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationElement GetEnclosingElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnclosingElement () As AutomationElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::AutomationElement ^ GetEnclosingElement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eed2b-177">Zwraca najbardziej wewnętrzną funkcją <see cref="T:System.Windows.Automation.AutomationElement" /> który umieszcza zakres tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-177">Returns the innermost <see cref="T:System.Windows.Automation.AutomationElement" /> that encloses the text range.</span></span></summary>
        <returns><span data-ttu-id="eed2b-178">Najbardziej element otaczający element wywołujący.</span><span class="sxs-lookup"><span data-stu-id="eed2b-178">The innermost element enclosing the caller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eed2b-179">Otaczający <xref:System.Windows.Automation.AutomationElement>, zwykle dostawcy tekstu, który dostarcza zakres tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-179">The enclosing <xref:System.Windows.Automation.AutomationElement>, typically the text provider that supplies the text range.</span></span> <span data-ttu-id="eed2b-180">Jednak jeśli dostawca tekstu obsługuje elementy podrzędne, takie jak tabele lub hiperłącza, otaczający element można elementem potomnym dostawcy tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-180">However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1069](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1069)]  
  
 [!code-vb[UIATextPattern_snip#2069](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2069)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetText">
      <MemberSignature Language="C#" Value="public string GetText (int maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetText(int32 maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetText (maxLength As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetText(int maxLength);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxLength"><span data-ttu-id="eed2b-181">Maksymalna długość ciągu do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="eed2b-181">The maximum length of the string to return.</span></span> <span data-ttu-id="eed2b-182">Użyj <c>-1</c> Jeśli limit nie jest wymagane.</span><span class="sxs-lookup"><span data-stu-id="eed2b-182">Use <c>-1</c> if no limit is required.</span></span></param>
        <summary><span data-ttu-id="eed2b-183">Zwraca tekst zwykły zakres tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-183">Returns the plain text of the text range.</span></span></summary>
        <returns><span data-ttu-id="eed2b-184">Zwykły tekst zakres tekstu, prawdopodobnie obcięty w określonym <paramref name="maxLength" />.</span><span class="sxs-lookup"><span data-stu-id="eed2b-184">The plain text of the text range, possibly truncated at the specified <paramref name="maxLength" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eed2b-185"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> uwzględnia tekst zarówno ukryte i są widoczne.</span><span class="sxs-lookup"><span data-stu-id="eed2b-185"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="eed2b-186">Automatyzacja interfejsu użytkownika klienta można sprawdzić <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> widoczność tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-186">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="eed2b-187">Jeśli `maxLength` jest większa niż długość zakres tekstu obiektu wywołującego, zwrócony ciąg będzie zwykły tekst zakres tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-187">If `maxLength` is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.</span></span>  
  
 <span data-ttu-id="eed2b-188"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> nie zostaną zmienione przez kolejność punkty końcowe w tekście; będzie ona zawsze zwrócić tekst między początkową i końcową punkty końcowe zakres tekstu w kolejności przepływu tekstu logicznego.</span><span class="sxs-lookup"><span data-stu-id="eed2b-188"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1070](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1070)]  
  
 [!code-vb[UIATextPattern_snip#2070](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2070)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="eed2b-189">Jeśli <paramref name="maxLength" /> jest mniejsza niż -1.</span><span class="sxs-lookup"><span data-stu-id="eed2b-189">If <paramref name="maxLength" /> is less than -1.</span></span></exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public int Move (System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Move(valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Move (unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Move(System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unit"><span data-ttu-id="eed2b-190">Tekst granic jednostki.</span><span class="sxs-lookup"><span data-stu-id="eed2b-190">The text unit boundary.</span></span></param>
        <param name="count"><span data-ttu-id="eed2b-191">Liczba jednostek tekstu do przeniesienia.</span><span class="sxs-lookup"><span data-stu-id="eed2b-191">The number of text units to move.</span></span> <span data-ttu-id="eed2b-192">Wartość dodatnią przenosi do przodu zakres tekstu, wartości ujemnej przenosi zakres tekstu do tyłu i 0 nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-192">A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</span></span></param>
        <summary><span data-ttu-id="eed2b-193">Przenosi zakres tekstu określoną liczbę jednostek tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-193">Moves the text range the specified number of text units.</span></span></summary>
        <returns><span data-ttu-id="eed2b-194">Liczba jednostek w rzeczywistości przenoszone.</span><span class="sxs-lookup"><span data-stu-id="eed2b-194">The number of units actually moved.</span></span> <span data-ttu-id="eed2b-195">Może to być mniejsza niż żądana liczba, jeśli spełniony nowych punktów końcowych zakres tekstu jest większa lub mniejsza niż <see cref="P:System.Windows.Automation.TextPattern.DocumentRange" /> punktów końcowych.</span><span class="sxs-lookup"><span data-stu-id="eed2b-195">This can be less than the number requested if either of the new text range endpoints is greater than or less than the <see cref="P:System.Windows.Automation.TextPattern.DocumentRange" /> endpoints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eed2b-196">Gdy jest konieczne przechodzenie przez zawartość zakres tekstu, serii kroków są zaangażowane w tle, aby <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> metodę, aby zostać pomyślnie uruchomiony.</span><span class="sxs-lookup"><span data-stu-id="eed2b-196">When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="eed2b-197">Zakres tekstu jest znormalizowany; oznacza to, że zakres tekstu jest zwinięty degeneracji zakres na <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> punktu końcowego, co sprawia, że <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> zbędny punktu końcowego.</span><span class="sxs-lookup"><span data-stu-id="eed2b-197">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="eed2b-198">Ten krok jest niezbędny usunąć niejednoznaczności w sytuacjach, gdy zakres tekstu obejmuje `unit` granice, na przykład "{U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) jest osadzony w tekście" gdzie "{" i "}" są punkty końcowe zakresu tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-198">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="eed2b-199">Wynikowy zakres jest przenoszony do tyłu <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> na początku żądany `unit` granic.</span><span class="sxs-lookup"><span data-stu-id="eed2b-199">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="eed2b-200">Zakres zostanie przeniesiona do przodu i do tyłu w <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> przez żądaną liczbę `unit` granic.</span><span class="sxs-lookup"><span data-stu-id="eed2b-200">The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries.</span></span>  
  
4.  <span data-ttu-id="eed2b-201">Zakres jest rozszerzana ze stanu degeneracji zakresu przenosząc <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> punktu końcowego o jeden żądany `unit` granic.</span><span class="sxs-lookup"><span data-stu-id="eed2b-201">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="eed2b-202">![Zakres dostosowania Przenieś & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "zakres dostosowania Przenieś & ExpandToEnclosingUnit")</span><span class="sxs-lookup"><span data-stu-id="eed2b-202">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="eed2b-203">Przykłady sposobu zakres tekstu jest uwzględniany Move() i ExpandToEnclosingUnit()</span><span class="sxs-lookup"><span data-stu-id="eed2b-203">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
 <span data-ttu-id="eed2b-204">Zawartość tekstową (lub tekst wewnętrzny) kontenerze tekstu i osadzonego, takich jak komórki hiperłącze lub tabeli jest ujawniona jako strumień jednej, ciągłe tekst w widoku kontrolki i widok zawartości [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] drzewa; obiekt granice są ignorowane.</span><span class="sxs-lookup"><span data-stu-id="eed2b-204">The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.</span></span> <span data-ttu-id="eed2b-205">Jeśli klient automatyzacji interfejsu użytkownika pobiera tekst na potrzeby reciting interpretowanie i analizowanie danych w sposób, zakres tekstu mają być wyszukiwane w szczególnych przypadkach, takich jak tabelę z tekstowej zawartości lub inne obiekty osadzone.</span><span class="sxs-lookup"><span data-stu-id="eed2b-205">If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</span></span> <span data-ttu-id="eed2b-206">Można to osiągnąć poprzez wywołanie <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> uzyskanie <xref:System.Windows.Automation.AutomationElement> dla każdego osadzonego obiektu, a następnie wywołując <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> uzyskanie zakresu tekstu dla każdego elementu; jest to realizowane cyklicznie, do momentu pobrania całej zawartości tekstowej.</span><span class="sxs-lookup"><span data-stu-id="eed2b-206">This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</span></span>  
  
 <span data-ttu-id="eed2b-207">![Zakresy tekstu, objęte osadzonych obiektów. ] (~/add/media/uia-textpattern-embeddedobjecttextranges.png "Zakresy tekstu objęte osadzonych obiektów.")</span><span class="sxs-lookup"><span data-stu-id="eed2b-207">![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png "Text ranges spanned by embedded objects.")</span></span>  
<span data-ttu-id="eed2b-208">Przykład strumienia tekstu osadzonych obiektów i ich zakresy zakresu</span><span class="sxs-lookup"><span data-stu-id="eed2b-208">Example of a text stream with embedded objects and their range spans</span></span>  
  
 <span data-ttu-id="eed2b-209"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> uwzględnia tekst zarówno ukryte i są widoczne.</span><span class="sxs-lookup"><span data-stu-id="eed2b-209"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="eed2b-210">Automatyzacja interfejsu użytkownika klienta można sprawdzić <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> widoczność tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-210">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="eed2b-211"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> różni się do następnego największy <xref:System.Windows.Automation.Text.TextUnit> obsługiwanych w przypadku danego <xref:System.Windows.Automation.Text.TextUnit> nie jest obsługiwana przez formant.</span><span class="sxs-lookup"><span data-stu-id="eed2b-211"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="eed2b-212">Poniżej przedstawiono kolejność, od najmniejszego do największej.</span><span class="sxs-lookup"><span data-stu-id="eed2b-212">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
> [!NOTE]
>  <span data-ttu-id="eed2b-213">Tekst nie ulega zmianie w dowolny sposób, jak zakres tekstu obejmuje tylko różnych części tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-213">The text is not altered in any way as the text range just spans a different part of the text.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#StartTarget](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#starttarget)]
 [!code-vb[UIATextPattern_snip#StartTarget](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#starttarget)]  
[!code-csharp[UIATextPattern_snip#GetTextElement](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#gettextelement)]
[!code-vb[UIATextPattern_snip#GetTextElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#gettextelement)]  
[!code-csharp[UIATextPattern_snip#MoveSelection](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#moveselection)]
[!code-vb[UIATextPattern_snip#MoveSelection](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#moveselection)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByRange">
      <MemberSignature Language="C#" Value="public void MoveEndpointByRange (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveEndpointByRange(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Text.TextPatternRange targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveEndpointByRange (endpoint As TextPatternRangeEndpoint, targetRange As TextPatternRange, targetEndpoint As TextPatternRangeEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveEndpointByRange(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextPatternRange ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Text.TextPatternRange" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="eed2b-214">Punkt końcowy, aby przenieść.</span><span class="sxs-lookup"><span data-stu-id="eed2b-214">The endpoint to move.</span></span></param>
        <param name="targetRange"><span data-ttu-id="eed2b-215">Inny zakres z tego samego dostawcy tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-215">Another range from the same text provider.</span></span></param>
        <param name="targetEndpoint"><span data-ttu-id="eed2b-216">Punkt końcowy na inny zakres.</span><span class="sxs-lookup"><span data-stu-id="eed2b-216">An endpoint on the other range.</span></span></param>
        <summary><span data-ttu-id="eed2b-217">Przenosi jeden punkt końcowy zakres tekstu do określonego punktu końcowego drugi zakres tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-217">Moves one endpoint of a text range to the specified endpoint of a second text range.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eed2b-218">Jeśli punkt końcowy przenoszony przecina punkt końcowy zakresu tekstu, a następnie tego punktu końcowego jest przenoszony Ponadto wynikowa degeneracji zakresu i sprawdzeniu kolejności poprawne punkty końcowe (to znaczy <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> zawsze jest mniejsza niż lub równa <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).</span><span class="sxs-lookup"><span data-stu-id="eed2b-218">If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> is always less than or equal to <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1072](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1072)]  
  
 [!code-vb[UIATextPattern_snip#2072](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2072)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByUnit">
      <MemberSignature Language="C#" Value="public int MoveEndpointByUnit (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 MoveEndpointByUnit(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveEndpointByUnit (endpoint As TextPatternRangeEndpoint, unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int MoveEndpointByUnit(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="eed2b-219">Punkt końcowy, aby przenieść.</span><span class="sxs-lookup"><span data-stu-id="eed2b-219">The endpoint to move.</span></span></param>
        <param name="unit"><span data-ttu-id="eed2b-220">Jednostka tekstową przenoszenia.</span><span class="sxs-lookup"><span data-stu-id="eed2b-220">The textual unit for moving.</span></span></param>
        <param name="count"><span data-ttu-id="eed2b-221">Liczba jednostek, aby przenieść.</span><span class="sxs-lookup"><span data-stu-id="eed2b-221">The number of units to move.</span></span> <span data-ttu-id="eed2b-222">Liczba dodatnia przenosi do przodu punktu końcowego.</span><span class="sxs-lookup"><span data-stu-id="eed2b-222">A positive count moves the endpoint forward.</span></span> <span data-ttu-id="eed2b-223">Cofa się liczbą ujemną.</span><span class="sxs-lookup"><span data-stu-id="eed2b-223">A negative count moves backward.</span></span> <span data-ttu-id="eed2b-224">Liczba 0 nie ma znaczenia.</span><span class="sxs-lookup"><span data-stu-id="eed2b-224">A count of 0 has no effect.</span></span></param>
        <summary><span data-ttu-id="eed2b-225">Przenosi jeden punkt końcowy tekstu w zakresie określoną liczbę <see cref="T:System.Windows.Automation.Text.TextUnit" />s do zakresu dokumentu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-225">Moves one endpoint of the text range the specified number of <see cref="T:System.Windows.Automation.Text.TextUnit" />s within the document range.</span></span></summary>
        <returns><span data-ttu-id="eed2b-226">Liczba jednostek w rzeczywistości przenoszone, które można można mniejsza niż liczba żądanych Jeśli przeniesienie punktu końcowego, który jest uruchamiany na początku lub na końcu dokumentu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-226">The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eed2b-227">Gdy jest konieczne przechodzenie przez zawartość zakres tekstu, serii kroków są zaangażowane w tle, aby <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> metodę, aby zostać pomyślnie uruchomiony.</span><span class="sxs-lookup"><span data-stu-id="eed2b-227">When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="eed2b-228">Zakres tekstu jest znormalizowany; oznacza to, że zakres tekstu jest zwinięty degeneracji zakres na <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> punktu końcowego, co sprawia, że <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> zbędny punktu końcowego.</span><span class="sxs-lookup"><span data-stu-id="eed2b-228">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="eed2b-229">Ten krok jest niezbędny usunąć niejednoznaczności w sytuacjach, gdy zakres tekstu obejmuje `unit` granice, na przykład "{U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) jest osadzony w tekście" gdzie "{" i "}" są punkty końcowe zakresu tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-229">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="eed2b-230">Wynikowy zakres jest przenoszony do tyłu <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> na początku żądany `unit` granic.</span><span class="sxs-lookup"><span data-stu-id="eed2b-230">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="eed2b-231">Zakres jest rozszerzana ze stanu degeneracji zakresu przenosząc <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> punktu końcowego o jeden żądany `unit` granic.</span><span class="sxs-lookup"><span data-stu-id="eed2b-231">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="eed2b-232">![Zakres dostosowania Przenieś & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "zakres dostosowania Przenieś & ExpandToEnclosingUnit")</span><span class="sxs-lookup"><span data-stu-id="eed2b-232">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="eed2b-233">Przykłady sposobu zakres tekstu jest uwzględniany Move() i ExpandToEnclosingUnit()</span><span class="sxs-lookup"><span data-stu-id="eed2b-233">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
 <span data-ttu-id="eed2b-234">Zawartość tekstową (lub tekst wewnętrzny) kontenerze tekstu i osadzonego, takich jak komórki hiperłącze lub tabeli jest ujawniona jako strumień jednej, ciągłe tekst w widoku kontrolki i widok zawartości [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] drzewa; obiekt granice są ignorowane.</span><span class="sxs-lookup"><span data-stu-id="eed2b-234">The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.</span></span> <span data-ttu-id="eed2b-235">Jeśli klient automatyzacji interfejsu użytkownika pobiera tekst na potrzeby reciting interpretowanie i analizowanie danych w sposób, zakres tekstu mają być wyszukiwane w szczególnych przypadkach, takich jak tabelę z tekstowej zawartości lub inne obiekty osadzone.</span><span class="sxs-lookup"><span data-stu-id="eed2b-235">If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</span></span> <span data-ttu-id="eed2b-236">Można to osiągnąć poprzez wywołanie <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> uzyskanie <xref:System.Windows.Automation.AutomationElement> dla każdego osadzonego obiektu, a następnie wywołując <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> uzyskanie zakresu tekstu dla każdego elementu; jest to realizowane cyklicznie, do momentu pobrania całej zawartości tekstowej.</span><span class="sxs-lookup"><span data-stu-id="eed2b-236">This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</span></span>  
  
 <span data-ttu-id="eed2b-237">![Zakresy tekstu, objęte osadzonych obiektów. ] (~/add/media/uia-textpattern-embeddedobjecttextranges.png "Zakresy tekstu objęte osadzonych obiektów.")</span><span class="sxs-lookup"><span data-stu-id="eed2b-237">![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png "Text ranges spanned by embedded objects.")</span></span>  
<span data-ttu-id="eed2b-238">Przykład strumienia tekstu osadzonych obiektów i ich zakresy zakresu</span><span class="sxs-lookup"><span data-stu-id="eed2b-238">Example of a text stream with embedded objects and their range spans</span></span>  
  
 <span data-ttu-id="eed2b-239"><xref:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit%2A> różni się do następnego największy <xref:System.Windows.Automation.Text.TextUnit> obsługiwanych w przypadku danego <xref:System.Windows.Automation.Text.TextUnit> nie jest obsługiwana przez formant.</span><span class="sxs-lookup"><span data-stu-id="eed2b-239"><xref:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="eed2b-240">Poniżej przedstawiono kolejność, od najmniejszego do największej.</span><span class="sxs-lookup"><span data-stu-id="eed2b-240">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1073](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1073)]  
  
 [!code-vb[UIATextPattern_snip#2073](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2073)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromSelection">
      <MemberSignature Language="C#" Value="public void RemoveFromSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFromSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFromSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFromSelection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eed2b-241">Usuwa zaznaczony fragment tekstu, odpowiadające wywołanie zakres tekstu <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> i <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> punktów końcowych z istniejących kolekcji wyróżnionego tekstu w kontenerze tekstu, która obsługuje wiele rozłączne wybrane opcje.</span><span class="sxs-lookup"><span data-stu-id="eed2b-241">Removes a highlighted section of text, corresponding to the calling text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eed2b-242">Punkt wstawiania zostanie przeniesione do obszaru usunięto zaznaczenie.</span><span class="sxs-lookup"><span data-stu-id="eed2b-242">The text insertion point will move to the area of the removed highlight.</span></span>  
  
 <span data-ttu-id="eed2b-243">Zapewniającym zakres tekstu degeneracji przeniesie punkt wstawiania.</span><span class="sxs-lookup"><span data-stu-id="eed2b-243">Providing a degenerate text range will move the insertion point.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="eed2b-244">Jeśli tekst dostawca nie obsługuje wielu rozłączne opcje (na przykład <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> musi mieć wartość <see langword="Multiple" />).</span><span class="sxs-lookup"><span data-stu-id="eed2b-244">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of <see langword="Multiple" />).</span></span></exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.Select" />
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (bool alignToTop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollIntoView(bool alignToTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollIntoView (alignToTop As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollIntoView(bool alignToTop);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignToTop" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="alignToTop">
          <span data-ttu-id="eed2b-245"><see langword="true" /> Jeśli powinien być przewijane kontrolkę tekstu, więc zakres tekstu jest wyrównana górnej części okienka ekranu; <see langword="false" /> będą opróżniania do dołu okienka ekranu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-245"><see langword="true" /> if the text control should be scrolled so the text range is flush with the top of the viewport; <see langword="false" /> if it should be flush with the bottom of the viewport.</span></span></param>
        <summary><span data-ttu-id="eed2b-246">Powoduje, że kontrolka przewijanie w pionie do momentu wyświetlenia zakres tekstu w okienka ekranu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-246">Causes the text control to scroll vertically until the text range is visible in the viewport.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eed2b-247"><xref:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView%2A> uwzględnia tekst zarówno ukryte i są widoczne.</span><span class="sxs-lookup"><span data-stu-id="eed2b-247"><xref:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="eed2b-248">Automatyzacja interfejsu użytkownika klienta można sprawdzić <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> widoczność tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-248">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span> <span data-ttu-id="eed2b-249">Jeśli zakres tekstu jest ukryty, kontrolkę tekstu przewinie tylko wtedy, gdy tekstu ukrytego zakotwiczenia w okienka ekranu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-249">If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1074](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1074)]  
  
 [!code-vb[UIATextPattern_snip#2074](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2074)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="eed2b-250">Jeśli przewijanie nie jest obsługiwana przez formant.</span><span class="sxs-lookup"><span data-stu-id="eed2b-250">If scrolling is not supported by the control.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eed2b-251">Podświetla tekst w formancie tekst odpowiadający zakres tekstu <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> i <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> punktów końcowych.</span><span class="sxs-lookup"><span data-stu-id="eed2b-251">Highlights text in the text control corresponding to the text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eed2b-252">Jeśli podany zakres tekstu degeneracji punkt wstawiania zostanie przeniesiona do <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> punkt końcowy zakres tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-252">If a degenerate text range is provided, the text insertion point will move to the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint of the text range.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1075](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1075)]  
  
 [!code-vb[UIATextPattern_snip#2075](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2075)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="eed2b-253">Występuje, gdy zaznaczony tekst nie jest obsługiwana przez kontrolkę tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-253">Occurs when text selection is not supported by the text control.</span></span></exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
        <altmember cref="M:System.Windows.Automation.SelectionItemPattern.RemoveFromSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="TextPattern">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TextPattern TextPattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.TextPattern TextPattern" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Text.TextPatternRange.TextPattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TextPattern As TextPattern" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TextPattern ^ TextPattern { System::Windows::Automation::TextPattern ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TextPattern</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eed2b-254">Pobiera <see cref="T:System.Windows.Automation.TextPattern" /> skojarzonych z zakresem tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-254">Gets the <see cref="T:System.Windows.Automation.TextPattern" /> associated with the text range.</span></span></summary>
        <value><span data-ttu-id="eed2b-255">Dostawca tekstu.</span><span class="sxs-lookup"><span data-stu-id="eed2b-255">The text provider.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1076](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1076)]  
  
 [!code-vb[UIATextPattern_snip#2076](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2076)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>