<Type Name="EntityStoreSchemaFilterEntry" FullName="System.Data.Entity.Design.EntityStoreSchemaFilterEntry">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="360c6e66f0dea2546135720bee43ee4383fa11bc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30445041" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EntityStoreSchemaFilterEntry" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EntityStoreSchemaFilterEntry extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Design.EntityStoreSchemaFilterEntry" />
  <TypeSignature Language="VB.NET" Value="Public Class EntityStoreSchemaFilterEntry" />
  <TypeSignature Language="C++ CLI" Value="public ref class EntityStoreSchemaFilterEntry" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje wpis jeden filtr. Filtr umożliwia zezwalanie lub wykluczyć obiekty określoną bazę danych podczas generowania.</summary>
    <remarks>To be added.</remarks>
    <altmember cref="M:System.Data.Entity.Design.EntityStoreSchemaGenerator.GenerateStoreMetadata(System.Collections.Generic.IEnumerable{System.Data.Entity.Design.EntityStoreSchemaFilterEntry})" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Entity.Design.EntityStoreSchemaFilterEntry" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityStoreSchemaFilterEntry (string catalog, string schema, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string catalog, string schema, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Design.EntityStoreSchemaFilterEntry.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (catalog As String, schema As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityStoreSchemaFilterEntry(System::String ^ catalog, System::String ^ schema, System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="catalog" Type="System.String" />
        <Parameter Name="schema" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="catalog">Wzorzec na potrzeby wybierz odpowiedni katalog.</param>
        <param name="schema">Wzorzec do użycia w celu wybrania odpowiedniego schematu wartości null na nie są ograniczone przez schemat.</param>
        <param name="name">Wzorzec do wybierz opcję odpowiednią nazwę lub wartość null, aby ograniczyć nie według nazwy.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Entity.Design.EntityStoreSchemaFilterEntry" /> klasy z określonego katalogu, schematów i filtry nazwy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityStoreSchemaFilterEntry (string catalog, string schema, string name, System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes types, System.Data.Entity.Design.EntityStoreSchemaFilterEffect effect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string catalog, string schema, string name, valuetype System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes types, valuetype System.Data.Entity.Design.EntityStoreSchemaFilterEffect effect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Design.EntityStoreSchemaFilterEntry.#ctor(System.String,System.String,System.String,System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes,System.Data.Entity.Design.EntityStoreSchemaFilterEffect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (catalog As String, schema As String, name As String, types As EntityStoreSchemaFilterObjectTypes, effect As EntityStoreSchemaFilterEffect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityStoreSchemaFilterEntry(System::String ^ catalog, System::String ^ schema, System::String ^ name, System::Data::Entity::Design::EntityStoreSchemaFilterObjectTypes types, System::Data::Entity::Design::EntityStoreSchemaFilterEffect effect);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="catalog" Type="System.String" />
        <Parameter Name="schema" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes" />
        <Parameter Name="effect" Type="System.Data.Entity.Design.EntityStoreSchemaFilterEffect" />
      </Parameters>
      <Docs>
        <param name="catalog">Wzorzec do użycia w celu wybrania odpowiedniego katalogu wartości null na nie są ograniczone przez wykaz.</param>
        <param name="schema">Wzorzec do użycia w celu wybrania odpowiedniego schematu wartości null na nie są ograniczone przez schemat.</param>
        <param name="name">Wzorzec do wybierz opcję odpowiednią nazwę lub wartość null, aby ograniczyć nie według nazwy.</param>
        <param name="types">Typ obiektów, aby zastosować filtr w celu.</param>
        <param name="effect">
          <see cref="T:System.Data.Entity.Design.EntityStoreSchemaFilterEffect" /> Wartość wskazującą, czy wykluczyć wpisy spełniające warunki określonych filtrów.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Entity.Design.EntityStoreSchemaFilterEntry" /> klasy określonego katalogu, schemat oraz nazwę i typ filtrów i filtrowanie ustawienie efektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catalog">
      <MemberSignature Language="C#" Value="public string Catalog { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Catalog" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Catalog" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Catalog As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Catalog { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wzorzec, który będzie używany do wybierz odpowiedni katalog.</summary>
        <value>Katalogu część nazwy bazy danych, gdzie nazwa bazy danych jest w formacie Catalog.Schema.Name.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Design.EntityStoreSchemaFilterEffect Effect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.Entity.Design.EntityStoreSchemaFilterEffect Effect" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Effect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Effect As EntityStoreSchemaFilterEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Entity::Design::EntityStoreSchemaFilterEffect Effect { System::Data::Entity::Design::EntityStoreSchemaFilterEffect get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Design.EntityStoreSchemaFilterEffect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wpływ na wyniki tego filtru.</summary>
        <value>
          <see cref="T:System.Data.Entity.Design.EntityStoreSchemaFilterEffect" /> Wartość wskazującą, czy wykluczyć wpisy spełniające warunki określonych filtrów.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wzorzec, który będzie używany do wybierz odpowiednią nazwę.</summary>
        <value>Część nazwy nazwy bazy danych, w którym nazwa bazy danych jest w formacie Catalog.Schema.Name.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schema">
      <MemberSignature Language="C#" Value="public string Schema { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Schema" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Schema" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Schema As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Schema { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wzorzec, który będzie służyć do wybrania odpowiedniego schematu.</summary>
        <value>Schemat część nazwy bazy danych, gdzie nazwa bazy danych jest w formacie Catalog.Schema.Name.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Types">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes Types { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes Types" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Types" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Types As EntityStoreSchemaFilterObjectTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Entity::Design::EntityStoreSchemaFilterObjectTypes Types { System::Data::Entity::Design::EntityStoreSchemaFilterObjectTypes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typy obiektów, których dotyczy ten filtr.</summary>
        <value>
          <see cref="T:System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes" /> Wartość wskazującą, typy obiektów, aby zastosować filtr do.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>