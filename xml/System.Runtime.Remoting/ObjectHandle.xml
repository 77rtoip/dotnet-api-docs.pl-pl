<Type Name="ObjectHandle" FullName="System.Runtime.Remoting.ObjectHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="200f7ccaece3b89464b033bc5a53624a5053e211" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30566533" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ObjectHandle : MarshalByRefObject, System.Runtime.Remoting.IObjectHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectHandle extends System.MarshalByRefObject implements class System.Runtime.Remoting.IObjectHandle" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.ObjectHandle" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IObjectHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectHandle : MarshalByRefObject, System::Runtime::Remoting::IObjectHandle" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.IObjectHandle</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="3c223-101">Opakowuje odwołania do obiektów kierowanie przez wartość, dzięki czemu mogą zostać zwrócone przez element pośredni.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3c223-101">Wraps marshal-by-value object references, allowing them to be returned through an indirection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c223-102"><xref:System.Runtime.Remoting.ObjectHandle> Klasa jest używana do przekazania obiektu (w stanie opakowana) między wielu domen aplikacji bez ładowania metadanych dla obiektu opakowana w każdym <xref:System.AppDomain> za pośrednictwem której <xref:System.Runtime.Remoting.ObjectHandle> porusza się.</span><span class="sxs-lookup"><span data-stu-id="3c223-102">The <xref:System.Runtime.Remoting.ObjectHandle> class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the <xref:System.Runtime.Remoting.ObjectHandle> travels.</span></span> <span data-ttu-id="3c223-103">W związku z tym <xref:System.Runtime.Remoting.ObjectHandle> klasy zapewnia kontrolę wywołującego sytuacji, w których <xref:System.Type> obiektu zdalnego jest załadowany do domeny.</span><span class="sxs-lookup"><span data-stu-id="3c223-103">Thus, the <xref:System.Runtime.Remoting.ObjectHandle> class gives the caller control of when the <xref:System.Type> of the remote object is loaded into a domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3c223-104">W poniższym przykładzie przedstawiono sposób tworzenia obiektu w innym <xref:System.AppDomain>i pobrać serwer proxy do obiektu z <xref:System.Runtime.Remoting.ObjectHandle>.</span><span class="sxs-lookup"><span data-stu-id="3c223-104">The following code example shows how to create an object in another <xref:System.AppDomain>, and retrieve a proxy to the object from a <xref:System.Runtime.Remoting.ObjectHandle>.</span></span> <span data-ttu-id="3c223-105">W tym przykładzie można założyć, że kod `MyType` klasy jest kompilowany do zestawu o nazwie "ObjectHandleAssembly".</span><span class="sxs-lookup"><span data-stu-id="3c223-105">In this example, you can assume that the code of the `MyType` class is compiled into an assembly called "ObjectHandleAssembly".</span></span>  
  
 [!code-cpp[ObjectHandle#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ObjectHandle/CPP/objecthandleassembly.cpp#1)]
 [!code-csharp[ObjectHandle#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ObjectHandle/CS/objecthandleassembly.cs#1)]
 [!code-vb[ObjectHandle#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ObjectHandle/VB/objecthandleassembly.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectHandle (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (o As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectHandle(System::Object ^ o);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="3c223-106">Obiekt, który jest opakowane przez nowy <see cref="T:System.Runtime.Remoting.ObjectHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3c223-106">The object that is wrapped by the new <see cref="T:System.Runtime.Remoting.ObjectHandle" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3c223-107">Inicjuje wystąpienie klasy <see cref="T:System.Runtime.Remoting.ObjectHandle" /> klasy zawijania danego obiektu <paramref name="o" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3c223-107">Initializes an instance of the <see cref="T:System.Runtime.Remoting.ObjectHandle" /> class, wrapping the given object <paramref name="o" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3c223-108">Inicjuje dzierżawy okres istnienia obiektu opakowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3c223-108">Initializes the lifetime lease of the wrapped object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3c223-109">Zainicjowana klasa <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> która pozwala na kontrolowanie okres istnienia obiektu opakowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3c223-109">An initialized <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> that allows you to control the lifetime of the wrapped object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unwrap">
      <MemberSignature Language="C#" Value="public object Unwrap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Unwrap() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.ObjectHandle.Unwrap" />
      <MemberSignature Language="VB.NET" Value="Public Function Unwrap () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Unwrap();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Remoting.IObjectHandle.Unwrap</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3c223-110">Zwraca obiekt opakowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3c223-110">Returns the wrapped object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3c223-111">Obiekt opakowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3c223-111">The wrapped object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3c223-112">Poniższy przykład kodu pokazuje sposób aktywowania obiektu w innym <xref:System.AppDomain>, serwer proxy, aby go pobrać <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A> — metoda i Użyj serwera proxy dostępu do obiektu zdalnego.</span><span class="sxs-lookup"><span data-stu-id="3c223-112">The following code example demonstrates how to activate an object in another <xref:System.AppDomain>, retrieve a proxy to it with the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A> method, and use the proxy to access the remote object.</span></span>  
  
 [!code-cpp[ObjectHandle#2](~/samples/snippets/cpp/VS_Snippets_Remoting/ObjectHandle/CPP/objecthandleassembly.cpp#2)]
 [!code-csharp[ObjectHandle#2](~/samples/snippets/csharp/VS_Snippets_Remoting/ObjectHandle/CS/objecthandleassembly.cs#2)]
 [!code-vb[ObjectHandle#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ObjectHandle/VB/objecthandleassembly.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="3c223-113">A <see cref="T:System.Runtime.Remoting.ObjectHandle" /> jest zdalny <see cref="T:System.MarshalByRefObject" /> które są śledzone przez usługę okres istnienia komunikacji zdalnej.</span>
            <span class="sxs-lookup">
              <span data-stu-id="3c223-113">A <see cref="T:System.Runtime.Remoting.ObjectHandle" /> is a remoted <see cref="T:System.MarshalByRefObject" /> that is tracked by the remoting lifetime service.</span>
            </span>
            <span data-ttu-id="3c223-114">Wywołanie metody bieżącego może zakończyć się niepowodzeniem, jeśli okres istnienia dzierżawy na <see cref="T:System.Runtime.Remoting.ObjectHandle" /> wygaśnie.</span>
            <span class="sxs-lookup">
              <span data-stu-id="3c223-114">A call to the current method can fail if the lifetime lease on the <see cref="T:System.Runtime.Remoting.ObjectHandle" /> expires.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>