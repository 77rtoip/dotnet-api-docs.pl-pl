<Type Name="PipeSecurity" FullName="System.IO.Pipes.PipeSecurity">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3b0fbdbb9351b3a2965528503da7f4bb0f5cea4b" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53466575" /></Metadata><TypeSignature Language="C#" Value="public class PipeSecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PipeSecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.IO.Pipes.PipeSecurity" />
  <TypeSignature Language="VB.NET" Value="Public Class PipeSecurity&#xA;Inherits NativeObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class PipeSecurity : System::Security::AccessControl::NativeObjectSecurity" />
  <TypeSignature Language="F#" Value="type PipeSecurity = class&#xA;    inherit NativeObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje kontroli dostępu i inspekcji zabezpieczeń dla potoku.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Pipes.PipeSecurity> Klasa określa prawa dostępu do potoku i jak są poddawane inspekcji prób dostępu.  Ta klasa reprezentuje praw dostępu i inspekcji jako zestaw reguł. Każda reguła dostępu jest reprezentowany przez <xref:System.IO.Pipes.PipeAccessRule> obiektu, gdy każda reguła inspekcji jest reprezentowany przez <xref:System.IO.Pipes.PipeAuditRule> obiektu.  
  
 <xref:System.IO.Pipes.PipeSecurity> Klasa jest klasą abstrakcyjną Microsoft Windows pliku system zabezpieczeń. W tym systemie każdego potoku ma listy kontroli dostępu (DACL), które kontrolują dostęp do potoku, a system listy kontroli dostępu (SACL), który określa próby kontroli dostępu, które są poddawane inspekcji.  <xref:System.IO.Pipes.PipeAccessRule> i <xref:System.IO.Pipes.PipeAuditRule> klasy są abstrakcje wpisów kontroli dostępu (ACE), wchodzące w skład listy DACL i SACL.  
  
 <xref:System.IO.Pipes.PipeSecurity> Klasa ukrywa wiele szczegółów z listy DACL i SACL; nie trzeba się martwić o kolejność ACE lub DACL o wartości null.  
  
 Użyj <xref:System.IO.Pipes.PipeSecurity> klasy do pobrania, dodawać lub zmieniać reguł dostępu, które reprezentują listy DACL i SACL potoku.  
  
 Aby zachować dostęp do nowych lub zmodyfikowanych lub inspekcji reguły do potoku, użyj <xref:System.IO.Pipes.PipeStream.SetAccessControl%2A> metody. Aby pobrać dostępu lub inspekcji reguły z istniejącego pliku, użyj <xref:System.IO.Pipes.PipeStream.GetAccessControl%2A> metody.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PipeSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.PipeSecurity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PipeSecurity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IO.Pipes.PipeSecurity" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor tworzy pustą <xref:System.IO.Pipes.PipeSecurity> obiekt, który nie jest oparty na istniejących potoku. Można wypełnić obiektu za pomocą informacji dotyczących kontroli dostępu i zastosuj ją do potoku.  
  
 Można dodawać dostępu i inspekcji reguły <xref:System.IO.Pipes.PipeSecurity> przy użyciu <xref:System.IO.Pipes.PipeSecurity.AddAccessRule%2A> metody. Może spowodować usunięcie dostępu lub inspekcji przy użyciu reguł <xref:System.IO.Pipes.PipeSecurity.RemoveAccessRule%2A> metody.  
  
 Aby zachować dostęp do nowych lub zmodyfikowanych lub inspekcji reguły do potoku, użyj <xref:System.IO.Pipes.PipeStream.SetAccessControl%2A> metody. Aby pobrać dostępu lub inspekcji reguły z istniejącego pliku, użyj <xref:System.IO.Pipes.PipeStream.GetAccessControl%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.IO.Pipes.PipeSecurity.AccessRightType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRightType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRightType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRightType : Type" Usage="System.IO.Pipes.PipeSecurity.AccessRightType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Type" /> zabezpieczanego obiektu, który jest skojarzony z bieżącym <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektu.</summary>
        <value>Typ zabezpieczanego obiektu, który jest skojarzony z bieżącym <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy, które wynikają z <xref:System.Security.AccessControl.ObjectSecurity> klasy zastąpienie <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> właściwość i zwracany typ używają do reprezentowania praw dostępu. Podczas pracy z tablicami lub kolekcje zawierające wiele typów obiektów zabezpieczeń, należy użyć tej właściwości można określić typu wyliczenia poprawne za pomocą każdego obiektu zabezpieczeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.PipeSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AccessRule ^ AccessRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="override this.AccessRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.AccessRule" Usage="pipeSecurity.AccessRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference">Tożsamość, która dotyczy reguła dostępu. Musi to być obiekt, który może być rzutowany jako <see cref="T:System.Security.Principal.SecurityIdentifier" /> obiektu.</param>
        <param name="accessMask">Maska dostępu do tej reguły. Maski dostępu jest kolekcją 32-bitowych anonimowe bitów znaczenie jest definiowany przez poszczególne integratorzy</param>
        <param name="isInherited"><see langword="true" /> Jeśli ta reguła jest dziedziczona z kontenera nadrzędnego; w przeciwnym razie <see langword="false" />.</param>
        <param name="inheritanceFlags">Jedną z <see cref="T:System.Security.AccessControl.InheritanceFlags" /> wartości, które określa właściwości dziedziczenia regułę dostępu.</param>
        <param name="propagationFlags">Jedną z <see cref="T:System.Security.AccessControl.PropagationFlags" /> wartości, które określa, czy dostęp dziedziczony reguły są automatycznie propagowane. Flagi propagacji są ignorowane w przypadku <paramref name="inheritanceFlags" /> ustawiono <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
        <param name="type">Określa typ kontroli dostępu nie jest ważna.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.AccessRule" /> z określonymi wartościami.</summary>
        <returns><see cref="T:System.Security.AccessControl.AccessRule" /> Obiektu, który tworzy tę metodę.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zalecany sposób, aby utworzyć zasady kontroli dostępu jest użycie konstruktorów z <xref:System.IO.Pipes.PipeAccessRule> klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, lub <paramref name="type" /> określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identityReference" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="accessMask" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identityReference" /> nie jest ani typu <see cref="T:System.Security.Principal.SecurityIdentifier" /> ani typu, takie jak <see cref="T:System.Security.Principal.NTAccount" />, który można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.IO.Pipes.PipeSecurity.AccessRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRuleType : Type" Usage="System.IO.Pipes.PipeSecurity.AccessRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Type" /> obiektu, który jest skojarzony z zasadami dostępu do bieżącego <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektu.</summary>
        <value>Typ obiektu, który jest skojarzony z zasadami dostępu do bieżącego <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy, które wynikają z <xref:System.Security.AccessControl.ObjectSecurity> klasy zastąpienie <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> właściwość i zwracany typ używają do reprezentowania praw dostępu. Podczas pracy z tablicami lub kolekcje zawierające wiele typów obiektów zabezpieczeń, należy użyć tej właściwości można określić typu wyliczenia poprawne za pomocą każdego obiektu zabezpieczeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.IO.Pipes.PipeAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.IO.Pipes.PipeAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.PipeSecurity.AddAccessRule(System.IO.Pipes.PipeAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAccessRule (rule As PipeAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAccessRule(System::IO::Pipes::PipeAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAccessRule : System.IO.Pipes.PipeAccessRule -&gt; unit" Usage="pipeSecurity.AddAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.IO.Pipes.PipeAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">Reguły dostępu do dodania.</param>
        <summary>Dodaje reguły dostępu do arbitralnej kontroli dostępu listy (DACL) skojarzony z bieżącym <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Pipes.PipeSecurity.AddAccessRule%2A> Metoda dodaje nową regułę do listy reguł, <xref:System.IO.Pipes.PipeSecurity> zawiera obiekt. Jeśli dla określonej reguły listy kontroli dostępu (ACL) już istnieje <xref:System.IO.Pipes.PipeSecurity.AddAccessRule%2A> metoda będzie nadal dodawać reguły, z jednym wyjątkiem: <xref:System.IO.Pipes.PipeAccessRule> obiekt, który jest tworzony przy użyciu <xref:System.Security.AccessControl.AccessControlType.Deny> wartość zastępuje obiekt, który jest tworzony przy użyciu <xref:System.Security.AccessControl.AccessControlType.Allow> wartość.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> Parametr <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.IO.Pipes.PipeAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.IO.Pipes.PipeAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.PipeSecurity.AddAuditRule(System.IO.Pipes.PipeAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAuditRule (rule As PipeAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAuditRule(System::IO::Pipes::PipeAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAuditRule : System.IO.Pipes.PipeAuditRule -&gt; unit" Usage="pipeSecurity.AddAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.IO.Pipes.PipeAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">Zasady inspekcji do dodania.</param>
        <summary>Dodaje do systemu dostępu kontrolki listy (SACL) skojarzony z bieżącą regułę inspekcji <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Pipes.PipeSecurity.AddAuditRule%2A> Metoda dodaje nową regułę inspekcji listę reguł, <xref:System.IO.Pipes.PipeSecurity> zawiera obiekt.  
  
 Jeśli istnieje już reguła inspekcji dla określonej reguły <xref:System.IO.Pipes.PipeSecurity.AddAuditRule%2A> metoda będzie nadal dodawać reguły.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> Parametr <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override sealed System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.PipeSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AuditRule ^ AuditRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="override this.AuditRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.AuditRule" Usage="pipeSecurity.AuditRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference">Tożsamość, która dotyczy reguła dostępu. Musi to być obiekt, który może być rzutowany jako <see cref="T:System.Security.Principal.SecurityIdentifier" /> obiektu.</param>
        <param name="accessMask">Maska dostępu do tej reguły. Maski dostępu jest kolekcją 32-bitowych anonimowe bitów znaczenie jest definiowany przez poszczególne integratorzy</param>
        <param name="isInherited"><see langword="true" /> Jeśli ta reguła jest dziedziczona z kontenera nadrzędnego; w przeciwnym razie wartość false.</param>
        <param name="inheritanceFlags">Jedną z <see cref="T:System.Security.AccessControl.InheritanceFlags" /> wartości, które określa właściwości dziedziczenia regułę dostępu.</param>
        <param name="propagationFlags">Jedną z <see cref="T:System.Security.AccessControl.PropagationFlags" /> wartości, które określa, czy dostęp dziedziczony reguły są automatycznie propagowane. Flagi propagacji są ignorowane w przypadku <paramref name="inheritanceFlags" /> ustawiono <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
        <param name="flags">Jedną z <see cref="T:System.Security.AccessControl.AuditFlags" /> wartości, które określa prawidłowy dostęp kontrolować typu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.AuditRule" /> z określonymi wartościami.</summary>
        <returns><see cref="T:System.Security.AccessControl.AuditRule" /> Obiektu, który tworzy tę metodę.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zalecany sposób tworzenia zasad inspekcji jest użycie konstruktorów z <xref:System.IO.Pipes.PipeAuditRule> klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, Lub <paramref name="flags" /> właściwości określono nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identityReference" /> Właściwość <see langword="null" />.  
  
—lub— 
<paramref name="accessMask" /> Właściwość ma wartość zero.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identityReference" /> Właściwość nie jest ani typu <see cref="T:System.Security.Principal.SecurityIdentifier" /> ani typu, takie jak <see cref="T:System.Security.Principal.NTAccount" />, który można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.IO.Pipes.PipeSecurity.AuditRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AuditRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AuditRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuditRuleType : Type" Usage="System.IO.Pipes.PipeSecurity.AuditRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Type" /> obiekt skojarzony z zasadami inspekcji bieżącego <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektu.</summary>
        <value>Typ obiektu, który jest skojarzony z zasadami inspekcji bieżącego <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy, które wynikają z <xref:System.Security.AccessControl.ObjectSecurity> klasy zastąpienie <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> właściwość i zwracany typ używają do reprezentowania praw dostępu. Podczas pracy z tablicami lub kolekcje zawierające wiele typów obiektów zabezpieczeń, należy użyć tej właściwości można określić typu wyliczenia poprawne za pomocą każdego obiektu zabezpieczeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Persist">
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje określony sekcje deskryptora zabezpieczeń, który jest skojarzony z bieżącą <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektów w magazynie trwałym.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Persist">
      <MemberSignature Language="C#" Value="protected internal void Persist (System.Runtime.InteropServices.SafeHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void Persist(class System.Runtime.InteropServices.SafeHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.PipeSecurity.Persist(System.Runtime.InteropServices.SafeHandle)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub Persist (handle As SafeHandle)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void Persist(System::Runtime::InteropServices::SafeHandle ^ handle);" />
      <MemberSignature Language="F#" Value="override this.Persist : System.Runtime.InteropServices.SafeHandle -&gt; unit" Usage="pipeSecurity.Persist handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.Runtime.InteropServices.SafeHandle" />
      </Parameters>
      <Docs>
        <param name="handle">Uchwyt zabezpieczanego obiektu, który bieżącego <see cref="T:System.IO.Pipes.PipeSecurity" /> obiekt jest skojarzony.</param>
        <summary>Zapisuje określony sekcje deskryptora zabezpieczeń, który jest skojarzony z bieżącą <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektów w magazynie trwałym.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Persist">
      <MemberSignature Language="C#" Value="protected internal void Persist (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void Persist(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.PipeSecurity.Persist(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub Persist (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void Persist(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.Persist : string -&gt; unit" Usage="pipeSecurity.Persist name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa zabezpieczanego obiektu, który bieżącego <see cref="T:System.IO.Pipes.PipeSecurity" /> obiekt jest skojarzony.</param>
        <summary>Zapisuje określony sekcje deskryptora zabezpieczeń, który jest skojarzony z bieżącą <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektów w magazynie trwałym.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.IO.Pipes.PipeAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.IO.Pipes.PipeAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAccessRule (rule As PipeAccessRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAccessRule(System::IO::Pipes::PipeAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRule : System.IO.Pipes.PipeAccessRule -&gt; bool" Usage="pipeSecurity.RemoveAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.IO.Pipes.PipeAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">Reguły dostępu do usunięcia.</param>
        <summary>Usuwa regułę dostępu od arbitralnej kontroli dostępu listy (DACL) skojarzony z bieżącym <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektu.</summary>
        <returns><see langword="true" /> Jeśli operacja się powiedzie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Pipes.PipeSecurity.RemoveAccessRule%2A> Metoda usuwa wszystkie zgodne <xref:System.Security.AccessControl.AccessControlType.Deny> reguły dostępu lub wszystkie zgodne <xref:System.Security.AccessControl.AccessControlType.Allow> reguły dostępu z bieżącego <xref:System.IO.Pipes.PipeSecurity> obiektu. Na przykład możesz ta metoda służy do usunięcia wszystkich <xref:System.Security.AccessControl.AccessControlType.Deny> regułami dostępu do użytkownika, przekazując <xref:System.IO.Pipes.PipeAccessRule> obiekt utworzony za pomocą <xref:System.Security.AccessControl.AccessControlType.Deny> wartość <xref:System.IO.Pipes.PipeAccessRights.Read> wartość i konto użytkownika. <xref:System.IO.Pipes.PipeSecurity.RemoveAccessRule%2A> Metoda usuwa żadnych reguł odmowy, które określają <xref:System.IO.Pipes.PipeAccessRights.Read> wartość lub <xref:System.IO.Pipes.PipeAccessRights.Write> wartość.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> Parametr <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.IO.Pipes.PipeAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.IO.Pipes.PipeAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.PipeSecurity.RemoveAccessRuleSpecific(System.IO.Pipes.PipeAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleSpecific (rule As PipeAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleSpecific(System::IO::Pipes::PipeAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleSpecific : System.IO.Pipes.PipeAccessRule -&gt; unit" Usage="pipeSecurity.RemoveAccessRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.IO.Pipes.PipeAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">Reguły dostępu do usunięcia.</param>
        <summary>Usuwa regułę dostępu określonego od arbitralnej kontroli dostępu listy (DACL) skojarzony z bieżącym <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Pipes.PipeSecurity.RemoveAccessRule%2A> Metoda usuwa wszystkie zgodne <xref:System.Security.AccessControl.AccessControlType.Deny> reguły dostępu lub wszystkie zgodne <xref:System.Security.AccessControl.AccessControlType.Allow> reguły dostępu z bieżącego <xref:System.IO.Pipes.PipeSecurity> obiektu. Na przykład możesz ta metoda służy do usunięcia wszystkich <xref:System.Security.AccessControl.AccessControlType.Deny> regułami dostępu do użytkownika, przekazując <xref:System.IO.Pipes.PipeAccessRule> obiekt utworzony za pomocą <xref:System.Security.AccessControl.AccessControlType.Deny> wartość <xref:System.IO.Pipes.PipeAccessRights.Read> wartość i konto użytkownika. <xref:System.IO.Pipes.PipeSecurity.RemoveAccessRule%2A> Metoda usuwa żadnych reguł odmowy, które określają <xref:System.IO.Pipes.PipeAccessRights.Read> wartość lub <xref:System.IO.Pipes.PipeAccessRights.Write> wartość.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> Parametr <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.IO.Pipes.PipeAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.IO.Pipes.PipeAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.PipeSecurity.RemoveAuditRule(System.IO.Pipes.PipeAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAuditRule (rule As PipeAuditRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAuditRule(System::IO::Pipes::PipeAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRule : System.IO.Pipes.PipeAuditRule -&gt; bool" Usage="pipeSecurity.RemoveAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.IO.Pipes.PipeAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">Zasady inspekcji do usunięcia.</param>
        <summary>Usuwa regułę inspekcji z System dostępu do kontrolki listy (SACL) skojarzony z bieżącym <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektu.</summary>
        <returns><see langword="true" /> Jeśli zasada danych inspekcji została usunięta; w przeciwnym razie <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Pipes.PipeSecurity.RemoveAuditRule%2A> Metoda usuwa wszystkie zgodne <xref:System.Security.AccessControl.AccessControlType.Deny> zasady inspekcji lub wszystkie zgodne <xref:System.Security.AccessControl.AccessControlType.Allow> inspekcji reguły z bieżącej <xref:System.IO.Pipes.PipeSecurity> obiektu.  Na przykład możesz ta metoda służy do usunięcia wszystkich <xref:System.Security.AccessControl.AccessControlType.Deny> inspekcji zasad dla użytkownika, przekazując <xref:System.Security.AccessControl.FileSystemAuditRule> obiekt utworzony za pomocą <xref:System.Security.AccessControl.AccessControlType.Deny> wartość <xref:System.Security.AccessControl.AuditFlags.Failure> wartość i konto użytkownika.  Gdy to zrobisz, <xref:System.IO.Pipes.PipeSecurity.RemoveAuditRule%2A> metoda usuwa żadnych reguł odmowy, które określają <xref:System.Security.AccessControl.AuditFlags.Failure> wartość lub <xref:System.Security.AccessControl.AuditFlags.Success> wartość.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> Parametr <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.IO.Pipes.PipeAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.IO.Pipes.PipeAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleAll(System.IO.Pipes.PipeAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleAll (rule As PipeAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleAll(System::IO::Pipes::PipeAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleAll : System.IO.Pipes.PipeAuditRule -&gt; unit" Usage="pipeSecurity.RemoveAuditRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.IO.Pipes.PipeAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">Zasady inspekcji do usunięcia.</param>
        <summary>Usuwa wszystkie zasady inspekcji, które mają taki sam identyfikator zabezpieczeń jak reguły określonego inspekcji z System dostępu do kontrolki listy (SACL) skojarzony z bieżącą <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Pipes.PipeSecurity.RemoveAuditRuleAll%2A> Metoda usuwa wszystkie zasady inspekcji dla określonego użytkownika.  Ignoruje wszystkie wartości w <xref:System.IO.Pipes.PipeAuditRule> obiektu, z wyjątkiem konta użytkownika.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> Parametr <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.IO.Pipes.PipeAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.IO.Pipes.PipeAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleSpecific (rule As PipeAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleSpecific(System::IO::Pipes::PipeAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleSpecific : System.IO.Pipes.PipeAuditRule -&gt; unit" Usage="pipeSecurity.RemoveAuditRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.IO.Pipes.PipeAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">Zasady inspekcji do usunięcia.</param>
        <summary>Usuwa regułę określonego inspekcji z System dostępu do kontrolki listy (SACL) skojarzony z bieżącym <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific%2A> Metoda usuwa określony dopasowywania <xref:System.Security.AccessControl.AccessControlType.Deny> inspekcja, reguły lub określonego dopasowania <xref:System.Security.AccessControl.AccessControlType.Allow> zasady inspekcji z bieżącej <xref:System.IO.Pipes.PipeSecurity> obiektu.  Na przykład możesz ta metoda służy do usunięcia określonego <xref:System.Security.AccessControl.AccessControlType.Deny> zasady inspekcji dla użytkownika, przekazując <xref:System.Security.AccessControl.FileSystemAuditRule> obiekt utworzony za pomocą <xref:System.Security.AccessControl.AccessControlType.Deny> wartość <xref:System.Security.AccessControl.AuditFlags.Failure> wartość i konto użytkownika.  Gdy to zrobisz, <xref:System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific%2A> metoda usuwa tylko reguła odmowy, która określa <xref:System.Security.AccessControl.AuditFlags.Failure> wartość.  Nie powoduje usunięcia żadnych reguł odmowy, które określają <xref:System.Security.AccessControl.AuditFlags.Success> wartość.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> Parametr <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.IO.Pipes.PipeAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.IO.Pipes.PipeAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.PipeSecurity.ResetAccessRule(System.IO.Pipes.PipeAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAccessRule (rule As PipeAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetAccessRule(System::IO::Pipes::PipeAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.ResetAccessRule : System.IO.Pipes.PipeAccessRule -&gt; unit" Usage="pipeSecurity.ResetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.IO.Pipes.PipeAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">Reguły dostępu do dodania.</param>
        <summary>Usuwa wszystkie reguły dostępu w arbitralnej kontroli dostępu listy (DACL) skojarzony z bieżącym <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektu, a następnie dodaje regułę dostępu określonego programu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Pipes.PipeSecurity.ResetAccessRule%2A> Metoda dodaje reguły listę kontroli dostępu (ACL) kontroli dostępu określony lub zastępuje wszelkie identyczne reguły listy ACL, które odpowiadają `rule` parametru.  Na przykład jeśli `rule` parametr określa <xref:System.IO.Pipes.PipeAccessRights.Read> wartość i <xref:System.IO.Pipes.PipeSecurity.ResetAccessRule%2A> metoda znajdzie identyczne reguły listy ACL, która określa <xref:System.IO.Pipes.PipeAccessRights.Read> wartość identyczne reguły zostaną zastąpione.  Jeśli <xref:System.IO.Pipes.PipeSecurity.ResetAccessRule%2A> metoda znajdzie identyczne reguły listy ACL, która określa <xref:System.IO.Pipes.PipeAccessRights.Write> wartość taka sama zasada również zostaną zastąpione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> Parametr <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.IO.Pipes.PipeAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.IO.Pipes.PipeAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.PipeSecurity.SetAccessRule(System.IO.Pipes.PipeAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessRule (rule As PipeAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessRule(System::IO::Pipes::PipeAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAccessRule : System.IO.Pipes.PipeAccessRule -&gt; unit" Usage="pipeSecurity.SetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.IO.Pipes.PipeAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">Reguły można ustawić.</param>
        <summary>Ustawia regułę dostępu w arbitralnej kontroli dostępu listy (DACL) skojarzony z bieżącym <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Pipes.PipeSecurity.SetAccessRule%2A> Metoda dodaje reguły listę kontroli dostępu (ACL) kontroli dostępu określony lub zastępuje wszelkie identyczne reguły listy ACL, które odpowiadają <xref:System.IO.Pipes.PipeAccessRights> wartość `rule` parametru.  Na przykład jeśli `rule` parametr określa <xref:System.IO.Pipes.PipeAccessRights.Read> wartość i <xref:System.IO.Pipes.PipeSecurity.SetAccessRule%2A> metoda znajdzie identyczne reguły listy ACL, która określa <xref:System.IO.Pipes.PipeAccessRights.Read> wartość identyczne reguły zostaną zastąpione.  Jeśli <xref:System.IO.Pipes.PipeSecurity.SetAccessRule%2A> metoda znajdzie identyczne reguły listy ACL, która określa <xref:System.IO.Pipes.PipeAccessRights.Write> wartości, identyczne reguła nie zostanie zastąpiona.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> Parametr <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.IO.Pipes.PipeAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.IO.Pipes.PipeAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.PipeSecurity.SetAuditRule(System.IO.Pipes.PipeAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAuditRule (rule As PipeAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAuditRule(System::IO::Pipes::PipeAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAuditRule : System.IO.Pipes.PipeAuditRule -&gt; unit" Usage="pipeSecurity.SetAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.IO.Pipes.PipeAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">Reguły można ustawić.</param>
        <summary>Ustawia zasady inspekcji w System dostępu do kontrolki listy (SACL) skojarzony z bieżącym <see cref="T:System.IO.Pipes.PipeSecurity" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Pipes.PipeSecurity.SetAuditRule%2A> Metoda Dodaje regułę określonego inspekcji lub zastępuje żadnych reguł identyczne inspekcji, które pasują <xref:System.IO.Pipes.PipeAccessRights> wartość `rule` parametru.  Na przykład jeśli `rule` parametr określa <xref:System.IO.Pipes.PipeAccessRights.Read> wartość i <xref:System.IO.Pipes.PipeSecurity.SetAuditRule%2A> metoda znajdzie regułę identyczne inspekcji, która określa <xref:System.IO.Pipes.PipeAccessRights.Read> wartość identyczne reguły zostaną zastąpione.  Jeśli <xref:System.IO.Pipes.PipeSecurity.SetAuditRule%2A> metoda znajdzie regułę identyczne inspekcji, która określa <xref:System.IO.Pipes.PipeAccessRights.Write> wartości, identyczne reguła nie zostanie zastąpiona.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> Parametr <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>