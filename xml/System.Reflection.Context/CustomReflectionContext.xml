<Type Name="CustomReflectionContext" FullName="System.Reflection.Context.CustomReflectionContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9e43f354e0b6a5d442e4029130d5e39757891bb1" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69071247" /></Metadata><TypeSignature Language="C#" Value="public abstract class CustomReflectionContext : System.Reflection.ReflectionContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CustomReflectionContext extends System.Reflection.ReflectionContext" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Context.CustomReflectionContext" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CustomReflectionContext&#xA;Inherits ReflectionContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class CustomReflectionContext abstract : System::Reflection::ReflectionContext" />
  <TypeSignature Language="F#" Value="type CustomReflectionContext = class&#xA;    inherit ReflectionContext" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Context</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.ReflectionContext</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje kontekst odbicia, który można dostosować.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Reflection.Context.CustomReflectionContext>zapewnia sposób dodawania lub usuwania atrybutów niestandardowych z obiektów odbicia lub dodawania fikcyjnych właściwości do tych obiektów, bez konieczności ponownego wdrażania kompletnego modelu odbicia. Domyślnie <xref:System.Reflection.Context.CustomReflectionContext> po prostu otacza obiekty odbicia bez wprowadzania żadnych zmian, ale przez podklasę i zastępowanie odpowiednich metod, można dodawać, usuwać lub zmieniać atrybuty, które mają zastosowanie do dowolnego odbicia parametru lub elementu członkowskiego, lub dodawać nowe właściwości do typ odbicia.  
  
 Załóżmy na przykład, że kod jest zgodny z Konwencją stosowania określonego atrybutu do metod fabrycznych, ale teraz wymagane jest współdziałanie z kodem innej firmy, który nie ma atrybutów. Możesz użyć <xref:System.Reflection.Context.CustomReflectionContext> , aby określić regułę służącą do identyfikowania obiektów, które powinny mieć atrybuty, oraz do dostarczania obiektów z tymi atrybutami, gdy są one wyświetlane w kodzie.  
  
 Aby efektywnie <xref:System.Reflection.Context.CustomReflectionContext> korzystać z programu, kod, który używa odzwierciedlonych obiektów, musi obsługiwać koncepcję określania kontekstu odbicia, zamiast przy założeniu, że wszystkie odbite obiekty są skojarzone z kontekstem odbicia środowiska uruchomieniowego. Wiele metod odbicia w .NET Framework dostarcza <xref:System.Reflection.ReflectionContext> do tego celu parametru.  
  
 Aby zmodyfikować atrybuty, które są stosowane do odbitego parametru lub elementu członkowskiego <xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%28System.Reflection.ParameterInfo%2CSystem.Collections.Generic.IEnumerable%7BSystem.Object%7D%29> , <xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%28System.Reflection.MemberInfo%2CSystem.Collections.Generic.IEnumerable%7BSystem.Object%7D%29> Zastąp metodę or. Te metody przyjmują obiekt odbity i listę atrybutów pod jego bieżącym kontekstem odbicia i zwracają listę atrybutów, które powinny znajdować się w kontekście odbicia niestandardowego.  
  
> [!WARNING]
>  <xref:System.Reflection.Context.CustomReflectionContext>metody nie powinny mieć dostępu do listy atrybutów obiektu lub metody <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> odbitego bezpośrednio przez wywołanie metody dla podanego <xref:System.Reflection.MemberInfo> lub <xref:System.Reflection.ParameterInfo> wystąpienia, ale zamiast tego należy użyć `declaredAttributes` listy, która jest przekazywany jako parametr do przeciążenia <xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%2A> metody.  
  
 Aby dodać właściwości do typu odbicia, Zastąp <xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A> metodę. Metoda akceptuje parametr, który określa typ odbicia, i zwraca listę dodatkowych właściwości. Należy użyć metody, <xref:System.Reflection.Context.CustomReflectionContext.CreateProperty%2A> aby utworzyć obiekty właściwości do zwrócenia. Można określić delegatów podczas tworzenia właściwości, która będzie stanowić metodę dostępu do właściwości, i można pominąć jeden z metod dostępu, aby utworzyć właściwość tylko do odczytu lub tylko do zapisu. Należy zauważyć, że takie właściwości fikcyjne nie mają kopii zapasowej ani wspólnego języka pośredniego (CIL).  
  
> [!WARNING]
>  Należy zachować ostrożność w odróżnieniu od obiektów odbitej podczas pracy z kontekstami odbicia, ponieważ obiekty mogą reprezentować ten sam obiekt odbity w wielu kontekstach. Możesz użyć metody, <xref:System.Reflection.Context.CustomReflectionContext.MapType%2A> Aby uzyskać określony kontekst odbicia w wersji obiektu odbicia.  
  
> [!WARNING]
>  Obiekt zmienia atrybuty zwracane przez określony obiekt odbicia, taki jak te uzyskane <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> przez metodę. <xref:System.Reflection.Context.CustomReflectionContext> Nie modyfikuje danych atrybutów niestandardowych zwracanych przez <xref:System.Reflection.MemberInfo.GetCustomAttributesData%2A> metodę, a te dwie listy nie będą zgodne w przypadku używania niestandardowego kontekstu odbicia.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób tworzenia podklasy <xref:System.Reflection.Context.CustomReflectionContext> w celu dodania atrybutu niestandardowego do wszystkich elementów członkowskich danego typu, których nazwy zaczynają się od "do". Aby uruchomić ten kod, wklej go do pustego projektu konsoli i upewnij się, że dołączysz odwołanie do System. odbicie. Context. dll.  
  
 [!code-csharp[System.Reflection.Context.CustomReflectionContext#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.context.customreflectioncontext/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Context</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Reflection.Context.CustomReflectionContext" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CustomReflectionContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Context.CustomReflectionContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CustomReflectionContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Context</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Reflection.Context.CustomReflectionContext" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CustomReflectionContext (System.Reflection.ReflectionContext source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Reflection.ReflectionContext source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Context.CustomReflectionContext.#ctor(System.Reflection.ReflectionContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (source As ReflectionContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CustomReflectionContext(System::Reflection::ReflectionContext ^ source);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Context.CustomReflectionContext : System.Reflection.ReflectionContext -&gt; System.Reflection.Context.CustomReflectionContext" Usage="new System.Reflection.Context.CustomReflectionContext source" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Context</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.Reflection.ReflectionContext" />
      </Parameters>
      <Docs>
        <param name="source">Kontekst odbicia, który ma być używany jako baza.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Reflection.Context.CustomReflectionContext" /> klasy z określonym kontekstem odbicia jako baza.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddProperties">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.PropertyInfo&gt; AddProperties (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.PropertyInfo&gt; AddProperties(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Reflection::PropertyInfo ^&gt; ^ AddProperties(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member AddProperties : Type -&gt; seq&lt;System.Reflection.PropertyInfo&gt;&#xA;override this.AddProperties : Type -&gt; seq&lt;System.Reflection.PropertyInfo&gt;" Usage="customReflectionContext.AddProperties type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Context</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Reflection.Context.CustomReflectionContext/&lt;AddProperties&gt;d__1))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Reflection.Context.CustomReflectionContext/&lt;AddProperties&gt;d__8))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.PropertyInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Typ, do którego mają zostać dodane właściwości.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, zawiera kolekcję dodatkowych właściwości określonego typu, które są reprezentowane w tym kontekście odbicia.</summary>
        <returns>Kolekcja dodatkowych właściwości określonego typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zastąp tę metodę, aby określić, które właściwości powinny zostać dodane do danego typu. Aby utworzyć właściwości, użyj <xref:System.Reflection.Context.CustomReflectionContext.CreateProperty%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateProperty">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Context</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy obiekt, który reprezentuje właściwość, która ma zostać dodana do typu, jak określono przez <see cref="M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)" /> metodę.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateProperty">
      <MemberSignature Language="C#" Value="protected System.Reflection.PropertyInfo CreateProperty (Type propertyType, string name, Func&lt;object,object&gt; getter, Action&lt;object,object&gt; setter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Reflection.PropertyInfo CreateProperty(class System.Type propertyType, string name, class System.Func`2&lt;object, object&gt; getter, class System.Action`2&lt;object, object&gt; setter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Function CreateProperty (propertyType As Type, name As String, getter As Func(Of Object, Object), setter As Action(Of Object, Object)) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Reflection::PropertyInfo ^ CreateProperty(Type ^ propertyType, System::String ^ name, Func&lt;System::Object ^, System::Object ^&gt; ^ getter, Action&lt;System::Object ^, System::Object ^&gt; ^ setter);" />
      <MemberSignature Language="F#" Value="member this.CreateProperty : Type * string * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; -&gt; System.Reflection.PropertyInfo" Usage="customReflectionContext.CreateProperty (propertyType, name, getter, setter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Context</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="getter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="setter" Type="System.Action&lt;System.Object,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyType">Typ właściwości do utworzenia.</param>
        <param name="name">Nazwa właściwości do utworzenia.</param>
        <param name="getter">Obiekt, który reprezentuje <see langword="get" /> metodę dostępu do właściwości.</param>
        <param name="setter">Obiekt, który reprezentuje <see langword="set" /> metodę dostępu do właściwości.</param>
        <summary>Tworzy obiekt, który reprezentuje właściwość, która ma zostać dodana do typu, która ma być używana z <see cref="M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)" /> metodą.</summary>
        <returns>Obiekt, który reprezentuje właściwość.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obiekty, które są zwracane przez tę metodę, nie <xref:System.Reflection.PropertyInfo> są kompletnymi obiektami i powinny być używane tylko w kontekście <xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateProperty">
      <MemberSignature Language="C#" Value="protected System.Reflection.PropertyInfo CreateProperty (Type propertyType, string name, Func&lt;object,object&gt; getter, Action&lt;object,object&gt; setter, System.Collections.Generic.IEnumerable&lt;Attribute&gt; propertyCustomAttributes, System.Collections.Generic.IEnumerable&lt;Attribute&gt; getterCustomAttributes, System.Collections.Generic.IEnumerable&lt;Attribute&gt; setterCustomAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Reflection.PropertyInfo CreateProperty(class System.Type propertyType, string name, class System.Func`2&lt;object, object&gt; getter, class System.Action`2&lt;object, object&gt; setter, class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; propertyCustomAttributes, class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; getterCustomAttributes, class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; setterCustomAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})" />
      <MemberSignature Language="VB.NET" Value="Protected Function CreateProperty (propertyType As Type, name As String, getter As Func(Of Object, Object), setter As Action(Of Object, Object), propertyCustomAttributes As IEnumerable(Of Attribute), getterCustomAttributes As IEnumerable(Of Attribute), setterCustomAttributes As IEnumerable(Of Attribute)) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Reflection::PropertyInfo ^ CreateProperty(Type ^ propertyType, System::String ^ name, Func&lt;System::Object ^, System::Object ^&gt; ^ getter, Action&lt;System::Object ^, System::Object ^&gt; ^ setter, System::Collections::Generic::IEnumerable&lt;Attribute ^&gt; ^ propertyCustomAttributes, System::Collections::Generic::IEnumerable&lt;Attribute ^&gt; ^ getterCustomAttributes, System::Collections::Generic::IEnumerable&lt;Attribute ^&gt; ^ setterCustomAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateProperty : Type * string * Func&lt;obj, obj&gt; * Action&lt;obj, obj&gt; * seq&lt;Attribute&gt; * seq&lt;Attribute&gt; * seq&lt;Attribute&gt; -&gt; System.Reflection.PropertyInfo" Usage="customReflectionContext.CreateProperty (propertyType, name, getter, setter, propertyCustomAttributes, getterCustomAttributes, setterCustomAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Context</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="getter" Type="System.Func&lt;System.Object,System.Object&gt;" />
        <Parameter Name="setter" Type="System.Action&lt;System.Object,System.Object&gt;" />
        <Parameter Name="propertyCustomAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;" />
        <Parameter Name="getterCustomAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;" />
        <Parameter Name="setterCustomAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyType">Typ właściwości do utworzenia.</param>
        <param name="name">Nazwa właściwości do utworzenia.</param>
        <param name="getter">Obiekt, który reprezentuje <see langword="get" /> metodę dostępu do właściwości.</param>
        <param name="setter">Obiekt, który reprezentuje <see langword="set" /> metodę dostępu do właściwości.</param>
        <param name="propertyCustomAttributes">Kolekcja atrybutów niestandardowych, które mają zostać zastosowane do właściwości.</param>
        <param name="getterCustomAttributes">Kolekcja atrybutów niestandardowych, które mają zostać zastosowane do <see langword="get" /> metody dostępu do właściwości.</param>
        <param name="setterCustomAttributes">Kolekcja atrybutów niestandardowych, które mają zostać zastosowane do <see langword="set" /> metody dostępu do właściwości.</param>
        <summary>Tworzy obiekt, który reprezentuje właściwość, która ma zostać dodana do typu, do użycia z <see cref="M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)" /> metodą i przy użyciu określonych atrybutów niestandardowych.</summary>
        <returns>Obiekt, który reprezentuje właściwość.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obiekty, które są zwracane przez tę metodę, nie <xref:System.Reflection.PropertyInfo> są kompletnymi obiektami i powinny być używane tylko w kontekście <xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Context</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gdy jest zastępowany w klasie pochodnej, zapewnia zmodyfikowaną kolekcję atrybutów niestandardowych dla określonego obiektu, jak to zostało reprezentowane w tym kontekście odbicia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;object&gt; GetCustomAttributes (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;object&gt; declaredAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; GetCustomAttributes(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;object&gt; declaredAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetCustomAttributes (member As MemberInfo, declaredAttributes As IEnumerable(Of Object)) As IEnumerable(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ GetCustomAttributes(System::Reflection::MemberInfo ^ member, System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ declaredAttributes);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : System.Reflection.MemberInfo * seq&lt;obj&gt; -&gt; seq&lt;obj&gt;&#xA;override this.GetCustomAttributes : System.Reflection.MemberInfo * seq&lt;obj&gt; -&gt; seq&lt;obj&gt;" Usage="customReflectionContext.GetCustomAttributes (member, declaredAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Context</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="declaredAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="member">Element członkowski, którego atrybuty niestandardowe zostaną zwrócone.</param>
        <param name="declaredAttributes">Kolekcja atrybutów elementu członkowskiego w jego bieżącym kontekście.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, zawiera listę atrybutów niestandardowych dla określonego elementu członkowskiego, jak to zostało reprezentowane w tym kontekście odbicia.</summary>
        <returns>Kolekcja, która reprezentuje atrybuty niestandardowe określonego elementu członkowskiego w tym kontekście odbicia.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;object&gt; GetCustomAttributes (System.Reflection.ParameterInfo parameter, System.Collections.Generic.IEnumerable&lt;object&gt; declaredAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; GetCustomAttributes(class System.Reflection.ParameterInfo parameter, class System.Collections.Generic.IEnumerable`1&lt;object&gt; declaredAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetCustomAttributes (parameter As ParameterInfo, declaredAttributes As IEnumerable(Of Object)) As IEnumerable(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ GetCustomAttributes(System::Reflection::ParameterInfo ^ parameter, System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ declaredAttributes);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : System.Reflection.ParameterInfo * seq&lt;obj&gt; -&gt; seq&lt;obj&gt;&#xA;override this.GetCustomAttributes : System.Reflection.ParameterInfo * seq&lt;obj&gt; -&gt; seq&lt;obj&gt;" Usage="customReflectionContext.GetCustomAttributes (parameter, declaredAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Context</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Reflection.ParameterInfo" />
        <Parameter Name="declaredAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="parameter">Parametr, którego atrybuty niestandardowe zostaną zwrócone.</param>
        <param name="declaredAttributes">Kolekcja atrybutów parametru w bieżącym kontekście.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, zawiera listę atrybutów niestandardowych dla określonego parametru, jak to zostało przedstawione w tym kontekście odbicia.</summary>
        <returns>Kolekcja, która reprezentuje atrybuty niestandardowe określonego parametru w tym kontekście odbicia.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapAssembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly MapAssembly (System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.Assembly MapAssembly(class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::Assembly ^ MapAssembly(System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="override this.MapAssembly : System.Reflection.Assembly -&gt; System.Reflection.Assembly" Usage="customReflectionContext.MapAssembly assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Context</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="assembly">Zewnętrzna reprezentacja zestawu do reprezentowania w tym kontekście.</param>
        <summary>Pobiera reprezentację w tym kontekście odbicia zestawu, który jest reprezentowany przez obiekt z innego kontekstu odbicia.</summary>
        <returns>Reprezentacja zestawu w tym kontekście odbicia.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapType">
      <MemberSignature Language="C#" Value="public override System.Reflection.TypeInfo MapType (System.Reflection.TypeInfo type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.TypeInfo MapType(class System.Reflection.TypeInfo type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MapType (type As TypeInfo) As TypeInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::TypeInfo ^ MapType(System::Reflection::TypeInfo ^ type);" />
      <MemberSignature Language="F#" Value="override this.MapType : System.Reflection.TypeInfo -&gt; System.Reflection.TypeInfo" Usage="customReflectionContext.MapType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Context</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Reflection.TypeInfo" />
      </Parameters>
      <Docs>
        <param name="type">Zewnętrzna reprezentacja typu do reprezentowania w tym kontekście.</param>
        <summary>Pobiera reprezentację w tym kontekście odbicia typu reprezentowanego przez obiekt z innego kontekstu odbicia.</summary>
        <returns>Reprezentacja typu w tym kontekście odbicia.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
