<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ee316ef3ec27328f2bc24551645b838749d2540a" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69168068" /></Metadata><TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <TypeSignature Language="F#" Value="type WindowInteropHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Pomaga współdziałać między Windows Presentation Foundation (WPF) i kodem Win32.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy członkowskie tej klasy umożliwiają wywołującemu dostęp [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] wewnętrzny do elementu HWND i nadrzędnej wartości HWND [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>elementu.  Odpowiednie sprawdzenia zabezpieczeń są wykonywane przez tych członków.  
  
 Użyj tej klasy, gdy potrzebujesz bardziej szczegółowego obiektu na podstawie jego HWND.  
  
 Przykładowy scenariusz jest potrzebny do hostowania [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] okna dialogowego [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] w aplikacji. <xref:System.Windows.Interop.WindowInteropHelper> Inicjowanie zobiektem[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window okna dialogowego. Następnie można uzyskać [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] uchwyt okna (HWND) <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> z właściwości i [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] określić właściciela okna z <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> właściwością. Poniższy przykład kodu pokazuje, <xref:System.Windows.Interop.WindowInteropHelper> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] jak używać podczas udostępniania okna dialogowego w [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] aplikacji.  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 Innym scenariuszem obsługiwanym przez tę klasę jest uzyskanie <xref:System.Windows.Interop.HwndSource> obiektu [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> z obiektu. Włącza bezpośrednie przetwarzanie komunikatów za pośrednictwem <xref:System.Windows.Interop.HwndSource.AddHook%2A>metody. [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] <xref:System.Windows.Interop.HwndSource> Przy użyciu <xref:System.Windows.Interop.HwndSource> i <xref:System.Windows.Interop.HwndSource.AddHook%2A> zamiast <xref:System.Windows.Window> tego można nadal obsługiwać komunikaty, które nie mają odpowiednika ani obsługi w programie [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. <xref:System.Windows.Interop.WindowInteropHelper> Utwórz <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> <xref:System.Windows.Interop.HwndSource>ze źródłem, a następnie Wywołaj metodę, AbyuzyskaćodelementuHWNDdo.<xref:System.Windows.Interop.WindowInteropHelper> <xref:System.Windows.Window>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberSignature Language="F#" Value="new System.Windows.Interop.WindowInteropHelper : System.Windows.Window -&gt; System.Windows.Interop.WindowInteropHelper" Usage="new System.Windows.Interop.WindowInteropHelper window" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window">Obiekt [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] okna.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Interop.WindowInteropHelper" /> klasy dla określonego [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Okno może być oknem dialogowym lub oknem, które w przeciwnym razie nie jest odpowiednie do obsługiwania w granicach [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] aplikacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberSignature Language="F#" Value="member this.EnsureHandle : unit -&gt; nativeint" Usage="windowInteropHelper.EnsureHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy właściwość HWND okna, jeśli właściwość HWND nie została jeszcze utworzona.</summary>
        <returns><see cref="T:System.IntPtr" /> Reprezentuje właściwość HWND.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> , jeśli chcesz oddzielić tworzenie uchwytu okna (HWND) z rzeczywistej wyświetlania zarządzanego. <xref:System.Windows.Window> Jest to przydatne, gdy masz klienta automatyzacji, który może wykonywać swoje zadania bez potrzeby wyświetlania okna.  
  
 Jeśli okno natywne nie zostało jeszcze utworzone, ta metoda tworzy okno natywne, ustawia <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> Właściwość i zwraca wartość HWND. Jeśli okno natywne zostało już utworzone, zostanie zwrócone dojście istniejącego okna natywnego.  
  
 Jeśli okno natywne zostanie utworzone w wyniku wywołania tej metody, <xref:System.Windows.Window.SourceInitialized> zdarzenie jest zgłaszane.  
  
 Wykonywanie zapytania o <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> właściwość po wywołaniu metody zwraca istniejący uchwyt okna. <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> Drzewo wizualne nie jest dołączone do okna, dopóki nie <xref:System.Windows.Window.Show%2A> zostanie wywołana metoda.  
  
 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> Wywołanie metody więcej niż jeden raz nie powoduje utworzenia nowego uchwytu okna. Wywołanie metody, gdy dojście zostało już utworzone przez wywołanie <xref:System.Windows.Window.Show%2A> metody nie powoduje utworzenia nowego uchwytu okna. <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> Okno natywne jest tworzone <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> tylko wtedy, gdy metoda jest wywoływana.  
  
 Właściwości okna, które są ustawiane przy użyciu interfejsów API okna natywnego za pomocą p/Invoke, mogą nie być wyświetlane w interfejsach API okna zarządzanego. Na przykład, jeśli okno ma być najwyższej wartości przy użyciu flagi natywnej MS_EX_TOPMOST po <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> wywołaniu metody <xref:System.Windows.Window.Topmost%2A> , właściwość nie będzie zagwarantować ustawienia natywnego.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Aby utworzyć uchwyt okna i uzyskać do niego dostęp. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera uchwyt okna dla okna, [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] które jest używane do utworzenia tego <see cref="T:System.Windows.Interop.WindowInteropHelper" />elementu.</summary>
        <value>Uchwyt [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] okna (HWND).</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Aby uzyskać uchwyt okna. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : nativeint with get, set" Usage="System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia uchwyt [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] okna właściciela.</summary>
        <value>Uchwyt okna właściciela (HWND).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można zmienić nadrzędne okna przez ustawienie tej właściwości. Podobnie jak w przypadku ogólnego [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] programowania, nie należy odłączać się do okien nadrzędnych, które są już używane.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Aby pobrać lub ustawić tę wartość właściwości. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>
