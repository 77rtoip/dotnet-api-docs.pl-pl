<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f4336638cdf2fb1c5cf7d47bec3e51e24af0b3fb" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64994524" /></Metadata><TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <TypeSignature Language="F#" Value="type WindowInteropHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ułatwia współdziałanie Windows Presentation Foundation (WPF) i systemu Win32.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy członkowskie tej klasy umożliwia obiektowi wywołującemu, dostęp do wewnętrznych [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND i element nadrzędny HWND z [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.  Właściwe zabezpieczenia są sprawdzane przez tych członków.  
  
 Klasa jest używana zawsze, gdy potrzebujesz więcej określonego obiektu, w oparciu o jego właściwości HWND.  
  
 Przykładowy scenariusz jest, jeśli musisz hostować [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] okno dialogowe w [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] aplikacji. Inicjowanie <xref:System.Windows.Interop.WindowInteropHelper> z [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] obiekt okna dla okna dialogowego. Następnie możesz uzyskać [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] uchwyt okna (HWND) z <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> właściwości i określ właściciela dla [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] okno z <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> właściwości. Poniższy przykład kodu pokazuje sposób użycia <xref:System.Windows.Interop.WindowInteropHelper> hostując [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] okno dialogowe w [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] aplikacji.  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 Inny scenariusz obsługiwane przez tę klasę jest uzyskanie <xref:System.Windows.Interop.HwndSource> obiektu z [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> obiektu. <xref:System.Windows.Interop.HwndSource> Umożliwia bezpośrednie przetwarzanie [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] komunikaty za pośrednictwem <xref:System.Windows.Interop.HwndSource.AddHook%2A> metody. Za pomocą <xref:System.Windows.Interop.HwndSource> i <xref:System.Windows.Interop.HwndSource.AddHook%2A> zamiast <xref:System.Windows.Window> nadal może obsługiwać komunikaty, które mają nie jest równorzędny lub obsługa w [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Tworzenie <xref:System.Windows.Interop.WindowInteropHelper> z <xref:System.Windows.Window> źródła, a następnie wywołaj <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> na <xref:System.Windows.Interop.WindowInteropHelper> można pobrać z HWND do <xref:System.Windows.Interop.HwndSource>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberSignature Language="F#" Value="new System.Windows.Interop.WindowInteropHelper : System.Windows.Window -&gt; System.Windows.Interop.WindowInteropHelper" Usage="new System.Windows.Interop.WindowInteropHelper window" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window">A [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] obiekt okna.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Interop.WindowInteropHelper" /> klasy do określonego [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Może być okna, okno dialogowe lub okno które nie jest odpowiednia do hostowany w granicach [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] aplikacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberSignature Language="F#" Value="member this.EnsureHandle : unit -&gt; nativeint" Usage="windowInteropHelper.EnsureHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy HWND okna, jeśli HWND nie został jeszcze utworzony.</summary>
        <returns><see cref="T:System.IntPtr" /> Reprezentujący HWND.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> metody, gdy chcesz oddzielić tworzenie uchwytu (HWND) okien z rzeczywistych przedstawiający zarządzaną <xref:System.Windows.Window>. Jest to przydatne, jeśli masz klienta automatyzacji, które można wykonać jego zadań podrzędnych, bez konieczności wyświetlania okna.  
  
 Jeśli okno natywne nie została jeszcze utworzona, ta metoda tworzy okna natywnych zestawów <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> właściwości i zwraca HWND. Jeśli utworzono już natywnych okna, jest zwracany uchwyt okna istniejących natywnych.  
  
 Jeśli utworzono natywnych okno wyniku wywołanie tej metody <xref:System.Windows.Window.SourceInitialized> zdarzenie jest wywoływane.  
  
 Podczas badania <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> właściwości po <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> metoda jest wywoływana, zwraca istniejący uchwyt okna. Drzewo wizualne nie jest dołączony do okna aż po <xref:System.Windows.Window.Show%2A> metoda jest wywoływana.  
  
 Wywoływanie <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> metoda więcej niż jeden raz nie powoduje utworzenia nowego okna obsługi. Wywoływanie <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> uchwyt został już utworzony przez wywołanie metody <xref:System.Windows.Window.Show%2A> metoda nie powoduje utworzenia nowego uchwyt okna. Natywne okna jest tworzony tylko, jeśli uchwyt nie istnieje podczas <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> metoda jest wywoływana.  
  
 Właściwości okna, które są skonfigurowane przy użyciu okna natywnych interfejsów API za pośrednictwem p/invoke nie może występować w oknie zarządzanych interfejsów API. Na przykład jeśli ustawisz okna najwyższego poziomu za pomocą natywnego flagi MS_EX_TOPMOST po <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> metoda jest wywoływana, <xref:System.Windows.Window.Topmost%2A> właściwość nie jest gwarantowana aby odzwierciedlić ustawienie natywnych.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Aby utworzyć i zapisać uchwyt okna. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera uchwytu okna dla [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] okna, w którym jest używany do utworzenia tego <see cref="T:System.Windows.Interop.WindowInteropHelper" />.</summary>
        <value>[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] Uchwyt okna (HWND).</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">można uzyskać dojścia do okna. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : nativeint with get, set" Usage="System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia dojście [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] okno właściciela.</summary>
        <value>Uchwyt okna właściciela (HWND).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przez ustawienie tej właściwości można zmienić elementu nadrzędnego systemu windows. Podobnie jak ma wartość true dla ogólnych [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] programowania, nie Zmień obiekt nadrzędny dla systemu windows, które są już używane.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Aby pobrać lub ustawić wartość tej właściwości. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>