<Type Name="PackageStore" FullName="System.IO.Packaging.PackageStore">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cb63b9884469dab5119b479d4d26748d23cfa155" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52224898" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class PackageStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed PackageStore extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackageStore" />
  <TypeSignature Language="VB.NET" Value="Public Class PackageStore" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackageStore abstract sealed" />
  <TypeSignature Language="F#" Value="type PackageStore = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje kolekcję specyficzne dla aplikacji <see cref="T:System.IO.Packaging.Package" /> w połączeniu z wystąpieniami <see cref="T:System.IO.Packaging.PackWebRequest" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackageStore> Definiuje kolekcje odwołanie do pakietu, które są otwarte i aktywne w aplikacji.  Dodano do pakiety <xref:System.IO.Packaging.PackageStore> są dostępne jest według kluczy wartości identyfikatora URI.  <xref:System.IO.Packaging.PackageStore> Obsługuje trzy typowe zastosowania:  
  
1.  Uzyskiwanie dostępu do <xref:System.IO.Packaging.PackagePart> danych za pośrednictwem <xref:System.IO.Packaging.PackWebRequest>.  
  
2.  Aplikacja uzyskiwanie wystąpienia <xref:System.IO.Packaging.Package> dany identyfikator URI pakietu.  
  
3.  Uzyskiwanie dostępu do pakietów, które są tworzone i przechowywane w <xref:System.IO.MemoryStream>.  
  
 Aby zwiększyć wydajność i koszty związane z operacji na plikach powtarzanych otwarcie i zamknięcie, minimalizowanie <xref:System.IO.Packaging.PackageStore> służy do zarządzania wystąpieniami uzyskiwał dostęp do pakietów <xref:System.IO.Packaging.PackWebRequest> i bezpośrednio przez aplikację.  Podczas uzyskiwania dostępu do danych w pakiecie, <xref:System.IO.Packaging.Package> adres zażądano <xref:System.IO.Packaging.PackagePart> <xref:System.IO.Packaging.PackagePart.Uri%2A> najpierw jest sprawdzane, aby sprawdzić, czy pakiet jest już zdefiniowane i Otwórz w programie <xref:System.IO.Packaging.PackageStore>.  Jeśli pakiet został zdefiniowany jako otwarty w <xref:System.IO.Packaging.PackageStore>, żądane dostępne bezpośrednio bez wielokrotnym otwieraniem i zamykaniem pakietu dla każdego żądania.  
  
 Jeśli Twoja aplikacja zostanie otwarta pakietu o <xref:System.IO.Packaging.Package.Open%2A?displayProperty=nameWithType>, <xref:System.IO.Packaging.PackageStore.AddPackage%2A> może być wywoływana, aby dodać pakiet do <xref:System.IO.Packaging.PackageStore>.  <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> później być wywoływana, aby usunąć pakiet z <xref:System.IO.Packaging.PackageStore> przed wywołaniem <xref:System.IO.Packaging.Package.Close%2A?displayProperty=nameWithType>.  
  
 Pakiety XPS otwartej z <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> Konstruktor są automatycznie dodawane i usuwane z <xref:System.IO.Packaging.PackageStore> kiedy utworzona i usunięciu dokumentu.  (Nie trzeba wywoływać <xref:System.IO.Packaging.PackageStore.AddPackage%2A> lub <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> oddzielnie, aby pakiety XPS otwartej z <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> konstruktorów.)  
  
 Uprawnienia we/wy pliku pakietu, dostępne za pośrednictwem <xref:System.IO.Packaging.PackageStore> pozostaje taka sama jak uprawnienia we/wy ustawione dla pakietu, po jego otwarciu.  <xref:System.IO.Packaging.PackageStore> Zapewnia tylko odwołania do pakietów, które zostały dodane w magazynie.  Jest aplikacja poprawnie otworzyć, zaktualizuj i zamknij każdy pakiet.  
  
 Dodano do pakiety <xref:System.IO.Packaging.PackageStore> będą dostępne w środowisku wielowątkowym, gdy są one używane w połączeniu z [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] analizator, takie jak <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType>.  Podczas pracy w środowisku wielowątkowym, aplikacja zablokować pakietu przed dostępu.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackWebRequest" />
    <altmember cref="T:System.IO.Packaging.PackWebResponse" />
  </Docs>
  <Members>
    <Member MemberName="AddPackage">
      <MemberSignature Language="C#" Value="public static void AddPackage (Uri uri, System.IO.Packaging.Package package);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPackage(class System.Uri uri, class System.IO.Packaging.Package package) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPackage(Uri ^ uri, System::IO::Packaging::Package ^ package);" />
      <MemberSignature Language="F#" Value="static member AddPackage : Uri * System.IO.Packaging.Package -&gt; unit" Usage="System.IO.Packaging.PackageStore.AddPackage (uri, package)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
      </Parameters>
      <Docs>
        <param name="uri">Klucz [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] z <paramref name="package" /> do porównania w <see cref="T:System.IO.Packaging.PackWebRequest" />.</param>
        <param name="package">Pakiet do dodania do magazynu.</param>
        <summary>Dodaje <see cref="T:System.IO.Packaging.Package" /> do magazynu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` Definiuje pakietu klucza identyfikatora URI, który jest porównywana podczas wywoływania <xref:System.IO.Packaging.PackWebRequest>.  
  
 Jeśli `packageUri` odpowiada <xref:System.IO.Packaging.PackagePart.Uri%2A> dla <xref:System.IO.Packaging.PackagePart> w <xref:System.IO.Packaging.PackWebRequest> wywołać pakiet, który został zdefiniowany w <xref:System.IO.Packaging.PackageStore> umożliwia dostęp do żądanej części.  
  
 Jeśli `packageUri` nie odpowiada <xref:System.IO.Packaging.PackagePart.Uri%2A> dla <xref:System.IO.Packaging.PackagePart> w <xref:System.IO.Packaging.PackWebRequest> wywołania, ten pakiet z określonego identyfikatora URI jest otwarty do dostępu do żądanej części.  
  
 **Uwaga dotycząca zabezpieczeń** ta metoda wymaga <xref:System.Security.Permissions.EnvironmentPermission> wszystkie niestandardowe <xref:System.IO.Packaging.Package> (non -<xref:System.IO.Packaging.ZipPackage>) typy.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.IO.Packaging.PackageStore.AddPackage%2A> metody.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewdecrypt)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewdecrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="package" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> Nieprawidłowy pakiet jest [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <exception cref="T:System.InvalidOperationException">Pakiet z określonym <paramref name="packageUri" /> znajduje się już w magazynie.</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package GetPackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package GetPackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ GetPackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member GetPackage : Uri -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.PackageStore.GetPackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] Pakietu do zwrócenia.</param>
        <summary>Zwraca <see cref="T:System.IO.Packaging.Package" /> z określonym [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] ze sklepu.</summary>
        <returns>Pakiet z określonym <paramref name="packageUri" />; lub <see langword="null" />, jeśli pakiet z określonym <paramref name="packageUri" /> nie znajduje się w magazynie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` jest dopasowywany do identyfikatory URI określonego w <xref:System.IO.Packaging.PackageStore.AddPackage%2A> wywołania metody.  
  
 **Uwaga dotycząca zabezpieczeń** ta metoda wymaga <xref:System.Security.Permissions.EnvironmentPermission> wszystkie niestandardowe <xref:System.IO.Packaging.Package> (non -<xref:System.IO.Packaging.ZipPackage>) typy.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.IO.Packaging.PackageStore.GetPackage%2A> metody.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewopendoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewopendoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="packageUri" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> Nieprawidłowy pakiet jest [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="RemovePackage">
      <MemberSignature Language="C#" Value="public static void RemovePackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member RemovePackage : Uri -&gt; unit" Usage="System.IO.Packaging.PackageStore.RemovePackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] Pakietu do usunięcia.</param>
        <summary>Usuwa <see cref="T:System.IO.Packaging.Package" /> z określonym [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] ze sklepu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` jest dopasowywany do identyfikatory URI określonego w <xref:System.IO.Packaging.PackageStore.AddPackage%2A> wywołania metody.  
  
 **Uwaga dotycząca zabezpieczeń** ta metoda wymaga <xref:System.Security.Permissions.EnvironmentPermission> wszystkie niestandardowe <xref:System.IO.Packaging.Package> (non -<xref:System.IO.Packaging.ZipPackage>) typy.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> metody.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewclosedoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewclosedoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="packageUri" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> Nieprawidłowy pakiet jest [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      </Docs>
    </Member>
  </Members>
</Type>