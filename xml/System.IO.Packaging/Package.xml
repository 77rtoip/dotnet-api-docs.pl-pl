<Type Name="Package" FullName="System.IO.Packaging.Package">
  <Metadata><Meta Name="ms.openlocfilehash" Value="567621ab25e7bc27c69395b483897ba65d75f77c" /><Meta Name="ms.sourcegitcommit" Value="f9e71795ba0f9c2dfaa74bec233343ed0f3ffd99" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/15/2019" /><Meta Name="ms.locfileid" Value="57963788" /></Metadata><TypeSignature Language="C#" Value="public abstract class Package : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Package extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.Package" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Package&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Package abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type Package = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Packaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje kontener, w którym można przechowywać wiele obiektów danych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package> jest klasą abstrakcyjną, który może służyć do organizowania obiektów w pojedynczą jednostkę zdefiniowany format fizycznych przenośność i skutecznego dostępu.  
  
 Plik ZIP jest podstawowy format fizycznych <xref:System.IO.Packaging.Package>.  Inne <xref:System.IO.Packaging.Package> implementacje mogą używać innych fizycznych formatów, takich jak dokumentu XML, bazy danych lub usługi sieci Web.  
  
 Takich jak system plików, elementów zawartych w <xref:System.IO.Packaging.Package> odwołują się hierarchicznej struktury folderów i plików.  
  
 Mimo że <xref:System.IO.Packaging.Package> jest klasą abstrakcyjną <xref:System.IO.Packaging.ZipPackage> klasy pochodnej jest używana jako domyślna przez <xref:System.IO.Packaging.Package.Open%2A> metody.  
  
 A <xref:System.IO.Packaging.PackagePart> ("część") jest abstrakcyjna klasa, która reprezentuje obiekt, który jest przechowywany w <xref:System.IO.Packaging.Package>.  
  
 A <xref:System.IO.Packaging.PackageRelationship> ("relacji") definiuje skojarzenie między źródłem <xref:System.IO.Packaging.Package> lub <xref:System.IO.Packaging.PackagePart> i obiektu docelowego.  Element <xref:System.IO.Packaging.PackageRelationship> może być jednym z dwóch typów, z których każdy może być jednym z dwóch formach:  
  
-   Relacja poziomie pakietu (utworzone przez <xref:System.IO.Packaging.Package.CreateRelationship%2A?displayProperty=nameWithType> metoda) odnosi się <xref:System.IO.Packaging.Package> albo:  
  
    -   Część docelowa w pakiecie.  
  
    -   Zasób docelowy poza pakietem.  
  
-   Relacji części na poziomie (utworzone przez <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A?displayProperty=nameWithType> metoda) odnosi się źródłem <xref:System.IO.Packaging.PackagePart> na wartość:  
  
    -   Inną część docelowa w pakiecie.  
  
    -   Zasób docelowy poza pakietem.  
  
 Źródło relacji <xref:System.IO.Packaging.Package> lub źródła <xref:System.IO.Packaging.PackagePart> jest traktowane jako "właściciel" w relacji.  Po usunięciu obiektu źródłowego również zostaną usunięte wszystkie relacje, które są własnością obiektu źródłowego.  Proces tworzenia lub usuwania relacji nie zmienia się fizycznie obiektów źródłowych lub docelowych w dowolny sposób.  
  
 A <xref:System.IO.Packaging.PackageDigitalSignature> ("podpis cyfrowy") jest złożeniem elementy i relacje, które reprezentuje podpis cyfrowy dołączone do <xref:System.IO.Packaging.Package>.  Podpis cyfrowy inicjatorem identyfikuje i weryfikuje, że podpisane elementy i relacje zawarte w <xref:System.IO.Packaging.Package> nie zostały zmodyfikowane.  
  
 Pakiety obsługują także Digital Rights Management (DRM) umożliwiający elementów zawartości w <xref:System.IO.Packaging.Package> szyfrowania za pomocą określone prawa dostępu przyznane dla autoryzowanych użytkowników.  
  
 Na podstawie <xref:System.IO.Packaging.Package> architektury, <xref:System.Windows.Xps.Packaging.XpsDocument> jest typem pakiet przeznaczony do przechowywania dokumentów, w oparciu o otwartym [systemu nazw domen (XPS, XML Paper Specification)](https://go.microsoft.com/fwlink/?LinkID=65761).  
  
 .NET Framework używa pakietów do przechowywania zawartości, zasobów i relacje dla stron i dokumenty przy użyciu standardowego pliku ZIP, domyślnie. Zgodnie z plikiem ZIP, aplikacja może używać <xref:System.IO.Packaging> klasy do przechowywania i opcjonalnie ochrony dowolnego typu lub liczby plików danych w jednym kontenerze skutecznego dostępu.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację otwarte konwencje tworzenia pakietów (OPC), które można pobrać <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono podstawowe kroki tworzenia <xref:System.IO.Packaging.Package>.  W tym przykładzie pakiet zostanie utworzona dokumentów wraz z obrazem graficznego, który jest wyświetlany jako część dokumentu.  (Jest to podobne do przypadek, w którym znajduje się plik HTML \<IMG > tag, który odwołuje się do zewnętrznego pliku obrazu.)  Dwa <xref:System.IO.Packaging.PackageRelationship> elementy znajdują się również w pakiecie.  Pierwszy relację "poziomie pakietu" definiuje część dokumentu jako element główny pakietu.  Relacja drugi, "część level" definiuje skojarzenie między części dokumentu ("źródło" relacji części level) i jego użycia części obrazu ("target" relacji części poziom).  Aby uzyskać pełny przykład, zobacz [pisania przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackagePart" />
    <altmember cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">Otwórz opakowania konwencje (pakietów OPC)</related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=74494">Cyfrowe podpisywanie strukturę otwarte konwencje</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IO.Packaging.Package" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Package (System.IO.FileAccess openFileAccess);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.IO.FileAccess openFileAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (openFileAccess As FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Package(System::IO::FileAccess openFileAccess);" />
      <MemberSignature Language="F#" Value="new System.IO.Packaging.Package : System.IO.FileAccess -&gt; System.IO.Packaging.Package" Usage="new System.IO.Packaging.Package openFileAccess" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="openFileAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="openFileAccess">Uprawnienia we/wy pliku pakietu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IO.Packaging.Package" /> klasę, która korzysta z danej <see cref="T:System.IO.FileAccess" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.%23ctor%2A> jest chroniony Konstruktor obiektu <xref:System.IO.Packaging.Package> abstrakcyjna klasa bazowa. Gdy zostanie wywołana w klasie pochodnej <xref:System.IO.Packaging.Package.%23ctor%2A> Konstruktor inicjuje nowe wystąpienie klasy pochodnej.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość <paramref name="openFileAccess" /> jest nieprawidłowa.</exception>
        <altmember cref="P:System.IO.Packaging.Package.FileOpenAccess" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Package (System.IO.FileAccess openFileAccess, bool streaming);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.IO.FileAccess openFileAccess, bool streaming) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (openFileAccess As FileAccess, streaming As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Package(System::IO::FileAccess openFileAccess, bool streaming);" />
      <MemberSignature Language="F#" Value="new System.IO.Packaging.Package : System.IO.FileAccess * bool -&gt; System.IO.Packaging.Package" Usage="new System.IO.Packaging.Package (openFileAccess, streaming)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="openFileAccess" Type="System.IO.FileAccess" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="streaming" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="openFileAccess">Uprawnienia we/wy pliku pakietu.</param>
        <param name="streaming"><see langword="true" /> Aby otworzyć pakiet do przesyłania strumieniowego; w przeciwnym razie <see langword="false" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IO.Packaging.Package" /> klasę, która korzysta z danej <see cref="T:System.IO.FileAccess" /> i przesyłania strumieniowego opcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.%23ctor%2A> jest chroniony Konstruktor obiektu <xref:System.IO.Packaging.Package> abstrakcyjna podstawowa abstrakcyjną klasę bazową. Gdy zostanie wywołana w klasie pochodnej <xref:System.IO.Packaging.Package.%23ctor%2A> Konstruktor inicjuje nowe wystąpienie klasy pochodnej.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość <paramref name="openFileAccess" /> jest nieprawidłowa.</exception>
        <altmember cref="P:System.IO.Packaging.Package.FileOpenAccess" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="package.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje i zamyka pakietu, a także wszystkie strumienie część podstawowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla <xref:System.IO.Packaging.Package> klasy <xref:System.IO.Packaging.Package.Close%2A> i <xref:System.IO.Packaging.Package.Dispose%2A> do tej samej operacji — nie ma powodu do wywołania <xref:System.IO.Packaging.Package.Dispose%2A> Jeśli wywołasz <xref:System.IO.Packaging.Package.Close%2A>, lub na odwrót.  
  
 <xref:System.IO.Packaging.Package.Close%2A> i <xref:System.IO.Packaging.Package.Dispose%2A> wewnętrznie wywołania <xref:System.IO.Packaging.Package.Flush%2A>.  
  
> [!NOTE]
>  `using` — Instrukcja (różni się od `using` dyrektywy przestrzeni nazw) jest zalecanym sposobem <xref:System.IO.Packaging.Package.Close%2A> i <xref:System.IO.Packaging.Package.Dispose%2A> pakietu.  [Zapisywanie przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160055) i [odczytywanie przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160034) pokazują, jak zamknąć i usuwania pakietu przy użyciu `using` instrukcji.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Packaging.PackagePart" />
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreatePart">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy nowe części pakietu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.CreatePart%2A> Inicjuje pustą <xref:System.IO.Stream> dla nowej części.  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType> Metoda może służyć do uzyskania odwołania do wystąpienia usługi stream, skojarzony z części.  
  
 Aby uzyskać więcej informacji na temat pakietu części sekcji 1.1 specyfikację Open konwencje tworzenia pakietów (OPC) dostępny do pobrania w <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć nową <xref:System.IO.Packaging.PackagePart> , a następnie zapisywania danych na część.  Aby uzyskać pełny przykład, zobacz [pisania przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see cref="Overload:System.IO.Packaging.Package.CreatePart" /> wywołuje wewnętrznie Klasa pochodna <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> metoda, aby utworzyć część oparta na fizyczny format zaimplementowaniu w klasie pochodnej.</para></block>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreatePart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart CreatePart(class System.Uri partUri, string contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreatePart (partUri As Uri, contentType As String) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ CreatePart(Uri ^ partUri, System::String ^ contentType);" />
      <MemberSignature Language="F#" Value="member this.CreatePart : Uri * string -&gt; System.IO.Packaging.PackagePart" Usage="package.CreatePart (partUri, contentType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="partUri">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] Nowej części.</param>
        <param name="contentType">Typ zawartości strumienia danych.</param>
        <summary>Tworzy nowy part bez kompresji z danego identyfikatora URI i typu zawartości.</summary>
        <returns>Nowej części utworzony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.CreatePart%2A> Inicjuje pustą <xref:System.IO.Stream> dla nowej części.  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType> Metoda może służyć do uzyskania odwołania do wystąpienia usługi stream, skojarzony z części.  
  
 Część <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> jest <xref:System.IO.Packaging.CompressionOption.NotCompressed?displayProperty=nameWithType>.  
  
 Aby uzyskać dodatkowe informacje na temat części pakietu, zawiera sekcja 1.1 w specyfikacji Open konwencje tworzenia pakietów (OPC) dostępny do pobrania w <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć nową <xref:System.IO.Packaging.PackagePart> , a następnie zapisywania danych na część.  Aby uzyskać pełny przykład, zobacz [pisania przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> lub <paramref name="contentType" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> nie jest prawidłowym <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <exception cref="T:System.InvalidOperationException">Element z określonym <paramref name="partUri" /> znajduje się już w pakiecie.</exception>
        <exception cref="T:System.ObjectDisposedException">Pakiet nie jest otwarty (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> lub <see cref="M:System.IO.Packaging.Package.Close" /> została wywołana).</exception>
        <exception cref="T:System.IO.IOException">Pakiet jest tylko do odczytu (nie można dodać nowej części).</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)" /> wywołuje wewnętrznie Klasa pochodna <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> metoda, aby utworzyć część oparta na fizyczny format zaimplementowaniu w klasie pochodnej.</para></block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.ZipPackagePart" />
      </Docs>
    </Member>
    <Member MemberName="CreatePart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart CreatePart(class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ CreatePart(Uri ^ partUri, System::String ^ contentType, System::IO::Packaging::CompressionOption compressionOption);" />
      <MemberSignature Language="F#" Value="member this.CreatePart : Uri * string * System.IO.Packaging.CompressionOption -&gt; System.IO.Packaging.PackagePart" Usage="package.CreatePart (partUri, contentType, compressionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="partUri">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] Nowej części.</param>
        <param name="contentType">Typ zawartości strumienia danych.</param>
        <param name="compressionOption">Opcja kompresji dla strumienia danych <see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" /> lub <see cref="F:System.IO.Packaging.CompressionOption.Normal" /> kompresji.</param>
        <summary>Tworzy nowe części z danego identyfikatora URI, typu zawartości i opcja kompresji.</summary>
        <returns>Nowej części utworzony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla domyślnego <xref:System.IO.Packaging.ZipPackage> klasy, <xref:System.IO.Packaging.Package.CreatePart%2A> metoda obsługuje tylko dwa `compressionOption` wartości <xref:System.IO.Packaging.CompressionOption.NotCompressed> lub <xref:System.IO.Packaging.CompressionOption.Normal> kompresji.  Inne <xref:System.IO.Packaging.CompressionOption> wartości <xref:System.IO.Packaging.CompressionOption.Maximum>, <xref:System.IO.Packaging.CompressionOption.Fast>, lub <xref:System.IO.Packaging.CompressionOption.SuperFast> użyj <xref:System.IO.Packaging.CompressionOption.Normal> kompresji.  
  
 <xref:System.IO.Packaging.Package.CreatePart%2A> Tworzy pustą <xref:System.IO.Stream> dla nowej części.  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType> Metoda może służyć do uzyskania odwołania do wystąpienia usługi stream, skojarzony z części.  
  
 Aby uzyskać dodatkowe informacje, zobacz specyfikację otwarte konwencje tworzenia pakietów (OPC), które można pobrać <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć nową <xref:System.IO.Packaging.PackagePart> , a następnie zapisywania danych na część.  Aby uzyskać pełny przykład, zobacz [pisania przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> lub <paramref name="contentType" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> nie jest prawidłowym <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)].</exception>
        <exception cref="T:System.InvalidOperationException">Element z określonym <paramref name="partUri" /> znajduje się już w pakiecie.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="compressionOption" /> Wartość jest nieprawidłowa.</exception>
        <exception cref="T:System.ObjectDisposedException">Pakiet nie jest otwarty (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> lub <see cref="M:System.IO.Packaging.Package.Close" /> została wywołana).</exception>
        <exception cref="T:System.IO.IOException">Pakiet jest tylko do odczytu (nie można dodać nowej części).</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> wywołuje wewnętrznie Klasa pochodna <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> metoda, aby utworzyć część oparta na fizyczny format zaimplementowaniu w klasie pochodnej.</para></block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.ZipPackagePart" />
      </Docs>
    </Member>
    <Member MemberName="CreatePartCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart CreatePartCore (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart CreatePartCore(class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IO::Packaging::PackagePart ^ CreatePartCore(Uri ^ partUri, System::String ^ contentType, System::IO::Packaging::CompressionOption compressionOption);" />
      <MemberSignature Language="F#" Value="abstract member CreatePartCore : Uri * string * System.IO.Packaging.CompressionOption -&gt; System.IO.Packaging.PackagePart" Usage="package.CreatePartCore (partUri, contentType, compressionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="partUri">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] Dla części tworzona.</param>
        <param name="contentType">Typ zawartości strumienia danych.</param>
        <param name="compressionOption">Opcja kompresji dla strumienia danych.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, tworzy nowy element w pakiecie.</summary>
        <returns>Utworzono części.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pochodnej <xref:System.IO.Packaging.Package.CreatePartCore%2A> metoda jest wywoływana przez <xref:System.IO.Packaging.Package.CreatePart%2A> metodę, aby utworzyć część oparte na fizyczny format zaimplementowaniu w klasie pochodnej.  
  
 Domyślnie <xref:System.IO.Packaging.ZipPackage> pochodzące z implementacji klasy abstrakcyjnej <xref:System.IO.Packaging.Package> ma być dostarczana i używane przez klasy.  W operacji domyślne <xref:System.IO.Packaging.Package.CreatePart%2A> wywołuje wewnętrznie <xref:System.IO.Packaging.Package.CreatePartCore%2A> z <xref:System.IO.Packaging.ZipPackage> klasy w celu utworzenia nowej części w formie pliku ZIP.  
  
 Dla domyślnego <xref:System.IO.Packaging.ZipPackage> klasy, <xref:System.IO.Packaging.Package.CreatePartCore%2A> metoda obsługuje tylko dwa `compressionOption` wartości <xref:System.IO.Packaging.CompressionOption.NotCompressed> lub <xref:System.IO.Packaging.CompressionOption.Normal> kompresji.  Inne <xref:System.IO.Packaging.CompressionOption> wartości <xref:System.IO.Packaging.CompressionOption.Maximum>, <xref:System.IO.Packaging.CompressionOption.Fast>, lub <xref:System.IO.Packaging.CompressionOption.SuperFast> użyj <xref:System.IO.Packaging.CompressionOption.Normal> kompresji.  
  
 Aby dowiedzieć się więcej o modelu pakietu i części pakietu, zobacz rozdział 1 dostępne do pobrania w specyfikacji Open konwencje tworzenia pakietów (OPC) <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Pochodnej <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> implementacji należy wprowadzić nie założeń dotyczących kolejności lub operacji wykonywanych przez <see cref="Overload:System.IO.Packaging.Package.CreatePart" /> metody, który ją wywołuje.</para></block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateRelationship">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy relację z danym elementem poziomie pakietu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Relacja poziomie pakietu definiuje skojarzenie między pakietu i część skojarzone docelowa lub zasobu.  Relacja poziomie pakietu może być jedną z dwóch form.  
  
-   Między <xref:System.IO.Packaging.Package> do obiektu docelowego <xref:System.IO.Packaging.PackagePart> wewnątrz pakietu.  
  
-   Między <xref:System.IO.Packaging.Package> do zasobu docelowego poza pakietem.  
  
 W relacji pakietu pakietu jest traktowana jako "właściciel" w relacji.  Gdy pakiet zostanie usunięty, również zostaną usunięte wszystkie relacje, które są własnością pakietu.  Proces tworzenia lub usuwania relacji nie zmienia fizycznie część docelowa lub zasobu w dowolny sposób.  
  
 Aby uzyskać dodatkowe informacje, zobacz specyfikację otwarte konwencje tworzenia pakietów (OPC), które można pobrać <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano tworzenie <xref:System.IO.Packaging.PackageRelationship> między <xref:System.IO.Packaging.Package> i części dokumentu głównego.  Aby uzyskać pełny przykład, zobacz [pisania przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[PackageWrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType);" />
      <MemberSignature Language="F#" Value="member this.CreateRelationship : Uri * System.IO.Packaging.TargetMode * string -&gt; System.IO.Packaging.PackageRelationship" Usage="package.CreateRelationship (targetUri, targetMode, relationshipType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] Części docelowej.</param>
        <param name="targetMode">Wskazuje, czy jest część docelowa <see cref="F:System.IO.Packaging.TargetMode.Internal" /> lub <see cref="F:System.IO.Packaging.TargetMode.External" /> do pakietu.</param>
        <param name="relationshipType">Identyfikator URI, który unikatowo definiuje rolę relacji.</param>
        <summary>Tworzenie relacji poziomie pakietu z elementem z danego identyfikatora URI, tryb obiektu docelowego i typ relacji.</summary>
        <returns>Relacja poziomie pakietu do określonej części.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Relacja poziomie pakietu definiuje skojarzenie między pakietu i część skojarzone docelowa lub zasobu.  Relacja poziomie pakietu może być jedną z dwóch form.  
  
-   Między <xref:System.IO.Packaging.Package> z elementem docelowym w pakiecie.  
  
-   Między <xref:System.IO.Packaging.Package> do zasobu docelowego poza pakietem.  
  
 W relacji pakietu pakietu jest traktowana jako "właściciel" w relacji.  Gdy pakiet zostanie usunięty, również zostaną usunięte wszystkie relacje, które są własnością pakietu.  
  
 <xref:System.IO.Packaging.Package.CreateRelationship%2A> nie fizycznie zmienia część docelowa lub zasobu w dowolny sposób.  
  
 Element docelowy relacji nie może być w innej relacji.  
  
 Jeśli `targetMode` jest określony jako <xref:System.IO.Packaging.TargetMode.Internal>, `targetUri` musi być względnym identyfikatorem URI, który został utworzony na podstawie położenia [ze standardem RFC 3986](https://tools.ietf.org/html/rfc3986) specyfikacji ogólna składnia identyfikatora URI (Uniform Resource).  Wewnętrzny względny identyfikator URI może być albo ścieżkę bezwzględną rozpoczyna się od ukośnika ("/") znaków takich jak "/ page1.xaml" lub "/ images/picture4.jpg", lub ścieżką względną, takie jak "... / imagespicture1.jpg "który jest rozpoznawany jako przed głównym pakietu ("/ ") jako podstawowy identyfikator URI.  
  
 Jeśli `targetMode` jest określony jako <xref:System.IO.Packaging.TargetMode.External>, `targetUri` może być albo bezwzględnym lub względnym identyfikatorem URI utworzony zgodnie z opisem w [ze standardem RFC 3986](https://tools.ietf.org/html/rfc3986) specyfikacji ogólna składnia identyfikatora URI (Uniform Resource). `http://www.microsoft.com/page2.xml` znajduje się przykład bezwzględny identyfikator URI, który odwołuje się do zasobu docelowego zewnętrznego "page2.xml".  "images/picture1.jpg" jest przykładem względny identyfikator URI, który odwołuje się zewnętrznego docelowego zasobu "1.jpg" ale która rozwiązuje względem identyfikatora URI pakietu.  
  
 `relationshipType` musi być [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] który został utworzony zgodnie z opisem w [ze standardem RFC 3986](https://tools.ietf.org/html/rfc3986) specyfikacji ogólna składnia identyfikatora URI (Uniform Resource).  W poniższej tabeli przedstawiono poziom pakietu `relationshipType` identyfikatorów URI zdefiniowany przez specyfikację Open konwencje tworzenia pakietów (OPC).  
  
|Relacja poziomie pakietu|Identyfikator URI typu relacji|  
|---------------------------------|---------------------------|  
|Podstawowe właściwości|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties`|  
|Podpis cyfrowy|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature`|  
|Certyfikat podpisu cyfrowego|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/certificate`|  
|Podpis cyfrowy źródła|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin`|  
|Miniatura|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail`|  
  
 Aby uzyskać więcej informacji dotyczących tworzenia pakietów i relacje pakietu sekcja 1.3 specyfikacji otwarte konwencje tworzenia pakietów (OPC), dostępna do pobrania w <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób używania <xref:System.IO.Packaging.Package.CreateRelationship%2A> utworzyć <xref:System.IO.Packaging.PackageRelationship> między <xref:System.IO.Packaging.Package> i części dokumentu głównego.  Aby uzyskać pełny przykład, zobacz [pisania przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetUri" /> lub <paramref name="relationshipType" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetUri" /> Części <see cref="T:System.IO.Packaging.PackageRelationship" />, lub <paramref name="targetMode" /> jest <see cref="F:System.IO.Packaging.TargetMode.Internal" /> i <paramref name="targetUri" /> jest bezwzględnym identyfikatorem URI.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość <paramref name="targetMode" /> jest nieprawidłowa.</exception>
        <exception cref="T:System.ObjectDisposedException">Pakiet nie jest otwarty (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> lub <see cref="M:System.IO.Packaging.Package.Close" /> została wywołana).</exception>
        <exception cref="T:System.IO.IOException">Pakiet jest tylko do odczytu.</exception>
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType, System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.CreateRelationship : Uri * System.IO.Packaging.TargetMode * string * string -&gt; System.IO.Packaging.PackageRelationship" Usage="package.CreateRelationship (targetUri, targetMode, relationshipType, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] Części docelowej.</param>
        <param name="targetMode">Wskazuje, czy jest część docelowa <see cref="F:System.IO.Packaging.TargetMode.Internal" /> lub <see cref="F:System.IO.Packaging.TargetMode.External" /> do pakietu.</param>
        <param name="relationshipType">Identyfikator URI, który unikatowo definiuje rolę relacji.</param>
        <param name="id">Unikatowy identyfikator XML.</param>
        <summary>Tworzenie relacji poziomie pakietu z elementem z danego identyfikatora URI, tryb docelowy, typ relacji i [!INCLUDE[TLA#tla_id](~/includes/tlasharptla-id-md.md)].</summary>
        <returns>Relacja poziomie pakietu do określonej części.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Relacja poziomie pakietu definiuje skojarzenie między pakietu i część skojarzone docelowa lub zasobu.  Relacja poziomie pakietu może być jedną z dwóch form.  
  
-   Między <xref:System.IO.Packaging.Package> z elementem docelowym w pakiecie.  
  
-   Między <xref:System.IO.Packaging.Package> do zasobu docelowego poza pakietem.  
  
 W relacji pakietu pakietu jest traktowana jako "właściciel" w relacji.  Gdy pakiet zostanie usunięty, również zostaną usunięte wszystkie relacje, które są własnością pakietu.  
  
 <xref:System.IO.Packaging.Package.CreateRelationship%2A> nie fizycznie zmienia część docelowa lub zasobu w dowolny sposób.  
  
 Element docelowy relacji nie może być w innej relacji.  
  
 `id` Musi być prawidłowym identyfikatorem XML.  `id` Typ jest xsd:ID i muszą być zgodne z konwencjami nazewnictwa, które zostały określonego w XML schematu część 2: Specyfikacji typy danych (zobacz [ https://www.w3.org/TR/xmlschema-2/#ID ](https://www.w3.org/TR/xmlschema-2/#ID)).  
  
 Jeśli `id` jest określony jako `null` zostanie automatycznie wygenerowany Unikatowy identyfikator.  `id` Określony przez pusty ciąg jest nieprawidłowy.  
  
 Jeśli `targetMode` jest określony jako <xref:System.IO.Packaging.TargetMode.Internal>, `targetUri` musi być względnym identyfikatorem URI, który został utworzony na podstawie położenia [ze standardem RFC 3986](https://tools.ietf.org/html/rfc3986) specyfikacji ogólna składnia identyfikatora URI (Uniform Resource).  Wewnętrzny względny identyfikator URI może być albo ścieżkę bezwzględną rozpoczyna się od ukośnika ("/") znaków takich jak "/ page1.xaml" lub "/ images/picture4.jpg", lub ścieżką względną, takie jak "... / imagespicture1.jpg "który jest rozpoznawany jako przed głównym pakietu ("/ ") jako podstawowy identyfikator URI.  
  
 Jeśli `targetMode` jest określony jako <xref:System.IO.Packaging.TargetMode.External>, `targetUri` może być albo bezwzględnym lub względnym identyfikatorem URI utworzony zgodnie z opisem w [ze standardem RFC 3986](https://tools.ietf.org/html/rfc3986) specyfikacji ogólna składnia identyfikatora URI (Uniform Resource). `http://www.microsoft.com/page2.xml` znajduje się przykład bezwzględny identyfikator URI, który odwołuje się do zasobu docelowego zewnętrznego "page2.xml".  "images/picture1.jpg" jest przykładem względny identyfikator URI, który odwołuje się zewnętrznego docelowego zasobu "1.jpg" ale która rozwiązuje względem identyfikatora URI pakietu.  
  
 `relationshipType` musi być identyfikatorem URI, który został utworzony na podstawie położenia [ze standardem RFC 3986](https://tools.ietf.org/html/rfc3986) specyfikacji ogólna składnia identyfikatora URI (Uniform Resource).  W poniższej tabeli przedstawiono poziom pakietu `relationshipType` identyfikatorów URI zdefiniowany przez specyfikację Open konwencje tworzenia pakietów (OPC).  
  
|Relacja poziomie pakietu|Identyfikator URI typu relacji|  
|---------------------------------|---------------------------|  
|Podstawowe właściwości|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties`|  
|Podpis cyfrowy|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature`|  
|Certyfikat podpisu cyfrowego|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/certificate`|  
|Podpis cyfrowy źródła|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin`|  
|Miniatura|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail`|  
  
 Aby uzyskać dodatkowe informacje dotyczące tworzenia pakietów i relacje pakietu, w sekcji 1.3 specyfikacji otwarte konwencje tworzenia pakietów (OPC), dostępna do pobrania w <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób używania <xref:System.IO.Packaging.Package.CreateRelationship%2A> utworzyć <xref:System.IO.Packaging.PackageRelationship> między <xref:System.IO.Packaging.Package> i części dokumentu głównego.  Aby uzyskać pełny przykład, zobacz [pisania przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetUri" /> lub <paramref name="relationshipType" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetUri" /> Części <see cref="T:System.IO.Packaging.PackageRelationship" />, lub <paramref name="targetMode" /> jest <see cref="F:System.IO.Packaging.TargetMode.Internal" /> i <paramref name="targetUri" /> jest bezwzględnym identyfikatorem URI.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość <paramref name="targetMode" /> jest nieprawidłowa.</exception>
        <exception cref="T:System.ObjectDisposedException">Pakiet nie jest otwarty (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> lub <see cref="M:System.IO.Packaging.Package.Close" /> została wywołana).</exception>
        <exception cref="T:System.IO.IOException">Pakiet jest tylko do odczytu.</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> nie jest prawidłowy identyfikator XML; lub element z określonym <paramref name="id" /> występuje już w pakiecie.</exception>
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DeletePart">
      <MemberSignature Language="C#" Value="public void DeletePart (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeletePart(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeletePart (partUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeletePart(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="member this.DeletePart : Uri -&gt; unit" Usage="package.DeletePart partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] Części do usunięcia.</param>
        <summary>Usuwa element z danym identyfikatorem URI z pakietu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` musi być względnym identyfikatorem URI, który składa się z ścieżką bezwzględną, która rozpoczyna się od ukośnika ("/"), znaku.  Ścieżka bezwzględna jest określana względem katalogu głównego pakietu i jest tworzone na podstawie [ze standardem RFC 3986](https://tools.ietf.org/html/rfc3986) specyfikacji ogólna składnia identyfikatora URI (Uniform Resource).  "/ page1.xaml" i "/ images/picture4.jpg" to przykłady prawidłową częścią identyfikatorów URI.  
  
 Nie jest wyjątek, jeśli element z określonym `partUri` nie znajduje się w pakiecie.  (Możesz użyć <xref:System.IO.Packaging.Package.PartExists%2A> metodę, aby określić, czy element z określonym `partUri` znajduje się w pakiecie.)  
  
 Aby uzyskać dodatkowe informacje, zobacz specyfikację otwarte konwencje tworzenia pakietów (OPC), które można pobrać <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> nie jest prawidłowym <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <exception cref="T:System.ObjectDisposedException">Pakiet nie jest otwarty (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> lub <see cref="M:System.IO.Packaging.Package.Close" /> została wywołana).</exception>
        <exception cref="T:System.IO.IOException">Pakiet jest tylko do odczytu.</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> wywołuje wewnętrznie Klasa pochodna <see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" /> metoda faktycznie usunąć część oparta na fizyczny format zaimplementowaniu w klasie pochodnej.</para></block>
        <altmember cref="Overload:System.IO.Packaging.Package.CreatePart" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="DeletePartCore">
      <MemberSignature Language="C#" Value="protected abstract void DeletePartCore (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DeletePartCore(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub DeletePartCore (partUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void DeletePartCore(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="abstract member DeletePartCore : Uri -&gt; unit" Usage="package.DeletePartCore partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri"><see cref="P:System.IO.Packaging.PackagePart.Uri" /> z <see cref="T:System.IO.Packaging.PackagePart" /> do usunięcia.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, usuwa element z danym identyfikatorem URI.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.IO.Packaging.ZipPackage> pochodzące z implementacji klasy abstrakcyjnej <xref:System.IO.Packaging.Package> ma być dostarczana i używane przez klasy.  W operacji domyślne <xref:System.IO.Packaging.Package.DeletePart%2A> wywołuje wewnętrznie <xref:System.IO.Packaging.Package.DeletePartCore%2A> z <xref:System.IO.Packaging.ZipPackage> klasy do wykonania rzeczywistego usunięcia oparte na fizyczny format zaimplementowaniu w klasie pochodnej.  
  
 Aby dowiedzieć się więcej o modelu pakietu i części pakietu, zobacz rozdział 1 dostępne do pobrania w specyfikacji Open konwencje tworzenia pakietów (OPC) <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Klasa pochodna <see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" /> implementacja jest wywoływana przez <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> metody określona część oparte na fizyczny format zaimplementowaniu w klasie pochodnej.  
  
Pochodnej <see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" /> implementacji należy wprowadzić nie założeń dotyczących kolejności lub operacji wykonywanych przez <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> metody, który ją wywołuje.</para></block>
        <altmember cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteRelationship">
      <MemberSignature Language="C#" Value="public void DeleteRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteRelationship (id As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteRelationship(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.DeleteRelationship : string -&gt; unit" Usage="package.DeleteRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" /> z <see cref="T:System.IO.Packaging.PackageRelationship" /> do usunięcia.</param>
        <summary>Usuwa relacji poziomie pakietu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Relacja poziomie pakietu definiuje skojarzenie między pakietu i część skojarzone docelowa lub zasobu.  Relacja poziomie pakietu może być jedną z dwóch form.  
  
-   Między <xref:System.IO.Packaging.Package> z elementem docelowym w pakiecie.  
  
-   Między <xref:System.IO.Packaging.Package> do zasobu docelowego poza pakietem.  
  
 W relacji pakietu pakietu jest traktowana jako "właściciel" w relacji.  Gdy pakiet zostanie usunięty, również zostaną usunięte wszystkie relacje, które są własnością pakietu.  
  
 Żaden wyjątek jest zgłaszany relację z danym `id` nie znajduje się w pakiecie.  
  
 <xref:System.IO.Packaging.Package.DeleteRelationship%2A> nie zmienia fizycznie część docelowa w dowolny sposób.  
  
 Aby uzyskać więcej informacji na temat relacji pakietu sekcja 1.3 specyfikacji otwarte konwencje tworzenia pakietów (OPC), dostępna do pobrania w <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Pakiet nie jest otwarty (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> lub <see cref="M:System.IO.Packaging.Package.Close" /> została wywołana).</exception>
        <exception cref="T:System.IO.IOException">Pakiet jest tylko do odczytu.</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> nie jest prawidłowym identyfikatorem XML.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="package.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko niezarządzane zasoby.</param>
        <summary>Opróżnia i zapisuje zawartość wszystkie elementy i relacje, zamyka pakietu i zwalnia wszystkie zasoby.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby upewnić się, że wszystkie zmiany są prawidłowo zapisywane, <xref:System.IO.Packaging.Package.Dispose%2A> również Kończenie znajdujących się w opróżnia i zamyka wszystkie elementy i relacje, które są zawarte w pakiecie.  
  
 Dla <xref:System.IO.Packaging.Package> klasy <xref:System.IO.Packaging.Package.Dispose%2A> i <xref:System.IO.Packaging.Package.Close%2A> do tej samej operacji — nie ma powodu do wywołania <xref:System.IO.Packaging.Package.Dispose%2A> Jeśli wywołasz <xref:System.IO.Packaging.Package.Close%2A>, lub na odwrót.  
  
 <xref:System.IO.Packaging.Package.Close%2A> i <xref:System.IO.Packaging.Package.Dispose%2A> wewnętrznie wywołania <xref:System.IO.Packaging.Package.Flush%2A>.  
  
 Klasy pochodne, przydzielania zasobów i zarządzanie nimi bez pamięci, które powinny przesłaniać tę metodę, aby zwolnić zasoby podczas <xref:System.IO.Packaging.Package.Dispose%2A> jest wywoływana. Także wywołać klasy pochodnej zastąpienia <xref:System.IO.Packaging.Package.Flush%2A> i klasa bazowa <xref:System.IO.Packaging.Package.Dispose%2A> metody, aby upewnić się, że oczyszczania klasy bazowej zawsze jest wykonywane.  
  
> [!NOTE]
>  `using` — Instrukcja (różni się od `using` dyrektywy przestrzeni nazw) jest zalecanym sposobem <xref:System.IO.Packaging.Package.Close%2A> i <xref:System.IO.Packaging.Package.Dispose%2A> pakietu. [Zapisywanie przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160055) pokazuje, jak zamknąć i usuwania pakietu przy użyciu `using` instrukcji.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.Packaging.Package.Flush" />
        <altmember cref="T:System.IO.Packaging.PackagePart" />
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <Member MemberName="FileOpenAccess">
      <MemberSignature Language="C#" Value="public System.IO.FileAccess FileOpenAccess { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.FileAccess FileOpenAccess" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.Package.FileOpenAccess" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileOpenAccess As FileAccess" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::FileAccess FileOpenAccess { System::IO::FileAccess get(); };" />
      <MemberSignature Language="F#" Value="member this.FileOpenAccess : System.IO.FileAccess" Usage="System.IO.Packaging.Package.FileOpenAccess" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dostęp do plików, ustawiając dla pakietu.</summary>
        <value>Jedną z <see cref="T:System.IO.FileAccess" /> wartości: <see cref="F:System.IO.FileAccess.Read" />, <see cref="F:System.IO.FileAccess.Write" />, lub <see cref="F:System.IO.FileAccess.ReadWrite" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.FileOpenAccess%2A> Właściwość nie ma wartości domyślnej.  Ustawienie dostępu do pliku jest określona w <xref:System.IO.Packaging.Package.%23ctor%2A> wywołanie konstruktora, podczas tworzenia nowego pakietu lub w <xref:System.IO.Packaging.Package.Open%2A> wywołania podczas otwierania istniejącego pakietu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Pakiet nie jest otwarty (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> lub <see cref="M:System.IO.Packaging.Package.Close" /> została wywołana).</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="package.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje zawartość wszystkich części i relacje, które są zawarte w pakiecie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.Flush%2A> wywołuje wewnętrznie Klasa pochodna <xref:System.IO.Packaging.Package.FlushCore%2A> Jawna implementacja można wykonać operacji opróżniania rzeczywiste specyficzne dla formatu.  Klasa pochodna <xref:System.IO.Packaging.Package.FlushCore%2A> metoda jest odpowiedzialna za faktycznie zapisywanie zawartości części i relacji do wykonania określonej klasy pochodnej fizycznych.  
  
 Domyślnie <xref:System.IO.Packaging.ZipPackage> pochodne implementację abstrakcyjnej <xref:System.IO.Packaging.Package> ma być dostarczana i używane przez klasę bazową. W operacji domyślne <xref:System.IO.Packaging.Package.Flush%2A> wywołuje wewnętrznie <xref:System.IO.Packaging.Package.FlushCore%2A> można zapisać elementy i relacje w pakiecie pliku ZIP.  
  
 <xref:System.IO.Packaging.Package.Flush%2A> jest wywoływana automatycznie przez <xref:System.IO.Packaging.Package.Close%2A> i <xref:System.IO.Packaging.Package.Dispose%2A> metody.  Gdy <xref:System.IO.Packaging.Package.Close%2A> lub <xref:System.IO.Packaging.Package.Dispose%2A> nazywa się nie trzeba wywoływać <xref:System.IO.Packaging.Package.Flush%2A> oddzielnie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Pakiet nie jest otwarty (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> lub <see cref="M:System.IO.Packaging.Package.Close" /> została wywołana).</exception>
        <exception cref="T:System.IO.IOException">Ten pakiet jest tylko do odczytu i nie może być modyfikowany.</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.Flush" /> wywołuje wewnętrznie Klasa pochodna <see cref="M:System.IO.Packaging.Package.FlushCore" /> metoda faktycznie opróżnić część oparta na fizyczny format zaimplementowaniu w klasie pochodnej.</para></block>
      </Docs>
    </Member>
    <Member MemberName="FlushCore">
      <MemberSignature Language="C#" Value="protected abstract void FlushCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FlushCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.FlushCore" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub FlushCore ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void FlushCore();" />
      <MemberSignature Language="F#" Value="abstract member FlushCore : unit -&gt; unit" Usage="package.FlushCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej, zapisuje zawartość wszystkich części i relacji w magazynie w klasie pochodnej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.FlushCore%2A> jest wywoływana przez <xref:System.IO.Packaging.Package.Flush%2A> metodę, aby wykonać bieżącej operacji opróżniania oparte na fizyczny format zaimplementowaniu w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Pochodnej <see cref="M:System.IO.Packaging.Package.FlushCore" /> implementacji, nie należy wprowadzać żadnych założeń dotyczących kolejności lub operacji wykonywanych przez <see cref="M:System.IO.Packaging.Package.Flush" /> metody, który ją wywołuje.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetPart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart GetPart (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart GetPart(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPart(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPart (partUri As Uri) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ GetPart(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="member this.GetPart : Uri -&gt; System.IO.Packaging.PackagePart" Usage="package.GetPart partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] Części do zwrócenia.</param>
        <summary>Zwraca część z danym identyfikatorem URI.</summary>
        <returns>Część z określonym <paramref name="partUri" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.InvalidOperationException> Jest generowany, jeśli element z określonym `partUri` nie istnieje.  
  
 <xref:System.IO.Packaging.Package.PartExists%2A> Metoda może służyć do określenia czy `partUri` odwołuje się do istniejących części.  
  
 Domyślnie <xref:System.IO.Packaging.ZipPackage> pochodne implementację abstrakcyjnej <xref:System.IO.Packaging.Package> ma być dostarczana i używane przez klasę bazową.  W operacji domyślne <xref:System.IO.Packaging.Package.GetPart%2A> wywołuje wewnętrznie <xref:System.IO.Packaging.Package.GetPartCore%2A> z <xref:System.IO.Packaging.ZipPackage> klasy w celu zwracania żądanej części z pliku ZIP.  
  
 Aby uzyskać dodatkowe informacje, zobacz specyfikację otwarte konwencje tworzenia pakietów (OPC), które można pobrać <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak zlokalizować, pobrać i odczytać części, które są zawarte w pakiecie.  Aby uzyskać pełny przykład, zobacz [odczytywanie przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160034).  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> nie jest prawidłowym <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)].</exception>
        <exception cref="T:System.InvalidOperationException">Element z określonym <paramref name="partUri" /> nie znajduje się w pakiecie.</exception>
        <exception cref="T:System.ObjectDisposedException">Pakiet nie jest otwarty (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> lub <see cref="M:System.IO.Packaging.Package.Close" /> została wywołana).</exception>
        <exception cref="T:System.IO.IOException">Pakiet jest tylko do zapisu.</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> wywołuje wewnętrznie Klasa pochodna <see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" /> metoda faktycznie opróżnić część oparta na fizyczny format zaimplementowaniu w klasie pochodnej.</para></block>
        <altmember cref="M:System.IO.Packaging.Package.GetParts" />
        <altmember cref="M:System.IO.Packaging.Package.PartExists(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPartCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart GetPartCore (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart GetPartCore(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetPartCore (partUri As Uri) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IO::Packaging::PackagePart ^ GetPartCore(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="abstract member GetPartCore : Uri -&gt; System.IO.Packaging.PackagePart" Usage="package.GetPartCore partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] Części do pobrania.</param>
        <summary>Po przesłonięciu w klasie pochodnej zwraca część dotyczy danego identyfikatora URI.</summary>
        <returns>Żądana produktowi; lub <see langword="null" />, jeśli element z określonym <paramref name="partUri" /> nie znajduje się w pakiecie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.IO.Packaging.ZipPackage> pochodne implementację abstrakcyjnej <xref:System.IO.Packaging.Package> ma być dostarczana i używane przez klasy.  W operacji domyślne <xref:System.IO.Packaging.Package.GetPart%2A> wywołuje wewnętrznie <xref:System.IO.Packaging.Package.GetPartCore%2A> z <xref:System.IO.Packaging.ZipPackage> klasy do pobrania części z pliku ZIP.  
  
 Aby dowiedzieć się więcej o modelu pakietu i części pakietu, zobacz rozdział 1 dostępne do pobrania w specyfikacji Open konwencje tworzenia pakietów (OPC) <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Klasa pochodna <see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" /> implementacja jest wywoływana przez <see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> metody dostępu i zwrócić określoną część oparte na fizyczny format zaimplementowaniu w klasie pochodnej.  
  
Pochodnej <see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" /> implementacji należy wprowadzić nie założeń dotyczących kolejności lub operacji wykonywanych przez <see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> metody, który ją wywołuje.</para></block>
        <altmember cref="M:System.IO.Packaging.Package.GetPartsCore" />
      </Docs>
    </Member>
    <Member MemberName="GetParts">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePartCollection GetParts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePartCollection GetParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetParts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParts () As PackagePartCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePartCollection ^ GetParts();" />
      <MemberSignature Language="F#" Value="member this.GetParts : unit -&gt; System.IO.Packaging.PackagePartCollection" Usage="package.GetParts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kolekcję wszystkich części w pakiecie.</summary>
        <returns>Kolekcja wszystkich <see cref="T:System.IO.Packaging.PackagePart" /> elementy, które są zawarte w pakiecie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetParts%2A> Zwraca kolekcję wszystkie elementy, które są zawarte w tym pakiecie <xref:System.IO.Packaging.PackageRelationship> części.  
  
 <xref:System.IO.Packaging.Package.GetParts%2A> nigdy nie zwróci `null`; jednak zwrócona kolekcja będzie zawierać żadnego elementu, jeśli pakiet nie zawiera żadnych części.  
  
 Domyślnie <xref:System.IO.Packaging.ZipPackage> pochodne implementację abstrakcyjnej <xref:System.IO.Packaging.Package> ma być dostarczana i używane przez klasę bazową.  W operacji domyślne <xref:System.IO.Packaging.Package.GetParts%2A> wywołania <xref:System.IO.Packaging.Package.GetPartsCore%2A> metody <xref:System.IO.Packaging.ZipPackage> klasy w celu zwracania części z pliku ZIP.  
  
 Aby uzyskać więcej informacji o pakietach i części pakietu sekcja 1.1 specyfikacji otwarte konwencje tworzenia pakietów (OPC), dostępna do pobrania w <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.IO.Packaging.Package.GetParts%2A> metodę, aby uzyskać kolekcję elementów, które są zawarte w <xref:System.IO.Packaging.Package>.  Program pełny kod źródłowy, można zobaczyć [Tworzenie pakietu przy użyciu przykładu podpis cyfrowy](https://go.microsoft.com/fwlink/?LinkID=159966).  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Pakiet nie jest otwarty (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> lub <see cref="M:System.IO.Packaging.Package.Close" /> została wywołana).</exception>
        <exception cref="T:System.IO.IOException">Pakiet jest tylko do zapisu.</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.GetParts" /> wywołuje wewnętrznie Klasa pochodna <see cref="M:System.IO.Packaging.Package.GetPartsCore" /> metoda faktycznie opróżnić część oparta na fizyczny format zaimplementowaniu w klasie pochodnej.</para></block>
        <altmember cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPartsCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart[] GetPartsCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart[] GetPartsCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPartsCore" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetPartsCore () As PackagePart()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::IO::Packaging::PackagePart ^&gt; ^ GetPartsCore();" />
      <MemberSignature Language="F#" Value="abstract member GetPartsCore : unit -&gt; System.IO.Packaging.PackagePart[]" Usage="package.GetPartsCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Po przesłonięciu w klasie pochodnej zwraca tablicę wszystkich części w pakiecie.</summary>
        <returns>Tablica wszystkich części, które są zawarte w pakiecie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa pochodna <xref:System.IO.Packaging.Package.GetPartsCore%2A> implementacja jest wywoływana przez <xref:System.IO.Packaging.Package.GetParts%2A> metody dostępu i zwraca tablicę części oparte na fizyczny format zaimplementowaniu w klasie pochodnej.  
  
 Domyślnie <xref:System.IO.Packaging.ZipPackage> pochodne implementację abstrakcyjnej <xref:System.IO.Packaging.Package> ma być dostarczana i używane przez klasy.  W operacji domyślne <xref:System.IO.Packaging.Package.GetParts%2A> wywołuje wewnętrznie <xref:System.IO.Packaging.Package.GetPartCore%2A> z <xref:System.IO.Packaging.ZipPackage> klasy do pobrania części z pliku ZIP.  
  
 Aby dowiedzieć się więcej o modelu pakietu i części pakietu, zobacz rozdział 1 dostępne do pobrania w specyfikacji Open konwencje tworzenia pakietów (OPC) <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Pochodnej <see cref="M:System.IO.Packaging.Package.GetPartsCore" /> implementacji należy wprowadzić nie założeń dotyczących kolejności lub operacji wykonywanych przez <see cref="M:System.IO.Packaging.Package.GetParts" /> metody, który ją wywołuje.</para></block>
        <altmember cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship GetRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship GetRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationship (id As String) As PackageRelationship" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ GetRelationship(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.GetRelationship : string -&gt; System.IO.Packaging.PackageRelationship" Usage="package.GetRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" /> Relacji do zwrócenia.</param>
        <summary>Zwraca poziom pakietu relację z danym identyfikatorem.</summary>
        <returns>Relacja poziomie pakietu z określonym <paramref name="id" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` Musi być prawidłowym identyfikatorem XML. `id` Typ jest xsd:ID i musi zgodne z konwencjami nazewnictwa, które zostały określone w [sekcji 3.3.8 XML schematu część 2: Typy danych specyfikacji](https://www.w3.org/TR/xmlschema-2/#ID).  
  
 Aby uzyskać dodatkowe informacje dotyczące tworzenia pakietów i relacje pakietu, w sekcji 1.3 specyfikacji otwarte konwencje tworzenia pakietów (OPC), dostępna do pobrania w <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> nie jest prawidłowym identyfikatorem XML.</exception>
        <exception cref="T:System.InvalidOperationException">Relacja z określonym <paramref name="id" /> nie znajduje się w pakiecie.</exception>
        <exception cref="T:System.ObjectDisposedException">Pakiet nie jest otwarty (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> lub <see cref="M:System.IO.Packaging.Package.Close" /> została wywołana).</exception>
        <exception cref="T:System.IO.IOException">Pakiet jest tylko do zapisu.</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationships">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationships ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationships() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationships" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationships () As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationships();" />
      <MemberSignature Language="F#" Value="member this.GetRelationships : unit -&gt; System.IO.Packaging.PackageRelationshipCollection" Usage="package.GetRelationships " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kolekcję wszystkich relacji na poziomie pakietu.</summary>
        <returns>Kolekcja wszystkie relacje, które są zawarte w pakiecie w poziomie pakietu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetRelationships%2A> nigdy nie zwróci `null`; jednak zwrócona Kolekcja może zawierać żadnego elementu, jeśli pakiet nie zawiera żadnych relacji na poziomie pakietu.  
  
 Relacja poziomie pakietu definiuje skojarzenie między pakietu i część skojarzone docelowa lub zasobu.  Relacja poziomie pakietu może być jedną z dwóch form.  
  
-   Między <xref:System.IO.Packaging.Package> z elementem docelowym w pakiecie.  
  
-   Między <xref:System.IO.Packaging.Package> do zasobu docelowego poza pakietem.  
  
 W relacji pakietu pakietu jest traktowana jako "właściciel" w relacji.  Gdy pakiet zostanie usunięty, również zostaną usunięte wszystkie relacje, które są własnością pakietu.  Proces tworzenia lub usuwania relacji nie zmienia fizycznie część docelowa lub zasobu w dowolny sposób.  
  
 Aby uzyskać dodatkowe informacje dotyczące tworzenia pakietów i relacje pakietu, w sekcji 1.3 specyfikacji otwarte konwencje tworzenia pakietów (OPC), dostępna do pobrania w <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Pakiet nie jest otwarty (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> lub <see cref="M:System.IO.Packaging.Package.Close" /> została wywołana).</exception>
        <exception cref="T:System.IO.IOException">Pakiet jest tylko do zapisu.</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipsByType">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType (string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType(string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationshipsByType (relationshipType As String) As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationshipsByType(System::String ^ relationshipType);" />
      <MemberSignature Language="F#" Value="member this.GetRelationshipsByType : string -&gt; System.IO.Packaging.PackageRelationshipCollection" Usage="package.GetRelationshipsByType relationshipType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationshipType"><see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> Umożliwia dopasowanie i zwracać w kolekcji.</param>
        <summary>Zwraca kolekcję wszystkich relacji poziomie pakietu, które odpowiadają danym <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />.</summary>
        <returns>Kolekcja relacji poziomie pakietu, które odpowiadają określonej <paramref name="relationshipType" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetRelationships%2A> nigdy nie zwróci `null`; jednak zwrócona Kolekcja może zawierać żadnego elementu, jeśli istnieją relacje nie poziomie pakietu, które odpowiadają określonej `relationshipType`.  
  
 W poniższej tabeli przedstawiono poziom pakietu `relationshipType` identyfikatorów URI zdefiniowany przez specyfikację Open konwencje tworzenia pakietów (OPC).  
  
|Relacja poziomie pakietu|Identyfikator URI typu relacji|  
|---------------------------------|---------------------------|  
|Podstawowe właściwości|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties`|  
|Podpis cyfrowy|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature`|  
|Certyfikat podpisu cyfrowego|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/certificate`|  
|Podpis cyfrowy źródła|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin`|  
|Miniatura|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail`|  
  
 Aby uzyskać dodatkowe informacje, zobacz specyfikację otwarte konwencje tworzenia pakietów (OPC), które można pobrać <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak można pobrać relacji, które zostały zdefiniowane dla pakietu.  Aby uzyskać pełny przykład, zobacz [odczytywanie przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160034).  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="relationshipType" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="relationshipType" /> jest ciągiem pustym.</exception>
        <exception cref="T:System.ObjectDisposedException">Pakiet nie jest otwarty (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> lub <see cref="M:System.IO.Packaging.Package.Close" /> została wywołana).</exception>
        <exception cref="T:System.IO.IOException">Pakiet jest tylko do zapisu.</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zostanie otwarty pakiet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> jest to domyślny typ pakietu używanego przez <xref:System.IO.Packaging.Package.Open%2A> metody.  
  
 Aby uzyskać dodatkowe informacje, zobacz specyfikację otwarte konwencje tworzenia pakietów (OPC), które można pobrać <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć nową <xref:System.IO.Packaging.Package> , zawiera <xref:System.IO.Packaging.PackageRelationship> i <xref:System.IO.Packaging.PackagePart> elementów wraz z przechowywanych danych.  Aby uzyskać pełny przykład, zobacz [pisania przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Open : System.IO.Stream -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień we/wy, na której można otworzyć pakietu.</param>
        <summary>Zostanie otwarty pakiet na danego strumienia we/wy.</summary>
        <returns>Otwarty pakiet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> jest to domyślny typ pakietu używanego przez <xref:System.IO.Packaging.Package.Open%2A> metody.  
  
 Aby uzyskać dodatkowe informacje, zobacz specyfikację otwarte konwencje tworzenia pakietów (OPC), które można pobrać <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Pakiet do otwierania wymaga odczytu lub odczytu i zapisu, uprawnień i określonego <paramref name="stream" /> jest tylko do zapisu; lub pakietu, aby otworzyć wymaga zapisu lub uprawnienia odczytu/zapisu i określonego <paramref name="stream" /> jest tylko do odczytu.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Open : string -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka i nazwa pliku pakietu.</param>
        <summary>Zostanie otwarty pakietu w danym ścieżkę i nazwę pliku.</summary>
        <returns>Otwarty pakiet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> jest to domyślny typ pakietu używanego przez <xref:System.IO.Packaging.Package.Open%2A> metody.  
  
 To <xref:System.IO.Packaging.Package.Open%2A> metoda otwiera pakiet za pomocą atrybutów domyślnych <xref:System.IO.FileMode.OpenOrCreate>, <xref:System.IO.FileAccess.ReadWrite>, i <xref:System.IO.FileShare.None> (Aby określić różnych atrybutów, użyj jednej z innych przeciążeń metody Open).  
  
 Aby uzyskać dodatkowe informacje, zobacz specyfikację otwarte konwencje tworzenia pakietów (OPC), które można pobrać <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć nową <xref:System.IO.Packaging.Package> , zawiera <xref:System.IO.Packaging.PackageRelationship> i <xref:System.IO.Packaging.PackagePart> elementów wraz z przechowywanych danych.  Aby uzyskać pełny przykład, zobacz [pisania przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream, valuetype System.IO.FileMode packageMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream, System::IO::FileMode packageMode);" />
      <MemberSignature Language="F#" Value="static member Open : System.IO.Stream * System.IO.FileMode -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (stream, packageMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień we/wy, na której można otworzyć pakietu.</param>
        <param name="packageMode">Tryb pliku, w którym można otworzyć pakietu.</param>
        <summary>Zostanie otwarty pakiet z danej operacji We/Wy strumienia i tryb pliku.</summary>
        <returns>Otwarty pakiet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> jest to domyślny typ pakietu używanego przez <xref:System.IO.Packaging.Package.Open%2A> metody.  
  
 Aby uzyskać dodatkowe informacje, zobacz specyfikację otwarte konwencje tworzenia pakietów (OPC), które można pobrać <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="packageMode" /> wartość jest nieprawidłowa.</exception>
        <exception cref="T:System.IO.IOException">Pakiet do otwierania wymaga odczytu lub odczytu i zapisu, uprawnień i określonego <paramref name="stream" /> jest tylko do zapisu; lub pakietu, aby otworzyć wymaga zapisu lub uprawnienia odczytu/zapisu i określonego <paramref name="stream" /> jest tylko do odczytu.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.FileMode -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (path, packageMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka i nazwa pliku pakietu.</param>
        <param name="packageMode">Tryb pliku, w którym można otworzyć pakietu.</param>
        <summary>Zostanie otwarty pakietu w określonej ścieżki przy użyciu trybu danego pliku.</summary>
        <returns>Otwarty pakiet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> jest to domyślny typ pakietu używanego przez <xref:System.IO.Packaging.Package.Open%2A> metody.  
  
 To <xref:System.IO.Packaging.Package.Open%2A> metoda otwiera pakiet za pomocą atrybutów domyślnych <xref:System.IO.FileAccess.ReadWrite> i <xref:System.IO.FileShare.None> (Aby określić różnych atrybutów, użyj jednej z innych przeciążeń metody Open).  
  
 Aby uzyskać dodatkowe informacje, zobacz specyfikację otwarte konwencje tworzenia pakietów (OPC), które można pobrać <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć nową <xref:System.IO.Packaging.Package> , zawiera <xref:System.IO.Packaging.PackageRelationship> i <xref:System.IO.Packaging.PackagePart> elementów wraz z przechowywanych danych.  Aby uzyskać pełny przykład, zobacz [pisania przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość <paramref name="packageMode" /> jest nieprawidłowa.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess);" />
      <MemberSignature Language="F#" Value="static member Open : System.IO.Stream * System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (stream, packageMode, packageAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień we/wy, na której można otworzyć pakietu.</param>
        <param name="packageMode">Tryb pliku, w którym można otworzyć pakietu.</param>
        <param name="packageAccess">Dostęp do plików w którym można otworzyć pakietu.</param>
        <summary>Zostanie otwarty pakiet z danego strumienia we/wy, tryb pliku i ustawienia dostępu do plików.</summary>
        <returns>Otwarty pakiet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> jest to domyślny typ pakietu używanego przez <xref:System.IO.Packaging.Package.Open%2A> metody.  
  
 Aby uzyskać dodatkowe informacje, zobacz specyfikację otwarte konwencje tworzenia pakietów (OPC), które można pobrać <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość <paramref name="packageMode" /> lub <paramref name="packageAccess" /> jest nieprawidłowy.</exception>
        <exception cref="T:System.IO.IOException">Pakiet do otwierania wymaga odczytu lub odczytu i zapisu, uprawnienia, a określony <paramref name="stream" /> jest tylko do zapisu; lub pakietu, aby otworzyć wymaga zapisu lub uprawnienia odczytu/zapisu, a określony <paramref name="stream" /> jest tylko do odczytu.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode, packageAccess As FileAccess) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (path, packageMode, packageAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka i nazwa pliku pakietu.</param>
        <param name="packageMode">Tryb pliku, w którym można otworzyć pakietu.</param>
        <param name="packageAccess">Dostęp do plików w którym można otworzyć pakietu.</param>
        <summary>Zostanie otwarty pakietu w określonej ścieżki przy użyciu danego pliku tryb i ustawienia dostępu do plików.</summary>
        <returns>Otwarty pakiet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> jest to domyślny typ pakietu używanego przez <xref:System.IO.Packaging.Package.Open%2A> metody.  
  
 To <xref:System.IO.Packaging.Package.Open%2A> metoda otwiera pakiet z domyślną <xref:System.IO.FileShare.None> atrybutu (Aby określić inny atrybut <xref:System.IO.Packaging.Package.Open%2A> przeciążenie metody).  
  
 Aby uzyskać dodatkowe informacje, zobacz specyfikację otwarte konwencje tworzenia pakietów (OPC), które można pobrać <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak otworzyć i przeczytać <xref:System.IO.Packaging.Package> zawierający <xref:System.IO.Packaging.PackageRelationship> i <xref:System.IO.Packaging.PackagePart> elementów wraz z przechowywanych danych.  Aby uzyskać pełny przykład, zobacz [odczytywanie przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160034).  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość <paramref name="packageMode" /> lub <paramref name="packageAccess" /> jest nieprawidłowy.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess, System.IO.FileShare packageShare);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess, valuetype System.IO.FileShare packageShare) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode, packageAccess As FileAccess, packageShare As FileShare) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess, System::IO::FileShare packageShare);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (path, packageMode, packageAccess, packageShare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
        <Parameter Name="packageShare" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka i nazwa pliku pakietu.</param>
        <param name="packageMode">Tryb pliku, w którym można otworzyć pakietu.</param>
        <param name="packageAccess">Dostęp do plików w którym można otworzyć pakietu.</param>
        <param name="packageShare">Tryb, w której chcesz otworzyć pakiet udostępniania plików.</param>
        <summary>Zostanie otwarty pakietu w określonej ścieżki przy użyciu trybu danego pliku, dostęp do plików i udziału plików ustawienie.</summary>
        <returns>Otwarty pakiet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> jest to domyślny typ pakietu używanego przez <xref:System.IO.Packaging.Package.Open%2A> metody.  
  
 Aby uzyskać dodatkowe informacje, zobacz specyfikację otwarte konwencje tworzenia pakietów (OPC), które można pobrać <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć nową <xref:System.IO.Packaging.Package> , zawiera <xref:System.IO.Packaging.PackageRelationship> i <xref:System.IO.Packaging.PackagePart> elementów wraz z przechowywanych danych.  Aby uzyskać pełny przykład, zobacz [pisania przykładowy pakiet](https://go.microsoft.com/fwlink/?LinkID=160055).  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość <paramref name="packageMode" />, <paramref name="packageAccess" />, lub <paramref name="packageShare" /> jest nieprawidłowy.</exception>
      </Docs>
    </Member>
    <Member MemberName="PackageProperties">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageProperties PackageProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.PackageProperties PackageProperties" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.Package.PackageProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PackageProperties As PackageProperties" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::PackageProperties ^ PackageProperties { System::IO::Packaging::PackageProperties ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PackageProperties : System.IO.Packaging.PackageProperties" Usage="System.IO.Packaging.Package.PackageProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera podstawowe właściwości pakietu.</summary>
        <value>Podstawowe właściwości pakietu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać dodatkowe informacje na temat podstawowe właściwości pakietu, zawiera sekcja 3.1 w specyfikacji Open konwencje tworzenia pakietów (OPC) dostępny do pobrania w <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Pakiet nie jest otwarty (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> lub <see cref="M:System.IO.Packaging.Package.Close" /> została wywołana).</exception>
      </Docs>
    </Member>
    <Member MemberName="PartExists">
      <MemberSignature Language="C#" Value="public virtual bool PartExists (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PartExists(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.PartExists(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartExists (partUri As Uri) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool PartExists(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="abstract member PartExists : Uri -&gt; bool&#xA;override this.PartExists : Uri -&gt; bool" Usage="package.PartExists partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri"><see cref="T:System.Uri" /> Części do wyszukania.</param>
        <summary>Wskazuje, czy element z danym identyfikatorem URI znajduje się w pakiecie.</summary>
        <returns><see langword="true" /> Jeśli element z określonym <paramref name="partUri" /> znajduje się w pakiecie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` Powinien zaczynać się od znaku ukośnika do przodu "/" i być bezwzględna w katalogu głównym pakietu.  
  
 Aby uzyskać dodatkowe informacje, zobacz specyfikację otwarte konwencje tworzenia pakietów (OPC), które można pobrać <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> nie jest prawidłowym <see cref="T:System.IO.Packaging.PackagePart" /> [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)].</exception>
        <exception cref="T:System.ObjectDisposedException">Pakiet nie jest otwarty (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> lub <see cref="M:System.IO.Packaging.Package.Close" /> została wywołana).</exception>
        <exception cref="T:System.IO.IOException">Pakiet jest tylko do zapisu (nie można odczytać informacji).</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.PackagePart" />
      </Docs>
    </Member>
    <Member MemberName="RelationshipExists">
      <MemberSignature Language="C#" Value="public bool RelationshipExists (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RelationshipExists(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RelationshipExists (id As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RelationshipExists(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.RelationshipExists : string -&gt; bool" Usage="package.RelationshipExists id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" /> Relacji do wyszukania.</param>
        <summary>Wskazuje, czy poziom pakietu relację z danym Identyfikatorem znajduje się w pakiecie.</summary>
        <returns><see langword="true" /> Jeśli poziom pakietu relacji z określonym <paramref name="id" /> znajduje się w pakiecie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać dodatkowe informacje, zobacz specyfikację otwarte konwencje tworzenia pakietów (OPC), które można pobrać <https://go.microsoft.com/fwlink/?LinkID=71255>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> nie jest prawidłowym identyfikatorem XML.</exception>
        <exception cref="T:System.ObjectDisposedException">Pakiet nie jest otwarty (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> lub <see cref="M:System.IO.Packaging.Package.Close" /> została wywołana).</exception>
        <exception cref="T:System.IO.IOException">Pakiet jest tylko do zapisu.</exception>
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ten element członkowski obsługuje [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastrukturę i nie jest przeznaczona do użytku aplikacji.  Użyj bezpiecznego typu <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> metody zamiast tego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>