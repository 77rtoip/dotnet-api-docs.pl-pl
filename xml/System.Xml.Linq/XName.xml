<Type Name="XName" FullName="System.Xml.Linq.XName">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5f70a782c2233a9f629a3152500fb3c048d1b8af" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39845159" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XName : IEquatable&lt;System.Xml.Linq.XName&gt;, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit XName extends System.Object implements class System.IEquatable`1&lt;class System.Xml.Linq.XName&gt;, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XName" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XName&#xA;Implements IEquatable(Of XName), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XName sealed : IEquatable&lt;System::Xml::Linq::XName ^&gt;, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type XName = class&#xA;    interface IEquatable&lt;XName&gt;&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xml.Linq.XName&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.Xml.Linq.NameSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c3e02-101">Reprezentuje nazwę elementu lub atrybutu XML.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c3e02-101">Represents a name of an XML element or attribute.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e02-102">Nazwy XML obejmują przestrzeni nazw i nazwę lokalnego.</span><span class="sxs-lookup"><span data-stu-id="c3e02-102">XML names include a namespace and a local name.</span></span> <span data-ttu-id="c3e02-103">A *w pełni kwalifikowana nazwa* to kombinacja przestrzeni nazw i nazwa lokalna.</span><span class="sxs-lookup"><span data-stu-id="c3e02-103">A *fully qualified name* is the combination of the namespace and local name.</span></span>  
  
## <a name="creating-an-xname-object"></a><span data-ttu-id="c3e02-104">Tworzenie obiektu XName</span><span class="sxs-lookup"><span data-stu-id="c3e02-104">Creating an XName Object</span></span>  
 <span data-ttu-id="c3e02-105"><xref:System.Xml.Linq.XName> nie zawiera żadnych konstruktorów publicznych.</span><span class="sxs-lookup"><span data-stu-id="c3e02-105"><xref:System.Xml.Linq.XName> does not contain any public constructors.</span></span> <span data-ttu-id="c3e02-106">Zamiast tego należy ta klasa dostarcza niejawną konwersję z <xref:System.String> umożliwiająca tworzenie <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c3e02-106">Instead, this class provides an implicit conversion from <xref:System.String> that allows you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3e02-107">Najbardziej typowe miejsca, możesz użyć tej konwersji jest przy konstruowaniu element lub atrybut: pierwszy argument <xref:System.Xml.Linq.XElement> Konstruktor jest <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c3e02-107">The most common place you use this conversion is when constructing an element or attribute: The first argument to the <xref:System.Xml.Linq.XElement> constructor is an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3e02-108">Przekazując ciąg, możesz korzystać z niejawnej konwersji.</span><span class="sxs-lookup"><span data-stu-id="c3e02-108">By passing a string, you take advantage of the implicit conversion.</span></span> <span data-ttu-id="c3e02-109">Poniższy kod tworzy element o nazwie, która znajduje się w żadnej przestrzeni nazw:</span><span class="sxs-lookup"><span data-stu-id="c3e02-109">The following code creates an element with a name that is in no namespace:</span></span>  
  
```csharp  
XElement root = new XElement("ElementName", "content");  
Console.WriteLine(root);  
```  
  
 <span data-ttu-id="c3e02-110">W języku Visual Basic jest bardziej odpowiednie użycie literałów XML:</span><span class="sxs-lookup"><span data-stu-id="c3e02-110">In Visual Basic, it is more appropriate to use XML literals:</span></span>  
  
```vb  
Dim root As XElement = <ElementName>content</ElementName>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3e02-111">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="c3e02-111">This example produces the following output:</span></span>  
  
```xml  
<ElementName>content</ElementName>  
```  
  
 <span data-ttu-id="c3e02-112">Ciąg do przypisywania <xref:System.Xml.Linq.XName> używa niejawna konwersja z <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="c3e02-112">Assigning a string to an <xref:System.Xml.Linq.XName> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="c3e02-113">W przykładzie w języku Visual Basic tworzy <xref:System.Xml.Linq.XElement> przy użyciu literałów XML.</span><span class="sxs-lookup"><span data-stu-id="c3e02-113">The Visual Basic example creates the <xref:System.Xml.Linq.XElement> using XML literals.</span></span> <span data-ttu-id="c3e02-114">Mimo że literały XML są używane, <xref:System.Xml.Linq.XName> obiekt zostanie utworzony dla <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="c3e02-114">Even though XML literals are used, an <xref:System.Xml.Linq.XName> object is created for the <xref:System.Xml.Linq.XElement>.</span></span>  
  
 <span data-ttu-id="c3e02-115">Ponadto, możesz wywołać <xref:System.Xml.Linq.XName.Get%2A> metodę <xref:System.Xml.Linq.XName> obiektu.</span><span class="sxs-lookup"><span data-stu-id="c3e02-115">In addition, you can call the <xref:System.Xml.Linq.XName.Get%2A> method for an <xref:System.Xml.Linq.XName> object.</span></span> <span data-ttu-id="c3e02-116">Jednak zalecaną metodą jest użycie niejawnej konwersji ciągu.</span><span class="sxs-lookup"><span data-stu-id="c3e02-116">However, the recommended way is to use the implicit conversion from string.</span></span>  
  
## <a name="creating-an-xname-in-a-namespace"></a><span data-ttu-id="c3e02-117">Tworzenie XName w Namespace</span><span class="sxs-lookup"><span data-stu-id="c3e02-117">Creating an XName in a Namespace</span></span>  
 <span data-ttu-id="c3e02-118">Podobnie jak w przypadku XML, <xref:System.Xml.Linq.XName> mogą znajdować się w przestrzeni nazw lub może być w żadnej przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="c3e02-118">As with XML, an <xref:System.Xml.Linq.XName> can be in a namespace, or it can be in no namespace.</span></span>  
  
 <span data-ttu-id="c3e02-119">Dla języka C#, zalecane podejście do tworzenia <xref:System.Xml.Linq.XName> w przestrzeni nazw jest, aby zadeklarować <xref:System.Xml.Linq.XNamespace> obiektu, a następnie użyj zastępowania metody operator dodawania.</span><span class="sxs-lookup"><span data-stu-id="c3e02-119">For C#, the recommended approach for creating an <xref:System.Xml.Linq.XName> in a namespace is to declare the <xref:System.Xml.Linq.XNamespace> object, then use the override of the addition operator.</span></span>  
  
 <span data-ttu-id="c3e02-120">Dla języka Visual Basic Zalecanym podejściem jest Użyj literały XML i deklaracji globalnej przestrzeni nazw, aby utworzyć plik XML, który znajduje się w przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="c3e02-120">For Visual Basic, the recommended approach is to use XML literals and global namespace declarations to create XML that is in a namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "ElementName", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <ElementName>content</ElementName>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3e02-121">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="c3e02-121">This example produces the following output:</span></span>  
  
```xml  
<ElementName xmlns="http://www.adventure-works.com">content</ElementName>  
```  
  
## <a name="creating-an-xname-in-no-namespace"></a><span data-ttu-id="c3e02-122">Tworzenie XName w nie Namespace</span><span class="sxs-lookup"><span data-stu-id="c3e02-122">Creating an XName in no Namespace</span></span>  
 <span data-ttu-id="c3e02-123"><xref:System.Xml.Linq.XName.Namespace%2A> Właściwość <xref:System.Xml.Linq.XName> obiektu może nie mieć wartości null.</span><span class="sxs-lookup"><span data-stu-id="c3e02-123">The <xref:System.Xml.Linq.XName.Namespace%2A> property of an <xref:System.Xml.Linq.XName> object is guaranteed to not be null.</span></span> <span data-ttu-id="c3e02-124">Jeśli <xref:System.Xml.Linq.XName> znajduje się w żadnej przestrzeni nazw, a następnie <xref:System.Xml.Linq.XName.Namespace%2A> będzie można ustawić właściwości <xref:System.Xml.Linq.XNamespace.None%2A>.</span><span class="sxs-lookup"><span data-stu-id="c3e02-124">If the <xref:System.Xml.Linq.XName> is in no namespace, then the <xref:System.Xml.Linq.XName.Namespace%2A> property will be set to <xref:System.Xml.Linq.XNamespace.None%2A>.</span></span> <span data-ttu-id="c3e02-125">Poniższy kod przedstawia to:</span><span class="sxs-lookup"><span data-stu-id="c3e02-125">The following code demonstrates this:</span></span>  
  
```csharp  
XElement root = new XElement("ElementName", "content");  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("The element is in no namespace.");  
else  
    Console.WriteLine("The element is in a namespace.");  
```  
  
```vb  
Dim root As XElement = <ElementName>content</ElementName>  
If (root.Name.Namespace Is XNamespace.None) Then  
    Console.WriteLine("The element is in no namespace.")  
Else  
    Console.WriteLine("The element is in a namespace.")  
End If  
```  
  
 <span data-ttu-id="c3e02-126">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="c3e02-126">This example produces the following output:</span></span>  
  
```  
The element is in no namespace.  
```  
  
## <a name="using-expanded-names"></a><span data-ttu-id="c3e02-127">Za pomocą rozwiniętej nazwy</span><span class="sxs-lookup"><span data-stu-id="c3e02-127">Using Expanded Names</span></span>  
 <span data-ttu-id="c3e02-128">Można również utworzyć <xref:System.Xml.Linq.XName> z rozwiniętej nazwy XML w formie `{namespace}localname`:</span><span class="sxs-lookup"><span data-stu-id="c3e02-128">You can also create an <xref:System.Xml.Linq.XName> from a expanded XML name in the form `{namespace}localname`:</span></span>  
  
```csharp  
XElement root = new XElement("{http://www.adventure-works.com}ElementName", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = New XElement("{http://www.adventure-works.com}ElementName", "content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3e02-129">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="c3e02-129">This example produces the following output:</span></span>  
  
```xml  
<ElementName xmlns="http://www.adventure-works.com">content</ElementName>  
```  
  
 <span data-ttu-id="c3e02-130">Należy pamiętać, że tworzenie <xref:System.Xml.Linq.XName> za pomocą rozwiniętą nazwę jest mniej wydajne niż tworzenie <xref:System.Xml.Linq.XNamespace> obiektu i za pomocą zastępowania operator dodawania.</span><span class="sxs-lookup"><span data-stu-id="c3e02-130">Be aware that creating an <xref:System.Xml.Linq.XName> through an expanded name is less efficient than creating an <xref:System.Xml.Linq.XNamespace> object and using the override of the addition operator.</span></span> <span data-ttu-id="c3e02-131">Jest również mniej wydajne niż importowanie globalnej przestrzeni nazw i przy użyciu literałów XML w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c3e02-131">It is also less efficient than importing a global namespace and using XML literals in Visual Basic.</span></span>  
  
 <span data-ttu-id="c3e02-132">Jeśli tworzysz <xref:System.Xml.Linq.XName> za pomocą rozwiniętą nazwę, LINQ to XML musi najpierw odnaleźć wystąpienia rozproszone obiekty w przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="c3e02-132">If you create an <xref:System.Xml.Linq.XName> using an expanded name, LINQ to XML must find the atomized instance of a namespace.</span></span> <span data-ttu-id="c3e02-133">Tej pracy należy powtórzyć dla każdego użycia rozwiniętej nazwy.</span><span class="sxs-lookup"><span data-stu-id="c3e02-133">This work must be repeated for every use of an expanded name.</span></span> <span data-ttu-id="c3e02-134">Ten dodatkowy czas będzie prawdopodobnie niewielki podczas pisania zapytań LINQ; jednak może być istotne podczas tworzenia dużych drzewa XML.</span><span class="sxs-lookup"><span data-stu-id="c3e02-134">This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.</span></span>  
  
## <a name="xname-objects-are-atomized"></a><span data-ttu-id="c3e02-135">Rozproszone obiekty są obiekty XName</span><span class="sxs-lookup"><span data-stu-id="c3e02-135">XName Objects are Atomized</span></span>  
 <span data-ttu-id="c3e02-136"><xref:System.Xml.Linq.XName> obiekty są musi być rozproszone obiekty; oznacza to jeśli dwa <xref:System.Xml.Linq.XName> obiekty mają dokładnie tej samej przestrzeni nazw i dokładnie takiej samej nazwie lokalnym, będą one współdzielić tego samego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="c3e02-136"><xref:System.Xml.Linq.XName> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XName> objects have exactly the same namespace and exactly the same local name, they will share the same instance.</span></span> <span data-ttu-id="c3e02-137">Operatory równości i porównanie również są dostarczone jawnie w tym celu.</span><span class="sxs-lookup"><span data-stu-id="c3e02-137">The equality and comparison operators are also provided explicitly for this purpose.</span></span>  
  
 <span data-ttu-id="c3e02-138">Wśród innych korzyści ta funkcja umożliwia szybsze wykonywanie zapytań.</span><span class="sxs-lookup"><span data-stu-id="c3e02-138">Among other benefits, this feature allows for faster execution of queries.</span></span> <span data-ttu-id="c3e02-139">Podczas filtrowania według nazwy elementów lub atrybutów, porównania wyrażone w predykatach Użyj porównania tożsamości, nie porównanie wartości.</span><span class="sxs-lookup"><span data-stu-id="c3e02-139">When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison.</span></span> <span data-ttu-id="c3e02-140">Jest znacznie szybszy, aby określić, że dwa odwołania odwołują się faktycznie do tego samego obiektu, niż można porównać dwóch ciągów.</span><span class="sxs-lookup"><span data-stu-id="c3e02-140">It is much faster to determine that two references actually refer to the same object than to compare two strings.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xName.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="c3e02-141">
            <see cref="T:System.Xml.Linq.XName" /> Do porównania z bieżącą <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-141">The <see cref="T:System.Xml.Linq.XName" /> to compare to the current <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c3e02-142">Określa, czy określony <see cref="T:System.Xml.Linq.XName" /> jest równa to <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-142">Determines whether the specified <see cref="T:System.Xml.Linq.XName" /> is equal to this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c3e02-143">
            <see langword="true" /> Jeśli określony <see cref="T:System.Xml.Linq.XName" /> jest taki sam, jak bieżący <see cref="T:System.Xml.Linq.XName" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-143">
              <see langword="true" /> if the specified <see cref="T:System.Xml.Linq.XName" /> is equal to the current <see cref="T:System.Xml.Linq.XName" />; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e02-144">Dla dwóch <xref:System.Xml.Linq.XName> obiektów jako równe, muszą mieć taką samą nazwę rozwinięte.</span><span class="sxs-lookup"><span data-stu-id="c3e02-144">For two <xref:System.Xml.Linq.XName> objects to be equal, they must have the same expanded name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Get">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c3e02-145">Pobiera <see cref="T:System.Xml.Linq.XName" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-145">Gets an <see cref="T:System.Xml.Linq.XName" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e02-146">Ta metoda zapewnia przeciążenia, które pozwalają tworzyć <xref:System.Xml.Linq.XName> z rozwiniętej nazwy XML.</span><span class="sxs-lookup"><span data-stu-id="c3e02-146">This method provides overloads that allow you to create an <xref:System.Xml.Linq.XName> from a expanded XML name.</span></span> <span data-ttu-id="c3e02-147">Możesz utworzyć <xref:System.Xml.Linq.XName> z ciągu w postaci `{namespace}localname`, lub z przestrzeni nazw i nazwy lokalne, określane oddzielnie.</span><span class="sxs-lookup"><span data-stu-id="c3e02-147">You can create an <xref:System.Xml.Linq.XName> from a string in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="c3e02-148">Znacznie bardziej typowe i łatwiejszym sposobem tworzenia <xref:System.Xml.Linq.XName> jest użycie niejawnej konwersji ciągu.</span><span class="sxs-lookup"><span data-stu-id="c3e02-148">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span> <span data-ttu-id="c3e02-149">Aby utworzyć nazwę, która znajduje się w przestrzeni nazw, typowym podejściem jest użycie Przeciążony operator dodawania, która pozwala połączyć <xref:System.Xml.Linq.XNamespace> obiektów i ciąg.</span><span class="sxs-lookup"><span data-stu-id="c3e02-149">To create a name that is in a namespace, the common approach is to use the addition operator overload that allows you to combine an <xref:System.Xml.Linq.XNamespace> object and a string.</span></span>  
  
 <span data-ttu-id="c3e02-150">Aby uzyskać więcej informacji i przykładów, zobacz [porady: Tworzenie dokumentu z przestrzeniami nazw (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c).</span><span class="sxs-lookup"><span data-stu-id="c3e02-150">For more information and examples, see [How to: Create a Document with Namespaces (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c).</span></span>  
  
 <span data-ttu-id="c3e02-151">Aby uzyskać więcej informacji na temat korzystania z przestrzeni nazw w języku Visual Basic, zobacz [przestrzeni nazw w języku Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc).</span><span class="sxs-lookup"><span data-stu-id="c3e02-151">For more information on using namespaces in Visual Basic, see [Namespaces in Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc).</span></span>  
  
 <span data-ttu-id="c3e02-152">Ponieważ <xref:System.Xml.Linq.XName> obiekty są rozproszone obiekty, jeśli istnieje <xref:System.Xml.Linq.XName> o dokładnie takiej samej nazwie, zmienna przypisane będzie odnosił się do istniejącego <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c3e02-152">Because <xref:System.Xml.Linq.XName> objects are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3e02-153">Jeśli nie istnieje <xref:System.Xml.Linq.XName>, nową jeden zostaną utworzone i zainicjowane.</span><span class="sxs-lookup"><span data-stu-id="c3e02-153">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName Get (string expandedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XName Get(string expandedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (expandedName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ Get(System::String ^ expandedName);" />
      <MemberSignature Language="F#" Value="static member Get : string -&gt; System.Xml.Linq.XName" Usage="System.Xml.Linq.XName.Get expandedName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expandedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expandedName">
          <span data-ttu-id="c3e02-154">A <see cref="T:System.String" /> zawierający rozwiniętej nazwy w formacie XML <c>localname {namespace}</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-154">A <see cref="T:System.String" /> that contains an expanded XML name in the format <c>{namespace}localname</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c3e02-155">Pobiera <see cref="T:System.Xml.Linq.XName" /> obiekt z rozwiniętej nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-155">Gets an <see cref="T:System.Xml.Linq.XName" /> object from an expanded name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c3e02-156">
            <see cref="T:System.Xml.Linq.XName" /> Obiekt skonstruowany z rozwiniętej nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-156">An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e02-157">Ta metoda zawiera przeciążenia, które pozwalają tworzyć <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c3e02-157">This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3e02-158">Można go utworzyć, korzystając z rozwiniętej nazwy XML w formie `{namespace}localname`, lub z przestrzeni nazw i nazwy lokalne, określane oddzielnie.</span><span class="sxs-lookup"><span data-stu-id="c3e02-158">You can create it from a expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="c3e02-159">Znacznie bardziej typowe i łatwiejszym sposobem tworzenia <xref:System.Xml.Linq.XName> jest użycie niejawnej konwersji ciągu.</span><span class="sxs-lookup"><span data-stu-id="c3e02-159">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span>  
  
 <span data-ttu-id="c3e02-160">Ponieważ <xref:System.Xml.Linq.XName> są rozproszone obiekty, jeśli istnieje <xref:System.Xml.Linq.XName> o dokładnie takiej samej nazwie, zmienna przypisane będzie odnosił się do istniejącego <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c3e02-160">Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3e02-161">Jeśli nie istnieje <xref:System.Xml.Linq.XName>, nową jeden zostaną utworzone i zainicjowane.</span><span class="sxs-lookup"><span data-stu-id="c3e02-161">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3e02-162">Poniższy przykład pokazuje użycie tej metody.</span><span class="sxs-lookup"><span data-stu-id="c3e02-162">The following example shows the use of this method.</span></span>  
  
```csharp  
XName name = XName.Get("{http://www.adventure-works.com}Root");  
XElement el = new XElement(name, "content");  
Console.WriteLine(el);  
  
// This is the preferred approach for specifying the XName in the  
// constructor of XElement.  
XNamespace aw = "http://www.adventure-works.com";  
XElement el2 = new XElement(aw + "Root", "content");  
Console.WriteLine(el2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim name As XName = XName.Get("{http://www.adventure-works.com}Root")  
        Dim el As XElement = New XElement(name, "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach for specifying an XName in a namespace  
        ' for Visual Basic is to import a global namespace.  
        Dim el2 As XElement = <Root>content</Root>  
        Console.WriteLine(el2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3e02-163">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="c3e02-163">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName Get (string localName, string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XName Get(string localName, string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Get(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (localName As String, namespaceName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ Get(System::String ^ localName, System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member Get : string * string -&gt; System.Xml.Linq.XName" Usage="System.Xml.Linq.XName.Get (localName, namespaceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">
          <span data-ttu-id="c3e02-164">Lokalna nazwa (niekwalifikowana).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-164">A local (unqualified) name.</span>
          </span>
        </param>
        <param name="namespaceName">
          <span data-ttu-id="c3e02-165">Przestrzeń nazw XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-165">An XML namespace.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c3e02-166">Pobiera <see cref="T:System.Xml.Linq.XName" /> obiekt z nazwą lokalną i przestrzeni nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-166">Gets an <see cref="T:System.Xml.Linq.XName" /> object from a local name and a namespace.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c3e02-167">
            <see cref="T:System.Xml.Linq.XName" /> Obiektu utworzonego na podstawie określonej nazwy lokalnego i przestrzeni nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-167">An <see cref="T:System.Xml.Linq.XName" /> object created from the specified local name and namespace.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e02-168">Ta metoda zawiera przeciążenia, które pozwalają tworzyć <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c3e02-168">This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3e02-169">Można go utworzyć, korzystając z rozwiniętej nazwy XML w formie `{namespace}localname`, lub z przestrzeni nazw i nazwy lokalne, określane oddzielnie.</span><span class="sxs-lookup"><span data-stu-id="c3e02-169">You can create it from an expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="c3e02-170">Znacznie bardziej typowe i łatwiejszym sposobem tworzenia <xref:System.Xml.Linq.XName> jest użycie niejawnej konwersji ciągu.</span><span class="sxs-lookup"><span data-stu-id="c3e02-170">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span>  
  
 <span data-ttu-id="c3e02-171">Ponieważ <xref:System.Xml.Linq.XName> są rozproszone obiekty, jeśli istnieje <xref:System.Xml.Linq.XName> o dokładnie takiej samej nazwie, zmienna przypisane będzie odnosił się do istniejącego <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c3e02-171">Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3e02-172">Jeśli nie istnieje <xref:System.Xml.Linq.XName>, nową jeden zostaną utworzone i zainicjowane.</span><span class="sxs-lookup"><span data-stu-id="c3e02-172">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3e02-173">Poniższy przykład pokazuje użycie tej metody.</span><span class="sxs-lookup"><span data-stu-id="c3e02-173">The following example shows the use of this method.</span></span>  
  
```csharp  
XName name = XName.Get("Root", "http://www.adventure-works.com");  
XElement el = new XElement(name, "content");  
Console.WriteLine(el);  
  
// This is the preferred form.  
XNamespace aw = "http://www.adventure-works.com";  
XElement el2 = new XElement(aw + "Root", "content");  
Console.WriteLine(el2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim name As XName = XName.Get("{http://www.adventure-works.com}Root")  
        Dim el As XElement = New XElement(name, "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach for specifying an XName in a namespace  
        ' for Visual Basic is to import a global namespace.  
        Dim el2 As XElement = <Root>content</Root>  
        Console.WriteLine(el2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3e02-174">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="c3e02-174">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xName.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c3e02-175">Pobiera wartość skrótu dla tego <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-175">Gets a hash code for this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c3e02-176">
            <see cref="T:System.Int32" /> Zawierający kod skrótu dla <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-176">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e02-177">Ta metoda służy jako funkcji wyznaczania wartości skrótu dla <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c3e02-177">This method serves as a hash function for <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3e02-178">Możesz użyć <xref:System.Xml.Linq.XName.GetHashCode%2A> algorytmy wyznaczania wartości skrótu lub struktur danych, takich jak Tabela skrótów.</span><span class="sxs-lookup"><span data-stu-id="c3e02-178">You can use <xref:System.Xml.Linq.XName.GetHashCode%2A> in hashing algorithms, or in data structures such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="System.Xml.Linq.XName.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c3e02-179">Pobiera lokalny (niekwalifikowanej) nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-179">Gets the local (unqualified) part of the name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c3e02-180">Element <see cref="T:System.String" /> zawierający lokalny (niekwalifikowanej) nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-180">A <see cref="T:System.String" /> that contains the local (unqualified) part of the name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e02-181">Ta właściwość może nie być `null`.</span><span class="sxs-lookup"><span data-stu-id="c3e02-181">This property is guaranteed to not be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3e02-182">Poniższy przykład pokazuje użycie tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="c3e02-182">The following example shows the use of this property.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3e02-183">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="c3e02-183">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XName.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNamespace Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Namespace As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNamespace ^ Namespace { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XName.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c3e02-184">Pobiera obszar nazw część w pełni kwalifikowana nazwa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-184">Gets the namespace part of the fully qualified name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c3e02-185">
            <see cref="T:System.Xml.Linq.XNamespace" /> Zawierającą przestrzeń nazw część nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-185">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace part of the name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e02-186"><xref:System.Xml.Linq.XName.Namespace%2A> Właściwość może nie być `null`.</span><span class="sxs-lookup"><span data-stu-id="c3e02-186">The <xref:System.Xml.Linq.XName.Namespace%2A> property is guaranteed to not be `null`.</span></span> <span data-ttu-id="c3e02-187">Jeśli <xref:System.Xml.Linq.XName> znajduje się w żadnej przestrzeni nazw, właściwość ta zwraca <xref:System.Xml.Linq.XNamespace.None%2A>.</span><span class="sxs-lookup"><span data-stu-id="c3e02-187">If an <xref:System.Xml.Linq.XName> is in no namespace, this property returns <xref:System.Xml.Linq.XNamespace.None%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3e02-188">Poniższy przykład pokazuje użycie tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="c3e02-188">The following example shows the use of this property.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3e02-189">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="c3e02-189">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceName : string" Usage="System.Xml.Linq.XName.NamespaceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c3e02-190">Zwraca identyfikator URI elementu <see cref="T:System.Xml.Linq.XNamespace" /> tego <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-190">Returns the URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c3e02-191">Identyfikator URI <see cref="T:System.Xml.Linq.XNamespace" /> tego <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-191">The URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e02-192">Jest to właściwość wygody, aby uzyskać nazwę przestrzeni nazw z <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c3e02-192">This is a convenience property to get the namespace name from an <xref:System.Xml.Linq.XName>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3e02-193">W tym przykładzie tworzy element w przestrzeni nazw, a następnie drukuje obszar nazw elementu.</span><span class="sxs-lookup"><span data-stu-id="c3e02-193">This example creates an element in a namespace, and then prints the element's namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root");  
Console.WriteLine(root.Name.NamespaceName);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3e02-194">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="c3e02-194">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XName left, System.Xml.Linq.XName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XName left, class System.Xml.Linq.XName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XName, right As XName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XName ^ left, System::Xml::Linq::XName ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xml.Linq.XName * System.Xml.Linq.XName -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XName" />
        <Parameter Name="right" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="c3e02-195">Pierwszy <see cref="T:System.Xml.Linq.XName" /> do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-195">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="c3e02-196">Drugi <see cref="T:System.Xml.Linq.XName" /> do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-196">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c3e02-197">Zwraca wartość wskazującą, czy dwóch wystąpień z <see cref="T:System.Xml.Linq.XName" /> są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-197">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c3e02-198">
            <see langword="true" /> Jeśli <paramref name="left" /> i <paramref name="right" /> są równe; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-198">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e02-199">Przeciążenia operatorów `==` i `!=` uwzględniono umożliwiające porównanie <xref:System.Xml.Linq.XName> i `string`, takich jak`element.Name == "SomeElementName"`.</span><span class="sxs-lookup"><span data-stu-id="c3e02-199">The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a `string`, such as`element.Name == "SomeElementName"`.</span></span> <span data-ttu-id="c3e02-200">Operatory równości odwołań wstępnie zdefiniowanych w języku C# wymagają jeden z operandów jest konwertowany na typ drugiego za pomocą tylko konwersje odwołań.</span><span class="sxs-lookup"><span data-stu-id="c3e02-200">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</span></span> <span data-ttu-id="c3e02-201">Te operatory należy wziąć pod uwagę niejawna konwersja ciągu na <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c3e02-201">These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span>  
  
## Examples  
 <span data-ttu-id="c3e02-202">W poniższym przykładzie pokazano niektóre porównania między <xref:System.Xml.Linq.XName> obiektów i ciągów.</span><span class="sxs-lookup"><span data-stu-id="c3e02-202">The following example shows some comparisons between <xref:System.Xml.Linq.XName> objects and strings.</span></span>  
  
```csharp  
XName xn;  
xn = XName.Get("Root");  
Console.WriteLine(xn == "Root");  
  
xn = XName.Get("Root", "http://www.adventure-works.com");  
Console.WriteLine(xn == "{http://www.adventure-works.com}Root");  
  
XElement root = new XElement("Root", "content");  
Console.WriteLine(root.Name == "Root");  
```  
  
```vb  
Dim xn As XName  
xn = XName.Get("Root")  
Console.WriteLine(xn = "Root")  
  
xn = XName.Get("Root", "http://www.adventure-works.com")  
Console.WriteLine(xn = "{http://www.adventure-works.com}Root")  
  
Dim root As XElement = New XElement("Root", "content")  
Console.WriteLine(root.Name = "Root")  
```  
  
 <span data-ttu-id="c3e02-203">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="c3e02-203">This example produces the following output:</span></span>  
  
```  
True  
True  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XName (string expandedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Implicit(string expandedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expandedName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XName ^(System::String ^ expandedName);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; System.Xml.Linq.XName" Usage="System.Xml.Linq.XName.op_Implicit expandedName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expandedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expandedName">
          <span data-ttu-id="c3e02-204">Ciąg, który zawiera rozwiniętej nazwy w formacie XML <c>localname {namespace}</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-204">A string that contains an expanded XML name in the format <c>{namespace}localname</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c3e02-205">Konwertuje ciąg w formacie rozwiniętej nazwy XML (czyli<c>localname {namespace}</c>) do <see cref="T:System.Xml.Linq.XName" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-205">Converts a string formatted as an expanded XML name (that is,<c>{namespace}localname</c>) to an <see cref="T:System.Xml.Linq.XName" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c3e02-206">
            <see cref="T:System.Xml.Linq.XName" /> Obiekt skonstruowany z rozwiniętej nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-206">An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e02-207">Po utworzeniu używają tego operatora implicit <xref:System.Xml.Linq.XElement> lub <xref:System.Xml.Linq.XAttribute> , przekazując ciąg do odpowiedniego konstruktora.</span><span class="sxs-lookup"><span data-stu-id="c3e02-207">You are using this implicit operator when you create an <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> by passing a string to the appropriate constructor.</span></span>  
  
## Examples  
 <span data-ttu-id="c3e02-208">Poniższy przykład tworzy <xref:System.Xml.Linq.XName> przypisując do niej ciąg, który wywołuje ten operator niejawnej konwersji.</span><span class="sxs-lookup"><span data-stu-id="c3e02-208">The following example creates an <xref:System.Xml.Linq.XName> by assigning a string to it, which invokes this implicit conversion operator.</span></span>  
  
```csharp  
XElement el = new XElement("{http://www.adventure-works.com}Root", "content");  
Console.WriteLine(el);  
  
// The preferred approach is to initialize an XNamespace object  
// and use the overload of the addition operator.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim el As XElement = New XElement("{http://www.adventure-works.com}Root", "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach is to import a global namespace and   
        ' use an XML literal.  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3e02-209">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="c3e02-209">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XName left, System.Xml.Linq.XName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XName left, class System.Xml.Linq.XName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XName, right As XName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XName ^ left, System::Xml::Linq::XName ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xml.Linq.XName * System.Xml.Linq.XName -&gt; bool" Usage="System.Xml.Linq.XName.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XName" />
        <Parameter Name="right" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="c3e02-210">Pierwszy <see cref="T:System.Xml.Linq.XName" /> do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-210">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="c3e02-211">Drugi <see cref="T:System.Xml.Linq.XName" /> do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-211">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c3e02-212">Zwraca wartość wskazującą, czy dwóch wystąpień z <see cref="T:System.Xml.Linq.XName" /> nie są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-212">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c3e02-213">
            <see langword="true" /> Jeśli <paramref name="left" /> i <paramref name="right" /> nie są równe; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-213">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e02-214">Przeciążenia operatorów `==` i `!=` uwzględniono umożliwiające porównanie <xref:System.Xml.Linq.XName> i ciąg, taki jak`element.Name == "SomeElementName"`.</span><span class="sxs-lookup"><span data-stu-id="c3e02-214">The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a string, such as`element.Name == "SomeElementName"`.</span></span> <span data-ttu-id="c3e02-215">Operatory równości odwołań wstępnie zdefiniowanych w języku C# wymagają jeden z operandów jest konwertowany na typ drugiego za pomocą tylko konwersje odwołań.</span><span class="sxs-lookup"><span data-stu-id="c3e02-215">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</span></span> <span data-ttu-id="c3e02-216">Te operatory należy wziąć pod uwagę niejawna konwersja ciągu na <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c3e02-216">These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span>  
  
## Examples  
 <span data-ttu-id="c3e02-217">Poniższy przykład C# porównuje <xref:System.Xml.Linq.XName> obiekt na ciąg, który wywołuje tego operatora.</span><span class="sxs-lookup"><span data-stu-id="c3e02-217">The following C# example compares an <xref:System.Xml.Linq.XName> object to a string, which invokes this operator.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "content");  
  
Console.WriteLine(root.Name != "{http://www.adventure-works.com}Root");  
  
// the following is the preferred idiom  
Console.WriteLine(root.Name != aw + "Root");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root.Name <> "{http://www.adventure-works.com}Root")  
  
        ' the following is the preferred idiom  
        Console.WriteLine(root.Name <> GetXmlNamespace() + "Root")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3e02-218">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="c3e02-218">This example produces the following output:</span></span>  
  
```  
False  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals">
      <MemberSignature Language="C#" Value="bool IEquatable&lt;XName&gt;.Equals (System.Xml.Linq.XName other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals(class System.Xml.Linq.XName other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.System#IEquatable&lt;System#Xml#Linq#XName&gt;#Equals(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As XName) As Boolean Implements IEquatable(Of XName).Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals(System::Xml::Linq::XName ^ other) = IEquatable&lt;System::Xml::Linq::XName ^&gt;::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="c3e02-219">
            <see cref="T:System.Xml.Linq.XName" /> Do porównania z tym <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-219">The <see cref="T:System.Xml.Linq.XName" /> to compare with this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c3e02-220">Wskazuje, czy bieżący <see cref="T:System.Xml.Linq.XName" /> jest równa określonej <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-220">Indicates whether the current <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c3e02-221">
            <see langword="true" /> Jeśli ten <see cref="T:System.Xml.Linq.XName" /> jest równa określonej <see cref="T:System.Xml.Linq.XName" />, w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-221">
              <see langword="true" /> if this <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />, otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="c3e02-222">
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> Do wypełniania danymi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-222">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="c3e02-223">Miejsce docelowe (zobacz <see cref="T:System.Runtime.Serialization.StreamingContext" />) tej serializacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-223">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c3e02-224">Wypełnia <see cref="T:System.Runtime.Serialization.SerializationInfo" /> przy użyciu danych wymaganych do zserializowania obiektu docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-224">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data required to serialize the target object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e02-225">Ta metoda jest używana wewnętrznie w celu serializowanie wykresów obiektów, które zawierają LINQ do obiektów XML.</span><span class="sxs-lookup"><span data-stu-id="c3e02-225">This method is used internally to serialize object graphs that contain LINQ to XML objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xName.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c3e02-226">Zwraca rozwiniętej nazwy XML w formacie <c>localname {namespace}</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-226">Returns the expanded XML name in the format <c>{namespace}localname</c>.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c3e02-227">A <see cref="T:System.String" /> zawierający rozwiniętej nazwy XML w formacie <c>localname {namespace}</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3e02-227">A <see cref="T:System.String" /> that contains the expanded XML name in the format <c>{namespace}localname</c>.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c3e02-228">Poniższy przykład wywołuje <xref:System.Console.WriteLine%2A>, przekazując <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c3e02-228">The following example calls <xref:System.Console.WriteLine%2A>, passing an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3e02-229">Powoduje to, że <xref:System.Xml.Linq.XName.ToString%2A> wywoływanej metody.</span><span class="sxs-lookup"><span data-stu-id="c3e02-229">This causes the <xref:System.Xml.Linq.XName.ToString%2A> method to be called.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3e02-230">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="c3e02-230">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>