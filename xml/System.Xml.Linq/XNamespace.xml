<Type Name="XNamespace" FullName="System.Xml.Linq.XNamespace">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2328d27f4c922a98b44c543d3fdf8669f3a70dd4" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39968627" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XNamespace" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XNamespace extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XNamespace" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XNamespace" />
  <TypeSignature Language="C++ CLI" Value="public ref class XNamespace sealed" />
  <TypeSignature Language="F#" Value="type XNamespace = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="7093d-101">Reprezentuje obszar nazw XML.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7093d-101">Represents an XML namespace.</span>
      </span>
      <span data-ttu-id="7093d-102">Klasa ta nie może być dziedziczona.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7093d-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7093d-103">Ta klasa reprezentuje konstrukcję XML w przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="7093d-103">This class represents the XML construct of namespaces.</span></span>  
  
 <span data-ttu-id="7093d-104">Każdy <xref:System.Xml.Linq.XName> zawiera <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="7093d-104">Every <xref:System.Xml.Linq.XName> contains an <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="7093d-105">Nawet jeśli element nie jest w przestrzeni nazw, element <xref:System.Xml.Linq.XName> nadal zawiera obszar nazw <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7093d-105">Even if an element is not in a namespace, the element's <xref:System.Xml.Linq.XName> still contains a namespace, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7093d-106"><xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> Właściwość może nie być `null`.</span><span class="sxs-lookup"><span data-stu-id="7093d-106">The <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> property is guaranteed to not be `null`.</span></span>  
  
## <a name="creating-an-xnamespace-object"></a><span data-ttu-id="7093d-107">Tworzenie obiektu XNamespace</span><span class="sxs-lookup"><span data-stu-id="7093d-107">Creating an XNamespace Object</span></span>  
 <span data-ttu-id="7093d-108">Najczęstszym sposobem tworzenia <xref:System.Xml.Linq.XNamespace> obiekt jest po prostu przypisać ciąg do niego.</span><span class="sxs-lookup"><span data-stu-id="7093d-108">The most common way to create an <xref:System.Xml.Linq.XNamespace> object is to simply assign a string to it.</span></span> <span data-ttu-id="7093d-109">Następnie można połączyć przestrzeni nazw o nazwie lokalnej za pomocą zastępowania operator dodawania.</span><span class="sxs-lookup"><span data-stu-id="7093d-109">You can then combine the namespace with a local name by using the override of the addition operator.</span></span> <span data-ttu-id="7093d-110">Poniższy przykład przedstawia tego idiomu:</span><span class="sxs-lookup"><span data-stu-id="7093d-110">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="7093d-111">Jednak w języku Visual Basic będą zwykle Deklarujesz domyślnej globalnej przestrzeni nazw, w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="7093d-111">However, in Visual Basic, you would typically declare a global default namespace, as follows:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>Content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="7093d-112">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="7093d-112">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">Content</Root>  
```  
  
 <span data-ttu-id="7093d-113">Ciąg do przypisywania <xref:System.Xml.Linq.XNamespace> używa niejawna konwersja z <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="7093d-113">Assigning a string to an <xref:System.Xml.Linq.XNamespace> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="7093d-114">Zobacz [porady: Tworzenie dokumentu z przestrzeniami nazw (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) uzyskać więcej informacji i przykładów.</span><span class="sxs-lookup"><span data-stu-id="7093d-114">See [How to: Create a Document with Namespaces (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) for more information and examples.</span></span>  
  
 <span data-ttu-id="7093d-115">Zobacz [przestrzeni nazw w języku Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) Aby uzyskać więcej informacji na temat korzystania z przestrzeni nazw w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7093d-115">See [Namespaces in Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) for more information on using namespaces in Visual Basic.</span></span>  
  
## <a name="controlling-namespace-prefixes"></a><span data-ttu-id="7093d-116">Kontrolowanie Namespace prefiksów</span><span class="sxs-lookup"><span data-stu-id="7093d-116">Controlling Namespace Prefixes</span></span>  
 <span data-ttu-id="7093d-117">Jeśli tworzysz atrybut, który deklaruje przestrzeni nazw, prefiks określone w atrybucie zostaną utrwalone w serializacji XML.</span><span class="sxs-lookup"><span data-stu-id="7093d-117">If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML.</span></span> <span data-ttu-id="7093d-118">Aby utworzyć atrybut, który deklaruje przestrzeni nazw z prefiksem, Utwórz atrybut w przypadku przestrzeni nazw nazwa atrybutu <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, a nazwą atrybutu jest prefiks przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="7093d-118">To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, and the name of the attribute is the namespace prefix.</span></span> <span data-ttu-id="7093d-119">Wartość atrybutu jest identyfikatorem URI przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="7093d-119">The value of the attribute is the URI of the namespace.</span></span> <span data-ttu-id="7093d-120">Poniższy przykład przedstawia tego idiomu:</span><span class="sxs-lookup"><span data-stu-id="7093d-120">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"), _  
    "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="7093d-121">W języku Visual Basic zamiast tworzenia węzła obszaru nazw do kontrolowania prefiksy przestrzeni nazw, należy zwykle użyć deklaracji globalnej przestrzeni nazw:</span><span class="sxs-lookup"><span data-stu-id="7093d-121">In Visual Basic, instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>Content</aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="7093d-122">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="7093d-122">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">Content</aw:Root>  
```  
  
 <span data-ttu-id="7093d-123">Aby uzyskać więcej informacji, zobacz [instrukcje: kontrolki prefiksy Namespace (C#) (LINQ to XML)](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28).</span><span class="sxs-lookup"><span data-stu-id="7093d-123">For more information, see [How to: Control Namespace Prefixes (C#) (LINQ to XML)](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28).</span></span>  
  
## <a name="creating-a-default-namespace"></a><span data-ttu-id="7093d-124">Tworzenie Namespace domyślne</span><span class="sxs-lookup"><span data-stu-id="7093d-124">Creating a Default Namespace</span></span>  
 <span data-ttu-id="7093d-125">Podczas tworzenia atrybutu, który będzie przestrzeni nazw, jeśli nazwa atrybutu zawiera specjalna wartość "xmlns", następnie przypadku drzewa XML jest serializowana, przestrzeń nazw będzie można zadeklarować jako domyślny obszar nazw.</span><span class="sxs-lookup"><span data-stu-id="7093d-125">When constructing an attribute that will be a namespace, if the attribute name has the special value of "xmlns", then when the XML tree is serialized, the namespace will be declared as the default namespace.</span></span> <span data-ttu-id="7093d-126">Specjalne atrybutu o nazwie "xmlns" sam nie jest w dowolnym obszarze nazw.</span><span class="sxs-lookup"><span data-stu-id="7093d-126">The special attribute with the name of "xmlns" itself is not in any namespace.</span></span> <span data-ttu-id="7093d-127">Wartość atrybutu jest identyfikator URI przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="7093d-127">The value of the attribute is the namespace URI.</span></span>  
  
 <span data-ttu-id="7093d-128">Poniższy przykład tworzy drzewa XML, który zawiera atrybut, który jest zadeklarowany w taki sposób, że przestrzeń nazw będzie domyślna przestrzeń nazw:</span><span class="sxs-lookup"><span data-stu-id="7093d-128">The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute("xmlns", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute("xmlns", "http://www.adventure-works.com"), _  
    New XElement(aw + "Child", "content") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="7093d-129">W języku Visual Basic zamiast tworzyć węzła obszaru nazw, aby utworzyć domyślny obszar nazw, należy zwykle użyć deklarację domyślnej globalnej przestrzeni nazw:</span><span class="sxs-lookup"><span data-stu-id="7093d-129">In Visual Basic, instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <Child>content</Child>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="7093d-130">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="7093d-130">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child>content</Child>  
</Root>  
```  
  
## <a name="xnamespace-atomization"></a><span data-ttu-id="7093d-131">Rozproszenie XNamespace</span><span class="sxs-lookup"><span data-stu-id="7093d-131">XNamespace Atomization</span></span>  
 <span data-ttu-id="7093d-132"><xref:System.Xml.Linq.XNamespace> obiekty są musi być rozproszone obiekty; oznacza to jeśli dwa <xref:System.Xml.Linq.XNamespace> obiekty mają dokładnie tego samego identyfikatora URI, będą one współdzielić tego samego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="7093d-132"><xref:System.Xml.Linq.XNamespace> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XNamespace> objects have exactly the same URI, they will share the same instance.</span></span> <span data-ttu-id="7093d-133">Operatory równości i porównania są jawnie przewidzianej do tego celu.</span><span class="sxs-lookup"><span data-stu-id="7093d-133">The equality and comparison operators are provided explicitly for this purpose.</span></span>  
  
## <a name="using-expanded-names"></a><span data-ttu-id="7093d-134">Za pomocą rozwiniętej nazwy</span><span class="sxs-lookup"><span data-stu-id="7093d-134">Using Expanded Names</span></span>  
 <span data-ttu-id="7093d-135">Innym sposobem określenia przestrzeni nazw i nazwa lokalna jest użycie rozwiniętą nazwę w postaci `{namespace}name`:</span><span class="sxs-lookup"><span data-stu-id="7093d-135">Another way to specify a namespace and a local name is to use an expanded name in the form `{namespace}name`:</span></span>  
  
```csharp  
XElement e = new XElement("{http://www.adventure-works.com}Root",  
     new XAttribute("{http://www.adventure-works.com}Att", "content")  
);  
Console.WriteLine(e);  
```  
  
```vb  
Dim e As XElement = New XElement("{http://www.adventure-works.com}Root", _  
     New XAttribute("{http://www.adventure-works.com}Att", "content") _  
)  
Console.WriteLine(e)  
```  
  
 <span data-ttu-id="7093d-136">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="7093d-136">This example produces the following output:</span></span>  
  
```  
<Root p1:Att="content" xmlns:p1="http://www.adventure-works.com" xmlns="http://www.adventure-works.com" />  
```  
  
 <span data-ttu-id="7093d-137">Takie podejście ma wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="7093d-137">This approach has performance implications.</span></span> <span data-ttu-id="7093d-138">Każdorazowo, przekazać ciąg, który zawiera rozwiniętej nazwy, aby [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], należy przeanalizować nazwy, odnaleźć rozproszone obiekty przestrzeni nazw i Znajdź nazwę rozproszone obiekty.</span><span class="sxs-lookup"><span data-stu-id="7093d-138">Each time that you pass a string that contains an expanded name to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], it must parse the name, find the atomized namespace, and find the atomized name.</span></span> <span data-ttu-id="7093d-139">Ten proces trwa czasu procesora CPU.</span><span class="sxs-lookup"><span data-stu-id="7093d-139">This process takes CPU time.</span></span> <span data-ttu-id="7093d-140">Jeśli wydajność jest ważne, można użyć innego podejścia.</span><span class="sxs-lookup"><span data-stu-id="7093d-140">If performance is important, you may want to use a different approach.</span></span>  
  
 <span data-ttu-id="7093d-141">Za pomocą Visual Basic Zalecanym podejściem jest użycie literałów XML, który nie obejmuje rozwiniętej nazwy.</span><span class="sxs-lookup"><span data-stu-id="7093d-141">With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xNamespace.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="7093d-142">
            <see cref="T:System.Xml.Linq.XNamespace" /> Do porównania z bieżącą <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-142">The <see cref="T:System.Xml.Linq.XNamespace" /> to compare to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7093d-143">Określa, czy określony <see cref="T:System.Xml.Linq.XNamespace" /> jest taki sam, jak bieżący <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-143">Determines whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7093d-144">A <see cref="T:System.Boolean" /> oznacza to, czy określony <see cref="T:System.Xml.Linq.XNamespace" /> jest taki sam, jak bieżący <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-144">A <see cref="T:System.Boolean" /> that indicates whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7093d-145">Dla dwóch <xref:System.Xml.Linq.XNamespace> obiektów jako równe, muszą mieć tego samego identyfikatora URI.</span><span class="sxs-lookup"><span data-stu-id="7093d-145">For two <xref:System.Xml.Linq.XNamespace> objects to be equal, they must have the same URI.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7093d-146">W poniższym przykładzie porównano dwie przestrzenie nazw, które odwołują się do tego samego identyfikatora URI.</span><span class="sxs-lookup"><span data-stu-id="7093d-146">The following example compares two namespaces that refer to the same URI.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Console.WriteLine(GetXmlNamespace(aw) = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="7093d-147">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="7093d-147">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Get (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XNamespace Get(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XNamespace ^ Get(System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member Get : string -&gt; System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Get namespaceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName">
          <span data-ttu-id="7093d-148">Element <see cref="T:System.String" /> zawierający identyfikator URI przestrzeni nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-148">A <see cref="T:System.String" /> that contains a namespace URI.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7093d-149">Pobiera <see cref="T:System.Xml.Linq.XNamespace" /> dla określonego identyfikatora URI (Uniform Resource).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-149">Gets an <see cref="T:System.Xml.Linq.XNamespace" /> for the specified Uniform Resource Identifier (URI).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7093d-150">
            <see cref="T:System.Xml.Linq.XNamespace" /> Utworzone na podstawie określonego identyfikatora URI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-150">An <see cref="T:System.Xml.Linq.XNamespace" /> created from the specified URI.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7093d-151">Zwrócony <xref:System.Xml.Linq.XNamespace> obiekt może być niepodzielną (czyli jest jedyną w systemie dla tego określonego identyfikatora URI).</span><span class="sxs-lookup"><span data-stu-id="7093d-151">The returned <xref:System.Xml.Linq.XNamespace> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7093d-152">Poniższy przykład pobiera <xref:System.Xml.Linq.XNamespace> z określonego identyfikatora URI.</span><span class="sxs-lookup"><span data-stu-id="7093d-152">The following example gets a <xref:System.Xml.Linq.XNamespace> from a specified URI.</span></span>  
  
```csharp  
XNamespace aw = XNamespace.Get("http://www.adventure-works.com");  
  
// This is the preferred form.  
XNamespace aw2 = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
Console.WriteLine(aw2);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = XNamespace.Get("http://www.adventure-works.com")  
  
        ' This is the preferred form.  
        Dim aw2 As XNamespace = GetXmlNamespace(aw)  
        Console.WriteLine(aw)  
        Console.WriteLine(aw2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="7093d-153">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="7093d-153">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xNamespace.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7093d-154">Pobiera wartość skrótu dla tego <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-154">Gets a hash code for this <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7093d-155">
            <see cref="T:System.Int32" /> Zawierający kod skrótu dla <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-155">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7093d-156">Ta metoda służy jako funkcji wyznaczania wartości skrótu dla <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="7093d-156">This method serves as a hash function for <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="7093d-157">Możesz użyć <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> w mieszania algorytmów i struktur danych, takich jak Tabela skrótów.</span><span class="sxs-lookup"><span data-stu-id="7093d-157">You can use <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> in hashing algorithms and data structures like a hash table.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName GetName (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XName GetName(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetName (localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XName ^ GetName(System::String ^ localName);" />
      <MemberSignature Language="F#" Value="member this.GetName : string -&gt; System.Xml.Linq.XName" Usage="xNamespace.GetName localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">
          <span data-ttu-id="7093d-158">Element <see cref="T:System.String" /> zawierający nazwę lokalnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-158">A <see cref="T:System.String" /> that contains a local name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7093d-159">Zwraca <see cref="T:System.Xml.Linq.XName" /> obiektu utworzonego na podstawie tego <see cref="T:System.Xml.Linq.XNamespace" /> i określona nazwa lokalnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-159">Returns an <see cref="T:System.Xml.Linq.XName" /> object created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7093d-160">
            <see cref="T:System.Xml.Linq.XName" /> Utworzone na podstawie tego <see cref="T:System.Xml.Linq.XNamespace" /> i określona nazwa lokalnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-160">An <see cref="T:System.Xml.Linq.XName" /> created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7093d-161">Zwrócony <xref:System.Xml.Linq.XName> obiekt może być niepodzielną (czyli jest jedyną w systemie dla określonego rozwiniętej nazwy).</span><span class="sxs-lookup"><span data-stu-id="7093d-161">The returned <xref:System.Xml.Linq.XName> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7093d-162">W poniższym przykładzie użyto tej właściwości można pobrać <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="7093d-162">The following example uses this property to retrieve an <xref:System.Xml.Linq.XName>.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XName name = aw.GetName("Root");  
Console.WriteLine("{0}", name);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim name As XName = aw.GetName("Root")  
        Console.WriteLine("{0}", name)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="7093d-163">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="7093d-163">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceName : string" Usage="System.Xml.Linq.XNamespace.NamespaceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7093d-164">Pobiera identyfikator URI (Uniform Resource) tej przestrzeni nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-164">Gets the Uniform Resource Identifier (URI) of this namespace.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7093d-165">Element <see cref="T:System.String" /> zawierający identyfikator URI przestrzeni nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-165">A <see cref="T:System.String" /> that contains the URI of the namespace.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7093d-166">Poniższy przykład pokazuje, jak używać tej właściwości:</span><span class="sxs-lookup"><span data-stu-id="7093d-166">The following example shows how to use this property:</span></span>  
  
```csharp  
string markup =  
@"<aw:Root  
    xmlns:aw='http://www.adventure-works.com'/>";  
XElement root = XElement.Parse(markup);  
Console.WriteLine(root.Name.Namespace.NamespaceName);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim root As XElement = <aw:Root/>  
        Console.WriteLine(root.Name.Namespace.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="7093d-167">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="7093d-167">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace None" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ None { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7093d-168">Pobiera <see cref="T:System.Xml.Linq.XNamespace" /> obiekt, który odnosi się do żadnej przestrzeni nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-168">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to no namespace.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7093d-169">
            <see cref="T:System.Xml.Linq.XNamespace" /> , Który odpowiada żadnej przestrzeni nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-169">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to no namespace.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7093d-170">Jeśli element lub atrybut jest Brak przestrzeni nazw, jego przestrzeń nazw zostanie ustawiona do przestrzeni nazw, zwracane przez tę właściwość.</span><span class="sxs-lookup"><span data-stu-id="7093d-170">If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7093d-171">Poniższy przykład pokazuje używa tej właściwości, aby określić elementy, które znajdują się w żadnej przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="7093d-171">The following example shows uses this property to determine which elements are in no namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
  
XElement root = new XElement("Root",  
    new XElement(aw + "ChildInNamespace", "content"),  
    new XElement("ChildInNoNamespace", "content")  
);  
  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("Root element is in no namespace");  
else  
    Console.WriteLine("Root element is in a namespace");  
  
if (root.Element(aw + "ChildInNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNamespace element is in a namespace");  
  
if (root.Element("ChildInNoNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNoNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNoNamespace element is in a namespace");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <aw:ChildInNamespace>content</aw:ChildInNamespace>  
                <ChildInNoNamespace>content</ChildInNoNamespace>  
            </Root>  
  
        If (root.Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("Root element is in no namespace")  
        Else  
            Console.WriteLine("Root element is in a namespace")  
        End If  
  
        If (root.Element(GetXmlNamespace(aw) + "ChildInNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNamespace element is in a namespace")  
        End If  
  
        If (root.Element("ChildInNoNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNoNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNoNamespace element is in a namespace")  
        End If  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="7093d-172">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="7093d-172">This example produces the following output:</span></span>  
  
```  
Root element is in no namespace  
ChildInNamespace element is in a namespace  
ChildInNoNamespace element is in no namespace  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName operator + (System.Xml.Linq.XNamespace ns, string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Addition(class System.Xml.Linq.XNamespace ns, string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (ns As XNamespace, localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ operator +(System::Xml::Linq::XNamespace ^ ns, System::String ^ localName);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Xml.Linq.XNamespace * string -&gt; System.Xml.Linq.XName" Usage="ns + localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns">
          <span data-ttu-id="7093d-173">
            <see cref="T:System.Xml.Linq.XNamespace" /> Zawierającą przestrzeń nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-173">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace.</span>
          </span>
        </param>
        <param name="localName">
          <span data-ttu-id="7093d-174">Element <see cref="T:System.String" /> zawierający nazwę lokalnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-174">A <see cref="T:System.String" /> that contains the local name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7093d-175">Łączy <see cref="T:System.Xml.Linq.XNamespace" /> obiektu o nazwie lokalnej, aby utworzyć <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-175">Combines an <see cref="T:System.Xml.Linq.XNamespace" /> object with a local name to create an <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7093d-176">Nowy <see cref="T:System.Xml.Linq.XName" /> zbudowany z przestrzeni nazw i nazwa lokalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-176">The new <see cref="T:System.Xml.Linq.XName" /> constructed from the namespace and local name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7093d-177">Ten operator umożliwia wspólne idiom łączenia przestrzeni nazw i nazwę lokalnego w konstrukcji elementu lub atrybutu.</span><span class="sxs-lookup"><span data-stu-id="7093d-177">This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute.</span></span> <span data-ttu-id="7093d-178">Tego idiomu zawiera niektóre korzyści prefiksy przestrzeni nazw, w tym mogą odwoływać się do przestrzeni nazw za pomocą zmiennej, która jest krótka.</span><span class="sxs-lookup"><span data-stu-id="7093d-178">This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short.</span></span> <span data-ttu-id="7093d-179">Pozwala to wyeliminować składni szumu w kodzie, który tworzy drzew XML.</span><span class="sxs-lookup"><span data-stu-id="7093d-179">This eliminates syntactic noise in the code that creates XML trees.</span></span>  
  
## Examples  
 <span data-ttu-id="7093d-180">Poniższy przykład pokazuje użycie `+` operatora do utworzenia <xref:System.Xml.Linq.XName> z <xref:System.Xml.Linq.XNamespace> i lokalna nazwa.</span><span class="sxs-lookup"><span data-stu-id="7093d-180">The following example shows the use of the `+` operator to create an <xref:System.Xml.Linq.XName> from an <xref:System.Xml.Linq.XNamespace> and a local name.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XElement(aw + "Child") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="7093d-181">W języku Visual Basic jest to preferowany idiom:</span><span class="sxs-lookup"><span data-stu-id="7093d-181">In Visual Basic, this is the preferred idiom:</span></span>  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Dim root As XElement = _  
            <Root>  
                <Child/>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="7093d-182">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="7093d-182">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xml.Linq.XNamespace * System.Xml.Linq.XNamespace -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="7093d-183">Pierwszy <see cref="T:System.Xml.Linq.XNamespace" /> do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-183">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="7093d-184">Drugi <see cref="T:System.Xml.Linq.XNamespace" /> do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-184">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7093d-185">Zwraca wartość wskazującą, czy dwóch wystąpień z <see cref="T:System.Xml.Linq.XNamespace" /> są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-185">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7093d-186">A <see cref="T:System.Boolean" /> oznacza to, czy <paramref name="left" /> i <paramref name="right" /> są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-186">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7093d-187">Przeciążenia operatorów `==` i `!=` są podane w celu włączenia porównania między <xref:System.Xml.Linq.XNamespace> i ciąg (na przykład `element.Name.Namespace == "http://www.adventure-works.com"`).</span><span class="sxs-lookup"><span data-stu-id="7093d-187">The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == "http://www.adventure-works.com"`).</span></span> <span data-ttu-id="7093d-188">Operatory równości odwołań wstępnie zdefiniowanych w języku C# wymagają jeden z operandów jest konwertowany na typ drugiego za pomocą tylko konwersje odwołań i nie należy traktować niejawna konwersja ciągu na <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="7093d-188">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>  
   
## Examples  
 <span data-ttu-id="7093d-189">W poniższym przykładzie przedstawiono porównanie <xref:System.Xml.Linq.XNamespace> i ciąg.</span><span class="sxs-lookup"><span data-stu-id="7093d-189">The following example shows the comparison of an <xref:System.Xml.Linq.XNamespace> and a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="7093d-190">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="7093d-190">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XNamespace (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XNamespace op_Implicit(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XNamespace ^(System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.op_Implicit namespaceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName">
          <span data-ttu-id="7093d-191">Element <see cref="T:System.String" /> zawierający identyfikator URI przestrzeni nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-191">A <see cref="T:System.String" /> that contains the namespace URI.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7093d-192">Konwertuje ciąg zawierający jednolite zasobów identyfikator (URI) do <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-192">Converts a string containing a Uniform Resource Identifier (URI) to an <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7093d-193">
            <see cref="T:System.Xml.Linq.XNamespace" /> Skonstruowany na podstawie ciągu identyfikatora URI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-193">An <see cref="T:System.Xml.Linq.XNamespace" /> constructed from the URI string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="7093d-194">W poniższym przykładzie pokazano inicjowanie <xref:System.Xml.Linq.XNamespace> zmiennej przez przypisywanie ciągu.</span><span class="sxs-lookup"><span data-stu-id="7093d-194">The following example shows the initialization of an <xref:System.Xml.Linq.XNamespace> variable by assigning a string to it.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="7093d-195">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="7093d-195">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xml.Linq.XNamespace * System.Xml.Linq.XNamespace -&gt; bool" Usage="System.Xml.Linq.XNamespace.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="7093d-196">Pierwszy <see cref="T:System.Xml.Linq.XNamespace" /> do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-196">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="7093d-197">Drugi <see cref="T:System.Xml.Linq.XNamespace" /> do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-197">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7093d-198">Zwraca wartość wskazującą, czy dwóch wystąpień z <see cref="T:System.Xml.Linq.XNamespace" /> nie są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-198">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7093d-199">A <see cref="T:System.Boolean" /> oznacza to, czy <paramref name="left" /> i <paramref name="right" /> nie są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-199">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are not equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7093d-200">Przeciążenia operatorów `==` i `!=` są podane w celu włączenia porównania między <xref:System.Xml.Linq.XNamespace> i ciąg (na przykład `element.Name.Namespace == "http://www.adventure-works.com"`).</span><span class="sxs-lookup"><span data-stu-id="7093d-200">The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == "http://www.adventure-works.com"`).</span></span> <span data-ttu-id="7093d-201">Operatory równości odwołań wstępnie zdefiniowanych w języku C# wymagają jeden z operandów jest konwertowany na typ drugiego za pomocą tylko konwersje odwołań i nie należy traktować niejawna konwersja ciągu na <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="7093d-201">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>   
  
## Examples  
 <span data-ttu-id="7093d-202">W poniższym przykładzie przedstawiono porównanie <xref:System.Xml.Linq.XNamespace> na ciąg.</span><span class="sxs-lookup"><span data-stu-id="7093d-202">The following example shows a comparison of a <xref:System.Xml.Linq.XNamespace> to a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw != "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw <> "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="7093d-203">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="7093d-203">This example produces the following output:</span></span>  
  
```  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xNamespace.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7093d-204">Zwraca identyfikator URI tego <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-204">Returns the URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7093d-205">Identyfikator URI to <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-205">The URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7093d-206">W poniższym przykładzie użyto tej metody, aby wydrukować przestrzeni nazw w konsoli.</span><span class="sxs-lookup"><span data-stu-id="7093d-206">The following example uses this method to print a namespace on the console.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine("{0}", aw.ToString());  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine("{0}", aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="7093d-207">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="7093d-207">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xml">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xml { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xml" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xml" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xml As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xml { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Xml : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Xml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7093d-208">Pobiera <see cref="T:System.Xml.Linq.XNamespace" /> obiekt, który odnosi się do identyfikatora URI XML (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-208">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7093d-209">
            <see cref="T:System.Xml.Linq.XNamespace" /> Odnosi się do identyfikatora URI XML (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-209">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7093d-210">Niektóre standardowe atrybuty, takie jak `space`, znajdują się w `http://www.w3.org/XML/1998/namespace` przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="7093d-210">Certain standardized attributes, such as `space`, are in the `http://www.w3.org/XML/1998/namespace` namespace.</span></span> <span data-ttu-id="7093d-211">W3C standard określa tej przestrzeni nazw nie musi być zadeklarowany jako atrybut w drzewie XML.</span><span class="sxs-lookup"><span data-stu-id="7093d-211">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="7093d-212">Jest zarezerwowaną przestrzenią nazw, który jest zawsze automatycznie dostępny w analizatorze składni XML.</span><span class="sxs-lookup"><span data-stu-id="7093d-212">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7093d-213">Poniższy przykład pokazuje, jak utworzyć `xml:space="preserve"` atrybutu w drzewie XML:</span><span class="sxs-lookup"><span data-stu-id="7093d-213">The following example shows how to create an `xml:space="preserve"` attribute in an XML tree:</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute(XNamespace.Xml + "space", "preserve"),  
    new XElement("Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _  
    <Root xml:space="preserve">  
        <Child>content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="7093d-214">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="7093d-214">This example produces the following output:</span></span>  
  
```  
<Root xml:space="preserve">  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xmlns">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xmlns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xmlns" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xmlns" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xmlns As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xmlns { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Xmlns : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Xmlns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7093d-215">Pobiera <see cref="T:System.Xml.Linq.XNamespace" /> obiekt, który odpowiada xmlns identyfikatora URI (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-215">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the xmlns URI (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7093d-216">
            <see cref="T:System.Xml.Linq.XNamespace" /> , Który odpowiada **xmlns** identyfikatora URI (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7093d-216">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the **xmlns** URI (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7093d-217">Kiedy Deklarujesz przestrzenie nazw, atrybutów obszaru nazw, samodzielnie znajdują się w **xmlns** przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="7093d-217">When you declare namespaces, the namespace attributes themselves are in the **xmlns** namespace.</span></span> <span data-ttu-id="7093d-218">W3C standard określa tej przestrzeni nazw nie musi być zadeklarowany jako atrybut w drzewie XML.</span><span class="sxs-lookup"><span data-stu-id="7093d-218">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="7093d-219">Jest zarezerwowaną przestrzenią nazw, który jest zawsze automatycznie dostępny w analizatorze składni XML.</span><span class="sxs-lookup"><span data-stu-id="7093d-219">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7093d-220">Poniższy przykład pokazuje, jak dodać przestrzeń nazw do drzewa XML.</span><span class="sxs-lookup"><span data-stu-id="7093d-220">The following example shows how to add a namespace to an XML tree.</span></span> <span data-ttu-id="7093d-221">Przestrzeń nazw dla atrybutu, który deklaruje przestrzeni nazw jest przestrzeń nazw zwracane przez tę właściwość.</span><span class="sxs-lookup"><span data-stu-id="7093d-221">The namespace for the attribute that declares the namespace is the namespace returned by this property.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root = <aw:Root xmlns:aw="http://www.adventure-works.com">  
               <aw:Child>content</aw:Child>  
           </aw:Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="7093d-222">W języku Visual Basic jest preferowany idiom:</span><span class="sxs-lookup"><span data-stu-id="7093d-222">In Visual Basic, the preferred idiom is:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>  
                <aw:Child>content</aw:Child>  
            </aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="7093d-223">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="7093d-223">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">  
  <aw:Child>content</aw:Child>  
</aw:Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>