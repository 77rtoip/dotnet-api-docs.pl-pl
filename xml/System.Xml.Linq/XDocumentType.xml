<Type Name="XDocumentType" FullName="System.Xml.Linq.XDocumentType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3f7db9aaaccb3fa0b034734a1e18052e32d9011c" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37734126" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XDocumentType : System.Xml.Linq.XNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XDocumentType extends System.Xml.Linq.XNode" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XDocumentType" />
  <TypeSignature Language="VB.NET" Value="Public Class XDocumentType&#xA;Inherits XNode" />
  <TypeSignature Language="C++ CLI" Value="public ref class XDocumentType : System::Xml::Linq::XNode" />
  <TypeSignature Language="F#" Value="type XDocumentType = class&#xA;    inherit XNode" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="529e6-101">Reprezentuje XML definicji typu dokumentu (DTD).</span>
      <span class="sxs-lookup">
        <span data-stu-id="529e6-101">Represents an XML Document Type Definition (DTD).</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="529e6-102">Definicje typu danych (DTD) w formacie XML są sposobem wykonaj następujące czynności:</span><span class="sxs-lookup"><span data-stu-id="529e6-102">Data Type Definitions (DTD) in XML are a way to do the following:</span></span>  
  
-   <span data-ttu-id="529e6-103">Sprawdź poprawność drzew XML w ograniczonym zakresie.</span><span class="sxs-lookup"><span data-stu-id="529e6-103">Validate XML trees to a limited extent.</span></span>  
  
-   <span data-ttu-id="529e6-104">Rozwiń węzeł jednostki, która jest formą zastępowanie tekstu.</span><span class="sxs-lookup"><span data-stu-id="529e6-104">Expand entities, which is a form of text replacement.</span></span>  
  
-   <span data-ttu-id="529e6-105">Podaj atrybutów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="529e6-105">Supply default attributes.</span></span>  
  
 <span data-ttu-id="529e6-106">Ta klasa reprezentuje pojęcie XML DTD.</span><span class="sxs-lookup"><span data-stu-id="529e6-106">This class represents the XML concept of a DTD.</span></span>  
  
 <span data-ttu-id="529e6-107">DTD obsługi w [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] jest ograniczona.</span><span class="sxs-lookup"><span data-stu-id="529e6-107">DTD support in [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] is limited.</span></span>  
  
 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]<span data-ttu-id="529e6-108"> Domyślnie rozwinie podmiotów wewnętrzny, ale nie zostanie rozwiązany, zewnętrznej jednostki odwołania, chyba że <xref:System.Xml.XmlReader> ze skojarzoną <xref:System.Xml.XmlResolver> jest używana do ładowania drzewa XML.</span><span class="sxs-lookup"><span data-stu-id="529e6-108"> will expand internal entities by default, but it will not resolve external entity references unless an <xref:System.Xml.XmlReader> with an associated <xref:System.Xml.XmlResolver> is used to load the XML tree.</span></span>  
  
 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]<span data-ttu-id="529e6-109"> nie będzie sprawdzać poprawność dokumentu względem DTD, ale można użyć, sprawdzanie poprawności <xref:System.Xml.XmlReader> weryfikowania DTD, jeśli to konieczne.</span><span class="sxs-lookup"><span data-stu-id="529e6-109"> will not validate a document against a DTD, but you can use a validating <xref:System.Xml.XmlReader> to perform DTD validation if necessary.</span></span>  
  
 <span data-ttu-id="529e6-110">Aby sprawdzić poprawność [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] drzewa względem schematu XML, użyj <xref:System.Xml.Schema.Extensions.Validate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="529e6-110">To validate an [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] tree against an XML schema, use the <xref:System.Xml.Schema.Extensions.Validate%2A> method.</span></span>  
  
 <span data-ttu-id="529e6-111">Jeśli dokument zawiera odwołania do jednostek, które są zdefiniowane w DTD, odwołania zostaną rozwinięte przy jej tworzeniu drzewa XML.</span><span class="sxs-lookup"><span data-stu-id="529e6-111">When a document contains entity references that are defined in a DTD, the references are expanded upon creation of the XML tree.</span></span> <span data-ttu-id="529e6-112">Jednak podczas serializacji lub zapisać drzewa XML zawartość rozwiniętej jednostki jest zachowywany; Brak odwołania do jednostki.</span><span class="sxs-lookup"><span data-stu-id="529e6-112">However, when you serialize or save the XML tree, the content of the expanded entities is preserved; the entity references are not.</span></span>  
  
 <span data-ttu-id="529e6-113">Atrybuty domyślne z DTD będzie zmaterializowanego jako regularne atrybutów w drzewie XML.</span><span class="sxs-lookup"><span data-stu-id="529e6-113">Default attributes from the DTD will be materialized as regular attributes in the XML tree.</span></span> <span data-ttu-id="529e6-114">Po domyślnego atrybutu z DTD jest zmaterializowany, nie istnieje żaden sposób, aby określić, że ten atrybut był domyślnego atrybutu z DTD.</span><span class="sxs-lookup"><span data-stu-id="529e6-114">After a default attribute from the DTD is materialized, there is no way to determine that the attribute was a default attribute from the DTD.</span></span>  
  
 <span data-ttu-id="529e6-115">Możesz wypełnić drzewa XML z dokumentu XML, który zawiera wewnętrzny DTD.</span><span class="sxs-lookup"><span data-stu-id="529e6-115">You can populate an XML tree with an XML document that contains an internal DTD.</span></span> <span data-ttu-id="529e6-116">Drzewo składni XML będzie zawierała <xref:System.Xml.Linq.XDocument.DocumentType%2A> węzła.</span><span class="sxs-lookup"><span data-stu-id="529e6-116">The XML tree will then contain a <xref:System.Xml.Linq.XDocument.DocumentType%2A> node.</span></span> <span data-ttu-id="529e6-117">Podczas serializacji lub zapisać drzewa wewnętrznego DTD również zostaną zapisane jako części dokumentu.</span><span class="sxs-lookup"><span data-stu-id="529e6-117">When you serialize or save the tree, the internal DTD will also be saved as part of the document.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="529e6-118">Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Linq.XDocumentType" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-118">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocumentType" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XDocumentType (System.Xml.Linq.XDocumentType other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XDocumentType other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocumentType.#ctor(System.Xml.Linq.XDocumentType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XDocumentType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XDocumentType(System::Xml::Linq::XDocumentType ^ other);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XDocumentType : System.Xml.Linq.XDocumentType -&gt; System.Xml.Linq.XDocumentType" Usage="new System.Xml.Linq.XDocumentType other" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XDocumentType" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="529e6-119">
            <see cref="T:System.Xml.Linq.XDocumentType" /> Obiektu do skopiowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-119">An <see cref="T:System.Xml.Linq.XDocumentType" /> object to copy from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="529e6-120">Inicjuje wystąpienie <see cref="T:System.Xml.Linq.XDocumentType" /> klasy z innego <see cref="T:System.Xml.Linq.XDocumentType" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-120">Initializes an instance of the <see cref="T:System.Xml.Linq.XDocumentType" /> class from another <see cref="T:System.Xml.Linq.XDocumentType" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="529e6-121">Ten konstruktor jest głównie używane wewnętrznie, podczas wprowadzania kopię głęboką drzewa XML.</span><span class="sxs-lookup"><span data-stu-id="529e6-121">This constructor is primarily used internally when making a deep copy of an XML tree.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XDocumentType (string name, string publicId, string systemId, string internalSubset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string publicId, string systemId, string internalSubset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocumentType.#ctor(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, publicId As String, systemId As String, internalSubset As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XDocumentType(System::String ^ name, System::String ^ publicId, System::String ^ systemId, System::String ^ internalSubset);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XDocumentType : string * string * string * string -&gt; System.Xml.Linq.XDocumentType" Usage="new System.Xml.Linq.XDocumentType (name, publicId, systemId, internalSubset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="publicId" Type="System.String" />
        <Parameter Name="systemId" Type="System.String" />
        <Parameter Name="internalSubset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="529e6-122">Element <see cref="T:System.String" /> zawierający kwalifikowaną nazwę schematu DTD, która jest taka sama jak nazwa kwalifikowana element główny dokumentu XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-122">A <see cref="T:System.String" /> that contains the qualified name of the DTD, which is the same as the qualified name of the root element of the XML document.</span>
          </span>
        </param>
        <param name="publicId">
          <span data-ttu-id="529e6-123">Element <see cref="T:System.String" /> zawierający identyfikator publiczny publicznych zewnętrznej definicji DTD.</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-123">A <see cref="T:System.String" /> that contains the public identifier of an external public DTD.</span>
          </span>
        </param>
        <param name="systemId">
          <span data-ttu-id="529e6-124">Element <see cref="T:System.String" /> zawierający identyfikator systemu zewnętrznego elementu DTD prywatnych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-124">A <see cref="T:System.String" /> that contains the system identifier of an external private DTD.</span>
          </span>
        </param>
        <param name="internalSubset">
          <span data-ttu-id="529e6-125">Element <see cref="T:System.String" /> zawierający wewnętrzny podzbiór DTD wewnętrznego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-125">A <see cref="T:System.String" /> that contains the internal subset for an internal DTD.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="529e6-126">Inicjuje wystąpienie <see cref="T:System.Xml.Linq.XDocumentType" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-126">Initializes an instance of the <see cref="T:System.Xml.Linq.XDocumentType" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="529e6-127">Poniższy przykład tworzy dokument za pomocą wewnętrznego DTD.</span><span class="sxs-lookup"><span data-stu-id="529e6-127">The following example creates a document with an internal DTD.</span></span> <span data-ttu-id="529e6-128">Gdy tworzy <xref:System.Xml.Linq.XDocumentType> obiektu określa kwalifikowaną nazwę DTD (Pubs) i ciąg, który zawiera wewnętrzny podzbiór.</span><span class="sxs-lookup"><span data-stu-id="529e6-128">When it creates the <xref:System.Xml.Linq.XDocumentType> object, it specifies the qualified name of the DTD (Pubs), and a string that contains the internal subset.</span></span> <span data-ttu-id="529e6-129">Ponieważ dokument nie używa publicznej lub prywatnej zewnętrznej definicji DTD, `publicId` i `systemId` są ustawione na `null`.</span><span class="sxs-lookup"><span data-stu-id="529e6-129">Because the document does not use a public or private external DTD, the `publicId` and `systemId` are set to `null`.</span></span>  
  
```csharp  
string internalSubset = @"<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>";  
  
string target = "xml-stylesheet";  
string data = "href=\"mystyle.css\" title=\"Compact\" type=\"text/css\"";  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment."),  
    new XProcessingInstruction(target, data),  
    new XDocumentType("Pubs", null, null, internalSubset),  
    new XElement("Pubs",   
        new XElement("Book",  
            new XElement("Title", "Artifacts of Roman Civilization"),  
            new XElement("Author", "Moreno, Jordao")  
        ),  
        new XElement("Book",  
            new XElement("Title", "Midieval Tools and Implements"),  
            new XElement("Author", "Gazit, Inbar")  
        )  
    ),  
    new XComment("This is another comment.")  
);  
doc.Declaration = new XDeclaration("1.0", "utf-8", "true");  
  
Console.WriteLine(doc);  
```  
  
```vb  
Dim internalSubset = _  
    "<!ELEMENT Pubs (Book+)>" & Environment.NewLine & _  
    "<!ELEMENT Book (Title, Author)>" & Environment.NewLine & _  
    "<!ELEMENT Title (#PCDATA)>" & Environment.NewLine & _  
    "<!ELEMENT Author (#PCDATA)>"  
  
Dim doc As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
    <!--This is a comment.-->  
    <?xml-stylesheet href="mystyle.css" title="Compact" type="text/css"?>  
    <Pubs>  
        <Book>  
            <Title>Artifacts of Roman Civilization</Title>  
            <Author>Moreno, Jordao</Author>  
        </Book>  
        <Book>  
            <Title>Midieval Tools and Implements</Title>  
            <Author>Gazit, Inbar</Author>  
        </Book>  
    </Pubs>  
    <!--This is another comment.-->  
  
doc.FirstNode.NextNode.AddAfterSelf(new XDocumentType("Pubs", Nothing, Nothing, internalSubset))  
  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="529e6-130">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="529e6-130">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment.-->  
<?xml-stylesheet href="mystyle.css" title="Compact" type="text/css"?>  
<!DOCTYPE Pubs [<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>]>  
<Pubs>  
  <Book>  
    <Title>Artifacts of Roman Civilization</Title>  
    <Author>Moreno, Jordao</Author>  
  </Book>  
  <Book>  
    <Title>Midieval Tools and Implements</Title>  
    <Author>Gazit, Inbar</Author>  
  </Book>  
</Pubs>  
<!--This is another comment.-->  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalSubset">
      <MemberSignature Language="C#" Value="public string InternalSubset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InternalSubset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocumentType.InternalSubset" />
      <MemberSignature Language="VB.NET" Value="Public Property InternalSubset As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InternalSubset { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InternalSubset : string with get, set" Usage="System.Xml.Linq.XDocumentType.InternalSubset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="529e6-131">Pobiera lub ustawia wewnętrzny podzbiór dla tego dokumentu Type Definition (DTD).</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-131">Gets or sets the internal subset for this Document Type Definition (DTD).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="529e6-132">Element <see cref="T:System.String" /> zawiera wewnętrzny podzbiór dla tego dokumentu Type Definition (DTD).</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-132">A <see cref="T:System.String" /> that contains the internal subset for this Document Type Definition (DTD).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="529e6-133">Poniższy przykład tworzy dokument za pomocą definicji DTD, który zawiera wewnętrzny podzbiór.</span><span class="sxs-lookup"><span data-stu-id="529e6-133">The following example creates a document with a DTD that contains an internal subset.</span></span>  
  
```csharp  
string internalSubset = @"<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>";  
  
string target = "xml-stylesheet";  
string data = "href=\"mystyle.css\" title=\"Compact\" type=\"text/css\"";  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment."),  
    new XProcessingInstruction(target, data),  
    new XDocumentType("Pubs", null, null, internalSubset),  
    new XElement("Pubs",   
        new XElement("Book",  
            new XElement("Title", "Artifacts of Roman Civilization"),  
            new XElement("Author", "Moreno, Jordao")  
        ),  
        new XElement("Book",  
            new XElement("Title", "Midieval Tools and Implements"),  
            new XElement("Author", "Gazit, Inbar")  
        )  
    ),  
    new XComment("This is another comment.")  
);  
doc.Declaration = new XDeclaration("1.0", "utf-8", "true");  
  
Console.WriteLine(doc.DocumentType.InternalSubset);  
```  
  
```vb  
Dim internalSubset = _  
    "<!ELEMENT Pubs (Book+)>" & Environment.NewLine & _  
    "<!ELEMENT Book (Title, Author)>" & Environment.NewLine & _  
    "<!ELEMENT Title (#PCDATA)>" & Environment.NewLine & _  
    "<!ELEMENT Author (#PCDATA)>"  
  
Dim doc As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
    <!--This is a comment.-->  
    <?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>  
    <Pubs>  
        <Book>  
            <Title>Artifacts of Roman Civilization</Title>  
            <Author>Moreno, Jordao</Author>  
        </Book>  
        <Book>  
            <Title>Midieval Tools and Implements</Title>  
            <Author>Gazit, Inbar</Author>  
        </Book>  
    </Pubs>  
    <!--This is another comment.-->  
  
doc.FirstNode.AddAfterSelf(new XDocumentType("Pubs", Nothing, Nothing, internalSubset))  
  
Console.WriteLine(doc.DocumentType.InternalSubset)  
```  
  
 <span data-ttu-id="529e6-134">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="529e6-134">This example produces the following output:</span></span>  
  
```  
<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocumentType.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Xml.Linq.XDocumentType.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="529e6-135">Pobiera lub ustawia nazwę dla tego dokumentu Type Definition (DTD).</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-135">Gets or sets the name for this Document Type Definition (DTD).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="529e6-136">Element <see cref="T:System.String" /> zawierający nazwę dla tego dokumentu Type Definition (DTD).</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-136">A <see cref="T:System.String" /> that contains the name for this Document Type Definition (DTD).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="529e6-137">Poniższy przykład tworzy dokument XML, który zawiera DTD.</span><span class="sxs-lookup"><span data-stu-id="529e6-137">The following example creates an XML document that contains a DTD.</span></span> <span data-ttu-id="529e6-138">Po utworzeniu dokumentu, pobiera kwalifikowaną nazwę DTD, za pomocą tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="529e6-138">After creating the document, it retrieves the qualified name of the DTD using this property.</span></span>  
  
```csharp  
string internalSubset = @"<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>";  
  
string target = "xml-stylesheet";  
string data = "href=\"mystyle.css\" title=\"Compact\" type=\"text/css\"";  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment."),  
    new XProcessingInstruction(target, data),  
    new XDocumentType("Pubs", null, null, internalSubset),  
    new XElement("Pubs",   
        new XElement("Book",  
            new XElement("Title", "Artifacts of Roman Civilization"),  
            new XElement("Author", "Moreno, Jordao")  
        ),  
        new XElement("Book",  
            new XElement("Title", "Midieval Tools and Implements"),  
            new XElement("Author", "Gazit, Inbar")  
        )  
    ),  
    new XComment("This is another comment.")  
);  
doc.Declaration = new XDeclaration("1.0", "utf-8", "true");  
  
Console.WriteLine(doc.DocumentType.Name);  
```  
  
```vb  
Dim internalSubset = _  
    "<!ELEMENT Pubs (Book+)>" & Environment.NewLine & _  
    "<!ELEMENT Book (Title, Author)>" & Environment.NewLine & _  
    "<!ELEMENT Title (#PCDATA)>" & Environment.NewLine & _  
    "<!ELEMENT Author (#PCDATA)>"  
  
Dim doc As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
    <!--This is a comment.-->  
    <?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>  
    <Pubs>  
        <Book>  
            <Title>Artifacts of Roman Civilization</Title>  
            <Author>Moreno, Jordao</Author>  
            </Book>  
        <Book>  
            <Title>Midieval Tools and Implements</Title>  
            <Author>Gazit, Inbar</Author>  
        </Book>  
    </Pubs>  
    <!--This is another comment.-->  
  
doc.FirstNode.AddAfterSelf(new XDocumentType("Pubs", Nothing, Nothing, internalSubset))  
  
Console.WriteLine(doc.DocumentType.Name)  
```  
  
 <span data-ttu-id="529e6-139">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="529e6-139">This example produces the following output:</span></span>  
  
```  
Pubs  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocumentType.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.Linq.XDocumentType.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="529e6-140">Pobiera typ węzła dla tego węzła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-140">Gets the node type for this node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="529e6-141">Typ węzła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-141">The node type.</span>
          </span>
          <span data-ttu-id="529e6-142">Aby uzyskać <see cref="T:System.Xml.Linq.XDocumentType" /> obiektów, ta wartość jest <see cref="F:System.Xml.XmlNodeType.DocumentType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-142">For <see cref="T:System.Xml.Linq.XDocumentType" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.DocumentType" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="529e6-143">Ponieważ wszystkie klasy, która pochodzi od <xref:System.Xml.Linq.XObject> zawierają <xref:System.Xml.Linq.XObject.NodeType%2A> właściwości, można napisać kod, który działa w kolekcjach konkretnych podklasą <xref:System.Xml.Linq.XObject>.</span><span class="sxs-lookup"><span data-stu-id="529e6-143">Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="529e6-144">Kod można przetestować typ węzła w każdym węźle w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="529e6-144">Your code can then test for the node type of each node in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="529e6-145">Poniższy przykład przedstawia użycie tej właściwości, można pobrać typu węzła dla <xref:System.Xml.Linq.XDocumentType> obiektu.</span><span class="sxs-lookup"><span data-stu-id="529e6-145">The following example shows the use of this property to retrieve the node type for an <xref:System.Xml.Linq.XDocumentType> object.</span></span>  
  
```csharp  
string internalSubset = @"<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>";  
  
string target = "xml-stylesheet";  
string data = "href=\"mystyle.css\" title=\"Compact\" type=\"text/css\"";  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment."),  
    new XProcessingInstruction(target, data),  
    new XDocumentType("Pubs", null, null, internalSubset),  
    new XElement("Pubs",   
        new XElement("Book",  
            new XElement("Title", "Artifacts of Roman Civilization"),  
            new XElement("Author", "Moreno, Jordao")  
        ),  
        new XElement("Book",  
            new XElement("Title", "Midieval Tools and Implements"),  
            new XElement("Author", "Gazit, Inbar")  
        )  
    ),  
    new XComment("This is another comment.")  
);  
doc.Declaration = new XDeclaration("1.0", "utf-8", "true");  
  
Console.WriteLine(doc.DocumentType.NodeType);  
```  
  
```vb  
Dim internalSubset = _  
    "<!ELEMENT Pubs (Book+)>" & Environment.NewLine & _  
    "<!ELEMENT Book (Title, Author)>" & Environment.NewLine & _  
    "<!ELEMENT Title (#PCDATA)>" & Environment.NewLine & _  
    "<!ELEMENT Author (#PCDATA)>"  
  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
    <!--This is a comment.-->  
    <?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>  
    <Pubs>  
        <Book>  
            <Title>Artifacts of Roman Civilization</Title>  
            <Author>Moreno, Jordao</Author>  
        </Book>  
        <Book>  
            <Title>Midieval Tools and Implements</Title>  
            <Author>Gazit, Inbar</Author>  
        </Book>  
    </Pubs>  
    <!--This is another comment.-->  
  
doc.FirstNode.AddAfterSelf(new XDocumentType("Pubs", Nothing, Nothing, internalSubset))  
  
Console.WriteLine(doc.DocumentType.NodeType.ToString())  
```  
  
 <span data-ttu-id="529e6-146">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="529e6-146">This example produces the following output:</span></span>  
  
```  
DocumentType  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublicId">
      <MemberSignature Language="C#" Value="public string PublicId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PublicId" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocumentType.PublicId" />
      <MemberSignature Language="VB.NET" Value="Public Property PublicId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PublicId { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PublicId : string with get, set" Usage="System.Xml.Linq.XDocumentType.PublicId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="529e6-147">Pobiera lub ustawia identyfikator publiczny dla tego dokumentu Type Definition (DTD).</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-147">Gets or sets the public identifier for this Document Type Definition (DTD).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="529e6-148">Element <see cref="T:System.String" /> zawierający identyfikator publiczny dla tego dokumentu Type Definition (DTD).</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-148">A <see cref="T:System.String" /> that contains the public identifier for this Document Type Definition (DTD).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="529e6-149">Jeśli dokument XML używa publicznego zewnętrznej definicji DTD, ta właściwość będzie zawierać identyfikator publiczny zewnętrznej definicji DTD.</span><span class="sxs-lookup"><span data-stu-id="529e6-149">If an XML document uses an external public DTD, this property will contain the public identifier of the external DTD.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemId">
      <MemberSignature Language="C#" Value="public string SystemId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SystemId" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocumentType.SystemId" />
      <MemberSignature Language="VB.NET" Value="Public Property SystemId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SystemId { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SystemId : string with get, set" Usage="System.Xml.Linq.XDocumentType.SystemId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="529e6-150">Pobiera lub ustawia identyfikator systemowy dla tego dokumentu Type Definition (DTD).</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-150">Gets or sets the system identifier for this Document Type Definition (DTD).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="529e6-151">Element <see cref="T:System.String" /> zawierający identyfikator systemowy dla tego dokumentu Type Definition (DTD).</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-151">A <see cref="T:System.String" /> that contains the system identifier for this Document Type Definition (DTD).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="529e6-152">Jeśli dokument XML używa prywatnego zewnętrznej definicji DTD, ta właściwość będzie zawierać prywatny Identyfikator zewnętrznej definicji DTD.</span><span class="sxs-lookup"><span data-stu-id="529e6-152">If an XML document uses an external private DTD, this property will contain the private identifier of the external DTD.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="529e6-153">Poniższy przykład tworzy dokument XML, który odwołuje się do prywatnego zewnętrznej definicji DTD.</span><span class="sxs-lookup"><span data-stu-id="529e6-153">The following example creates an XML document that refers to an external private DTD.</span></span> <span data-ttu-id="529e6-154">DTD nie ma wewnętrzny podzbiór.</span><span class="sxs-lookup"><span data-stu-id="529e6-154">The DTD does not have an internal subset.</span></span> <span data-ttu-id="529e6-155">Wywołanie <xref:System.Xml.Linq.XDocumentType> Konstruktor odzwierciedla korzystanie z prywatnej DTD zewnętrznego.</span><span class="sxs-lookup"><span data-stu-id="529e6-155">The call to the <xref:System.Xml.Linq.XDocumentType> constructor reflects the use of the external private DTD.</span></span> <span data-ttu-id="529e6-156">Przekazuje ono `null` na podzestawie wewnętrznym.</span><span class="sxs-lookup"><span data-stu-id="529e6-156">It passes `null` for the internal subset.</span></span>  
  
```csharp  
string pubsDtd =  
@"<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>";  
File.WriteAllText("Pubs.dtd", pubsDtd);  
  
string target = "xml-stylesheet";  
string data = "href=\"mystyle.css\" title=\"Compact\" type=\"text/css\"";  
  
XDocument doc = new XDocument(  
    new XDocumentType("Pubs", null, "Pubs.dtd", null),  
    new XElement("Pubs",   
        new XElement("Book",  
            new XElement("Title", "Artifacts of Roman Civilization"),  
            new XElement("Author", "Moreno, Jordao")  
        ),  
        new XElement("Book",  
            new XElement("Title", "Midieval Tools and Implements"),  
            new XElement("Author", "Gazit, Inbar")  
        )  
    ),  
    new XComment("This is another comment.")  
);  
doc.Declaration = new XDeclaration("1.0", "utf-8", "true");  
doc.Save("Pubs.xml");  
  
// Validate Pubs.xml against Pubs.dtd.  
XmlReaderSettings xrs = new XmlReaderSettings();  
xrs.ProhibitDtd = false;  
xrs.ValidationType = ValidationType.DTD;  
xrs.ConformanceLevel = ConformanceLevel.Auto;  
XmlReader xr = XmlReader.Create("Pubs.xml", xrs);  
XDocument doc2 = XDocument.Load(xr);  
  
XDocumentType dt = doc2.Document.DocumentType;  
Console.WriteLine("SystemId:{0}", dt.SystemId);  
```  
  
```vb  
Dim pubsDtd As String = _   
    "<!ELEMENT Pubs (Book+)>" & Environment.NewLine & _  
    "<!ELEMENT Book (Title, Author)>" & Environment.NewLine & _  
    "<!ELEMENT Title (#PCDATA)>" & Environment.NewLine & _  
    "<!ELEMENT Author (#PCDATA)>"  
File.WriteAllText("Pubs.dtd", pubsDtd)  
  
Dim target As String = "xml-stylesheet"  
Dim data As String = "href='mystyle.css' title='Compact' type='text/css'"  
  
Dim doc As XDocument = _  
    <?xml version='1.0'?>  
    <Pubs>  
        <Book>  
            <Title>Artifacts of Roman Civilization</Title>  
            <Author>Moreno, Jordao</Author>  
        </Book>  
        <Book>  
            <Title>Midieval Tools and Implements</Title>  
            <Author>Gazit, Inbar</Author>  
        </Book>  
    </Pubs>  
    <!--This is another comment.-->  
  
doc _  
.FirstNode _  
.AddBeforeSelf(New XDocumentType("Pubs", Nothing, "Pubs.dtd", Nothing))  
  
doc.Declaration = New XDeclaration("1.0", "utf-8", "true")  
doc.Save("Pubs.xml")  
  
' Validate Pubs.xml against Pubs.dtd.  
Dim xrs As XmlReaderSettings = New XmlReaderSettings()  
xrs.ProhibitDtd = False  
xrs.ValidationType = ValidationType.DTD  
xrs.ConformanceLevel = ConformanceLevel.Auto  
Dim xr As XmlReader = XmlReader.Create("Pubs.xml", xrs)  
Dim doc2 As XDocument = XDocument.Load(xr)  
  
Dim dt As XDocumentType = doc2.Document.DocumentType  
Console.WriteLine("SystemId:{0}", dt.SystemId)  
```  
  
 <span data-ttu-id="529e6-157">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="529e6-157">This example produces the following output:</span></span>  
  
```  
SystemId:Pubs.dtd  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocumentType.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteTo (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteTo(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.WriteTo : System.Xml.XmlWriter -&gt; unit" Usage="xDocumentType.WriteTo writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="529e6-158">
            <see cref="T:System.Xml.XmlWriter" /> Do będzie zapisywać tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-158">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="529e6-159">Ten <see cref="T:System.Xml.Linq.XDocumentType" /> do <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="529e6-159">Write this <see cref="T:System.Xml.Linq.XDocumentType" /> to an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="529e6-160">Ta metoda jest głównie używane wewnętrznie metody, które zapisać drzewa XML do <xref:System.Xml.XmlWriter>.</span><span class="sxs-lookup"><span data-stu-id="529e6-160">This method is primarily used internally by the methods that write an XML tree to an <xref:System.Xml.XmlWriter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocumentType.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteToAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.WriteToAsync : System.Xml.XmlWriter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xDocumentType.WriteToAsync (writer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>