<Type Name="XObject" FullName="System.Xml.Linq.XObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1861f509209ce3cb5f0ccfbf1e6200b9f003b59b" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51937942" /></Metadata><TypeSignature Language="C#" Value="public abstract class XObject : System.Xml.IXmlLineInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XObject extends System.Object implements class System.Xml.IXmlLineInfo" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XObject&#xA;Implements IXmlLineInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class XObject abstract : System::Xml::IXmlLineInfo" />
  <TypeSignature Language="F#" Value="type XObject = class&#xA;    interface IXmlLineInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.IXmlLineInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="65239-101">Reprezentuje węzeł lub atrybutu w drzewie XML.</span><span class="sxs-lookup"><span data-stu-id="65239-101">Represents a node or an attribute in an XML tree.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65239-102">Ta klasa jest abstrakcyjna wspólna klasa bazowa dla <xref:System.Xml.Linq.XNode> i <xref:System.Xml.Linq.XAttribute>.</span><span class="sxs-lookup"><span data-stu-id="65239-102">This class is the abstract common base class for <xref:System.Xml.Linq.XNode> and <xref:System.Xml.Linq.XAttribute>.</span></span> <span data-ttu-id="65239-103">Zapewnia podstawowe funkcje, które jest wspólny dla obu klas, na przykład adnotacjami i wywoływanie zdarzeń, gdy węzły zostały zmienione.</span><span class="sxs-lookup"><span data-stu-id="65239-103">It provides some basic functionality that is common to both classes, such as annotations, and raising events when nodes have changed.</span></span>  
  
 <span data-ttu-id="65239-104">Należy pamiętać, że adnotacji nie są częścią zestaw informacji XML; nie jest serializowany lub deserializowany.</span><span class="sxs-lookup"><span data-stu-id="65239-104">Note that annotations are not part of the XML infoset; they are not serialized or deserialized.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="65239-105">LINQ do XML</span><span class="sxs-lookup"><span data-stu-id="65239-105">LINQ to XML</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="AddAnnotation">
      <MemberSignature Language="C#" Value="public void AddAnnotation (object annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAnnotation(object annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAnnotation (annotation As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAnnotation(System::Object ^ annotation);" />
      <MemberSignature Language="F#" Value="member this.AddAnnotation : obj -&gt; unit" Usage="xObject.AddAnnotation annotation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation"><span data-ttu-id="65239-106"><see cref="T:System.Object" /> Zawierający adnotację do dodania.</span><span class="sxs-lookup"><span data-stu-id="65239-106">An <see cref="T:System.Object" /> that contains the annotation to add.</span></span></param>
        <summary><span data-ttu-id="65239-107">Dodaje obiekt do listy adnotacji <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-107">Adds an object to the annotation list of this <see cref="T:System.Xml.Linq.XObject" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65239-108">Należy pamiętać, że adnotacji nie są częścią zestaw informacji; ich nie są zachowywane, lub wyświetlany przez <xref:System.Xml.Linq.XNode.ToString%2A>.</span><span class="sxs-lookup"><span data-stu-id="65239-108">Note that annotations are not part of the infoset; they are not persisted, or displayed by <xref:System.Xml.Linq.XNode.ToString%2A>.</span></span> <span data-ttu-id="65239-109">Ponadto Jeśli zaimportujesz Namespace XML do projektu VB, a wywołanie AddAnnotation z wartości wyliczenia SaveOptions.OmitDuplicateNamespaces, tylko jeden element zawiera atrybut Namespace XML, a nie każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="65239-109">Also, if you import an XML Namespace into your VB project and call AddAnnotation with the SaveOptions.OmitDuplicateNamespaces enumeration value, then only one element will contain the XML Namespace attribute instead of every element.</span></span> <span data-ttu-id="65239-110">Aby uzyskać więcej informacji, zobacz [Usuwanie zduplikowanych przestrzeni nazw w literałach XML](https://blogs.msdn.com/b/vbteam/archive/2010/06/09/removing-duplicate-namespaces-in-xml-literals-shyam-namboodiripad.aspx).</span><span class="sxs-lookup"><span data-stu-id="65239-110">For more information, see [Removing duplicate namespaces in XML Literals](https://blogs.msdn.com/b/vbteam/archive/2010/06/09/removing-duplicate-namespaces-in-xml-literals-shyam-namboodiripad.aspx).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65239-111">W poniższym przykładzie dodano adnotację <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="65239-111">The following example adds an annotation to an <xref:System.Xml.Linq.XElement>.</span></span>  
  
```csharp  
public class MyAnnotation {  
    private string tag;  
    public string Tag {get{return tag;} set{tag=value;}}  
    public MyAnnotation(string tag) {  
        this.tag = tag;  
    }  
}  
  
public class Program {  
    public static void Main(string[] args) {     
        MyAnnotation ma = new MyAnnotation("T1");  
        XElement root = new XElement("Root", "content");  
        root.AddAnnotation(ma);  
  
        MyAnnotation ma2 = (MyAnnotation)root.Annotation<MyAnnotation>();  
        Console.WriteLine(ma2.Tag);  
    }  
}  
```  
  
```vb  
Public Class MyAnnotation  
    Private _tag As String  
  
    Property Tag() As String  
        Get  
            Return Me._tag  
        End Get  
        Set(ByVal Value As String)  
            Me._tag = Value  
        End Set  
    End Property  
  
    Public Sub New(ByVal tag As String)  
        Me._tag = tag  
    End Sub  
End Class  
  
Module Module1  
    Sub Main()  
        Dim ma As MyAnnotation = New MyAnnotation("T1")  
        Dim root As XElement = <Root>content</Root>  
        root.AddAnnotation(ma)  
  
        Dim ma2 As MyAnnotation = DirectCast(root.Annotation(Of MyAnnotation)(), MyAnnotation)  
        Console.WriteLine(ma2.Tag)  
    End Sub  
  
End Module  
```  
  
 <span data-ttu-id="65239-112">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="65239-112">This example produces the following output:</span></span>  
  
```  
T1  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="65239-113">LINQ do XML</span><span class="sxs-lookup"><span data-stu-id="65239-113">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Annotation">
      <MemberSignature Language="C#" Value="public object Annotation (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Annotation(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XObject.Annotation(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Annotation(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.Annotation : Type -&gt; obj" Usage="xObject.Annotation type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="65239-114"><see cref="T:System.Type" /> Adnotacji do pobrania.</span><span class="sxs-lookup"><span data-stu-id="65239-114">The <see cref="T:System.Type" /> of the annotation to retrieve.</span></span></param>
        <summary><span data-ttu-id="65239-115">Pobiera pierwszy obiekt adnotacji określonego typu z tego <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-115">Gets the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</span></span></summary>
        <returns><span data-ttu-id="65239-116"><see cref="T:System.Object" /> Zawierający pierwszy obiekt adnotacji, który jest zgodny z określonym typem lub <see langword="null" /> nie adnotacji jest określonego typu.</span><span class="sxs-lookup"><span data-stu-id="65239-116">The <see cref="T:System.Object" /> that contains the first annotation object that matches the specified type, or <see langword="null" /> if no annotation is of the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65239-117">W poniższym przykładzie dodano adnotację <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="65239-117">The following example adds an annotation to an <xref:System.Xml.Linq.XElement>.</span></span> <span data-ttu-id="65239-118">Następnie pobiera ona adnotacji, określając typ do pobrania.</span><span class="sxs-lookup"><span data-stu-id="65239-118">It then retrieves the annotation, specifying the type to retrieve.</span></span>  
  
```csharp  
public class MyAnnotation {  
    private string tag;  
    public string Tag {get{return tag;} set{tag=value;}}  
    public MyAnnotation(string tag) {  
        this.tag = tag;  
    }  
}  
  
public class Program {  
    public static void Main(string[] args) {     
        MyAnnotation ma = new MyAnnotation("T1");  
        XElement root = new XElement("Root", "content");  
        root.AddAnnotation(ma);  
  
        MyAnnotation ma2 = (MyAnnotation)root.Annotation(typeof(MyAnnotation));  
        Console.WriteLine(ma2.Tag);  
    }  
}  
```  
  
```vb  
Public Class MyAnnotation  
    Private _tag As String  
  
    Property Tag() As String  
        Get  
            Return Me._tag  
        End Get  
        Set(ByVal Value As String)  
            Me._tag = Value  
        End Set  
    End Property  
  
    Public Sub New(ByVal tag As String)  
        Me._tag = tag  
    End Sub  
End Class  
  
Module Module1  
    Sub Main()  
        Dim ma As MyAnnotation = New MyAnnotation("T1")  
        Dim root As XElement = <Root>content</Root>  
        root.AddAnnotation(ma)  
  
        Dim ma2 As MyAnnotation = DirectCast(root.Annotation(GetType(MyAnnotation)), MyAnnotation)  
        Console.WriteLine(ma2.Tag)  
    End Sub  
  
End Module  
```  
  
 <span data-ttu-id="65239-119">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="65239-119">This example produces the following output:</span></span>  
  
```  
T1  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="65239-120">LINQ do XML</span><span class="sxs-lookup"><span data-stu-id="65239-120">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Annotation&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Annotation&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Annotation&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XObject.Annotation``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Annotation(Of T As Class) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class T Annotation();" />
      <MemberSignature Language="F#" Value="member this.Annotation : unit -&gt; 'T (requires 'T : null)" Usage="xObject.Annotation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="65239-121">Typ adnotacji do pobrania.</span><span class="sxs-lookup"><span data-stu-id="65239-121">The type of the annotation to retrieve.</span></span></typeparam>
        <summary><span data-ttu-id="65239-122">Uzyskiwanie adnotacji pierwszego obiektu określonego typu to <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-122">Get the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</span></span></summary>
        <returns><span data-ttu-id="65239-123">Pierwszy obiekt adnotacji, który jest zgodny z określonym typem lub <see langword="null" /> nie adnotacji jest określonego typu.</span><span class="sxs-lookup"><span data-stu-id="65239-123">The first annotation object that matches the specified type, or <see langword="null" /> if no annotation is of the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65239-124">Poniższy przykład dodaje adnotacji do elementu, a następnie pobiera za pośrednictwem tej metody.</span><span class="sxs-lookup"><span data-stu-id="65239-124">The following example adds an annotation to an element, and then retrieves it through this method.</span></span>  
  
```csharp  
public class MyAnnotation {  
    private string tag;  
    public string Tag {get{return tag;} set{tag=value;}}  
    public MyAnnotation(string tag) {  
        this.tag = tag;  
    }  
}  
  
public class Program {  
    public static void Main(string[] args) {     
        MyAnnotation ma = new MyAnnotation("T1");  
        XElement root = new XElement("Root", "content");  
        root.AddAnnotation(ma);  
  
        MyAnnotation ma2 = root.Annotation<MyAnnotation>();  
        Console.WriteLine(ma2.Tag);  
    }  
}  
```  
  
```vb  
Public Class MyAnnotation  
    Private _tag As String  
  
    Property Tag() As String  
        Get  
            Return Me._tag  
        End Get  
        Set(ByVal Value As String)  
            Me._tag = Value  
        End Set  
    End Property  
  
    Public Sub New(ByVal tag As String)  
        Me._tag = tag  
    End Sub  
End Class  
  
Module Module1  
    Sub Main()  
        Dim ma As MyAnnotation = New MyAnnotation("T1")  
        Dim root As XElement = <Root>content</Root>  
        root.AddAnnotation(ma)  
  
        Dim ma2 As MyAnnotation = root.Annotation(Of MyAnnotation)()  
        Console.WriteLine(ma2.Tag)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="65239-125">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="65239-125">This example produces the following output:</span></span>  
  
```  
T1  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="65239-126">LINQ do XML</span><span class="sxs-lookup"><span data-stu-id="65239-126">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Annotations">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;object&gt; Annotations (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; Annotations(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XObject.Annotations(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ Annotations(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.Annotations : Type -&gt; seq&lt;obj&gt;" Usage="xObject.Annotations type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="65239-127"><see cref="T:System.Type" /> Adnotacji do pobrania.</span><span class="sxs-lookup"><span data-stu-id="65239-127">The <see cref="T:System.Type" /> of the annotations to retrieve.</span></span></param>
        <summary><span data-ttu-id="65239-128">Pobiera kolekcję adnotacje określonego typu, w tym <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-128">Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</span></span></summary>
        <returns><span data-ttu-id="65239-129"><see cref="T:System.Collections.Generic.IEnumerable`1" /> z <see cref="T:System.Object" /> zawierający adnotacji, które pasuje do określonego typu, w tym <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-129">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Object" /> that contains the annotations that match the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65239-130">Poniższy przykład dodaje pewne adnotacje do <xref:System.Xml.Linq.XElement>, następnie pobiera kolekcję adnotacje za pomocą tej metody.</span><span class="sxs-lookup"><span data-stu-id="65239-130">The following example adds some annotations to an <xref:System.Xml.Linq.XElement>, then retrieves a collection of annotations by using this method.</span></span>  
  
```csharp  
public class MyAnnotation  
{  
    private string tag;  
    public string Tag { get { return tag; } set { tag = value; } }  
    public MyAnnotation(string tag)  
    {  
        this.tag = tag;  
    }  
}  
  
class Program  
{  
    static void Main(string[] args)  
    {  
        XElement root = new XElement("Root", "content");  
        root.AddAnnotation(new MyAnnotation("T1"));  
        root.AddAnnotation(new MyAnnotation("T2"));  
        root.AddAnnotation("abc");  
        root.AddAnnotation("def");  
  
        IEnumerable<object> annotationList;  
        annotationList = root.Annotations(typeof(MyAnnotation));  
        foreach (object ma in annotationList)  
            Console.WriteLine(((MyAnnotation)ma).Tag);  
        Console.WriteLine("----");  
  
        IEnumerable<object> stringAnnotationList;  
        stringAnnotationList = root.Annotations(typeof(string));  
        foreach (object str in stringAnnotationList)  
            Console.WriteLine((string)str);  
    }  
}  
```  
  
```vb  
Public Class MyAnnotation  
    Private _tag As String  
  
    Property Tag() As String  
        Get  
            Return Me._tag  
        End Get  
        Set(ByVal Value As String)  
            Me._tag = Value  
        End Set  
    End Property  
  
    Public Sub New(ByVal tag As String)  
        Me._tag = tag  
    End Sub  
End Class  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        root.AddAnnotation(New MyAnnotation("T1"))  
        root.AddAnnotation(New MyAnnotation("T2"))  
        root.AddAnnotation("abc")  
        root.AddAnnotation("def")  
  
        Dim annotationList As IEnumerable(Of Object)  
        annotationList = root.Annotations(GetType(MyAnnotation))  
        For Each ma As MyAnnotation In annotationList  
            Console.WriteLine(ma.Tag)  
        Next  
  
        Console.WriteLine("----")  
  
        Dim stringAnnotationList As IEnumerable(Of Object)  
        stringAnnotationList = root.Annotations(GetType(String))  
        For Each str As String In stringAnnotationList  
            Console.WriteLine(str)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="65239-131">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="65239-131">This example produces the following output:</span></span>  
  
```  
T1  
T2  
----  
abc  
def  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="65239-132">LINQ do XML</span><span class="sxs-lookup"><span data-stu-id="65239-132">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Annotations&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; Annotations&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; Annotations&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XObject.Annotations``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Annotations(Of T As Class) () As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class System::Collections::Generic::IEnumerable&lt;T&gt; ^ Annotations();" />
      <MemberSignature Language="F#" Value="member this.Annotations : unit -&gt; seq&lt;'T (requires 'T : null)&gt; (requires 'T : null)" Usage="xObject.Annotations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Xml.Linq.XObject/&lt;Annotations&gt;d__2`1))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Xml.Linq.XObject/&lt;Annotations&gt;d__16`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="65239-133">Typ adnotacje do pobrania.</span><span class="sxs-lookup"><span data-stu-id="65239-133">The type of the annotations to retrieve.</span></span></typeparam>
        <summary><span data-ttu-id="65239-134">Pobiera kolekcję adnotacje określonego typu, w tym <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-134">Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</span></span></summary>
        <returns><span data-ttu-id="65239-135"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający adnotacje w tym <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-135">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the annotations for this <see cref="T:System.Xml.Linq.XObject" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65239-136">W poniższym przykładzie użyto tej metody do pobrania adnotacji dla elementu.</span><span class="sxs-lookup"><span data-stu-id="65239-136">The following example uses this method to retrieve annotations on an element.</span></span>  
  
```csharp  
public class MyAnnotation {  
    private string tag;  
    public string Tag {get{return tag;} set{tag=value;}}  
    public MyAnnotation(string tag) {  
        this.tag = tag;  
    }  
}  
  
class Program {  
    static void Main(string[] args) {     
        XElement root = new XElement("Root", "content");  
        root.AddAnnotation(new MyAnnotation("T1"));  
        root.AddAnnotation(new MyAnnotation("T2"));  
        root.AddAnnotation("abc");  
        root.AddAnnotation("def");  
  
        IEnumerable<MyAnnotation> annotationList;  
        annotationList = root.Annotations<MyAnnotation>();  
        foreach (MyAnnotation ma in annotationList)  
            Console.WriteLine(ma.Tag);  
        Console.WriteLine("----");  
  
        IEnumerable<string> stringAnnotationList;  
        stringAnnotationList = root.Annotations<string>();  
        foreach (string str in stringAnnotationList)  
            Console.WriteLine(str);  
    }  
}  
```  
  
```vb  
Public Class MyAnnotation  
    Private _tag As String  
  
    Property Tag() As String  
        Get  
            Return Me._tag  
        End Get  
        Set(ByVal Value As String)  
            Me._tag = Value  
        End Set  
    End Property  
  
    Public Sub New(ByVal tag As String)  
        Me._tag = tag  
    End Sub  
End Class  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        root.AddAnnotation(New MyAnnotation("T1"))  
        root.AddAnnotation(New MyAnnotation("T2"))  
        root.AddAnnotation("abc")  
        root.AddAnnotation("def")  
  
        Dim annotationList As IEnumerable(Of MyAnnotation)  
        annotationList = root.Annotations(Of MyAnnotation)()  
        For Each ma As MyAnnotation In annotationList  
            Console.WriteLine(ma.Tag)  
        Next  
        Console.WriteLine("----")  
  
        Dim stringAnnotationList As IEnumerable(Of String)  
        stringAnnotationList = root.Annotations(Of String)()  
        For Each str As String In stringAnnotationList  
            Console.WriteLine(str)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="65239-137">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="65239-137">This example produces the following output:</span></span>  
  
```  
T1  
T2  
----  
abc  
def  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="65239-138">LINQ do XML</span><span class="sxs-lookup"><span data-stu-id="65239-138">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BaseUri">
      <MemberSignature Language="C#" Value="public string BaseUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseUri" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XObject.BaseUri" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUri As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseUri { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUri : string" Usage="System.Xml.Linq.XObject.BaseUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="65239-139">Pobiera podstawowy identyfikator URI dla tego <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-139">Gets the base URI for this <see cref="T:System.Xml.Linq.XObject" />.</span></span></summary>
        <value><span data-ttu-id="65239-140">A <see cref="T:System.String" /> zawierający podstawowy identyfikator URI dla tego <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-140">A <see cref="T:System.String" /> that contains the base URI for this <see cref="T:System.Xml.Linq.XObject" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65239-141">Za pomocą LINQ to XML, może wykonywać deserializację XML w liczbie fashions.</span><span class="sxs-lookup"><span data-stu-id="65239-141">Using LINQ to XML, you can deserialize XML in a number of fashions.</span></span> <span data-ttu-id="65239-142">Można go przeanalizować ciągu, go załadować z pliku lub odczytu z <xref:System.IO.TextReader> lub <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="65239-142">You can parse it from a string, load it from a file, or read it from a <xref:System.IO.TextReader> or an <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="65239-143">We wszystkich tych przypadkach LINQ to XML używa jednego lub drugiego konkretnych podklas z <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="65239-143">In all of these cases, LINQ to XML uses one or another of the concrete subclasses of <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="65239-144">Czasami <xref:System.Xml.XmlReader> ma podstawowy identyfikator URI, a czasami nie.</span><span class="sxs-lookup"><span data-stu-id="65239-144">Sometimes the <xref:System.Xml.XmlReader> has the base URI, and sometimes it does not.</span></span> <span data-ttu-id="65239-145">Dla wystąpienia, gdy ładowanie z pliku <xref:System.Xml.XmlReader> zna podstawowy identyfikator URI, ale podczas odczytu z <xref:System.Xml.XmlReader> utworzony ze względu na wywołania <xref:System.Xml.Linq.XElement.Parse%2A> metody, nie ma możliwości <xref:System.Xml.XmlReader> raportowania podstawowy identyfikator URI; plik XML jest w ciąg.</span><span class="sxs-lookup"><span data-stu-id="65239-145">For instance, when loading from a file, the <xref:System.Xml.XmlReader> knows the base URI, but when reading from an <xref:System.Xml.XmlReader> that was created because of calling the <xref:System.Xml.Linq.XElement.Parse%2A> method, there is no possibility of the <xref:System.Xml.XmlReader> reporting a base URI; the XML was in a string.</span></span>  
  
 <span data-ttu-id="65239-146">Jeśli podczas analizowania lub ładowanie kodu XML, należy określić <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, LINQ to XML zażąda podstawowy identyfikator URI dla każdego węzła jako <xref:System.Xml.XmlReader> zwracanie węzła.</span><span class="sxs-lookup"><span data-stu-id="65239-146">If, when parsing or loading the XML, you specify <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, LINQ to XML will request the base URI for each node as the <xref:System.Xml.XmlReader> returns the node.</span></span> <span data-ttu-id="65239-147">Jeśli czytnik ma podstawowy identyfikator URI, LINQ to XML zapisze informacje za pomocą LINQ to XML węzła.</span><span class="sxs-lookup"><span data-stu-id="65239-147">If the reader has the base URI, LINQ to XML will save the information with the LINQ to XML node.</span></span> <span data-ttu-id="65239-148">Ta właściwość zwraca te informacje.</span><span class="sxs-lookup"><span data-stu-id="65239-148">This property returns that information.</span></span> <span data-ttu-id="65239-149">Jeśli podstawowe <xref:System.Xml.XmlReader> nie ma podstawowy identyfikator URI, a następnie ta właściwość zwraca pusty ciąg.</span><span class="sxs-lookup"><span data-stu-id="65239-149">If the underlying <xref:System.Xml.XmlReader> does not have the base URI, then this property will return an empty string.</span></span>  
  
 <span data-ttu-id="65239-150">Ustawienie <xref:System.Xml.Linq.LoadOptions.SetBaseUri> podczas ładowania drzewa XML spowoduje wolniejsze analizy.</span><span class="sxs-lookup"><span data-stu-id="65239-150">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> when loading an XML tree will result in slower parsing.</span></span>  
  
 <span data-ttu-id="65239-151">Podczas ustawiania podstawowy identyfikator URI dla drzewa XML, LINQ to XML umieszcza adnotację na główny drzewa.</span><span class="sxs-lookup"><span data-stu-id="65239-151">When setting the base URI for an XML tree, LINQ to XML puts an annotation on the root of the tree.</span></span> <span data-ttu-id="65239-152">Ta właściwość jest obliczaną właściwością i przechodzi w górę drzewa można znaleźć podstawowego identyfikatora URI.</span><span class="sxs-lookup"><span data-stu-id="65239-152">This property is a computed property, and navigates up the tree to find the base URI.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65239-153">Poniższy przykład załaduje podstawowy identyfikator URI i wiersza informacji podczas ładowania pliku.</span><span class="sxs-lookup"><span data-stu-id="65239-153">The following example loads the base URI and line information as it loads the file.</span></span> <span data-ttu-id="65239-154">Następnie drukuje podstawowy identyfikator URI i informacje wiersza.</span><span class="sxs-lookup"><span data-stu-id="65239-154">It then prints the base URI and the line information.</span></span>  
  
 <span data-ttu-id="65239-155">W tym przykładzie użyto następujący dokument XML: [przykładowy plik XML: typowe zamówienie zakupu (LINQ to XML)](https://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348).</span><span class="sxs-lookup"><span data-stu-id="65239-155">This example uses the following XML document: [Sample XML File: Typical Purchase Order (LINQ to XML)](https://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348).</span></span>  
  
```csharp  
XElement po = XElement.Load("PurchaseOrder.xml",  
    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  
string[] splitUri = po.BaseUri.Split('/');  
Console.WriteLine("BaseUri: {0}", splitUri[splitUri.Length - 1]);  
Console.WriteLine();  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim po As XElement = XElement.Load("PurchaseOrder.xml", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  
Dim splitUri() As String = po.BaseUri.Split("/"c)  
Console.WriteLine("BaseUri: {0}", splitUri(splitUri.Length - 1))  
Console.WriteLine()  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  
        DirectCast(e, IXmlLineInfo).LinePosition)  
Next  
```  
  
 <span data-ttu-id="65239-156">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="65239-156">This example produces the following output:</span></span>  
  
```  
BaseUri: PurchaseOrder.xml  
  
Element Name        Line Position  
------------        ---- --------  
PurchaseOrder       2    2  
  Address           3    4  
    Name            4    6  
    Street          5    6  
    City            6    6  
    State           7    6  
    Zip             8    6  
    Country         9    6  
  Address           11   4  
    Name            12   6  
    Street          13   6  
    City            14   6  
    State           15   6  
    Zip             16   6  
    Country         17   6  
  DeliveryNotes     19   4  
  Items             20   4  
    Item            21   6  
      ProductName   22   8  
      Quantity      23   8  
      USPrice       24   8  
      Comment       25   8  
    Item            27   6  
      ProductName   28   8  
      Quantity      29   8  
      USPrice       30   8  
      ShipDate      31   8  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="65239-157">LINQ do XML</span><span class="sxs-lookup"><span data-stu-id="65239-157">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Changed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Xml.Linq.XObjectChangeEventArgs&gt; Changed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Xml.Linq.XObjectChangeEventArgs&gt; Changed" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Linq.XObject.Changed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Changed As EventHandler(Of XObjectChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Xml::Linq::XObjectChangeEventArgs ^&gt; ^ Changed;" />
      <MemberSignature Language="F#" Value="member this.Changed : EventHandler&lt;System.Xml.Linq.XObjectChangeEventArgs&gt; " Usage="member this.Changed : System.EventHandler&lt;System.Xml.Linq.XObjectChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Xml.Linq.XObjectChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="65239-158">Wywołane, gdy to <see cref="T:System.Xml.Linq.XObject" /> lub dowolnego z jego elementy podrzędne zostały zmienione.</span><span class="sxs-lookup"><span data-stu-id="65239-158">Raised when this <see cref="T:System.Xml.Linq.XObject" /> or any of its descendants have changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65239-159">Zdarzenia są wywoływane tylko wtedy, gdy zmodyfikowane drzewa XML nie wtedy, gdy jest tworzony.</span><span class="sxs-lookup"><span data-stu-id="65239-159">Events are raised only when an XML tree is modified, not when it is constructed.</span></span> <span data-ttu-id="65239-160">Jest to spowodowane trzeba dodać program obsługi zdarzeń do zdarzenia przed może odbierać zdarzenia i nie można dodać program obsługi zdarzeń, zanim miał odwołanie do <xref:System.Xml.Linq.XObject>.</span><span class="sxs-lookup"><span data-stu-id="65239-160">This is because you have to add an event handler to an event before you can receive events, and you cannot add an event handler before you have a reference to an <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="65239-161">Nie można pobrać odwołania do <xref:System.Xml.Linq.XObject> przed kod XML jest konstruowany drzewa.</span><span class="sxs-lookup"><span data-stu-id="65239-161">You cannot get a reference to an <xref:System.Xml.Linq.XObject> before the XML tree is constructed.</span></span> <span data-ttu-id="65239-162">Oznacza to, że podczas konstrukcja funkcjonalna drzewa XML, nie otrzymasz zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="65239-162">This means that during functional construction of an XML tree, you will not receive events.</span></span>  
  
 <span data-ttu-id="65239-163">Należy zachować ostrożność podczas modyfikowania drzewa XML w jednej z tych zdarzeń, ponieważ w ten sposób może prowadzić do nieoczekiwanych wyników.</span><span class="sxs-lookup"><span data-stu-id="65239-163">You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results.</span></span> <span data-ttu-id="65239-164">Na przykład, jeśli zostanie wyświetlony <xref:System.Xml.Linq.XObject.Changing> zdarzeń, a podczas przetwarzania zdarzenia Usuń węzeł z drzewa, nie może zostać wyświetlony <xref:System.Xml.Linq.XObject.Changed> zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="65239-164">For example, if you receive a <xref:System.Xml.Linq.XObject.Changing> event, and while the event is being processed you remove the node from the tree, you might not receive the <xref:System.Xml.Linq.XObject.Changed> event.</span></span> <span data-ttu-id="65239-165">Podczas przetwarzania zdarzenia jest prawidłowy do modyfikowania drzewa XML niż ten, który zawiera węzeł, który otrzymuje zdarzeń; obowiązuje nawet do modyfikowania tym samym drzewie modyfikacje nie mają wpływu na określonych węzłów, które zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="65239-165">When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised.</span></span> <span data-ttu-id="65239-166">Jednak w przypadku zmodyfikowania obszaru drzewo, które zawiera węzeł odbierającego zdarzenie zdarzenia, które otrzymujesz i wpływu na drzewie są niezdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="65239-166">However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65239-167">Poniższy przykład dodaje procedurę obsługi zdarzeń do elementu głównego drzewa XML.</span><span class="sxs-lookup"><span data-stu-id="65239-167">The following example adds an event handler to the root element of an XML tree.</span></span> <span data-ttu-id="65239-168">Modyfikuje drzewa, powodując LINQ do XML, aby wywołać niektóre zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="65239-168">It then modifies the tree, causing LINQ to XML to raise some events.</span></span>  
  
```csharp  
XElement root = new XElement("Root", "content");  
root.Changing += new EventHandler<XObjectChangeEventArgs>(  
    (sender, cea) =>  
    {  
        Console.WriteLine("Changing event raised");  
        XElement xSender = (XElement)sender;  
        Console.WriteLine("  Sender: {0}", xSender.Name);  
        Console.WriteLine("  ObjectChange: {0}", cea.ObjectChange);  
    }  
);  
root.Changed += new EventHandler<XObjectChangeEventArgs>(  
    (sender, cea) =>  
    {  
        Console.WriteLine("Changed event raised");  
        XElement xSender = (XElement)sender;  
        Console.WriteLine("  Sender: {0}", xSender.Name);  
        Console.WriteLine("  ObjectChange: {0}", cea.ObjectChange);  
    }  
);  
root.Add(new XElement("Child", "child content"));  
```  
  
```vb  
Module Module1  
    WithEvents root As XElement = <Root>content</Root>  
  
    Sub Main()  
        root.Add(<Child>child content</Child>)  
    End Sub  
  
    Private Sub root_Changing( _  
            ByVal sender As Object, _  
            ByVal e As XObjectChangeEventArgs) _  
            Handles root.Changing  
        Dim xSender As XElement = DirectCast(sender, XElement)  
        Console.WriteLine("Changing event raised")  
        Console.WriteLine("  Sender: {0}", xSender.Name)  
        Console.WriteLine("  ObjectChange: {0}", e.ObjectChange)  
    End Sub  
  
    Private Sub root_Changed( _  
            ByVal sender As Object, _  
            ByVal e As XObjectChangeEventArgs) _  
            Handles root.Changed  
        Dim xSender As XElement = DirectCast(sender, XElement)  
        Console.WriteLine("Changed event raised")  
        Console.WriteLine("  Sender: {0}", xSender.Name)  
        Console.WriteLine("  ObjectChange: {0}", e.ObjectChange)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="65239-169">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="65239-169">This example produces the following output:</span></span>  
  
```  
Changing event raised  
  Sender: Child  
  ObjectChange: Add  
Changed event raised  
  Sender: Child  
  ObjectChange: Add  
```  
  
 <span data-ttu-id="65239-170">Zdarzenia są przydatne, gdy użytkownik chce przechowywać pewne informacje agregacji w drzewie XML.</span><span class="sxs-lookup"><span data-stu-id="65239-170">Events are useful when you want to maintain some aggregate information in an XML tree.</span></span> <span data-ttu-id="65239-171">Na przykład można zachować Suma faktury, która jest sumą pozycje faktury.</span><span class="sxs-lookup"><span data-stu-id="65239-171">For example, you may want maintain an invoice total that is the sum of the line items of the invoice.</span></span> <span data-ttu-id="65239-172">W tym przykładzie użyto zdarzeń do obsługi sumę wszystkich elementów podrzędnych w elemencie złożonych `Items`.</span><span class="sxs-lookup"><span data-stu-id="65239-172">This example uses events to maintain the total of all of the child elements under the complex element `Items`.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Total", 0),  
    new XElement("Items")  
);  
XElement total = root.Element("Total");  
XElement items = root.Element("Items");  
items.Changed += (object sender, XObjectChangeEventArgs cea) =>  
{  
    switch (cea.ObjectChange)  
    {  
        case XObjectChange.Add:  
            if (sender is XElement)  
                total.Value = ((int)total + (int)(XElement)sender).ToString();  
            if (sender is XText)  
                total.Value = ((int)total + (int)((XText)sender).Parent).ToString();  
            break;  
        case XObjectChange.Remove:  
            if (sender is XElement)  
                total.Value = ((int)total - (int)(XElement)sender).ToString();  
            if (sender is XText)  
                total.Value = ((int)total - Int32.Parse(((XText)sender).Value)).ToString();  
            break;  
    }  
    Console.WriteLine("Changed {0} {1}", sender.GetType().ToString(), cea.ObjectChange.ToString());  
};  
items.SetElementValue("Item1", 25);  
items.SetElementValue("Item2", 50);  
items.SetElementValue("Item2", 75);  
items.SetElementValue("Item3", 133);  
items.SetElementValue("Item1", null);  
items.SetElementValue("Item4", 100);  
Console.WriteLine("Total:{0}", (int)total);  
Console.WriteLine(root);  
```  
  
```vb  
Module Module1  
    Private total As XElement = Nothing  
    Private WithEvents items As XElement = Nothing  
    Private root As XElement = _  
            <Root>  
                <Total>0</Total>  
                <Items></Items>  
            </Root>  
  
    Sub Main()  
        total = root.<Total>(0)  
        items = root.<Items>(0)  
        items.SetElementValue("Item1", 25)  
        items.SetElementValue("Item2", 50)  
        items.SetElementValue("Item2", 75)  
        items.SetElementValue("Item3", 133)  
        items.SetElementValue("Item1", Nothing)  
        items.SetElementValue("Item4", 100)  
        Console.WriteLine("Total:{0}", CInt(total))  
        Console.WriteLine(root)  
    End Sub  
  
    Private Sub XObjectChanged( _  
            ByVal sender As Object, _  
            ByVal cea As XObjectChangeEventArgs) _  
            Handles items.Changed  
        Select Case cea.ObjectChange  
            Case XObjectChange.Add  
                If sender.GetType() Is GetType(XElement) Then  
                    total.Value = CStr(CInt(total.Value) + _  
                            CInt((DirectCast(sender, XElement)).Value))  
                End If  
                If sender.GetType() Is GetType(XText) Then  
                    total.Value = CStr(CInt(total.Value) + _  
                            CInt((DirectCast(sender, XText)).Value))  
                End If  
            Case XObjectChange.Remove  
                If sender.GetType() Is GetType(XElement) Then  
                    total.Value = CStr(CInt(total.Value) - _  
                            CInt((DirectCast(sender, XElement)).Value))  
                End If  
                If sender.GetType() Is GetType(XText) Then  
                    total.Value = CStr(CInt(total.Value) - _  
                            CInt((DirectCast(sender, XText)).Value))  
                End If  
        End Select  
        Console.WriteLine("Changed {0} {1}", _  
                            sender.GetType().ToString(), _  
                            cea.ObjectChange.ToString())  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="65239-173">Ten kod generuje następujące dane wyjściowe:</span><span class="sxs-lookup"><span data-stu-id="65239-173">This code produces the following output:</span></span>  
  
```  
Changed System.Xml.Linq.XElement Add  
Changed System.Xml.Linq.XElement Add  
Changed System.Xml.Linq.XText Remove  
Changed System.Xml.Linq.XText Add  
Changed System.Xml.Linq.XElement Add  
Changed System.Xml.Linq.XElement Remove  
Changed System.Xml.Linq.XElement Add  
Total:308  
<Root>  
  <Total>308</Total>  
  <Items>  
    <Item2>75</Item2>  
    <Item3>133</Item3>  
    <Item4>100</Item4>  
  </Items>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="65239-174">LINQ do XML</span><span class="sxs-lookup"><span data-stu-id="65239-174">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Changing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Xml.Linq.XObjectChangeEventArgs&gt; Changing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Xml.Linq.XObjectChangeEventArgs&gt; Changing" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Linq.XObject.Changing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Changing As EventHandler(Of XObjectChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Xml::Linq::XObjectChangeEventArgs ^&gt; ^ Changing;" />
      <MemberSignature Language="F#" Value="member this.Changing : EventHandler&lt;System.Xml.Linq.XObjectChangeEventArgs&gt; " Usage="member this.Changing : System.EventHandler&lt;System.Xml.Linq.XObjectChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Xml.Linq.XObjectChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="65239-175">Wywołane, gdy to <see cref="T:System.Xml.Linq.XObject" /> lub dowolnego z jego obiektów podrzędnych będą zmieniane.</span><span class="sxs-lookup"><span data-stu-id="65239-175">Raised when this <see cref="T:System.Xml.Linq.XObject" /> or any of its descendants are about to change.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65239-176">Zdarzenia są wywoływane tylko modyfikowanie drzewa XML, ale nie z konstrukcji drzewa XML.</span><span class="sxs-lookup"><span data-stu-id="65239-176">Events are raised only from modification of an XML tree, not from construction of an XML tree.</span></span> <span data-ttu-id="65239-177">Trzeba dodać program obsługi zdarzeń do zdarzenia przed może odbierać zdarzenia i nie można dodać program obsługi zdarzeń, zanim miał odwołanie do <xref:System.Xml.Linq.XObject>.</span><span class="sxs-lookup"><span data-stu-id="65239-177">You have to add an event handler to an event before you can receive events, and you can't add an event handler before you have a reference to an <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="65239-178">Nie można pobrać odwołania do <xref:System.Xml.Linq.XObject> przed kod XML jest konstruowany drzewa.</span><span class="sxs-lookup"><span data-stu-id="65239-178">You can't get a reference to an <xref:System.Xml.Linq.XObject> before the XML tree is constructed.</span></span> <span data-ttu-id="65239-179">Oznacza to, że podczas konstrukcja funkcjonalna drzewa XML, nie otrzymasz zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="65239-179">This means that during functional construction of an XML tree, you will not receive events.</span></span>  
  
 <span data-ttu-id="65239-180">Należy zachować ostrożność podczas modyfikowania drzewa XML w jednej z tych zdarzeń, ponieważ w ten sposób może prowadzić do nieoczekiwanych wyników.</span><span class="sxs-lookup"><span data-stu-id="65239-180">You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results.</span></span> <span data-ttu-id="65239-181">Na przykład, jeśli zostanie wyświetlony <xref:System.Xml.Linq.XObject.Changing> zdarzeń, a podczas przetwarzania zdarzenia Usuń węzeł z drzewa, nie może zostać wyświetlony <xref:System.Xml.Linq.XObject.Changed> zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="65239-181">For example, if you receive a <xref:System.Xml.Linq.XObject.Changing> event, and while the event is being processed you remove the node from the tree, you might not receive the <xref:System.Xml.Linq.XObject.Changed> event.</span></span> <span data-ttu-id="65239-182">Podczas przetwarzania zdarzenia jest prawidłowy do modyfikowania drzewa XML niż ten, który zawiera węzeł, który otrzymuje zdarzeń; obowiązuje nawet do modyfikowania tym samym drzewie modyfikacje nie mają wpływu na określonych węzłów, które zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="65239-182">When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised.</span></span> <span data-ttu-id="65239-183">Jednak w przypadku zmodyfikowania obszaru drzewo, które zawiera węzeł odbierającego zdarzenie zdarzenia, które otrzymujesz i wpływu na drzewie są niezdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="65239-183">However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65239-184">Poniższy przykład dodaje procedurę obsługi zdarzeń do elementu głównego drzewa XML.</span><span class="sxs-lookup"><span data-stu-id="65239-184">The following example adds an event handler to the root element of an XML tree.</span></span> <span data-ttu-id="65239-185">Modyfikuje drzewa, powodując LINQ do XML, aby wywołać niektóre zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="65239-185">It then modifies the tree, causing LINQ to XML to raise some events.</span></span>  
  
```csharp  
XElement root = new XElement("Root", "content");  
root.Changing += new EventHandler<XObjectChangeEventArgs>(  
    (sender, cea) =>  
    {  
        Console.WriteLine("Changing event raised");  
        XElement xSender = (XElement)sender;  
        Console.WriteLine("  Sender: {0}", xSender.Name);  
        Console.WriteLine("  ObjectChange: {0}", cea.ObjectChange);  
    }  
);  
root.Changed += new EventHandler<XObjectChangeEventArgs>(  
    (sender, cea) =>  
    {  
        Console.WriteLine("Changed event raised");  
        XElement xSender = (XElement)sender;  
        Console.WriteLine("  Sender: {0}", xSender.Name);  
        Console.WriteLine("  ObjectChange: {0}", cea.ObjectChange);  
    }  
);  
root.Add(new XElement("Child", "child content"));  
```  
  
```vb  
Module Module1  
    WithEvents root As XElement = <Root>content</Root>  
  
    Sub Main()  
        root.Add(<Child>child content</Child>)  
    End Sub  
  
    Private Sub root_Changing( _  
            ByVal sender As Object, _  
            ByVal e As XObjectChangeEventArgs) _  
            Handles root.Changing  
        Dim xSender As XElement = CType(sender, XElement)  
        Console.WriteLine("Changing event raised")  
        Console.WriteLine("  Sender: {0}", xSender.Name)  
        Console.WriteLine("  ObjectChange: {0}", e.ObjectChange)  
    End Sub  
  
    Private Sub root_Changed( _  
            ByVal sender As Object, _  
            ByVal e As XObjectChangeEventArgs) _  
            Handles root.Changed  
        Dim xSender As XElement = CType(sender, XElement)  
        Console.WriteLine("Changed event raised")  
        Console.WriteLine("  Sender: {0}", xSender.Name)  
        Console.WriteLine("  ObjectChange: {0}", e.ObjectChange)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="65239-186">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="65239-186">This example produces the following output:</span></span>  
  
```  
Changing event raised  
  Sender: Child  
  ObjectChange: Add  
Changed event raised  
  Sender: Child  
  ObjectChange: Add  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="65239-187">LINQ do XML</span><span class="sxs-lookup"><span data-stu-id="65239-187">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XObject.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XDocument ^ Document { System::Xml::Linq::XDocument ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Document : System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XObject.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="65239-188">Pobiera <see cref="T:System.Xml.Linq.XDocument" /> tego <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-188">Gets the <see cref="T:System.Xml.Linq.XDocument" /> for this <see cref="T:System.Xml.Linq.XObject" />.</span></span></summary>
        <value><span data-ttu-id="65239-189"><see cref="T:System.Xml.Linq.XDocument" /> Tego <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-189">The <see cref="T:System.Xml.Linq.XDocument" /> for this <see cref="T:System.Xml.Linq.XObject" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65239-190">Poniższy przykład tworzy dokument z niektórych z zawartością złożoną.</span><span class="sxs-lookup"><span data-stu-id="65239-190">The following example creates a document with some complex content.</span></span> <span data-ttu-id="65239-191">Następnie używa tej właściwości można pobrać w dokumencie `Child` elementu.</span><span class="sxs-lookup"><span data-stu-id="65239-191">It then uses this property to retrieve the document for the `Child` element.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XComment("A comment in the document."),  
    new XElement("Root",  
        new XElement("Child", "content")  
    )  
);  
XElement child = doc.Descendants("Child").First();  
XDocument documentOfChild = child.Document;  
Console.WriteLine(documentOfChild.FirstNode);  
```  
  
```vb  
Dim doc As XDocument = _  
        <?xml version="1.0"?>  
        <!--A comment in the document.-->  
        <Root>  
            <Child>content</Child>  
         </Root>  
Dim child As XElement = doc.Descendants("Child").First()  
Dim documentOfChild As XDocument = child.Document  
Console.WriteLine(documentOfChild.FirstNode)  
```  
  
 <span data-ttu-id="65239-192">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="65239-192">This example produces the following output:</span></span>  
  
```  
<!--A comment in the document.-->  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="65239-193">LINQ do XML</span><span class="sxs-lookup"><span data-stu-id="65239-193">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XObject.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.Linq.XObject.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="65239-194">Pobiera typ węzła, w tym <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-194">Gets the node type for this <see cref="T:System.Xml.Linq.XObject" />.</span></span></summary>
        <value><span data-ttu-id="65239-195">Typ węzła, w tym <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-195">The node type for this <see cref="T:System.Xml.Linq.XObject" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65239-196">Ponieważ wszystkie klasy, która pochodzi od <xref:System.Xml.Linq.XObject> zawierają <xref:System.Xml.Linq.XObject.NodeType%2A> właściwości, można napisać kod, który działa w kolekcjach konkretnych podklasą <xref:System.Xml.Linq.XObject>.</span><span class="sxs-lookup"><span data-stu-id="65239-196">Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="65239-197">Kod można przetestować typ węzła w każdym węźle w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="65239-197">Your code can then test for the node type of each node in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65239-198">W poniższym przykładzie użyto tej metody można pobrać typu węzła w różnych węzłach.</span><span class="sxs-lookup"><span data-stu-id="65239-198">The following example uses this method to retrieve the node type for a variety of nodes.</span></span>  
  
```csharp  
// Note that XNode uses XmlNodeType, which is in the System.Xml namespace.  
XDocument xmlTree = new XDocument(  
    new XComment("a comment"),  
    new XProcessingInstruction("xml-stylesheet", "type=\"text/xsl\" href=\"hello.xsl\""),  
    new XElement("Root",  
        new XAttribute("Att", "attContent"),  
        new XElement("Child1",  
            new XCData("CDATA content")  
        ),  
        new XElement("Child2",  
            new XText("Text content")  
        )  
    )  
);  
  
foreach (XNode node in xmlTree.DescendantNodes())  
{  
    Console.WriteLine(node.NodeType);  
    if (node.NodeType == XmlNodeType.Element)  
    {  
        foreach (XAttribute att in ((XElement)node).Attributes())  
            Console.WriteLine(att.NodeType);  
    }  
}  
```  
  
```vb  
' Note that XNode uses XmlNodeType, which is in the System.Xml  namespace.  
Dim xmlTree As XDocument = _   
    <?xml version="1.0"?>  
    <!--a comment-->  
    <?xml-stylesheet type="text/xsl" href="hello.xsl"?>  
    <Root Att="attContent">  
        <Child1><![CDATA[CDATA content]]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="65239-199">LINQ do XML</span><span class="sxs-lookup"><span data-stu-id="65239-199">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XElement Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XElement Parent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XObject.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XElement ^ Parent { System::Xml::Linq::XElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Xml.Linq.XElement" Usage="System.Xml.Linq.XObject.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="65239-200">Pobiera element nadrzędny <see cref="T:System.Xml.Linq.XElement" /> to <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-200">Gets the parent <see cref="T:System.Xml.Linq.XElement" /> of this <see cref="T:System.Xml.Linq.XObject" />.</span></span></summary>
        <value><span data-ttu-id="65239-201">Element nadrzędny <see cref="T:System.Xml.Linq.XElement" /> to <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-201">The parent <see cref="T:System.Xml.Linq.XElement" /> of this <see cref="T:System.Xml.Linq.XObject" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65239-202">Jeśli ten <xref:System.Xml.Linq.XObject> ma nie elementu nadrzędnego, właściwość ta zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="65239-202">If this <xref:System.Xml.Linq.XObject> has no parent element, this property returns `null`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65239-203">Właściwość ta zwraca element nadrzędny i jako podrzędne węzły <xref:System.Xml.Linq.XDocument> mają nie elementu nadrzędnego, właściwość ta zwraca `null` dla nich.</span><span class="sxs-lookup"><span data-stu-id="65239-203">This property returns the parent element, and as children nodes of an <xref:System.Xml.Linq.XDocument> have no parent element, this property returns `null` for them.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65239-204">W poniższym przykładzie użyto tej metody.</span><span class="sxs-lookup"><span data-stu-id="65239-204">The following example uses this method.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XComment("A comment in the document."),  
    new XElement("Root",  
        new XElement("Child", "content")  
    )  
);  
XElement child = doc.Descendants("Child").First();  
XElement root = child.Parent;  
Console.WriteLine(root.Name);  
```  
  
```vb  
Dim doc As XDocument = _   
    <?xml version="1.0"?>  
    <!--A comment in the document.-->  
    <Root>  
        <Child>content</Child>  
    </Root>  
Dim child As XElement = doc.Descendants("Child").First()  
Dim root As XElement = child.Parent  
Console.WriteLine(root.Name)  
```  
  
 <span data-ttu-id="65239-205">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="65239-205">This example produces the following output:</span></span>  
  
```  
Root  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="65239-206">LINQ do XML</span><span class="sxs-lookup"><span data-stu-id="65239-206">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotations">
      <MemberSignature Language="C#" Value="public void RemoveAnnotations (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAnnotations(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAnnotations(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.RemoveAnnotations : Type -&gt; unit" Usage="xObject.RemoveAnnotations type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="65239-207"><see cref="T:System.Type" /> Adnotacji do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="65239-207">The <see cref="T:System.Type" /> of annotations to remove.</span></span></param>
        <summary><span data-ttu-id="65239-208">Usuwa adnotacje określonego typu z tym <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-208">Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65239-209">Poniższy przykład tworzy element przy użyciu czterech adnotacji na nim.</span><span class="sxs-lookup"><span data-stu-id="65239-209">The following example creates an element with four annotations on it.</span></span> <span data-ttu-id="65239-210">Następnie używa tej metody można usunąć dwa z nich.</span><span class="sxs-lookup"><span data-stu-id="65239-210">It then uses this method to remove two of them.</span></span>  
  
```csharp  
public class MyAnnotation {  
    private string tag;  
    public string Tag {get{return tag;} set{tag=value;}}  
    public MyAnnotation(string tag) {  
        this.tag = tag;  
    }  
}  
  
class Program  
{  
    static void Main(string[] args)  
    {     
        XElement root = new XElement("Root", "content");  
        root.AddAnnotation(new MyAnnotation("T1"));  
        root.AddAnnotation(new MyAnnotation("T2"));  
        root.AddAnnotation("abc");  
        root.AddAnnotation("def");  
  
        Console.WriteLine("Count before removing: {0}", root.Annotations<object>().Count());  
        root.RemoveAnnotations(typeof(MyAnnotation));  
        Console.WriteLine("Count after removing: {0}", root.Annotations<object>().Count());  
    }  
}  
```  
  
```vb  
Public Class MyAnnotation  
    Private _tag As String  
  
    Property Tag() As String  
        Get  
            Return Me._tag  
        End Get  
        Set(ByVal Value As String)  
            Me._tag = Value  
        End Set  
    End Property  
  
    Public Sub New(ByVal tag As String)  
        Me._tag = tag  
    End Sub  
End Class  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        root.AddAnnotation(New MyAnnotation("T1"))  
        root.AddAnnotation(New MyAnnotation("T2"))  
        root.AddAnnotation("abc")  
        root.AddAnnotation("def")  
  
        Console.WriteLine("Count before removing: {0}", root.Annotations(Of Object)().Count())  
        root.RemoveAnnotations(GetType(MyAnnotation))  
        Console.WriteLine("Count after removing: {0}", root.Annotations(Of Object)().Count())  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="65239-211">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="65239-211">This example produces the following output:</span></span>  
  
```  
Count before removing: 4  
Count after removing: 2  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="65239-212">LINQ do XML</span><span class="sxs-lookup"><span data-stu-id="65239-212">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotations&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void RemoveAnnotations&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAnnotations&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XObject.RemoveAnnotations``1" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAnnotations(Of T As Class) ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class void RemoveAnnotations();" />
      <MemberSignature Language="F#" Value="member this.RemoveAnnotations : unit -&gt; unit (requires 'T : null)" Usage="xObject.RemoveAnnotations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="65239-213">Typ adnotacje do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="65239-213">The type of annotations to remove.</span></span></typeparam>
        <summary><span data-ttu-id="65239-214">Usuwa adnotacje określonego typu z tym <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-214">Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65239-215">Poniższy przykład tworzy element przy użyciu czterech adnotacji na nim.</span><span class="sxs-lookup"><span data-stu-id="65239-215">The following example creates an element with four annotations on it.</span></span> <span data-ttu-id="65239-216">Następnie używa tej metody można usunąć dwa z nich.</span><span class="sxs-lookup"><span data-stu-id="65239-216">It then uses this method to remove two of them.</span></span>  
  
```csharp  
public class MyAnnotation {  
    private string tag;  
    public string Tag {get{return tag;} set{tag=value;}}  
    public MyAnnotation(string tag) {  
        this.tag = tag;  
    }  
}  
  
class Program {  
    static void Main(string[] args) {     
        XElement root = new XElement("Root", "content");  
        root.AddAnnotation(new MyAnnotation("T1"));  
        root.AddAnnotation(new MyAnnotation("T2"));  
        root.AddAnnotation("abc");  
        root.AddAnnotation("def");  
  
        Console.WriteLine("Count before removing: {0}", root.Annotations<object>().Count());  
        root.RemoveAnnotations<MyAnnotation>();  
        Console.WriteLine("Count after removing: {0}", root.Annotations<object>().Count());  
    }  
}  
```  
  
```vb  
Public Class MyAnnotation  
    Private _tag As String  
  
    Property Tag() As String  
        Get  
            Return Me._tag  
        End Get  
        Set(ByVal Value As String)  
            Me._tag = Value  
        End Set  
    End Property  
  
    Public Sub New(ByVal tag As String)  
        Me._tag = tag  
    End Sub  
End Class  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        root.AddAnnotation(New MyAnnotation("T1"))  
        root.AddAnnotation(New MyAnnotation("T2"))  
        root.AddAnnotation("abc")  
        root.AddAnnotation("def")  
  
        Console.WriteLine("Count before removing: {0}", root.Annotations(Of Object)().Count())  
        root.RemoveAnnotations(Of MyAnnotation)()  
        Console.WriteLine("Count after removing: {0}", root.Annotations(Of Object)().Count())  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="65239-217">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="65239-217">This example produces the following output:</span></span>  
  
```  
Count before removing: 4  
Count after removing: 2  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="65239-218">LINQ do XML</span><span class="sxs-lookup"><span data-stu-id="65239-218">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlLineInfo.HasLineInfo">
      <MemberSignature Language="C#" Value="bool IXmlLineInfo.HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Xml.IXmlLineInfo.HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Function HasLineInfo () As Boolean Implements IXmlLineInfo.HasLineInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Xml.IXmlLineInfo.HasLineInfo() = System::Xml::IXmlLineInfo::HasLineInfo;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="65239-219">Pobiera wartość wskazującą czy to <see cref="T:System.Xml.Linq.XObject" /> zawiera informacje wiersza.</span><span class="sxs-lookup"><span data-stu-id="65239-219">Gets a value indicating whether or not this <see cref="T:System.Xml.Linq.XObject" /> has line information.</span></span></summary>
        <returns><span data-ttu-id="65239-220"><see langword="true" /> Jeśli <see cref="T:System.Xml.Linq.XObject" /> zawiera informacje wiersza, w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="65239-220"><see langword="true" /> if the <see cref="T:System.Xml.Linq.XObject" /> has line information, otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65239-221">Możesz wywołać tę metodę, aby określić, czy <xref:System.Xml.Linq.XObject> zawiera prawidłowe informacje.</span><span class="sxs-lookup"><span data-stu-id="65239-221">You can call this method to determine whether the <xref:System.Xml.Linq.XObject> contains valid line information.</span></span>  
  
 <span data-ttu-id="65239-222">Ta metoda jest jawną implementacją członków metody w <xref:System.Xml.IXmlLineInfo> interfejsu, tak aby można było wywołać tę metodę, należy go rzutować <xref:System.Xml.IXmlLineInfo>.</span><span class="sxs-lookup"><span data-stu-id="65239-222">This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65239-223">W tym przykładzie ładuje małych drzewa XML z pliku, ustawianie opcji podstawowy identyfikator URI i zachowują informacje wiersza.</span><span class="sxs-lookup"><span data-stu-id="65239-223">This example loads a small XML tree from a file, setting the options to set base URI and retain line information.</span></span> <span data-ttu-id="65239-224">Dodaje inny element, który nie ma informacje wiersza.</span><span class="sxs-lookup"><span data-stu-id="65239-224">It then adds another element that does not have line information.</span></span> <span data-ttu-id="65239-225">Go następnie wyświetla informacje wiersza dla każdego elementu w drzewie.</span><span class="sxs-lookup"><span data-stu-id="65239-225">It then prints the line information for each element in the tree.</span></span>  
  
```csharp  
string markup = @"<Root>  
    <Child1 />  
    <Child2 />  
    <Child4 />  
</Root>";  
  
File.WriteAllText("Test.xml", markup);  
  
XElement po = XElement.Load("Test.xml",  
    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  
  
// add a node to the tree.  
// the newly added node will not have line information.  
po.Element("Child2").AddAfterSelf(new XElement("Child3"));  
  
string[] splitUri = po.BaseUri.Split('/');  
Console.WriteLine("BaseUri: {0}", splitUri[splitUri.Length - 1]);  
Console.WriteLine();  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).HasLineInfo() ?  
            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5) :  
            "",  
        ((IXmlLineInfo)e).HasLineInfo() ?  
            ((IXmlLineInfo)e).LinePosition.ToString() :  
            "No Line Information");  
```  
  
```vb  
Dim markup As String = _  
    "<Root>" & Environment.NewLine & _  
    "    <Child1 />" & Environment.NewLine & _  
    "    <Child2 />" & Environment.NewLine & _  
    "    <Child4 />" & Environment.NewLine & _  
    "</Root>"  
  
File.WriteAllText("Test.xml", markup)  
  
Dim po As XElement = XElement.Load("Test.xml", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  
  
' add a node to the tree.  
' the newly added node will not have line information.  
po.Element("Child2").AddAfterSelf(New XElement("Child3"))  
  
Dim splitUri() As String = po.BaseUri.Split("/"c)  
Console.WriteLine("BaseUri: {0}", splitUri(splitUri.Length - 1))  
Console.WriteLine()  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  
            DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  
            ""), _  
        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  
            DirectCast(e, IXmlLineInfo).LinePosition.ToString(), _  
            "No Line Information"))  
Next  
```  
  
 <span data-ttu-id="65239-226">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="65239-226">This example produces the following output:</span></span>  
  
```  
BaseUri: Test.xml  
  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child1            2    6  
  Child2            3    6  
  Child3            No Line Information  
  Child4            4    6  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlLineInfo.LineNumber">
      <MemberSignature Language="C#" Value="int System.Xml.IXmlLineInfo.LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Xml.IXmlLineInfo.LineNumber" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property LineNumber As Integer Implements IXmlLineInfo.LineNumber" />
      <MemberSignature Language="C++ CLI" Value="property int System::Xml::IXmlLineInfo::LineNumber { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Xml.IXmlLineInfo.LineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="65239-227">Pobiera wiersz numer, który bazowego <see cref="T:System.Xml.XmlReader" /> zgłoszone dla tego <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-227">Gets the line number that the underlying <see cref="T:System.Xml.XmlReader" /> reported for this <see cref="T:System.Xml.Linq.XObject" />.</span></span></summary>
        <value><span data-ttu-id="65239-228"><see cref="T:System.Int32" /> Zawierającą numer zgłoszony przez <see cref="T:System.Xml.XmlReader" /> tego <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-228">An <see cref="T:System.Int32" /> that contains the line number reported by the <see cref="T:System.Xml.XmlReader" /> for this <see cref="T:System.Xml.Linq.XObject" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65239-229">Ta metoda jest jawną implementacją członków metody w <xref:System.Xml.IXmlLineInfo> interfejsu, tak aby można było wywołać tę metodę, należy go rzutować <xref:System.Xml.IXmlLineInfo>.</span><span class="sxs-lookup"><span data-stu-id="65239-229">This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65239-230">W tym przykładzie ładuje małych drzewa XML z pliku, ustawianie opcji podstawowy identyfikator URI i zachowują informacje wiersza.</span><span class="sxs-lookup"><span data-stu-id="65239-230">This example loads a small XML tree from a file, setting the options to set base URI and retain line information.</span></span> <span data-ttu-id="65239-231">Dodaje inny element, który nie ma informacje wiersza.</span><span class="sxs-lookup"><span data-stu-id="65239-231">It then adds another element that does not have line information.</span></span> <span data-ttu-id="65239-232">Go następnie wyświetla informacje wiersza dla każdego elementu w drzewie.</span><span class="sxs-lookup"><span data-stu-id="65239-232">It then prints the line information for each element in the tree.</span></span>  
  
```csharp  
string markup = @"<Root>  
    <Child1 />  
    <Child2 />  
    <Child4 />  
</Root>";  
  
File.WriteAllText("Test.xml", markup);  
  
XElement po = XElement.Load("Test.xml",  
    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  
  
// add a node to the tree.  
// the newly added node will not have line information.  
po.Element("Child2").AddAfterSelf(new XElement("Child3"));  
  
string[] splitUri = po.BaseUri.Split('/');  
Console.WriteLine("BaseUri: {0}", splitUri[splitUri.Length - 1]);  
Console.WriteLine();  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).HasLineInfo() ?  
            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5) :  
            "",  
        ((IXmlLineInfo)e).HasLineInfo() ?  
            ((IXmlLineInfo)e).LinePosition.ToString() :  
            "No Line Information");  
```  
  
```vb  
Dim markup As String = _  
    "<Root>" & Environment.NewLine & _  
    "    <Child1 />" & Environment.NewLine & _  
    "    <Child2 />" & Environment.NewLine & _  
    "    <Child4 />" & Environment.NewLine & _  
    "</Root>"  
  
File.WriteAllText("Test.xml", markup)  
  
Dim po As XElement = XElement.Load("Test.xml", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  
  
' add a node to the tree.  
' the newly added node will not have line information.  
po.Element("Child2").AddAfterSelf(New XElement("Child3"))  
  
Dim splitUri() As String = po.BaseUri.Split("/"c)  
Console.WriteLine("BaseUri: {0}", splitUri(splitUri.Length - 1))  
Console.WriteLine()  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  
            DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  
            ""), _  
        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  
            DirectCast(e, IXmlLineInfo).LinePosition.ToString(), _  
            "No Line Information"))  
Next  
```  
  
 <span data-ttu-id="65239-233">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="65239-233">This example produces the following output:</span></span>  
  
```  
BaseUri: Test.xml  
  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child1            2    6  
  Child2            3    6  
  Child3            No Line Information  
  Child4            4    6  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="65239-234">LINQ do XML</span><span class="sxs-lookup"><span data-stu-id="65239-234">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlLineInfo.LinePosition">
      <MemberSignature Language="C#" Value="int System.Xml.IXmlLineInfo.LinePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Xml.IXmlLineInfo.LinePosition" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property LinePosition As Integer Implements IXmlLineInfo.LinePosition" />
      <MemberSignature Language="C++ CLI" Value="property int System::Xml::IXmlLineInfo::LinePosition { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Xml.IXmlLineInfo.LinePosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="65239-235">Pobiera położenie wiersza, który bazowego <see cref="T:System.Xml.XmlReader" /> zgłoszone dla tego <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-235">Gets the line position that the underlying <see cref="T:System.Xml.XmlReader" /> reported for this <see cref="T:System.Xml.Linq.XObject" />.</span></span></summary>
        <value><span data-ttu-id="65239-236"><see cref="T:System.Int32" /> Zawierający wiersza pozycję zgłoszone przez <see cref="T:System.Xml.XmlReader" /> tego <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="65239-236">An <see cref="T:System.Int32" /> that contains the line position reported by the <see cref="T:System.Xml.XmlReader" /> for this <see cref="T:System.Xml.Linq.XObject" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65239-237">Ta metoda jest jawną implementacją członków metody w <xref:System.Xml.IXmlLineInfo> interfejsu, tak aby można było wywołać tę metodę, należy go rzutować <xref:System.Xml.IXmlLineInfo>.</span><span class="sxs-lookup"><span data-stu-id="65239-237">This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65239-238">W tym przykładzie ładuje małych drzewa XML z pliku, ustawianie opcji podstawowy identyfikator URI i zachowują informacje wiersza.</span><span class="sxs-lookup"><span data-stu-id="65239-238">This example loads a small XML tree from a file, setting the options to set base URI and retain line information.</span></span> <span data-ttu-id="65239-239">Dodaje inny element, który nie ma informacje wiersza.</span><span class="sxs-lookup"><span data-stu-id="65239-239">It then adds another element that does not have line information.</span></span> <span data-ttu-id="65239-240">Go następnie wyświetla informacje wiersza dla każdego elementu w drzewie.</span><span class="sxs-lookup"><span data-stu-id="65239-240">It then prints the line information for each element in the tree.</span></span>  
  
```csharp  
string markup = @"<Root>  
    <Child1 />  
    <Child2 />  
    <Child4 />  
</Root>";  
  
File.WriteAllText("Test.xml", markup);  
  
XElement po = XElement.Load("Test.xml",  
    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  
  
// add a node to the tree.  
// the newly added node will not have line information.  
po.Element("Child2").AddAfterSelf(new XElement("Child3"));  
  
string[] splitUri = po.BaseUri.Split('/');  
Console.WriteLine("BaseUri: {0}", splitUri[splitUri.Length - 1]);  
Console.WriteLine();  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).HasLineInfo() ?  
            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5) :  
            "",  
        ((IXmlLineInfo)e).HasLineInfo() ?  
            ((IXmlLineInfo)e).LinePosition.ToString() :  
            "No Line Information");  
```  
  
```vb  
Dim markup As String = _  
    "<Root>" & Environment.NewLine & _  
    "    <Child1 />" & Environment.NewLine & _  
    "    <Child2 />" & Environment.NewLine & _  
    "    <Child4 />" & Environment.NewLine & _  
    "</Root>"  
  
File.WriteAllText("Test.xml", markup)  
  
Dim po As XElement = XElement.Load("Test.xml", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  
  
' add a node to the tree.  
' the newly added node will not have line information.  
po.Element("Child2").AddAfterSelf(New XElement("Child3"))  
  
Dim splitUri() As String = po.BaseUri.Split("/"c)  
Console.WriteLine("BaseUri: {0}", splitUri(splitUri.Length - 1))  
Console.WriteLine()  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  
            DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  
            ""), _  
        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  
            DirectCast(e, IXmlLineInfo).LinePosition.ToString(), _  
            "No Line Information"))  
Next  
```  
  
 <span data-ttu-id="65239-241">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="65239-241">This example produces the following output:</span></span>  
  
```  
BaseUri: Test.xml  
  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child1            2    6  
  Child2            3    6  
  Child3            No Line Information  
  Child4            4    6  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="65239-242">LINQ do XML</span><span class="sxs-lookup"><span data-stu-id="65239-242">LINQ to XML</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>