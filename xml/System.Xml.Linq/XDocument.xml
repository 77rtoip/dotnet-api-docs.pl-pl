<Type Name="XDocument" FullName="System.Xml.Linq.XDocument">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="38b16d8102e64916712cbaf7e0ae058e627c4ec5" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51928101" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XDocument : System.Xml.Linq.XContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XDocument extends System.Xml.Linq.XContainer" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XDocument" />
  <TypeSignature Language="VB.NET" Value="Public Class XDocument&#xA;Inherits XContainer" />
  <TypeSignature Language="C++ CLI" Value="public ref class XDocument : System::Xml::Linq::XContainer" />
  <TypeSignature Language="F#" Value="type XDocument = class&#xA;    inherit XContainer" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="90fbc-101">Reprezentuje dokumentu XML.</span>
      <span class="sxs-lookup">
        <span data-stu-id="90fbc-101">Represents an XML document.</span>
      </span>
      <span data-ttu-id="90fbc-102">Dla składników i użycie <see cref="T:System.Xml.Linq.XDocument" /> obiektu, zobacz <see href="https://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">Przegląd klasy XDocument</see>.</span>
      <span class="sxs-lookup">
        <span data-stu-id="90fbc-102">For the components and usage of an <see cref="T:System.Xml.Linq.XDocument" /> object, see <see href="https://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">XDocument Class Overview</see>.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-103">Aby uzyskać szczegółowe informacje o zawartości <xref:System.Xml.Linq.XDocument>, zobacz [obiektów Nieprawidłowa zawartość XElement i XDocument](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="90fbc-103">For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-104">Poniższy przykład tworzy dokument, a następnie dodaje do niego komentarz i elementu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-104">The following example creates a document, and then adds a comment and an element to it.</span></span> <span data-ttu-id="90fbc-105">Go następnie Redaguj innego dokumentu przy użyciu wyników zapytania.</span><span class="sxs-lookup"><span data-stu-id="90fbc-105">It then composes another document using the results of a query.</span></span>  
  
```csharp  
XDocument srcTree = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        new XElement("Child1", "data1"),  
        new XElement("Child2", "data2"),  
        new XElement("Child3", "data3"),  
        new XElement("Child2", "data4"),  
        new XElement("Info5", "info5"),  
        new XElement("Info6", "info6"),  
        new XElement("Info7", "info7"),  
        new XElement("Info8", "info8")  
    )  
);  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        from el in srcTree.Element("Root").Elements()  
        where ((string)el).StartsWith("data")  
        select el  
    )  
);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim srcTree As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <Child1>data1</Child1>  
            <Child2>data2</Child2>  
            <Child3>data3</Child3>  
            <Child2>data4</Child2>  
            <Info5>info5</Info5>  
            <Info6>info6</Info6>  
            <Info7>info7</Info7>  
            <Info8>info8</Info8>  
        </Root>  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <%= From el In srcTree.<Root>.Elements _  
                Where CStr(el).StartsWith("data") _  
                Select el %>  
        </Root>  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="90fbc-106">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-106">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment-->  
<Root>  
  <Child1>data1</Child1>  
  <Child2>data2</Child2>  
  <Child3>data3</Child3>  
  <Child2>data4</Child2>  
</Root>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Linq.XNamespace" />
    <altmember cref="T:System.Xml.Linq.XDeclaration" />
    <altmember cref="T:System.Xml.Linq.XElement" />
    <altmember cref="T:System.Xml.Linq.XNode" />
    <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
      <span data-ttu-id="90fbc-107">LINQ do XML</span>
      <span class="sxs-lookup">
        <span data-stu-id="90fbc-107">LINQ to XML</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
      <span data-ttu-id="90fbc-108">XDocument, klasa — Przegląd</span>
      <span class="sxs-lookup">
        <span data-stu-id="90fbc-108">XDocument Class Overview</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90fbc-109">Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Linq.XDocument" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-109">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-110">Przeciążenia konstruktorów umożliwiają tworzenie nowego pustego <xref:System.Xml.Linq.XDocument>; do utworzenia <xref:System.Xml.Linq.XDocument> z określoną zawartością początkowego; i utworzyć <xref:System.Xml.Linq.XDocument> jako kopię innej <xref:System.Xml.Linq.XDocument> obiektu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-110">Overloaded constructors enable you to create a new empty <xref:System.Xml.Linq.XDocument>; to create an <xref:System.Xml.Linq.XDocument> with some specified initial content; and to create an <xref:System.Xml.Linq.XDocument> as a copy of another <xref:System.Xml.Linq.XDocument> object.</span></span>  
  
 <span data-ttu-id="90fbc-111">Nie są wiele scenariuszy, w których konieczna utworzyć <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-111">There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>.</span></span> <span data-ttu-id="90fbc-112">Zamiast tego można utworzyć zwykle z drzewa XML z <xref:System.Xml.Linq.XElement> węzła głównego.</span><span class="sxs-lookup"><span data-stu-id="90fbc-112">Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node.</span></span> <span data-ttu-id="90fbc-113">Jeśli nie masz określonych wymagań można utworzyć dokumentu, (na przykład dlatego, że należy utworzyć instrukcje przetwarzania i komentarze na najwyższym poziomie lub masz obsługę typów dokumentów), jest często bardziej wygodny w użyciu <xref:System.Xml.Linq.XElement> jako węzeł główny.</span><span class="sxs-lookup"><span data-stu-id="90fbc-113">Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.</span></span>  
  
 <span data-ttu-id="90fbc-114">Aby uzyskać szczegółowe informacje o zawartości <xref:System.Xml.Linq.XDocument>, zobacz [obiektów Nieprawidłowa zawartość XElement i XDocument](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="90fbc-114">For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-115">Poniższy przykład tworzy dokument, a następnie dodaje do niego komentarz i elementu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-115">The following example creates a document, and then adds a comment and an element to it.</span></span> <span data-ttu-id="90fbc-116">Go następnie Redaguj innego dokumentu przy użyciu wyników zapytania.</span><span class="sxs-lookup"><span data-stu-id="90fbc-116">It then composes another document using the results of a query.</span></span>  
  
```csharp  
XDocument srcTree = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        new XElement("Child1", "data1"),  
        new XElement("Child2", "data2"),  
        new XElement("Child3", "data3"),  
        new XElement("Child2", "data4"),  
        new XElement("Info5", "info5"),  
        new XElement("Info6", "info6"),  
        new XElement("Info7", "info7"),  
        new XElement("Info8", "info8")  
    )  
);  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        from el in srcTree.Element("Root").Elements()  
        where ((string)el).StartsWith("data")  
        select el  
    )  
);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim srcTree As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <Child1>data1</Child1>  
            <Child2>data2</Child2>  
            <Child3>data3</Child3>  
            <Child2>data4</Child2>  
            <Info5>info5</Info5>  
            <Info6>info6</Info6>  
            <Info7>info7</Info7>  
            <Info8>info8</Info8>  
        </Root>  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <%= From el In srcTree.<Root>.Elements _  
                Where CStr(el).StartsWith("data") _  
                Select el %>  
        </Root>  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="90fbc-117">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-117">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment-->  
<Root>  
  <Child1>data1</Child1>  
  <Child2>data2</Child2>  
  <Child3>data3</Child3>  
  <Child2>data4</Child2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-118">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-118">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
          <span data-ttu-id="90fbc-119">XDocument, klasa — Przegląd</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-119">XDocument Class Overview</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XDocument();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90fbc-120">Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Linq.XDocument" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-120">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-121">Nie są wiele scenariuszy, w których konieczna utworzyć <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-121">There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>.</span></span> <span data-ttu-id="90fbc-122">Zamiast tego można utworzyć zwykle z drzewa XML z <xref:System.Xml.Linq.XElement> węzła głównego.</span><span class="sxs-lookup"><span data-stu-id="90fbc-122">Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node.</span></span> <span data-ttu-id="90fbc-123">Jeśli nie masz określonych wymagań można utworzyć dokumentu, (na przykład dlatego, że należy utworzyć instrukcje przetwarzania i komentarze na najwyższym poziomie lub masz obsługę typów dokumentów), jest często bardziej wygodny w użyciu <xref:System.Xml.Linq.XElement> jako węzeł główny.</span><span class="sxs-lookup"><span data-stu-id="90fbc-123">Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.</span></span>  
  
 <span data-ttu-id="90fbc-124">Aby uzyskać szczegółowe informacje o zawartości <xref:System.Xml.Linq.XDocument>, zobacz [obiektów Nieprawidłowa zawartość XElement i XDocument](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="90fbc-124">For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-125">Poniższy przykład tworzy nowy dokument, a następnie dodaje do niego komentarz i elementu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-125">The following example creates a new document, and then adds a comment and an element to it.</span></span>  
  
```csharp  
XDocument doc = new XDocument();  
doc.Add(new XComment("This is a comment"));  
doc.Add(new XElement("Root", "content"));  
Console.WriteLine(doc);  
```  
  
```vb  
Dim doc As XDocument = New XDocument()  
doc.Add(<!--This is a comment-->)  
doc.Add(<Root>content</Root>)  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="90fbc-126">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-126">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment-->  
<Root>content</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-127">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-127">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
          <span data-ttu-id="90fbc-128">XDocument, klasa — Przegląd</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-128">XDocument Class Overview</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XDocument (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.#ctor(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XDocument(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XDocument : obj[] -&gt; System.Xml.Linq.XDocument" Usage="new System.Xml.Linq.XDocument content" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="90fbc-129">Lista parametrów obiekty zawartości do dodania do tego dokumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-129">A parameter list of content objects to add to this document.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-130">Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Linq.XDocument" /> klas z określoną zawartością.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-130">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-131">Nie są wiele scenariuszy, w których konieczna utworzyć <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-131">There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>.</span></span> <span data-ttu-id="90fbc-132">Zamiast tego można utworzyć zwykle z drzewa XML z <xref:System.Xml.Linq.XElement> węzła głównego.</span><span class="sxs-lookup"><span data-stu-id="90fbc-132">Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node.</span></span> <span data-ttu-id="90fbc-133">Jeśli nie masz określonych wymagań można utworzyć dokumentu, (na przykład dlatego, że należy utworzyć instrukcje przetwarzania i komentarze na najwyższym poziomie lub masz obsługę typów dokumentów), jest często bardziej wygodny w użyciu <xref:System.Xml.Linq.XElement> jako węzeł główny.</span><span class="sxs-lookup"><span data-stu-id="90fbc-133">Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.</span></span>  
  
 <span data-ttu-id="90fbc-134">Aby uzyskać szczegółowe informacje o zawartości <xref:System.Xml.Linq.XDocument>, zobacz [obiektów Nieprawidłowa zawartość XElement i XDocument](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="90fbc-134">For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-135">Poniższy przykład tworzy dokument, a następnie dodaje do niego komentarz i elementu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-135">The following example creates a document, and then adds a comment and an element to it.</span></span> <span data-ttu-id="90fbc-136">Go następnie Redaguj innego dokumentu przy użyciu wyników zapytania.</span><span class="sxs-lookup"><span data-stu-id="90fbc-136">It then composes another document using the results of a query.</span></span>  
  
```csharp  
XDocument srcTree = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        new XElement("Child1", "data1"),  
        new XElement("Child2", "data2"),  
        new XElement("Child3", "data3"),  
        new XElement("Child2", "data4"),  
        new XElement("Info5", "info5"),  
        new XElement("Info6", "info6"),  
        new XElement("Info7", "info7"),  
        new XElement("Info8", "info8")  
    )  
);  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        from el in srcTree.Element("Root").Elements()  
        where ((string)el).StartsWith("data")  
        select el  
    )  
);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim srcTree As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <Child1>data1</Child1>  
            <Child2>data2</Child2>  
            <Child3>data3</Child3>  
            <Child2>data4</Child2>  
            <Info5>info5</Info5>  
            <Info6>info6</Info6>  
            <Info7>info7</Info7>  
            <Info8>info8</Info8>  
        </Root>  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <%= From el In srcTree.<Root>.Elements _  
                Where CStr(el).StartsWith("data") _  
                Select el %>  
        </Root>  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="90fbc-137">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-137">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment-->  
<Root>  
  <Child1>data1</Child1>  
  <Child2>data2</Child2>  
  <Child3>data3</Child3>  
  <Child2>data4</Child2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-138">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-138">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
          <span data-ttu-id="90fbc-139">XDocument, klasa — Przegląd</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-139">XDocument Class Overview</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XDocument (System.Xml.Linq.XDocument other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XDocument other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XDocument(System::Xml::Linq::XDocument ^ other);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XDocument : System.Xml.Linq.XDocument -&gt; System.Xml.Linq.XDocument" Usage="new System.Xml.Linq.XDocument other" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XDocument" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="90fbc-140">
            <see cref="T:System.Xml.Linq.XDocument" /> Obiektów, które mają zostać skopiowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-140">The <see cref="T:System.Xml.Linq.XDocument" /> object that will be copied.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-141">Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Linq.XDocument" /> klasy z istniejącego <see cref="T:System.Xml.Linq.XDocument" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-141">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class from an existing <see cref="T:System.Xml.Linq.XDocument" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-142">Możesz użyć tego konstruktora się głęboką kopię <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-142">You use this constructor to make a deep copy of an <xref:System.Xml.Linq.XDocument>.</span></span>  
  
 <span data-ttu-id="90fbc-143">Ten konstruktor przechodzi przez wszystkie węzły i atrybutów w dokumencie, określone w `other` parametru i tworzy kopie wszystkich węzłów, jak on składa nowo utworzonym <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-143">This constructor traverses all nodes and attributes in the document specified in the `other` parameter, and creates copies of all nodes as it assembles the newly initialized <xref:System.Xml.Linq.XDocument>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-144">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-144">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
          <span data-ttu-id="90fbc-145">XDocument, klasa — Przegląd</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-145">XDocument Class Overview</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XDocument (System.Xml.Linq.XDeclaration declaration, params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XDeclaration declaration, object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (declaration As XDeclaration, ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XDocument(System::Xml::Linq::XDeclaration ^ declaration, ... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XDocument : System.Xml.Linq.XDeclaration * obj[] -&gt; System.Xml.Linq.XDocument" Usage="new System.Xml.Linq.XDocument (declaration, content)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="declaration" Type="System.Xml.Linq.XDeclaration" />
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declaration">
          <span data-ttu-id="90fbc-146">
            <see cref="T:System.Xml.Linq.XDeclaration" /> Dla dokumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-146">An <see cref="T:System.Xml.Linq.XDeclaration" /> for the document.</span>
          </span>
        </param>
        <param name="content">
          <span data-ttu-id="90fbc-147">Zawartość dokumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-147">The content of the document.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-148">Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Linq.XDocument" /> klasy z określonym <see cref="T:System.Xml.Linq.XDeclaration" /> i zawartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-148">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class with the specified <see cref="T:System.Xml.Linq.XDeclaration" /> and content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-149">Nie są wiele scenariuszy, w których konieczna utworzyć <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-149">There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>.</span></span> <span data-ttu-id="90fbc-150">Zamiast tego można utworzyć zwykle z drzewa XML z <xref:System.Xml.Linq.XElement> węzła głównego.</span><span class="sxs-lookup"><span data-stu-id="90fbc-150">Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node.</span></span> <span data-ttu-id="90fbc-151">Jeśli nie masz określonych wymagań można utworzyć dokumentu, (na przykład dlatego, że należy utworzyć instrukcje przetwarzania i komentarze na najwyższym poziomie lub masz obsługę typów dokumentów), jest często bardziej wygodny w użyciu <xref:System.Xml.Linq.XElement> jako węzeł główny.</span><span class="sxs-lookup"><span data-stu-id="90fbc-151">Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.</span></span>  
  
 <span data-ttu-id="90fbc-152">Aby uzyskać szczegółowe informacje o zawartości <xref:System.Xml.Linq.XDocument>, zobacz [obiektów Nieprawidłowa zawartość XElement i XDocument](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="90fbc-152">For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-153">W poniższym przykładzie użyto tego konstruktora, aby utworzyć dokument.</span><span class="sxs-lookup"><span data-stu-id="90fbc-153">The following example uses this constructor to create a document.</span></span>  
  
```csharp  
XDocument srcTree = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        new XElement("Child1", "data1"),  
        new XElement("Child2", "data2"),  
        new XElement("Child3", "data3"),  
        new XElement("Child2", "data4"),  
        new XElement("Info5", "info5"),  
        new XElement("Info6", "info6"),  
        new XElement("Info7", "info7"),  
        new XElement("Info8", "info8")  
    )  
);  
  
XDocument doc = new XDocument(  
    new XDeclaration("1.0", "utf-8", "yes"),  
    new XComment("This is a new comment"),  
    new XElement("Root",  
        from el in srcTree.Element("Root").Elements()  
        where ((string)el).StartsWith("data")  
        select el  
    )  
);  
doc.Save("Test.xml");  
Console.WriteLine(File.ReadAllText("Test.xml"));  
```  
  
```vb  
Dim srcTree As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <Child1>data1</Child1>  
            <Child2>data2</Child2>  
            <Child3>data3</Child3>  
            <Child2>data4</Child2>  
            <Info5>info5</Info5>  
            <Info6>info6</Info6>  
            <Info7>info7</Info7>  
            <Info8>info8</Info8>  
        </Root>  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a new comment-->  
        <Root>  
            <%= From el In srcTree.<Root>.Elements _  
                Where CStr(el).StartsWith("data") _  
                Select el %>  
        </Root>  
doc.Save("Test.xml")  
Console.WriteLine(File.ReadAllText("Test.xml"))  
```  
  
 <span data-ttu-id="90fbc-154">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-154">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-8" standalone="yes"?>  
<!--This is a new comment-->  
<Root>  
  <Child1>data1</Child1>  
  <Child2>data2</Child2>  
  <Child3>data3</Child3>  
  <Child2>data4</Child2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-155">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-155">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
          <span data-ttu-id="90fbc-156">XDocument, klasa — Przegląd</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-156">XDocument Class Overview</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Declaration">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XDeclaration Declaration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XDeclaration Declaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocument.Declaration" />
      <MemberSignature Language="VB.NET" Value="Public Property Declaration As XDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XDeclaration ^ Declaration { System::Xml::Linq::XDeclaration ^ get(); void set(System::Xml::Linq::XDeclaration ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Declaration : System.Xml.Linq.XDeclaration with get, set" Usage="System.Xml.Linq.XDocument.Declaration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90fbc-157">Pobiera lub ustawia deklaracji XML dla tego dokumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-157">Gets or sets the XML declaration for this document.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90fbc-158">
            <see cref="T:System.Xml.Linq.XDeclaration" /> Zawierający deklaracji XML dla tego dokumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-158">An <see cref="T:System.Xml.Linq.XDeclaration" /> that contains the XML declaration for this document.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-159">Czasami trzeba utworzyć deklaracji XML dla dokumentu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-159">Sometimes you have to create an XML declaration for a document.</span></span> <span data-ttu-id="90fbc-160">Jeśli chcesz wskazać, że dokument jest autonomiczna, należy użyć tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="90fbc-160">If you want to indicate that a document is standalone, you must use this property.</span></span> <span data-ttu-id="90fbc-161">Jeśli chcesz kodować dokumentu z kodowaniem innych niż utf-8, można określić kodowania za pomocą <xref:System.Xml.Linq.XDeclaration>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-161">If you want to encode your document with an encoding other than utf-8, you can specify an encoding through the <xref:System.Xml.Linq.XDeclaration>.</span></span> <span data-ttu-id="90fbc-162">Innym podejściem do kodowania dokumentu jest określić kodowanie na <xref:System.Xml.XmlWriter> , były przekazywane do programu LINQ to XML do zapisu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-162">Another approach for encoding a document is to specify the encoding on an <xref:System.Xml.XmlWriter> that you pass to LINQ to XML for writing.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-163">W poniższym przykładzie użyto tej właściwości, aby pobrać deklaracji XML dokumentu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-163">The following example uses this property to retrieve the XML declaration of a document.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XDeclaration("1.0", "utf-8", "yes"),  
    new XComment("This is a comment"),  
    new XElement("Root", "content")  
);  
  
Console.WriteLine(doc.Declaration);  
```  
  
```vb  
Dim doc As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>content</Root>  
  
Console.WriteLine(doc.Declaration)  
```  
  
 <span data-ttu-id="90fbc-164">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-164">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-8" standalone="yes"?>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Linq.XDeclaration" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-165">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-165">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="90fbc-166">Porady: odczytywanie i zapisywanie zakodowanego dokumentu</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-166">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="DocumentType">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XDocumentType DocumentType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XDocumentType DocumentType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocument.DocumentType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DocumentType As XDocumentType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XDocumentType ^ DocumentType { System::Xml::Linq::XDocumentType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DocumentType : System.Xml.Linq.XDocumentType" Usage="System.Xml.Linq.XDocument.DocumentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocumentType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90fbc-167">Pobiera definicji typu dokumentu (DTD) dla tego dokumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-167">Gets the Document Type Definition (DTD) for this document.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90fbc-168">Element <see cref="T:System.Xml.Linq.XDocumentType" /> zawierający DTD dla tego dokumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-168">A <see cref="T:System.Xml.Linq.XDocumentType" /> that contains the DTD for this document.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] <span data-ttu-id="90fbc-169">udostępnia ograniczoną obsługę definicji DTD.</span><span class="sxs-lookup"><span data-stu-id="90fbc-169">provides limited support for DTDs.</span></span>  
  
 <span data-ttu-id="90fbc-170">Możesz wypełnić drzewa XML z dokumentu XML, który zawiera DTD.</span><span class="sxs-lookup"><span data-stu-id="90fbc-170">You can populate an XML tree with an XML document that contains a DTD.</span></span> <span data-ttu-id="90fbc-171">Drzewo składni XML będzie zawierała <xref:System.Xml.Linq.XDocument.DocumentType%2A> węzła.</span><span class="sxs-lookup"><span data-stu-id="90fbc-171">The XML tree will then contain a <xref:System.Xml.Linq.XDocument.DocumentType%2A> node.</span></span> <span data-ttu-id="90fbc-172">Podczas serializacji lub zapisać drzewa DTD, również można serializować.</span><span class="sxs-lookup"><span data-stu-id="90fbc-172">When you serialize or save the tree, the DTD will also be serialized.</span></span> [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] <span data-ttu-id="90fbc-173">rozwinie żadnych jednostek w DTD.</span><span class="sxs-lookup"><span data-stu-id="90fbc-173">will expand any entities in the DTD.</span></span> <span data-ttu-id="90fbc-174">Odwołania do jednostek nie są zapisywane podczas serializacji lub zapisać drzewa XML; Zamiast tego węzły są zapisywane przy użyciu odwołań do jednostek zastąpione tekstem jednostki.</span><span class="sxs-lookup"><span data-stu-id="90fbc-174">When you serialize or save the XML tree, the entity references are not saved; instead, the nodes are saved with the entity references replaced by the text of the entity.</span></span>  
  
 <span data-ttu-id="90fbc-175">Jeśli DTD zawiera atrybuty domyślnych, atrybuty są tworzone w drzewie XML jako zwykłe atrybuty.</span><span class="sxs-lookup"><span data-stu-id="90fbc-175">If the DTD contains default attributes, the attributes are created in the XML tree as ordinary attributes.</span></span>  
  
 <span data-ttu-id="90fbc-176">Domyślnie [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] nie można zweryfikować dokument oparty na jego DTD.</span><span class="sxs-lookup"><span data-stu-id="90fbc-176">By default, [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] does not validate a document based on its DTD.</span></span> <span data-ttu-id="90fbc-177">Aby sprawdzić poprawność dokument oparty na DTD, należy utworzyć <xref:System.Xml.XmlReader> , zostanie przeprowadzona Weryfikacja oparte na DTD, a następnie utworzyć drzewa XML z <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-177">To validate a document based on a DTD, create an <xref:System.Xml.XmlReader> that will validate based on a DTD, and then create an XML tree from the <xref:System.Xml.XmlReader>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-178">Poniższy przykład tworzy dokument, który zawiera <xref:System.Xml.Linq.XDocumentType>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-178">The following example creates a document that contains an <xref:System.Xml.Linq.XDocumentType>.</span></span>  
  
 <span data-ttu-id="90fbc-179">Visual Basic nie obsługuje typów dokumentów w literałach XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-179">Visual Basic does not support document types within XML literals.</span></span> <span data-ttu-id="90fbc-180">Jednak jest możliwe utworzenie dokumentu, który zawiera typ dokumentu, najpierw tworząc dokument przy użyciu literałów XML, a następnie tworzenie i dodawanie <xref:System.Xml.Linq.XDocumentType> węzła w odpowiednim miejscu w drzewie XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-180">However, it is possible to create a document that contains a document type by first creating the document using XML literals, and then creating and adding an <xref:System.Xml.Linq.XDocumentType> node in the appropriate place in the XML tree.</span></span>  
  
```csharp  
string internalSubset = @"<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>";  
  
string target = "xml-stylesheet";  
string data = "href='mystyle.css' title='Compact' type='text/css'";  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment."),  
    new XProcessingInstruction(target, data),  
    new XDocumentType("Pubs", null, null, internalSubset),  
    new XElement("Pubs",   
        new XElement("Book",  
            new XElement("Title", "Artifacts of Roman Civilization"),  
            new XElement("Author", "Moreno, Jordao")  
        ),  
        new XElement("Book",  
            new XElement("Title", "Midieval Tools and Implements"),  
            new XElement("Author", "Gazit, Inbar")  
        )  
    ),  
    new XComment("This is another comment.")  
);  
doc.Declaration = new XDeclaration("1.0", "utf-8", "true");  
Console.WriteLine(doc);  
  
doc.Save("test.xml");  
```  
  
```vb  
Dim internalSubset = _  
        "<!ELEMENT Pubs (Book+)>" & Environment.NewLine & _  
        "<!ELEMENT Book (Title, Author)>" & Environment.NewLine & _  
        "<!ELEMENT Title (#PCDATA)>" & Environment.NewLine & _  
        "<!ELEMENT Author (#PCDATA)>"  
  
Dim doc As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
    <!--This is a comment.-->  
    <?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>  
    <Pubs>  
        <Book>  
            <Title>Artifacts of Roman Civilization</Title>  
            <Author>Moreno, Jordao</Author>  
        </Book>  
        <Book>  
            <Title>Midieval Tools and Implements</Title>  
            <Author>Gazit, Inbar</Author>  
        </Book>  
    </Pubs>  
    <!--This is another comment.-->  
  
doc.Nodes().Skip(1).First().AddAfterSelf(New XDocumentType("Pubs", Nothing, Nothing, internalSubset))  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="90fbc-181">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-181">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment.-->  
<?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>  
<!DOCTYPE Pubs [<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>]>  
<Pubs>  
  <Book>  
    <Title>Artifacts of Roman Civilization</Title>  
    <Author>Moreno, Jordao</Author>  
  </Book>  
  <Book>  
    <Title>Midieval Tools and Implements</Title>  
    <Author>Gazit, Inbar</Author>  
  </Book>  
</Pubs>  
<!--This is another comment.-->  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Linq.XDocumentType" />
        <altmember cref="P:System.Xml.Linq.XDocument.NodeType" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-182">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-182">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90fbc-183">Tworzy nową <see cref="T:System.Xml.Linq.XDocument" /> z pliku określonego przez identyfikator URI, z <see cref="T:System.IO.TextReader" />, lub z <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-183">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file specified by a URI, from an <see cref="T:System.IO.TextReader" />, or from an <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-184">Przy użyciu jednego z przeciążeń z tej metody, możesz załadować <xref:System.Xml.Linq.XDocument> z pliku, <xref:System.IO.TextReader>, lub <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-184">Using one of the overloads of this method, you can load an <xref:System.Xml.Linq.XDocument> from a file, a <xref:System.IO.TextReader>, or an <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="90fbc-185">Aby utworzyć <xref:System.Xml.Linq.XDocument> na ciąg, który zawiera kod XML, użyj <xref:System.Xml.Linq.XDocument.Parse%2A>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-185">To create an <xref:System.Xml.Linq.XDocument> from a string that contains XML, use <xref:System.Xml.Linq.XDocument.Parse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-186">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-186">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="90fbc-187">Podczas badania elementu XDocument a. Podczas badania XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-187">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="90fbc-188">Strumień, który zawiera dane XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-188">The stream that contains the XML data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-189">Tworzy nową <see cref="T:System.Xml.Linq.XDocument" /> wystąpienia przy użyciu określonego strumienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-189">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> instance by using the specified stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90fbc-190">
            <see cref="T:System.Xml.Linq.XDocument" /> Obiekt, który odczytuje dane zawarte w strumieniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-190">An <see cref="T:System.Xml.Linq.XDocument" /> object that reads the data that is contained in the stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-191">Pozwala określić opcje ładowania, należy użyć <xref:System.Xml.Linq.XDocument.Load%2A> przeciążenia przyjmującego <xref:System.Xml.Linq.LoadOptions> jako parametr.</span><span class="sxs-lookup"><span data-stu-id="90fbc-191">If you want to control load options, use the <xref:System.Xml.Linq.XDocument.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span>  
  
 <span data-ttu-id="90fbc-192">Podczas ładowania funkcji LINQ to XML oparto na <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-192">The loading functionality of LINQ to XML is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="90fbc-193">W związku z tym, może przechwycić wyjątków, które są generowane przez <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> przeciążenia metody i <xref:System.Xml.XmlReader> metod, które odczytują i analizy dokumentu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-193">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="90fbc-194">Jeśli trzeba zmodyfikować <xref:System.Xml.XmlReaderSettings>, wykonaj następujące kroki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-194">If you have to modify <xref:System.Xml.XmlReaderSettings>, follow these steps:</span></span>  
  
1.  <span data-ttu-id="90fbc-195">Tworzenie <xref:System.Xml.XmlReader> , wywołując jedną z <xref:System.Xml.XmlReader.Create%2A> przeciążeń przybierają tego <xref:System.Xml.XmlReaderSettings> jako parametr.</span><span class="sxs-lookup"><span data-stu-id="90fbc-195">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="90fbc-196">Przekaż <xref:System.Xml.XmlReader> do jednego z <xref:System.Xml.Linq.XDocument.Load%2A> przeciążenia <xref:System.Xml.Linq.XDocument> przyjmującej <xref:System.Xml.XmlReader> jako parametr.</span><span class="sxs-lookup"><span data-stu-id="90fbc-196">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XDocument.Load%2A> overloads of <xref:System.Xml.Linq.XDocument> that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.TextReader -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load textReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader">
          <span data-ttu-id="90fbc-197">A <see cref="T:System.IO.TextReader" /> zawierający zawartość <see cref="T:System.Xml.Linq.XDocument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-197">A <see cref="T:System.IO.TextReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-198">Tworzy nową <see cref="T:System.Xml.Linq.XDocument" /> z <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-198">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90fbc-199">
            <see cref="T:System.Xml.Linq.XDocument" /> Zawierający zawartość określonego <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-199">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-200">LINQ do XML firmy podczas ładowania funkcji jest oparty na <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-200">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="90fbc-201">W związku z tym, może przechwycić wyjątków, które są generowane przez <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> przeciążenia metody i <xref:System.Xml.XmlReader> metod, które odczytują i analizy dokumentu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-201">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-202">Poniższy przykład tworzy dokument z <xref:System.IO.StringReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-202">The following example creates a document from a <xref:System.IO.StringReader>.</span></span>  
  
```csharp  
TextReader tr = new StringReader("<Root>Content</Root>");  
XDocument doc = XDocument.Load(tr);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim tr As TextReader = New StringReader("<Root>Content</Root>")  
Dim doc As XDocument = XDocument.Load(tr)  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="90fbc-203">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-203">This example produces the following output:</span></span>  
  
```xml  
<Root>Content</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-204">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-204">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="90fbc-205">Podczas badania elementu XDocument a. Podczas badania XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-205">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (string uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(string uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::String ^ uri);" />
      <MemberSignature Language="F#" Value="static member Load : string -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">
          <span data-ttu-id="90fbc-206">Ciąg identyfikatora URI, który odwołuje się do pliku do załadowania do nowego <see cref="T:System.Xml.Linq.XDocument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-206">A URI string that references the file to load into a new <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-207">Tworzy nową <see cref="T:System.Xml.Linq.XDocument" /> z pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-207">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90fbc-208">
            <see cref="T:System.Xml.Linq.XDocument" /> Zawierający zawartość określonego pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-208">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-209">Ta metoda używa podstawowej <xref:System.Xml.XmlReader> do odczytania pliku XML do drzewa XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-209">This method uses an underlying <xref:System.Xml.XmlReader> to read the XML into an XML tree.</span></span>  
  
 <span data-ttu-id="90fbc-210">Użyj <xref:System.Xml.Linq.XDocument.Parse%2A> utworzyć <xref:System.Xml.Linq.XDocument> z ciągu, który zawiera kod XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-210">Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="90fbc-211">LINQ do XML firmy podczas ładowania funkcji jest oparty na <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-211">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="90fbc-212">W związku z tym, może przechwycić wyjątków, które są generowane przez <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> przeciążenia metody i <xref:System.Xml.XmlReader> metod, które odczytują i analizy dokumentu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-212">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-213">Poniższy przykład przedstawia sposób ładowania <xref:System.Xml.Linq.XDocument> z pliku.</span><span class="sxs-lookup"><span data-stu-id="90fbc-213">The following example shows how to load an <xref:System.Xml.Linq.XDocument> from a file.</span></span>  
  
 <span data-ttu-id="90fbc-214">W tym przykładzie użyto następujący dokument XML:</span><span class="sxs-lookup"><span data-stu-id="90fbc-214">This example uses the following XML document:</span></span>  
  
 [<span data-ttu-id="90fbc-215">Przykładowy plik XML: typowe zamówienie zakupu (LINQ to XML)</span><span class="sxs-lookup"><span data-stu-id="90fbc-215">Sample XML File: Typical Purchase Order (LINQ to XML)</span></span>](https://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)  
  
```csharp  
XDocument doc = XDocument.Load("PurchaseOrder.xml");  
Console.WriteLine(doc);  
```  
  
```vb  
Dim doc As XDocument = XDocument.Load("PurchaseOrder.xml")  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="90fbc-216">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-216">This example produces the following output:</span></span>  
  
```  
<PurchaseOrder PurchaseOrderNumber="99503" OrderDate="1999-10-20">  
  <Address Type="Shipping">  
    <Name>Ellen Adams</Name>  
    <Street>123 Maple Street</Street>  
    <City>Mill Valley</City>  
    <State>CA</State>  
    <Zip>10999</Zip>  
    <Country>USA</Country>  
  </Address>  
  <Address Type="Billing">  
    <Name>Tai Yee</Name>  
    <Street>8 Oak Avenue</Street>  
    <City>Old Town</City>  
    <State>PA</State>  
    <Zip>95819</Zip>  
    <Country>USA</Country>  
  </Address>  
  <DeliveryNotes>Please leave packages in shed by driveway.</DeliveryNotes>  
  <Items>  
    <Item PartNumber="872-AA">  
      <ProductName>Lawnmower</ProductName>  
      <Quantity>1</Quantity>  
      <USPrice>148.95</USPrice>  
      <Comment>Confirm this is electric</Comment>  
    </Item>  
    <Item PartNumber="926-AA">  
      <ProductName>Baby Monitor</ProductName>  
      <Quantity>2</Quantity>  
      <USPrice>39.98</USPrice>  
      <ShipDate>1999-05-21</ShipDate>  
    </Item>  
  </Items>  
</PurchaseOrder>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-217">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-217">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="90fbc-218">Podczas badania elementu XDocument a. Podczas badania XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-218">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="90fbc-219">A <see cref="T:System.Xml.XmlReader" /> zawierający zawartość <see cref="T:System.Xml.Linq.XDocument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-219">A <see cref="T:System.Xml.XmlReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-220">Tworzy nową <see cref="T:System.Xml.Linq.XDocument" /> z <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-220">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from an <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90fbc-221">
            <see cref="T:System.Xml.Linq.XDocument" /> Zawierający zawartość określonego <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-221">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-222">Jedno możliwe użycie tej metody jest tworzenie kopii dokumentów DOM w składniku LINQ to XML drzewa.</span><span class="sxs-lookup"><span data-stu-id="90fbc-222">One possible use for this method is to create a copy of a DOM document in a LINQ to XML tree.</span></span> <span data-ttu-id="90fbc-223">Aby to zrobić, należy utworzyć <xref:System.Xml.XmlNodeReader> z modelu DOM dokumentu, a następnie użyj <xref:System.Xml.XmlNodeReader> utworzyć <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-223">To do this, you create an <xref:System.Xml.XmlNodeReader> from a DOM document, and then use the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XDocument>.</span></span>  
  
 <span data-ttu-id="90fbc-224">LINQ do XML firmy podczas ładowania funkcji jest oparty na <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-224">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="90fbc-225">W związku z tym, może przechwycić wyjątków, które są generowane przez <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> przeciążenia metody i <xref:System.Xml.XmlReader> metod, które odczytują i analizy dokumentu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-225">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-226">Poniższy przykład tworzy dokument modelu DOM, tworzy <xref:System.Xml.XmlNodeReader> z dokumentu modelu DOM, tworzy <xref:System.Xml.Linq.XDocument> przy użyciu <xref:System.Xml.XmlNodeReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-226">The following example creates a DOM document, creates an <xref:System.Xml.XmlNodeReader> from the DOM document, creates an <xref:System.Xml.Linq.XDocument> using the <xref:System.Xml.XmlNodeReader>.</span></span>  
  
```csharp  
// Create a DOM document with some content.  
XmlDocument doc = new XmlDocument();  
XmlElement child = doc.CreateElement("Child");  
child.InnerText = "child contents";  
XmlElement root = doc.CreateElement("Root");  
root.AppendChild(child);  
doc.AppendChild(root);  
  
// create a reader and move to the content  
using (XmlNodeReader nodeReader = new XmlNodeReader(doc)) {  
    // the reader must be in the Interactive state in order to  
    // create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XDocument xRoot = XDocument.Load(nodeReader);  
    Console.WriteLine(xRoot);  
}  
```  
  
```vb  
' Create a DOM document with some content.  
Dim doc As XmlDocument = New XmlDocument()  
Dim child As XmlElement = doc.CreateElement("Child")  
child.InnerText = "child contents"  
Dim root As XmlElement = doc.CreateElement("Root")  
root.AppendChild(child)  
doc.AppendChild(root)  
  
' create a reader and move to the content  
Using nodeReader = New XmlNodeReader(doc)  
    ' the reader must be in the Interactive state in order to  
    ' create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XDocument = XDocument.Load(nodeReader)  
    Console.WriteLine(xRoot)  
End Using  
```  
  
 <span data-ttu-id="90fbc-227">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-227">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>child contents</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-228">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-228">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="90fbc-229">Podczas badania elementu XDocument a. Podczas badania XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-229">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.IO.Stream stream, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load (stream, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="90fbc-230">Strumień, z danymi XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-230">The stream containing the XML data.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="90fbc-231">A <see cref="T:System.Xml.Linq.LoadOptions" /> określająca, czy można załadować informacji o podstawowy identyfikator URI i linii.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-231">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-232">Tworzy nową <see cref="T:System.Xml.Linq.XDocument" /> wystąpienia, używając określonego strumienia, opcjonalnie zachowywanie białych znaków, ustawienie podstawowy identyfikator URI i zachowywanie informacji wiersza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-232">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90fbc-233">
            <see cref="T:System.Xml.Linq.XDocument" /> Obiekt, który odczytuje dane zawarte w strumieniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-233">An <see cref="T:System.Xml.Linq.XDocument" /> object that reads the data that is contained in the stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-234">Podczas ładowania funkcji LINQ to XML oparto na <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-234">The loading functionality of LINQ to XML is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="90fbc-235">W związku z tym, może przechwycić wyjątków, które są generowane przez <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> przeciążenia metody i <xref:System.Xml.XmlReader> metod, które odczytują i analizy dokumentu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-235">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="90fbc-236">Jeśli trzeba zmodyfikować <xref:System.Xml.XmlReaderSettings>, wykonaj następujące kroki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-236">If you have to modify <xref:System.Xml.XmlReaderSettings>, follow these steps:</span></span>  
  
1.  <span data-ttu-id="90fbc-237">Tworzenie <xref:System.Xml.XmlReader> , wywołując jedną z <xref:System.Xml.XmlReader.Create%2A> przeciążenia, które przyjmuje <xref:System.Xml.XmlReaderSettings> jako parametr.</span><span class="sxs-lookup"><span data-stu-id="90fbc-237">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that takes <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="90fbc-238">Przekaż <xref:System.Xml.XmlReader> do jednego z <xref:System.Xml.Linq.XDocument.Load%2A> przeciążenia <xref:System.Xml.Linq.XDocument> przyjmującej <xref:System.Xml.XmlReader> jako parametr.</span><span class="sxs-lookup"><span data-stu-id="90fbc-238">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XDocument.Load%2A> overloads of <xref:System.Xml.Linq.XDocument> that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.TextReader * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load (textReader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="textReader">
          <span data-ttu-id="90fbc-239">A <see cref="T:System.IO.TextReader" /> zawierający zawartość <see cref="T:System.Xml.Linq.XDocument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-239">A <see cref="T:System.IO.TextReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="90fbc-240">Element <see cref="T:System.Xml.Linq.LoadOptions" /> , który określa zachowania biały znak oraz czy można załadować informacji o podstawowy identyfikator URI i linii.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-240">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-241">Tworzy nową <see cref="T:System.Xml.Linq.XDocument" /> z <see cref="T:System.IO.TextReader" />, opcjonalnie zachowywanie białych znaków, ustawienie podstawowy identyfikator URI i zachowywanie informacji wiersza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-241">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90fbc-242">
            <see cref="T:System.Xml.Linq.XDocument" /> Zawierający plik XML, który został odczytany z określonego <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-242">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-243">Jeśli źródła XML z wcięciami, ustawienie <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> znacznik w `options` powoduje, że czytnik do odczytu wszystkich biały znak w źródle XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-243">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="90fbc-244">Węzły typu <xref:System.Xml.Linq.XText> są tworzone dla biały znak znaczące i nieistotne.</span><span class="sxs-lookup"><span data-stu-id="90fbc-244">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="90fbc-245">Jeśli źródła XML z wcięciami, to ustawienie nie zostanie <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> znacznik w `options` powoduje, że czytelnik Ignoruj wszystkich nieważny biały znak w źródle XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-245">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="90fbc-246">Drzewa XML została utworzona bez wszystkie węzły tekstowe dla nieważny biały znak.</span><span class="sxs-lookup"><span data-stu-id="90fbc-246">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="90fbc-247">Jeśli źródła XML nie jest w pozycji wcięcia, ustawienie <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> znacznik w `options` nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-247">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="90fbc-248">Istotnych białych nadal są zachowywane, a nie ma żadnych zakresów nieważny biały znak, który może powodować tworzenie więcej węzły tekstowe białe miejsca.</span><span class="sxs-lookup"><span data-stu-id="90fbc-248">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="90fbc-249">Aby uzyskać więcej informacji, zobacz [zachowania biały znak podczas ładowania lub analizowania kodu XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) i [zachowania biały znak podczas serializowania](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="90fbc-249">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="90fbc-250">Użyj <xref:System.Xml.Linq.XDocument.Parse%2A> utworzyć <xref:System.Xml.Linq.XElement> z ciągu, który zawiera kod XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-250">Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="90fbc-251">Ustawienie <xref:System.Xml.Linq.LoadOptions.SetBaseUri> jest nieprawidłowa, podczas ładowania z <xref:System.IO.TextReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-251">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> is not valid when loading from a <xref:System.IO.TextReader>.</span></span>  
  
 <span data-ttu-id="90fbc-252">Występuje spadek wydajności, jeśli ustawisz <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flagi.</span><span class="sxs-lookup"><span data-stu-id="90fbc-252">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="90fbc-253">Informacje wiersza jest dokładna natychmiast po podczas ładowania dokumentu XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-253">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="90fbc-254">Jeśli zmodyfikujesz drzewa XML po załadowaniu dokumentu informacje wiersza może stać się całkowicie nieprzydatna.</span><span class="sxs-lookup"><span data-stu-id="90fbc-254">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="90fbc-255">LINQ do XML firmy podczas ładowania funkcji jest oparty na <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-255">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="90fbc-256">W związku z tym, może przechwycić wyjątków, które są generowane przez <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> przeciążenia metody i <xref:System.Xml.XmlReader> metod, które odczytują i analizy dokumentu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-256">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-257">Poniższy przykład tworzy dokument z <xref:System.IO.StringReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-257">The following example creates a document from a <xref:System.IO.StringReader>.</span></span>  
  
```csharp  
TextReader sr;  
int whiteSpaceNodes;  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XDocument xmlTree1 = XDocument.Load(sr, LoadOptions.None);  
sr.Close();  
whiteSpaceNodes = xmlTree1  
    .Element("Root")  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes);  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XDocument xmlTree2 = XDocument.Load(sr, LoadOptions.PreserveWhitespace);  
sr.Close();  
whiteSpaceNodes = xmlTree2  
    .Element("Root")  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes);  
```  
  
```vb  
Dim sr As TextReader  
Dim whiteSpaceNodes As Integer  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree1 As XDocument = XDocument.Load(sr, LoadOptions.None)  
sr.Close()  
whiteSpaceNodes = xmlTree1 _  
              .Element("Root") _  
              .DescendantNodesAndSelf() _  
              .OfType(Of XText)() _  
              .Where(Function(ByVal tNode As XNode) tNode. _  
                  ToString().Trim().Length = 0).Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree2 As XDocument = XDocument.Load(sr, LoadOptions.PreserveWhitespace)  
sr.Close()  
whiteSpaceNodes = xmlTree2 _  
              .Element("Root") _  
              .DescendantNodesAndSelf() _  
              .OfType(Of XText)() _  
              .Where(Function(ByVal tNode As XNode) tNode. _  
                  ToString().Trim().Length = 0).Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="90fbc-258">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-258">This example produces the following output:</span></span>  
  
```  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-259">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-259">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="90fbc-260">Podczas badania elementu XDocument a. Podczas badania XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-260">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (string uri, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(string uri, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String, options As LoadOptions) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::String ^ uri, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : string * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load (uri, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="uri">
          <span data-ttu-id="90fbc-261">Ciąg identyfikatora URI, który odwołuje się do pliku do załadowania do nowego <see cref="T:System.Xml.Linq.XDocument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-261">A URI string that references the file to load into a new <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="90fbc-262">Element <see cref="T:System.Xml.Linq.LoadOptions" /> , który określa zachowania biały znak oraz czy można załadować informacji o podstawowy identyfikator URI i linii.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-262">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-263">Tworzy nową <see cref="T:System.Xml.Linq.XDocument" /> z pliku, opcjonalnie zachowywanie białych znaków, ustawienie podstawowy identyfikator URI i zachowywanie informacji wiersza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-263">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90fbc-264">
            <see cref="T:System.Xml.Linq.XDocument" /> Zawierający zawartość określonego pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-264">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-265">Jeśli źródła XML z wcięciami, ustawienie <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> znacznik w `options` powoduje, że czytnik do odczytu wszystkich biały znak w źródle XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-265">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="90fbc-266">Węzły typu <xref:System.Xml.Linq.XText> są tworzone dla biały znak znaczące i nieistotne.</span><span class="sxs-lookup"><span data-stu-id="90fbc-266">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="90fbc-267">Jeśli źródła XML z wcięciami, to ustawienie nie zostanie <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> znacznik w `options` powoduje, że czytelnik Ignoruj wszystkich nieważny biały znak w źródle XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-267">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="90fbc-268">Drzewa XML została utworzona bez wszystkie węzły tekstowe dla nieważny biały znak.</span><span class="sxs-lookup"><span data-stu-id="90fbc-268">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="90fbc-269">Jeśli źródła XML nie jest w pozycji wcięcia, ustawienie <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> znacznik w `options` nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-269">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="90fbc-270">Istotnych białych nadal są zachowywane, a nie ma żadnych zakresów nieważny biały znak, który może powodować tworzenie więcej węzły tekstowe białe miejsca.</span><span class="sxs-lookup"><span data-stu-id="90fbc-270">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="90fbc-271">Aby uzyskać więcej informacji, zobacz [zachowania biały znak podczas ładowania lub analizowania kodu XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) i [zachowania biały znak podczas serializowania](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="90fbc-271">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="90fbc-272">Użyj <xref:System.Xml.Linq.XDocument.Parse%2A> utworzyć <xref:System.Xml.Linq.XDocument> z ciągu, który zawiera kod XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-272">Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="90fbc-273">Występuje spadek wydajności, jeśli ustawisz <xref:System.Xml.Linq.LoadOptions.SetBaseUri> i <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span><span class="sxs-lookup"><span data-stu-id="90fbc-273">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags.</span></span>  
  
 <span data-ttu-id="90fbc-274">Podstawowy identyfikator URI i informacje wiersza są dokładne natychmiast po podczas ładowania dokumentu XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-274">The base URI and the line information are accurate immediately after loading the XML document.</span></span> <span data-ttu-id="90fbc-275">Jeśli zmodyfikujesz drzewa XML po załadowaniu dokumentu, informacje na temat podstawowy identyfikator URI i wiersza może stać się ta nie ma znaczenia.</span><span class="sxs-lookup"><span data-stu-id="90fbc-275">If you modify the XML tree after loading the document, the base URI and line information may become meaningless.</span></span>  
  
 <span data-ttu-id="90fbc-276">LINQ do XML firmy podczas ładowania funkcji jest oparty na <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-276">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="90fbc-277">W związku z tym, może przechwycić wyjątków, które są generowane przez <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> przeciążenia metody i <xref:System.Xml.XmlReader> metod, które odczytują i analizy dokumentu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-277">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-278">Poniższy przykład przedstawia sposób ładowania <xref:System.Xml.Linq.XDocument> z pliku.</span><span class="sxs-lookup"><span data-stu-id="90fbc-278">The following example shows how to load an <xref:System.Xml.Linq.XDocument> from a file.</span></span>  
  
 <span data-ttu-id="90fbc-279">W tym przykładzie użyto następujący dokument XML:</span><span class="sxs-lookup"><span data-stu-id="90fbc-279">This example uses the following XML document:</span></span>  
  
 [<span data-ttu-id="90fbc-280">Przykładowy plik XML: typowe zamówienie zakupu (LINQ to XML)</span><span class="sxs-lookup"><span data-stu-id="90fbc-280">Sample XML File: Typical Purchase Order (LINQ to XML)</span></span>](https://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)  
  
```csharp  
XDocument doc1 = XDocument.Load("PurchaseOrder.xml", LoadOptions.None);  
Console.WriteLine("nodes if not preserving whitespace: {0}", doc1.DescendantNodes().Count());  
  
XDocument doc2 = XDocument.Load("PurchaseOrder.xml", LoadOptions.PreserveWhitespace);  
Console.WriteLine("nodes if preserving whitespace: {0}", doc2.DescendantNodes().Count());  
```  
  
```vb  
Dim doc1 As XDocument = XDocument.Load("PurchaseOrder.xml", LoadOptions.None)  
Console.WriteLine("nodes if not preserving whitespace: {0}", doc1.DescendantNodes().Count())  
  
Dim doc2 As XDocument = XDocument.Load("PurchaseOrder.xml", LoadOptions.PreserveWhitespace)  
Console.WriteLine("nodes if preserving whitespace: {0}", doc2.DescendantNodes().Count())  
```  
  
 <span data-ttu-id="90fbc-281">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-281">This example produces the following output:</span></span>  
  
```  
nodes if not preserving whitespace: 48  
nodes if preserving whitespace: 82  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-282">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-282">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="90fbc-283">Podczas badania elementu XDocument a. Podczas badania XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-283">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader, options As LoadOptions) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="90fbc-284">A <see cref="T:System.Xml.XmlReader" /> , będzie można odczytać zawartości <see cref="T:System.Xml.Linq.XDocument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-284">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="90fbc-285">A <see cref="T:System.Xml.Linq.LoadOptions" /> określająca, czy można załadować informacji o podstawowy identyfikator URI i linii.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-285">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-286">Ładunki <see cref="T:System.Xml.Linq.XDocument" /> z <see cref="T:System.Xml.XmlReader" />, opcjonalnie ustawienie podstawowy identyfikator URI i zachowywanie informacji wiersza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-286">Loads an <see cref="T:System.Xml.Linq.XDocument" /> from an <see cref="T:System.Xml.XmlReader" />, optionally setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90fbc-287">
            <see cref="T:System.Xml.Linq.XDocument" /> Zawierający plik XML, który został odczytany z określonego <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-287">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-288">Tworząc <xref:System.Xml.XmlNodeReader> z modelu DOM dokumentu, a następnie za pomocą <xref:System.Xml.XmlNodeReader> utworzyć <xref:System.Xml.Linq.XElement>, ta metoda umożliwia tworzenie kopii dokumentów DOM w składniku LINQ to XML drzewa.</span><span class="sxs-lookup"><span data-stu-id="90fbc-288">By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</span></span>  
  
 <span data-ttu-id="90fbc-289">Użyj <xref:System.Xml.Linq.XDocument.Parse%2A> utworzyć <xref:System.Xml.Linq.XDocument> z ciągu, który zawiera kod XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-289">Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="90fbc-290">Ustawienie <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> jest nieprawidłowa, podczas ładowania z <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-290">Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="90fbc-291"><xref:System.Xml.XmlReader> Zostanie skonfigurowany do obu odczytu odstępu, czy nie.</span><span class="sxs-lookup"><span data-stu-id="90fbc-291">The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not.</span></span> <span data-ttu-id="90fbc-292">LINQ do drzewa XML zostanie wypełniony węzły odstępu, powierzchnie czytnika.</span><span class="sxs-lookup"><span data-stu-id="90fbc-292">The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces.</span></span> <span data-ttu-id="90fbc-293">Jest to zachowanie, niezależnie od tego, czy <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> jest ustawiony lub nie.</span><span class="sxs-lookup"><span data-stu-id="90fbc-293">This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.</span></span>  
  
 <span data-ttu-id="90fbc-294"><xref:System.Xml.XmlReader> Lub nie może być prawidłowy podstawowy identyfikator URI.</span><span class="sxs-lookup"><span data-stu-id="90fbc-294">The <xref:System.Xml.XmlReader> may have a valid base URI or not.</span></span> <span data-ttu-id="90fbc-295">Jeśli ustawisz <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, podstawowy identyfikator URI zostanie ustawiona w drzewie XML z podstawowego identyfikatora URI, który jest zgłaszany przez <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-295">If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="90fbc-296"><xref:System.Xml.XmlReader> Może mieć prawidłowe informacje, czy nie.</span><span class="sxs-lookup"><span data-stu-id="90fbc-296">The <xref:System.Xml.XmlReader> may have a valid line information or not.</span></span> <span data-ttu-id="90fbc-297">Jeśli ustawisz <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, informacje wiersza zostaną ustawione w drzewie XML z informacje wiersza, który jest zgłaszany przez <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-297">If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="90fbc-298">Występuje spadek wydajności, jeśli ustawisz <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flagi.</span><span class="sxs-lookup"><span data-stu-id="90fbc-298">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="90fbc-299">Informacje wiersza jest dokładna natychmiast po podczas ładowania dokumentu XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-299">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="90fbc-300">Jeśli zmodyfikujesz drzewa XML po załadowaniu dokumentu informacje wiersza może stać się całkowicie nieprzydatna.</span><span class="sxs-lookup"><span data-stu-id="90fbc-300">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="90fbc-301">LINQ do XML firmy podczas ładowania funkcji jest oparty na <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-301">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="90fbc-302">W związku z tym, może przechwycić wyjątków, które są generowane przez <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> przeciążenia metody i <xref:System.Xml.XmlReader> metod, które odczytują i analizy dokumentu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-302">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-303">Poniższy przykład ładuje informacje wiersza, który ładuje z <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-303">The following example loads the line information that it loads from the <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="90fbc-304">Go następnie wyświetla informacje wiersza.</span><span class="sxs-lookup"><span data-stu-id="90fbc-304">It then prints the line information.</span></span>  
  
```csharp  
string markup =  
@"<Root>  
    <Child>  
        <GrandChild/>  
    </Child>  
</Root>";  
  
// Create a reader and move to the content.  
using (XmlReader nodeReader = XmlReader.Create(new StringReader(markup)))  
{  
    // the reader must be in the Interactive state in order to  
    // Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XDocument xRoot = XDocument.Load(nodeReader, LoadOptions.SetLineInfo);  
    Console.WriteLine("{0}{1}{2}",  
        "Element Name".PadRight(20),  
        "Line".PadRight(5),  
        "Position");  
    Console.WriteLine("{0}{1}{2}",  
        "------------".PadRight(20),  
        "----".PadRight(5),  
        "--------");  
    foreach (XElement e in xRoot.Elements("Root").DescendantsAndSelf())  
        Console.WriteLine("{0}{1}{2}",  
            ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
            ((IXmlLineInfo)e).LinePosition);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<Root>" & Environment.NewLine & _  
    "    <Child>" & Environment.NewLine & _  
    "        <GrandChild/>" & Environment.NewLine & _  
    "    </Child>" & Environment.NewLine & _  
    "</Root>"  
  
' Create a reader and move to the content.  
Using nodeReader As XmlReader = XmlReader.Create(New StringReader(markup))  
  
    ' The reader must be in the Interactive state in order to  
    ' create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XDocument = XDocument.Load(nodeReader, LoadOptions.SetLineInfo)  
    Console.WriteLine("{0}{1}{2}", _  
        "Element Name".PadRight(20), _  
        "Line".PadRight(5), _  
        "Position")  
    Console.WriteLine("{0}{1}{2}", _  
        "------------".PadRight(20), _  
        "----".PadRight(5), _  
        "--------")  
    For Each e As XElement In xRoot.Elements("Root").DescendantsAndSelf()  
        Console.WriteLine("{0}{1}{2}", _  
            ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString()).PadRight(20), _  
            (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
            (DirectCast(e, IXmlLineInfo)).LinePosition)  
    Next  
End Using  
```  
  
 <span data-ttu-id="90fbc-305">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-305">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    6  
    GrandChild      3    10  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-306">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-306">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="90fbc-307">Porady: odczytywanie i zapisywanie zakodowanego dokumentu</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-307">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt; LoadAsync (System.IO.Stream stream, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XDocument&gt; LoadAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XDocument ^&gt; ^ LoadAsync(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.IO.Stream * System.Xml.Linq.LoadOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;" Usage="System.Xml.Linq.XDocument.LoadAsync (stream, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt; LoadAsync (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XDocument&gt; LoadAsync(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XDocument ^&gt; ^ LoadAsync(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.IO.TextReader * System.Xml.Linq.LoadOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;" Usage="System.Xml.Linq.XDocument.LoadAsync (textReader, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="textReader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt; LoadAsync (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XDocument&gt; LoadAsync(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XDocument ^&gt; ^ LoadAsync(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.Xml.XmlReader * System.Xml.Linq.LoadOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;" Usage="System.Xml.Linq.XDocument.LoadAsync (reader, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocument.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.Linq.XDocument.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90fbc-308">Pobiera typ węzła dla tego węzła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-308">Gets the node type for this node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90fbc-309">Typ węzła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-309">The node type.</span>
          </span>
          <span data-ttu-id="90fbc-310">Aby uzyskać <see cref="T:System.Xml.Linq.XDocument" /> obiektów, ta wartość jest <see cref="F:System.Xml.XmlNodeType.Document" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-310">For <see cref="T:System.Xml.Linq.XDocument" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Document" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-311">Ponieważ wszystkie klasy, która pochodzi od <xref:System.Xml.Linq.XObject> zawierają <xref:System.Xml.Linq.XObject.NodeType%2A> właściwości, można napisać kod, który działa w kolekcji obiektów, których typem każdego z nich jest podklasą <xref:System.Xml.Linq.XObject>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-311">Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of objects where the type of each is a subclass of <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="90fbc-312">Kod można przetestować dla typu węzła każdego obiektu w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="90fbc-312">Your code can then test for the node type of each object in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-313">Poniższy przykład pokazuje użycie tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="90fbc-313">The following example shows the use of this property.</span></span>  
  
```csharp  
// Note that this property uses XmlNodeType, which is in the System.Xml namespace.  
XDocument xmlTree = new XDocument(  
    new XDeclaration("1.0", "utf-8", "yes"),  
    new XElement("Root", "content")  
);  
Console.WriteLine(xmlTree.NodeType);  
```  
  
```vb  
' Note that this property uses XmlNodeType, which is in the System.Xml namespace.  
Dim xmlTree As XDocument = _  
    <?xml version='1.0' encoding='utf-8' standalone='yes'?>  
        <Root>content</Root>  
Console.WriteLine("{0}", xmlTree.NodeType)  
```  
  
 <span data-ttu-id="90fbc-314">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-314">This example produces the following output:</span></span>  
  
```  
Document  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNodeType" />
        <altmember cref="P:System.Xml.Linq.XDocument.DocumentType" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-315">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-315">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90fbc-316">Tworzy nową <see cref="T:System.Xml.Linq.XDocument" /> z ciągu, opcjonalnie zachowywanie białych znaków, ustawienie podstawowy identyfikator URI i zachowywanie informacji wiersza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-316">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-317">Metoda ta analizuje ciąg i tworzy drzewa XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-317">This method parses a string and creates an XML tree.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-318">Poniższy przykład tworzy ciąg, który zawiera kod XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-318">The following example creates a string that contains XML.</span></span> <span data-ttu-id="90fbc-319">Następnie analizuje ciąg do <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-319">It then parses the string into an <xref:System.Xml.Linq.XDocument>.</span></span>  
  
```csharp  
string str =  
@"<?xml version=""1.0""?>  
<!-- comment at the root level -->  
<Root>  
    <Child>Content</Child>  
</Root>";  
XDocument doc = XDocument.Parse(str);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim str As String = _  
    "<?xml version= '1.0'?>" & _  
    "<!-- comment at the root level -->" & _  
    "<Root>" & _  
    "  <Child>Content</Child>" & _  
    "</Root>"  
  
Dim doc As XDocument = XDocument.Parse(str)  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="90fbc-320">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-320">This example produces the following output:</span></span>  
  
```xml  
<!-- comment at the root level -->  
<Root>  
  <Child>Content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-321">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-321">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/8bdfdca0-6738-47a4-af3b-6d36d85e4d28">
          <span data-ttu-id="90fbc-322">Analizowanie kodu XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-322">Parsing XML</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Parse (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Parse(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Parse(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Parse text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="90fbc-323">Ciąg, który zawiera kod XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-323">A string that contains XML.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-324">Tworzy nową <see cref="T:System.Xml.Linq.XDocument" /> z ciągu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-324">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90fbc-325">
            <see cref="T:System.Xml.Linq.XDocument" /> Wypełnione z ciąg, który zawiera kod XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-325">An <see cref="T:System.Xml.Linq.XDocument" /> populated from the string that contains XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-326">Ta metoda nie zachowuje biały znak.</span><span class="sxs-lookup"><span data-stu-id="90fbc-326">This method does not preserve white space.</span></span> <span data-ttu-id="90fbc-327">Jeśli chcesz zachować biały znak w drzewie XML, użyj przeciążenia <xref:System.Xml.Linq.XDocument.Parse%2A> przyjmującej <xref:System.Xml.Linq.LoadOptions> jako parametr.</span><span class="sxs-lookup"><span data-stu-id="90fbc-327">If you want to preserve white space in the XML tree, use the overload of <xref:System.Xml.Linq.XDocument.Parse%2A> that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span>  
  
 <span data-ttu-id="90fbc-328">Aby uzyskać więcej informacji, zobacz [zachowania biały znak podczas ładowania lub analizowania kodu XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) i [zachowania biały znak podczas serializowania](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="90fbc-328">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="90fbc-329">LINQ do XML firmy podczas ładowania funkcji jest oparty na <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-329">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="90fbc-330">W związku z tym, może przechwycić wyjątków, które są generowane przez <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> przeciążenia metody i <xref:System.Xml.XmlReader> metod, które odczytują i analizy dokumentu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-330">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-331">Poniższy przykład tworzy ciąg, który zawiera kod XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-331">The following example creates a string that contains XML.</span></span> <span data-ttu-id="90fbc-332">Następnie analizuje ciąg do <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-332">It then parses the string into an <xref:System.Xml.Linq.XDocument>.</span></span>  
  
```csharp  
string str =  
@"<?xml version=""1.0""?>  
<!-- comment at the root level -->  
<Root>  
    <Child>Content</Child>  
</Root>";  
XDocument doc = XDocument.Parse(str);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim str As String = _  
    "<?xml version= '1.0'?>" & _  
    "<!-- comment at the root level -->" & _  
    "<Root>" & _  
    "  <Child>Content</Child>" & _  
    "</Root>"  
  
Dim doc As XDocument = XDocument.Parse(str)  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="90fbc-333">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-333">This example produces the following output:</span></span>  
  
```xml  
<!-- comment at the root level -->  
<Root>  
  <Child>Content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-334">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-334">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/8bdfdca0-6738-47a4-af3b-6d36d85e4d28">
          <span data-ttu-id="90fbc-335">Analizowanie kodu XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-335">Parsing XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Parse (string text, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Parse(string text, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String, options As LoadOptions) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Parse(System::String ^ text, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Parse (text, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="90fbc-336">Ciąg, który zawiera kod XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-336">A string that contains XML.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="90fbc-337">Element <see cref="T:System.Xml.Linq.LoadOptions" /> , który określa zachowania biały znak oraz czy można załadować informacji o podstawowy identyfikator URI i linii.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-337">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-338">Tworzy nową <see cref="T:System.Xml.Linq.XDocument" /> z ciągu, opcjonalnie zachowywanie białych znaków, ustawienie podstawowy identyfikator URI i zachowywanie informacji wiersza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-338">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90fbc-339">
            <see cref="T:System.Xml.Linq.XDocument" /> Wypełnione z ciąg, który zawiera kod XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-339">An <see cref="T:System.Xml.Linq.XDocument" /> populated from the string that contains XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-340">Jeśli źródła XML z wcięciami, ustawienie <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> znacznik w `options` powoduje, że czytnik do odczytu wszystkich biały znak w źródle XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-340">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="90fbc-341">Węzły typu <xref:System.Xml.Linq.XText> są tworzone dla biały znak znaczące i nieistotne.</span><span class="sxs-lookup"><span data-stu-id="90fbc-341">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="90fbc-342">Jeśli źródła XML z wcięciami, to ustawienie nie zostanie <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> znacznik w `options` powoduje, że czytelnik Ignoruj wszystkich nieważny biały znak w źródle XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-342">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="90fbc-343">Drzewa XML została utworzona bez wszystkie węzły tekstowe dla nieważny biały znak.</span><span class="sxs-lookup"><span data-stu-id="90fbc-343">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="90fbc-344">Jeśli źródła XML nie jest w pozycji wcięcia, ustawienie <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> znacznik w `options` nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-344">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="90fbc-345">Istotnych białych nadal są zachowywane, a nie ma żadnych zakresów nieważny biały znak, który może powodować tworzenie więcej węzły tekstowe białe miejsca.</span><span class="sxs-lookup"><span data-stu-id="90fbc-345">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="90fbc-346">Aby uzyskać więcej informacji, zobacz [zachowania biały znak podczas ładowania lub analizowania kodu XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) i [zachowania biały znak podczas serializowania](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="90fbc-346">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="90fbc-347">Ustawienie <xref:System.Xml.Linq.LoadOptions.SetBaseUri> jest nieprawidłowy, gdy analiza z <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-347">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> is not valid when parsing from a <xref:System.String>.</span></span>  
  
 <span data-ttu-id="90fbc-348">Występuje spadek wydajności, jeśli ustawisz <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flagi.</span><span class="sxs-lookup"><span data-stu-id="90fbc-348">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="90fbc-349">Informacje wiersza jest dokładna natychmiast po podczas ładowania dokumentu XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-349">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="90fbc-350">Jeśli zmodyfikujesz drzewa XML po załadowaniu dokumentu informacje wiersza może stać się całkowicie nieprzydatna.</span><span class="sxs-lookup"><span data-stu-id="90fbc-350">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="90fbc-351">LINQ do XML firmy podczas ładowania funkcji jest oparty na <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-351">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="90fbc-352">W związku z tym, może przechwycić wyjątków, które są generowane przez <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> przeciążenia metody i <xref:System.Xml.XmlReader> metod, które odczytują i analizy dokumentu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-352">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-353">Poniższy przykład analizuje ciąg do <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-353">The following example parses a string into an <xref:System.Xml.Linq.XDocument>.</span></span>  
  
```csharp  
string str =  
@"<?xml version=""1.0""?>  
<!-- comment at the root level -->  
<Root>  
    <Child>Content</Child>  
</Root>";  
XDocument doc1 = XDocument.Parse(str, LoadOptions.PreserveWhitespace);  
Console.WriteLine("nodes when preserving whitespace: {0}", doc1.DescendantNodes().Count());  
XDocument doc2 = XDocument.Parse(str, LoadOptions.None);  
Console.WriteLine("nodes when not preserving whitespace: {0}", doc2.DescendantNodes().Count());  
```  
  
```vb  
Dim str As String = _  
"<?xml version= '1.0'?>" & Environment.NewLine & _  
"<!-- comment at the root level -->" & Environment.NewLine & _  
"<Root>" & Environment.NewLine & _  
"    <Child>Content</Child>"  & Environment.NewLine & _  
"</Root>"  
  
Dim doc1 As XDocument = XDocument.Parse(str, LoadOptions.PreserveWhitespace)  
Console.WriteLine("nodes when preserving whitespace: {0}", doc1.DescendantNodes().Count())  
Dim doc2 As XDocument = XDocument.Parse(str, LoadOptions.None)  
Console.WriteLine("nodes when not preserving whitespace: {0}", doc2.DescendantNodes().Count())  
```  
  
 <span data-ttu-id="90fbc-354">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-354">This example produces the following output:</span></span>  
  
```  
nodes when preserving whitespace: 8  
nodes when not preserving whitespace: 4  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-355">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-355">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/8bdfdca0-6738-47a4-af3b-6d36d85e4d28">
          <span data-ttu-id="90fbc-356">Analizowanie kodu XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-356">Parsing XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XElement Root { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XElement Root" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocument.Root" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Root As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XElement ^ Root { System::Xml::Linq::XElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Root : System.Xml.Linq.XElement" Usage="System.Xml.Linq.XDocument.Root" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90fbc-357">Pobiera element główny drzewa XML dla tego dokumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-357">Gets the root element of the XML Tree for this document.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90fbc-358">Katalog główny <see cref="T:System.Xml.Linq.XElement" /> drzewa XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-358">The root <see cref="T:System.Xml.Linq.XElement" /> of the XML tree.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-359">Ta właściwość jest przydatna, gdy użytkownik chce utworzyć [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] zapytania w tym samym kontekście jako podczas tworzenia ich do drzewa osadzonego w <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-359">This property is useful when you want to compose [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] queries in the same context as when composing them for a tree rooted in <xref:System.Xml.Linq.XElement>.</span></span> <span data-ttu-id="90fbc-360">Zobacz [podczas badania elementu XDocument a. Podczas badania XElement](https://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a) Aby uzyskać więcej informacji.</span><span class="sxs-lookup"><span data-stu-id="90fbc-360">See [Querying an XDocument vs. Querying an XElement](https://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a) for more details.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-361">W poniższym przykładzie użyto tej właściwości, aby uzyskać element główny dokumentu.</span><span class="sxs-lookup"><span data-stu-id="90fbc-361">The following example uses this property to get the root element of a document.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XComment("This is a comment."),  
    new XElement("Pubs",   
        new XElement("Book",  
            new XElement("Title", "Artifacts of Roman Civilization"),  
            new XElement("Author", "Moreno, Jordao")  
        ),  
        new XElement("Book",  
            new XElement("Title", "Midieval Tools and Implements"),  
            new XElement("Author", "Gazit, Inbar")  
        )  
    ),  
    new XComment("This is another comment.")  
);  
Console.WriteLine(doc.Root.Name.ToString());  
```  
  
```vb  
Dim doc As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
    <!--This is a comment.-->  
    <Pubs>  
        <Book>  
            <Title>Artifacts of Roman Civilization</Title>  
            <Author>Moreno, Jordao</Author>  
        </Book>  
        <Book>  
            <Title>Midieval Tools and Implements</Title>  
            <Author>Gazit, Inbar</Author>  
        </Book>  
        <!--This is another comment.-->  
    </Pubs>  
  
Console.WriteLine(doc.Root.Name.ToString())  
```  
  
 <span data-ttu-id="90fbc-362">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-362">This example produces the following output:</span></span>  
  
```  
Pubs  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-363">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-363">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/69468b03-4f18-4d69-98a4-3fa90d904f08">
          <span data-ttu-id="90fbc-364">Porady: wyszukiwanie węzłów w Namespace</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-364">How to: Find All Nodes in a Namespace</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90fbc-365">Serializuje to <see cref="T:System.Xml.Linq.XDocument" /> w pliku <see cref="T:System.IO.TextWriter" />, lub <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-365">Serializes this <see cref="T:System.Xml.Linq.XDocument" /> to a file, a <see cref="T:System.IO.TextWriter" />, or an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-366">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-366">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="90fbc-367">Porady: odczytywanie i zapisywanie zakodowanego dokumentu</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-367">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.Stream -&gt; unit" Usage="xDocument.Save stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="90fbc-368">Strumień, do danych wyjściowych to <see cref="T:System.Xml.Linq.XDocument" /> do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-368">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-369">Dane wyjściowe to <see cref="T:System.Xml.Linq.XDocument" /> określonej <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-369">Outputs this <see cref="T:System.Xml.Linq.XDocument" /> to the specified <see cref="T:System.IO.Stream" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-370">Serializacji XML będą wcięte.</span><span class="sxs-lookup"><span data-stu-id="90fbc-370">The serialized XML will be indented.</span></span> <span data-ttu-id="90fbc-371">Wszystkie nieważny biały znak zostanie usunięta, a dodatkowe biały znak zostanie dodana tak, aby kod XML prawidłowo w pozycji wcięcia.</span><span class="sxs-lookup"><span data-stu-id="90fbc-371">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="90fbc-372">Zachowanie tej metody jest nieważny ten biały znak nie zostanie zachowany.</span><span class="sxs-lookup"><span data-stu-id="90fbc-372">The behavior of this method is that insignificant white space will not be preserved.</span></span>  
  
 <span data-ttu-id="90fbc-373">Jeśli chcesz kontrolować białe miejsca, użyj przeciążenia <xref:System.Xml.Linq.XDocument.Save%2A> przyjmującej <xref:System.Xml.Linq.SaveOptions> jako parametr.</span><span class="sxs-lookup"><span data-stu-id="90fbc-373">If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="90fbc-374">Użyj <xref:System.Xml.Linq.SaveOptions.DisableFormatting> opcję, aby zapisać niewciętego XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-374">Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML.</span></span> <span data-ttu-id="90fbc-375">To spowoduje, że moduł zapisujący dokładnie tak jak reprezentowany w drzewie XML zapis wszystkich spacji.</span><span class="sxs-lookup"><span data-stu-id="90fbc-375">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="90fbc-376">Użyj <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> opcję, jeśli chcesz usunąć deklaracji zduplikowanych przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="90fbc-376">Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.TextWriter -&gt; unit" Usage="xDocument.Save textWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="textWriter">
          <span data-ttu-id="90fbc-377">A <see cref="T:System.IO.TextWriter" /> , <see cref="T:System.Xml.Linq.XDocument" /> zostaną zapisane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-377">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XDocument" /> will be written to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-378">Serializacji to <see cref="T:System.Xml.Linq.XDocument" /> do <see cref="T:System.IO.TextWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-378">Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a <see cref="T:System.IO.TextWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-379">Serializacji XML będą wcięte.</span><span class="sxs-lookup"><span data-stu-id="90fbc-379">The serialized XML will be indented.</span></span> <span data-ttu-id="90fbc-380">Wszystkie nieważny biały znak zostanie usunięta, a dodatkowe biały znak zostanie dodana tak, aby kod XML prawidłowo w pozycji wcięcia.</span><span class="sxs-lookup"><span data-stu-id="90fbc-380">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="90fbc-381">Zachowanie tej metody jest nieważny ten biały znak nie zostanie zachowany.</span><span class="sxs-lookup"><span data-stu-id="90fbc-381">The behavior of this method is that insignificant white space will not be preserved.</span></span>  
  
 <span data-ttu-id="90fbc-382">Jeśli chcesz kontrolować białe miejsca, użyj przeciążenia <xref:System.Xml.Linq.XDocument.Save%2A> przyjmującej <xref:System.Xml.Linq.SaveOptions> jako parametr.</span><span class="sxs-lookup"><span data-stu-id="90fbc-382">If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="90fbc-383">Aby uzyskać więcej informacji, zobacz [zachowania biały znak podczas ładowania lub analizowania kodu XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) i [zachowania biały znak podczas serializowania](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="90fbc-383">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-384">Poniższy przykład tworzy <xref:System.Xml.Linq.XDocument>, zapisuje dokument do <xref:System.IO.StringWriter>, a następnie drukuje ciąg do konsoli.</span><span class="sxs-lookup"><span data-stu-id="90fbc-384">The following example creates an <xref:System.Xml.Linq.XDocument>, saves the document to a <xref:System.IO.StringWriter>, and then prints the string to the console.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
  
XDocument doc = new XDocument(  
    new XElement("Root",  
        new XElement("Child", "content")  
    )  
);  
TextWriter tr = new StringWriter(sb);  
doc.Save(tr);  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8"?>  
        <Root><Child>content</Child></Root>  
  
Dim tr As TextWriter = New StringWriter(sb)  
doc.Save(tr)  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="90fbc-385">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-385">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-386">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-386">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="90fbc-387">Porady: odczytywanie i zapisywanie zakodowanego dokumentu</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-387">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="xDocument.Save fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="90fbc-388">Ciąg, który zawiera nazwę pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-388">A string that contains the name of the file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-389">Serializacji to <see cref="T:System.Xml.Linq.XDocument" /> do pliku, zastępując istniejący plik, jeśli istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-389">Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a file, overwriting an existing file, if it exists.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-390">Serializacji XML będą wcięte.</span><span class="sxs-lookup"><span data-stu-id="90fbc-390">The serialized XML will be indented.</span></span> <span data-ttu-id="90fbc-391">Wszystkie nieważny biały znak zostanie usunięta, a dodatkowe biały znak zostanie dodana tak, aby kod XML prawidłowo w pozycji wcięcia.</span><span class="sxs-lookup"><span data-stu-id="90fbc-391">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="90fbc-392">Zachowanie tej metody jest nieważny ten biały znak nie zostanie zachowany.</span><span class="sxs-lookup"><span data-stu-id="90fbc-392">The behavior of this method is that insignificant white space will not be preserved.</span></span>  
  
 <span data-ttu-id="90fbc-393">Jeśli chcesz kontrolować białe miejsca, użyj przeciążenia <xref:System.Xml.Linq.XDocument.Save%2A> przyjmującej <xref:System.Xml.Linq.SaveOptions> jako parametr.</span><span class="sxs-lookup"><span data-stu-id="90fbc-393">If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="90fbc-394">Aby uzyskać więcej informacji, zobacz [zachowania biały znak podczas ładowania lub analizowania kodu XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) i [zachowania biały znak podczas serializowania](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="90fbc-394">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-395">Poniższy przykład tworzy <xref:System.Xml.Linq.XDocument>, zapisuje dokument do pliku, a następnie drukuje pliku do konsoli.</span><span class="sxs-lookup"><span data-stu-id="90fbc-395">The following example creates an <xref:System.Xml.Linq.XDocument>, saves the document to a file, and then prints the file to the console.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XElement("Root",  
        new XElement("Child", "content")  
    )  
);  
doc.Save("Root.xml");  
Console.WriteLine(File.ReadAllText("Root.xml"));  
```  
  
```vb  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8"?>  
        <Root><Child>content</Child></Root>  
  
doc.Save("Root.xml")  
Console.WriteLine(File.ReadAllText("Root.xml"))  
```  
  
 <span data-ttu-id="90fbc-396">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-396">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-397">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-397">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="90fbc-398">Porady: odczytywanie i zapisywanie zakodowanego dokumentu</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-398">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.Save : System.Xml.XmlWriter -&gt; unit" Usage="xDocument.Save writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="90fbc-399">A <see cref="T:System.Xml.XmlWriter" /> , <see cref="T:System.Xml.Linq.XDocument" /> zostaną zapisane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-399">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XDocument" /> will be written to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-400">Serializacji to <see cref="T:System.Xml.Linq.XDocument" /> do <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-400">Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="90fbc-401">Poniższy przykład pokazuje, jak zapisać <xref:System.Xml.Linq.XDocument> do <xref:System.Xml.XmlWriter>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-401">The following example shows how to save an <xref:System.Xml.Linq.XDocument> to an <xref:System.Xml.XmlWriter>.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
xws.Indent = true;  
  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    XDocument doc = new XDocument(  
        new XElement("Child",  
            new XElement("GrandChild", "some content")  
        )  
    );  
    doc.Save(xw);  
}  
  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
xws.Indent = True  
  
Using xw = XmlWriter.Create(sb, xws)  
    Dim doc As XDocument = New XDocument(<Child><GrandChild>some content</GrandChild></Child>)  
    doc.Save(xw)  
  
End Using  
  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="90fbc-402">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-402">This example produces the following output:</span></span>  
  
```xml  
<Child>  
  <GrandChild>some content</GrandChild>  
</Child>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-403">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-403">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="90fbc-404">Porady: odczytywanie i zapisywanie zakodowanego dokumentu</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-404">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.Stream * System.Xml.Linq.SaveOptions -&gt; unit" Usage="xDocument.Save (stream, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="90fbc-405">Strumień, do danych wyjściowych to <see cref="T:System.Xml.Linq.XDocument" /> do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-405">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="90fbc-406">Element <see cref="T:System.Xml.Linq.SaveOptions" /> , który określa zachowanie formatowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-406">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-407">Dane wyjściowe to <see cref="T:System.Xml.Linq.XDocument" /> określonej <see cref="T:System.IO.Stream" />, opcjonalnie Określanie formatowania zachowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-407">Outputs this <see cref="T:System.Xml.Linq.XDocument" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-408">Domyślnie `options` są ustawione na <xref:System.Xml.Linq.SaveOptions.None>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-408">By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>.</span></span> <span data-ttu-id="90fbc-409">Ta opcja Usuń wszystkie nadmiarowe nieważny biały znak i dodać odpowiednie nieważny biały znak XML jest prawidłowo w pozycji wcięcia.</span><span class="sxs-lookup"><span data-stu-id="90fbc-409">This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span>  
  
 <span data-ttu-id="90fbc-410">Jeśli chcesz zapisać niewciętego XML, należy określić <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flaga `options`.</span><span class="sxs-lookup"><span data-stu-id="90fbc-410">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="90fbc-411">To spowoduje, że moduł zapisujący dokładnie tak jak reprezentowany w drzewie XML zapis wszystkich spacji.</span><span class="sxs-lookup"><span data-stu-id="90fbc-411">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="90fbc-412">Użyj <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> opcję, jeśli chcesz usunąć deklaracji zduplikowanych przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="90fbc-412">Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.TextWriter * System.Xml.Linq.SaveOptions -&gt; unit" Usage="xDocument.Save (textWriter, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="textWriter">
          <span data-ttu-id="90fbc-413">
            <see cref="T:System.IO.TextWriter" /> Służący do wypełniania wyjściowego pliku XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-413">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="90fbc-414">Element <see cref="T:System.Xml.Linq.SaveOptions" /> , który określa zachowanie formatowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-414">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-415">Serializacji to <see cref="T:System.Xml.Linq.XDocument" /> do <see cref="T:System.IO.TextWriter" />, opcjonalnie wyłączenie formatowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-415">Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-416">Jeśli chcesz zapisać niewciętego XML, należy określić <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flaga `options`.</span><span class="sxs-lookup"><span data-stu-id="90fbc-416">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="90fbc-417">To spowoduje, że moduł zapisujący do zapisania wszystkich odstępów dokładnie tak jak reprezentowany w drzewie XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-417">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="90fbc-418">Jeśli chcesz zapisać XML z wcięciami, nie należy określać <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flaga `options`.</span><span class="sxs-lookup"><span data-stu-id="90fbc-418">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="90fbc-419">To spowoduje usunięcie wszystkich nadmiarowe nieważny biały znak i dodać odpowiednie nieważny biały znak XML jest prawidłowo w pozycji wcięcia.</span><span class="sxs-lookup"><span data-stu-id="90fbc-419">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="90fbc-420">Jest to domyślne zachowanie i zachowanie przeciążeń <xref:System.Xml.Linq.XDocument.Save%2A> metod, które nie przyjmują `options` jako parametr.</span><span class="sxs-lookup"><span data-stu-id="90fbc-420">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XDocument.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="90fbc-421">Aby uzyskać więcej informacji, zobacz [zachowania biały znak podczas ładowania lub analizowania kodu XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) i [zachowania biały znak podczas serializowania](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="90fbc-421">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-422">Poniższy przykład przedstawia dwa przypadki użycia tej metody.</span><span class="sxs-lookup"><span data-stu-id="90fbc-422">The following example shows two uses of this method.</span></span> <span data-ttu-id="90fbc-423">Serializuje pierwszego użycia <xref:System.Xml.Linq.XDocument> z formatowaniem.</span><span class="sxs-lookup"><span data-stu-id="90fbc-423">The first use serializes the <xref:System.Xml.Linq.XDocument> with formatting.</span></span> <span data-ttu-id="90fbc-424">Drugi zachowuje biały znak.</span><span class="sxs-lookup"><span data-stu-id="90fbc-424">The second preserves white space.</span></span> <span data-ttu-id="90fbc-425">Ponieważ dokument ma żadne inne białe w nim, jak zbudowane, zachowywanie białych znaków danych wyjściowych XML bez żadnych wcięcia.</span><span class="sxs-lookup"><span data-stu-id="90fbc-425">Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XElement("Root",  
        new XElement("Child", "content")  
    )  
);  
StringBuilder sb1 = new StringBuilder();  
using (StringWriter sr1 = new StringWriter(sb1)) {  
    doc.Save(sr1, SaveOptions.None);  
    Console.WriteLine(sb1.ToString());  
}  
  
StringBuilder sb2 = new StringBuilder();  
using (StringWriter sr2 = new StringWriter(sb2)) {  
    doc.Save(sr2, SaveOptions.DisableFormatting);  
    Console.WriteLine(sb2.ToString());  
}  
```  
  
```vb  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8"?>  
        <Root><Child>content</Child></Root>  
  
Dim sb1 As StringBuilder = New StringBuilder()  
  
Using sr1 = New StringWriter(sb1)  
    doc.Save(sr1, SaveOptions.None)  
    Console.WriteLine(sb1.ToString())  
End Using  
  
Dim sb2 As StringBuilder = New StringBuilder()  
  
Using sr2 = New StringWriter(sb2)  
    doc.Save(sr2, SaveOptions.DisableFormatting)  
    Console.WriteLine(sb2.ToString())  
End Using  
```  
  
 <span data-ttu-id="90fbc-426">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-426">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child>content</Child>  
</Root>  
<?xml version="1.0" encoding="utf-16"?><Root><Child>content</Child></Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-427">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-427">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="90fbc-428">Porady: odczytywanie i zapisywanie zakodowanego dokumentu</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-428">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String, options As SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName, System::Xml::Linq::SaveOptions options);" />
      <MemberSignature Language="F#" Value="member this.Save : string * System.Xml.Linq.SaveOptions -&gt; unit" Usage="xDocument.Save (fileName, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="90fbc-429">Ciąg, który zawiera nazwę pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-429">A string that contains the name of the file.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="90fbc-430">Element <see cref="T:System.Xml.Linq.SaveOptions" /> , który określa zachowanie formatowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-430">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-431">Serializacji to <see cref="T:System.Xml.Linq.XDocument" /> do pliku, opcjonalnie wyłączenia formatowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-431">Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a file, optionally disabling formatting.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90fbc-432">Jeśli chcesz zapisać niewciętego XML, należy określić <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flaga `options`.</span><span class="sxs-lookup"><span data-stu-id="90fbc-432">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="90fbc-433">To spowoduje, że moduł zapisujący do zapisania wszystkich odstępów dokładnie tak jak reprezentowany w drzewie XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-433">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="90fbc-434">Jeśli chcesz zapisać XML z wcięciami, nie należy określać <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flaga `options`.</span><span class="sxs-lookup"><span data-stu-id="90fbc-434">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="90fbc-435">To spowoduje usunięcie wszystkich nadmiarowe nieważny biały znak i dodać odpowiednie nieważny biały znak XML jest prawidłowo w pozycji wcięcia.</span><span class="sxs-lookup"><span data-stu-id="90fbc-435">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="90fbc-436">Jest to domyślne zachowanie i zachowanie przeciążeń <xref:System.Xml.Linq.XDocument.Save%2A> metod, które nie przyjmują `options` jako parametr.</span><span class="sxs-lookup"><span data-stu-id="90fbc-436">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XDocument.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="90fbc-437">Aby uzyskać więcej informacji, zobacz [zachowania biały znak podczas ładowania lub analizowania kodu XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) i [zachowania biały znak podczas serializowania](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="90fbc-437">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90fbc-438">Poniższy przykład przedstawia dwa przypadki użycia tej metody.</span><span class="sxs-lookup"><span data-stu-id="90fbc-438">The following example shows two uses of this method.</span></span> <span data-ttu-id="90fbc-439">Pierwsze użycie zachowuje biały znak.</span><span class="sxs-lookup"><span data-stu-id="90fbc-439">The first use preserves white space.</span></span> <span data-ttu-id="90fbc-440">Serializuje drugi <xref:System.Xml.Linq.XDocument> z wcięcia.</span><span class="sxs-lookup"><span data-stu-id="90fbc-440">The second one serializes the <xref:System.Xml.Linq.XDocument> with indenting.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XElement("Root",  
        new XElement("Child", "content")  
    )  
);  
doc.Save("Root1.xml", SaveOptions.DisableFormatting);  
Console.WriteLine(File.ReadAllText("Root1.xml"));  
doc.Save("Root2.xml", SaveOptions.None);  
Console.WriteLine(File.ReadAllText("Root2.xml"));  
```  
  
```vb  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8"?>  
        <Root><Child>content</Child></Root>  
  
doc.Save("Root1.xml", SaveOptions.DisableFormatting)  
Console.WriteLine(File.ReadAllText("Root1.xml"))  
doc.Save("Root2.xml", SaveOptions.None)  
Console.WriteLine(File.ReadAllText("Root2.xml"))  
```  
  
 <span data-ttu-id="90fbc-441">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-441">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-8"?><Root><Child>content</Child></Root>  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-442">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-442">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="90fbc-443">Porady: odczytywanie i zapisywanie zakodowanego dokumentu</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-443">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : System.Xml.XmlWriter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xDocument.SaveAsync (writer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.Stream stream, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : System.IO.Stream * System.Xml.Linq.SaveOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xDocument.SaveAsync (stream, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : System.IO.TextWriter * System.Xml.Linq.SaveOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xDocument.SaveAsync (textWriter, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="textWriter">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteTo (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteTo(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.WriteTo : System.Xml.XmlWriter -&gt; unit" Usage="xDocument.WriteTo writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="90fbc-444">
            <see cref="T:System.Xml.XmlWriter" /> Do będzie zapisywać tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-444">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90fbc-445">Pisania tego dokumentu, aby <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-445">Write this document to an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="90fbc-446">Poniższy przykład przedstawia sposób zapisania <xref:System.Xml.Linq.XDocument> do <xref:System.Xml.XmlWriter>.</span><span class="sxs-lookup"><span data-stu-id="90fbc-446">The following example shows how to write an <xref:System.Xml.Linq.XDocument> to an <xref:System.Xml.XmlWriter>.</span></span> <span data-ttu-id="90fbc-447">Należy pamiętać, że przykładu nie zapisano deklaracji XML.</span><span class="sxs-lookup"><span data-stu-id="90fbc-447">Note that the example did not write an XML declaration.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
xws.Indent = true;  
  
using (XmlWriter xw = XmlWriter.Create(sb, xws))  
{  
    XDocument doc = new XDocument(  
        new XElement("Child",  
            new XElement("GrandChild", "some content")  
        )  
    );  
    doc.WriteTo(xw);  
}  
  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
xws.Indent = True  
  
Using xw = XmlWriter.Create(sb, xws)  
    Dim doc As XDocument = New XDocument(<Child><GrandChild>some content</GrandChild></Child>)  
    doc.WriteTo(xw)  
End Using  
  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="90fbc-448">Ten przykład generuje następujące wyniki:</span><span class="sxs-lookup"><span data-stu-id="90fbc-448">This example produces the following output:</span></span>  
  
```xml  
<Child>  
  <GrandChild>some content</GrandChild>  
</Child>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="90fbc-449">LINQ do XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="90fbc-449">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteToAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.WriteToAsync : System.Xml.XmlWriter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xDocument.WriteToAsync (writer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>