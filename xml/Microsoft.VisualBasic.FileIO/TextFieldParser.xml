<Type Name="TextFieldParser" FullName="Microsoft.VisualBasic.FileIO.TextFieldParser">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="013d626bb8bc81d9eb4e03b891788c9c26fbc2a6" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36659066" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextFieldParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi TextFieldParser extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFieldParser&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFieldParser : IDisposable" />
  <TypeSignature Language="F#" Value="type TextFieldParser = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Udostępnia metody i właściwości dla analizowanie tekstu w strukturze plików.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `TextFieldParser` Obiektu udostępnia metody i właściwości na potrzeby analizowania strukturę plików tekstowych. Podczas analizowania pliku tekstowego z `TextFieldParser` jest podobny do Iterowanie po pliku tekstowego podczas `ReadFields` metody do wyodrębniania pól tekstu jest podobny do dzielenia na ciągi.  
  
 `TextFieldParser` Można analizować dwa typy plików: rozdzielanego lub o stałej szerokości. Niektóre właściwości, takie jak `Delimiters` i `HasFieldsEnclosedInQuotes` mają znaczenie tylko podczas pracy z plików, podczas gdy `FieldWidths` właściwość ma znaczenie tylko wtedy, gdy praca z plikami o stałej szerokości.  
  
 W poniższej tabeli przedstawiono przykłady dotyczące zadań `Microsoft.VisualBasic.FileIO.TextFieldParser` obiektu.  
  
|Do|Zobacz|  
|--------|---------|  
|Odczyt z pliku tekstowego z separatorami|[Instrukcje: odczyt z rozdzielonych przecinkami plików testowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|Odczyt z plików testowych o stałej szerokości|[Instrukcje: odczyt z plików testowych o stałej szerokości](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|Odczyt z pliku tekstowego w wielu formatach|[Instrukcje: odczyt z plików tekstowych w wielu formatach](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 W tym przykładzie zostanie przetworzona za pomocą pliku tekstowego tabulacji `Bigfile`.  
  
 [!code-vb[VbVbalrTextFieldParser#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="TextFieldParser" /> klasy.</summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />. Strumień, który będzie analizowany.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="TextFieldParser" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tworzy nowy `TextFieldParser` obiekt, aby przeanalizować pliku lub strumienia, który jest reprezentowana przez `stream` parametru.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> Nie można odczytać z.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.TextReader -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser reader" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.IO.TextReader" />. <see cref="T:System.IO.TextReader" /> Strumienia do przeanalizowania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="TextFieldParser" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tworzy nowy `TextFieldParser` obiekt, aby przeanalizować pliku lub strumienia, który jest reprezentowana przez `reader` parametru.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> jest <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <see langword="String" />. Pełna ścieżka pliku do przeanalizowania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="TextFieldParser" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tworzy nowy `TextFieldParser` obiekt, aby przeanalizować plik określony przez `path` parametru.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> jest pustym ciągiem.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />. Strumień, który będzie analizowany.</param>
        <param name="defaultEncoding">
          <see cref="T:System.Text.Encoding" />. System kodowania znaków, który będzie używany w razie niemożności ustalenia kodowania na podstawie treści pliku. Wartość domyślna to <see cref="P:System.Text.Encoding.UTF8" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="TextFieldParser" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tworzy nowy `TextFieldParser` obiekt, aby przeanalizować pliku lub strumienia, który jest reprezentowana przez `stream` parametru.  
  
> [!CAUTION]
>  Gdy zbiór znaków zostanie skompilowany z określonym ustawieniem kultury, po czym pobrany z użyciem innego ustawienia kultury, znaki mogą nie nadawać się do interpretacji i powodować zgłoszenie wyjątku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> lub <paramref name="defaultEncoding" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> Nie można odczytać z.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string * System.Text.Encoding -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (path, defaultEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">
          <see langword="String" />. Pełna ścieżka pliku do przeanalizowania.</param>
        <param name="defaultEncoding">
          <see cref="T:System.Text.Encoding" />. System kodowania znaków, który będzie używany w razie niemożności ustalenia kodowania na podstawie treści pliku. Wartość domyślna to <see cref="P:System.Text.Encoding.UTF8" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="TextFieldParser" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tworzy nowy `TextFieldParser` obiekt, aby przeanalizować plik określony przez `path` parametru.  
  
> [!CAUTION]
>  Gdy zbiór znaków zostanie skompilowany z określonym ustawieniem kultury, po czym pobrany z użyciem innego ustawienia kultury, znaki mogą nie nadawać się do interpretacji i powodować zgłoszenie wyjątku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> jest to pusty ciąg lub <paramref name="defaultEncoding" /> jest <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding, detectEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />. Strumień, który będzie analizowany.</param>
        <param name="defaultEncoding">
          <see cref="T:System.Text.Encoding" />. System kodowania znaków, który będzie używany w razie niemożności ustalenia kodowania na podstawie treści pliku. Wartość domyślna to <see cref="P:System.Text.Encoding.UTF8" />.</param>
        <param name="detectEncoding">
          <see langword="Boolean" />. Wskazuje, czy na początku pliku mają być szukane znaczniki kolejności bajtów. Wartość domyślna to <see langword="True" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="TextFieldParser" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tworzy nowy `TextFieldParser` obiekt, aby przeanalizować pliku lub strumienia, który jest reprezentowana przez `stream` parametru.  
  
 Jeśli `detectEncoding` parametr jest `True`, próbuje wykryć kodowanie, analizując pierwsze trzy bajty pliku lub strumienia tego konstruktora. Automatycznie rozpoznaje UTF-8, little endian Unicode i big-endian Unicode tekst Jeśli plik rozpoczyna się od znaków odpowiedniej kolejności bajtów. W przeciwnym razie kodowania określony przez `defaultEncoding` jest używany.  
  
> [!CAUTION]
>  Gdy zbiór znaków zostanie skompilowany z określonym ustawieniem kultury, po czym pobrany z użyciem innego ustawienia kultury, znaki mogą nie nadawać się do interpretacji i powodować zgłoszenie wyjątku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> lub <paramref name="defaultEncoding" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> Nie można odczytać z.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding, detectEncoding As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string * System.Text.Encoding * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (path, defaultEncoding, detectEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
          <see langword="String" />. Pełna ścieżka pliku do przeanalizowania.</param>
        <param name="defaultEncoding">
          <see cref="T:System.Text.Encoding" />. System kodowania znaków, który będzie używany w razie niemożności ustalenia kodowania na podstawie treści pliku. Wartość domyślna to <see cref="P:System.Text.Encoding.UTF8" />.</param>
        <param name="detectEncoding">
          <see langword="Boolean" />. Wskazuje, czy na początku pliku mają być szukane znaczniki kolejności bajtów. Wartość domyślna to <see langword="True" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="TextFieldParser" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tworzy nowy `TextFieldParser` obiekt, aby przeanalizować plik określony przez `path` parametru.  
  
 Jeśli `detectEncoding` parametr jest `True`, próbuje wykryć kodowanie, analizując pierwsze trzy bajty pliku lub strumienia tego konstruktora. Automatycznie rozpoznaje UTF-8, little endian Unicode i big-endian Unicode tekst Jeśli plik rozpoczyna się od znaków odpowiedniej kolejności bajtów. W przeciwnym razie kodowania określony przez `defaultEncoding` jest używany.  
  
> [!CAUTION]
>  Gdy zbiór znaków zostanie skompilowany z określonym ustawieniem kultury, po czym pobrany z użyciem innego ustawienia kultury, znaki mogą nie nadawać się do interpretacji i powodować zgłoszenie wyjątku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> jest to pusty ciąg lub <paramref name="defaultEncoding" /> jest <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding * bool * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding, detectEncoding, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />. Strumień, który będzie analizowany.</param>
        <param name="defaultEncoding">
          <see cref="T:System.Text.Encoding" />. System kodowania znaków, który będzie używany w razie niemożności ustalenia kodowania na podstawie treści pliku. Wartość domyślna to <see cref="P:System.Text.Encoding.UTF8" />.</param>
        <param name="detectEncoding">
          <see langword="Boolean" />. Wskazuje, czy na początku pliku mają być szukane znaczniki kolejności bajtów. Wartość domyślna to <see langword="True" />.</param>
        <param name="leaveOpen">
          <see langword="Boolean" />. Wskazuje, czy należy pozostawić <c>strumienia</c> podczas otwierania <see langword="TextFieldParser" /> obiekt jest zamknięty. Wartość domyślna to <see langword="False" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="TextFieldParser" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tworzy nowy `TextFieldParser` obiekt, aby przeanalizować pliku lub strumienia, który jest reprezentowana przez `stream` parametru.  
  
 Jeśli `detectEncoding` parametr jest `True`, próbuje wykryć kodowanie, analizując pierwsze trzy bajty pliku lub strumienia tego konstruktora. Automatycznie rozpoznaje UTF-8, little endian Unicode i big-endian Unicode tekst Jeśli plik rozpoczyna się od znaków odpowiedniej kolejności bajtów. W przeciwnym razie kodowania określony przez `defaultEncoding` jest używany.  
  
> [!CAUTION]
>  Gdy zbiór znaków zostanie skompilowany z określonym ustawieniem kultury, po czym pobrany z użyciem innego ustawienia kultury, znaki mogą nie nadawać się do interpretacji i powodować zgłoszenie wyjątku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> lub <paramref name="defaultEncoding" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> Nie można odczytać z.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="textFieldParser.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka bieżące <see langword="TextFieldParser" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W tym przykładzie powoduje zamknięcie `TextFieldParser.FileReader`.  
  
 [!code-vb[VbVbalrTextFieldParser#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommentTokens">
      <MemberSignature Language="C#" Value="public string[] CommentTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommentTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentTokens As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ CommentTokens { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommentTokens : string[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Definiuje tokeny komentarza. Token komentarz jest ciągiem, który po umieszczeniu na początku wiersza, wskazuje, że wiersz komentarz i należy ją ignorować przez analizator.</summary>
        <value>Tablica ciągów zawierająca wszystkie komentarza tokeny dla <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to zaawansowane elementu członkowskiego; niewidoczne w IntelliSense dopóki nie klikniesz **wszystkie** kartę.  
  
 Tokenów komentarzy o zerowej długości są ignorowane.  
  
   
  
## Examples  
 W tym przykładzie określa, że dla `TextFieldParser`, `FileReader` wiersze rozpoczynające się od pojedynczego cudzysłowu ('), należy ją ignorować.  
  
 [!code-vb[VbVbalrTextFieldParser#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Token komentarz zawiera biały znak.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Delimiters">
      <MemberSignature Language="C#" Value="public string[] Delimiters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Delimiters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiters As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Delimiters { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiters : string[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Definiuje ograniczniki pliku tekstowego.</summary>
        <value>Tablica ciągów zawierająca wszystkie pola ograniczniki <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość ma znaczenie tylko wtedy, gdy <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> właściwość jest ustawiona na `FieldType.Delimited`.  
  
 Definiowanie ograniczniki dla pliku tekstowego może być również wykonywane z <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> metody.  
  
 W poniższej tabeli przedstawiono przykład zadań, obejmujących `Delimiters` właściwości.  
  
|Do|Zobacz|  
|--------|---------|  
|Odczyt z pliku tekstowego z separatorami|[Instrukcje: odczyt z rozdzielonych przecinkami plików testowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
  
   
  
## Examples  
 W tym przykładzie określa, że ogranicznik dla `TextFieldParser` obiektu `FileReader`, to przecinek (,).  
  
 [!code-vb[VbVbalrTextFieldParser#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Wartość ogranicznika jest ustawiony na znak nowego wiersza, ciągiem pustym lub <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> obiektu.</summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="textFieldParser.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> obiektu.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="textFieldParser.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Wartość logiczna. <see langword="True" /> zwalnia zasoby zarządzane i niezarządzane; <see langword="False" /> wersje tylko zasobów niezarządzanych.</param>
        <summary>Zwalnia zasoby używane przez <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> obiektu.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndOfData">
      <MemberSignature Language="C#" Value="public bool EndOfData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndOfData { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EndOfData : bool" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca <see langword="True" /> Jeśli nie ma żadnych niepustą, z systemem innym niż komentarz linii między bieżącą pozycją kursora i na końcu pliku.</summary>
        <value>
          <see langword="True" /> Jeśli nie ma żadnych więcej danych do odczytania. w przeciwnym razie <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość umożliwia podczas czytania z plików ustalić końca odczytywane dane.  
  
 W poniższej tabeli przedstawiono przykłady dotyczące zadań `EndOfData` właściwości.  
  
|Do|Zobacz|  
|--------|---------|  
|Odczytać zawartość pliku o wartościach rozdzielanych|[Instrukcje: odczyt z rozdzielonych przecinkami plików testowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|Odczytać zawartość pliku z wartościami o stałej szerokości|[Instrukcje: odczyt z plików testowych o stałej szerokości](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 W tym przykładzie użyto `EndofData` właściwości pętli wszystkich pól w pliku o `TextFieldReader`, `FileReader`.  
  
 [!code-vb[VbVbalrTextFieldParser#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLine">
      <MemberSignature Language="C#" Value="public string ErrorLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorLine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorLine { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorLine : string" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca wiersz, który spowodował najnowszej <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> wyjątku.</summary>
        <value>Wiersz, który spowodował najnowszej <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> wyjątku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> były zgłaszane wyjątki, jest zwracany ciąg pusty.  
  
 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> Właściwość może być używana do wyświetlania numer wiersza, który spowodował wyjątek.  
  
 W poniższej tabeli przedstawiono przykłady dotyczące zadań `ErrorLine` właściwości.  
  
|Do|Zobacz|  
|--------|---------|  
|Odczytać zawartość pliku o wartościach rozdzielanych|[Instrukcje: odczyt z rozdzielonych przecinkami plików testowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|Odczytać zawartość pliku z wartościami o stałej szerokości|[Instrukcje: odczyt z plików testowych o stałej szerokości](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 W tym przykładzie użyto `ErrorLine` właściwości, aby wyświetlić wiersz przyczyną bieżącego <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> wyjątku.  
  
 [!code-vb[VbVbalrTextFieldParser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLineNumber">
      <MemberSignature Language="C#" Value="public long ErrorLineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ErrorLineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ErrorLineNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorLineNumber : int64" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca numer wiersza, który spowodował najnowszej <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> wyjątku.</summary>
        <value>Numer wiersza, który spowodował najnowszej <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> wyjątku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> były zgłaszane wyjątki, jest zwracana wartość -1.  
  
 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> Właściwość może być używana do wyświetlania numer wiersza, który spowodował wyjątek. Puste wiersze i komentarze nie są ignorowane podczas określania numer wiersza.  
  
 W poniższej tabeli przedstawiono przykłady dotyczące zadań `ErrorLineNumber` właściwości.  
  
|Do|Zobacz|  
|--------|---------|  
|Odczytać zawartość pliku o wartościach rozdzielanych|[Instrukcje: odczyt z rozdzielonych przecinkami plików testowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|Odczytać zawartość pliku z wartościami o stałej szerokości|[Instrukcje: odczyt z plików testowych o stałej szerokości](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 W tym przykładzie użyto `ErrorLineNumber` właściwość, aby wyświetlić lokalizacji przyczyną bieżącego wiersza <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> wyjątku.  
  
 [!code-vb[VbVbalrTextFieldParser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FieldWidths">
      <MemberSignature Language="C#" Value="public int[] FieldWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] FieldWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldWidths As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ FieldWidths { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FieldWidths : int[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa szerokość każdej kolumny w pliku tekstowym podczas analizowania.</summary>
        <value>Tablica liczba całkowita, która zawiera szerokość każdej kolumny w pliku tekstowym, które są analizowane.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość ma znaczenie tylko wtedy, gdy <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> właściwość jest ustawiona na `FieldType.FixedWidth`. Jeśli ostatni wpis w tablicy jest mniejsza lub równa zero, pole zakłada się, że o zmiennej szerokości.  
  
 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> Metody można również ustawić szerokości pól.  
  
 W poniższej tabeli przedstawiono przykłady dotyczące zadań `FieldWidths` właściwości.  
  
|Do|Zobacz|  
|--------|---------|  
|Odczyt z plików testowych o stałej szerokości|[Instrukcje: odczyt z plików testowych o stałej szerokości](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 Ten przykład odczytuje plik `ParserText.txt`, określając szerokości; pierwszej kolumny jest 5 znaków, drugą jest wartość 10 trzeci jest 11 i jest czwartym o zmiennej szerokości  
  
 [!code-vb[VbVbalrTextFieldParser#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Wartość szerokości, w dowolnym miejscu innym niż ostatni wpis tablicy jest mniejsza lub równa zero.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TextFieldParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TextFieldParser ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="textFieldParser.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umożliwia <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> obiektu, próby zwolnienia zasobów i wykonywać inne operacje oczyszczania, przed jego jest odzyskana przez wyrzucanie elementów bezużytecznych.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFieldsEnclosedInQuotes">
      <MemberSignature Language="C#" Value="public bool HasFieldsEnclosedInQuotes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="VB.NET" Value="Public Property HasFieldsEnclosedInQuotes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFieldsEnclosedInQuotes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HasFieldsEnclosedInQuotes : bool with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa, czy rozdzielonym pliku jest podczas analizowania pól są ujęte w cudzysłów.</summary>
        <value>
          <see langword="True" /> Jeśli pola są ujęte w cudzysłów; w przeciwnym razie <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to zaawansowane elementu członkowskiego; niewidoczne w IntelliSense dopóki nie klikniesz **wszystkie** kartę.  
  
 Jeśli właściwość jest `True`, analizator przyjęto założenie, że pola są ujęte w cudzysłów ("") i może zawierać zakończenia wierszy.  
  
 Jeśli pole jest ujęta w cudzysłów, na przykład `abc, "field2a,field2b", field3` i ta właściwość jest `True`, następnie cały tekst ujęty w cudzysłów zostaną zwrócone, ponieważ jest; zwróci w tym przykładzie `abc|field2a,field2b|field3`. Ustawienie tej właściwości na `False` spowodowałoby, w tym przykładzie zwracany `abc|"field2a|field2b"|field3`.  
  
   
  
## Examples  
 W tym przykładzie `HasFieldsEnclosedInQuotes` właściwości `True` dla `myReader`.  
  
 [!code-vb[VbVbalrTextFieldParser#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public long LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LineNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.LineNumber : int64" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca bieżący numer wiersza, lub zwraca wartość -1, jeśli żadne więcej znaki nie są dostępne w strumieniu.</summary>
        <value>Numer bieżącego wiersza.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to zaawansowane elementu członkowskiego; niewidoczne w IntelliSense dopóki nie klikniesz **wszystkie** kartę.  
  
 Puste wiersze i komentarze nie są ignorowane podczas określania numer wiersza.  
  
   
  
## Examples  
 W tym przykładzie szuka nazwy "Nowak" w pliku tekstowym i raporty wiersze, jakie występuje on na.  
  
 [!code-vb[VbVbalrTextFieldParser#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PeekChars">
      <MemberSignature Language="C#" Value="public string PeekChars (int numberOfChars);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string PeekChars(int32 numberOfChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekChars (numberOfChars As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PeekChars(int numberOfChars);" />
      <MemberSignature Language="F#" Value="member this.PeekChars : int -&gt; string" Usage="textFieldParser.PeekChars numberOfChars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberOfChars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numberOfChars">
          <see langword="Int32" />. Liczba znaków do odczytania. Wymagana.</param>
        <summary>Odczytuje określoną liczbę znaków, bez przesuwania kursora.</summary>
        <returns>Ciąg zawierający określoną liczbę znaków do odczytu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `numberOfChars` Wartość musi być mniejsza niż całkowita liczba znaków w wierszu. Jeśli nie, długość ciągu zwróconego przez `PeekChars` zostanie skrócona do długość wiersza.  
  
 Puste wiersze są ignorowane.  
  
 Znaki końca wiersza nie są zwracane.  
  
 `PeekChars` Metoda przeprowadza analizy nie; znaku końca wiersza w rozdzielonych pól jest interpretowana jako rzeczywisty końca wiersza.  
  
 W poniższej tabeli przedstawiono przykłady dotyczące zadań `PeekChars` metody.  
  
|Do|Zobacz|  
|--------|---------|  
|Przed jego analizowanie określić format pola|[Instrukcje: odczyt z plików tekstowych w wielu formatach](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 W tym przykładzie użyto `PeekChars` można znaleźć końca danych i Zatrzymaj podczas analizowania pliku w tym momencie.  
  
 [!code-vb[VbVbalrTextFieldParser#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="numberOfChars" /> jest mniejsza niż 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ReadFields">
      <MemberSignature Language="C#" Value="public string[] ReadFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string[] ReadFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadFields () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ ReadFields();" />
      <MemberSignature Language="F#" Value="member this.ReadFields : unit -&gt; string[]" Usage="textFieldParser.ReadFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje wszystkie pola w bieżącym wierszu zwraca je w postaci tablicy ciągów i przesuwa kursor do następnego wiersza zawierającego dane.</summary>
        <returns>Tablica ciągów zawierająca wartości pola dla bieżącego wiersza.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby umożliwić użytkownikom analizy plików tekstowych w wielu formatach `ReadFields` metoda sprawdza, czy wartości `TextFieldType`, `Delimiters`, i `FieldWidths`, jeśli są one określone, zawsze jest ona wywoływana. Użytkownicy muszą prawidłowo skonfigurować `TextFieldType` i `FieldWidths` lub `Delimiters` właściwości, zależnie od potrzeb. Jeśli `TextFieldType` ustawiono `Delimited`, i `Delimiters` nie jest ustawiona, lub jeśli `TextFieldType` ustawiono `FixedWidth` i `FieldWidths`, jest zgłaszany wyjątek.  
  
 Jeśli `ReadFields` napotka puste wiersze, są one pominięte, a następnego wiersza niepustych jest zwracany.  
  
 Jeśli `ReadFields` metody nie można przeanalizować bieżącego wiersza, zgłasza wyjątek, a nie przenosi do następnego wiersza. Dzięki temu aplikacja spróbować ponownie przeanalizować wiersza.  
  
 W poniższej tabeli przedstawiono przykłady dotyczące zadań `ReadFields` metody.  
  
|Do|Zobacz|  
|--------|---------|  
|Odczytać zawartość pliku o wartościach rozdzielanych|[Instrukcje: odczyt z rozdzielonych przecinkami plików testowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|Odczytać zawartość pliku z wartościami o stałej szerokości|[Instrukcje: odczyt z plików testowych o stałej szerokości](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 W tym przykładzie użyto `ReadFields` metody można odczytać z pliku rozdzielanego przecinkami `ParserText.txt`. W przykładzie polecenie zapisuje pola `Testfile.txt`.  
  
 [!code-vb[VbVbalrTextFieldParser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">Nie można przeanalizować pola przy użyciu określonego formatu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadLine();" />
      <MemberSignature Language="F#" Value="member this.ReadLine : unit -&gt; string" Usage="textFieldParser.ReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca bieżący wiersz w postaci ciągu i przesuwa kursor do następnego wiersza.</summary>
        <returns>Bieżący wiersz z pliku lub strumienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadLine` Metoda przeprowadza analizy nie; znaku końca wiersza w rozdzielonych pól jest interpretowana jako rzeczywisty końca wiersza.  
  
 `Nothing` jest zwracany, jeśli zostanie osiągnięty koniec pliku.  
  
   
  
## Examples  
 Ten przykład odczytuje za pośrednictwem pliku `ParserText.txt` i zapisuje go do `Testfile.txt`.  
  
 [!code-vb[VbVbalrTextFieldParser#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#15)]  
  
 Jeśli `Testfile.txt` nie istnieje, jest tworzony przez `WriteAllText` metody.  
  
 W tym przykładzie zapisuje pola jako pojedynczy ciąg; do każdej linii wyświetlane w osobnym wierszu w pliku docelowym `VbCrLf` powinna zostać dołączona znak na końcu każdej linii.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadToEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadToEnd();" />
      <MemberSignature Language="F#" Value="member this.ReadToEnd : unit -&gt; string" Usage="textFieldParser.ReadToEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje pozostałej części pliku tekstowego i zwraca go jako ciąg.</summary>
        <returns>Pozostały tekst z pliku lub strumienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to zaawansowane elementu członkowskiego; niewidoczne w IntelliSense dopóki nie klikniesz **wszystkie** kartę.  
  
 Jeśli nie ma nic więcej do odczytu, ponieważ osiągnięto koniec pliku, `Nothing` jest zwracany.  
  
 `ReadToEnd` Metody pomija puste wiersze i komentarze.  
  
   
  
## Examples  
 W tym przykładzie użyto `ReadToEnd` metody odczytać całego pliku `ParserText.txt` i zapisać go do pliku `Testfile.txt`.  
  
 [!code-vb[VbVbalrTextFieldParser#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#10)]  
  
 Jeśli `Testfile.txt` nie istnieje, jest tworzony przez `WriteAllText` metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="SetDelimiters">
      <MemberSignature Language="C#" Value="public void SetDelimiters (params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetDelimiters(string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDelimiters (ParamArray delimiters As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDelimiters(... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberSignature Language="F#" Value="member this.SetDelimiters : string[] -&gt; unit" Usage="textFieldParser.SetDelimiters delimiters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delimiters">Tablica typu <see langword="String" />.</param>
        <summary>Ustawia ograniczniki dla czytnika danych do określonych wartości i ustawia typ pola <see langword="Delimited" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Istniejącą zawartość elementu `Delimiters` właściwości są usuwane, gdy ta metoda jest ustawiona.  
  
 Ta metoda umożliwia ustawienie ograniczników bez tworzenia tablicy.  
  
 W poniższej tabeli przedstawiono przykład zadań, obejmujących `SetDelimiters` metody.  
  
|Do|Zobacz|  
|--------|---------|  
|Przeanalizować plik tekstowy|[Analizowanie plików tekstowych za pomocą obiektu TextFieldParser](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 W tym przykładzie otwiera analizator pole tekstowe i definiuje ogranicznik jako `vbTab`.  
  
 [!code-vb[VbVbalrTextFieldParser#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#4)]  
  
 Zamień na ścieżkę `C:\logs\test.log` ze ścieżką i nazwą pliku chcesz przeanalizować.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ogranicznik jest o zerowej długości.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      </Docs>
    </Member>
    <Member MemberName="SetFieldWidths">
      <MemberSignature Language="C#" Value="public void SetFieldWidths (params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetFieldWidths(int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFieldWidths (ParamArray fieldWidths As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFieldWidths(... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberSignature Language="F#" Value="member this.SetFieldWidths : int[] -&gt; unit" Usage="textFieldParser.SetFieldWidths fieldWidths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fieldWidths">Tablica <see langword="Integer" />.</param>
        <summary>Ustawia ograniczniki dla czytelnika określonymi wartościami.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Istniejącą zawartość elementu `Delimiters` właściwości są czyszczone po jej ustawieniu.  
  
 Ta metoda umożliwia ustawienie ograniczników bez tworzenia tablicy.  
  
 W poniższej tabeli przedstawiono przykładowe zadania dotyczące `SetFieldWidths` metody.  
  
|Do|Zobacz|  
|--------|---------|  
|Przeanalizować plik tekstowy.|[Analizowanie plików tekstowych za pomocą obiektu TextFieldParser](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 W tym przykładzie otwiera analizator pola tekstowego i definiuje szerokość pola jako `5`.  
  
 [!code-vb[VbVbalrTextFieldParser#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#12)]  
  
 Zamień na ścieżkę `C:\logs\test.log` ze ścieżką i nazwą pliku chcesz przeanalizować.  
  
 Poniższy przykład otwiera analizator pola tekstowego i definiuje szerokości pól jako `5`, `10`, a zmienna.  
  
 [!code-vb[VbVbalrTextFieldParser#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#13)]  
  
 Zamień na ścieżkę `C:\logs\test.log` ze ścieżką i nazwą pliku chcesz przeanalizować.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="TextFieldType">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.FileIO.FieldType TextFieldType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFieldType As FieldType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::FileIO::FieldType TextFieldType { Microsoft::VisualBasic::FileIO::FieldType get(); void set(Microsoft::VisualBasic::FileIO::FieldType value); };" />
      <MemberSignature Language="F#" Value="member this.TextFieldType : Microsoft.VisualBasic.FileIO.FieldType with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.FieldType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, czy pliku do przeanalizowania rozdzielanego lub o stałej szerokości.</summary>
        <value>A <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> wartość wskazującą, czy pliku do przeanalizowania rozdzielanego lub o stałej szerokości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna tej właściwości jest rozdzielana.  
  
 W poniższej tabeli przedstawiono przykłady dotyczące zadań `TextFieldType` właściwości.  
  
|Do|Zobacz|  
|--------|---------|  
|Odczyt z pliku tekstowego z separatorami|[Instrukcje: odczyt z rozdzielonych przecinkami plików testowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|Odczyt z plików testowych o stałej szerokości|[Instrukcje: odczyt z plików testowych o stałej szerokości](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|Odczyt z pliku tekstowego w wielu formatach|[Instrukcje: odczyt z plików tekstowych w wielu formatach](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 Ten przykład tworzy `TextFieldParser`, `FileReader`i określa go przecinkami.  
  
 [!code-vb[VbVbalrTextFieldParser#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#19)]  
  
 Ten przykład tworzy `TextFieldParser`, `FileReader`i określa, że jest ona stałej szerokości.  
  
 [!code-vb[VbVbalrTextFieldParser#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public bool TrimWhiteSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimWhiteSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property TrimWhiteSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimWhiteSpace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TrimWhiteSpace : bool with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, czy powinien zostać przycięty białe wiodące i końcowe z wartości pól.</summary>
        <value>
          <see langword="True" /> Jeśli spacji wiodących i końcowych białych powinien zostać przycięty z wartości pola. w przeciwnym razie <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna dla tej właściwości to `True`.  
  
   
  
## Examples  
 Ten przykład tworzy `TextFieldParser`, `FileReader`i ustawia `TrimWhiteSpace` właściwości `True`.  
  
 [!code-vb[VbVbalrTextFieldParser#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>