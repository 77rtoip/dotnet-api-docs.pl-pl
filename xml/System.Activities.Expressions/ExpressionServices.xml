<Type Name="ExpressionServices" FullName="System.Activities.Expressions.ExpressionServices">
  <Metadata><Meta Name="ms.openlocfilehash" Value="27bc1be7122345ea6d5ff67cf9a41e0624511115" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69325688" /></Metadata><TypeSignature Language="C#" Value="public static class ExpressionServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ExpressionServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Expressions.ExpressionServices" />
  <TypeSignature Language="VB.NET" Value="Public Class ExpressionServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionServices abstract sealed" />
  <TypeSignature Language="F#" Value="type ExpressionServices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b04f2-101">Interfejs API transformacji służący do konwertowania wyrażeń rozpoznawania środowiska na drzewo aktywności.</span><span class="sxs-lookup"><span data-stu-id="b04f2-101">A transformation API used to convert environment aware expressions to an activity tree.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b04f2-102">Metody konwersji w tej klasie przekształcają określone wyrażenia lambda, które mogą zawierać wiele wyrażeń podrzędnych w drzewach aktywności składających się z hierarchii działań.</span><span class="sxs-lookup"><span data-stu-id="b04f2-102">The conversion methods in this class transform the specified lambda expressions, which can contain multiple sub-expressions, into activity trees composed of a hierarchy of activities.</span></span> <span data-ttu-id="b04f2-103">Zdecydowanie zaleca się używanie tych metod konwersji zamiast tworzenia wystąpień działań wyrażenia bezpośrednio, ponieważ zapewniają one wyższy poziom abstrakcji i umożliwiają bardziej intuicyjne wdrożenie przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="b04f2-103">It is strongly recommended to use these conversion methods instead of instantiating expression activities directly because they provide a higher level of abstraction and enable you to implement your workflow more intuitively.</span></span> <span data-ttu-id="b04f2-104">Zobacz przykłady, aby uzyskać więcej informacji.</span><span class="sxs-lookup"><span data-stu-id="b04f2-104">See the examples for more information.</span></span>  
  
 <span data-ttu-id="b04f2-105">Metody konwersji w programie <xref:System.Activities.Expressions.ExpressionServices> są przeznaczone do pracy ze zmiennymi i stałymi zdefiniowanymi wewnątrz przepływu pracy lub są przekazane do przepływu pracy za pośrednictwem argumentów.</span><span class="sxs-lookup"><span data-stu-id="b04f2-105">The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b04f2-106">Poniższy przykład kodu wywołuje <xref:System.Activities.Expressions.ExpressionServices.Convert%2A> , aby obliczyć sumę elementu tablicy w indeksie 0 i element tablicy przy indeksie 1.</span><span class="sxs-lookup"><span data-stu-id="b04f2-106">The following code example calls <xref:System.Activities.Expressions.ExpressionServices.Convert%2A> to compute the sum of the array element at index 0 and the array element at index 1.</span></span> <span data-ttu-id="b04f2-107">Następnie obliczona suma jest przypisana do zmiennej i jest drukowana w konsoli programu.</span><span class="sxs-lookup"><span data-stu-id="b04f2-107">Next, the resulting sum is assigned to a variable and is printed to the console.</span></span>  
  
```csharp  
  
public static void ComputeSumWithConvert()  
{  
    var arrayvar = new Variable<int[]>("arrayvar", new int[] { 1, 2 });  
    var intvar = new Variable<int>("intvar");              
  
    // Use ExpressionServices.Convert() to convert the composite lambda expression  
    // that represents the sum of array elements at index 0 and 1.  
    Activity<int> activity1 = ExpressionServices.Convert<int>(ctx => arrayvar.Get(ctx)[0] + arrayvar.Get(ctx)[1]);  
  
    Activity seq = new Sequence  
    {  
        Variables = { arrayvar, intvar },  
        Activities =  
        {                      
            // Get the sum value.  
            new Assign<int>  
            {  
                To = intvar,  
                Value = activity1,  
            },  
            // Print the sum value of 3 to the console.  
            new WriteLine  
            {                          
                Text = new InArgument<string>(ctx => intvar.Get(ctx).ToString()),  
            },  
        }  
    };  
  
    WorkflowInvoker.Invoke(seq);  
  
}  
  
```  
  
 <span data-ttu-id="b04f2-108">Poniższy przykład kodu jest dostępny do celów porównawczych.</span><span class="sxs-lookup"><span data-stu-id="b04f2-108">The following code example is provided for comparison purposes.</span></span> <span data-ttu-id="b04f2-109">W drugim przykładzie pokazano, jak obliczyć sumę przez utworzenie wystąpienia <xref:System.Activities.Expressions.Add%603> działania wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="b04f2-109">This second example shows how to compute the sum by instantiating the <xref:System.Activities.Expressions.Add%603> expression activity.</span></span> <span data-ttu-id="b04f2-110">Dwa przykłady są funkcjonalnie równoważne, ale w przypadku, gdy drugie podejście obejmuje więcej kodowania i nie jest tak proste jak wywołanie <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>.</span><span class="sxs-lookup"><span data-stu-id="b04f2-110">The two examples are functionally equivalent but as you can see the second approach involves more coding and is not as straightforward as calling <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>.</span></span> <span data-ttu-id="b04f2-111">W związku z tym pierwszy przykład jest zalecany.</span><span class="sxs-lookup"><span data-stu-id="b04f2-111">Therefore the first example is recommended.</span></span>  
  
```csharp  
  
public static void ComputeSumWithExpressionActivity()  
{  
    var arrayvar = new Variable<int[]>("arrayvar", new int[] { 1, 2 });  
    var intvar = new Variable<int>("intvar");  
  
    // Create an Add activity to compute the sum of array elements at index 0 and 1.  
    Activity<int> activity1 = new Add<int, int, int>  
    {  
        Left = new ArrayItemValue<int>  
        {  
            Array = arrayvar,  
            Index = 0,  
        },  
        Right = new ArrayItemValue<int>  
        {  
            Array = arrayvar,  
            Index = 1,  
        }  
    };              
  
    Activity seq = new Sequence  
    {  
        Variables = { arrayvar, intvar },  
        Activities =  
        {  
            // Get the sum value.  
            new Assign<int>  
            {  
                To = intvar,  
                Value = activity1,  
            },  
            // Print the sum value of 3 to the console.   
            new WriteLine  
            {                          
                Text = new InArgument<string>(ctx => intvar.Get(ctx).ToString()),  
            },                      
        }  
    };  
  
    WorkflowInvoker.Invoke(seq);  
  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Convert&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Activities.Activity&lt;TResult&gt; Convert&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,TResult&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.Activity`1&lt;!!TResult&gt; Convert&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !!TResult&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.ExpressionServices.Convert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Convert(Of TResult) (expression As Expression(Of Func(Of ActivityContext, TResult))) As Activity(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Activities::Activity&lt;TResult&gt; ^ Convert(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, TResult&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext, 'Result&gt;&gt; -&gt; System.Activities.Activity&lt;'Result&gt;" Usage="System.Activities.Expressions.ExpressionServices.Convert expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Activity&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="b04f2-112">Typ, do którego jest konwertowane wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="b04f2-112">The type the expression is being converted to.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="b04f2-113">Konwertowane wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="b04f2-113">The expression being converted.</span></span></param>
        <summary><span data-ttu-id="b04f2-114">Konwertuje wyrażenie obsługujące środowisko przepływu pracy na drzewo aktywności.</span><span class="sxs-lookup"><span data-stu-id="b04f2-114">Converts a workflow environment-aware expression to an activity tree.</span></span></summary>
        <returns><span data-ttu-id="b04f2-115">Wyrażenie konwertowane.</span><span class="sxs-lookup"><span data-stu-id="b04f2-115">The converted expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b04f2-116">Aby zapoznać się z <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>przykładem kodu, zobacz. <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A></span><span class="sxs-lookup"><span data-stu-id="b04f2-116">For a code example of <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>, see <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A>.</span></span>  
  
 <span data-ttu-id="b04f2-117">Metody konwersji w programie <xref:System.Activities.Expressions.ExpressionServices> są przeznaczone do pracy ze zmiennymi i stałymi zdefiniowanymi wewnątrz przepływu pracy lub są przekazane do przepływu pracy za pośrednictwem argumentów.</span><span class="sxs-lookup"><span data-stu-id="b04f2-117">The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertReference&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Activities.Activity&lt;System.Activities.Location&lt;TResult&gt;&gt; ConvertReference&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,TResult&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.Activity`1&lt;class System.Activities.Location`1&lt;!!TResult&gt;&gt; ConvertReference&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !!TResult&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.ExpressionServices.ConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertReference(Of TResult) (expression As Expression(Of Func(Of ActivityContext, TResult))) As Activity(Of Location(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Activities::Activity&lt;System::Activities::Location&lt;TResult&gt; ^&gt; ^ ConvertReference(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, TResult&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="static member ConvertReference : System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext, 'Result&gt;&gt; -&gt; System.Activities.Activity&lt;System.Activities.Location&lt;'Result&gt;&gt;" Usage="System.Activities.Expressions.ExpressionServices.ConvertReference expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Activity&lt;System.Activities.Location&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="b04f2-118">Typ, do którego jest konwertowane wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="b04f2-118">The type the expression is being converted to.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="b04f2-119">Konwertowane wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="b04f2-119">The expression being converted.</span></span></param>
        <summary><span data-ttu-id="b04f2-120">Konwertuje odwołanie do wyrażenia obsługującego środowisko przepływu pracy w drzewie aktywności.</span><span class="sxs-lookup"><span data-stu-id="b04f2-120">Converts a reference to a workflow environment-aware expression to an activity tree.</span></span></summary>
        <returns><span data-ttu-id="b04f2-121">Wyrażenie konwertowane.</span><span class="sxs-lookup"><span data-stu-id="b04f2-121">The converted expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b04f2-122">Metody konwersji w programie <xref:System.Activities.Expressions.ExpressionServices> są przeznaczone do pracy ze zmiennymi i stałymi zdefiniowanymi wewnątrz przepływu pracy lub są przekazane do przepływu pracy za pośrednictwem argumentów.</span><span class="sxs-lookup"><span data-stu-id="b04f2-122">The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b04f2-123">Poniższe dwa przykłady kodu ilustrują użycie <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A> i. <xref:System.Activities.Expressions.ExpressionServices.Convert%2A></span><span class="sxs-lookup"><span data-stu-id="b04f2-123">The following two code examples illustrate the use of <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A> and <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>.</span></span> <span data-ttu-id="b04f2-124">Pierwszy przykład kodu używa <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A> `Assign` w działaniu do konwersji wyrażenia lambda na właściwość String, która ma przypisaną wartość.</span><span class="sxs-lookup"><span data-stu-id="b04f2-124">The first code example uses <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A> in an `Assign` activity to convert a lambda expression into a string property that is assigned a value.</span></span> <span data-ttu-id="b04f2-125">Następnie jest wywoływana w celu przekonwertowania wyrażenia lambda na wartość właściwości String, która jest drukowana do konsoli `WriteLine` w działaniu. <xref:System.Activities.Expressions.ExpressionServices.Convert%2A></span><span class="sxs-lookup"><span data-stu-id="b04f2-125">Next, <xref:System.Activities.Expressions.ExpressionServices.Convert%2A> is called to convert a lambda expression into a string property value that is printed to the console in the `WriteLine` activity.</span></span>  
  
```csharp  
  
// Define a struct with a property named AProperty.  
struct StructWithProperty  
{  
    public string AProperty { get; set; }  
}  
  
public static void ConvertReferenceForValueTypePropertyReferenceSample()  
{              
    // Create a variable of type StructWithProperty to store the property.  
    var swpvar = new Variable<StructWithProperty>("swpvar", new StructWithProperty());  
  
    Activity myActivity = new Sequence  
    {  
        Variables = { swpvar },  
        Activities =   
        {                      
            // Create an Assign activity to assign a value to the AProperty property.  
            new Assign<string>  
            {  
                To = ExpressionServices.ConvertReference<string>(ctx => swpvar.Get(ctx).AProperty),  
                // Assign a string literal to AProperty.  
                Value = "Hello",  
            },  
            // Print the new property value to the console.  
            new WriteLine()  
            {  
                Text = ExpressionServices.Convert<string>(ctx => swpvar.Get(ctx).AProperty),  
            }  
        }  
    };  
  
    // Invoke the Sequence activity.  
    WorkflowInvoker.Invoke(myActivity);  
}  
  
```  
  
 <span data-ttu-id="b04f2-126">Poniższy przykład kodu jest podobny do poprzedniego, z wyjątkiem tego, że wyrażenie do przekonwertowania jest odwołaniem do elementu w tablicy wielowymiarowej.</span><span class="sxs-lookup"><span data-stu-id="b04f2-126">The following code example is like the previous one except that the expression to convert is a reference to an item in a multidimensional array.</span></span>  
  
```csharp  
  
public static void ConvertReferenceForMultidimensionalArrayItemReferenceSample()  
{  
    // Create a variable to store a multidimensional array.  
    var arrayvar = new Variable<int[,]>("arrayvar", new int[4, 5]);  
  
    Activity myActivity = new Sequence  
    {  
        Variables = { arrayvar },  
        Activities =   
        {                      
            // Create an Assign activity to assign a value to the array item at index [1,2].  
            new Assign<int>  
            {  
                To = ExpressionServices.ConvertReference<int>(ctx => arrayvar.Get(ctx)[1, 2]),  
                // Assign an integer value to the array item at row 1 column 2.  
                Value = 1,  
            },  
            // Print the array item value to the console.  
            new WriteLine()  
            {  
                Text = ExpressionServices.Convert<string>(ctx => arrayvar.Get(ctx)[1, 2].ToString()),  
            }  
        }  
    };  
  
    // Invoke the Sequence activity.  
    WorkflowInvoker.Invoke(myActivity);  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvert&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static bool TryConvert&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,TResult&gt;&gt; expression, out System.Activities.Activity&lt;TResult&gt; result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryConvert&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !!TResult&gt;&gt; expression, [out] class System.Activities.Activity`1&lt;!!TResult&gt;&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.ExpressionServices.TryConvert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryConvert(Of TResult) (expression As Expression(Of Func(Of ActivityContext, TResult)), ByRef result As Activity(Of TResult)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static bool TryConvert(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, TResult&gt; ^&gt; ^ expression, [Runtime::InteropServices::Out] System::Activities::Activity&lt;TResult&gt; ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryConvert : System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext, 'Result&gt;&gt; *  -&gt; bool" Usage="System.Activities.Expressions.ExpressionServices.TryConvert (expression, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,TResult&gt;&gt;" />
        <Parameter Name="result" Type="System.Activities.Activity&lt;TResult&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="b04f2-127">Typ, do którego jest konwertowane wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="b04f2-127">The type the expression is being converted to.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="b04f2-128">Konwertowane wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="b04f2-128">The expression being converted.</span></span></param>
        <param name="result"><span data-ttu-id="b04f2-129">Wyrażenie konwertowane.</span><span class="sxs-lookup"><span data-stu-id="b04f2-129">The converted expression.</span></span></param>
        <summary><span data-ttu-id="b04f2-130">Konwertuje wyrażenie obsługujące środowisko przepływu pracy na drzewo aktywności.</span><span class="sxs-lookup"><span data-stu-id="b04f2-130">Converts a workflow environment-aware expression to an activity tree.</span></span></summary>
        <returns><span data-ttu-id="b04f2-131"><see langword="true" />Jeśli wyrażenie może być konwertowane; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="b04f2-131"><see langword="true" /> if the expression can be converted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b04f2-132">Metody konwersji w programie <xref:System.Activities.Expressions.ExpressionServices> są przeznaczone do pracy ze zmiennymi i stałymi zdefiniowanymi wewnątrz przepływu pracy lub są przekazane do przepływu pracy za pośrednictwem argumentów.</span><span class="sxs-lookup"><span data-stu-id="b04f2-132">The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvertReference&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static bool TryConvertReference&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,TResult&gt;&gt; expression, out System.Activities.Activity&lt;System.Activities.Location&lt;TResult&gt;&gt; result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryConvertReference&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !!TResult&gt;&gt; expression, [out] class System.Activities.Activity`1&lt;class System.Activities.Location`1&lt;!!TResult&gt;&gt;&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.ExpressionServices.TryConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{System.Activities.Location{``0}}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryConvertReference(Of TResult) (expression As Expression(Of Func(Of ActivityContext, TResult)), ByRef result As Activity(Of Location(Of TResult))) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static bool TryConvertReference(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, TResult&gt; ^&gt; ^ expression, [Runtime::InteropServices::Out] System::Activities::Activity&lt;System::Activities::Location&lt;TResult&gt; ^&gt; ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryConvertReference : System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext, 'Result&gt;&gt; *  -&gt; bool" Usage="System.Activities.Expressions.ExpressionServices.TryConvertReference (expression, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,TResult&gt;&gt;" />
        <Parameter Name="result" Type="System.Activities.Activity&lt;System.Activities.Location&lt;TResult&gt;&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="b04f2-133">Typ, do którego jest konwertowane wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="b04f2-133">The type the expression is being converted to.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="b04f2-134">Konwertowane wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="b04f2-134">The expression being converted.</span></span></param>
        <param name="result"><span data-ttu-id="b04f2-135">Wyrażenie konwertowane.</span><span class="sxs-lookup"><span data-stu-id="b04f2-135">The converted expression.</span></span></param>
        <summary><span data-ttu-id="b04f2-136">Konwertuje odwołanie do wyrażenia obsługującego środowisko przepływu pracy w drzewie aktywności.</span><span class="sxs-lookup"><span data-stu-id="b04f2-136">Converts a reference to a workflow environment-aware expression to an activity tree.</span></span></summary>
        <returns><span data-ttu-id="b04f2-137"><see langword="true" />Jeśli wyrażenie może być konwertowane; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="b04f2-137"><see langword="true" /> if the expression can be converted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b04f2-138">Metody konwersji w programie <xref:System.Activities.Expressions.ExpressionServices> są przeznaczone do pracy ze zmiennymi i stałymi zdefiniowanymi wewnątrz przepływu pracy lub są przekazane do przepływu pracy za pośrednictwem argumentów.</span><span class="sxs-lookup"><span data-stu-id="b04f2-138">The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
