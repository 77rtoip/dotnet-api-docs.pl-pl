<Type Name="LambdaReference&lt;T&gt;" FullName="System.Activities.Expressions.LambdaReference&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e627c972219e8699e187f440d1937aef86cd55ab" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="63926578" /></Metadata><TypeSignature Language="C#" Value="public sealed class LambdaReference&lt;T&gt; : System.Activities.CodeActivity&lt;System.Activities.Location&lt;T&gt;&gt;, System.Activities.XamlIntegration.IValueSerializableExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LambdaReference`1&lt;T&gt; extends System.Activities.CodeActivity`1&lt;class System.Activities.Location`1&lt;!T&gt;&gt; implements class System.Activities.XamlIntegration.IValueSerializableExpression" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Expressions.LambdaReference`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LambdaReference(Of T)&#xA;Inherits CodeActivity(Of Location(Of T))&#xA;Implements IValueSerializableExpression" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class LambdaReference sealed : System::Activities::CodeActivity&lt;System::Activities::Location&lt;T&gt; ^&gt;, System::Activities::XamlIntegration::IValueSerializableExpression" />
  <TypeSignature Language="F#" Value="type LambdaReference&lt;'T&gt; = class&#xA;    inherit CodeActivity&lt;Location&lt;'T&gt;&gt;&#xA;    interface IValueSerializableExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Activities.CodeActivity&lt;System.Activities.Location&lt;T&gt;&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TResult">System.Activities.Location&lt;T&gt;</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Activities.XamlIntegration.IValueSerializableExpression</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">Typ wartości zwracanej przez wyrażenie.</typeparam>
    <summary>Reprezentuje wyrażenie lambda, używane jako l wartością, która obsługuje powiązanie <see cref="F:System.Activities.ArgumentDirection.Out" /> argumentów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Expressions.LambdaReference%601> Służy do lambda wyrażenia określone w kodzie i nie można serializować do XAML. Jeśli próba serializowania przepływu pracy, który zawiera <xref:System.Activities.Expressions.LambdaReference%601> nawiązaniu <xref:System.Activities.Expressions.LambdaSerializationException> zgłaszany. Jeśli zawierającego przepływ pracy wymaga serializacji XAML, użyj <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> lub użyj <xref:System.Activities.Expressions.ExpressionServices> przekonwertować <xref:System.Activities.Expressions.LambdaReference%601> do formatu, który może być serializowany.  
  
 To działanie używa LINQ do dostawcy jednostki można obliczyć wartości wyrażenia LINQ. Wszystkie wyrażenia LINQ używana z tym działaniem musi być evaluatable przez ADO.Net Entity Data Model. Na przykład wyrażenia LINQ nie można odwoływać się do działań, zmienne i argumenty samego przepływu pracy.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LambdaReference (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,T&gt;&gt; locationExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !T&gt;&gt; locationExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.LambdaReference`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (locationExpression As Expression(Of Func(Of ActivityContext, T)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LambdaReference(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, T&gt; ^&gt; ^ locationExpression);" />
      <MemberSignature Language="F#" Value="new System.Activities.Expressions.LambdaReference&lt;'T&gt; : System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext, 'T&gt;&gt; -&gt; System.Activities.Expressions.LambdaReference&lt;'T&gt;" Usage="new System.Activities.Expressions.LambdaReference&lt;'T&gt; locationExpression" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="locationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="locationExpression">Wartość wyrażenia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Activities.Expressions.LambdaReference`1" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMetadata">
      <MemberSignature Language="C#" Value="protected override void CacheMetadata (System.Activities.CodeActivityMetadata metadata);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CacheMetadata(valuetype System.Activities.CodeActivityMetadata metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.LambdaReference`1.CacheMetadata(System.Activities.CodeActivityMetadata)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CacheMetadata (metadata As CodeActivityMetadata)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CacheMetadata(System::Activities::CodeActivityMetadata metadata);" />
      <MemberSignature Language="F#" Value="override this.CacheMetadata : System.Activities.CodeActivityMetadata -&gt; unit" Usage="lambdaReference.CacheMetadata metadata" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Activities.CodeActivityMetadata" />
      </Parameters>
      <Docs>
        <param name="metadata">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public bool CanConvertToString (System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.LambdaReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanConvertToString (context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertToString : System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertToString : System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="lambdaReference.CanConvertToString context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.XamlIntegration.IValueSerializableExpression.CanConvertToString(System.Windows.Markup.IValueSerializerContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="context">Informacje o kontekście, który jest używany na potrzeby konwersji.</param>
        <summary>Ta metoda zawsze zwraca <see langword="true" /> i jest używana w połączeniu z <see cref="M:System.Activities.Expressions.LambdaReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" /> do komunikatów o błędach opisowy podczas próby serializacji to działanie ma XAML.</summary>
        <returns>Ta metoda zawsze zwraca <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Expressions.LambdaReference%601> Służy do lambda wyrażenia określone w kodzie i nie można serializować do XAML. Jeśli próba serializowania przepływu pracy, który zawiera <xref:System.Activities.Expressions.LambdaReference%601> nawiązaniu <xref:System.Activities.Expressions.LambdaSerializationException> zgłaszany. Jeśli zawierającego przepływ pracy wymaga serializacji XAML, użyj <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> lub użyj <xref:System.Activities.Expressions.ExpressionServices> przekonwertować <xref:System.Activities.Expressions.LambdaReference%601> do formatu, który może być serializowany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public string ConvertToString (System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.LambdaReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertToString (context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertToString : System.Windows.Markup.IValueSerializerContext -&gt; string&#xA;override this.ConvertToString : System.Windows.Markup.IValueSerializerContext -&gt; string" Usage="lambdaReference.ConvertToString context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.XamlIntegration.IValueSerializableExpression.ConvertToString(System.Windows.Markup.IValueSerializerContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="context">Informacje o kontekście, który jest używany na potrzeby konwersji.</param>
        <summary>Zgłasza <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> i jest używana w połączeniu z <see cref="M:System.Activities.Expressions.LambdaReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" /> do komunikatów o błędach opisowy podczas próby serializacji to działanie ma XAML.</summary>
        <returns>Ta metoda wyrzuca <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> po wywołaniu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Expressions.LambdaReference%601> Służy do lambda wyrażenia określone w kodzie i nie można serializować do XAML. Jeśli próba serializowania przepływu pracy, który zawiera <xref:System.Activities.Expressions.LambdaReference%601> nawiązaniu <xref:System.Activities.Expressions.LambdaSerializationException> zgłaszany. Jeśli zawierającego przepływ pracy wymaga serializacji XAML, użyj <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601> lub użyj <xref:System.Activities.Expressions.ExpressionServices> przekonwertować <xref:System.Activities.Expressions.LambdaReference%601> do formatu, który może być serializowany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="protected override System.Activities.Location&lt;T&gt; Execute (System.Activities.CodeActivityContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Activities.Location`1&lt;!T&gt; Execute(class System.Activities.CodeActivityContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.LambdaReference`1.Execute(System.Activities.CodeActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Execute (context As CodeActivityContext) As Location(Of T)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Activities::Location&lt;T&gt; ^ Execute(System::Activities::CodeActivityContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.Execute : System.Activities.CodeActivityContext -&gt; System.Activities.Location&lt;'T&gt;" Usage="lambdaReference.Execute context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Location&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.CodeActivityContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>