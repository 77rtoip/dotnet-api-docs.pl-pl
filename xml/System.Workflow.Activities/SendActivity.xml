<Type Name="SendActivity" FullName="System.Workflow.Activities.SendActivity">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2b1c478fc5745c0b2a52f6bd1cafd331b1312dd7" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36453162" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SendActivity : System.Workflow.ComponentModel.Activity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SendActivity extends System.Workflow.ComponentModel.Activity" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Activities.SendActivity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SendActivity&#xA;Inherits Activity" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendActivity sealed : System::Workflow::ComponentModel::Activity" />
  <TypeSignature Language="F#" Value="type SendActivity = class&#xA;    inherit Activity" />
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.ComponentModel.Activity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer(typeof(System.Workflow.Activities.SendActivityDesigner), typeof(System.ComponentModel.Design.IDesigner))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Workflow.Activities.SendActivity), "Design.Resources.SendActivity.png")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.Activities.SendActivityValidator))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Aktywność klienta, który modele synchroniczne wywołania operacji usługi Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.Activities.SendActivity> Działania umożliwia uczestniczyć w komunikacji z usługą WCF za pomocą wstępnie zdefiniowanych wymiany komunikatów.  
  
> [!NOTE]
>  <xref:System.Workflow.Activities.SendActivity> Działanie jest blokowanie działania, co oznacza, że wykonywania przepływu pracy jest zablokowany do czasu wykonywania ukończeniu działania.  
  
 Wzorce wymiany komunikatów obsługiwanych przez <xref:System.Workflow.Activities.SendActivity> działania obejmują:  
  
-   Jednokierunkowej operacji wysyłania wiadomości  
  
     <xref:System.Workflow.Activities.SendActivity> Działanie wysyła komunikat, ale nie oczekuje na odpowiedź z usługi.  
  
-   Wyślij żądanie - odebrać odpowiedzi  
  
     <xref:System.Workflow.Activities.SendActivity> Działanie wysyła komunikat i czeka, aż Odebrano odpowiedź z usługi.  
  
-   Wyślij żądanie - odbieranie błędów  
  
     <xref:System.Workflow.Activities.SendActivity> Działanie wysyła komunikat i czekać na odpowiedź lub błąd jest odbierane z usługi. Podczas wykonywania działania wysyłania zgłasza wszystkie błędy, które zostały odebrane z serwera. <xref:System.Workflow.ComponentModel.FaultHandlerActivity> działania mogą służyć do obsługi błędów w przepływie pracy klienta.  
  
> [!NOTE]
>  To działanie wchodzi w skład [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]. Odpowiednik działania w [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], zobacz <xref:System.ServiceModel.Activities.Send>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Workflow.Activities.ReceiveActivity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Workflow.Activities.SendActivity" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Activities.SendActivity> Konstruktor jest zazwyczaj wywoływana w pliku kodu obok utworzonego przez projektanta przepływów pracy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SendActivity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.SendActivity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SendActivity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Workflow.Activities.SendActivity" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Activities.SendActivity> Konstruktor jest zazwyczaj wywoływana w pliku kodu obok utworzonego przez projektanta przepływów pracy.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób utworzenia nowego wystąpienia <xref:System.Workflow.Activities.SendActivity> klasy.  W tym przykładzie pochodzi z `Conversations` przykład zestawu SDK.  
  
 [!code-csharp[SendActivity#16](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SendActivity (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.SendActivity.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SendActivity(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Workflow.Activities.SendActivity : string -&gt; System.Workflow.Activities.SendActivity" Usage="new System.Workflow.Activities.SendActivity name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Wartość przypisana do <see cref="P:System.Workflow.ComponentModel.Activity.Name" /> podczas działania został zainicjowany.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Workflow.Activities.SendActivity" /> klasy z określonym <see langword="name" /> właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Activities.SendActivity> Konstruktor jest zazwyczaj wywoływana w pliku kodu obok utworzonego przez projektanta przepływów pracy.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób utworzenia nowego wystąpienia <xref:System.Workflow.Activities.SendActivity> klasy.  
  
 [!code-csharp[SendActivity#17](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AfterResponse">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Activities.SendActivityEventArgs&gt; AfterResponse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Activities.SendActivityEventArgs&gt; AfterResponse" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Activities.SendActivity.AfterResponse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AfterResponse As EventHandler(Of SendActivityEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Activities::SendActivityEventArgs ^&gt; ^ AfterResponse;" />
      <MemberSignature Language="F#" Value="member this.AfterResponse : EventHandler&lt;System.Workflow.Activities.SendActivityEventArgs&gt; " Usage="member this.AfterResponse : System.EventHandler&lt;System.Workflow.Activities.SendActivityEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Activities.SendActivityEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po Odebrano odpowiedź z usługi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten program obsługi zdarzeń skojarzonych z tym zdarzeniem można odczytać wartości zwracanej z operacji usługi wywołany.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie `AfterResponse` zdarzeń.  
  
 [!code-csharp[SendActivity#2](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AfterResponseEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty AfterResponseEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty AfterResponseEvent" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.Activities.SendActivity.AfterResponseEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AfterResponseEvent As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Workflow::ComponentModel::DependencyProperty ^ AfterResponseEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable AfterResponseEvent : System.Workflow.ComponentModel.DependencyProperty" Usage="System.Workflow.Activities.SendActivity.AfterResponseEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> którego element docelowy <see cref="E:System.Workflow.Activities.SendActivity.AfterResponse" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zależności zdarzeń może służyć do powiązania działanie send <xref:System.Workflow.Activities.SendActivity.AfterResponse> zdarzenia w celu obsługi zdarzenia publicznego w klasie przepływu pracy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSend">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Activities.SendActivityEventArgs&gt; BeforeSend;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Activities.SendActivityEventArgs&gt; BeforeSend" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Activities.SendActivity.BeforeSend" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BeforeSend As EventHandler(Of SendActivityEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Activities::SendActivityEventArgs ^&gt; ^ BeforeSend;" />
      <MemberSignature Language="F#" Value="member this.BeforeSend : EventHandler&lt;System.Workflow.Activities.SendActivityEventArgs&gt; " Usage="member this.BeforeSend : System.EventHandler&lt;System.Workflow.Activities.SendActivityEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Activities.SendActivityEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje przed <see cref="T:System.Workflow.Activities.SendActivity" /> działanie wysyła wiadomość do usługi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten program obsługi zdarzeń skojarzonych z tym zdarzeniem może służyć do ustawiania wartości parametru wywoływaną operację usługi.  
  
> [!NOTE]
>  Kontekst <xref:System.Workflow.Activities.SendActivity> nie można ustawić w tej obsłudze zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie `BeforeSend` zdarzeń. W tym przykładzie pochodzi z `Conversations` przykład zestawu SDK.  
  
 [!code-csharp[SendActivity#3](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty BeforeSendEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty BeforeSendEvent" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.Activities.SendActivity.BeforeSendEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BeforeSendEvent As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Workflow::ComponentModel::DependencyProperty ^ BeforeSendEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable BeforeSendEvent : System.Workflow.ComponentModel.DependencyProperty" Usage="System.Workflow.Activities.SendActivity.BeforeSendEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> którego element docelowy <see cref="E:System.Workflow.Activities.SendActivity.BeforeSend" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zależności zdarzeń może służyć do powiązania działanie send <xref:System.Workflow.Activities.SendActivity.BeforeSend> zdarzenia w celu obsługi zdarzenia publicznego w klasie przepływu pracy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelToken">
      <MemberSignature Language="C#" Value="public System.Workflow.Activities.ChannelToken ChannelToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Activities.ChannelToken ChannelToken" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.SendActivity.ChannelToken" />
      <MemberSignature Language="VB.NET" Value="Public Property ChannelToken As ChannelToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::Activities::ChannelToken ^ ChannelToken { System::Workflow::Activities::ChannelToken ^ get(); void set(System::Workflow::Activities::ChannelToken ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ChannelToken : System.Workflow.Activities.ChannelToken with get, set" Usage="System.Workflow.Activities.SendActivity.ChannelToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.Activities.ChannelToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Workflow.Activities.ChannelToken" /> używane przez <see cref="T:System.Workflow.Activities.SendActivity" /> do samej siebie skojarzenia z kanałem klienta.</summary>
        <value>A <see cref="T:System.Workflow.Activities.ChannelToken" /> Definiowanie klienta kanału, który <see cref="T:System.Workflow.Activities.SendActivity" /> używany do komunikacji z usługą.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Token kanału Określa nazwę kanału, zakres kanału i nazwa konfiguracji punktu końcowego, który ma być używana podczas ustanawiania kanału. Nazwa punktu końcowego w pliku konfiguracji ma address, binding i informacje kontraktu usługi który <xref:System.Workflow.Activities.SendActivity> działania komunikuje się z.  
  
 Token kanału określa także nazwę kanału unikatowy i nazwa działania właściciela dla tokenu. Token kanału może być współużytkowana z wielu działań send, których chcesz używać tego samego punktu końcowego do komunikowania się z usługą.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób uzyskiwania dostępu do `ChannelToken` właściwości. W tym przykładzie pochodzi z `CalculatorClient` przykład zestawu SDK.  
  
 [!code-csharp[SendActivity#7](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; Context { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; Context" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.SendActivity.Context" />
      <MemberSignature Language="VB.NET" Value="Public Property Context As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ Context { System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ get(); void set(System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Collections.Generic.IDictionary&lt;string, string&gt; with get, set" Usage="System.Workflow.Activities.SendActivity.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca słownik zawierający kontekst używany do komunikacji między klientem a service, który komunikuje się z, łącznie z czynności, takich jak identyfikator korelacji.</summary>
        <value>Słownik na podstawie kolekcji, która zawiera <see cref="T:System.Xml.XmlQualifiedName" /> kluczy i skojarzone z nimi <see cref="T:System.String" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informacje o kontekście jest używany do komunikacji między klientem a usługą w nim komunikuje się z oraz czynności, takich jak identyfikator korelacji.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób uzyskiwania dostępu do `Context` właściwości. W tym przykładzie pochodzi z `CalculatorClient` przykład zestawu SDK.  
  
 [!code-csharp[SendActivity#8](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomAddress">
      <MemberSignature Language="C#" Value="public string CustomAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomAddress" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.SendActivity.CustomAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CustomAddress { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomAddress : string with get, set" Usage="System.Workflow.Activities.SendActivity.CustomAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia niestandardowy adres używany do komunikacji z usługą.</summary>
        <value>Wartość ciągu, którego wartość jest adresem usługi nasłuchuje.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli jest obecny, ta wartość jest używana do definiowania adres punktu końcowego dla tej operacji.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób uzyskiwania dostępu do `CustomAddress` właściwości. W tym przykładzie pochodzi z `CalculatorClient` przykład zestawu SDK.  
  
 [!code-csharp[SendActivity#9](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomAddressProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty CustomAddressProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty CustomAddressProperty" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.Activities.SendActivity.CustomAddressProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomAddressProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Workflow::ComponentModel::DependencyProperty ^ CustomAddressProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomAddressProperty : System.Workflow.ComponentModel.DependencyProperty" Usage="System.Workflow.Activities.SendActivity.CustomAddressProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> dla <see cref="P:System.Workflow.Activities.SendActivity.CustomAddress" /> właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli jest obecny, ta wartość jest używana do definiowania adres punktu końcowego dla tej operacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="protected internal override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance valuetype System.Workflow.ComponentModel.ActivityExecutionStatus Execute(class System.Workflow.ComponentModel.ActivityExecutionContext executionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.SendActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function Execute (executionContext As ActivityExecutionContext) As ActivityExecutionStatus" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Workflow::ComponentModel::ActivityExecutionStatus Execute(System::Workflow::ComponentModel::ActivityExecutionContext ^ executionContext);" />
      <MemberSignature Language="F#" Value="override this.Execute : System.Workflow.ComponentModel.ActivityExecutionContext -&gt; System.Workflow.ComponentModel.ActivityExecutionStatus" Usage="sendActivity.Execute executionContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.ActivityExecutionStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionContext" Type="System.Workflow.ComponentModel.ActivityExecutionContext" />
      </Parameters>
      <Docs>
        <param name="executionContext">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetContext">
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca słownik zawierający kontekst używany do komunikacji między klientem a service, który komunikuje się z, łącznie z czynności, takich jak identyfikator korelacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informacje o kontekście jest używany do komunikacji między klientem a usługą w nim komunikuje się z oraz czynności, takich jak identyfikator korelacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,string&gt; GetContext (System.Workflow.ComponentModel.Activity activity, System.Workflow.Activities.ChannelToken endpoint, Type contractType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetContext(class System.Workflow.ComponentModel.Activity activity, class System.Workflow.Activities.ChannelToken endpoint, class System.Type contractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetContext(System::Workflow::ComponentModel::Activity ^ activity, System::Workflow::Activities::ChannelToken ^ endpoint, Type ^ contractType);" />
      <MemberSignature Language="F#" Value="static member GetContext : System.Workflow.ComponentModel.Activity * System.Workflow.Activities.ChannelToken * Type -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="System.Workflow.Activities.SendActivity.GetContext (activity, endpoint, contractType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="endpoint" Type="System.Workflow.Activities.ChannelToken" />
        <Parameter Name="contractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="activity">Działanie, którego informacje o kontekście jest wymagana.</param>
        <param name="endpoint">Informacje o punkcie końcowym korelacji z usługą.</param>
        <param name="contractType">
          <see cref="T:System.Type" /> Kontraktu zaimplementowana przez usługę.</param>
        <summary>Pobiera lub ustawia informacje o kontekście dla operacji wysyłania.</summary>
        <returns>Słownik na podstawie kolekcji, która zawiera <see cref="T:System.Xml.XmlQualifiedName" /> kluczy i skojarzone z nimi <see cref="T:System.String" /> wartości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informacje o kontekście jest używany do komunikacji między klientem a usługą w nim komunikuje się z oraz czynności, takich jak identyfikator korelacji.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie `GetContext` metody.  
  
 [!code-csharp[SendActivity#12](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,string&gt; GetContext (System.Workflow.ComponentModel.Activity activity, string endpointName, string ownerActivityName, Type contractType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetContext(class System.Workflow.ComponentModel.Activity activity, string endpointName, string ownerActivityName, class System.Type contractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetContext(System::Workflow::ComponentModel::Activity ^ activity, System::String ^ endpointName, System::String ^ ownerActivityName, Type ^ contractType);" />
      <MemberSignature Language="F#" Value="static member GetContext : System.Workflow.ComponentModel.Activity * string * string * Type -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="System.Workflow.Activities.SendActivity.GetContext (activity, endpointName, ownerActivityName, contractType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="endpointName" Type="System.String" />
        <Parameter Name="ownerActivityName" Type="System.String" />
        <Parameter Name="contractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="activity">Działanie, którego informacje o kontekście jest wymagana.</param>
        <param name="endpointName">Nazwa punktu końcowego używane na potrzeby korelacji z usługą.</param>
        <param name="ownerActivityName">Nazwa działania właściciela.</param>
        <param name="contractType">
          <see cref="T:System.Type" /> Kontraktu zaimplementowana przez usługę.</param>
        <summary>Statyczną metodę, która zwraca informacje o kontekście danego wystąpienia działania, nazwę punktu końcowego używaną przez danego działania, nazwa działania właściciela i <see cref="T:System.Type" /> obiekt, który reprezentuje typ kontraktu.</summary>
        <returns>Słownik na podstawie kolekcji, która zawiera <see cref="T:System.Xml.XmlQualifiedName" /> kluczy i skojarzone z nimi <see cref="T:System.String" /> wartości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informacje o kontekście jest używany do komunikacji między klientem a usługą w nim komunikuje się z oraz czynności, takich jak identyfikator korelacji.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie `GetContext` metody.  
  
 [!code-csharp[SendActivity#15](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeProperties">
      <MemberSignature Language="C#" Value="protected override void InitializeProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InitializeProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.SendActivity.InitializeProperties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InitializeProperties ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InitializeProperties();" />
      <MemberSignature Language="F#" Value="override this.InitializeProperties : unit -&gt; unit" Usage="sendActivity.InitializeProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterBindings">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.WorkflowParameterBindingCollection ParameterBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.ComponentModel.WorkflowParameterBindingCollection ParameterBindings" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.SendActivity.ParameterBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParameterBindings As WorkflowParameterBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::ComponentModel::WorkflowParameterBindingCollection ^ ParameterBindings { System::Workflow::ComponentModel::WorkflowParameterBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ParameterBindings : System.Workflow.ComponentModel.WorkflowParameterBindingCollection" Usage="System.Workflow.Activities.SendActivity.ParameterBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.WorkflowParameterBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję parametrów powiązania, tak jak w liście parametrów formalnych usługi Windows Communication Foundation (WCF).</summary>
        <value>
          <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> Parametrów, aby powiązać.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> może służyć do określenia powiązania między parametrami operacji usługi i publiczne pola i właściwości przepływu pracy, który zawiera <xref:System.Workflow.Activities.SendActivity> działania. Gdy <xref:System.Workflow.Activities.SendActivity> wykonuje działania, odpowiednie wartości parametrów są odczytywane z właściwości przepływu pracy są powiązane i są wysyłane do usługi jako parametry operacji usługi.  
  
 <xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> można również pobrać wartości zwracanych z operacji usługi.  
  
 Wszystkie parametry działania usługi powinna być powiązana. Parametry operacji usługi niepowiązanych produkcji ostrzeżeń kompilatora i wartości domyślnej parametru są wysyłane podczas <xref:System.Workflow.Activities.SendActivity> jest wywoływana.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób uzyskiwania dostępu do `ParameterBindings` właściwości. W tym przykładzie pochodzi z `Conversations` przykład zestawu SDK.  
  
 [!code-csharp[SendActivity#0](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnValuePropertyName">
      <MemberSignature Language="C#" Value="public const string ReturnValuePropertyName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ReturnValuePropertyName" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.Activities.SendActivity.ReturnValuePropertyName" />
      <MemberSignature Language="VB.NET" Value="Public Const ReturnValuePropertyName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ ReturnValuePropertyName;" />
      <MemberSignature Language="F#" Value="val mutable ReturnValuePropertyName : string" Usage="System.Workflow.Activities.SendActivity.ReturnValuePropertyName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nazwa właściwości, która jest używana dla wartości zwracanej wysłanych przez usługę który <see langword="SendActivity" /> działania komunikuje się z.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten ciąg może służyć do pobierania wartość zwrotną z elementu <xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> skojarzone z <xref:System.Workflow.Activities.SendActivity> działania w <xref:System.Workflow.Activities.SendActivity.AfterResponse> obsługi zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób uzyskiwania dostępu do `ReturnValuePropertyName` pola.  
  
 [!code-csharp[SendActivity#6](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceOperationInfo">
      <MemberSignature Language="C#" Value="public System.Workflow.Activities.TypedOperationInfo ServiceOperationInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Activities.TypedOperationInfo ServiceOperationInfo" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.SendActivity.ServiceOperationInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceOperationInfo As TypedOperationInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::Activities::TypedOperationInfo ^ ServiceOperationInfo { System::Workflow::Activities::TypedOperationInfo ^ get(); void set(System::Workflow::Activities::TypedOperationInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceOperationInfo : System.Workflow.Activities.TypedOperationInfo with get, set" Usage="System.Workflow.Activities.SendActivity.ServiceOperationInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.Activities.TypedOperationInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Definiuje kontrakt i operacja usługi który <see langword="SendActivity" /> działania komunikuje się z.</summary>
        <value>A <see cref="T:System.Workflow.Activities.TypedOperationInfo" /> obiekt, który zawiera nazwę kontraktu, typ kontraktu, operacja name, (która może się różnić od nazwę metody rzeczywiste), czy operacja jest Operacja jednokierunkowa i parametrów dotyczących operacji w tym informacje o metodzie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Activities.SendActivity> Działania zawsze odwołuje się do istniejący kontrakt i jego określonych operacji. Nie można, który umożliwia <xref:System.Workflow.Activities.SendActivity> działanie, aby zdefiniować kontrakt.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób uzyskiwania dostępu do `ServiceOperationInfo` właściwości. W tym przykładzie pochodzi z `Conversations` przykład zestawu SDK.  
  
 [!code-csharp[SendActivity#1](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetContext">
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ustawia informacje o kontekście dla <see cref="T:System.Workflow.Activities.SendActivity" /> działania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informacje o kontekście jest używany do komunikacji między klientem a usługą w nim komunikuje się oraz czynności, takich jak identyfikator korelacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public static void SetContext (System.Workflow.ComponentModel.Activity activity, System.Workflow.Activities.ChannelToken endpoint, Type contractType, System.Collections.Generic.IDictionary&lt;string,string&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetContext(class System.Workflow.ComponentModel.Activity activity, class System.Workflow.Activities.ChannelToken endpoint, class System.Type contractType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetContext(System::Workflow::ComponentModel::Activity ^ activity, System::Workflow::Activities::ChannelToken ^ endpoint, Type ^ contractType, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ context);" />
      <MemberSignature Language="F#" Value="static member SetContext : System.Workflow.ComponentModel.Activity * System.Workflow.Activities.ChannelToken * Type * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit" Usage="System.Workflow.Activities.SendActivity.SetContext (activity, endpoint, contractType, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="endpoint" Type="System.Workflow.Activities.ChannelToken" />
        <Parameter Name="contractType" Type="System.Type" />
        <Parameter Name="context" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="activity">Wystąpienia działania do skojarzenia z informacje o kontekście.</param>
        <param name="endpoint">Punkt końcowy używane na potrzeby korelacji z usługą.</param>
        <param name="contractType">
          <see cref="T:System.Type" /> Kontraktu zaimplementowana przez usługę.</param>
        <param name="context">Informacje o kontekście można ustawić.</param>
        <summary>Statyczną metodę, która ustawia informacje o kontekście dla <see cref="T:System.Workflow.Activities.SendActivity" /> działanie danego wystąpienia działania, punktowi końcowemu używanemu przez danego działania <see cref="T:System.Type" /> obiekt, który reprezentuje typ kontraktu i samych informacji kontekstu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informacje o kontekście jest używany do komunikacji między klientem a usługą w nim komunikuje się z oraz czynności, takich jak identyfikator korelacji.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie `SetContext` metody.  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public static void SetContext (System.Workflow.ComponentModel.Activity activity, string endpointName, string ownerActivityName, Type contractType, System.Collections.Generic.IDictionary&lt;string,string&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetContext(class System.Workflow.ComponentModel.Activity activity, string endpointName, string ownerActivityName, class System.Type contractType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetContext(System::Workflow::ComponentModel::Activity ^ activity, System::String ^ endpointName, System::String ^ ownerActivityName, Type ^ contractType, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ context);" />
      <MemberSignature Language="F#" Value="static member SetContext : System.Workflow.ComponentModel.Activity * string * string * Type * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit" Usage="System.Workflow.Activities.SendActivity.SetContext (activity, endpointName, ownerActivityName, contractType, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="endpointName" Type="System.String" />
        <Parameter Name="ownerActivityName" Type="System.String" />
        <Parameter Name="contractType" Type="System.Type" />
        <Parameter Name="context" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="activity">Wystąpienia działania do skojarzenia z informacje o kontekście.</param>
        <param name="endpointName">Nazwa punktu końcowego używane na potrzeby korelacji z usługą.</param>
        <param name="ownerActivityName">Nazwa działania właściciela</param>
        <param name="contractType">
          <see cref="T:System.Type" /> Kontraktu zaimplementowana przez usługę.</param>
        <param name="context">Informacje o kontekście można ustawić.</param>
        <summary>Statyczną metodę, która ustawia informacje o kontekście dla <see cref="T:System.Workflow.Activities.SendActivity" /> działanie danego wystąpienia działania, nazwę punktu końcowego używaną przez danego działania, nazwa działania właściciela <see cref="T:System.Type" /> obiekt, który reprezentuje typ kontraktu i kontekstu samych informacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład przedstawia użycie `SetContext` metody.  
  
 [!code-csharp[SendActivity#15](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>