<Type Name="JavaScriptConverter" FullName="System.Web.Script.Serialization.JavaScriptConverter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba7beca8ec749ce6463983ff8c1cab8784dfba1d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69135913" /></Metadata><TypeSignature Language="C#" Value="public abstract class JavaScriptConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit JavaScriptConverter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Script.Serialization.JavaScriptConverter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class JavaScriptConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class JavaScriptConverter abstract" />
  <TypeSignature Language="F#" Value="type JavaScriptConverter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dostarcza abstrakcyjną klasę bazową dla niestandardowego konwertera typów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa umożliwia implementację procesów serializacji i deserializacji dla typów zarządzanych, które nie są natywnie obsługiwane <xref:System.Web.Script.Serialization.JavaScriptSerializer> przez klasę. <xref:System.Web.Script.Serialization.JavaScriptConverter> Można również użyć <xref:System.Web.Script.Serialization.JavaScriptConverter> , gdy potrzebna jest większa kontrola nad procesem serializacji i deserializacji.  
  
 <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> Właściwość wskazuje typy, dla których konwerter niestandardowy zapewnia usługi konwertera.  
  
 Aby wskazać, że dla <xref:System.Web.Script.Serialization.JavaScriptSerializer> wystąpienia musi być używany konwerter niestandardowy, należy zarejestrować konwerter z wystąpieniem. Jeśli używasz <xref:System.Web.Script.Serialization.JavaScriptSerializer> klasy bezpośrednio, należy <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> użyć metody do zarejestrowania konwertera. W przeciwnym razie, jeśli wywołujesz metody sieci Web z ECMAScript (JavaScript) i chcesz użyć konwertera niestandardowego, możesz zarejestrować go, dodając `converters` element w pliku konfiguracji. Aby uzyskać więcej informacji, zobacz [jak: Skonfiguruj usługi ASP.NET Services w technologii](https://msdn.microsoft.com/library/ea4fb56e-bc1d-405a-9877-00cf5e552a30)Microsoft Ajax.  
  
 Gdy wystąpienie jest Serializowanie typu, dla którego zarejestrowano konwerter niestandardowy, serializator <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> wywołuje metodę. <xref:System.Web.Script.Serialization.JavaScriptSerializer> Podobnie, gdy <xref:System.Web.Script.Serialization.JavaScriptSerializer> wystąpienie deserializacji ciągu JavaScript Object Notation (JSON) i rozpoznaje, że typ wewnątrz ciągu JSON ma skojarzony konwerter niestandardowy, serializator <xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A> wywołuje metodę.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć niestandardowy konwerter dla <xref:System.Web.UI.WebControls.ListItemCollection> klasy.  
  
 [!code-csharp[System.Web.Script.Serialization#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#2)]
 [!code-vb[System.Web.Script.Serialization#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>W przypadku dziedziczenia <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />z należy zastąpić następujące elementy członkowskie: 
-   <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />  
  
-   <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />  
  
-   <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /><see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" />zapewnia metodę, która będzie używana przez implementacje programu <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />. <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> Kod konwertera musi być w stanie przyjąć wartość, która jest zawarta w słowniku, do którego ten serializator przekazuje, a następnie przekonwertować tę wartość na obiekt <paramref name="T" />typu. Zamiast ponownego wdrażania niestandardowego kodu konwersji w celu osiągnięcia tego celu można wywołać <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> metodę.</para></block>
    <altmember cref="T:System.Web.Configuration.Converter" />
    <related type="Article" href="https://msdn.microsoft.com/library/8290e543-7eff-47a4-aace-681f3c07229b">Usługi sieci Web w ASP.NET AJAX</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JavaScriptConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; JavaScriptConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public abstract object Deserialize (System.Collections.Generic.IDictionary&lt;string,object&gt; dictionary, Type type, System.Web.Script.Serialization.JavaScriptSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; dictionary, class System.Type type, class System.Web.Script.Serialization.JavaScriptSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Deserialize(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ dictionary, Type ^ type, System::Web::Script::Serialization::JavaScriptSerializer ^ serializer);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.Collections.Generic.IDictionary&lt;string, obj&gt; * Type * System.Web.Script.Serialization.JavaScriptSerializer -&gt; obj" Usage="javaScriptConverter.Deserialize (dictionary, type, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="serializer" Type="System.Web.Script.Serialization.JavaScriptSerializer" />
      </Parameters>
      <Docs>
        <param name="dictionary"><see cref="T:System.Collections.Generic.IDictionary`2" /> Wystąpienie danych właściwości przechowywane jako pary nazwa/wartość.</param>
        <param name="type">Typ obiektu będącego wynikiem.</param>
        <param name="serializer"><see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> Wystąpienie.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, Konwertuje podany słownik na obiekt określonego typu.</summary>
        <returns>Obiekt po deserializacji.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Metoda wykonuje iterację przez wartości <paramref name="dictionary" /> w parametrze w celu skonstruowania wystąpienia typu żądanego w <paramref name="type" /> parametrze. <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" /> Mimo że konwerter może bezpośrednio używać wartości z <paramref name="dictionary" />, zalecamy <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> użycie metody implementującej konwerter. Konwerter powinien wywołać tę metodę <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> wystąpienia dostępnego <paramref name="serializer" /> z parametru.  
  
Metoda umożliwia konwerterowi przekazanie wartości właściwości z <paramref name="dictionary" />, a następnie zwrócenie wartości oczekiwanego typu. <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> W niektórych przypadkach konwerter dla typu niestandardowego może pracować z właściwościami, które same mają zarejestrowane konwertery (na przykład typ A ma właściwość typu B, a typ B jest również skojarzony z konwerterem niestandardowym). W takim przypadku wywoływanie <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> sprawia, że konwertery niestandardowe będą wywoływać rekursywnie dla danych właściwości zawartych w słowniku. Gdy konwerter powtarza wszystkie wpisy w słowniku, zwraca skonstruowane wystąpienie typu docelowego.  
  
Jeśli konwerter napotyka problem podczas deserializacji, powinien zgłosić <see cref="T:System.InvalidOperationException" /> błąd opisujący problem.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IDictionary&lt;string,object&gt; Serialize (object obj, System.Web.Script.Serialization.JavaScriptSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Serialize(object obj, class System.Web.Script.Serialization.JavaScriptSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Serialize (obj As Object, serializer As JavaScriptSerializer) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Serialize(System::Object ^ obj, System::Web::Script::Serialization::JavaScriptSerializer ^ serializer);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : obj * System.Web.Script.Serialization.JavaScriptSerializer -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="javaScriptConverter.Serialize (obj, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="serializer" Type="System.Web.Script.Serialization.JavaScriptSerializer" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do serializacji.</param>
        <param name="serializer">Obiekt, który jest odpowiedzialny za serializacji.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, kompiluje słownik par nazwa/wartość.</summary>
        <returns>Obiekt, który zawiera pary klucz/wartość, które reprezentują dane obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas serializacji typu, dla którego zarejestrowano konwertera niestandardowego, <xref:System.Web.Script.Serialization.JavaScriptSerializer> wystąpienie <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> wywołuje metodę.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Zwracana wartość <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" /> musi <see cref="T:System.Collections.Generic.IDictionary`2" /> być wystąpieniem z zerową lub większą liczbą par nazwa/wartość reprezentujących dane obiektu do przekonwertowania na format JSON. Sam konwerter nie wykonuje serializacji danych w formacie JSON. Zamiast tego konwerter kompiluje słownik par nazwa/wartość, które zawierają nazwy właściwości (klucz ciągu dla słownika) i odpowiadające wartości właściwości (wartość obiektu w słowniku). Wystąpienie <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> to następnie konwertuje je na format JSON.  
  
Jeśli konwerter napotka wyjątek, powinien zgłosić <see cref="T:System.InvalidOperationException" /> błąd opisujący problem.</para></block>
      </Docs>
    </Member>
    <Member MemberName="SupportedTypes">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;Type&gt; SupportedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; SupportedTypes" />
      <MemberSignature Language="DocId" Value="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SupportedTypes As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ SupportedTypes { System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportedTypes : seq&lt;Type&gt;" Usage="System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gdy jest zastępowany w klasie pochodnej, pobiera kolekcję obsługiwanych typów.</summary>
        <value>Obiekt, który implementuje <see cref="T:System.Collections.Generic.IEnumerable`1" /> , reprezentuje typy obsługiwane przez konwerter.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> Właściwość zawiera listę typów, które są obsługiwane przez konwerter. W czasie <xref:System.Web.Script.Serialization.JavaScriptSerializer> wykonywania wystąpienie korzysta z tej właściwości, aby określić mapowanie typów zarządzanych do odpowiednich konwerterów niestandardowych.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> jak zastąpić właściwość w klasie pochodnej. W tym przykładzie konwerter obsługuje tylko <xref:System.Web.UI.WebControls.ListItemCollection> typ. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.Script.Serialization.JavaScriptConverter> klasy.  
  
 [!code-csharp[System.Web.Script.Serialization#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#3)]
 [!code-vb[System.Web.Script.Serialization#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" />zawsze musi zwracać kolekcję, a kolekcja musi zawierać co najmniej jeden wpis.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
