<Type Name="JavaScriptConverter" FullName="System.Web.Script.Serialization.JavaScriptConverter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fed067b68018bdab0ef4b4da047a750da000af7e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36398211" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class JavaScriptConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit JavaScriptConverter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Script.Serialization.JavaScriptConverter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class JavaScriptConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class JavaScriptConverter abstract" />
  <TypeSignature Language="F#" Value="type JavaScriptConverter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="04ea3-101">Udostępnia abstrakcyjną klasę podstawową dla konwertera typu niestandardowego.</span>
      <span class="sxs-lookup">
        <span data-stu-id="04ea3-101">Provides an abstract base class for a custom type converter.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="04ea3-102"><xref:System.Web.Script.Serialization.JavaScriptConverter> Klasa umożliwia Implementowanie serializacji i deserializacji procesów w typach zarządzanych, które nie są obsługiwane natywnie przez <xref:System.Web.Script.Serialization.JavaScriptSerializer> klasy.</span><span class="sxs-lookup"><span data-stu-id="04ea3-102">The <xref:System.Web.Script.Serialization.JavaScriptConverter> class enables you to implement serialization and deserialization processes for managed types that are not natively supported by the <xref:System.Web.Script.Serialization.JavaScriptSerializer> class.</span></span> <span data-ttu-id="04ea3-103">Można również użyć <xref:System.Web.Script.Serialization.JavaScriptConverter> gdy potrzebujesz większej kontroli nad procesem serializacji i deserializacji.</span><span class="sxs-lookup"><span data-stu-id="04ea3-103">You can also use <xref:System.Web.Script.Serialization.JavaScriptConverter> when you need more control over the serialization and deserialization process.</span></span>  
  
 <span data-ttu-id="04ea3-104"><xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> Właściwość wskazuje, dla których niestandardowych konwertera udostępnia usługi konwertera typów.</span><span class="sxs-lookup"><span data-stu-id="04ea3-104">The <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> property indicates the types for which a custom converter provides converter services.</span></span>  
  
 <span data-ttu-id="04ea3-105">Aby wskazać, że niestandardowe konwertera musi być używana przez <xref:System.Web.Script.Serialization.JavaScriptSerializer> wystąpienia, należy zarejestrować konwerter z wystąpieniem.</span><span class="sxs-lookup"><span data-stu-id="04ea3-105">To indicate that a custom converter must be used by the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance, you must register the converter with the instance.</span></span> <span data-ttu-id="04ea3-106">Jeśli używasz <xref:System.Web.Script.Serialization.JavaScriptSerializer> bezpośrednio klasa, należy użyć <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> metodę, aby zarejestrować konwerter.</span><span class="sxs-lookup"><span data-stu-id="04ea3-106">If you are using the <xref:System.Web.Script.Serialization.JavaScriptSerializer> class directly, you should use the <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> method to register the converter.</span></span> <span data-ttu-id="04ea3-107">W przeciwnym razie są wywoływanie metod sieci Web w języku ECMAScript (JavaScript), którego chcesz użyć niestandardowego konwertera można zarejestrować przez dodanie `converters` w pliku konfiguracji.</span><span class="sxs-lookup"><span data-stu-id="04ea3-107">Otherwise, if you are invoking Web methods from ECMAScript (JavaScript) and you want to use the custom converter, you can register it by adding a `converters` element in the configuration file.</span></span> <span data-ttu-id="04ea3-108">Aby uzyskać więcej informacji, zobacz [porady: Konfigurowanie usługi ASP.NET AJAX Microsoft](http://msdn.microsoft.com/library/ea4fb56e-bc1d-405a-9877-00cf5e552a30).</span><span class="sxs-lookup"><span data-stu-id="04ea3-108">For more information, see [How to: Configure ASP.NET Services in Microsoft Ajax](http://msdn.microsoft.com/library/ea4fb56e-bc1d-405a-9877-00cf5e552a30).</span></span>  
  
 <span data-ttu-id="04ea3-109">Gdy <xref:System.Web.Script.Serialization.JavaScriptSerializer> wystąpienie wykonuje serializację typu, dla którego ma niestandardowy konwertera zarejestrowany, wywołania serializator <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="04ea3-109">When the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance is serializing a type for which it has a custom converter registered, the serializer calls the <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> method.</span></span> <span data-ttu-id="04ea3-110">Podobnie, jeśli <xref:System.Web.Script.Serialization.JavaScriptSerializer> wystąpienia jest deserializacji ciągu JavaScript Object Notation (JSON) i rozpoznaje, że typ wewnątrz ciągu JSON ma konwerter niestandardowe skojarzone z nim wywołania serializator <xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="04ea3-110">Similarly, when the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance is deserializing a JavaScript Object Notation (JSON) string and recognizes that a type inside the JSON string has a custom converter associated with it, the serializer calls the <xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="04ea3-111">Poniższy przykład pokazuje, jak utworzyć niestandardowe konwerter dla <xref:System.Web.UI.WebControls.ListItemCollection> klasy.</span><span class="sxs-lookup"><span data-stu-id="04ea3-111">The following example shows how to create a custom converter for the <xref:System.Web.UI.WebControls.ListItemCollection> class.</span></span>  
  
 [!code-csharp[System.Web.Script.Serialization#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#2)]
 [!code-vb[System.Web.Script.Serialization#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="04ea3-112">
        <para>Przy dziedziczeniu z <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />, konieczne jest przesłonięcie następujących członków:- <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />   
  
-    <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />   
  
-    <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /><see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> zapewnia <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> metodę, która będzie używana przez implementacje z <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />. Kod konwertera musi mieć możliwość wartość, która znajduje się w słowniku serializator przekazuje do niego i następnie przekonwertować tę wartość na obiekt typu <paramref name="T" />. Zamiast ponownego wdrażania kodu niestandardowego konwersji, w tym celu, należy wywołać <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> metody.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="04ea3-112">
          <para>When you inherit from <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />, you must override the following members:  -   <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />  
  
-   <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />  
  
-   <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /><see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> provides the <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> method that will be used by implementers of <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />. Converter code must be able to take a value that is contained in the dictionary that the serializer passes to it, and then convert that value into an object of type <paramref name="T" />. Rather than re-implementing the custom conversion code to accomplish this, you can call the <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> method.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.Web.Configuration.Converter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JavaScriptConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; JavaScriptConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="04ea3-113">Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="04ea3-113">Initializes a new instance of the <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public abstract object Deserialize (System.Collections.Generic.IDictionary&lt;string,object&gt; dictionary, Type type, System.Web.Script.Serialization.JavaScriptSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; dictionary, class System.Type type, class System.Web.Script.Serialization.JavaScriptSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Deserialize(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ dictionary, Type ^ type, System::Web::Script::Serialization::JavaScriptSerializer ^ serializer);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.Collections.Generic.IDictionary&lt;string, obj&gt; * Type * System.Web.Script.Serialization.JavaScriptSerializer -&gt; obj" Usage="javaScriptConverter.Deserialize (dictionary, type, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="serializer" Type="System.Web.Script.Serialization.JavaScriptSerializer" />
      </Parameters>
      <Docs>
        <param name="dictionary">
          <span data-ttu-id="04ea3-114">
            <see cref="T:System.Collections.Generic.IDictionary`2" /> Wystąpienia właściwości danych przechowywane jako pary nazwa/wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="04ea3-114">An <see cref="T:System.Collections.Generic.IDictionary`2" /> instance of property data stored as name/value pairs.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="04ea3-115">Typ wynikowy obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="04ea3-115">The type of the resulting object.</span>
          </span>
        </param>
        <param name="serializer">
          <span data-ttu-id="04ea3-116">
            <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> Wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="04ea3-116">The <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="04ea3-117">W przypadku przesłonięcia w klasie pochodnej, konwertuje podanego słownika obiektu określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="04ea3-117">When overridden in a derived class, converts the provided dictionary into an object of the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="04ea3-118">Obiekt po deserializacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="04ea3-118">The deserialized object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="04ea3-119">
            <para>
              <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" /> Metody iteruje wartości w <paramref name="dictionary" /> parametrów do utworzenia wystąpienia typu wymagane w <paramref name="type" /> parametru. Mimo że konwertera korzystać bezpośrednio z wartości <paramref name="dictionary" />, zalecane jest użycie implementujący konwertera <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> metody zamiast tego. Konwerter powinny wywoływać tej metody <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> wystąpienia dostępnej w sklepie <paramref name="serializer" /> parametru.  <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> Metoda zapewnia konwertera do przekazania wartości właściwości z <paramref name="dictionary" />, a następnie zwracają wartość oczekiwanego typu. W niektórych przypadkach konwertera dla niestandardowego typu może działać z właściwościami się zarejestrowano konwertery (na przykład wpisz ma właściwość typu b i typ B jest także powiązany z niestandardowych konwertera). W takim przypadku wywoływania <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> upewnia się, że konwertery niestandardowe będzie cyklicznie wywołane dla danych właściwości zawartych w słowniku. Konwerter ma iterowane za pomocą wszystkich wpisów w słowniku, funkcja zwraca skonstruowane wystąpienie typu docelowego.  Jeśli konwerter napotkał problem podczas deserializacji, powinien zgłosić <see cref="T:System.InvalidOperationException" /> błąd, który opisuje problem.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="04ea3-119">
              <para>The <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" /> method iterates through the values in the <paramref name="dictionary" /> parameter to construct an instance of the type requested in the <paramref name="type" /> parameter. Although a converter can directly use values from <paramref name="dictionary" />, we recommend that the converter implementer use the <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> method instead. The converter should call this method of the <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> instance available from the <paramref name="serializer" /> parameter.  The <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> method enables converter to pass a property value from <paramref name="dictionary" />, and then return a value of the expected type. In some cases, a converter for a custom type might be working with properties that themselves have registered converters (for example, type A has a property of type B, and type B is also associated with a custom converter). In that case, invoking <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> makes sure that custom converters will be recursively invoked for property data that is contained in the dictionary. When the converter has iterated through all entries in the dictionary, it returns a constructed instance of the target type.  If the converter encounters a problem during deserialization, it should throw an <see cref="T:System.InvalidOperationException" /> error that describes the problem.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IDictionary&lt;string,object&gt; Serialize (object obj, System.Web.Script.Serialization.JavaScriptSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Serialize(object obj, class System.Web.Script.Serialization.JavaScriptSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Serialize (obj As Object, serializer As JavaScriptSerializer) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Serialize(System::Object ^ obj, System::Web::Script::Serialization::JavaScriptSerializer ^ serializer);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : obj * System.Web.Script.Serialization.JavaScriptSerializer -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="javaScriptConverter.Serialize (obj, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="serializer" Type="System.Web.Script.Serialization.JavaScriptSerializer" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="04ea3-120">Obiekt do zserializowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="04ea3-120">The object to serialize.</span>
          </span>
        </param>
        <param name="serializer">
          <span data-ttu-id="04ea3-121">Obiekt, który jest odpowiedzialny za serializacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="04ea3-121">The object that is responsible for the serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="04ea3-122">W przypadku przesłonięcia w klasie pochodnej tworzy słownik par nazwa/wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="04ea3-122">When overridden in a derived class, builds a dictionary of name/value pairs.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="04ea3-123">Obiekt, który zawiera pary klucz wartość, które reprezentują danych obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="04ea3-123">An object that contains key/value pairs that represent the object’s data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="04ea3-124">Podczas serializacji typu, dla którego niestandardowy konwerter jest zarejestrowany, <xref:System.Web.Script.Serialization.JavaScriptSerializer> wywołuje wystąpienie <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="04ea3-124">When you serialize a type for which a custom converter is registered, the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance invokes the <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="04ea3-125">
            <para>Wartość zwracana <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" /> musi być <see cref="T:System.Collections.Generic.IDictionary`2" /> wystąpienia o zero lub więcej par nazw i wartości reprezentujących danych obiektów, dla których ma zostać przekonwertowany do formatu JSON. Konwerter sam nie serializowania danych w formacie JSON. Zamiast tego konwerter tworzy słownik par nazwa/wartość, które zawierają nazwy właściwości (ciągu klucza słownika) i odpowiadających im właściwości wartości (wartość obiektu w słowniku). <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> Wystąpienia następnie konwertuje je na format JSON.  Jeśli konwerter napotkał wyjątek, powinien zgłosić <see cref="T:System.InvalidOperationException" /> błąd, który opisuje problem.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="04ea3-125">
              <para>The return value of <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" /> must be an <see cref="T:System.Collections.Generic.IDictionary`2" /> instance with zero or more name/value pairs that represent an object’s data to be converted to JSON. The converter itself does not serialize data as JSON. Instead, the converter builds a dictionary of name/value pairs that contain the property names (the string key for the dictionary) and corresponding property values (the object value in the dictionary). The <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> instance subsequently converts these to JSON.  If the converter encounters an exception, it should throw an <see cref="T:System.InvalidOperationException" /> error that describes the problem.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SupportedTypes">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;Type&gt; SupportedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; SupportedTypes" />
      <MemberSignature Language="DocId" Value="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SupportedTypes As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ SupportedTypes { System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportedTypes : seq&lt;Type&gt;" Usage="System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="04ea3-126">W przypadku przesłonięcia w klasie pochodnej pobiera kolekcji obsługiwanych typów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="04ea3-126">When overridden in a derived class, gets a collection of the supported types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="04ea3-127">Obiekt, który implementuje <see cref="T:System.Collections.Generic.IEnumerable`1" /> reprezentujący obsługiwana przez konwerter typów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="04ea3-127">An object that implements <see cref="T:System.Collections.Generic.IEnumerable`1" /> that represents the types supported by the converter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="04ea3-128"><xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> Właściwość zawiera listę typów, które są obsługiwane przez konwerter.</span><span class="sxs-lookup"><span data-stu-id="04ea3-128">The <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> property lists the types that are supported by the converter.</span></span> <span data-ttu-id="04ea3-129">W czasie wykonywania <xref:System.Web.Script.Serialization.JavaScriptSerializer> wystąpienia używa tej właściwości w celu określenia mapowania typów zarządzanych do ich odpowiednich konwertery niestandardowe.</span><span class="sxs-lookup"><span data-stu-id="04ea3-129">At run time, a <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance uses this property to determine the mapping of managed types to their corresponding custom converters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="04ea3-130">Poniższy przykład przedstawia sposób przesłonięcia <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> właściwości w klasie pochodnej.</span><span class="sxs-lookup"><span data-stu-id="04ea3-130">The following example shows how to override the <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> property in a derived class.</span></span> <span data-ttu-id="04ea3-131">W tym przykładzie konwerter obsługuje tylko <xref:System.Web.UI.WebControls.ListItemCollection> typu.</span><span class="sxs-lookup"><span data-stu-id="04ea3-131">In this example, the converter supports only the <xref:System.Web.UI.WebControls.ListItemCollection> type.</span></span> <span data-ttu-id="04ea3-132">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Web.Script.Serialization.JavaScriptConverter> klasy.</span><span class="sxs-lookup"><span data-stu-id="04ea3-132">This code example is part of a larger example provided for the <xref:System.Web.Script.Serialization.JavaScriptConverter> class.</span></span>  
  
 [!code-csharp[System.Web.Script.Serialization#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#3)]
 [!code-vb[System.Web.Script.Serialization#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="04ea3-133">
            <para>
              <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /> zawsze musi zwracać kolekcję, a kolekcja musi zawierać co najmniej jeden wpis.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="04ea3-133">
              <para>
                <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /> must always return a collection, and the collection must contain at least one entry.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>