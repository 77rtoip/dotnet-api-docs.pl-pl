<Type Name="JavaScriptConverter" FullName="System.Web.Script.Serialization.JavaScriptConverter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7ea8ad96cdf88d631517133675ad9e52cbb3dbb2" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46680943" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class JavaScriptConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit JavaScriptConverter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Script.Serialization.JavaScriptConverter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class JavaScriptConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class JavaScriptConverter abstract" />
  <TypeSignature Language="F#" Value="type JavaScriptConverter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia abstrakcyjną klasę bazową dla konwertera typu niestandardowego.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Script.Serialization.JavaScriptConverter> Klasa umożliwia Implementowanie serializacji i deserializacji procesów w typach zarządzanych, które nie są obsługiwane natywnie przez <xref:System.Web.Script.Serialization.JavaScriptSerializer> klasy. Można również użyć <xref:System.Web.Script.Serialization.JavaScriptConverter> gdy potrzebujesz większej kontroli nad procesem serializacji i deserializacji.  
  
 <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> Właściwość wskazuje typy, dla których niestandardowych konwerter udostępnia usługi konwertera.  
  
 Aby wskazać, że konwertera niestandardowy musi być używana przez <xref:System.Web.Script.Serialization.JavaScriptSerializer> wystąpienia, należy zarejestrować konwerter z wystąpieniem. Jeśli używasz <xref:System.Web.Script.Serialization.JavaScriptSerializer> bezpośrednio klasy, należy użyć <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> metodę, aby zarejestrować konwertera. W przeciwnym razie, jeśli chcesz użyć niestandardowego konwerter wywoływane metody sieci Web z ECMAScript (JavaScript), można zarejestrować go, dodając `converters` elementu w pliku konfiguracji. Aby uzyskać więcej informacji, zobacz [porady: Konfigurowanie usług ASP.NET AJAX Microsoft](http://msdn.microsoft.com/library/ea4fb56e-bc1d-405a-9877-00cf5e552a30).  
  
 Gdy <xref:System.Web.Script.Serialization.JavaScriptSerializer> wystąpienie wykonuje serializację typu, dla których ma konwertera niestandardowy zarejestrowany, wywołania serializator <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> metody. Podobnie, gdy <xref:System.Web.Script.Serialization.JavaScriptSerializer> wystąpienie jest deserializacji ciąg JavaScript Object Notation (JSON) i rozpoznaje, że typ wewnątrz ciągu JSON ma konwertera niestandardowych skojarzone z nim wywołania serializator <xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć niestandardowe konwerter służący do <xref:System.Web.UI.WebControls.ListItemCollection> klasy.  
  
 [!code-csharp[System.Web.Script.Serialization#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#2)]
 [!code-vb[System.Web.Script.Serialization#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Przy dziedziczeniu z <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />, konieczne jest przesłonięcie następujących składowych: 
-   <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />  
  
-   <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />  
  
-   <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /><see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> udostępnia <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> metodę, która będzie używana przez implementacje z <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />. Konwerter kod musi mieć możliwość robienia wartość, która znajduje się w słowniku, który element serializujący przekazuje do niego i następnie przekonwertować tę wartość na obiekt typu <paramref name="T" />. Zamiast ponownej implementacji kod niestandardowy konwersji, w tym celu, możesz wywołać <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> metody.</para>
    </block>
    <altmember cref="T:System.Web.Configuration.Converter" />
    <related type="Article" href="https://msdn.microsoft.com/library/8290e543-7eff-47a4-aace-681f3c07229b">Usługi sieci Web w technologii ASP.NET AJAX</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JavaScriptConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; JavaScriptConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public abstract object Deserialize (System.Collections.Generic.IDictionary&lt;string,object&gt; dictionary, Type type, System.Web.Script.Serialization.JavaScriptSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; dictionary, class System.Type type, class System.Web.Script.Serialization.JavaScriptSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Deserialize(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ dictionary, Type ^ type, System::Web::Script::Serialization::JavaScriptSerializer ^ serializer);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.Collections.Generic.IDictionary&lt;string, obj&gt; * Type * System.Web.Script.Serialization.JavaScriptSerializer -&gt; obj" Usage="javaScriptConverter.Deserialize (dictionary, type, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="serializer" Type="System.Web.Script.Serialization.JavaScriptSerializer" />
      </Parameters>
      <Docs>
        <param name="dictionary">
          <see cref="T:System.Collections.Generic.IDictionary`2" /> Wystąpienia właściwości — dane przechowywane jako pary nazwa/wartość.</param>
        <param name="type">Typ obiektu wynikowego.</param>
        <param name="serializer">
          <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> Wystąpienia.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, konwertuje podanego słownika obiektu określonego typu.</summary>
        <returns>Obiekt po deserializacji.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" /> Metoda wykonuje iterację przez wartości w <paramref name="dictionary" /> parametrów do utworzenia wystąpienia typu wymagane w <paramref name="type" /> parametru. Mimo że konwertera bezpośrednio korzystać z wartości <paramref name="dictionary" />, zalecane jest użycie implementujący konwerter <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> metody zamiast tego. Konwerter powinien wywołać tej metody <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> dostępne wystąpienia <paramref name="serializer" /> parametru.  
  
<see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> Metoda umożliwia konwertera do przekazania wartości właściwości z <paramref name="dictionary" />, a następnie zwracają wartość oczekiwanego typu. W niektórych przypadkach konwertera dla typu niestandardowego może działać z właściwościami samodzielnie zarejestrowano konwertery (na przykład wpisz ma właściwość typu b i typu B jest powiązany z niestandardowych konwerter). W takim przypadku wywoływania <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> upewnia się, że konwertery niestandardowe będą cyklicznie wywołany dla danych właściwości zawartych w słowniku. Konwerter ma postanowiliśmy za pośrednictwem wszystkich wpisów w słowniku, funkcja zwraca zbudowane wystąpienia typu docelowego.  
  
Jeśli konwerter napotka problem podczas deserializacji, należy zgłosić <see cref="T:System.InvalidOperationException" /> błąd, który opisuje problem.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IDictionary&lt;string,object&gt; Serialize (object obj, System.Web.Script.Serialization.JavaScriptSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Serialize(object obj, class System.Web.Script.Serialization.JavaScriptSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Serialize (obj As Object, serializer As JavaScriptSerializer) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Serialize(System::Object ^ obj, System::Web::Script::Serialization::JavaScriptSerializer ^ serializer);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : obj * System.Web.Script.Serialization.JavaScriptSerializer -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="javaScriptConverter.Serialize (obj, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="serializer" Type="System.Web.Script.Serialization.JavaScriptSerializer" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do zserializowania.</param>
        <param name="serializer">Obiekt, który jest odpowiedzialny za serializacji.</param>
        <summary>Po przesłonięciu w klasie pochodnej tworzy słownik par nazwa/wartość.</summary>
        <returns>Obiekt, który zawiera pary klucz/wartość, które reprezentują danych obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas serializacji typu, dla którego niestandardowy konwerter jest zarejestrowany, <xref:System.Web.Script.Serialization.JavaScriptSerializer> wywołuje wystąpienie <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> metody.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wartość zwracana przez <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" /> musi być <see cref="T:System.Collections.Generic.IDictionary`2" /> wystąpienie z zero lub więcej par nazwa/wartość, które reprezentują dane obiektów, dla których ma zostać przekonwertowany do formatu JSON. Konwerter sam nie serializować danych jako dane JSON. Zamiast tego konwertera tworzy słownik par nazwa/wartość, które zawierają nazwy właściwości (klucz ciągu słownika) i odpowiadająca jej właściwość wartości (wartość obiektu w słowniku). <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> Wystąpienia następnie konwertuje je do formatu JSON.  
  
Jeśli konwerter napotka wyjątek, należy zgłosić <see cref="T:System.InvalidOperationException" /> błąd, który opisuje problem.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SupportedTypes">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;Type&gt; SupportedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; SupportedTypes" />
      <MemberSignature Language="DocId" Value="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SupportedTypes As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ SupportedTypes { System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportedTypes : seq&lt;Type&gt;" Usage="System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po przesłonięciu w klasie pochodnej pobiera kolekcję z obsługiwanych typów.</summary>
        <value>Obiekt, który implementuje <see cref="T:System.Collections.Generic.IEnumerable`1" /> reprezentujący obsługiwane przez konwerter typy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> Typów, które są obsługiwane przez konwerter listy właściwości. W czasie wykonywania <xref:System.Web.Script.Serialization.JavaScriptSerializer> wystąpienia używa tej właściwości, aby określić mapowanie typów zarządzanych w ich odpowiednich konwertery niestandardowych.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób przesłonięcia <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> właściwości w klasie pochodnej. W tym przykładzie konwerter obsługuje tylko <xref:System.Web.UI.WebControls.ListItemCollection> typu. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Web.Script.Serialization.JavaScriptConverter> klasy.  
  
 [!code-csharp[System.Web.Script.Serialization#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#3)]
 [!code-vb[System.Web.Script.Serialization#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /> zawsze musi zwracać kolekcję, a kolekcja musi zawierać co najmniej jeden wpis.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>