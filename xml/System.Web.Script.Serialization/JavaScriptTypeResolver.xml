<Type Name="JavaScriptTypeResolver" FullName="System.Web.Script.Serialization.JavaScriptTypeResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4dc31196e934281669ede6b17126f8707740c3e9" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69135859" /></Metadata><TypeSignature Language="C#" Value="public abstract class JavaScriptTypeResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit JavaScriptTypeResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Script.Serialization.JavaScriptTypeResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class JavaScriptTypeResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class JavaScriptTypeResolver abstract" />
  <TypeSignature Language="F#" Value="type JavaScriptTypeResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dostarcza abstrakcyjną klasę bazową do implementowania niestandardowego programu rozpoznawania typów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Script.Serialization.JavaScriptTypeResolver> Klasa zawiera usługi dla:  
  
-   Konwertowanie informacji o typie zarządzanym na wartość ciągu za <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A> pomocą metody.  
  
-   Rozpoznawanie wartości ciągu z powrotem do odpowiedniego typu zarządzanego za pomocą <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A> metody.  
  
 Gdy obiekt <xref:System.Web.Script.Serialization.JavaScriptSerializer> jest serializowany typów niestandardowych, może opcjonalnie uwzględnić w szeregowanym ciągu JavaScript Object Notation (JSON) wartość, która zawiera informacje o typie. Podczas deserializacji, <xref:System.Web.Script.Serialization.JavaScriptSerializer> program może odwoływać się do tej wartości ciągu, aby określić odpowiedni typ zarządzany, do którego zostanie przekonwertowany ciąg JSON.  
  
 Jeśli do <xref:System.Web.Script.Serialization.JavaScriptSerializer> wystąpienia zostanie podano mechanizm rozpoznawania typu, serializator <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A> użyje metod i <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A> do mapowania między typem zarządzanym a wartością ciągu w procesie serializacji i deserializacji.  
  
 Klasa jest klasą <xref:System.Web.Script.Serialization.SimpleTypeResolver> bazową klasy, która zapewnia implementację programu rozpoznawania typów, która używa nazwy kwalifikowanej do zestawu typu zarządzanego. <xref:System.Web.Script.Serialization.JavaScriptTypeResolver>  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób tworzenia niestandardowego programu rozpoznawania typów.  
  
 [!code-csharp[System.Web.Script.Serialization.TypeResolver#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization.TypeResolver/CS/App_Code/TypeResolver.cs#2)]
 [!code-vb[System.Web.Script.Serialization.TypeResolver#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization.TypeResolver/VB/App_Code/TypeResolver.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>W przypadku zaimplementowania programu rozpoznawania typu ciąg, który jest zwracany przez <see cref="M:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId(System.Type)" /> metodę, musi być mapowany na ten sam typ zarządzany, gdy wartość ciągu jest przekazana <see cref="M:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType(System.String)" /> do metody.</para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JavaScriptTypeResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptTypeResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; JavaScriptTypeResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Script.Serialization.JavaScriptTypeResolver" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveType">
      <MemberSignature Language="C#" Value="public abstract Type ResolveType (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type ResolveType(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ResolveType (id As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ ResolveType(System::String ^ id);" />
      <MemberSignature Language="F#" Value="abstract member ResolveType : string -&gt; Type" Usage="javaScriptTypeResolver.ResolveType id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Nazwa typu zarządzanego.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, zwraca <see cref="T:System.Type" /> obiekt, który jest skojarzony z określoną nazwą typu.</summary>
        <returns><see cref="T:System.Type" /> Obiekt, który jest skojarzony z określoną nazwą typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy mechanizm rozwiązywania konfliktów typu jest skojarzony <xref:System.Web.Script.Serialization.JavaScriptSerializer> z wystąpieniem, serializator <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A> używa metody podczas iteracji ciągu JSON, aby określić konkretny typ zarządzany, do którego ma zostać przekonwertowany typ JSON.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Uwzględniając wartość ciągu, mechanizm rozpoznawania typu musi zwrócić <see cref="T:System.Type" /> obiekt, który reprezentuje odpowiedni typ zarządzany.</para></block>
      </Docs>
    </Member>
    <Member MemberName="ResolveTypeId">
      <MemberSignature Language="C#" Value="public abstract string ResolveTypeId (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ResolveTypeId(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ ResolveTypeId(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member ResolveTypeId : Type -&gt; string" Usage="javaScriptTypeResolver.ResolveTypeId type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Typ zarządzany, który ma zostać rozwiązany.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, zwraca nazwę typu dla określonego <see cref="T:System.Type" /> obiektu.</summary>
        <returns>Nazwa określonego typu zarządzanego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli metoda zwraca albo `null` lub <xref:System.String.Empty>, program rozpoznawania typów nie obsługuje tego typu. <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
