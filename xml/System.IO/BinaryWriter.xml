<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BinaryWriter.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5dd725d2ff791bd98de6fbbfa825469547776be40.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd725d2ff791bd98de6fbbfa825469547776be40</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryWriter">
          <source>Writes primitive types in binary to a stream and supports writing strings in a specific encoding.</source>
          <target state="translated">Zapisuje typów pierwotnych w pliku binarnego do strumienia i obsługuje ciągi zapisu przy użyciu określonego kodowania.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>The <ph id="ph1">&lt;xref:System.IO.BinaryWriter&gt;</ph> class provides methods that simplify writing primitive data types to a stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryWriter&gt;</ph> Klasa dostarcza metody, które upraszczają zapisywania typów pierwotnych danych do strumienia.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>For example, you can use the <ph id="ph1">&lt;xref:System.IO.BinaryWriter.Write%2A&gt;</ph> method to write a Boolean value to the stream as a one-byte value.</source>
          <target state="translated">Na przykład można użyć <ph id="ph1">&lt;xref:System.IO.BinaryWriter.Write%2A&gt;</ph> metody do zapisu do strumienia jako wartość jednobajtowych wartość logiczną.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>The class includes write methods that support different data types.</source>
          <target state="translated">Klasa zawiera metody zapisu, które obsługują różne typy danych.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>When you create a new instance of the <ph id="ph1">&lt;xref:System.IO.BinaryWriter&gt;</ph> class, you provide the stream to write to, and optionally specify the type of encoding and whether to leave the stream open after disposing the <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> object.</source>
          <target state="translated">Po utworzeniu nowego wystąpienia <ph id="ph1">&lt;xref:System.IO.BinaryWriter&gt;</ph> klasy, podaj strumienia do zapisu, a opcjonalnie można określić typu kodowania i czy należy pozostawić strumienia Otwórz po disposing <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>If you do not specify an encoding type, UTF-8 is used.</source>
          <target state="translated">Jeśli nie określisz typ kodowania, używane jest UTF-8.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Ten typ implementuje <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Po zakończeniu przy użyciu typu bezpośrednio lub pośrednio należy usunąć z niego.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Do usuwania tego typu, należy wywołać jej <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metody w <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloku.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Do usunięcia ich pośrednio, użyj konstrukcji języka takiego jak <ph id="ph1">`using`</ph> (w języku C#) lub <ph id="ph2">`Using`</ph> (w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interfejsu tematu.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>A derived class can override the methods of this class to give unique character encodings.</source>
          <target state="translated">Klasy pochodne mogą przesłaniać metody tej klasy, aby dać kodowanie znaków na unikatowy.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">Poniższy przykład kodu demonstruje sposób przechowywania i pobierania ustawień aplikacji w pliku.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryWriter">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> class that writes to a stream.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> klasy, która zapisuje do strumienia.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> class that writes to a stream.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> klasy, która zapisuje do strumienia.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.#ctor">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
          <source>The output stream.</source>
          <target state="translated">Strumień danych wyjściowych.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> class based on the specified stream and using UTF-8 encoding.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> klasy oparte na określonego strumienia i przy użyciu kodowania UTF-8.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">Poniższy przykład kodu demonstruje sposób przechowywania i pobierania ustawień aplikacji w pliku.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
          <source>The stream does not support writing or is already closed.</source>
          <target state="translated">Strumień nie obsługuje operacji zapisu lub jest już zamknięty.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="output" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="output" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The output stream.</source>
          <target state="translated">Strumień danych wyjściowych.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The character encoding to use.</source>
          <target state="translated">Znak kodowanie do użycia.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> class based on the specified stream and character encoding.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> klasy na podstawie określonego strumienia i kodowania znaków.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The stream does not support writing or is already closed.</source>
          <target state="translated">Strumień nie obsługuje operacji zapisu lub jest już zamknięty.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source><ph id="ph1">&lt;paramref name="output" /&gt;</ph> or <ph id="ph2">&lt;paramref name="encoding" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="output" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="encoding" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The output stream.</source>
          <target state="translated">Strumień danych wyjściowych.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The character encoding to use.</source>
          <target state="translated">Znak kodowanie do użycia.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to leave the stream open after the <ph id="ph2">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> object is disposed; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby pozostaw otwarte po strumienia <ph id="ph2">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> obiekt jest usunięty; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> class based on the specified stream and character encoding, and optionally leaves the stream open.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> klasy na podstawie określonego strumienia i kodowanie znaków, i opcjonalnie pozostawia strumienia Otwórz.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The stream does not support writing or is already closed.</source>
          <target state="translated">Strumień nie obsługuje operacji zapisu lub jest już zamknięty.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="output" /&gt;</ph> or <ph id="ph2">&lt;paramref name="encoding" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="output" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="encoding" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.IO.BinaryWriter.BaseStream">
          <source>Gets the underlying stream of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph>.</source>
          <target state="translated">Pobiera zasadniczy strumień dla <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryWriter.BaseStream">
          <source>The underlying stream associated with the <ph id="ph1">&lt;see langword="BinaryWriter" /&gt;</ph>.</source>
          <target state="translated">Zasadniczy strumień skojarzone z <ph id="ph1">&lt;see langword="BinaryWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryWriter.BaseStream">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryWriter.BaseStream">
          <source>The following code example shows how to read and write <ph id="ph1">`Double`</ph> data to memory by using the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> and <ph id="ph3">`BinaryWriter`</ph> classes on top of the <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób odczytywania i zapisywania <ph id="ph1">`Double`</ph> danych pamięci przy użyciu <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> i <ph id="ph3">`BinaryWriter`</ph> klasy nad <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryWriter.BaseStream">
          <source><ph id="ph1">`MemoryStream`</ph> only reads and writes <ph id="ph2">`Byte`</ph> data.</source>
          <target state="translated"><ph id="ph1">`MemoryStream`</ph> tylko odczytywać i zapisywać <ph id="ph2">`Byte`</ph> danych.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Close">
          <source>Closes the current <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> and the underlying stream.</source>
          <target state="translated">Zamyka bieżące <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> i podstawowego strumienia.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Close">
          <source>This implementation of <ph id="ph1">`Close`</ph> calls the <ph id="ph2">&lt;xref:System.IO.BinaryWriter.Dispose%2A&gt;</ph> method passing a <ph id="ph3">`true`</ph> value.</source>
          <target state="translated">Ta implementacja <ph id="ph1">`Close`</ph> wywołania <ph id="ph2">&lt;xref:System.IO.BinaryWriter.Dispose%2A&gt;</ph> metody przekazywanie <ph id="ph3">`true`</ph> wartość.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Close">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id="ph1">&lt;xref:System.IO.BinaryWriter.Flush%2A&gt;</ph> or <ph id="ph2">`Close`</ph>.</source>
          <target state="translated">Opróżnianie strumienia nie opróżnić jego podstawowym kodera, chyba że jawnie wywołać <ph id="ph1">&lt;xref:System.IO.BinaryWriter.Flush%2A&gt;</ph> lub <ph id="ph2">`Close`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Close">
          <source>Setting <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
          <target state="translated">Ustawienie <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> do <ph id="ph2">`true`</ph> oznacza, że dane zostaną opróżnione z buforu w strumieniu, ale nie zostaną opróżnione kodera stanu.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Close">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
          <target state="translated">Dzięki temu koder ma zachowywać stan (częściowe znaki), aby ją poprawnie kodowania kolejny blok znaków.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Close">
          <source>This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</source>
          <target state="translated">Ten scenariusz dotyczy UTF8 i UTF7, w której niektóre znaki mogą być kodowane tylko po otrzymaniu koder sąsiedniego znaku ani znaków.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryWriter">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph>.</source>
          <target state="translated">Zwalnia zasoby używane przez <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> class.</source>
          <target state="translated">Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby zwolnić zasoby zarządzane i niezarządzane; <ph id="ph2">&lt;see langword="false" /&gt;</ph> aby zwolnić tylko zasoby niezarządzane.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">Zwalnia zasoby niezarządzane używane przez <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> i opcjonalnie zwalnia zasoby zarządzane.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Flush">
          <source>Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">Czyści wszystkie bufory dla bieżącego składnika zapisywania i powoduje, że wszystkie buforowane dane są zapisywane w podstawowej urządzenia.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Flush">
          <source>All derived classes should override <ph id="ph1">`Flush`</ph> to ensure that all buffered data is sent to the stream.</source>
          <target state="translated">Wszystkie klasy pochodne powinny przesłaniać <ph id="ph1">`Flush`</ph> aby upewnić się, że wszystkie buforowane dane są przesyłane do strumienia.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Flush">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id="ph1">`Flush`</ph> or <ph id="ph2">&lt;xref:System.IO.BinaryWriter.Close%2A&gt;</ph>.</source>
          <target state="translated">Opróżnianie strumienia nie opróżnić jego podstawowym kodera, chyba że jawnie wywołać <ph id="ph1">`Flush`</ph> lub <ph id="ph2">&lt;xref:System.IO.BinaryWriter.Close%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Flush">
          <source>Setting <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
          <target state="translated">Ustawienie <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> do <ph id="ph2">`true`</ph> oznacza, że dane zostaną opróżnione z buforu w strumieniu, ale nie zostaną opróżnione kodera stanu.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Flush">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
          <target state="translated">Dzięki temu koder ma zachowywać stan (częściowe znaki), aby ją poprawnie kodowania kolejny blok znaków.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Flush">
          <source>This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</source>
          <target state="translated">Ten scenariusz dotyczy UTF8 i UTF7, w której niektóre znaki mogą być kodowane tylko po otrzymaniu koder sąsiedniego znaku ani znaków.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Flush">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="F:System.IO.BinaryWriter.Null">
          <source>Specifies a <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> with no backing store.</source>
          <target state="translated">Określa <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> z nie magazynu zapasowego.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.BinaryWriter.Null">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="F:System.IO.BinaryWriter.OutStream">
          <source>Holds the underlying stream.</source>
          <target state="translated">Przechowuje źródłowego strumienia.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.BinaryWriter.OutStream">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>A byte offset relative to <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Przesunięcie bajtów, względem <bpt id="p1">&lt;c&gt;</bpt>pochodzenia<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>A field of <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> indicating the reference point from which the new position is to be obtained.</source>
          <target state="translated">Pola <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> wskazujący punkt odniesienia, z którego ma zostać uzyskany nowe położenie.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>Sets the position within the current stream.</source>
          <target state="translated">Ustawia położenie w obrębie bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>The position with the current stream.</source>
          <target state="translated">Pozycja z bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>The following example writes a series of byte values to a file.</source>
          <target state="translated">Poniższy przykład zapisuje szereg wartości w pliku.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>The example uses <ph id="ph1">&lt;xref:System.IO.BinaryWriter.Seek%2A&gt;</ph> to move to various locations in the file, and then writes marker bytes by using the <ph id="ph2">&lt;xref:System.IO.BinaryWriter.Write%2A&gt;</ph> method.</source>
          <target state="translated">W przykładzie użyto <ph id="ph1">&lt;xref:System.IO.BinaryWriter.Seek%2A&gt;</ph> na przechodzenie do różnych lokalizacji w pliku, a następnie zapisuje dane bajtów znacznika <ph id="ph2">&lt;xref:System.IO.BinaryWriter.Write%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>The file pointer was moved to an invalid location.</source>
          <target state="translated">Wskaźnik plik został przeniesiony do nieprawidłowej lokalizacji.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> value is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> Wartość jest nieprawidłowa.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryWriter">
          <source>Writes a value to the current stream.</source>
          <target state="translated">Zapisuje wartość bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value to write (0 or 1).</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> Wartość do zapisania (0 lub 1).</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Boolean)">
          <source>Writes a one-byte <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value to the current stream, with 0 representing <ph id="ph2">&lt;see langword="false" /&gt;</ph> and 1 representing <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Zapisuje jednobajtowych <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> wartość do bieżącego strumienia z reprezentujący 0 <ph id="ph2">&lt;see langword="false" /&gt;</ph> i 1 reprezentujący <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Boolean)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Boolean)">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">Poniższy przykład kodu demonstruje sposób przechowywania i pobierania ustawień aplikacji w pliku.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Boolean)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Boolean)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>The unsigned byte to write.</source>
          <target state="translated">Niepodpisane bajtów do zapisania.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>Writes an unsigned byte to the current stream and advances the stream position by one byte.</source>
          <target state="translated">Zapisuje bieżący strumień bajtu bez znaku i zmienia pozycję strumienia przez jednego bajtu.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>Because of data formatting conflicts, using this method with the following encodings is not recommended:</source>
          <target state="translated">Z powodu konfliktów formatowania danych z następujących kodowań za pomocą tej metody nie jest zalecane:</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>UTF-7</source>
          <target state="translated">UTF-7</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>ISO-2022-JP</source>
          <target state="translated">ISO-2022-JP</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>ISCII</source>
          <target state="translated">ISCII</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</source>
          <target state="translated">Poniższy przykład kodu pokazuje sposób zapisywania danych binarnych jako magazynu zapasowego przy użyciu pamięci, a następnie sprawdź, czy dane zostały poprawnie zapisane.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[])">
          <source>A byte array containing the data to write.</source>
          <target state="translated">Tablica bajtów zawierająca dane do zapisania.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[])">
          <source>Writes a byte array to the underlying stream.</source>
          <target state="translated">Zapisuje tablicę bajtów do źródłowego strumienia.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte[])">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte[])">
          <source>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</source>
          <target state="translated">Poniższy przykład kodu pokazuje sposób zapisywania danych binarnych jako magazynu zapasowego przy użyciu pamięci, a następnie sprawdź, czy dane zostały poprawnie zapisane.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[])">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[])">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>The non-surrogate, Unicode character to write.</source>
          <target state="translated">Znak Unicode z systemem innym niż zastępcza, do zapisania.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>Writes a Unicode character to the current stream and advances the current position of the stream in accordance with the <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> used and the specific characters being written to the stream.</source>
          <target state="translated">Zapisuje bieżący strumień znaków Unicode i zmienia pozycję bieżącego strumienia zgodnie z <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> używane i konkretnym znaki są zapisywane do strumienia.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>Because of data formatting conflicts, using this method with the following encodings is not recommended:</source>
          <target state="translated">Z powodu konfliktów formatowania danych z następujących kodowań za pomocą tej metody nie jest zalecane:</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>UTF-7</source>
          <target state="translated">UTF-7</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>ISO-2022-JP</source>
          <target state="translated">ISO-2022-JP</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>ISCII</source>
          <target state="translated">ISCII</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>Unicode surrogate characters must be written out as pairs together in the same call, not individually.</source>
          <target state="translated">Znaki dwuskładnikowe Unicode muszą być zapisywane w tym samym wywołaniu razem jako pary indywidualnie.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>If you require support for surrogate pairs in your application, consider using a character array and the <ph id="ph1">&lt;xref:System.IO.BinaryWriter.Write%2A&gt;</ph> method overload.</source>
          <target state="translated">Jeśli wymagana jest obsługa Znaki dwuskładnikowe w aplikacji, rozważ użycie tablicy znaków i <ph id="ph1">&lt;xref:System.IO.BinaryWriter.Write%2A&gt;</ph> przeciążenie metody.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>The following code example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak na odczytywanie i zapisywanie danych przy użyciu pamięci jako magazynu zapasowego.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source><ph id="ph1">&lt;paramref name="ch" /&gt;</ph> is a single surrogate character.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="ch" /&gt;</ph> jest część znaku dwuskładnikowego pojedynczego.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>A character array containing the data to write.</source>
          <target state="translated">Tablica znaków, zawierający dane do zapisania.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Writes a character array to the current stream and advances the current position of the stream in accordance with the <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> used and the specific characters being written to the stream.</source>
          <target state="translated">Zapisuje bieżący strumień tablicy znaków i zmienia pozycję bieżącego strumienia zgodnie z <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> używane i konkretnym znaki są zapisywane do strumienia.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>The following table lists examples of other typical or related I/O tasks.</source>
          <target state="translated">W poniższej tabeli wymieniono przykłady inne typowe i powiązanych zadań we/wy.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>To do this...</source>
          <target state="translated">Aby to zrobić...</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>See the example in this topic...</source>
          <target state="translated">Zobacz przykład w tym temacie...</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Create a text file.</source>
          <target state="translated">Utwórz plik tekstowy.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source><bpt id="p1">[</bpt>How to: Write Text to a File<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: zapisywanie tekstu w pliku<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Write to a text file.</source>
          <target state="translated">Zapis do pliku tekstowego.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source><bpt id="p1">[</bpt>How to: Write Text to a File<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: zapisywanie tekstu w pliku<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Read from a text file.</source>
          <target state="translated">Odczyt z pliku tekstowego.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source><bpt id="p1">[</bpt>How to: Read Text from a File<ept id="p1">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: odczytywanie tekstu z pliku<ept id="p1">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Append text to a file.</source>
          <target state="translated">Dołączanie tekstu do pliku.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source><bpt id="p1">[</bpt>How to: Open and Append to a Log File<ept id="p1">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: otwieranie pliku dziennika i dołączanie do niego<ept id="p1">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept></target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Get the size of a file.</source>
          <target state="translated">Uzyskać rozmiaru pliku.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Get the attributes of a file.</source>
          <target state="translated">Pobierz atrybuty pliku.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Set the attributes of a file.</source>
          <target state="translated">Ustawianie atrybutów pliku.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Determine if a file exists.</source>
          <target state="translated">Określ, czy plik istnieje.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Read from a binary file.</source>
          <target state="translated">Odczyt z pliku binarnego.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source><bpt id="p1">[</bpt>How to: Read and Write to a Newly Created Data File<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: odczyt i zapis we właśnie utworzonym pliku danych<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Write to a binary file.</source>
          <target state="translated">Zapis do pliku binarnego.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source><bpt id="p1">[</bpt>How to: Read and Write to a Newly Created Data File<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: odczyt i zapis we właśnie utworzonym pliku danych<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>The following code example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak na odczytywanie i zapisywanie danych przy użyciu pamięci jako magazynu zapasowego.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>The decimal value to write.</source>
          <target state="translated">Wartość dziesiętna do zapisu.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Writes a decimal value to the current stream and advances the stream position by sixteen bytes.</source>
          <target state="translated">Zapisuje wartość dziesiętną bieżący strumień i zmienia pozycję strumienia przez szesnastu bajtów.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>The following table lists examples of other typical or related I/O tasks.</source>
          <target state="translated">W poniższej tabeli wymieniono przykłady inne typowe i powiązanych zadań we/wy.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>To do this...</source>
          <target state="translated">Aby to zrobić...</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>See the example in this topic...</source>
          <target state="translated">Zobacz przykład w tym temacie...</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Create a text file.</source>
          <target state="translated">Utwórz plik tekstowy.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source><bpt id="p1">[</bpt>How to: Write Text to a File<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: zapisywanie tekstu w pliku<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Write to a text file.</source>
          <target state="translated">Zapis do pliku tekstowego.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source><bpt id="p1">[</bpt>How to: Write Text to a File<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: zapisywanie tekstu w pliku<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Read from a text file.</source>
          <target state="translated">Odczyt z pliku tekstowego.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source><bpt id="p1">[</bpt>How to: Read Text from a File<ept id="p1">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: odczytywanie tekstu z pliku<ept id="p1">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Append text to a file.</source>
          <target state="translated">Dołączanie tekstu do pliku.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source><bpt id="p1">[</bpt>How to: Open and Append to a Log File<ept id="p1">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: otwieranie pliku dziennika i dołączanie do niego<ept id="p1">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept></target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Get the size of a file.</source>
          <target state="translated">Uzyskać rozmiaru pliku.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Get the attributes of a file.</source>
          <target state="translated">Pobierz atrybuty pliku.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Set the attributes of a file.</source>
          <target state="translated">Ustawianie atrybutów pliku.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Determine if a file exists.</source>
          <target state="translated">Określ, czy plik istnieje.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Read from a binary file.</source>
          <target state="translated">Odczyt z pliku binarnego.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source><bpt id="p1">[</bpt>How to: Read and Write to a Newly Created Data File<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: odczyt i zapis we właśnie utworzonym pliku danych<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Write to a binary file.</source>
          <target state="translated">Zapis do pliku binarnego.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source><bpt id="p1">[</bpt>How to: Read and Write to a Newly Created Data File<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: odczyt i zapis we właśnie utworzonym pliku danych<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Double)">
          <source>The eight-byte floating-point value to write.</source>
          <target state="translated">Wartość zmiennoprzecinkowa ośmiu bajtów do zapisania.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Double)">
          <source>Writes an eight-byte floating-point value to the current stream and advances the stream position by eight bytes.</source>
          <target state="translated">Zapisuje bieżący strumień 8 bajtową wartość zmiennoprzecinkową i zmienia pozycję strumienia przez 8 bajtów.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Double)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Double)">
          <source>The following code example shows how to read and write <ph id="ph1">`Double`</ph> data to memory by using the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> and <ph id="ph3">`BinaryWriter`</ph> classes on top of the <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób odczytywania i zapisywania <ph id="ph1">`Double`</ph> danych pamięci przy użyciu <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> i <ph id="ph3">`BinaryWriter`</ph> klasy nad <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Double)">
          <source><ph id="ph1">`MemoryStream`</ph> only reads and writes <ph id="ph2">`Byte`</ph> data.</source>
          <target state="translated"><ph id="ph1">`MemoryStream`</ph> tylko odczytywać i zapisywać <ph id="ph2">`Byte`</ph> danych.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Double)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Double)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>The two-byte signed integer to write.</source>
          <target state="translated">2 bajtowych całkowita do zapisu.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Writes a two-byte signed integer to the current stream and advances the stream position by two bytes.</source>
          <target state="translated">Zapisuje bieżący strumień dwubajtowego całkowita i zmienia pozycję strumienia przez dwa bajty.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source><ph id="ph1">`BinaryWriter`</ph> stores this data type in little endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryWriter`</ph> przechowuje ten typ danych format little endian.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>The following table lists examples of other typical or related I/O tasks.</source>
          <target state="translated">W poniższej tabeli wymieniono przykłady inne typowe i powiązanych zadań we/wy.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>To do this...</source>
          <target state="translated">Aby to zrobić...</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>See the example in this topic...</source>
          <target state="translated">Zobacz przykład w tym temacie...</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Create a text file.</source>
          <target state="translated">Utwórz plik tekstowy.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source><bpt id="p1">[</bpt>How to: Write Text to a File<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: zapisywanie tekstu w pliku<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Write to a text file.</source>
          <target state="translated">Zapis do pliku tekstowego.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source><bpt id="p1">[</bpt>How to: Write Text to a File<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: zapisywanie tekstu w pliku<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Read from a text file.</source>
          <target state="translated">Odczyt z pliku tekstowego.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source><bpt id="p1">[</bpt>How to: Read Text from a File<ept id="p1">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: odczytywanie tekstu z pliku<ept id="p1">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Append text to a file.</source>
          <target state="translated">Dołączanie tekstu do pliku.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source><bpt id="p1">[</bpt>How to: Open and Append to a Log File<ept id="p1">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: otwieranie pliku dziennika i dołączanie do niego<ept id="p1">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept></target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Get the size of a file.</source>
          <target state="translated">Uzyskać rozmiaru pliku.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Get the attributes of a file.</source>
          <target state="translated">Pobierz atrybuty pliku.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Set the attributes of a file.</source>
          <target state="translated">Ustawianie atrybutów pliku.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Determine if a file exists.</source>
          <target state="translated">Określ, czy plik istnieje.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Read from a binary file.</source>
          <target state="translated">Odczyt z pliku binarnego.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source><bpt id="p1">[</bpt>How to: Read and Write to a Newly Created Data File<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: odczyt i zapis we właśnie utworzonym pliku danych<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Write to a binary file.</source>
          <target state="translated">Zapis do pliku binarnego.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source><bpt id="p1">[</bpt>How to: Read and Write to a Newly Created Data File<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instrukcje: odczyt i zapis we właśnie utworzonym pliku danych<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int32)">
          <source>The four-byte signed integer to write.</source>
          <target state="translated">4 bajtowych całkowita do zapisu.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int32)">
          <source>Writes a four-byte signed integer to the current stream and advances the stream position by four bytes.</source>
          <target state="translated">Zapisuje bieżący strumień całkowita 4 bajtowych i zmienia pozycję strumienia przez cztery bajty.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int32)">
          <source><ph id="ph1">`BinaryWriter`</ph> stores this data type in little endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryWriter`</ph> przechowuje ten typ danych format little endian.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int32)">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">Poniższy przykład kodu demonstruje sposób przechowywania i pobierania ustawień aplikacji w pliku.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int64)">
          <source>The eight-byte signed integer to write.</source>
          <target state="translated">8 bajtowych całkowita do zapisu.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int64)">
          <source>Writes an eight-byte signed integer to the current stream and advances the stream position by eight bytes.</source>
          <target state="translated">Zapisuje bieżący strumień 8 bajtowych liczbę całkowitą ze znakiem i zmienia pozycję strumienia przez 8 bajtów.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int64)">
          <source><ph id="ph1">`BinaryWriter`</ph> stores this data type in little endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryWriter`</ph> przechowuje ten typ danych format little endian.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int64)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int64)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int64)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.SByte)">
          <source>The signed byte to write.</source>
          <target state="translated">Podpisem bajtów do zapisania.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.SByte)">
          <source>Writes a signed byte to the current stream and advances the stream position by one byte.</source>
          <target state="translated">Zapisuje bieżący strumień bajtu ze znakiem i zmienia pozycję strumienia przez jednego bajtu.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.SByte)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.SByte)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.SByte)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Single)">
          <source>The four-byte floating-point value to write.</source>
          <target state="translated">4 bajtowych liczb zmiennoprzecinkowych wartość do zapisania.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Single)">
          <source>Writes a four-byte floating-point value to the current stream and advances the stream position by four bytes.</source>
          <target state="translated">Zapisuje bieżący strumień 4 bajtową wartość zmiennoprzecinkową i zmienia pozycję strumienia przez cztery bajty.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Single)">
          <source><ph id="ph1">`BinaryWriter`</ph> stores this data type in little endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryWriter`</ph> przechowuje ten typ danych format little endian.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Single)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Single)">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">Poniższy przykład kodu demonstruje sposób przechowywania i pobierania ustawień aplikacji w pliku.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Single)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Single)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>The value to write.</source>
          <target state="translated">Wartość do zapisu.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>Writes a length-prefixed string to this stream in the current encoding of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph>, and advances the current position of the stream in accordance with the encoding used and the specific characters being written to the stream.</source>
          <target state="translated">Zapisuje ciąg prefiks długości tego strumienia w bieżącym kodowanie <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph>i zwiększa bieżącej pozycji strumienia zgodnie z kodowanie używane i określonych znaków są zapisywane do strumienia.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>Length-prefixed means that this method first writes the length of the string, in bytes, when encoded with the <ph id="ph1">&lt;xref:System.IO.BinaryWriter&gt;</ph> instance's current encoding to the stream.</source>
          <target state="translated">Prefiks długości oznacza, że ta metoda najpierw zapisuje długość ciągu, w bajtach, gdy zakodowane za pomocą <ph id="ph1">&lt;xref:System.IO.BinaryWriter&gt;</ph> wystąpienia bieżącego kodowania w strumieniu.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>This value is written as an unsigned integer.</source>
          <target state="translated">Ta wartość jest zapisywany jako liczba całkowita bez znaku.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>This method then writes that many bytes to the stream.</source>
          <target state="translated">Ta metoda następnie zapisuje wybranej liczby bajtów do strumienia.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>For example, the string "A" has a length of 1, but when encoded with UTF-16; the length is 2 bytes, so the value written in the prefix is 2, and 3 bytes are written to the stream, including the prefix.</source>
          <target state="translated">Na przykład ciąg "A" ma długość 1, ale gdy zakodowane za pomocą UTF-16; długość jest 2 bajty, więc wartość napisana prefiks jest równa 2, 3 bajtów są zapisywane do strumienia, w tym prefiks.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">Poniższy przykład kodu demonstruje sposób przechowywania i pobierania ustawień aplikacji w pliku.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt16)">
          <source>The two-byte unsigned integer to write.</source>
          <target state="translated">Całkowitą bez znaku dwubajtowego do zapisu.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt16)">
          <source>Writes a two-byte unsigned integer to the current stream and advances the stream position by two bytes.</source>
          <target state="translated">Zapisuje bieżący strumień liczbę całkowitą bez znaku dwubajtowego i zmienia pozycję strumienia przez dwa bajty.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.UInt16)">
          <source><ph id="ph1">`BinaryWriter`</ph> stores this data type in little endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryWriter`</ph> przechowuje ten typ danych format little endian.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.UInt16)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt16)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt16)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt32)">
          <source>The four-byte unsigned integer to write.</source>
          <target state="translated">4 bajtowych całkowitą bez znaku do zapisu.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt32)">
          <source>Writes a four-byte unsigned integer to the current stream and advances the stream position by four bytes.</source>
          <target state="translated">Zapisuje bieżący strumień 4 bajtowych liczbę całkowitą bez znaku i zmienia pozycję strumienia przez cztery bajty.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.UInt32)">
          <source><ph id="ph1">`BinaryWriter`</ph> stores this data type in little endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryWriter`</ph> przechowuje ten typ danych format little endian.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.UInt32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt32)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt32)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt64)">
          <source>The eight-byte unsigned integer to write.</source>
          <target state="translated">8 bajtowa liczba całkowita bez znaku do zapisu.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt64)">
          <source>Writes an eight-byte unsigned integer to the current stream and advances the stream position by eight bytes.</source>
          <target state="translated">Zapisuje bieżący strumień całkowitą bez znaku ośmiu bajtów i zmienia pozycję strumienia przez 8 bajtów.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.UInt64)">
          <source><ph id="ph1">`BinaryWriter`</ph> stores this data type in little endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryWriter`</ph> przechowuje ten typ danych format little endian.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.UInt64)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt64)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt64)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>A byte array containing the data to write.</source>
          <target state="translated">Tablica bajtów zawierająca dane do zapisania.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The starting point in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing.</source>
          <target state="translated">Punkt początkowy w <bpt id="p1">&lt;c&gt;</bpt>buforu<ept id="p1">&lt;/c&gt;</ept> pod którym ma rozpocząć się zapis.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write.</source>
          <target state="translated">Liczba bajtów do zapisania.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writes a region of a byte array to the current stream.</source>
          <target state="translated">Zapisuje bieżący strumień region tablicy bajtów.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</source>
          <target state="translated">Poniższy przykład kodu pokazuje sposób zapisywania danych binarnych jako magazynu zapasowego przy użyciu pamięci, a następnie sprawdź, czy dane zostały poprawnie zapisane.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">Długość buforu pomniejszona o <ph id="ph1">&lt;paramref name="index" /&gt;</ph> jest mniejsza niż <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="count" /&gt;</ph> jest ujemna.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>A character array containing the data to write.</source>
          <target state="translated">Tablica znaków, zawierający dane do zapisania.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>The starting point in <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept> from which to begin writing.</source>
          <target state="translated">Punkt początkowy w <bpt id="p1">&lt;c&gt;</bpt>znaków<ept id="p1">&lt;/c&gt;</ept> z której ma rozpocząć się zapis.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to write.</source>
          <target state="translated">Liczba znaków, jaka ma zostać zapisana.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>Writes a section of a character array to the current stream, and advances the current position of the stream in accordance with the <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> used and perhaps the specific characters being written to the stream.</source>
          <target state="translated">Zapisuje bieżący strumień części tablicy znaków i zmienia bieżącej pozycji strumienia zgodnie z <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> używane i prawdopodobnie konkretnym znaki są zapisywane do strumienia.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>The following code example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak na odczytywanie i zapisywanie danych przy użyciu pamięci jako magazynu zapasowego.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">Długość buforu pomniejszona o <ph id="ph1">&lt;paramref name="index" /&gt;</ph> jest mniejsza niż <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="count" /&gt;</ph> jest ujemna.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>The 32-bit integer to be written.</source>
          <target state="translated">Liczba całkowita 32-bitowej do zapisania.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>Writes a 32-bit integer in a compressed format.</source>
          <target state="translated">Zapisuje 32-bitową liczbę całkowitą w postaci skompresowanej.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>The integer of the <ph id="ph1">`value`</ph> parameter is written out seven bits at a time, starting with the seven least-significant bits.</source>
          <target state="translated">Wartość całkowita <ph id="ph1">`value`</ph> parametru jest zapisywany siedem bitów w czasie, począwszy od siedmiu najmniej znaczących bitów.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>The high bit of a byte indicates whether there are more bytes to be written after this one.</source>
          <target state="translated">Wysokobitowe bajtu wskazuje, czy istnieją większej liczby bajtów do zapisania po tym.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>If <ph id="ph1">`value`</ph> will fit in seven bits, it takes only one byte of space.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> zmieści się w bitach siedmiu zajmuje tylko jednego bajtu miejsca.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>If <ph id="ph1">`value`</ph> will not fit in seven bits, the high bit is set on the first byte and written out. <ph id="ph2">`value`</ph> is then shifted by seven bits and the next byte is written.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> nie mieści się w siedmiu bitów dużej szybkości jest ustawiony na pierwszy bajt i zapisany. <ph id="ph2">`value`</ph> następnie zostanie przesunięty siedem bitów, a następne są zapisywane bajtów.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>This process is repeated until the entire integer has been written.</source>
          <target state="translated">Ten proces jest powtarzany, dopóki nie została zapisana cała liczb całkowitych.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">Aby uzyskać listę typowe zadania we/wy, zobacz <bpt id="p1">[</bpt>typowe zadania we/wy<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>The end of the stream is reached.</source>
          <target state="translated">Osiągnięto koniec strumienia.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">Strumień jest zamknięty.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>