<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Stream.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86cc2a48ad6254044761826100b2be9db53d138b868.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2a48ad6254044761826100b2be9db53d138b868</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Provides a generic view of a sequence of bytes.</source>
          <target state="translated">Przedstawia ogólny widok sekwencji bajtów.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>This is an abstract class.</source>
          <target state="translated">To jest klasą abstrakcyjną.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> is the abstract base class of all streams.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> jest abstrakcyjna klasa podstawowa dla wszystkich strumieni.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket.</source>
          <target state="translated">Strumień jest abstrakcję sekwencję bajtów, takie jak plik, urządzenia wejścia/wyjścia, potok komunikacji międzyprocesowej lub gniazda TCP/IP.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> Klasy pochodne Podaj ogólny widok różnego typu dane wejściowe i wyjściowe i izolowanie programisty z szczegóły podstawowej urządzeń i systemu operacyjnego.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Streams involve three fundamental operations:</source>
          <target state="translated">Strumienie obejmują trzy podstawowe operacje:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can read from streams.</source>
          <target state="translated">Można czytać ze strumieni.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Reading is the transfer of data from a stream into a data structure, such as an array of bytes.</source>
          <target state="translated">Odczytywanie jest transferu danych ze strumienia do struktury danych, takich jak tablicę bajtów.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can write to streams.</source>
          <target state="translated">Możesz zapisywać do strumieni.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Writing is the transfer of data from a data structure into a stream.</source>
          <target state="translated">Zapisywanie jest transferu danych ze strukturą danych w strumieniu.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Streams can support seeking.</source>
          <target state="translated">Strumienie może obsługiwać operacji wyszukiwania.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Seeking refers to querying and modifying the current position within a stream.</source>
          <target state="translated">Wyszukiwanie odwołuje się do badania i modyfikowania bieżącą pozycję w strumieniu.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Seek capability depends on the kind of backing store a stream has.</source>
          <target state="translated">Wyszukiwanie możliwości zależy od rodzaju magazynu zapasowego strumienia ma.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.</source>
          <target state="translated">Na przykład strumieni sieci nie znają ujednoliconego pojęcia bieżącej pozycji, a zatem zwykle nie obsługują przeszukiwania.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Some of the more commonly used streams that inherit from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> are <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">Niektórych najczęściej używanych strumieni, które dziedziczą z <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> są <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, i <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Depending on the underlying data source or repository, streams might support only some of these capabilities.</source>
          <target state="translated">W zależności od tego źródła danych lub repozytorium strumienie może obsługiwać tylko niektóre z tych funkcji.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can query a stream for its capabilities by using the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> properties of the <ph id="ph4">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">Strumień dla jego możliwości można badać przy użyciu <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>, i <ph id="ph3">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> właściwości <ph id="ph4">&lt;xref:System.IO.Stream&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> methods read and write data in a variety of formats.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> metody odczytywanie i zapisywanie danych w różnych formatach.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For streams that support seeking, use the <ph id="ph1">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph> methods and the <ph id="ph3">&lt;xref:System.IO.Stream.Position%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.Stream.Length%2A&gt;</ph> properties to query and modify the current position and length of a stream.</source>
          <target state="translated">Dla strumieni, które obsługują wyszukiwanie, użyj <ph id="ph1">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph> metod i <ph id="ph3">&lt;xref:System.IO.Stream.Position%2A&gt;</ph> i <ph id="ph4">&lt;xref:System.IO.Stream.Length%2A&gt;</ph> właściwości wyszukiwania i modyfikowania bieżącej pozycji i długości strumienia.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Ten typ implementuje <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Po zakończeniu przy użyciu typu bezpośrednio lub pośrednio należy usunąć z niego.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Do usuwania tego typu, należy wywołać jej <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metody w <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloku.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Do usunięcia ich pośrednio, użyj konstrukcji języka takiego jak <ph id="ph1">`using`</ph> (w języku C#) lub <ph id="ph2">`Using`</ph> (w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interfejsu tematu.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Disposing a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object flushes any buffered data, and essentially calls the <ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method for you.</source>
          <target state="translated">Usuwanie <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> obiekt czyści wszystkie buforowane dane i zasadniczo wywołuje <ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> metodę.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> również zwalnia zasoby systemu operacyjnego, takich jak dojścia do plików, połączeń sieciowych lub pamięć używana na potrzeby wewnętrznego buforowania.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> Klasa udostępnia możliwości otacza buforowanego strumienia innego strumienia w celu poprawy odczytu i zapisu wydajności.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class includes async methods to simplify asynchronous operations.</source>
          <target state="translated">Począwszy od <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> klasa zawiera metody asynchroniczne, aby uprościć operacji asynchronicznych.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>An async method contains <ph id="ph1">`Async`</ph> in its name, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>.</source>
          <target state="translated">Zawiera metody asynchronicznej <ph id="ph1">`Async`</ph> w swoim imieniu, takie jak <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, i <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>These methods enable you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">Te metody umożliwiają wykonywanie operacji We/Wy obciąża bez blokowania głównego wątku.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Ten aspekt dotyczący wydajności jest szczególnie ważny w aplikacji <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> lub aplikacjach <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph>, gdzie czasochłonne operacje strumieniowe mogą zablokować wątek interfejsu użytkownika i spowodować, że aplikacja będzie wyglądać, jakby przestała działać.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Metody asynchroniczne są używane w połączeniu z <ph id="ph1">`async`</ph> i <ph id="ph2">`await`</ph> słów kluczowych w języku Visual Basic i C#.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When used in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app, <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> includes two extension methods: <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A&gt;</ph>.</source>
          <target state="translated">W przypadku używania w <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> aplikacji, <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> udostępnia dwie metody rozszerzenia: <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A&gt;</ph> i <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>These methods convert a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object to a stream in the <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>.</source>
          <target state="translated">Konwertuj tych metod <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> obiektu do strumienia w <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can also convert a stream in the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> to a <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object by using the <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A&gt;</ph> methods.</source>
          <target state="translated">Można również przeprowadzić konwersję strumienia w <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> do <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> obiektu za pomocą <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A&gt;</ph> i <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Convert Between .NET Framework Streams and Windows Runtime Streams<ept id="p1">](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</ept></source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>porady: konwertowanie między .NET Framework i strumieni środowiska wykonawczego systemu Windows<ept id="p1">](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Some stream implementations perform local buffering of the underlying data to improve performance.</source>
          <target state="translated">Niektóre implementacje strumienia wykonania lokalnego buforowania danych w celu zwiększenia wydajności.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For such streams, you can use the <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.</source>
          <target state="translated">W przypadku tych strumieni, można użyć <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> metody, aby wyczyścić wszystkie bufory wewnętrzne i upewnij się, że wszystkie dane zostały zapisane w podstawowym źródłem danych lub repozytorium.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>If you need a stream with no backing store (also known as a bit bucket), use the <ph id="ph1">&lt;xref:System.IO.Stream.Null&gt;</ph> field to retrieve an instance of a stream that is designed for this purpose.</source>
          <target state="translated">Strumień nie magazynu zapasowego (znanej także jako Zasobnik bit), należy użyć <ph id="ph1">&lt;xref:System.IO.Stream.Null&gt;</ph> pola można pobrać wystąpienia strumienia, który jest przeznaczony do tego celu.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The following example demonstrates how to use two <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> objects to asynchronously copy the files from one directory to another directory.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak używać dwóch <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> obiektów asynchronicznie skopiować plików z jednego katalogu do innego katalogu.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> Pochodną klasy <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> event handler for the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> control is marked with the <ph id="ph3">`async`</ph> modifier because it calls an asynchronous method.</source>
          <target state="translated">Program obsługi zdarzeń <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> kontrolki <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> jest oznaczony modyfikatorem <ph id="ph3">`async`</ph>, ponieważ wywołuje metodę asynchroniczną.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When you implement a derived class of <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, you must provide implementations for the <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> methods.</source>
          <target state="translated">Podczas implementacji klasy pochodnej z <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, muszą zawierać implementacje dla <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> i <ph id="ph3">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The asynchronous methods <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, and <ph id="ph3">&lt;see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" /&gt;</ph> use the synchronous methods <ph id="ph4">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph5">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> in their implementations.</source>
          <target state="translated">Metod asynchronicznych <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, i <ph id="ph3">&lt;see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" /&gt;</ph> Użyj metod synchronicznych <ph id="ph4">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> i <ph id="ph5">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> w ich implementacji.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Therefore, your implementations of <ph id="ph1">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> will work correctly with the asynchronous methods.</source>
          <target state="translated">W związku z tym Twoje implementacje <ph id="ph1">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> i <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> będzie działać prawidłowo z metod asynchronicznych.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The default implementations of <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadByte" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteByte(System.Byte)" /&gt;</ph> create a new single-element byte array, and then call your implementations of <ph id="ph3">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph4">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">Domyślne implementacje <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadByte" /&gt;</ph> i <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteByte(System.Byte)" /&gt;</ph> Tworzenie nowej tablicy bajtowej pojedynczego elementu, a następnie wywołać z implementacji <ph id="ph3">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> i <ph id="ph4">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When you derive from <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, we recommend that you override these methods to access your internal buffer, if you have one, for substantially better performance.</source>
          <target state="translated">Jeśli pochodzi od <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, firma Microsoft zaleca, aby zastąpić te metody dostępu do Twojej wewnętrznego buforu, jeśli istnieje, aby znacznie lepszą wydajność.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You must also provide implementations of <ph id="ph1">&lt;see cref="P:System.IO.Stream.CanRead" /&gt;</ph>, <ph id="ph2">&lt;see cref="P:System.IO.Stream.CanSeek" /&gt;</ph>, <ph id="ph3">&lt;see cref="P:System.IO.Stream.CanWrite" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.IO.Stream.Length" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.IO.Stream.Position" /&gt;</ph>, <ph id="ph7">&lt;see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" /&gt;</ph>, and <ph id="ph8">&lt;see cref="M:System.IO.Stream.SetLength(System.Int64)" /&gt;</ph>.</source>
          <target state="translated">Należy również podać implementacje <ph id="ph1">&lt;see cref="P:System.IO.Stream.CanRead" /&gt;</ph>, <ph id="ph2">&lt;see cref="P:System.IO.Stream.CanSeek" /&gt;</ph>, <ph id="ph3">&lt;see cref="P:System.IO.Stream.CanWrite" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.IO.Stream.Length" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.IO.Stream.Position" /&gt;</ph>, <ph id="ph7">&lt;see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" /&gt;</ph>, i <ph id="ph8">&lt;see cref="M:System.IO.Stream.SetLength(System.Int64)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Do not override the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> method, instead, put all the <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> cleanup logic in the <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">Nie zastępuj <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> metody, należy umieścić wszystkie <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> oczyszczania logiki w <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>implementacja metody Dispose<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.#ctor">
          <source><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> is the abstract base class of all streams.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> jest abstrakcyjna klasa podstawowa dla wszystkich strumieni.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.#ctor">
          <source>Some of the more commonly used streams that inherit from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> are <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">Niektórych najczęściej używanych strumieni, które dziedziczą z <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> są <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, i <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer to read the data into.</source>
          <target state="translated">Bufor do wczytania danych.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data read from the stream.</source>
          <target state="translated">Przesunięcie bajtów w <bpt id="p1">&lt;c&gt;</bpt>buforu<ept id="p1">&lt;/c&gt;</ept> jaką rozpocząć pisanie dane odczytane ze strumienia.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">Maksymalna liczba bajtów do odczytania.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the read is complete.</source>
          <target state="translated">Opcjonalne asynchroniczne wywołanie zwrotne, ma być wywoływana po zakończeniu odczytu.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous read request from other requests.</source>
          <target state="translated">Obiekt dostarczane przez użytkownika, która odróżnia to asynchroniczne żądanie odczytu z innych żądań.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous read operation.</source>
          <target state="translated">Rozpoczyna operację asynchroniczną odczytu.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">(Rozważ użycie <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> zamiast.)</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous read, which could still be pending.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> Reprezentujący asynchroniczny odczyt, który może być oczekujące.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">W programie .NET Framework w wersji 4 i starszych do implementowania asynchronicznych operacji We/Wy należy używać metod takich jak <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">Te metody są nadal dostępne w <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> do obsługi starszego kodu; jednak nowych metod asynchronicznych, takich jak <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, i <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, pomocy łatwo zaimplementować asynchronicznej operacji We/Wy.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The default implementation of <ph id="ph1">`BeginRead`</ph> on a stream calls the <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> method synchronously, which means that <ph id="ph3">`Read`</ph> might block on some streams.</source>
          <target state="translated">Domyślna implementacja <ph id="ph1">`BeginRead`</ph> na strumieniu wywołania <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> metody synchronicznie, co oznacza, że <ph id="ph3">`Read`</ph> może spowodować zablokowanie w niektórych strumieni.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>However, instances of classes such as <ph id="ph1">`FileStream`</ph> and <ph id="ph2">`NetworkStream`</ph> fully support asynchronous operations if the instances have been opened asynchronously.</source>
          <target state="translated">Jednak wystąpień klas takich jak <ph id="ph1">`FileStream`</ph> i <ph id="ph2">`NetworkStream`</ph> obsługują w pełni operacji asynchronicznych, jeśli wystąpienie zostało otwarte asynchronicznie.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Therefore, calls to <ph id="ph1">`BeginRead`</ph> will not block on those streams.</source>
          <target state="translated">W związku z tym wywołań <ph id="ph1">`BeginRead`</ph> nie powoduje blokowania na tych strumieni.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can override <ph id="ph1">`BeginRead`</ph> (by using async delegates, for example) to provide asynchronous behavior.</source>
          <target state="translated">Można zastąpić <ph id="ph1">`BeginRead`</ph> (przy użyciu delegatów asynchronicznych, na przykład) zapewniające asynchronicznego.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the <ph id="ph1">`IAsyncResult`</ph> return value to the <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> method of the stream to determine how many bytes were read and to release operating system resources used for reading.</source>
          <target state="translated">Przekaż <ph id="ph1">`IAsyncResult`</ph> zwrócić wartość do <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> metody strumienia, aby określić liczbę bajtów zostały odczytane i aby zwolnić zasoby systemu operacyjnego używany do odczytu.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> musi być wywołana raz dla każdego wywołania <ph id="ph2">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can do this either by using the same code that called <ph id="ph1">`BeginRead`</ph> or in a callback passed to <ph id="ph2">`BeginRead`</ph>.</source>
          <target state="translated">Można to zrobić przy użyciu tego samego kodu, który wywołał <ph id="ph1">`BeginRead`</ph> lub wywołanie zwrotne przekazane do <ph id="ph2">`BeginRead`</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current position in the stream is updated when the asynchronous read or write is issued, not when the I/O operation completes.</source>
          <target state="translated">Bieżąca pozycja w strumieniu jest aktualizowana asynchroniczny odczyt lub zapis jest, gdy nie, po zakończeniu operacji We/Wy.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Multiple simultaneous asynchronous requests render the request completion order uncertain.</source>
          <target state="translated">Wiele równoczesnych żądań asynchronicznych renderowania wiedzą kolejności wykonania żądania.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> właściwości w celu określenia, czy bieżące wystąpienie obsługuje odczytu.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id="ph1">`BeginRead`</ph>.</source>
          <target state="translated">Jeśli strumień jest zamknięty lub Przekaż nieprawidłowy argument, istnieją wyjątki zgłaszane bezpośrednio z <ph id="ph1">`BeginRead`</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling <ph id="ph1">`EndRead`</ph>.</source>
          <target state="translated">Błędów występujących podczas odczytu żądania asynchronicznego, takiej jak awaria dysku podczas wykonywania żądania We/Wy wystąpić w wątku puli wątków i zgłaszanie wyjątków podczas wywoływania metody <ph id="ph1">`EndRead`</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Attempted an asynchronous read past the end of the stream, or a disk error occurs.</source>
          <target state="translated">Próba asynchroniczny odczyt poza końcem strumienia lub występuje błąd dysku.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">Co najmniej jeden z argumentów jest nieprawidłowa.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Metody wywołane po strumień został zamknięty.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> implementation does not support the read operation.</source>
          <target state="translated">Bieżący <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> implementacja nie obsługuje operacji odczytu.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer to write data from.</source>
          <target state="translated">Bufor zapisywania danych z.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin writing.</source>
          <target state="translated">Przesunięcie bajtów w <bpt id="p1">&lt;c&gt;</bpt>buforu<ept id="p1">&lt;/c&gt;</ept> z której ma rozpocząć się zapis.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">Maksymalna liczba bajtów do zapisania.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the write is complete.</source>
          <target state="translated">Opcjonalne asynchroniczne wywołanie zwrotne, ma być wywoływana po zakończeniu zapisu.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous write request from other requests.</source>
          <target state="translated">Obiekt dostarczane przez użytkownika, która odróżnia to żądanie określonego zapis asynchroniczny od innych żądań.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous write operation.</source>
          <target state="translated">Rozpoczyna operację asynchronicznego zapisu.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">(Rozważ użycie <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> zamiast.)</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see langword="IAsyncResult" /&gt;</ph> that represents the asynchronous write, which could still be pending.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="IAsyncResult" /&gt;</ph> Reprezentujący zapis asynchroniczny, który może być oczekujące.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">W programie .NET Framework w wersji 4 i starszych do implementowania asynchronicznych operacji We/Wy należy używać metod takich jak <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">Te metody są nadal dostępne w <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> do obsługi starszego kodu; jednak nowych metod asynchronicznych, takich jak <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, i <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, pomocy łatwo zaimplementować asynchronicznej operacji We/Wy.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The default implementation of <ph id="ph1">`BeginWrite`</ph> on a stream calls the <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> method synchronously, which means that <ph id="ph3">`Write`</ph> might block on some streams.</source>
          <target state="translated">Domyślna implementacja <ph id="ph1">`BeginWrite`</ph> na strumieniu wywołania <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> metody synchronicznie, co oznacza, że <ph id="ph3">`Write`</ph> może spowodować zablokowanie w niektórych strumieni.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>However, instances of classes such as <ph id="ph1">`FileStream`</ph> and <ph id="ph2">`NetworkStream`</ph> fully support asynchronous operations if the instances have been opened asynchronously.</source>
          <target state="translated">Jednak wystąpień klas takich jak <ph id="ph1">`FileStream`</ph> i <ph id="ph2">`NetworkStream`</ph> obsługują w pełni operacji asynchronicznych, jeśli wystąpienie zostało otwarte asynchronicznie.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Therefore, calls to <ph id="ph1">`BeginWrite`</ph> will not block on those streams.</source>
          <target state="translated">W związku z tym wywołań <ph id="ph1">`BeginWrite`</ph> nie powoduje blokowania na tych strumieni.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can override <ph id="ph1">`BeginWrite`</ph> (by using async delegates, for example) to provide asynchronous behavior.</source>
          <target state="translated">Można zastąpić <ph id="ph1">`BeginWrite`</ph> (przy użyciu delegatów asynchronicznych, na przykład) zapewniające asynchronicznego.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the <ph id="ph1">`IAsyncResult`</ph> returned by the current method to <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to ensure that the write completes and frees resources appropriately.</source>
          <target state="translated">Przekaż <ph id="ph1">`IAsyncResult`</ph> zwróconych przez metodę bieżącego <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> zakończeniu zapisu i odpowiednio zwalnia zasoby.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> musi być wywołana raz dla każdego wywołania <ph id="ph2">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can do this either by using the same code that called <ph id="ph1">`BeginWrite`</ph> or in a callback passed to <ph id="ph2">`BeginWrite`</ph>.</source>
          <target state="translated">Można to zrobić przy użyciu tego samego kodu, który wywołał <ph id="ph1">`BeginWrite`</ph> lub wywołanie zwrotne przekazane do <ph id="ph2">`BeginWrite`</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If an error occurs during an asynchronous write, an exception will not be thrown until <ph id="ph1">`EndWrite`</ph> is called with the <ph id="ph2">`IAsyncResult`</ph> returned by this method.</source>
          <target state="translated">Jeśli wystąpi błąd podczas zapis asynchroniczny, wyjątek nie zostać zgłoszony do <ph id="ph1">`EndWrite`</ph> jest wywoływana z <ph id="ph2">`IAsyncResult`</ph> zwracane przez tę metodę.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is writable, writing at the end of the stream expands the stream.</source>
          <target state="translated">Jeśli strumień jest zapisywalny, zapisywanie na koniec strumienia rozszerza strumienia.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes.</source>
          <target state="translated">Bieżącą pozycję w strumieniu jest aktualizowany podczas generowania asynchroniczny odczyt lub zapis, nie, po zakończeniu operacji We/Wy.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Multiple simultaneous asynchronous requests render the request completion order uncertain.</source>
          <target state="translated">Wiele równoczesnych żądań asynchronicznych renderowania wiedzą kolejności wykonania żądania.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> właściwości w celu określenia, czy bieżące wystąpienie obsługuje zapis.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id="ph1">`BeginWrite`</ph>.</source>
          <target state="translated">Jeśli strumień jest zamknięty lub Przekaż nieprawidłowy argument, istnieją wyjątki zgłaszane bezpośrednio z <ph id="ph1">`BeginWrite`</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling <ph id="ph1">`EndWrite`</ph>.</source>
          <target state="translated">Błędów występujących podczas żądania asynchronicznego zapisu, takiej jak awaria dysku podczas wykonywania żądania We/Wy wystąpić w wątku puli wątków i zgłaszanie wyjątków podczas wywoływania metody <ph id="ph1">`EndWrite`</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Attempted an asynchronous write past the end of the stream, or a disk error occurs.</source>
          <target state="translated">Próba asynchronicznego zapisu poza końcem strumienia lub występuje błąd dysku.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">Co najmniej jeden z argumentów jest nieprawidłowa.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Metody wywołane po strumień został zamknięty.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> implementation does not support the write operation.</source>
          <target state="translated">Bieżący <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> implementacja nie obsługuje operacji zapisu.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanRead">
          <source>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej pobiera wartość wskazującą, czy bieżący strumień obsługuje odczytu.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports reading; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli strumień nie udostępnia możliwości czytania; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support reading, calls to the <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> methods throw a <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Jeśli klasą pochodną <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> nie obsługuje operacji odczytu, wywołań <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph>, i <ph id="ph4">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> throw metody <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Jeśli strumień jest zamknięty, ta właściwość zwraca <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source>The following is an example of using the <ph id="ph1">`CanRead`</ph> property.</source>
          <target state="translated">Poniżej przedstawiono przykład użycia <ph id="ph1">`CanRead`</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanSeek">
          <source>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej pobiera wartość wskazującą, czy bieżący strumień obsługuje operacji wyszukiwania.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanSeek">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports seeking; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> w przypadku strumienia obsługuje operacji wyszukiwania; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanSeek">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support seeking, calls to <ph id="ph2">&lt;xref:System.IO.Stream.Length%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.Position%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> throw a <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Jeśli klasą pochodną <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> nie obsługuje wyszukiwania, wywołań <ph id="ph2">&lt;xref:System.IO.Stream.Length%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.Position%2A&gt;</ph>, i <ph id="ph5">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> throw <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanSeek">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Jeśli strumień jest zamknięty, ta właściwość zwraca <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanTimeout">
          <source>Gets a value that determines whether the current stream can time out.</source>
          <target state="translated">Pobiera wartość określającą, czy bieżący strumień może upłynął limit czasu.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>A value that determines whether the current stream can time out.</source>
          <target state="translated">Wartość, która określa, czy bieżący strumień może przekroczono limit czasu.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CanTimeout%2A&gt;</ph> property always returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CanTimeout%2A&gt;</ph> Właściwość zawsze zwraca <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>Some stream implementations require different behavior, such as <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, which times out if network connectivity is interrupted or lost.</source>
          <target state="translated">Niektóre implementacje strumienia wymagane jest zachowanie różnych, takich jak <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, który upłynie limit czasu, jeśli połączenie sieciowe zostanie przerwana lub utraty.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>If you are implementing a stream that must be able to time out, this property should be overridden to return <ph id="ph1">`true`</ph>.</source>
          <target state="translated">W przypadku wdrażania strumienia, który musi być w stanie limitu czasu, ta właściwość powinna zostać zastąpiona do zwrócenia <ph id="ph1">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanWrite">
          <source>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej pobiera wartość wskazującą, czy bieżący strumień obsługuje zapisu.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports writing; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli strumienia obsługuje zapis; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support writing, a call to <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph> throws a <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Jeśli klasą pochodną <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> nie obsługuje zapisywania wywołanie <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>, lub <ph id="ph4">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph> zgłasza <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Jeśli strumień jest zamknięty, ta właściwość zwraca <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source>The following is an example of using the <ph id="ph1">`CanWrite`</ph> property.</source>
          <target state="translated">Poniżej przedstawiono przykład użycia <ph id="ph1">`CanWrite`</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Close">
          <source>Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.</source>
          <target state="translated">Zamyka bieżący strumień i zwalnia wszystkie zasoby (na przykład sockets i dojść do plików), skojarzone z bieżącym strumienia.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Close">
          <source>Instead of calling this method, ensure that the stream is properly disposed.</source>
          <target state="translated">Zamiast wywołaniem tej metody, upewnij się, czy strumień jest poprawnie usunięta.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>This method calls <ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph>, specifying <ph id="ph2">`true`</ph> to release all resources.</source>
          <target state="translated">Ta metoda wywołuje <ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph>, określania <ph id="ph2">`true`</ph> zwolnić wszystkie zasoby.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>You do not have to specifically call the <ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method.</source>
          <target state="translated">Nie masz do wywołania w szczególności <ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Instead, ensure that every <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object is properly disposed.</source>
          <target state="translated">Zamiast tego należy upewnić się, że każdy <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> prawidłowo Dispose.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>You can declare <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> objects within a <ph id="ph2">`using`</ph> block (or <ph id="ph3">`Using`</ph> block in Visual Basic) to ensure that the stream and all of its resources are disposed, or you can explicitly call the <ph id="ph4">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">Można zadeklarować <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> obiektów w <ph id="ph2">`using`</ph> bloku (lub <ph id="ph3">`Using`</ph> blok w języku Visual Basic) do zapewnienia, że strumień i wszystkie jej zasoby są usuwane, można jawnie wywołać <ph id="ph4">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call an implementation of <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">`Close`</ph>.</source>
          <target state="translated">Opróżnianie strumienia nie opróżnić jego podstawowym kodera, chyba że jawnie wywołać implementacja <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> lub <ph id="ph2">`Close`</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Setting <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
          <target state="translated">Ustawienie <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> do <ph id="ph2">`true`</ph> oznacza, że dane zostaną opróżnione z buforu w strumieniu, ale nie zostaną opróżnione kodera stanu.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
          <target state="translated">Dzięki temu koder ma zachowywać stan (częściowe znaki), aby ją poprawnie kodowania kolejny blok znaków.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.</source>
          <target state="translated">Ten scenariusz dotyczy UTF8 i UTF7, w której niektóre znaki mogą być kodowane tylko wtedy, gdy odbiera koder sąsiedniego znaku ani znaków.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Attempts to manipulate the stream after the stream has been closed might throw an <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>.</source>
          <target state="translated">Podejmuje próbę manipulowania strumień po zamknięciu strumień może zgłosić <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>In derived classes, do not override the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> method, instead, put all of the <ph id="ph2">&lt;see langword="Stream" /&gt;</ph> cleanup logic in the <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">W klasach pochodnych nie zastępują <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> metody, należy umieścić wszystkie <ph id="ph2">&lt;see langword="Stream" /&gt;</ph> oczyszczania logikę w <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>implementacja metody Dispose<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">Odczytuje bajtów ze strumienia bieżącego i zapisuje je w innej strumienia.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">Strumień, do którego zostaną skopiowane zawartość bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>Reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">Odczytuje bajtów ze strumienia bieżącego i zapisuje je w innej strumienia.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</source>
          <target state="translated">Kopiowanie rozpoczyna się od bieżącej pozycji w strumieniu bieżącej i nie powoduje resetowania pozycji strumienia docelowego po zakończeniu operacji kopiowania.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>The following example copies the contents of a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> to a <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">Poniższy przykładowy kod kopiuje zawartość <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> do <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>The current stream does not support reading.</source>
          <target state="translated">Bieżący strumień nie obsługuje odczytu.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> does not support writing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> nie obsługuje zapisywania.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>Either the current stream or <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> were closed before the <ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> method was called.</source>
          <target state="translated">Bieżący strumień lub <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> zostały zamknięte przed <ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> wywołano metodę.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>An I/O error occurred.</source>
          <target state="translated">Wystąpił błąd we/wy.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">Strumień, do którego zostaną skopiowane zawartość bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The size of the buffer.</source>
          <target state="translated">Rozmiar buforu.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>This value must be greater than zero.</source>
          <target state="translated">Ta wartość musi być większa niż zero.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The default size is 81920.</source>
          <target state="translated">Rozmiar domyślny to 81920.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</source>
          <target state="translated">Odczytuje bajtów ze strumienia bieżącego i zapisuje je w innej strumienia, przy użyciu określony rozmiar buforu.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</source>
          <target state="translated">Kopiowanie rozpoczyna się od bieżącej pozycji w strumieniu bieżącej i nie powoduje resetowania pozycji strumienia docelowego po zakończeniu operacji kopiowania.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> ma wartość ujemną lub wartość zero.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The current stream does not support reading.</source>
          <target state="translated">Bieżący strumień nie obsługuje odczytu.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> does not support writing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> nie obsługuje zapisywania.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>Either the current stream or <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> were closed before the <ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> method was called.</source>
          <target state="translated">Bieżący strumień lub <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> zostały zamknięte przed <ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> wywołano metodę.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>An I/O error occurred.</source>
          <target state="translated">Wystąpił błąd we/wy.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">Asynchronicznie odczytuje bajtów ze strumienia bieżącego i zapisuje je w innej strumienia.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">Strumień, do którego zostaną skopiowane zawartość bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">Asynchronicznie odczytuje bajtów ze strumienia bieżącego i zapisuje je w innej strumienia.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>A task that represents the asynchronous copy operation.</source>
          <target state="translated">Zadanie reprezentujące operację asynchroniczną kopiowania.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> Metody umożliwia wykonywanie operacji We/Wy obciążający zasoby bez blokowania głównego wątku.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Ten aspekt dotyczący wydajności jest szczególnie ważny w aplikacji <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> lub aplikacjach <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph>, gdzie czasochłonne operacje strumieniowe mogą zablokować wątek interfejsu użytkownika i spowodować, że aplikacja będzie wyglądać, jakby przestała działać.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Metody asynchroniczne są używane w połączeniu z <ph id="ph1">`async`</ph> i <ph id="ph2">`await`</ph> słów kluczowych w języku Visual Basic i C#.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Copying begins at the current position in the current stream.</source>
          <target state="translated">Kopiowanie rozpoczyna się w bieżącym położeniu w bieżącym strumienia.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The following example demonstrates how to use two <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> objects to asynchronously copy the files from one directory to another.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak używać dwóch <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> obiektów asynchronicznie skopiować plików z jednego katalogu do innego.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> Pochodną klasy <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> event handler for the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> control is marked with the <ph id="ph3">`async`</ph> modifier because it calls an asynchronous method</source>
          <target state="translated">Zwróć uwagę, że <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> programu obsługi zdarzeń dla <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> kontroli jest oznaczony atrybutem <ph id="ph3">`async`</ph> modyfikator ponieważ wywołuje metody asynchronicznej</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Either the current stream or the destination stream is disposed.</source>
          <target state="translated">Strumień docelowy albo bieżący strumień jest usunięty.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The current stream does not support reading, or the destination stream does not support writing.</source>
          <target state="translated">Bieżący strumień nie obsługuje operacji odczytu lub strumień docelowy nie obsługuje zapisywania.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">Strumień, do którego zostaną skopiowane zawartość bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The size, in bytes, of the buffer.</source>
          <target state="translated">Rozmiar w bajtach buforu.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>This value must be greater than zero.</source>
          <target state="translated">Ta wartość musi być większa niż zero.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The default size is 81920.</source>
          <target state="translated">Rozmiar domyślny to 81920.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</source>
          <target state="translated">Asynchronicznie odczytuje bajtów ze strumienia bieżącego i zapisuje je w innej strumienia, przy użyciu określony rozmiar buforu.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>A task that represents the asynchronous copy operation.</source>
          <target state="translated">Zadanie reprezentujące operację asynchroniczną kopiowania.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> Metody umożliwia wykonywanie operacji We/Wy obciążający zasoby bez blokowania głównego wątku.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Ten aspekt dotyczący wydajności jest szczególnie ważny w aplikacji <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> lub aplikacjach <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph>, gdzie czasochłonne operacje strumieniowe mogą zablokować wątek interfejsu użytkownika i spowodować, że aplikacja będzie wyglądać, jakby przestała działać.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Metody asynchroniczne są używane w połączeniu z <ph id="ph1">`async`</ph> i <ph id="ph2">`await`</ph> słów kluczowych w języku Visual Basic i C#.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>Copying begins at the current position in the current stream.</source>
          <target state="translated">Kopiowanie rozpoczyna się w bieżącym położeniu w bieżącym strumienia.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>For an example of copying between two streams, see the <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> overload.</source>
          <target state="translated">Przykład kopiowanie między dwoma strumieniami, zobacz <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> przeciążenia.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> ma wartość ujemną lub wartość zero.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>Either the current stream or the destination stream is disposed.</source>
          <target state="translated">Strumień docelowy albo bieżący strumień jest usunięty.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The current stream does not support reading, or the destination stream does not support writing.</source>
          <target state="translated">Bieżący strumień nie obsługuje operacji odczytu lub strumień docelowy nie obsługuje zapisywania.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">Strumień, do którego zostaną skopiowane zawartość bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The size, in bytes, of the buffer.</source>
          <target state="translated">Rozmiar w bajtach buforu.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>This value must be greater than zero.</source>
          <target state="translated">Ta wartość musi być większa niż zero.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The default size is 81920.</source>
          <target state="translated">Rozmiar domyślny to 81920.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Token do monitorowania żądań anulowania.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">Wartość domyślna to <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</source>
          <target state="translated">Asynchronicznie odczytuje bajtów ze strumienia bieżącego i zapisuje je w innej strumienia, przy użyciu określony rozmiar buforu i anulowania tokenu.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous copy operation.</source>
          <target state="translated">Zadanie reprezentujące operację asynchroniczną kopiowania.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> Metody umożliwia wykonywanie operacji We/Wy obciążający zasoby bez blokowania głównego wątku.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Ten aspekt dotyczący wydajności jest szczególnie ważny w aplikacji <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> lub aplikacjach <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph>, gdzie czasochłonne operacje strumieniowe mogą zablokować wątek interfejsu użytkownika i spowodować, że aplikacja będzie wyglądać, jakby przestała działać.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Metody asynchroniczne są używane w połączeniu z <ph id="ph1">`async`</ph> i <ph id="ph2">`await`</ph> słów kluczowych w języku Visual Basic i C#.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">Jeśli operacja została anulowana przed ukończeniem działania, zwrócone zadania zawiera <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> wartość <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Copying begins at the current position in the current stream.</source>
          <target state="translated">Kopiowanie rozpoczyna się w bieżącym położeniu w bieżącym strumienia.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>For an example of copying between two streams, see the <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> overload.</source>
          <target state="translated">Przykład kopiowanie między dwoma strumieniami, zobacz <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> przeciążenia.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> ma wartość ujemną lub wartość zero.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Either the current stream or the destination stream is disposed.</source>
          <target state="translated">Strumień docelowy albo bieżący strumień jest usunięty.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The current stream does not support reading, or the destination stream does not support writing.</source>
          <target state="translated">Bieżący strumień nie obsługuje operacji odczytu lub strumień docelowy nie obsługuje zapisywania.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>Allocates a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> object.</source>
          <target state="translated">Przydziela <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>A reference to the allocated <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph>.</source>
          <target state="translated">Odwołanie do przydzielony <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>When called for the first time, the current method creates a <ph id="ph1">`WaitHandle`</ph> object and returns it.</source>
          <target state="translated">Gdy wywołuje się po raz pierwszy, tworzy bieżącej metody <ph id="ph1">`WaitHandle`</ph> obiektu i zwraca go.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>On subsequent calls, <ph id="ph1">`CreateWaitHandle`</ph> returns a reference to a new wait handle.</source>
          <target state="translated">W kolejnych wywołaniach <ph id="ph1">`CreateWaitHandle`</ph> zwraca odwołanie do nowego dojście oczekiwania.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>Use this method if you implement the asynchronous methods and require a way of blocking in <ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> until the asynchronous operation is complete.</source>
          <target state="translated">Użyj tej metody, jeśli wdrożenie metod asynchronicznych i wymagają sposób blokowanie w programie <ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> aż do zakończenia operacji asynchronicznej.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated">Zwalnia wszelkie zasoby używane przez <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated">Zwalnia wszelkie zasoby używane przez <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>This method disposes the stream, by writing any changes to the backing store and closing the stream to release resources.</source>
          <target state="translated">Ta metoda usuwa strumienia, zapisywanie wszystkie zmiany do magazynu zapasowego i zamykający strumienia, aby zwolnić zasoby.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Calling <ph id="ph1">`Dispose`</ph> allows the resources used by the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> to be reallocated for other purposes.</source>
          <target state="translated">Wywoływanie <ph id="ph1">`Dispose`</ph> umożliwia zasoby używane przez <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> odbiorczego do innych celów.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>For more information about <ph id="ph1">`Dispose`</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`Dispose`</ph>, zobacz <bpt id="p1">[</bpt>czyszczenie zasobów niezarządzanych<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Place all cleanup logic for your stream object in <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">Umieść całą logikę oczyszczania dla obiekt strumienia w <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Do not override <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>.</source>
          <target state="translated">Nie zastępuj <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Note that because of backward compatibility requirements, this method's implementation differs from the recommended guidance for the Dispose pattern.</source>
          <target state="translated">Należy pamiętać, że ze względu na wymagania zgodności z poprzednimi wersjami, ta metoda wdrażania różni się od zalecane wskazówki dotyczące wzorca Dispose.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>This method calls <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>, which then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">Ta metoda wywołuje <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>, które następnie wywołuje <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby zwolnić zasoby zarządzane i niezarządzane; <ph id="ph2">&lt;see langword="false" /&gt;</ph> aby zwolnić tylko zasoby niezarządzane.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">Zwalnia zasoby niezarządzane używane przez <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> i opcjonalnie zwalnia zasoby zarządzane.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>You should release all resources by specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`disposing`</ph>.</source>
          <target state="translated">Należy zwolnić wszystkie zasoby, określając <ph id="ph1">`true`</ph> dla <ph id="ph2">`disposing`</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>When <ph id="ph1">`disposing`</ph> is <ph id="ph2">`true`</ph>, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects.</source>
          <target state="translated">Gdy <ph id="ph1">`disposing`</ph> jest <ph id="ph2">`true`</ph>, strumienia zapewnia również danych jest opróżniany w buforze podstawowej i uzyskiwanie dostępu do innych obiektów finalizable.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>This may not be possible when called from a finalizer due a lack of ordering among finalizers.</source>
          <target state="translated">To nie być możliwe przy wywołaniach z finalizator powodu braku kolejności między finalizatory.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>If your stream is using an operating system handle to communicate with its source, consider using a subclass of <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> for this purpose.</source>
          <target state="translated">Jeśli strumienia używa do komunikowania się ze źródłem dojścia systemu operacyjnego, należy rozważyć użycie podklasą <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> w tym celu.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Ta metoda jest wywoływana przez metodę publiczną <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> — metoda i <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> wywołuje chronioną metodę <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> metody z <ph id="ph3">`disposing`</ph> ustawiono parametr <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> wywołuje <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> z <ph id="ph3">`disposing`</ph> ustawioną <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>In derived classes, do not override the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> method, instead, put all of the Stream cleanup logic in the <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">W klasach pochodnych nie zastępują <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> metody, zamiast tego należy umieścić wszystkie logikę oczyszczania strumienia <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> można wywoływać wielokrotnie przez inne obiekty.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</source>
          <target state="translated">W przypadku przesłaniania <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>, nie odwołują się obiekty, które zostały wcześniej zlikwidowane w wywołaniu wcześniejszych <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat sposobu wdrażania <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>, zobacz <bpt id="p1">[</bpt>implementacja metody Dispose<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> i <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, zobacz <bpt id="p1">[</bpt>czyszczenie zasobów niezarządzanych<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The reference to the pending asynchronous request to finish.</source>
          <target state="translated">Odwołanie do oczekującego żądania asynchroniczne, aby zakończyć.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>Waits for the pending asynchronous read to complete.</source>
          <target state="translated">Czeka na oczekujące odczyt asynchroniczny zakończyć.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">(Rozważ użycie <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> zamiast.)</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The number of bytes read from the stream, between zero (0) and the number of bytes you requested.</source>
          <target state="translated">Liczba odczytanych bajtów ze strumienia, między (0) i liczba bajtów, żądana.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</source>
          <target state="translated">Strumienie zwrócił zero (0) tylko na końcu strumienia, w przeciwnym razie należy zablokować, dopóki nie będzie dostępne co najmniej jednego bajtu.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">W programie .NET Framework w wersji 4 i starszych do implementowania asynchronicznych operacji We/Wy należy używać metod takich jak <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">Te metody są nadal dostępne w <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> do obsługi starszego kodu; jednak nowych metod asynchronicznych, takich jak <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, i <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, pomocy łatwo zaimplementować asynchronicznej operacji We/Wy.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>Call <ph id="ph1">`EndRead`</ph> to determine how many bytes were read from the stream.</source>
          <target state="translated">Wywołanie <ph id="ph1">`EndRead`</ph> Aby ustalić liczbę bajtów zostały odczytane ze strumienia.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">`EndRead`</ph> can be called once on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id="ph3">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`EndRead`</ph> może być wywoływana raz dla każdego <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> z <ph id="ph3">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>This method blocks until the I/O operation has completed.</source>
          <target state="translated">Ta metoda umożliwia blokowanie dopiero po ukończeniu operacji We/Wy.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>A handle to the pending read operation is not available.</source>
          <target state="translated">Dojście do oczekująca operacja odczytu jest niedostępna.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The pending operation does not support reading.</source>
          <target state="translated">Oczekująca operacja nie obsługuje odczytu.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> did not originate from a <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> method on the current stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> nie pochodzi z <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> metody dla bieżącej strumienia.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">Strumień jest zamknięty lub wystąpił błąd wewnętrzny.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>A reference to the outstanding asynchronous I/O request.</source>
          <target state="translated">Odwołanie do oczekujących żądania asynchroniczne We/Wy.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>Ends an asynchronous write operation.</source>
          <target state="translated">Kończy operację asynchronicznego zapisu.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">(Rozważ użycie <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> zamiast.)</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">W programie .NET Framework w wersji 4 i starszych do implementowania asynchronicznych operacji We/Wy należy używać metod takich jak <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">Te metody są nadal dostępne w <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> do obsługi starszego kodu; jednak nowych metod asynchronicznych, takich jak <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, i <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, pomocy łatwo zaimplementować asynchronicznej operacji We/Wy.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">`EndWrite`</ph> must be called exactly once on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`EndWrite`</ph> musi zostać wywołana tylko raz w każdym <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> z <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>This method blocks until the I/O operation has completed.</source>
          <target state="translated">Ta metoda umożliwia blokowanie dopiero po ukończeniu operacji We/Wy.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and become visible upon a call to <ph id="ph1">`EndWrite`</ph>.</source>
          <target state="translated">Błędów występujących podczas żądania asynchronicznego zapisu, takiej jak awaria dysku podczas wykonywania żądania We/Wy wystąpić w wątku puli wątków i stają się widoczne po wywołaniu <ph id="ph1">`EndWrite`</ph>.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>Exceptions thrown by the thread pool thread will not be visible when calling <ph id="ph1">`EndWrite`</ph>.</source>
          <target state="translated">Wyjątki generowane przez wątek puli wątków nie będą widoczne podczas wywoływania metody <ph id="ph1">`EndWrite`</ph>.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>A handle to the pending write operation is not available.</source>
          <target state="translated">Dojście do działania oczekującej zapisu nie jest dostępna.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>The pending operation does not support writing.</source>
          <target state="translated">Oczekująca operacja nie obsługuje zapisywania.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> did not originate from a <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> method on the current stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> nie pochodzi z <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> metody dla bieżącej strumienia.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">Strumień jest zamknięty lub wystąpił błąd wewnętrzny.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Flush">
          <source>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej usuwa wszystkie bufory dla tego strumienia i powoduje, że wszystkie buforowane dane są zapisywane w podstawowej urządzenia.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Override <ph id="ph1">`Flush`</ph> on streams that implement a buffer.</source>
          <target state="translated">Zastąpienie <ph id="ph1">`Flush`</ph> dla strumieni, które implementują buforu.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Use this method to move any information from an underlying buffer to its destination, clear the buffer, or both.</source>
          <target state="translated">Użyj tej metody, aby przenieść wszystkie informacje z bufora źródłowego do miejsca docelowego, wyczyść bufor, lub obie.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Depending upon the state of the object, you might have to modify the current position within the stream (for example, if the underlying stream supports seeking).</source>
          <target state="translated">W zależności od stanu obiektu może być konieczne zmodyfikować bieżącą pozycję w strumieniu (na przykład, jeśli podstawowa strumienia obsługuje operacji wyszukiwania).</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>For additional information see <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>When using the <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> class, do not flush the base <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> object.</source>
          <target state="translated">Korzystając z <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> lub <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> klasa, nie mogło opróżnić podstawowym <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Instead, use the class's <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method, which makes sure that the data is flushed to the underlying stream first and then written to the file.</source>
          <target state="translated">Zamiast tego należy użyć klasy <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> metodę, która sprawdza, czy dane są opróżnione do podstawowego strumienia najpierw, a następnie zapisywane do pliku.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Flush">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">Asynchronicznie usuwa wszystkie bufory dla tego strumienia i powoduje, że wszystkie buforowane dane są zapisywane w podstawowej urządzenia.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync">
          <source>Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">Asynchronicznie usuwa wszystkie bufory dla tego strumienia i powoduje, że wszystkie buforowane dane są zapisywane w podstawowej urządzenia.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">Zadanie reprezentujące asynchroniczną operację opróżniania.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.FlushAsync">
          <source>If a derived class, such as <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, does not flush the buffer in its implementation of the <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method, the <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method will not flush the buffer.</source>
          <target state="translated">Jeśli klasa pochodna, takich jak <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> lub <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, nie opróżnia bufor w jej implementacja <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> metody <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> — metoda nie spowoduje to opróżnienie buforu.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync">
          <source>The stream has been disposed.</source>
          <target state="translated">Strumień został usunięty.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Token do monitorowania żądań anulowania.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">Wartość domyślna to <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</source>
          <target state="translated">Asynchronicznie usuwa wszystkie bufory dla tego strumienia, powoduje, że wszystkie buforowane dane są zapisywane w podstawowej urządzenia i monitoruje żądania anulowania.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">Zadanie reprezentujące asynchroniczną operację opróżniania.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">Jeśli operacja została anulowana przed ukończeniem działania, zwrócone zadania zawiera <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> wartość <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>If a derived class, such as <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, does not flush the buffer in its implementation of the <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method, the <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method will not flush the buffer.</source>
          <target state="translated">Jeśli klasa pochodna, takich jak <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> lub <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, nie opróżnia bufor w jej implementacja <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> metody <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> — metoda nie spowoduje to opróżnienie buforu.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">Strumień został usunięty.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Length">
          <source>When overridden in a derived class, gets the length in bytes of the stream.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej pobiera długość w bajtach strumienia.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Length">
          <source>A long value representing the length of the stream in bytes.</source>
          <target state="translated">Wartość typu long reprezentujący długość strumienia w bajtach.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Length">
          <source>A class derived from <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> does not support seeking.</source>
          <target state="translated">Klasa pochodna od <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> nie obsługuje wyszukiwania.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Length">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Metody wywołane po strumień został zamknięty.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="F:System.IO.Stream.Null">
          <source>A <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> with no backing store.</source>
          <target state="translated">A <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> z nie magazynu zapasowego.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.Stream.Null">
          <source>Use <ph id="ph1">`Null`</ph> to redirect output to a stream that will not consume any operating system resources.</source>
          <target state="translated">Użyj <ph id="ph1">`Null`</ph> przekierować wyniki strumień, który nie będą korzystać z zasobów systemu operacyjnego.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.Stream.Null">
          <source>When the methods of <ph id="ph1">`Stream`</ph> that provide writing are invoked on <ph id="ph2">`Null`</ph>, the call simply returns, and no data is written.</source>
          <target state="translated">Gdy metody <ph id="ph1">`Stream`</ph> zawierających zapisu są wywoływane na <ph id="ph2">`Null`</ph>, po prostu zwraca wywołanie i są zapisywane żadne dane.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.Stream.Null">
          <source><ph id="ph1">`Null`</ph> also implements a <ph id="ph2">`Read`</ph> method that returns zero without reading data.</source>
          <target state="translated"><ph id="ph1">`Null`</ph> implementuje również <ph id="ph2">`Read`</ph> metodę, która zwraca zero przed odczytaniem danych.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ObjectInvariant">
          <source>Provides support for a <ph id="ph1">&lt;see cref="T:System.Diagnostics.Contracts.Contract" /&gt;</ph>.</source>
          <target state="translated">Zapewnia obsługę <ph id="ph1">&lt;see cref="T:System.Diagnostics.Contracts.Contract" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>When overridden in a derived class, gets or sets the position within the current stream.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej pobiera lub ustawia pozycję w ramach bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>The current position within the stream.</source>
          <target state="translated">Bieżąca pozycja w strumieniu.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>The stream must support seeking to get or set the position.</source>
          <target state="translated">Strumień musi obsługiwać wyszukiwania można pobrać lub ustawić pozycji.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether the stream supports seeking.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> właściwości w celu określenia, czy strumień obsługuje operacji wyszukiwania.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">Wyszukiwanie w dowolne miejsce powyżej długość strumienia jest obsługiwana.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>The <ph id="ph1">`Position`</ph> property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.</source>
          <target state="translated"><ph id="ph1">`Position`</ph> Właściwości nie zachować śledzić liczbę bajtów ze strumienia, który zostały wykorzystane, zostało pominięte, lub obie.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>The stream does not support seeking.</source>
          <target state="translated">Strumień nie obsługuje wyszukiwania.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Metody wywołane po strumień został zamknięty.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">Tablica bajtów.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When this method returns, the buffer contains the specified byte array with the values between <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the bytes read from the current source.</source>
          <target state="translated">Po powrocie z tej metody bufor zawiera określonej tablicy bajtów z wartością pomiędzy <bpt id="p1">&lt;c&gt;</bpt>przesunięcie<ept id="p1">&lt;/c&gt;</ept> i (<bpt id="p2">&lt;c&gt;</bpt>przesunięcie<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>liczba<ept id="p3">&lt;/c&gt;</ept> - 1) zastępuje Bajty odczytane z bieżącego źródła.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin storing the data read from the current stream.</source>
          <target state="translated">Zerze przesunięcie w <bpt id="p1">&lt;c&gt;</bpt>buforu<ept id="p1">&lt;/c&gt;</ept> rozpoczęcia przechowywania danych przeczytanie z bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to be read from the current stream.</source>
          <target state="translated">Maksymalna liczba bajtów, które mają być odczytane z bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, odczytujący sekwencję bajtów ze strumienia bieżącego i zmienia pozycję w strumieniu przez liczbę bajtów do odczytu.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The total number of bytes read into the buffer.</source>
          <target state="translated">Całkowita liczba bajtów odczytanych w buforze.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</source>
          <target state="translated">Może to być mniejsza niż żądana liczba bajtów Jeśli wiele bajtów nie są obecnie dostępne, czy zero (0), jeśli został osiągnięty koniec strumienia.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> właściwości w celu określenia, czy bieżące wystąpienie obsługuje odczytu.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method to read asynchronously from the current stream.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> metodę, aby asynchronicznie odczytywane z bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Implementations of this method read a maximum of <ph id="ph1">`count`</ph> bytes from the current stream and store them in <ph id="ph2">`buffer`</ph> beginning at <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">Implementacje tej metody odczytu maksymalnie <ph id="ph1">`count`</ph> bajtów z bieżącego strumienia i przechowywać je w <ph id="ph2">`buffer`</ph> począwszy od <ph id="ph3">`offset`</ph>.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged.</source>
          <target state="translated">Bieżącą pozycję w strumieniu jest zaawansowane przez liczbę bajtów odczytanych; Jednak jeśli wystąpi wyjątek, bieżącą pozycję w strumieniu nie jest zmieniany.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Implementations return the number of bytes read.</source>
          <target state="translated">Implementacje zwraca liczbę bajtów do odczytu.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The implementation will block until at least one byte of data can be read, in the event that no data is available.</source>
          <target state="translated">Implementacja zablokuje dopóki co najmniej jednego bajtu danych mogą być odczytywane; w przypadku, gdy nie są dostępne żadne dane.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> returns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> Zwraca wartość 0, tylko wtedy, gdy nie ma więcej danych w strumieniu i nie więcej oczekuje (na przykład zamkniętego gniazda lub koniec pliku).</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">Implementacja jest bezpłatna do zwrócenia mniej bajtów niż żądana, nawet jeżeli nie osiągnięto koniec strumienia.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> for reading primitive data types.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> do odczytywania typy pierwotne danych.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to use <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> to read a block of data.</source>
          <target state="translated">Poniższy przykład przedstawia użycie <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> do odczytu bloku danych.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">Suma <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> i <ph id="ph2">&lt;paramref name="count" /&gt;</ph> jest większa niż długość buforu.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="count" /&gt;</ph> jest ujemna.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support reading.</source>
          <target state="translated">Strumień nie obsługuje odczytu.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Metody wywołane po strumień został zamknięty.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</source>
          <target state="translated">Asynchronicznie odczytuje sekwencję bajtów ze strumienia bieżącego i zmienia pozycję w strumieniu przez liczbę bajtów do odczytu.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to write the data into.</source>
          <target state="translated">Bufor zapisu danych do.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">Przesunięcie bajtów w <bpt id="p1">&lt;c&gt;</bpt>buforu<ept id="p1">&lt;/c&gt;</ept> jaką rozpocząć pisanie danych ze strumienia.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">Maksymalna liczba bajtów do odczytania.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</source>
          <target state="translated">Asynchronicznie odczytuje sekwencję bajtów ze strumienia bieżącego i zmienia pozycję w strumieniu przez liczbę bajtów do odczytu.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">Zadanie reprezentujące asynchroniczną operacji odczytu.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated">Wartość <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parametr zawiera całkowitą liczbę bajtów odczytanych w buforze.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">Wartość wyniku może być mniejsza niż żądana liczba bajtów Liczba dostępnych bajtów jest mniejsza niż żądany numer, czy może być 0 (zero), jeśli osiągnięto koniec strumienia.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> Metody umożliwia wykonywanie operacji We/Wy obciążający zasoby bez blokowania głównego wątku.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Ten aspekt dotyczący wydajności jest szczególnie ważny w aplikacji <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> lub aplikacjach <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph>, gdzie czasochłonne operacje strumieniowe mogą zablokować wątek interfejsu użytkownika i spowodować, że aplikacja będzie wyglądać, jakby przestała działać.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Metody asynchroniczne są używane w połączeniu z <ph id="ph1">`async`</ph> i <ph id="ph2">`await`</ph> słów kluczowych w języku Visual Basic i C#.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> właściwości w celu określenia, czy bieżące wystąpienie obsługuje odczytu.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to read from a file asynchronously.</source>
          <target state="translated">Poniższy przykład pokazuje, jak można odczytać z pliku asynchronicznie.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class, which derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">W przykładzie użyto <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> klasy, która jest pochodną <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="count" /&gt;</ph> jest ujemna.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">Suma <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> i <ph id="ph2">&lt;paramref name="count" /&gt;</ph> jest większa niż długość buforu.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support reading.</source>
          <target state="translated">Strumień nie obsługuje odczytu.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream has been disposed.</source>
          <target state="translated">Strumień został usunięty.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">Strumień jest obecnie używany przez poprzednią operację odczytu.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write the data into.</source>
          <target state="translated">Bufor zapisu danych do.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">Przesunięcie bajtów w <bpt id="p1">&lt;c&gt;</bpt>buforu<ept id="p1">&lt;/c&gt;</ept> jaką rozpocząć pisanie danych ze strumienia.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">Maksymalna liczba bajtów do odczytania.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Token do monitorowania żądań anulowania.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">Wartość domyślna to <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</source>
          <target state="translated">Asynchronicznie odczytuje sekwencję bajtów ze strumienia bieżącego zmienia pozycję w strumieniu przez liczbę bajtów odczytanych i monitoruje żądań anulowania.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">Zadanie reprezentujące asynchroniczną operacji odczytu.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated">Wartość <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parametr zawiera całkowitą liczbę bajtów odczytanych w buforze.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">Wartość wyniku może być mniejsza niż żądana liczba bajtów Liczba dostępnych bajtów jest mniejsza niż żądany numer, czy może być 0 (zero), jeśli osiągnięto koniec strumienia.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> Metody umożliwia wykonywanie operacji We/Wy obciążający zasoby bez blokowania głównego wątku.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Ten aspekt dotyczący wydajności jest szczególnie ważny w aplikacji <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> lub aplikacjach <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph>, gdzie czasochłonne operacje strumieniowe mogą zablokować wątek interfejsu użytkownika i spowodować, że aplikacja będzie wyglądać, jakby przestała działać.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Metody asynchroniczne są używane w połączeniu z <ph id="ph1">`async`</ph> i <ph id="ph2">`await`</ph> słów kluczowych w języku Visual Basic i C#.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> właściwości w celu określenia, czy bieżące wystąpienie obsługuje odczytu.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">Jeśli operacja została anulowana przed ukończeniem działania, zwrócone zadania zawiera <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> wartość <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> overload.</source>
          <target state="translated">Na przykład zobacz <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> przeciążenia.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="count" /&gt;</ph> jest ujemna.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">Suma <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> i <ph id="ph2">&lt;paramref name="count" /&gt;</ph> jest większa niż długość buforu.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support reading.</source>
          <target state="translated">Strumień nie obsługuje odczytu.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">Strumień został usunięty.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">Strumień jest obecnie używany przez poprzednią operację odczytu.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</source>
          <target state="translated">Odczytuje bajtów ze strumienia i zmienia pozycję w strumieniu przez jednego bajtu lub zwraca wartość -1, jeśli na koniec strumienia.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>The unsigned byte cast to an <ph id="ph1">&lt;see langword="Int32" /&gt;</ph>, or -1 if at the end of the stream.</source>
          <target state="translated">Rzutować bajtu bez znaku <ph id="ph1">&lt;see langword="Int32" /&gt;</ph>, lub wartość -1, jeśli na koniec strumienia.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> właściwości w celu określenia, czy bieżące wystąpienie obsługuje odczytu.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>Attempts to manipulate the stream after the stream has been closed could throw an <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>.</source>
          <target state="translated">Podejmuje próbę manipulowania strumień po zamknięciu strumień może wywoływać <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>The stream does not support reading.</source>
          <target state="translated">Strumień nie obsługuje odczytu.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Metody wywołane po strumień został zamknięty.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>The default implementation on <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> creates a new single-byte array and then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">Domyślna implementacja na <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> tworzy nową macierz jednobajtowe, a następnie wywołuje <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>While this is formally correct, it is inefficient.</source>
          <target state="translated">Jest to poprawny formalnie, jest nieefektywne.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.</source>
          <target state="translated">Strumieniem z buforu wewnętrznego należy przesłonić tę metodę i zapewnić bardziej efektywnego wersji, która odczytuje buforu bezpośrednio, unikając alokacji dodatkowe tablicy przy każdym wywołaniu.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.ReadTimeout">
          <source>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.</source>
          <target state="translated">Pobiera lub ustawia wartość, w miliseconds, która określa, jak długo strumienia podejmie próbę odczytu przed przekroczeniem limitu czasu.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.ReadTimeout">
          <source>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</source>
          <target state="translated">Wartość w miliseconds, która określa, jak długo strumienia podejmie próbę odczytu przed przekroczeniem limitu czasu.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.ReadTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> method always throws an <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> Metoda zawsze zwraca <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.ReadTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> property should be overridden to provide the appropriate behavior for the stream.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> Właściwości powinna zostać zastąpiona, aby zapewnić zachowanie odpowiednie dla tego strumienia.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.ReadTimeout">
          <source>If the stream does not support timing out, this property should raise an <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">Jeśli strumień nie obsługuje limitu czasu, ta właściwość powinna podnieść <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>A byte offset relative to the <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Przesunięcie bajtów, względem <bpt id="p1">&lt;c&gt;</bpt>pochodzenia<ept id="p1">&lt;/c&gt;</ept> parametru.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>A value of type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> indicating the reference point used to obtain the new position.</source>
          <target state="translated">Wartości typu <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> wskazujący punkt odniesienia używany do uzyskania nowego położenia.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>When overridden in a derived class, sets the position within the current stream.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, ustawia pozycję w ramach bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The new position within the current stream.</source>
          <target state="translated">Nowa pozycja w ramach bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether the current instance supports seeking.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> właściwości w celu określenia, czy bieżące wystąpienie obsługuje operacji wyszukiwania.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is negative, the new position is required to precede the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`offset`</ph> jest ujemna, nowe miejsce wymagane do poprzedzać pozycja określona przez <ph id="ph2">`origin`</ph> przez liczbę bajtów określona przez <ph id="ph3">`offset`</ph>.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is zero (0), the new position is required to be the position specified by <ph id="ph2">`origin`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`offset`</ph> wynosi zero (0), nowe położenie jest musi być pozycja określona przez <ph id="ph2">`origin`</ph>.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is positive, the new position is required to follow the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`offset`</ph> jest dodatnia, nowe położenie jest wymagana do wykonania pozycja określona przez <ph id="ph2">`origin`</ph> przez liczbę bajtów określona przez <ph id="ph3">`offset`</ph>.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Classes derived from <ph id="ph1">`Stream`</ph> that support seeking must override this method to provide the functionality described above.</source>
          <target state="translated">Klasy wyprowadzone z <ph id="ph1">`Stream`</ph> czy wyszukiwanie pomocy technicznej muszą przesłaniać tę metodę, aby zapewnić funkcje opisane powyżej.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">Wyszukiwanie w dowolne miejsce powyżej długość strumienia jest obsługiwana.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The stream does not support seeking, such as if the stream is constructed from a pipe or console output.</source>
          <target state="translated">Strumień nie obsługuje wyszukiwania, takie jak, jeśli strumień jest tworzony z potoku lub konsola danych wyjściowych.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Metody wywołane po strumień został zamknięty.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>The desired length of the current stream in bytes.</source>
          <target state="translated">Wymagana długość w bajtach bieżący strumień.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>When overridden in a derived class, sets the length of the current stream.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, ustawia długość bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>If the specified value is less than the current length of the stream, the stream is truncated.</source>
          <target state="translated">Jeśli określona wartość jest mniejsza niż bieżąca długość strumienia, zostanie obcięta strumienia.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>If the specified value is larger than the current length of the stream, the stream is expanded.</source>
          <target state="translated">Jeśli określona wartość jest większa niż bieżąca długość strumienia, strumień jest rozwinięta.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>If the stream is expanded, the contents of the stream between the old and the new length are not defined.</source>
          <target state="translated">Jeśli strumień jest rozwinięty, zawartość strumienia między stary i nowy długość nie są zdefiniowane.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>A stream must support both writing and seeking for <ph id="ph1">`SetLength`</ph> to work.</source>
          <target state="translated">Strumień musi obsługiwać zarówno zapisu i wyszukiwania dla <ph id="ph1">`SetLength`</ph> do pracy.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing, and the <ph id="ph2">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether seeking is supported.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> właściwości w celu określenia, czy bieżące wystąpienie obsługuje zapis i <ph id="ph2">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> właściwości w celu określenia, czy wyszukiwanie jest obsługiwane.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</source>
          <target state="translated">Strumień nie obsługuje zarówno zapisu i wyszukiwania, takie jak, jeśli strumień jest tworzony z potoku lub konsola danych wyjściowych.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Metody wywołane po strumień został zamknięty.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object to synchronize.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> Obiektu do synchronizacji.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>Creates a thread-safe (synchronized) wrapper around the specified <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated">Tworzy bezpieczne wątkowo (zsynchronizowane) otokę określonego <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>A thread-safe <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated">Wielowątkowość <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>This method returns a class that wraps the specified <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object and restricts access to it from multiple threads.</source>
          <target state="translated">Ta metoda zwraca klasę, która opakowuje określonego <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> obiektu i ogranicza dostęp wiele wątków.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>All access to the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object will be thread safe.</source>
          <target state="translated">Wszystkie dostęp do <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> obiekt będzie bezpieczne dla wątków.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">Tablica bajtów.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>This method copies <bpt id="p1">&lt;c&gt;</bpt>count<ept id="p1">&lt;/c&gt;</ept> bytes from <bpt id="p2">&lt;c&gt;</bpt>buffer<ept id="p2">&lt;/c&gt;</ept> to the current stream.</source>
          <target state="translated">Ta metoda umożliwia skopiowanie <bpt id="p1">&lt;c&gt;</bpt>liczba<ept id="p1">&lt;/c&gt;</ept> bajtów z <bpt id="p2">&lt;c&gt;</bpt>buforu<ept id="p2">&lt;/c&gt;</ept> do bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin copying bytes to the current stream.</source>
          <target state="translated">Zerze przesunięcie w <bpt id="p1">&lt;c&gt;</bpt>buforu<ept id="p1">&lt;/c&gt;</ept> jaką należy zacząć kopiowanie bajtów do bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to be written to the current stream.</source>
          <target state="translated">Liczba bajtów do zapisania bieżącego strumienia.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, zapisuje sekwencję bajtów do bieżącego strumienia i przechodzi przez liczba zapisanych bajtów bieżącą pozycję w tym strumieniu.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> właściwości w celu określenia, czy bieżące wystąpienie obsługuje zapis.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method to write asynchronously to the current stream.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> metodę, aby zapisać bieżący strumień asynchronicznie.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If the write operation is successful, the position within the stream advances by the number of bytes written.</source>
          <target state="translated">Jeśli operacja zapisu zakończy się pomyślnie, pozycja w strumieniu przechodzi przez liczba zapisanych bajtów.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If an exception occurs, the position within the stream remains unchanged.</source>
          <target state="translated">Jeśli wystąpi wyjątek, pozycja w strumieniu nie jest zmieniany.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is greater than the buffer length.</source>
          <target state="translated">Suma <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> i <ph id="ph2">&lt;paramref name="count" /&gt;</ph> jest większa niż długość buforu.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="count" /&gt;</ph> jest ujemna.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occured, such as the specified file cannot be found.</source>
          <target state="translated">Wystąpił błąd We/Wy, takich jak nie można odnaleźć określonego pliku.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support writing.</source>
          <target state="translated">Strumień nie obsługuje zapisywania.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> was called after the stream was closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> Metoda została wywołana po strumień został zamknięty.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</source>
          <target state="translated">Asynchronicznie zapisuje sekwencję bajtów do bieżącego strumienia i przechodzi przez liczba zapisanych bajtów bieżącą pozycję w tym strumieniu.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to write data from.</source>
          <target state="translated">Bufor zapisywania danych z.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">Zerze przesunięcie w <bpt id="p1">&lt;c&gt;</bpt>buforu<ept id="p1">&lt;/c&gt;</ept> z którego należy zacząć kopiowanie bajtów do strumienia.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">Maksymalna liczba bajtów do zapisania.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</source>
          <target state="translated">Asynchronicznie zapisuje sekwencję bajtów do bieżącego strumienia i przechodzi przez liczba zapisanych bajtów bieżącą pozycję w tym strumieniu.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">Zadanie, które reprezentuje asynchroniczny zapis operacji.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> Metody umożliwia wykonywanie operacji We/Wy obciążający zasoby bez blokowania głównego wątku.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Ten aspekt dotyczący wydajności jest szczególnie ważny w aplikacji <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> lub aplikacjach <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph>, gdzie czasochłonne operacje strumieniowe mogą zablokować wątek interfejsu użytkownika i spowodować, że aplikacja będzie wyglądać, jakby przestała działać.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Metody asynchroniczne są używane w połączeniu z <ph id="ph1">`async`</ph> i <ph id="ph2">`await`</ph> słów kluczowych w języku Visual Basic i C#.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> właściwości w celu określenia, czy bieżące wystąpienie obsługuje zapis.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to write asynchronously to a file.</source>
          <target state="translated">Poniższy przykład przedstawia sposób zapisania asynchronicznie do pliku.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class, which derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">W przykładzie użyto <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> klasy, która jest pochodną <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="count" /&gt;</ph> jest ujemna.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">Suma <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> i <ph id="ph2">&lt;paramref name="count" /&gt;</ph> jest większa niż długość buforu.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support writing.</source>
          <target state="translated">Strumień nie obsługuje zapisywania.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream has been disposed.</source>
          <target state="translated">Strumień został usunięty.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">Strumień jest obecnie używany przez poprzednią operację zapisu.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write data from.</source>
          <target state="translated">Bufor zapisywania danych z.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">Zerze przesunięcie w <bpt id="p1">&lt;c&gt;</bpt>buforu<ept id="p1">&lt;/c&gt;</ept> z którego należy zacząć kopiowanie bajtów do strumienia.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">Maksymalna liczba bajtów do zapisania.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Token do monitorowania żądań anulowania.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">Wartość domyślna to <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">Asynchronicznie zapisuje sekwencję bajtów do strumienia bieżącego przesuwa bieżącą pozycję w tym strumieniu przez liczba zapisanych bajtów i monitoruje żądania anulowania.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">Zadanie, które reprezentuje asynchroniczny zapis operacji.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> Metody umożliwia wykonywanie operacji We/Wy obciążający zasoby bez blokowania głównego wątku.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Ten aspekt dotyczący wydajności jest szczególnie ważny w aplikacji <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> lub aplikacjach <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph>, gdzie czasochłonne operacje strumieniowe mogą zablokować wątek interfejsu użytkownika i spowodować, że aplikacja będzie wyglądać, jakby przestała działać.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Metody asynchroniczne są używane w połączeniu z <ph id="ph1">`async`</ph> i <ph id="ph2">`await`</ph> słów kluczowych w języku Visual Basic i C#.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> właściwości w celu określenia, czy bieżące wystąpienie obsługuje zapis.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">Jeśli operacja została anulowana przed ukończeniem działania, zwrócone zadania zawiera <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> wartość <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> overload.</source>
          <target state="translated">Na przykład zobacz <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> przeciążenia.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="count" /&gt;</ph> jest ujemna.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">Suma <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> i <ph id="ph2">&lt;paramref name="count" /&gt;</ph> jest większa niż długość buforu.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support writing.</source>
          <target state="translated">Strumień nie obsługuje zapisywania.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">Strumień został usunięty.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">Strumień jest obecnie używany przez poprzednią operację zapisu.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>The byte to write to the stream.</source>
          <target state="translated">Bajtów do zapisania w strumieniu.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</source>
          <target state="translated">Zapisuje bieżącą pozycję w strumieniu bajt i zmienia pozycję w strumieniu przez jednego bajtu.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> właściwości w celu określenia, czy bieżące wystąpienie obsługuje zapis.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>An I/O error occurs.</source>
          <target state="translated">Wystąpi błąd We/Wy.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>The stream does not support writing, or the stream is already closed.</source>
          <target state="translated">Strumień nie obsługuje zapisywania lub strumień jest już zamknięty.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Metody wywołane po strumień został zamknięty.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>The default implementation on <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> creates a new single-byte array and then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">Domyślna implementacja na <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> tworzy nową macierz jednobajtowe, a następnie wywołuje <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>While this is formally correct, it is inefficient.</source>
          <target state="translated">Jest to poprawny formalnie, jest nieefektywne.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Any stream with an internal buffer should override this method and provide a much more efficient version that writes to the buffer directly, avoiding the extra array allocation on every call.</source>
          <target state="translated">Strumieniem z buforu wewnętrznego należy przesłonić tę metodę i zapewnić bardziej efektywnego wersji, który zapisuje informacje w buforze bezpośrednio, unikając alokacji dodatkowe tablicy przy każdym wywołaniu.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.WriteTimeout">
          <source>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.</source>
          <target state="translated">Pobiera lub ustawia wartość, w miliseconds, która określa, jak długo strumienia podejmie próbę zapisu przed przekroczeniem limitu czasu.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.WriteTimeout">
          <source>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</source>
          <target state="translated">Wartość w miliseconds, która określa, jak długo strumienia podejmie próbę zapisu przed przekroczeniem limitu czasu.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.WriteTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> method always throws an <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> Metoda zawsze zwraca <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.WriteTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> property should be overridden to provide the appropriate behavior for the stream.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> Właściwości powinna zostać zastąpiona, aby zapewnić zachowanie odpowiednie dla tego strumienia.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.WriteTimeout">
          <source>If the stream does not support timing out, this property should raise an <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">Jeśli strumień nie obsługuje limitu czasu, ta właściwość powinna podnieść <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>