<Type Name="ILOpCodeExtensions" FullName="System.Reflection.Metadata.ILOpCodeExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="18d81fe499ddc2b27d7e2f8e0cea2ed2fc05ae47" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66006310" /></Metadata><TypeSignature Language="C#" Value="public static class ILOpCodeExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ILOpCodeExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Metadata.ILOpCodeExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ILOpCodeExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class ILOpCodeExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type ILOpCodeExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetBranchOperandSize">
      <MemberSignature Language="C#" Value="public static int GetBranchOperandSize (this System.Reflection.Metadata.ILOpCode opCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetBranchOperandSize(valuetype System.Reflection.Metadata.ILOpCode opCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.ILOpCodeExtensions.GetBranchOperandSize(System.Reflection.Metadata.ILOpCode)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetBranchOperandSize (opCode As ILOpCode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetBranchOperandSize(System::Reflection::Metadata::ILOpCode opCode);" />
      <MemberSignature Language="F#" Value="static member GetBranchOperandSize : System.Reflection.Metadata.ILOpCode -&gt; int" Usage="System.Reflection.Metadata.ILOpCodeExtensions.GetBranchOperandSize opCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opCode" Type="System.Reflection.Metadata.ILOpCode" RefType="this" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="opCode">Kod operacji gałęzi.</param>
        <summary>Oblicza rozmiar operandu określonej gałęzi instrukcji.</summary>
        <returns>1, jeśli <paramref name="opCode" /> jest krótki gałęzi lub 4, jeśli jest długich gałęzi.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Określony <paramref name="opCode" /> nie jest kod operacji gałęzi.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetLongBranch">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.ILOpCode GetLongBranch (this System.Reflection.Metadata.ILOpCode opCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Reflection.Metadata.ILOpCode GetLongBranch(valuetype System.Reflection.Metadata.ILOpCode opCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.ILOpCodeExtensions.GetLongBranch(System.Reflection.Metadata.ILOpCode)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetLongBranch (opCode As ILOpCode) As ILOpCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Reflection::Metadata::ILOpCode GetLongBranch(System::Reflection::Metadata::ILOpCode opCode);" />
      <MemberSignature Language="F#" Value="static member GetLongBranch : System.Reflection.Metadata.ILOpCode -&gt; System.Reflection.Metadata.ILOpCode" Usage="System.Reflection.Metadata.ILOpCodeExtensions.GetLongBranch opCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.ILOpCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opCode" Type="System.Reflection.Metadata.ILOpCode" RefType="this" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="opCode">Kod operacji gałęzi.</param>
        <summary>Pobiera długich fragmentów kodu op określonej gałęzi.</summary>
        <returns>Długa forma kod operacji gałęzi.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Określony <paramref name="opCode" /> nie jest kod operacji gałęzi.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetShortBranch">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.ILOpCode GetShortBranch (this System.Reflection.Metadata.ILOpCode opCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Reflection.Metadata.ILOpCode GetShortBranch(valuetype System.Reflection.Metadata.ILOpCode opCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.ILOpCodeExtensions.GetShortBranch(System.Reflection.Metadata.ILOpCode)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetShortBranch (opCode As ILOpCode) As ILOpCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Reflection::Metadata::ILOpCode GetShortBranch(System::Reflection::Metadata::ILOpCode opCode);" />
      <MemberSignature Language="F#" Value="static member GetShortBranch : System.Reflection.Metadata.ILOpCode -&gt; System.Reflection.Metadata.ILOpCode" Usage="System.Reflection.Metadata.ILOpCodeExtensions.GetShortBranch opCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.ILOpCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opCode" Type="System.Reflection.Metadata.ILOpCode" RefType="this" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="opCode">Kod operacji gałęzi.</param>
        <summary>Pobiera krótką formą kod operacji określonej gałęzi.</summary>
        <returns>Krótka kod operacji gałęzi.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Określony <paramref name="opCode" /> nie jest kod operacji gałęzi.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBranch">
      <MemberSignature Language="C#" Value="public static bool IsBranch (this System.Reflection.Metadata.ILOpCode opCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsBranch(valuetype System.Reflection.Metadata.ILOpCode opCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.ILOpCodeExtensions.IsBranch(System.Reflection.Metadata.ILOpCode)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsBranch (opCode As ILOpCode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsBranch(System::Reflection::Metadata::ILOpCode opCode);" />
      <MemberSignature Language="F#" Value="static member IsBranch : System.Reflection.Metadata.ILOpCode -&gt; bool" Usage="System.Reflection.Metadata.ILOpCodeExtensions.IsBranch opCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opCode" Type="System.Reflection.Metadata.ILOpCode" RefType="this" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="opCode">To be added.</param>
        <summary>Sprawdza, czy określony kod op gałęzi do etykiety.</summary>
        <returns><see langword="true" /> Jeśli określony kod operacji jest gałęzią na etykiecie <see langword="false" /> inaczej.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
