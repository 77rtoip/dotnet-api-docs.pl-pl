<Type Name="ClaimsPrincipalPermission" FullName="System.IdentityModel.Services.ClaimsPrincipalPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="97a920f61b9b131d328d66e3be820d13c431fae9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36558498" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ClaimsPrincipalPermission : System.Security.IPermission, System.Security.ISecurityEncodable, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ClaimsPrincipalPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClaimsPrincipalPermission&#xA;Implements IPermission, ISecurityEncodable, IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsPrincipalPermission sealed : System::Security::IPermission, System::Security::ISecurityEncodable, System::Security::Permissions::IUnrestrictedPermission" />
  <TypeSignature Language="F#" Value="type ClaimsPrincipalPermission = class&#xA;    interface IPermission&#xA;    interface ISecurityEncodable&#xA;    interface IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje uprawnienia, które używa <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> implementacji, aby określić, czy dostęp do zasobu powinny być przyznane aktywny podmiot zabezpieczeń. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> Klasa udostępnia zdolność do przeprowadzania kontroli dostępu konieczne przy użyciu <xref:System.Security.Claims.ClaimsAuthorizationManager> skonfigurowanego dla aplikacji. Wywołując <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> metody lub statycznego <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> metody ochronę można zapewnić do zasobów z wewnątrz ścieżki wykonywania kodu zgodnie z zasadami autoryzacji zdefiniowane dla Menedżera uwierzytelniania oświadczeń. Testy deklaratywne dostępu mogą być wykonywane przy użyciu <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> klasy.  
  
> [!IMPORTANT]
>  <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> Klasa korzysta z Menedżera autoryzacji oświadczeń skonfigurowane przez <xref:System.IdentityModel.Configuration.IdentityConfiguration> która jest ustawiona w <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> właściwości. Dotyczy to we wszystkich przypadkach, nawet w scenariuszach, w których WS-Federation nie jest używany; na przykład aktywnej aplikacji sieci Web (WCF) i aplikacji konsoli. Można określić Menedżera autoryzacji oświadczeń w konfiguracji lub programowo. Aby w pliku konfiguracji Menedżera autoryzacji oświadczeń, ustaw [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) pod [ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) element i upewnij się, że odwołuje się ta konfiguracja tożsamości [ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md) element, który jest ładowany przez środowisko uruchomieniowe (na przykład przez ustawienie `identityConfigurationName` atrybutu). Aby ustawić programowo Menedżera autoryzacji oświadczeń, podaj obsługi dla <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType> zdarzeń.  
  
 Na jednym poziomie funkcje udostępniane przez <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> jest podobny do kontroli dostępu opartej na rolach (RBAC) dostarczonych przez <xref:System.Security.Permissions.PrincipalPermission> klasy; jednak <xref:System.Security.Claims.ClaimsAuthorizationManager> klasa sprawdza na podstawie oświadczeń przedstawiony przez aktywny podmiot zabezpieczeń. Pozwala to znacznie więcej stopnia szczegółowości niż dostępna przez pure RBAC, gdzie wiele uprawnień zwykle są zbierane w ramach jednej roli. Prawdopodobnie, co ważniejsze, autoryzacji opartej na oświadczeniach umożliwia lepsze oddzielenie logiki i autoryzacji zasady biznesowe, ponieważ uprawnienia można wymagać dla określonej akcji do zasobu w kodzie i wewnętrznych zasad można skonfigurować, jakie oświadczenia umożliwienie korzystania z jednostki musi posiadać w celu zaspokojenia zapotrzebowania. RBAC, takich jak <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> wykonuje kontrolę dostępu na podstawie użytkownika, oznacza to, że w przeciwieństwie do zabezpieczenia dostępu kodu implementowane przez klasy, które pochodzą z <xref:System.Security.CodeAccessPermission> klasy i upewnij się, że wszystkie obiekty wywołujące kodu przyznano uprawnienia, przy użyciu przeszukiwania stosu <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>jego sprawdza tylko na bieżący podmiot zabezpieczeń.  
  
 Statycznych <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> metoda sprawdza dostęp do określonej akcji do określonego zasobu. Zasobów i akcji są oba ciągi i zwykle identyfikatorów URI. Można również zainicjować wystąpienia <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> z akcji i zasobów i wywołanie <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> metody. Mimo że konstruktora przyjmuje tylko pojedynczego zasobu i akcji, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> obiekty mogą być połączone za pośrednictwem <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> i <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> metody. Uprawnienie utworzone za pomocą tych metod może zawierać wiele par Akcja zasobu.  
  
 Obie metody określenia dostępu do wywołując <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> metody Menedżera autoryzacji oświadczeń skonfigurowanych z <xref:System.Security.Claims.AuthorizationContext> składa się z aktywny podmiot zabezpieczeń (<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>), zasobu i akcji. Generują one <xref:System.Security.SecurityException> Jeśli bieżący podmiot zabezpieczeń nie ma uprawnień do wykonania akcji na zasobie; w przeciwnym razie wykonanie będzie kontynuowana.  
  
 W przypadku liczby <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> zawiera wiele par Akcja zasobu, <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> metoda jest wywoływana dla każdej pary Akcja zasobu zawarte w uprawnienia.  Dla wywołania <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> zakończyła się powodzeniem, aktywny podmiot zabezpieczeń musi być autoryzowany dla wszystkich par Akcja zasobu zawarte w uprawnienia.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób ochrony zasobów za pomocą <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> metody <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> metody, lub <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> deklaracji. W każdym przypadku skonfigurowanego <xref:System.Security.Claims.ClaimsAuthorizationManager> jest wywoływane w celu oceny bieżący podmiot zabezpieczeń przed określonego zasobu i akcji. Jeśli bieżący podmiot zabezpieczeń nie ma autoryzacji dla określonej akcji na określony zasób <xref:System.Security.SecurityException> element zgłaszany, a w przeciwnym razie wykonania procesu.  
  
 [!code-csharp[WifCppWithCam#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#1)]  
  
 Następujący kod XML zawiera minimalną konfigurację wymaganą do użycia autoryzacji oświadczeń niestandardowych w Menedżerze <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> klasy. Musisz co najmniej zadeklarować zarówno `system.identityModel` i `system.identityModel.services` sekcje w `<configSection>` elementu, a następnie określ Menedżera autoryzacji w [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)element w domyślnej konfiguracji tożsamości. Daje to pewność, że z domyślnej konfiguracji Federacji odwołuje się do Menedżera autoryzacji. Alternatywnie można określić nazwę konfiguracji tożsamość, pod którą Menedżera autoryzacji jest określona w `identityConfigurationName` atrybutu [ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md) elementu.  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>  
<configuration>  
  <configSections>  
    <!-- WIF configuration sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    <section name="system.identityModel.services" type="System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
  </configSections>  
  
  <startup>  
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />  
  </startup>  
  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type ="MyClaimsAuthorizationManager.MyClaimsAuthorizationManager, MyClaimsAuthorizationManager"/>  
    </identityConfiguration>  
  </system.identityModel>  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute" />
    <altmember cref="P:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration" />
    <altmember cref="T:System.Security.Claims.ClaimsAuthorizationManager" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsPrincipalPermission (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsPrincipalPermission(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Services.ClaimsPrincipalPermission : string * string -&gt; System.IdentityModel.Services.ClaimsPrincipalPermission" Usage="new System.IdentityModel.Services.ClaimsPrincipalPermission (resource, action)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">Zasób, którego podmiot zabezpieczeń powinno być dozwolone.</param>
        <param name="action">Akcja, dla której powinno być dozwolone podmiot zabezpieczeń.</param>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> Obiekt został zainicjowany przy pary Akcja zasobu. Możesz wywołać <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> metodę w celu kontroli dostępu.  
  
 Mimo że konstruktora przyjmuje tylko pojedynczego zasobu i akcji, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> obiekty mogą być połączone za pośrednictwem <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> i <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> metody. Uprawnienie został utworzony za pomocą tych metod może zawierać wiele par Akcja zasobu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resource" /> jest <see langword="null" /> lub ciąg pusty.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public static void CheckAccess (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckAccess(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CheckAccess (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CheckAccess(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="static member CheckAccess : string * string -&gt; unit" Usage="System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess (resource, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">Zasób, którego podmiot zabezpieczeń powinno być dozwolone.</param>
        <param name="action">Akcja, dla której powinno być dozwolone podmiot zabezpieczeń.</param>
        <summary>Sprawdza, czy bieżący podmiot zabezpieczeń jest autoryzowany do wykonania określonej akcji na określony zasób.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podmiot zabezpieczeń musi być autoryzowany dla określonej akcji na określony zasób lub <xref:System.Security.SecurityException> wyjątku.  
  
 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> Wywoływana jest metoda Menedżera autoryzacji oświadczeń skonfigurowanych z <xref:System.Security.Claims.AuthorizationContext> składa się z aktywny podmiot zabezpieczeń (<xref:System.Threading.Thread.CurrentPrincipal%2A>), zasobu i akcji.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób ochrony zasobów za pomocą <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> metody. Menedżer autoryzacji oświadczeń skonfigurowanych wywoływana w celu oceny bieżący podmiot zabezpieczeń przed określonego zasobu i akcji. Jeśli bieżący podmiot zabezpieczeń nie ma autoryzacji dla określonej akcji na określony zasób <xref:System.Security.SecurityException> element zgłaszany, a w przeciwnym razie wykonania procesu.  
  
 [!code-csharp[WifCppWithCam#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Bieżący podmiot zabezpieczeń nie jest możliwa do przypisania z <see cref="T:System.Security.Claims.ClaimsPrincipal" />.  - lub - brak nie <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> skonfigurowany.</exception>
        <exception cref="T:System.Security.SecurityException">Nie można sprawdzić autoryzacji.</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="abstract member Copy : unit -&gt; System.Security.IPermission&#xA;override this.Copy : unit -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kopię bieżącego <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> wystąpienia.</summary>
        <returns>A <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> skopiowane z bieżącego wystąpienia.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit&#xA;override this.Demand : unit -&gt; unit" Usage="claimsPrincipalPermission.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sprawdza, czy bieżący podmiot zabezpieczeń jest autoryzowany dla par Akcja zasobu skojarzone z bieżącym wystąpieniem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżący podmiot zabezpieczeń musi być autoryzowany dla wszystkich par Akcja zasobu skojarzony z tym wystąpieniem lub <xref:System.Security.SecurityException> wyjątku.  
  
 Mimo że konstruktora przyjmuje tylko pojedynczego zasobu i akcji, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> obiekty mogą być połączone za pośrednictwem <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> i <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> metody. Uprawnienie został utworzony za pomocą tych metod może zawierać wiele par Akcja zasobu.  
  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> Wywołuje metodę <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> metody Menedżera autoryzacji oświadczeń skonfigurowanych z <xref:System.Security.Claims.AuthorizationContext> składa się z aktywny podmiot zabezpieczeń (<xref:System.Threading.Thread.CurrentPrincipal%2A>), zasobu i akcji dla każdej pary Akcja zasobu zawiera uprawnień. Aby uzyskać <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> do pomyślnego aktywny podmiot zabezpieczeń musi być autoryzowany dla wszystkich par Akcja zasobu, które są zawarte w uprawnienia.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób ochrony zasobów za pomocą <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> metody. Menedżer autoryzacji oświadczeń skonfigurowanych wywoływana w celu oceny bieżący podmiot zabezpieczeń przed określonego zasobu i akcji. Jeśli bieżący podmiot zabezpieczeń nie ma autoryzacji dla określonej akcji na określony zasób <xref:System.Security.SecurityException> element zgłaszany, a w przeciwnym razie wykonania procesu.  
  
 [!code-csharp[WifCppWithCam#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Bieżący podmiot zabezpieczeń nie jest możliwa do przypisania z <see cref="T:System.Security.Claims.ClaimsPrincipal" />.  - lub - brak nie <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> skonfigurowany.</exception>
        <exception cref="T:System.Security.SecurityException">Nie można sprawdzić autoryzacji.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public void FromXml (System.Security.SecurityElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXml (element As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void FromXml(System::Security::SecurityElement ^ element);" />
      <MemberSignature Language="F#" Value="abstract member FromXml : System.Security.SecurityElement -&gt; unit&#xA;override this.FromXml : System.Security.SecurityElement -&gt; unit" Usage="claimsPrincipalPermission.FromXml element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="element">Kodowanie XML na potrzeby rekonstrukcji uprawnienia.</param>
        <summary>Rekonstruuje bieżące uprawnienia i jego stanu z określonego kodowania XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rekonstruuje zgody Kodowanie XML utworzona przez wywołanie do <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Kodowanie zawiera nierozpoznany elementów lub atrybutów lub nieprawidłowo sformułowany kod XML.</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Intersect : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Uprawnienie do intersect z uprawnieniami bieżącego. Musi być wystąpieniem elementu <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Zwraca uprawnienia, które jest przecięcia bieżące uprawnienia i określony.</summary>
        <returns>Nowy <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> reprezentujący przecięciu bieżące uprawnienia i określonego uprawnienia; lub <see langword="null" /> Jeśli <paramref name="target" /> jest <paramref name="null" /> lub nie jest wystąpieniem <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uprawnienia, która jest zwracana ma pary Akcja zasobu, które były dostępne zarówno w bieżącym uprawnień i określonego uprawnienia. Pary Akcja zasobu, które istniały w tylko jednej lub drugiej uprawnienia nie są uwzględniane. Aby uzyskać <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> zakończyła się powodzeniem, nowe uprawnienie, bieżący podmiot zabezpieczeń musi tylko upoważnione wspólnych bieżące uprawnienia i określonych par Akcja zasobu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : System.Security.IPermission -&gt; bool&#xA;override this.IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="claimsPrincipalPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Uprawnienie do sprawdzenia dla relacji podzbioru. Musi być wystąpieniem elementu <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Zwraca wartość wskazującą, czy bieżące uprawnienia jest podzbiorem określonego uprawnienia.</summary>
        <returns>
          <see langword="true" /> Jeśli bieżące uprawnienia są podzbiorem określonego uprawnienia; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżące uprawnienia są podzbiór określonego uprawnienia, jeśli wszystkie pary Akcja zasobu zawarte w bieżącym uprawnienia są również obecne na określone uprawnienie. Jeśli `target` jest `null` lub nie jest wystąpieniem <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A> zwraca `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberSignature Language="F#" Value="abstract member IsUnrestricted : unit -&gt; bool&#xA;override this.IsUnrestricted : unit -&gt; bool" Usage="claimsPrincipalPermission.IsUnrestricted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wartość wskazującą, czy uprawnienie jest nieograniczony.</summary>
        <returns>
          <see langword="true" /> Jeśli uprawnienie jest nieograniczony; w przeciwnym razie <see langword="false" />. Zawsze zwraca <see langword="true" /> wskazujący, że uprawnienie jest nieograniczony.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="abstract member ToXml : unit -&gt; System.Security.SecurityElement&#xA;override this.ToXml : unit -&gt; System.Security.SecurityElement" Usage="claimsPrincipalPermission.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kod XML zakodowany formę bieżące uprawnienia i jego stan.</summary>
        <returns>Zakodowane w formacie XML bieżące uprawnienia i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podmiot zabezpieczeń można odtworzyć z jej formularza kodowane XML przez wywołanie metody <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Union : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Union target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Uprawnienie do łączenia z uprawnieniami bieżącego. Musi być typu <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Zwraca nowe uprawnienia, które łączy bieżące uprawnienia i określony. <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> obiekt, który zawiera wszystkie pary Akcja zasobu, które znajdują się w bieżącym wystąpieniu i obiektu docelowego.</summary>
        <returns>Nowy <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> reprezentujący Unii bieżące uprawnienia i określonego uprawnienia; lub <see langword="null" /> Jeśli <paramref name="target" /> jest <paramref name="null" /> lub nie jest wystąpieniem <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uprawnień, który jest zwracany zawiera wszystkie pary Akcja zasobu, które znajdują się w bieżącym uprawnień i prezentowanie wszystkich par Akcja zasobu, które są określone uprawnienie. Aby uzyskać <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> zakończyła się powodzeniem, nowe uprawnienie, bieżący podmiot zabezpieczeń musi być autoryzowany dla wszystkich par Akcja zasobu, które istniały w bieżącym uprawnienia, a wszystkie pary Akcja zasobu, które istniały w określonego uprawnienia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>