<Type Name="PageRouteHandler" FullName="System.Web.Routing.PageRouteHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="074615eb82b92ca4e3ece76654cd584251fd5a54" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36597641" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PageRouteHandler : System.Web.Routing.IRouteHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PageRouteHandler extends System.Object implements class System.Web.Routing.IRouteHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.Routing.PageRouteHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class PageRouteHandler&#xA;Implements IRouteHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageRouteHandler : System::Web::Routing::IRouteHandler" />
  <TypeSignature Language="F#" Value="type PageRouteHandler = class&#xA;    interface IRouteHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.Routing.IRouteHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Udostępnia właściwości i metody określających sposób mapowania pliku fizycznego adresu URL.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przekaż wystąpienie <xref:System.Web.Routing.PageRouteHandler> do <xref:System.Web.Routing.Route> konstruktora do mapowania pliku fizycznego adresu URL. <xref:System.Web.Routing.PageRouteHandler> Obiektu określa ścieżkę wirtualną pliku fizycznego i określa, czy zaznaczono opcję reguł autoryzacji dla fizycznego adresu URL.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Routing.Route" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Routing.PageRouteHandler" /> klasy.</summary>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageRouteHandler (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Routing.PageRouteHandler.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (virtualPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageRouteHandler(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="new System.Web.Routing.PageRouteHandler : string -&gt; System.Web.Routing.PageRouteHandler" Usage="new System.Web.Routing.PageRouteHandler virtualPath" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Ścieżka wirtualna pliku fizycznego dla tego <see cref="P:System.Web.Routing.RouteData.Route" /> obiektu. Plik musi znajdować się w bieżącej aplikacji. W związku z tym ścieżka musi rozpoczynać się od tyldy (~).</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Routing.PageRouteHandler" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Korzystając z tego konstruktora <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> właściwość jest ustawiona na `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="virtualPath" /> Parametr jest <see langword="null" /> to ciąg pusty lub nie rozpoczyna się od "~ /".</exception>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageRouteHandler (string virtualPath, bool checkPhysicalUrlAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string virtualPath, bool checkPhysicalUrlAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (virtualPath As String, checkPhysicalUrlAccess As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageRouteHandler(System::String ^ virtualPath, bool checkPhysicalUrlAccess);" />
      <MemberSignature Language="F#" Value="new System.Web.Routing.PageRouteHandler : string * bool -&gt; System.Web.Routing.PageRouteHandler" Usage="new System.Web.Routing.PageRouteHandler (virtualPath, checkPhysicalUrlAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="checkPhysicalUrlAccess" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Ścieżka wirtualna pliku fizycznego tego <see cref="P:System.Web.Routing.RouteData.Route" /> obiektu. Plik musi znajdować się w bieżącej aplikacji. W związku z tym ścieżka musi rozpoczynać się od tyldy (~).</param>
        <param name="checkPhysicalUrlAccess">Jeśli ta właściwość jest ustawiona na <see langword="false" />, reguły autoryzacji zostaną zastosowane do adresu URL żądania, a nie adres URL strony fizycznej. Jeśli ta właściwość jest ustawiona na <see langword="true" />, reguły autoryzacji zostaną zastosowane w adresie URL żądania i adres URL strony fizycznej.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Routing.PageRouteHandler" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> jest właściwość `true`. W związku z tym, jeśli chcesz, aby reguł autoryzacji, które mają być stosowane do obu adres URL strony fizycznej i adres URL trasy, można użyć <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29> Konstruktor zamiast tego konstruktora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="virtualPath" /> Parametr jest <see langword="null" /> to ciąg pusty lub nie rozpoczyna się od "~ /".</exception>
        <altmember cref="P:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess" />
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
    <Member MemberName="CheckPhysicalUrlAccess">
      <MemberSignature Language="C#" Value="public bool CheckPhysicalUrlAccess { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckPhysicalUrlAccess" />
      <MemberSignature Language="DocId" Value="P:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckPhysicalUrlAccess As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckPhysicalUrlAccess { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CheckPhysicalUrlAccess : bool" Usage="System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą, czy reguły autoryzacji są stosowane do adresu URL pliku fizycznego.</summary>
        <value>
          <see langword="true" /> Jeśli autoryzacji jest sprawdzany pod kątem adres URL pliku fizycznego, który jest skojarzony z trasą; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można ustawić <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> właściwości, korzystając z <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29> konstruktora.  
  
 Wartość <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> właściwość określa, czy <xref:System.Web.Routing.PageRouteHandler> obiektu będzie sprawdzać uprawnienia tylko do adresu URL trasy lub zarówno strony fizycznej, jak i adresu URL trasy.  
  
 Gdy <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> właściwość jest ustawiona na `true` (która jest jego wartość domyślna), użytkownik musi mieć uprawnienia dostępu zarówno adres URL trasy, jak i fizycznych adresu URL. Gdy <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> właściwość jest ustawiona na `false`, użytkownik wymaga tylko uprawnień dostępu do adresu URL trasy i uprawnienia do fizycznego adresu URL nie są sprawdzane.  
  
 Uprawnienia są zdefiniowane w pliku Web.config, jak pokazano w poniższym przykładzie:  
  
```  
<configuration>  
  <location path="categoriespage.aspx">  
    <system.web>  
      <authorization>  
        <allow roles="admin"/>  
        <deny users="*"/>  
      </authorization>  
    </system.web>  
  </location>  
  <location path="category">  
    <system.web>  
      <authorization>  
        <allow users="*"/>  
      </authorization>  
    </system.web>  
  </location>  
</configuration>  
```  
  
 Dla danego adresu URL żądania, który zawiera `Category/food/show` po nazwie domeny, jeśli jest wzorzec URL trasy `Category/{action}/{categoryName}` i strony fizycznej jest Categoriespage.aspx, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] stosuje uprawnienia zdefiniowane w poprzednim przykładzie w jednym z następujących sposobów:  
  
-   Jeśli <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> właściwość jest `false`, wszyscy użytkownicy mają prawo dostępu, ponieważ wszyscy użytkownicy są udzielony dostęp do wzorca adresu URL, który rozpoczyna się od `category`.  
  
-   Jeśli <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> właściwość jest `true`, tylko `admin` użytkownicy mają prawo dostępu. Wszyscy użytkownicy mają dostęp do wzorca adresu URL, który rozpoczyna się od `category`, ale tylko `admin` użytkownicy mają dostęp do strony fizycznej Categoriespage.aspx.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
    <Member MemberName="GetHttpHandler">
      <MemberSignature Language="C#" Value="public virtual System.Web.IHttpHandler GetHttpHandler (System.Web.Routing.RequestContext requestContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.IHttpHandler GetHttpHandler(class System.Web.Routing.RequestContext requestContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::IHttpHandler ^ GetHttpHandler(System::Web::Routing::RequestContext ^ requestContext);" />
      <MemberSignature Language="F#" Value="abstract member GetHttpHandler : System.Web.Routing.RequestContext -&gt; System.Web.IHttpHandler&#xA;override this.GetHttpHandler : System.Web.Routing.RequestContext -&gt; System.Web.IHttpHandler" Usage="pageRouteHandler.GetHttpHandler requestContext" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Routing.IRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.IHttpHandler</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestContext" Type="System.Web.Routing.RequestContext" />
      </Parameters>
      <Docs>
        <param name="requestContext">Obiekt hermetyzujący informacje o żądaniu.</param>
        <summary>Zwraca obiekt, który przetwarza żądania.</summary>
        <returns>Obiekt przetwarzający żądanie.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="requestContext" /> Parametr jest <see langword="null" />.</exception>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
    <Member MemberName="GetSubstitutedVirtualPath">
      <MemberSignature Language="C#" Value="public string GetSubstitutedVirtualPath (System.Web.Routing.RequestContext requestContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetSubstitutedVirtualPath(class System.Web.Routing.RequestContext requestContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetSubstitutedVirtualPath(System::Web::Routing::RequestContext ^ requestContext);" />
      <MemberSignature Language="F#" Value="member this.GetSubstitutedVirtualPath : System.Web.Routing.RequestContext -&gt; string" Usage="pageRouteHandler.GetSubstitutedVirtualPath requestContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestContext" Type="System.Web.Routing.RequestContext" />
      </Parameters>
      <Docs>
        <param name="requestContext">Obiekt hermetyzujący informacje o żądaniu.</param>
        <summary>Zwraca ścieżkę wirtualną pliku fizycznego dla trasy, po zastosowaniu podstawień, aby wszystkie parametry zamiany.</summary>
        <returns>Adres URL pliku fizycznego, który został wygenerowany na podstawie trasy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> wartość nie zawiera żadnych parametrów zastępczy <xref:System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath%2A> metoda zwraca taką samą wartość jak <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="requestContext" /> Parametr jest <see langword="null" />.</exception>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
    <Member MemberName="VirtualPath">
      <MemberSignature Language="C#" Value="public string VirtualPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string VirtualPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Routing.PageRouteHandler.VirtualPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VirtualPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ VirtualPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.VirtualPath : string" Usage="System.Web.Routing.PageRouteHandler.VirtualPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ścieżkę wirtualną strony sieci Web, który jest skojarzony z tej trasy.</summary>
        <value>Adres URL strony sieci Web, zanim podstawień zostały zastosowane zastąpienia parametrów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz ustawić <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> właściwości w <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=nameWithType> konstruktora lub <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=nameWithType> konstruktora.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
  </Members>
</Type>