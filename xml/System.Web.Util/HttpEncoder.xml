<Type Name="HttpEncoder" FullName="System.Web.Util.HttpEncoder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4e35efb72622eb52376091974f022482dc3d28df" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30694556" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HttpEncoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.HttpEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpEncoder" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia kodowania i dekodowania logiki.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa zawiera kodowania i dekodowania logikę, która jest używana przez metody klas takich jak <xref:System.Web.HttpUtility>, <xref:System.Web.HttpServerUtility>, i <xref:System.Net.HttpResponseHeader>.  
  
 Może dziedziczyć <xref:System.Web.Util.HttpEncoder> klasy i zastąpić zachowanie, aby dostosować domyślny kodowania i dekodowania zachowanie programu ASP.NET. Następnie ustaw <xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A> właściwość <xref:System.Web.Configuration.HttpRuntimeSection> klasa do konfigurowania klasę niestandardową.  
  
 Klasy niestandardowej kodowania i dekodowania, która jest pochodną <xref:System.Web.Util.HttpEncoder> można zastąpić wbudowanych ASP.NET kodowania i dekodowania zachowanie lub zmień tylko wybrane aspektami.  
  
 Niestandardowy typ kodowania dla można skonfigurować w programie ASP.NET zastępujące lub uzupełniające kodowania następujące działania:  
  
-   Kodowanie HTML  
  
-   Kodowanie atrybutu HTML  
  
-   Kodowanie adresu URL  
  
-   Kodowanie ścieżki adresu URL  
  
-   Nazwa nagłówka HTTP i kodowanie wartość nagłówka  
  
 Domyślnie aplikacje ASP.NET są skonfigurowane do używania <xref:System.Web.Security.AntiXss.AntiXssEncoder> wpisz wszystkie dane wyjściowe kodowania.  
  
 Poniższy przykład z pokazuje pliku Web.config aplikacji na poziomie jak <xref:System.Web.Security.AntiXss.AntiXssEncoder> typ jest ustawiony dla aplikacji ASP.NET:  
  
 `<httpRuntime requestValidationMode="4.5" encoderType="System.Web.Security.AntiXss.AntiXssEncoder, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>`  
  
 Ustawienie konfiguracji w zestawach przykład <xref:System.Web.Security.AntiXss.AntiXssEncoder> klasę, aby wykonać wszystkie dane wyjściowe kodowania w aplikacji. Aby uzyskać więcej informacji, zobacz <xref:System.Web.Security.AntiXss.AntiXssEncoder> Przegląd klasy.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Podczas tworzenia klasy niestandardowego kodera i zastępowanie metody podstawowej klasy podstawowej, pochodnych koder może zgłosić wyjątek, za pomocą dowolnego przesłoniętych metod. Jednak w następujących przypadkach generowania takich wyjątku może prowadzić do nieoczekiwanego zachowania w programie ASP.NET:  
  
-   Jeśli program ASP.NET jest renderowanie strony błędu, który jest spowodowany przez nieobsłużony wyjątek został zgłoszony z niestandardowego kodera, ASP.NET nie próbuje zakodować dane wyjściowe błąd przez wywołanie niestandardowego kodera. Dzięki temu można uniknąć błędów cyklicznego.  
  
-   Wysyłając ASP.NET jest nagłówków HTTP w usługach IIS, platformy ASP.NET nie ma możliwości obsługi nieobsługiwanych wyjątków. W związku z tym standard strona błędów programu ASP.NET będzie renderowany (Jeśli ustawienia konfiguracji zezwala na tej stronie mają być wyświetlane).</para>
    </block>
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
    <altmember cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Util.HttpEncoder" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Current { System::Web::Util::HttpEncoder ^ get(); void set(System::Web::Util::HttpEncoder ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Web.Util.HttpEncoder" /> typu, który będzie używany w aplikacji.</summary>
        <value>Odwołanie do typu kodera/dekoder, który będzie używany.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli pochodnego <xref:System.Web.Util.HttpEncoder> w pliku konfiguracji określono typ <xref:System.Web.Util.HttpEncoder.Current%2A> właściwość zwraca odwołanie do typu niestandardowego. Jednak jeśli jest używana nie niestandardowego kodera, właściwość zwraca odwołanie do domyślnego ASP.NET <xref:System.Web.Util.HttpEncoder> wystąpienia.  
  
 <xref:System.Web.Util.HttpEncoder.Current%2A> Właściwość nie jest bezpieczne wątkowo. Ustaw tę właściwość tylko w aplikacji `Application_Start` metody, ponieważ `Application_Start` jest uruchamiany w jednym wątku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wystąpienie kodera, który jest przypisany do tej właściwości jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Default { System::Web::Util::HttpEncoder ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera odwołanie do kodera domyślnego platformy ASP.NET.</summary>
        <value>Odwołanie do kodera domyślnego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typowym problemem kodowania jest to, że wartość domyślna ASP.NET <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> zachowanie konwertuje spacje na znak "+". W przeszłości znak "+" została Internet Konwencji kodowania znaków spacji w adresie URL w sposób bardziej czytelny dla człowieka. Jednak według standardów, znaku spacji mają być zakodowane jako "% 20", a zamiast jako znak "+". ASP.NET umożliwia wdrożenie więcej standardów algorytmu zgodnego ze kodowania.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderNameValueEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HeaderNameValueEncode (string headerName, string headerValue, out string encodedHeaderName, out string encodedHeaderValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HeaderNameValueEncode(string headerName, string headerValue, [out] string&amp; encodedHeaderName, [out] string&amp; encodedHeaderValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HeaderNameValueEncode(System.String,System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HeaderNameValueEncode (headerName As String, headerValue As String, ByRef encodedHeaderName As String, ByRef encodedHeaderValue As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HeaderNameValueEncode(System::String ^ headerName, System::String ^ headerValue, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderName, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="headerValue" Type="System.String" />
        <Parameter Name="encodedHeaderName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="encodedHeaderValue" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="headerName">Nazwa nagłówka HTTP do kodowania.</param>
        <param name="headerValue">Wartość nagłówka HTTP do kodowania.</param>
        <param name="encodedHeaderName">Gdy metoda zwróci wartość, zawiera nazwę zakodowanego do użycia dla nagłówka HTTP. Ten parametr jest przekazywany niezainicjowany.</param>
        <param name="encodedHeaderValue">Po powrocie z tej metody zawiera wartość zakodowanego do użycia dla nagłówka HTTP. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Koduje nazwę i wartość na ciąg, który może być używany jako nagłówek HTTP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> Metoda przyjmuje ciągów wejściowych z `headerName` i `headerValue` parametrów i ich koduje. Zakodowany wartości są zwracane parametrów wyjściowych.  
  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> — Metoda korzysta z następującą logiką do kodowania nagłówka nazwy i wartości:  
  
-   Wszystkie znaki, których wartość Unicode jest mniejsza niż znaków ASCII 32, z wyjątkiem znaków ASCII 9, są zakodowane w adresie URL w formacie `%NN` gdzie `N` znaki reprezentują wartości szesnastkowe.  
  
-   Znaków ASCII 9 (znak tabulator poziomy) nie jest zakodowane w adresie URL.  
  
-   Znaków ASCII 127 został zakodowany jako `%7F`.  
  
-   Wszystkie inne znaki nie są zakodowane.  
  
    > [!NOTE]
    >  Mimo że ta metoda może służyć do wartości Unicode, zazwyczaj jest używany dla wartości zakresu ASCII.  
  
 Domyślna implementacja <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> metoda zwraca wartość `headerValue` w `encodedHeaderValue` Jeśli `headerValue` jest `null` lub jest pustym ciągiem. Podobnie, domyślna implementacja zwraca wartość `headerName` w `encodedHeaderName` Jeśli `headerName` jest `null` lub jest pustym ciągiem.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do kodowania.</param>
        <param name="output">Składnik zapisywania tekstu zakodowaną wartość do zapisu.</param>
        <summary>Koduje wartość przychodzącego na ciąg, który można wstawiać do atrybutu HTML, który jest rozdzielana za pomocą jednego lub podwójny cudzysłów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> Metoda koduje znaki przy użyciu standardowych jednostek kodu HTML. Na przykład `<` (lewego nawiasu ostrego) są kodowane jako `&lt;` i `\` (ukośnik odwrotny) są kodowane jako `&#92;`.  
  
 Można bezpiecznie korzystać <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> w atrybutach ujęty w pojedynczy cudzysłów i podwójnych cudzysłowach. Wartości muszą być ujęty w cudzysłów.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlDecode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlDecode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do zdekodowania.</param>
        <param name="output">Składnik zapisywania tekstu dekodowane wartość do zapisu.</param>
        <summary>Dekoduje wartość z zakresu od ciąg kodowany w formacie HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli wymieniono sekwencje znaków, które może zdekodować logiki dekodowania ASP.NET.  
  
|Sekwencja znaków|Reguła|  
|------------------------|----------|  
|`&#NNN;` (dziesiętne kody znaków ASCII).|Odczytany jako określony znaków ASCII. Sekwencja znaków rozpoczyna się od cyfry po znaku # i kończy się w średnika.|  
|`&#xZZ;` (szesnastkowe kody znaków ASCII).|Odczytany jako określony znaków ASCII. Formie zakodowanej określa znak, przy użyciu znaków szesnastkowych zamiast wartości dziesiętnej. Sekwencja znaków rozpoczyna się od cyfry po znaku # i kończy się w średnika.|  
|Nazwane jednostki HTML.|Odczytany jako równoważne znaków ASCII.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do kodowania.</param>
        <param name="output">Składnik zapisywania tekstu zakodowaną wartość do zapisu.</param>
        <summary>Koduje ciąg na ciąg kodowany w formacie HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli wymieniono sekwencje znaków, które można zdekodować logiki kodowania ASP.NET.  
  
|Znak|Zakodowane jako|  
|---------------|----------------|  
|`<` (lewego nawiasu ostrego)|`&lt;`|  
|`>` (prawego nawiasu ostrego)|`&gt;`|  
|`"` (znaki cudzysłowu)|`&quot;`|  
|`&` (ampersand)|`&amp;`|  
|`\` (backslash)|`&#92;`|  
|Znaki ASCII z 160 do 255|`&#NNN;`, gdzie `NNN` jest kod znaku dziesiętnego cyfry|  
  
 Jeśli można zastąpić <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> metody, musi mieć dane wyjściowe, która również jest bezpieczna w podwójnych cudzysłowach lub ujęty w pojedynczy cudzysłów atrybutów HTML. To bierze pod uwagę podczas analizowania przez aparat Razor, w którym znaczników i kodu można łączyć, takich jak \<tagu attr = "@value" >. Ponadto @ — operator nie są znane kontekście podczas przetwarzania przez aparatu Razor, w związku z tym wywołuje <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> zamiast <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="JavaScriptStringEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string JavaScriptStringEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string JavaScriptStringEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.JavaScriptStringEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function JavaScriptStringEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ JavaScriptStringEncode(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do kodowania.</param>
        <summary>Koduje ciąg.</summary>
        <returns>Zaszyfrowanym ciągiem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kodowanie adresu URL upewnia się, że wszystkie przeglądarki poprawnie przesłać tekstu w ciągach adresu URL. Znaki, takie jak znak zapytania (?), handlowego "i" (&), ukośnika (/) i spacje może być obcięty lub uszkodzony przez niektóre przeglądarki. W związku z tym musi być zakodowany te znaki.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">Tablica bajtów do kodowania.</param>
        <param name="offset">Pozycja w <c>bajtów</c> tablicy, od którego ma zostać rozpoczęta kodowania.</param>
        <param name="count">Liczba elementów w <c>bajtów</c> tablicy do kodowania.</param>
        <summary>Koduje tablicy znaków, które nie są dozwolone w adresie URL w szesnastkowy encjach znaków.</summary>
        <returns>Tablica znaków zakodowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> Metoda jest wywoływana przez kilka metod kodowania adresu URL w <xref:System.Web.HttpUtility> klasy.  
  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> Metoda koduje adresu URL dowolny znak, który nie znajduje się w zestawie ASCII znaków, które jest uznawane za bezpieczne dla adresu URL. Spacje są zakodowane jako ASCII "`+"` znaków. Bezpieczne dla adresu URL znaki ASCII zawierają znaki ASCI (od A do Z i do z), cyfry (0-9) i niektórych znaków interpunkcyjnych. W poniższej tabeli wymieniono znaków interpunkcyjnych, zalecające znaki ASCII bezpiecznego adresu URL.  
  
|Znak|Opis|  
|---------------|-----------------|  
|-|Łącznik|  
|_|Podkreślenie|  
|.|Kropka|  
|!|Wykrzyknik|  
|*|Gwiazdka (gwiazdkę)|  
|(|Nawias otwierający|  
|)|Nawiasu zamykającego|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> jest mniejsza niż zero lub większa niż długość <paramref name="bytes" /> tablicy.  
  
 —lub—  
  
 <paramref name="count" /> jest mniejsza od zera lub <paramref name="count" /> plus <paramref name="offset" /> jest większa niż długość <paramref name="bytes" /> tablicy.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do kodowania.</param>
        <summary>Koduje podsekcji adresu URL.</summary>
        <returns>Ciąg kodowany w formacie adresu URL.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> Metoda jest wywoływana przez <xref:System.Web.HttpUtility.UrlPathEncode%2A> metody. <xref:System.Web.HttpUtility.UrlPathEncode%2A> Metoda wykonuje następujące czynności:  
  
-   Stosuje logikę kodowania <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> metody tylko część ścieżki adresu URL (co wyklucza ciągu zapytania). Metoda przyjęto założenie, że adres URL został zakodowany jako ciąg znaków UTF-8.  
  
-   Koduje bez spacji, tak aby tylko podzestaw najpierw 128 znaków ASCII jest używany w wynikowy ciąg zakodowany. Znaków w wartości typu Unicode 128 i mniejszy, 32 i mniejszy, są zakodowane w adresie URL.  
  
-   Spacje są kodowane jako % 20.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>