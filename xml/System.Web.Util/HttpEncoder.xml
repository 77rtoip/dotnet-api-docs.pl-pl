<Type Name="HttpEncoder" FullName="System.Web.Util.HttpEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d9b7fd4528a7d53c8e18ba5e497c7f3d1f71a7ce" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52201043" /></Metadata><TypeSignature Language="C#" Value="public class HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HttpEncoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.HttpEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpEncoder" />
  <TypeSignature Language="F#" Value="type HttpEncoder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia kodowania i dekodowania logiki.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zawiera klasy, kodowania i dekodowania logikę, która jest używana przez metody w klasach, takich jak <xref:System.Web.HttpUtility>, <xref:System.Web.HttpServerUtility>, i <xref:System.Net.HttpResponseHeader>.  
  
 Może dziedziczyć <xref:System.Web.Util.HttpEncoder> klasy, a także Przesłoń zachowanie, aby dostosować domyślne kodowanie i dekodowanie zachowanie programu ASP.NET. Następnie ustawiamy <xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A> właściwość <xref:System.Web.Configuration.HttpRuntimeSection> klasa umożliwiająca skonfigurowanie klasę niestandardową.  
  
 Klasa niestandardowa do kodowania i dekodowania, która jest pochodną <xref:System.Web.Util.HttpEncoder> można zastąpić wbudowanych programu ASP.NET, kodowania i dekodowania zachowanie lub zmień tylko wybrane aspektami.  
  
 Niestandardowy typ kodowania dla można skonfigurować w programie ASP.NET do zastąpienia lub uzupełnienia następujące zachowanie kodowania:  
  
-   Kodowanie HTML  
  
-   Kodowanie atrybutu HTML  
  
-   Kodowanie adresu URL  
  
-   Kodowanie ścieżki adresu URL  
  
-   Nazwa nagłówka HTTP i kodowania wartość nagłówka  
  
 Domyślnie aplikacje ASP.NET są skonfigurowane do używania <xref:System.Web.Security.AntiXss.AntiXssEncoder> typ wyjściowy kodowania.  
  
 Poniższy przykład z pokazuje pliku Web.config aplikacji jak <xref:System.Web.Security.AntiXss.AntiXssEncoder> typu jest ustawiona dla aplikacji ASP.NET:  
  
 `<httpRuntime requestValidationMode="4.5" encoderType="System.Web.Security.AntiXss.AntiXssEncoder, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>`  
  
 Ustawienia konfiguracji w zestawach przykład <xref:System.Web.Security.AntiXss.AntiXssEncoder> klasy do wykonywania wszystkich danych wyjściowych kodowania w aplikacji. Aby uzyskać więcej informacji, zobacz <xref:System.Web.Security.AntiXss.AntiXssEncoder> klasa — Przegląd.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Podczas tworzenia klasy niestandardowego kodera i Zastąp podstawowych metod klasy bazowej, koder pochodnej może zgłosić wyjątek za pomocą dowolnego zastąpionych metod. Jednak w następujących przypadkach zostanie zgłoszony wyjątek od tej zasady może prowadzić do nieoczekiwanego zachowania w programie ASP.NET: 
— Jeśli strona błędu, która jest spowodowany przez nieobsłużony wyjątek, który został zgłoszony z niestandardowego kodera renderowania ASP.NET, ASP.NET nie próbuje kodowanie jego dane wyjściowe błędu przez wywołanie niestandardowego kodera. Pozwala to uniknąć warunków błędów cykliczne.  
  
-Gdy ASP.NET wysyła nagłówki HTTP w usługach IIS, ASP.NET nie ma możliwości obsługi nieobsługiwanych wyjątków. W związku z tym standardowe strona błędów programu ASP.NET będzie renderowana (Jeśli ustawienia konfiguracji zezwala na tej stronie, które mają być wyświetlane).</para></block>
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
    <altmember cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Util.HttpEncoder" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Current { System::Web::Util::HttpEncoder ^ get(); void set(System::Web::Util::HttpEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.HttpEncoder with get, set" Usage="System.Web.Util.HttpEncoder.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Web.Util.HttpEncoder" /> typ, który będzie używany w aplikacji.</summary>
        <value>Odwołanie do typu koder/dekoder, który będzie używany.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli pochodna <xref:System.Web.Util.HttpEncoder> typ jest określony w pliku konfiguracyjnym <xref:System.Web.Util.HttpEncoder.Current%2A> właściwość zwraca odwołanie do typu niestandardowego. Jednak jeśli jest używany nie niestandardowego kodera, właściwość ta zwraca odwołanie do domyślnego ASP.NET <xref:System.Web.Util.HttpEncoder> wystąpienia.  
  
 <xref:System.Web.Util.HttpEncoder.Current%2A> Właściwość nie jest metodą o bezpiecznych wątkach. Ustaw tę właściwość tylko aplikacji w witrynie `Application_Start` metody, ponieważ `Application_Start` jest uruchamiane w jednym wątku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wystąpienie kodera, który jest przypisany do tej właściwości jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Default { System::Web::Util::HttpEncoder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Web.Util.HttpEncoder" Usage="System.Web.Util.HttpEncoder.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera odwołanie do kodera domyślnego platformy ASP.NET.</summary>
        <value>Odwołanie do kodera domyślnego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typowym problemem kodowania jest to, że domyślna ASP.NET <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> zachowanie miejsca do magazynowania konwertuje znak "+". W przeszłości znak "+" została Internet Konwencji kodowania znaków spacji w adresie URL w sposób bardziej czytelny dla człowieka. Jednak zgodnie z normami, znak spacji powinien być kodowany jako "% 20", a zamiast jako znak "+". Program ASP.NET umożliwia wdrożenie więcej standardów algorytmu zgodnego ze kodowania.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderNameValueEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HeaderNameValueEncode (string headerName, string headerValue, out string encodedHeaderName, out string encodedHeaderValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HeaderNameValueEncode(string headerName, string headerValue, [out] string&amp; encodedHeaderName, [out] string&amp; encodedHeaderValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HeaderNameValueEncode(System.String,System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HeaderNameValueEncode (headerName As String, headerValue As String, ByRef encodedHeaderName As String, ByRef encodedHeaderValue As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HeaderNameValueEncode(System::String ^ headerName, System::String ^ headerValue, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderName, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderValue);" />
      <MemberSignature Language="F#" Value="abstract member HeaderNameValueEncode : string * string *  *  -&gt; unit&#xA;override this.HeaderNameValueEncode : string * string *  *  -&gt; unit" Usage="httpEncoder.HeaderNameValueEncode (headerName, headerValue, encodedHeaderName, encodedHeaderValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="headerValue" Type="System.String" />
        <Parameter Name="encodedHeaderName" Type="System.String" RefType="out" />
        <Parameter Name="encodedHeaderValue" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="headerName">Nazwa nagłówka HTTP do zakodowania.</param>
        <param name="headerValue">Wartość nagłówka HTTP do zakodowania.</param>
        <param name="encodedHeaderName">Po powrocie z tej metody zawiera zakodowany nazwę do użycia dla nagłówka HTTP. Ten parametr jest przekazywany niezainicjowany.</param>
        <param name="encodedHeaderValue">Po powrocie z tej metody zawiera zakodowaną wartość dla nagłówka HTTP. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Koduje nazwę i wartość na ciąg, który może służyć jako nagłówka HTTP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> Metoda przyjmuje ciągów wejściowych z `headerName` i `headerValue` parametrów i koduje je. Parametry wyjściowe zwracane są zakodowanych wartości.  
  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> Metoda używa Poniższa logika do zakodowania nagłówek nazwy i wartości:  
  
-   Wszystkie znaki, których wartość Unicode jest mniejsza niż znak ASCII 32, z wyjątkiem znaku ASCII 9, są zakodowane w adresie URL w formacie `%NN` gdzie `N` znaki reprezentują wartości szesnastkowych.  
  
-   Znak ASCII 9 (znak tabulacji poziomej) nie jest zakodowana w adresie URL.  
  
-   Znak ASCII 127 jest zakodowane jako `%7F`.  
  
-   Wszystkie inne znaki nie są kodowane.  
  
    > [!NOTE]
    >  Chociaż ta metoda może służyć do wartości Unicode, jest ona zwykle używana dla wartości z zakresu ASCII.  
  
 Domyślna implementacja klasy <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> metoda zwraca wartość `headerValue` w `encodedHeaderValue` Jeśli `headerValue` jest `null` lub jest pustym ciągiem. Podobnie, domyślna implementacja zwraca wartość `headerName` w `encodedHeaderName` Jeśli `headerName` jest `null` lub jest pustym ciągiem.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do kodowania.</param>
        <param name="output">Składnik zapisywania tekstu do zakodowaną wartość do zapisania.</param>
        <summary>Koduje wartość przychodzącego w ciąg, który może być wstawiany do atrybutu HTML, który jest rozdzielana za pomocą pojedyncze lub podwójne znaki cudzysłowu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> Metoda koduje znaki przy użyciu standardowych jednostek HTML. Na przykład `<` (lewy nawias kątowy) jest zakodowane jako `&lt;` i `\` (ukośnik odwrotny) jest zakodowane jako `&#92;`.  
  
 Można bezpiecznie używać <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> w ramach jednego i podwójnym cudzysłowem atrybutów. Wartości muszą być ujmowane w cudzysłów.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlDecode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlDecode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlDecode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlDecode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Ciągu do odkodowania.</param>
        <param name="output">Składnik zapisywania tekstu do zapisania dekodowane wartości.</param>
        <summary>Dekoduje wartość z zakresu od ciąg kodowany w formacie HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli wymieniono sekwencje znaków, które mogą dekodować logiki dekodowania platformy ASP.NET.  
  
|Sekwencja znaków|Reguła|  
|------------------------|----------|  
|`&#NNN;` (dziesiętna kody znaków ASCII).|Odczytany jako określony znak ASCII. Sekwencja znaków rozpoczyna się od cyfry po znaku # i zakończy się w średniku.|  
|`&#xZZ;` (szesnastkowe kody znaków ASCII).|Odczytany jako określony znak ASCII. Formie zakodowanej określa znak, przy użyciu znaków szesnastkowych zamiast wartości dziesiętnej. Sekwencja znaków rozpoczyna się od cyfry po znaku # i zakończy się w średniku.|  
|Nazwane jednostek HTML.|Zdekodowany jako równoważne znak ASCII.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do kodowania.</param>
        <param name="output">Składnik zapisywania tekstu do zakodowaną wartość do zapisania.</param>
        <summary>Koduje ciąg na ciąg kodowany w formacie HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli wymieniono sekwencje znaków, które mogą dekodować logiki kodowania ASP.NET.  
  
|Znak|Zakodowanymi w formacie|  
|---------------|----------------|  
|`<` (lewy nawias kątowy)|`&lt;`|  
|`>` (prawy nawias kątowy)|`&gt;`|  
|`"` (podwójny cudzysłów)|`&quot;`|  
|`&` (handlowe "i")|`&amp;`|  
|`\` (ukośnik odwrotny)|`&#92;`|  
|Znaki ASCII od 160 do 255|`&#NNN;`, gdzie `NNN` jest kod znaku dziesiętnego trzycyfrowy|  
  
 Jeśli zastąpisz <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> metodę, zostanie wyświetlony danych wyjściowych, który również jest bezpieczny w podwójnym cudzysłowem lub jednego atrybutów HTML. To jest przystosowana do analizowania przez aparat Razor, w którym znaczników i kodu można łączyć, takich jak \<tag attr = "@value" >. Ponadto @ — operator nie jest oparte na kontekście podczas przetwarzania przez aparatu Razor, w związku z tym wywoływanych przez nią <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> zamiast <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="JavaScriptStringEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string JavaScriptStringEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string JavaScriptStringEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.JavaScriptStringEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function JavaScriptStringEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ JavaScriptStringEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member JavaScriptStringEncode : string -&gt; string&#xA;override this.JavaScriptStringEncode : string -&gt; string" Usage="httpEncoder.JavaScriptStringEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do kodowania.</param>
        <summary>Koduje ciąg.</summary>
        <returns>Ciąg zakodowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kodowanie adresu URL sprawia, że się upewnić, że wszystkie przeglądarki poprawnie przesłać tekstu w ciągów adresów URL. Znaki, takie jak znak zapytania (?), handlowe "i" (&), ukośnika (/) i miejsca do magazynowania może być obcięte lub uszkodzone przez niektóre przeglądarki. W związku z tym następujące znaki musi być zakodowany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member UrlEncode : byte[] * int * int -&gt; byte[]&#xA;override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="httpEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">Tablica bajtów do zakodowania.</param>
        <param name="offset">Pozycja w <paramref name="bytes" /> tablicy, od którego należy rozpocząć kodowanie.</param>
        <param name="count">Liczba elementów w <paramref name="bytes" /> tablicy do zakodowania.</param>
        <summary>Koduje tablicę znaków, które są niedozwolone w adresie URL na szesnastkowe równoważnik jednostki znaku.</summary>
        <returns>Tablica znaków zakodowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> Metoda jest wywoływana przez kilka metod kodowania adresu URL w <xref:System.Web.HttpUtility> klasy.  
  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> Metoda koduje adres URL, dowolny znak, który nie znajduje się w zestawie ASCII znaków, które jest uważany za bezpieczny adres URL. Miejsca do magazynowania są zakodowanymi w formacie ASCII "`+"` znaków. Bezpieczny adres URL zestawu znaków ASCII zawierają znaki ASCI (od A do Z i od a do z), cyfry (od 0 do 9) i niektóre znaki interpunkcyjne. Poniższa tabela zawiera listę znaków interpunkcyjnych, które są traktowane jako znaki ASCII bezpieczny adres URL.  
  
|Znak|Opis|  
|---------------|-----------------|  
|-|Łącznik|  
|\_|Podkreślenia|  
|.|Kropka|  
|!|Wykrzyknik|  
|*|Gwiazdka (star)|  
|(|Nawias otwierający|  
|)|Nawias zamykający|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> jest mniejsza od zera lub większa niż długość <paramref name="bytes" /> tablicy.  
  
—lub— 
 <paramref name="count" /> jest mniejsza od zera lub <paramref name="count" /> oraz <paramref name="offset" /> jest większa niż długość <paramref name="bytes" /> tablicy.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member UrlPathEncode : string -&gt; string&#xA;override this.UrlPathEncode : string -&gt; string" Usage="httpEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do kodowania.</param>
        <summary>Koduje podsekcji adresu URL.</summary>
        <returns>Ciąg kodowany w formacie adresu URL.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> Metoda jest wywoływana przez <xref:System.Web.HttpUtility.UrlPathEncode%2A> metody. <xref:System.Web.HttpUtility.UrlPathEncode%2A> Metoda wykonuje następujące czynności:  
  
-   Stosuje logikę kodowania <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> metodę, aby tylko część ścieżki adresu URL (który nie obejmuje ciągu zapytania). Metoda zakłada, że adres URL jest zakodowany jako ciąg UTF-8.  
  
-   Koduje bez spacji, aby tylko podzbiór najpierw 128 znaków ASCII jest używany w wynikowy ciąg zakodowany. Dowolne znaki Unicode wartości 128 i nowszym, lub 32 i mniej, są zakodowane w adresie URL.  
  
-   Miejsca do magazynowania są kodowane jako % 20.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>