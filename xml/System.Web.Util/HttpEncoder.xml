<Type Name="HttpEncoder" FullName="System.Web.Util.HttpEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="42cfce90164f71011a1fe670669dbf986f8d99d0" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69228612" /></Metadata><TypeSignature Language="C#" Value="public class HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HttpEncoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.HttpEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpEncoder" />
  <TypeSignature Language="F#" Value="type HttpEncoder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia logikę kodowania i dekodowania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa zawiera logikę kodowania i dekodowania, która jest używana przez metody w klasach <xref:System.Web.HttpUtility>takich <xref:System.Web.HttpServerUtility>jak, <xref:System.Net.HttpResponseHeader>, i.  
  
 Można dziedziczyć z <xref:System.Web.Util.HttpEncoder> klasy i zastąpić jej zachowanie, aby dostosować domyślne zachowanie kodowania i dekodowania ASP.NET. Następnie należy ustawić <xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A> właściwość klasy, <xref:System.Web.Configuration.HttpRuntimeSection> aby skonfigurować klasę niestandardową.  
  
 Klasa niestandardowa do kodowania i dekodowania, która <xref:System.Web.Util.HttpEncoder> pochodzi z, może zastąpić wbudowane zachowanie kodowania ASP.NET i dekodowania lub zmienić tylko wybrane aspekty.  
  
 Można skonfigurować niestandardowy typ kodowania dla programu ASP.NET, aby zastąpić lub uzupełnić następujące zachowanie kodowania:  
  
-   Kodowanie HTML  
  
-   Kodowanie atrybutu HTML  
  
-   Kodowanie adresu URL  
  
-   Kodowanie ścieżki adresu URL  
  
-   Kodowanie wartości nazwy i nagłówka HTTP  
  
 Domyślnie aplikacje ASP.NET są skonfigurowane tak, aby używały <xref:System.Web.Security.AntiXss.AntiXssEncoder> typu dla wszystkich kodowania danych wyjściowych.  
  
 Poniższy przykład z pliku Web. config na poziomie aplikacji pokazuje, <xref:System.Web.Security.AntiXss.AntiXssEncoder> jak typ jest ustawiony dla aplikacji ASP.NET:  
  
 `<httpRuntime requestValidationMode="4.5" encoderType="System.Web.Security.AntiXss.AntiXssEncoder, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>`  
  
 Ustawienie konfiguracji w przykładzie ustawia <xref:System.Web.Security.AntiXss.AntiXssEncoder> klasę, aby wykonywała wszystkie kodowanie danych wyjściowych w aplikacji. Aby uzyskać więcej informacji, zobacz <xref:System.Web.Security.AntiXss.AntiXssEncoder> Omówienie klasy.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Podczas tworzenia niestandardowej klasy kodera i przesłonięcia podstawowych metod klasy bazowej koder pochodny może zgłosić wyjątek z dowolnej z przesłoniętych metod. Jednak w następujących przypadkach zgłaszanie takiego wyjątku może prowadzić do nieoczekiwanego zachowania w ASP.NET:  
  
-Jeśli ASP.NET renderuje stronę błędu, która jest spowodowana przez nieobsługiwany wyjątek, który został zgłoszony z niestandardowego kodera, ASP.NET nie próbuje zakodować jego wyjścia błędu, wywołując do kodera niestandardowego. Pozwala to uniknąć cyklicznych warunków błędu.  
  
— Gdy ASP.NET wysyła nagłówki HTTP do usług IIS, ASP.NET nie ma aprowizacji dla nieobsłużonych wyjątków. W związku z tym zostanie wyrenderowana Standardowa strona błędu ASP.NET (Jeśli ustawienia konfiguracji umożliwiają wyświetlanie tej strony).</para></block>
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
    <altmember cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Util.HttpEncoder" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Current { System::Web::Util::HttpEncoder ^ get(); void set(System::Web::Util::HttpEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.HttpEncoder with get, set" Usage="System.Web.Util.HttpEncoder.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Web.Util.HttpEncoder" /> typ, który będzie używany w aplikacji.</summary>
        <value>Odwołanie do typu kodera/dekodera, który zostanie użyty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli typ pochodny <xref:System.Web.Util.HttpEncoder> jest określony w pliku konfiguracji <xref:System.Web.Util.HttpEncoder.Current%2A> , właściwość zwraca odwołanie do typu niestandardowego. Jeśli jednak żaden koder niestandardowy nie jest używany, właściwość zwraca odwołanie do domyślnego wystąpienia ASP.NET <xref:System.Web.Util.HttpEncoder> .  
  
 <xref:System.Web.Util.HttpEncoder.Current%2A> Właściwość nie jest bezpieczna wątkowo. Ta właściwość jest ustawiana tylko w `Application_Start` metodzie aplikacji, ponieważ `Application_Start` jest uruchamiana w pojedynczym wątku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wystąpienie kodera, które jest przypisane do tej właściwości, <see langword="null" />to.</exception>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Default { System::Web::Util::HttpEncoder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Web.Util.HttpEncoder" Usage="System.Web.Util.HttpEncoder.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera odwołanie do domyślnego kodera dla ASP.NET.</summary>
        <value>Odwołanie do domyślnego kodera.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typowym problemem z kodowaniem jest to, <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> że domyślne zachowanie ASP.NET konwertuje spacje na znak "+". W przeszłości znak "+" był Konwencją internetową w celu kodowania znaków spacji w adresie URL w celu uzyskania większej czytelności. Jednakże, zgodnie ze standardami, znak spacji powinien być zakodowany jako "% 20", a nie jako znak "+". ASP.NET umożliwia implementację algorytmu kodowania zgodnego ze standardami.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderNameValueEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HeaderNameValueEncode (string headerName, string headerValue, out string encodedHeaderName, out string encodedHeaderValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HeaderNameValueEncode(string headerName, string headerValue, [out] string&amp; encodedHeaderName, [out] string&amp; encodedHeaderValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HeaderNameValueEncode(System.String,System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HeaderNameValueEncode (headerName As String, headerValue As String, ByRef encodedHeaderName As String, ByRef encodedHeaderValue As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HeaderNameValueEncode(System::String ^ headerName, System::String ^ headerValue, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderName, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderValue);" />
      <MemberSignature Language="F#" Value="abstract member HeaderNameValueEncode : string * string *  *  -&gt; unit&#xA;override this.HeaderNameValueEncode : string * string *  *  -&gt; unit" Usage="httpEncoder.HeaderNameValueEncode (headerName, headerValue, encodedHeaderName, encodedHeaderValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="headerValue" Type="System.String" />
        <Parameter Name="encodedHeaderName" Type="System.String" RefType="out" />
        <Parameter Name="encodedHeaderValue" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="headerName">Nazwa nagłówka HTTP do zakodowania.</param>
        <param name="headerValue">Wartość nagłówka HTTP do zakodowania.</param>
        <param name="encodedHeaderName">Gdy ta metoda zwraca, zawiera zakodowaną nazwę, która ma być używana dla nagłówka HTTP. Ten parametr jest przekazywany niezainicjowany.</param>
        <param name="encodedHeaderValue">Gdy ta metoda zwraca, zawiera zakodowaną wartość używaną dla nagłówka HTTP. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Koduje nazwę nagłówka i wartość w postaci ciągu, który może być używany jako nagłówek HTTP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda pobiera ciągi wejściowe `headerName` z parametrów i `headerValue` koduje je. <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> Zakodowane wartości są zwracane jako parametry out.  
  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> Metoda używa następującej logiki do kodowania nazw i wartości nagłówka:  
  
-   Wszystkie znaki, których wartość Unicode jest mniejsza niż ASCII znak 32, z wyjątkiem ASCII znak 9, są kodowane w adresie URL `%NN` w formacie `N` , w którym znaki reprezentują wartości szesnastkowe.  
  
-   Znak ASCII 9 (znak tabulacji poziomej) nie jest zakodowany w adresie URL.  
  
-   Znak ASCII 127 jest zakodowany `%7F`jako.  
  
-   Wszystkie inne znaki nie są kodowane.  
  
    > [!NOTE]
    >  Chociaż ta metoda może być używana w przypadku wartości Unicode, zazwyczaj jest używana w przypadku wartości w zakresie ASCII.  
  
 Domyślna <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> implementacja metody zwraca `encodedHeaderValue` `headerValue` wartość w parametrze if `headerValue` is `null` lub jest pustym ciągiem. Podobnie implementacja domyślna zwraca `headerName` wartość w `encodedHeaderName` parametrze if `headerName` is `null` lub jest pustym ciągiem.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do kodowania.</param>
        <param name="output">Moduł zapisujący tekstu, do którego ma zostać zapisana zakodowana wartość.</param>
        <summary>Koduje wartość przychodzącą do ciągu, który można wstawić do atrybutu HTML, który jest rozdzielany przy użyciu pojedynczego lub podwójnego cudzysłowu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> Metoda koduje znaki przy użyciu standardowych jednostek html. Na przykład `<` (lewy nawias kątowy) jest zakodowany jako `&lt;` i `\` (ukośnik odwrotny) jest zakodowany `&#92;`jako.  
  
 W przypadku atrybutów z pojedynczymi cudzysłowami i podwójnymi cudzysłowami można bezpiecznie używać <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> . Wartości muszą być ujęte w cudzysłów.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlDecode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlDecode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlDecode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlDecode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do zdekodowania.</param>
        <param name="output">Moduł zapisujący tekstu, do którego ma zostać zapisana zdekodowana wartość.</param>
        <summary>Dekoduje wartość z ciągu zakodowanego w formacie HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli wymieniono sekwencje znaków, które logika dekodowania ASP.NET może zdekodować.  
  
|Sekwencja znaków|Reguła|  
|------------------------|----------|  
|`&#NNN;`(kody dziesiętne dla znaków ASCII).|Zdekodowane jako określony znak ASCII. Sekwencja znaków zaczyna się od pierwszego cyfry po znaku # i kończy się na średniku.|  
|`&#xZZ;`(kody szesnastkowe dla znaków ASCII).|Zdekodowane jako określony znak ASCII. Zakodowany formularz określa znak, używając znaków szesnastkowych zamiast wartości dziesiętnej. Sekwencja znaków zaczyna się od pierwszego cyfry po znaku # i kończy się na średniku.|  
|Nazwane jednostki HTML.|Zdekodowane jako odpowiednik znaku ASCII.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do kodowania.</param>
        <param name="output">Moduł zapisujący tekstu, do którego ma zostać zapisana zakodowana wartość.</param>
        <summary>Koduje ciąg w postaci ciągu zakodowanego w formacie HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono sekwencje znaków, które logika kodowania ASP.NET może zdekodować.  
  
|Znak|Zakodowane jako|  
|---------------|----------------|  
|`<`(lewy nawias kątowy)|`&lt;`|  
|`>`(prawy nawias kątowy)|`&gt;`|  
|`"`(podwójne cudzysłowy)|`&quot;`|  
|`&`znaku|`&amp;`|  
|`\`(ukośnik odwrotny) |`&#92;`|  
|Znaki ASCII od 160 do 255|`&#NNN;`, gdzie `NNN` to trzycyfrowy kod znaku dziesiętnego|  
  
 Jeśli zastąpisz <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> metodę, musisz utworzyć dane wyjściowe, które są również bezpieczne w ramach podwójnych lub pojedynczych atrybutów HTML. Uwzględnia to analizowanie przez aparat Razor, gdzie można łączyć znaczniki i kod, takie jak \<tag ATTR = "@value" >. Ponadto operator @ nie jest kontekstowy w przypadku przetworzenia przez aparat Razor, w związku z czym wywołuje <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>zamiast.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="JavaScriptStringEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string JavaScriptStringEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string JavaScriptStringEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.JavaScriptStringEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function JavaScriptStringEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ JavaScriptStringEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member JavaScriptStringEncode : string -&gt; string&#xA;override this.JavaScriptStringEncode : string -&gt; string" Usage="httpEncoder.JavaScriptStringEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do kodowania.</param>
        <summary>Koduje ciąg.</summary>
        <returns>Zakodowany ciąg.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kodowanie adresów URL gwarantuje, że wszystkie przeglądarki poprawnie przesyłają tekst w ciągach adresów URL. Znaki takie jak znak zapytania (?), handlowego "i" (&), ukośnik (/) i spacje mogą być obcinane lub uszkodzone w niektórych przeglądarkach. W związku z tym te znaki muszą być zakodowane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member UrlEncode : byte[] * int * int -&gt; byte[]&#xA;override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="httpEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">Tablica bajtów do zakodowania.</param>
        <param name="offset">Pozycja w <paramref name="bytes" /> tablicy, w której ma zostać rozpoczęte kodowanie.</param>
        <param name="count">Liczba elementów w <paramref name="bytes" /> tablicy do kodowania.</param>
        <summary>Koduje tablicę znaków, które nie są dozwolone w adresie URL w postaci znaku szesnastkowego.</summary>
        <returns>Tablica zakodowanych znaków.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest wywoływana przez kilka metod kodowania adresów URL <xref:System.Web.HttpUtility> w klasie. <xref:System.Web.Util.HttpEncoder.UrlEncode%2A>  
  
 Adres <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> URL metody — koduje dowolny znak, który nie należy do zestawu znaków ASCII, który jest traktowany jako bezpieczny dla adresu URL. Spacje są kodowane jako znak ASCII`+"` ". Znaki ASCII bezpieczne dla adresów URL zawierają znaki ASCII (od A do Z i od a do z), cyfry (od 0 do 9) i znaki interpunkcyjne. W poniższej tabeli znajduje się lista znaków interpunkcyjnych, które są uznawane za bezpieczne dla adresów URL.  
  
|Znak|Opis|  
|---------------|-----------------|  
|-|Doln|  
|\_|Podkreślenia|  
|.|Kropka (kropka)|  
|!|Wykrzyknik|  
|*|Gwiazdka (gwiazda)|  
|(|Otwierający nawias okrągły|  
|)|Nawias zamykający|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />jest mniejsza od zera lub większa niż długość <paramref name="bytes" /> tablicy.  
  
—lub— 
 <paramref name="count" />jest mniejsza od zera lub <paramref name="count" /> Plus <paramref name="offset" /> jest większa <paramref name="bytes" /> niż długość tablicy.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member UrlPathEncode : string -&gt; string&#xA;override this.UrlPathEncode : string -&gt; string" Usage="httpEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do kodowania.</param>
        <summary>Koduje podsekcję w adresie URL.</summary>
        <returns>Ciąg zakodowany w adresie URL.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest wywoływana <xref:System.Web.HttpUtility.UrlPathEncode%2A> przez metodę. <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> <xref:System.Web.HttpUtility.UrlPathEncode%2A> Metoda wykonuje następujące czynności:  
  
-   Stosuje logikę <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> kodowania metody tylko do części ścieżki adresu URL (która wyklucza ciąg zapytania). Metoda zakłada, że adres URL jest zakodowany jako ciąg UTF-8.  
  
-   Koduje niespacje, tak aby tylko podzbiór pierwszych 128 znaków ASCII jest używany w ciągu zakodowanym. Wszystkie znaki w formacie Unicode o wartości 128 i większej lub 32 i mniejszej są kodowane w adresie URL.  
  
-   Koduje spacje jako% 20.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
