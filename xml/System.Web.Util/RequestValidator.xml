<Type Name="RequestValidator" FullName="System.Web.Util.RequestValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e9af6ca1efee30c522e150ec0ff7b42684ff91ce" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36574998" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RequestValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RequestValidator" />
  <TypeSignature Language="F#" Value="type RequestValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje podstawowe metody weryfikacji żądań niestandardowych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie program ASP.NET nie można zweryfikować żądania aż kod wyraźnie zażąda wartość z żądania. Na przykład program ASP.NET nie można zweryfikować wartości ciągu zapytania do momentu kod uzyskuje dostęp do <xref:System.Web.HttpRequest.QueryString%2A> kolekcji. Domyślnie program ASP.NET także nie można zweryfikować niektórych typów danych żądania, takie jak wartości formularza, plików cookie, nazwy plików, które zostały przekazane za pomocą protokołu HTTP, a wartość <xref:System.Web.HttpRequest.RawUrl%2A> właściwości.  
  
 <xref:System.Web.Util.RequestValidator> Klasa jest klasą podstawową, które można zaimplementować w celu zapewnienia weryfikacji żądań niestandardowych. Dzięki wdrożeniu tej klasy, można określić po wystąpieniu sprawdzania poprawności i jakiego typu dane żądania w celu przeprowadzenia walidacji na.  
  
 Domyślnie program ASP.NET udostępnia kontroli skryptów między witrynami (XSS). Można jednak uzupełnienie lub Zastąp logikę weryfikacji żądania, dostępną w programie ASP.NET przez utworzenie niestandardowej implementacji XSS. Na przykład można napisać implementacji sprawdzania poprawności żądania niestandardowe, która szuka ataki oprócz sprawdzania atakom XSS.  
  
 Aby utworzyć niestandardowe żądanie weryfikacji, pisanie niestandardowej klasy, która jest pochodną <xref:System.Web.Util.RequestValidator> klasy podstawowej. Następnie skonfiguruj ASP.NET do użycia w pliku Web.config aplikacji na poziomie żądania niestandardowego modułu sprawdzania poprawności. Niestandardowej klasy można umieścić w folderze App_Code w bibliotece klas skompilowanych z folderu Bin lub w bibliotece klas skompilowany w pamięci GAC.  
  
> [!NOTE]
>  Można skonfigurować tylko jeden typ weryfikacji żądanie niestandardowe dla aplikacji. Nie jest możliwe skonfigurować typ sprawdzania poprawności innego żądania, dla poszczególnych ścieżek wirtualnych lub stron.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób tworzenia niestandardowych żądania modułu weryfikacji, umożliwiający określony ciąg do zastosowania w przypadku wartości ciągu zapytania.  
  
 [!code-csharp[System.Web.Util.RequestValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]
 [!code-vb[System.Web.Util.RequestValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  
  
 Poniższy przykład przedstawia sposób konfigurowania programu ASP.NET, aby użyć niestandardowego modułu weryfikacji w pliku Web.config aplikacji.  
  
```  
<system.web>  
  <httpRuntime requestValidationType="CustomRequestValidation" />  
</system.web>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidationSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RequestValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Util.RequestValidator" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator> Klasa ma konstruktora domyślnego. Po zainicjowaniu nowe wystąpienie klasy, metody wewnętrznej pobiera szczegóły niestandardowego sprawdzania poprawności z informacji o konfiguracji aplikacji. Szczegóły konfiguracji są zawarte w <xref:System.Web.Configuration.HttpRuntimeSection> sekcji. Aby uzyskać więcej informacji, zobacz [httpRuntime — Element (schemat ustawień programu ASP.NET)](http://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) i <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A> atrybutu.  
  
 Podczas inicjowania, jedno wystąpienie <xref:System.Web.Util.RequestValidator> utworzyć klasy, a odwołania do wystąpienia jest zachowywany w <xref:System.Web.Util.RequestValidator.Current%2A> właściwości. ASP.NET nie tworzy nowe wystąpienie modułu sprawdzania poprawności żądań na żądanie. W związku z tym implementacji niestandardowych <xref:System.Web.Util.RequestValidator> klasy musi być wątkowo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.RequestValidator Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.RequestValidator Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.RequestValidator.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As RequestValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::RequestValidator ^ Current { System::Web::Util::RequestValidator ^ get(); void set(System::Web::Util::RequestValidator ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.RequestValidator with get, set" Usage="System.Web.Util.RequestValidator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia odwołanie do bieżącego <see cref="T:System.Web.Util.RequestValidator" /> wystąpienia, który będzie używany w aplikacji.</summary>
        <value>Wystąpienie <see cref="T:System.Web.Util.RequestValidator" /> klasy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator.Current%2A> Właściwość przechowuje odwołanie do pojedynczego wystąpienia dozwolone <xref:System.Web.Util.RequestValidator> klasy. Jeśli wystąpienie nie istnieje, zostanie utworzony nowy. Jeśli wystąpienie już istnieje, zwracany jest bieżącego wystąpienia.  
  
 Podczas inicjowania, jedno wystąpienie <xref:System.Web.Util.RequestValidator> klasy jest tworzone, a odwołania do wystąpienia ma zostać udostępnione w <xref:System.Web.Util.RequestValidator.Current%2A> właściwości. ASP.NET nie tworzy nowe wystąpienie modułu sprawdzania poprawności żądań na żądanie. W związku z tym implementacji niestandardowych <xref:System.Web.Util.RequestValidator> klasy musi być wątkowo.  
  
> [!NOTE]
>  <xref:System.Web.Util.RequestValidator.Current%2A> Właściwość nie jest wątkowo, gdy właściwość jest ustawienie odwołanie do bieżącego <xref:System.Web.Util.RequestValidator> klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Ta właściwość jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsValidRequestString">
      <MemberSignature Language="C#" Value="public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeIsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InvokeIsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="member this.InvokeIsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.InvokeIsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">Kontekst żądania HTTP.</param>
        <param name="value">Dane żądania HTTP do sprawdzania poprawności.</param>
        <param name="requestValidationSource">Wyliczenie, które reprezentuje źródło danych sprawdzania poprawności żądania. Możliwe wartości wyliczenia są następujące:-   <see langword="QueryString" />  
  
-   <see langword="Form" />  
  
-   <see langword="Cookies" />  
  
-   <see langword="Files" />  
  
-   <see langword="Path" />  
  
-   <see langword="PathInfo" />  
  
-   <see langword="Headers" /></param>
        <param name="collectionKey">(Opcjonalnie) Klucz w kolekcji żądania element do zweryfikowania. Ten parametr jest używany, jeśli dane do sprawdzania poprawności są uzyskiwane z kolekcji. Jeśli dane do sprawdzania poprawności nie jest z kolekcji, ten parametr może być <see langword="null" />.</param>
        <param name="validationFailureIndex">Gdy metoda zwróci wartość, wskazuje punkt początkowy problemy lub nieprawidłowy tekst w kolekcji request liczony od zera. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Udostępnia metodę publiczną, która wywołuje chronionej <see cref="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" /> metody, aby sprawdzić poprawność danych żądania HTTP.</summary>
        <returns>
          <see langword="true" /> Jeśli ciąg do sprawdzania poprawności nie zawiera niekodowany znaków, które mogłyby zostać użyte w złośliwymi atakami skryptów; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A> Metoda zapewnia publiczny dostęp do chronionej <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metody. Dzięki temu można utworzyć klasy otoki niestandardowe dla <xref:System.Web.Util.RequestValidator> klasy i wywołanie <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metody bez konieczności dziedziczyć <xref:System.Web.Util.RequestValidator> klasy.  
  
 Informacje o weryfikacji żądań, zobacz <xref:System.Web.UnvalidatedRequestValues>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidRequestString">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool IsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool IsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="abstract member IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool&#xA;override this.IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.IsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">Kontekst bieżącego żądania.</param>
        <param name="value">Dane żądania HTTP do sprawdzania poprawności.</param>
        <param name="requestValidationSource">Wyliczenie, które reprezentuje źródło danych sprawdzania poprawności żądania. Możliwe wartości wyliczenia są następujące:- <see langword="QueryString" />
- <see langword="Form " />
- <see langword="Cookies" />
- <see langword="Files" />
- <see langword="RawUrl" />
- <see langword="Path" />
- <see langword="PathInfo" />
- <see langword="Headers" /></param>
        <param name="collectionKey">Klucz w kolekcji żądania element do zweryfikowania. Ten parametr jest opcjonalny. Ten parametr jest używany, jeśli dane do sprawdzania poprawności są uzyskiwane z kolekcji. Jeśli dane do sprawdzania poprawności nie jest z kolekcji, <c>collectionKey</c> może być <see langword="null" />.</param>
        <param name="validationFailureIndex">Gdy metoda zwróci wartość, wskazuje punkt początkowy problemy lub nieprawidłowy tekst w kolekcji request liczony od zera. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Weryfikuje ciąg, który zawiera dane żądania HTTP.</summary>
        <returns>
          <see langword="true" /> Jeśli ciąg do sprawdzenia poprawności jest nieprawidłowy; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Musisz zaimplementować tę metodę do wykonywania niestandardowego sprawdzania poprawności danych żądania. Podstawowe zachowanie <xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29> metody przypomina zachowanie ASP.NET implementuje wewnętrznie do sprawdzenia niebezpiecznych ciągów w weryfikacji skryptów między witrynami. Aby uzyskać więcej informacji, zobacz [jak: zapobieganie Cross-Site skryptów w programie ASP.NET](http://go.microsoft.com/fwlink/?LinkID=178708).  
  
 Jeśli walidacji niestandardowej logiki wykryje błąd, ta metoda powinna zwrócić `false` i podaj wartość w `validationFailureIndex` aby wskazać punkt początkowy tekst, który spowodował błąd. Wartość w `validationFailureIndex` musi wynosić 0 lub dodatnią liczbą całkowitą.  
  
 Logikę sprawdzenie poprawności żądania przebiega w następujący sposób:  
  
-   <xref:System.Web.HttpRequest> Klasa sprawdza usuwania znakiem pustym przychodzących danych.  
  
-   <xref:System.Web.HttpRequest> Klasa wywołuje albo <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> — metoda (Domyślna implementacja metody podstawowej) lub wywołuje pochodnymi wersjami metody.  
  
-   Jeśli <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metoda zwraca `false` wskazująca błąd sprawdzania poprawności, platformy ASP.NET konstruuje ciąg błędu (Jeśli to konieczne) i zgłasza <xref:System.Web.HttpRequestValidationException> wyjątku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>