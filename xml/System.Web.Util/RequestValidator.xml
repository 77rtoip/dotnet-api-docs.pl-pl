<Type Name="RequestValidator" FullName="System.Web.Util.RequestValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="24d84a8cc19596a3b1f3cac46a1a535307b1a16f" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52214368" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RequestValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RequestValidator" />
  <TypeSignature Language="F#" Value="type RequestValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje metody podstawowej weryfikacji żądań niestandardowych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie program ASP.NET nie można zweryfikować żądania aż kod wyraźnie zażąda wartość z żądania. Na przykład ASP.NET nie sprawdza poprawności wartości ciągu zapytania do momentu kod uzyskuje dostęp do <xref:System.Web.HttpRequest.QueryString%2A> kolekcji. Domyślnie program ASP.NET również nie można zweryfikować niektórych typów danych żądania, takie jak wartości formularza, plików cookie, nazw plików, które zostały przekazane za pomocą protokołu HTTP, a wartość <xref:System.Web.HttpRequest.RawUrl%2A> właściwości.  
  
 <xref:System.Web.Util.RequestValidator> Klasa jest klasą bazową można zaimplementować w celu zapewnienia weryfikacji żądań niestandardowych. Dzięki wdrożeniu tej klasy, należy określić, gdy sprawdzanie poprawności jest wykonywane i jakiego rodzaju dane żądania do wykonywania sprawdzania poprawności na.  
  
 Domyślnie program ASP.NET zapewnia kontrole skryptów między witrynami (XSS). Można jednak uzupełnić lub zastąpić logikę weryfikacji żądania, który znajduje się na platformie ASP.NET, tworząc niestandardową implementację XSS. Na przykład można napisać implementację sprawdzania poprawności niestandardowych żądanie, która skanuje w poszukiwaniu ataki przez wstrzyknięcie kodu SQL, oprócz sprawdzania, czy atakom XSS.  
  
 Aby Tworzenie niestandardowego żądania weryfikacji, należy napisać klasę niestandardową, która pochodzi od klasy <xref:System.Web.Util.RequestValidator> klasy bazowej. Następnie należy skonfigurować platformę ASP.NET w celu użycia modułu sprawdzania poprawności żądanie niestandardowe w pliku Web.config aplikacji. Klasa niestandardowa można umieścić w folderze App_Code w bibliotece klas skompilowane z folderu Bin lub biblioteki klas skompilowany w GAC.  
  
> [!NOTE]
>  Można skonfigurować tylko jeden typ weryfikacji żądania niestandardowych dla aplikacji. Nie jest możliwe do skonfigurowania typu sprawdzania poprawności innego żądania dla poszczególnych ścieżek wirtualnych lub stron.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć żądanie niestandardowe modułu weryfikacji, umożliwiającą tylko określonym ciągiem ma być używany dla wartości ciągu zapytania.  
  
 [!code-csharp[System.Web.Util.RequestValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]
 [!code-vb[System.Web.Util.RequestValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  
  
 Poniższy przykład przedstawia sposób konfigurowania programu ASP.NET, aby użyć niestandardowego modułu weryfikacji w pliku Web.config aplikacji.  
  
```  
<system.web>  
  <httpRuntime requestValidationType="CustomRequestValidation" />  
</system.web>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidationSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RequestValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Util.RequestValidator" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator> Klasa ma domyślnego konstruktora. Po zainicjowaniu nowe wystąpienie klasy, metody wewnętrznej pobiera szczegóły niestandardowego sprawdzania poprawności z informacji o konfiguracji aplikacji. Szczegóły konfiguracji są zawarte w <xref:System.Web.Configuration.HttpRuntimeSection> sekcji. Aby uzyskać więcej informacji, zobacz [httpRuntime — Element (ASP.NET Settings Schema)](https://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) i <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A> atrybutu.  
  
 Podczas inicjowania, pojedyncze wystąpienie <xref:System.Web.Util.RequestValidator> klasa jest tworzona i odwołania do wystąpienia jest zachowywany w <xref:System.Web.Util.RequestValidator.Current%2A> właściwości. Program ASP.NET nie tworzy nowe wystąpienie modułu sprawdzania poprawności żądań na żądanie. W związku z tym niestandardowych implementacji <xref:System.Web.Util.RequestValidator> klasa musi być metodą o bezpiecznych wątkach.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.RequestValidator Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.RequestValidator Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.RequestValidator.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As RequestValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::RequestValidator ^ Current { System::Web::Util::RequestValidator ^ get(); void set(System::Web::Util::RequestValidator ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.RequestValidator with get, set" Usage="System.Web.Util.RequestValidator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia odwołanie do bieżącego <see cref="T:System.Web.Util.RequestValidator" /> wystąpienie, które będą używane w aplikacji.</summary>
        <value>Wystąpienie <see cref="T:System.Web.Util.RequestValidator" /> klasy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator.Current%2A> Właściwość obsługuje odwołania do pojedynczego wystąpienia dozwolone <xref:System.Web.Util.RequestValidator> klasy. Jeśli wystąpienie nie istnieje, zostanie utworzony nowy. Jeśli wystąpienie już istnieje, zwracany jest bieżącego wystąpienia.  
  
 Podczas inicjowania, pojedyncze wystąpienie <xref:System.Web.Util.RequestValidator> klasa jest tworzona i odwołania do wystąpienia jest udostępniana w <xref:System.Web.Util.RequestValidator.Current%2A> właściwości. Program ASP.NET nie tworzy nowe wystąpienie modułu sprawdzania poprawności żądań na żądanie. W związku z tym niestandardowych implementacji <xref:System.Web.Util.RequestValidator> klasa musi być metodą o bezpiecznych wątkach.  
  
> [!NOTE]
>  <xref:System.Web.Util.RequestValidator.Current%2A> Właściwość nie jest metodą o bezpiecznych wątkach, gdy właściwość jest ustawienie referencję do bieżącego <xref:System.Web.Util.RequestValidator> klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Właściwość jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsValidRequestString">
      <MemberSignature Language="C#" Value="public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeIsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InvokeIsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="member this.InvokeIsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.InvokeIsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">Kontekst HTTP żądania.</param>
        <param name="value">Dane żądania HTTP do sprawdzania poprawności.</param>
        <param name="requestValidationSource">Wyliczenie, które reprezentuje źródło danych żądania, który jest sprawdzany. Możliwe wartości wyliczenia są następujące: 
-   <see langword="QueryString" />  
  
-   <see langword="Form" />  
  
-   <see langword="Cookies" />  
  
-   <see langword="Files" />  
  
-   <see langword="Path" />  
  
-   <see langword="PathInfo" />  
  
-   <see langword="Headers" /></param>
        <param name="collectionKey">(Opcjonalnie) Klucz w kolekcji żądania element do zweryfikowania. Ten parametr jest używany, jeśli dane do sprawdzania poprawności są uzyskiwane z kolekcji. Jeśli dane do sprawdzania poprawności nie jest z kolekcji, ten parametr może być <see langword="null" />.</param>
        <param name="validationFailureIndex">Po powrocie z tej metody oznacza liczony od zera punktu początkowego problematyczne lub nieprawidłowy tekst w kolekcji żądania. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Udostępnia metodę publiczną, która wywołuje chronionej <see cref="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" /> metody, aby sprawdzić dane żądania HTTP.</summary>
        <returns>
          <see langword="true" /> Jeśli ciąg do sprawdzania poprawności nie zawiera znaków niezaszyfrowana, które mogłyby zostać użyte w złośliwymi atakami skryptów; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A> Metoda bazuje na publiczny dostęp do chronionego <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metody. Dzięki temu można utworzyć klasę otoki niestandardowe dla <xref:System.Web.Util.RequestValidator> klasy i wywołania <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metody bez konieczności dziedziczyć <xref:System.Web.Util.RequestValidator> klasy.  
  
 Aby uzyskać informacji na temat weryfikacji żądań, zobacz <xref:System.Web.UnvalidatedRequestValues>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidRequestString">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool IsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool IsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="abstract member IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool&#xA;override this.IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.IsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">Kontekst bieżącego żądania.</param>
        <param name="value">Dane żądania HTTP do sprawdzania poprawności.</param>
        <param name="requestValidationSource">Wyliczenie, które reprezentuje źródło danych żądania, który jest sprawdzany. Możliwe wartości wyliczenia są następujące: 
- <see langword="QueryString" />
- <see langword="Form " />
- <see langword="Cookies" />
- <see langword="Files" />
- <see langword="RawUrl" />
- <see langword="Path" />
- <see langword="PathInfo" />
- <see langword="Headers" /></param>
        <param name="collectionKey">Klucz w kolekcji żądania element do zweryfikowania. Ten parametr jest opcjonalny. Ten parametr jest używany, jeśli dane do sprawdzania poprawności są uzyskiwane z kolekcji. Jeśli dane do sprawdzania poprawności nie pochodzi z kolekcji, <paramref name="collectionKey" /> może być <see langword="null" />.</param>
        <param name="validationFailureIndex">Po powrocie z tej metody oznacza liczony od zera punktu początkowego problematyczne lub nieprawidłowy tekst w kolekcji żądania. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Weryfikuje ciąg, który zawiera dane żądania HTTP.</summary>
        <returns>
          <see langword="true" /> Jeśli ciąg zostanie wykonane sprawdzanie poprawności jest ważne. w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz zaimplementować tę metodę w celu wykonywania niestandardowego sprawdzania poprawności danych żądania. Podstawowy zachowanie <xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29> metoda przypomina zachowanie implementujący wewnętrznie ASP.NET pod kątem niebezpiecznych parametrów podczas sprawdzania poprawności skryptów między witrynami. Aby uzyskać więcej informacji, zobacz [instrukcje: zapobieganie Cross-Site Scripting na platformie ASP.NET](https://go.microsoft.com/fwlink/?LinkID=178708).  
  
 Jeśli logikę niestandardowego sprawdzania poprawności wykryje błąd, ta metoda powinna zwracać `false` i podaj wartości w `validationFailureIndex` do wskazania punktu początkowego tekstu, które spowodowały błąd. Wartość w `validationFailureIndex` musi wynosić 0 lub dodatnia liczba całkowita.  
  
 Logikę sprawdzenie poprawności żądania przebiega w następujący sposób:  
  
-   <xref:System.Web.HttpRequest> Klasy sprawdza znak null usuwania danych przychodzących.  
  
-   <xref:System.Web.HttpRequest> Klasa wywołuje albo <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> — metoda (Domyślna implementacja metody podstawowej) oraz wywołujących pochodnej wersji metody.  
  
-   Jeśli <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metoda zwraca `false` aby wskazać błąd sprawdzania poprawności, platformy ASP.NET konstruuje ciąg błędu (jeśli jest to konieczne) i zgłasza <xref:System.Web.HttpRequestValidationException> wyjątku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>