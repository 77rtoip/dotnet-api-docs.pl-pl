<Type Name="RequestValidator" FullName="System.Web.Util.RequestValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f83d689503a8ca1d5f9c1f017744ebccdd6a3f2" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69386357" /></Metadata><TypeSignature Language="C#" Value="public class RequestValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RequestValidator" />
  <TypeSignature Language="F#" Value="type RequestValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje podstawowe metody weryfikacji żądań niestandardowych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie ASP.NET nie weryfikuje żądań, dopóki kod jawnie zażąda wartości z żądania. Na przykład ASP.NET nie weryfikuje wartości ciągu zapytania do momentu, aż kod uzyskuje <xref:System.Web.HttpRequest.QueryString%2A> dostęp do kolekcji. Domyślnie ASP.NET również nie sprawdza poprawności niektórych typów danych żądania, takich jak wartości formularza, pliki cookie, nazwy plików, które zostały przekazane przy użyciu protokołu HTTP, i wartość <xref:System.Web.HttpRequest.RawUrl%2A> właściwości.  
  
 <xref:System.Web.Util.RequestValidator> Klasa jest klasą bazową, którą można zaimplementować w celu zapewnienia niestandardowego sprawdzania poprawności żądania. Implementując tę klasę, można określić, kiedy odbywa się walidacja i jakiego typu dane żądania mają być wykonywane walidacji.  
  
 Domyślnie ASP.NET zapewnia kontrole skryptów między lokacjami (XSS). Można jednak uzupełnić lub zastąpić logikę sprawdzania poprawności żądania, która jest dostępna w ASP.NET, tworząc niestandardową implementację XSS. Na przykład można napisać implementację niestandardowego żądania walidacji, która skanuje pod kątem ataków iniekcji SQL oprócz sprawdzania ataków XSS.  
  
 Aby utworzyć niestandardową weryfikację żądań, należy napisać klasę niestandardową <xref:System.Web.Util.RequestValidator> , która dziedziczy z klasy bazowej. Następnie skonfigurujesz ASP.NET do korzystania z niestandardowego modułu weryfikacji żądań w pliku Web. config na poziomie aplikacji. Możesz umieścić klasę niestandardową w folderze App_Code, w skompilowanej bibliotece klas w folderze bin lub w skompilowanej bibliotece klas w pamięci podręcznej GAC.  
  
> [!NOTE]
>  Dla aplikacji można skonfigurować tylko jeden typ walidacji żądania niestandardowego. Nie można skonfigurować innego typu walidacji żądania dla poszczególnych ścieżek wirtualnych lub stron.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć niestandardowy moduł sprawdzania poprawności żądań, który umożliwia użycie tylko określonego ciągu na potrzeby wartości ciągu zapytania.  
  
 [!code-csharp[System.Web.Util.RequestValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]
 [!code-vb[System.Web.Util.RequestValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  
  
 Poniższy przykład pokazuje, jak skonfigurować ASP.NET do używania niestandardowego modułu sprawdzania poprawności w pliku Web. config aplikacji.  
  
```  
<system.web>  
  <httpRuntime requestValidationType="CustomRequestValidation" />  
</system.web>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidationSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RequestValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Util.RequestValidator" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator> Klasa ma Konstruktor bez parametrów. Gdy jest inicjowane nowe wystąpienie klasy, Metoda wewnętrzna pobiera szczegóły niestandardowego sprawdzania poprawności z informacji o konfiguracji aplikacji. Szczegóły konfiguracji znajdują się w <xref:System.Web.Configuration.HttpRuntimeSection> sekcji. Aby uzyskać więcej informacji, zobacz [element httpRuntime (Schemat ustawień ASP.NET)](https://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) i <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A> atrybut.  
  
 Podczas inicjowania zostanie utworzone pojedyncze wystąpienie <xref:System.Web.Util.RequestValidator> klasy, a odwołanie do tego wystąpienia jest przechowywane <xref:System.Web.Util.RequestValidator.Current%2A> we właściwości. ASP.NET nie tworzy nowego wystąpienia modułu sprawdzania poprawności żądań dla żądania. W związku z tym niestandardowe implementacje <xref:System.Web.Util.RequestValidator> klasy muszą być bezpieczne dla wątków.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.RequestValidator Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.RequestValidator Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.RequestValidator.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As RequestValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::RequestValidator ^ Current { System::Web::Util::RequestValidator ^ get(); void set(System::Web::Util::RequestValidator ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.RequestValidator with get, set" Usage="System.Web.Util.RequestValidator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia odwołanie do bieżącego <see cref="T:System.Web.Util.RequestValidator" /> wystąpienia, które będzie używane w aplikacji.</summary>
        <value>Wystąpienie <see cref="T:System.Web.Util.RequestValidator" /> klasy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość zachowuje odwołanie do pojedynczego dozwolonego wystąpienia <xref:System.Web.Util.RequestValidator> klasy. <xref:System.Web.Util.RequestValidator.Current%2A> Jeśli żadne wystąpienie nie istnieje, zostanie utworzony nowy. Jeśli wystąpienie już istnieje, zwracane jest bieżące wystąpienie.  
  
 Podczas inicjowania jest tworzone pojedyncze wystąpienie <xref:System.Web.Util.RequestValidator> klasy, a odwołanie do tego wystąpienia jest udostępniane <xref:System.Web.Util.RequestValidator.Current%2A> we właściwości. ASP.NET nie tworzy nowego wystąpienia modułu sprawdzania poprawności żądań dla żądania. W związku z tym niestandardowe implementacje <xref:System.Web.Util.RequestValidator> klasy muszą być bezpieczne dla wątków.  
  
> [!NOTE]
>  Właściwość nie jest bezpieczna wątkowo, podczas gdy Właściwość ustawia odwołanie do bieżącej <xref:System.Web.Util.RequestValidator> klasy. <xref:System.Web.Util.RequestValidator.Current%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Właściwość jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsValidRequestString">
      <MemberSignature Language="C#" Value="public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeIsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InvokeIsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="member this.InvokeIsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.InvokeIsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="collectionKey" Type="System.String" Index="3" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="validationFailureIndex" Type="System.Int32" RefType="out" Index="4" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="context">Kontekst HTTP żądania.</param>
        <param name="value">Dane żądania HTTP do zweryfikowania.</param>
        <param name="requestValidationSource">Wyliczenie, które reprezentuje źródło danych żądania, które jest sprawdzane. Dostępne są następujące wartości wyliczania: 
-   <see langword="QueryString" />  
  
-   <see langword="Form" />  
  
-   <see langword="Cookies" />  
  
-   <see langword="Files" />  
  
-   <see langword="Path" />  
  
-   <see langword="PathInfo" />  
  
-   <see langword="Headers" /></param>
        <param name="collectionKey">Obowiązkowe Klucz w kolekcji Request elementu do zweryfikowania. Ten parametr jest używany, jeśli dane do walidacji są uzyskiwane z kolekcji. Jeśli dane do walidacji nie pochodzą z kolekcji, ten parametr może być <see langword="null" />.</param>
        <param name="validationFailureIndex">Gdy ta metoda zwraca, wskazuje punkt początkowy o wartości zero problematyczny lub nieprawidłowy tekst w kolekcji żądań. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Udostępnia metodę publiczną, która wywołuje metodę <see cref="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" /> chronioną w celu sprawdzania poprawności danych żądania HTTP.</summary>
        <returns><see langword="true" />Jeśli ciąg do walidacji nie zawiera niezakodowanych znaków, których można użyć w złośliwym ataku skryptu; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda zapewnia publiczny dostęp do chronionej <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metody. <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A> Pozwala to utworzyć niestandardową klasę otoki dla <xref:System.Web.Util.RequestValidator> klasy i <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> wywołać metodę bez <xref:System.Web.Util.RequestValidator> konieczności dziedziczenia z klasy.  
  
 Informacje o weryfikacji żądań można znaleźć w <xref:System.Web.UnvalidatedRequestValues>temacie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidRequestString">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool IsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool IsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="abstract member IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool&#xA;override this.IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.IsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">Kontekst bieżącego żądania.</param>
        <param name="value">Dane żądania HTTP do zweryfikowania.</param>
        <param name="requestValidationSource">Wyliczenie, które reprezentuje źródło danych żądania, które jest sprawdzane. Dostępne są następujące wartości wyliczania: 
- <see langword="QueryString" />
- <see langword="Form " />
- <see langword="Cookies" />
- <see langword="Files" />
- <see langword="RawUrl" />
- <see langword="Path" />
- <see langword="PathInfo" />
- <see langword="Headers" /></param>
        <param name="collectionKey">Klucz w kolekcji Request elementu do zweryfikowania. Ten parametr jest opcjonalny. Ten parametr jest używany, jeśli dane do walidacji są uzyskiwane z kolekcji. Jeśli dane do zweryfikowania nie pochodzą z kolekcji, <paramref name="collectionKey" /> może być. <see langword="null" /></param>
        <param name="validationFailureIndex">Gdy ta metoda zwraca, wskazuje punkt początkowy o wartości zero problematyczny lub nieprawidłowy tekst w kolekcji żądań. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Sprawdza poprawność ciągu zawierającego dane żądania HTTP.</summary>
        <returns><see langword="true" />Jeśli ciąg, który ma być sprawdzony, jest prawidłowy; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementowanie tej metody w celu przeprowadzenia niestandardowej walidacji danych żądania. Podstawowe zachowanie <xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29> metody przypomina zachowanie, które ASP.NET implementuje wewnętrznie w celu sprawdzenia, czy istnieją niebezpieczne ciągi w weryfikacji skryptów między lokacjami. Aby uzyskać więcej informacji, [zobacz How to: Zapobiegaj skryptom między lokacjami](https://go.microsoft.com/fwlink/?LinkID=178708)w ASP.NET.  
  
 Jeśli logika walidacji niestandardowej wykryje błąd, ta metoda `false` powinna zwrócić i podać wartość `validationFailureIndex` w, aby wskazać punkt początkowy tekstu, który spowodował błąd. Wartość w `validationFailureIndex` musi być równa 0 lub dodatnia liczba całkowita.  
  
 Logika w sprawdzaniu poprawności żądania jest wykonywana w następujący sposób:  
  
-   <xref:System.Web.HttpRequest> Klasa wykonuje kontrolę usuwania znaków null w danych przychodzących.  
  
-   <xref:System.Web.HttpRequest> Klasa wywołuje<xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodę (domyślną implementację metody bazowej) lub wywołuje pochodną wersję metody.  
  
-   Jeśli <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> Metoda zwraca `false` błąd sprawdzania poprawności, ASP.NET konstruuje ciąg błędu (w razie <xref:System.Web.HttpRequestValidationException> potrzeby) i zgłosi wyjątek.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
