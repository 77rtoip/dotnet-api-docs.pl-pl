<Type Name="Utf8Formatter" FullName="System.Buffers.Text.Utf8Formatter">
  <TypeSignature Language="C#" Value="public static class Utf8Formatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Utf8Formatter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.Text.Utf8Formatter" />
  <TypeSignature Language="VB.NET" Value="Public Class Utf8Formatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8Formatter abstract sealed" />
  <TypeSignature Language="F#" Value="type Utf8Formatter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera statyczny mthods do formatowania popularnych typów danych jako ciągi Utf8.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public static bool TryFormat (bool value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFormat(bool value, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Buffers.StandardFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Boolean,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFormat (value As Boolean, destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional format As StandardFormat = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFormat : bool * Span&lt;byte&gt; *  * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.Text.Utf8Formatter.TryFormat (value, destination, bytesWritten, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do sformatowania.</param>
        <param name="destination">Bufor do zapisu wartości formacie UTF8 do.</param>
        <param name="bytesWritten">Gdy metoda zwróci wartość, zawiera długość tekstu sformatowanego w bajtach.</param>
        <param name="format">Standardowy format do użycia.</param>
        <summary>Formatuje <see cref="T:System.Boolean" /> jako ciągu UTF8.</summary>
        <returns><see langword="true" /> w przypadku powodzenia operacji formatowania <see langword="false" /> Jeśli <paramref name="buffer" /> jest za mały.</returns>
        <remarks>
          <format type="text/markdown">
        

Obsługiwane formaty:

|Ciąg formatu|Przykładowy ciąg wynikowy|
|--|--|
|G (ustawienie domyślne)|PRAWDA/FAŁSZ|
|l|PRAWDA/FAŁSZ|

Jeśli metoda nie powiedzie się, iteracyjne zwiększyć rozmiar buforu i ponów próbę, aż do skutku.

        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public static bool TryFormat (byte value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFormat(unsigned int8 value, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Buffers.StandardFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Byte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFormat (value As Byte, destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional format As StandardFormat = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFormat : byte * Span&lt;byte&gt; *  * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.Text.Utf8Formatter.TryFormat (value, destination, bytesWritten, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do sformatowania.</param>
        <param name="destination">Bufor do zapisu wartości formacie UTF8 do.</param>
        <param name="bytesWritten">Gdy metoda zwróci wartość, zawiera długość tekstu sformatowanego w bajtach.</param>
        <param name="format">Standardowy format do użycia.</param>
        <summary>Formatuje <see cref="T:System.Byte" /> jako ciągu UTF8.</summary>
        <returns><see langword="true" /> w przypadku powodzenia operacji formatowania <see langword="false" /> Jeśli <paramref name="buffer" /> jest za mały.</returns>
        <remarks>
          <format type="text/markdown">
        

Obsługiwane formaty:

|Ciąg formatu|Przykładowy ciąg wynikowy|
|--|--|
|G/g (ustawienie domyślne)| |
|D/d|122|
|N/n|122|       
|X/x|7a|

Jeśli metoda nie powiedzie się, iteracyjne zwiększyć rozmiar buforu i ponów próbę, aż do skutku.

        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public static bool TryFormat (DateTime value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFormat(valuetype System.DateTime value, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Buffers.StandardFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTime,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFormat (value As DateTime, destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional format As StandardFormat = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFormat : DateTime * Span&lt;byte&gt; *  * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.Text.Utf8Formatter.TryFormat (value, destination, bytesWritten, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do sformatowania.</param>
        <param name="destination">Bufor do zapisu wartości formacie UTF8 do.</param>
        <param name="bytesWritten">Gdy metoda zwróci wartość, zawiera długość tekstu sformatowanego w bajtach.</param>
        <param name="format">Standardowy format do użycia.</param>
        <summary>Formatuje <see cref="T:System.DateTime" /> jako ciągu UTF8.</summary>
        <returns><see langword="true" /> w przypadku powodzenia operacji formatowania <see langword="false" /> Jeśli <paramref name="buffer" /> jest za mały.</returns>
        <remarks>
          <format type="text/markdown">
        
            
Obsługiwane formaty:

|Ciąg formatu|Przykładowy ciąg wynikowy|Komentarze|
|--|--|--|
|G (ustawienie domyślne)|05/25/2017 10:30:15| |
|R|Wt 03 stycznia 2017 r. 08:08:05 GMT|(RFC 1123)|
|l|Wt 03 stycznia 2017 r. 08:08:05 gmt|(Małe RFC 1123)|
|O|2017-06-12T05:30:45.7680000-07:00|(Wysyłanych)|

Jeśli metoda nie powiedzie się, iteracyjne zwiększyć rozmiar buforu i ponów próbę, aż do skutku.

        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public static bool TryFormat (DateTimeOffset value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFormat(valuetype System.DateTimeOffset value, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Buffers.StandardFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTimeOffset,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFormat (value As DateTimeOffset, destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional format As StandardFormat = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFormat : DateTimeOffset * Span&lt;byte&gt; *  * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.Text.Utf8Formatter.TryFormat (value, destination, bytesWritten, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do sformatowania.</param>
        <param name="destination">Bufor do zapisu wartości formacie UTF8 do.</param>
        <param name="bytesWritten">Gdy metoda zwróci wartość, zawiera długość tekstu sformatowanego w bajtach.</param>
        <param name="format">Standardowy format do użycia.</param>
        <summary>Formatuje <see cref="T:System.DateTimeOffset" /> jako ciągu UTF8.</summary>
        <returns><see langword="true" /> w przypadku powodzenia operacji formatowania <see langword="false" /> Jeśli <paramref name="buffer" /> jest za mały.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public static bool TryFormat (decimal value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFormat(valuetype System.Decimal value, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Buffers.StandardFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Decimal,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFormat (value As Decimal, destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional format As StandardFormat = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFormat : decimal * Span&lt;byte&gt; *  * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.Text.Utf8Formatter.TryFormat (value, destination, bytesWritten, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do sformatowania.</param>
        <param name="destination">Bufor do zapisu wartości formacie UTF8 do.</param>
        <param name="bytesWritten">Gdy metoda zwróci wartość, zawiera długość tekstu sformatowanego w bajtach.</param>
        <param name="format">Standardowy format do użycia.</param>
        <summary>Formatuje <see cref="T:System.Decimal" /> jako ciągu UTF8.</summary>
        <returns><see langword="true" /> w przypadku powodzenia operacji formatowania <see langword="false" /> Jeśli <paramref name="buffer" /> jest za mały.</returns>
        <remarks>
          <format type="text/markdown">
        
            
Obsługiwane formaty:

|Ciąg formatu|Przykładowy ciąg wynikowy|Komentarze|
|--|--|--|
|G/g (ustawienie domyślne)| |  
|F/f|12.45|Stały punktu|
|E/e|1.245000e1|Wykładnicza|

Jeśli metoda nie powiedzie się, iteracyjne zwiększyć rozmiar buforu i ponów próbę, aż do skutku.

        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public static bool TryFormat (double value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFormat(float64 value, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Buffers.StandardFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Double,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFormat (value As Double, destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional format As StandardFormat = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFormat : double * Span&lt;byte&gt; *  * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.Text.Utf8Formatter.TryFormat (value, destination, bytesWritten, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do sformatowania.</param>
        <param name="destination">Bufor do zapisu wartości formacie UTF8 do.</param>
        <param name="bytesWritten">Gdy metoda zwróci wartość, zawiera długość tekstu sformatowanego w bajtach.</param>
        <param name="format">Standardowy format do użycia.</param>
        <summary>Formatuje <see cref="T:System.Double" /> jako ciągu UTF8.</summary>
        <returns><see langword="true" /> w przypadku powodzenia operacji formatowania <see langword="false" /> Jeśli <paramref name="buffer" /> jest za mały.</returns>
        <remarks>
          <format type="text/markdown">
        
            
Obsługiwane formaty:

|Ciąg formatu|Przykładowy ciąg wynikowy|Komentarze|
|--|--|--|
|G/g (ustawienie domyślne)| |  
|F/f|12.45|Stały punktu|
|E/e|1.245000e1|Wykładnicza|

Jeśli metoda nie powiedzie się, iteracyjne zwiększyć rozmiar buforu i ponów próbę, aż do skutku.
 
        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public static bool TryFormat (Guid value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFormat(valuetype System.Guid value, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Buffers.StandardFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Guid,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFormat (value As Guid, destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional format As StandardFormat = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFormat : Guid * Span&lt;byte&gt; *  * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.Text.Utf8Formatter.TryFormat (value, destination, bytesWritten, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do sformatowania.</param>
        <param name="destination">Bufor do zapisu wartości formacie UTF8 do.</param>
        <param name="bytesWritten">Gdy metoda zwróci wartość, zawiera długość tekstu sformatowanego w bajtach.</param>
        <param name="format">Standardowy format do użycia.</param>
        <summary>Formatuje <see cref="T:System.Guid" /> jako ciągu UTF8.</summary>
        <returns><see langword="true" /> w przypadku powodzenia operacji formatowania <see langword="false" /> Jeśli <paramref name="buffer" /> jest za mały.</returns>
        <remarks>
          <format type="text/markdown">
        
            
Obsługiwane formaty:

|Ciąg formatu|Ciąg wynikowy|
|--|--|
|D (ustawienie domyślne)|nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn|
|B|{nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}|
|P|(nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn)|
|N|nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn|

Jeśli metoda nie powiedzie się, iteracyjne zwiększyć rozmiar buforu i ponów próbę, aż do skutku.
               
        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public static bool TryFormat (short value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFormat(int16 value, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Buffers.StandardFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFormat (value As Short, destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional format As StandardFormat = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFormat : int16 * Span&lt;byte&gt; *  * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.Text.Utf8Formatter.TryFormat (value, destination, bytesWritten, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do sformatowania.</param>
        <param name="destination">Bufor do zapisu wartości formacie UTF8 do.</param>
        <param name="bytesWritten">Gdy metoda zwróci wartość, zawiera długość tekstu sformatowanego w bajtach.</param>
        <param name="format">Standardowy format do użycia.</param>
        <summary>Formatuje <see cref="T:System.Int16" /> jako ciągu UTF8.</summary>
        <returns><see langword="true" /> w przypadku powodzenia operacji formatowania <see langword="false" /> Jeśli <paramref name="buffer" /> jest za mały.</returns>
        <remarks>
          <format type="text/markdown">
        
            
Obsługiwane formaty:

|Ciąg formatu|Przykładowy ciąg wynikowy|
|--|--|
|G/g (ustawienie domyślne)| |
|D/d|32767|
|N/n|32,767|       
|X/x|7fff|

Jeśli metoda nie powiedzie się, iteracyjne zwiększyć rozmiar buforu i ponów próbę, aż do skutku.
 
        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public static bool TryFormat (int value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFormat(int32 value, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Buffers.StandardFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFormat (value As Integer, destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional format As StandardFormat = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFormat : int * Span&lt;byte&gt; *  * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.Text.Utf8Formatter.TryFormat (value, destination, bytesWritten, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do sformatowania.</param>
        <param name="destination">Bufor do zapisu wartości formacie UTF8 do.</param>
        <param name="bytesWritten">Gdy metoda zwróci wartość, zawiera długość tekstu sformatowanego w bajtach.</param>
        <param name="format">Standardowy format do użycia.</param>
        <summary>Formatuje <see cref="T:System.Int32" /> jako ciągu UTF8.</summary>
        <returns><see langword="true" /> w przypadku powodzenia operacji formatowania <see langword="false" /> Jeśli <paramref name="buffer" /> jest za mały.</returns>
        <remarks>
          <format type="text/markdown">
        
            
Obsługiwane formaty:

|Ciąg formatu|Przykładowy ciąg wynikowy|
|--|--|
|G/g (ustawienie domyślne)| |
|D/d|32767|
|N/n|32,767|       
|X/x|7fff|
              
Jeśli metoda nie powiedzie się, iteracyjne zwiększyć rozmiar buforu i ponów próbę, aż do skutku.

        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public static bool TryFormat (long value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFormat(int64 value, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Buffers.StandardFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFormat (value As Long, destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional format As StandardFormat = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFormat : int64 * Span&lt;byte&gt; *  * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.Text.Utf8Formatter.TryFormat (value, destination, bytesWritten, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do sformatowania.</param>
        <param name="destination">Bufor do zapisu wartości formacie UTF8 do.</param>
        <param name="bytesWritten">Gdy metoda zwróci wartość, zawiera długość tekstu sformatowanego w bajtach.</param>
        <param name="format">Standardowy format do użycia.</param>
        <summary>Formatuje <see cref="T:System.Int64" /> jako ciągu UTF8.</summary>
        <returns><see langword="true" /> w przypadku powodzenia operacji formatowania <see langword="false" /> Jeśli <paramref name="buffer" /> jest za mały.</returns>
        <remarks>
          <format type="text/markdown">
        
            
Obsługiwane formaty:

|Ciąg formatu|Przykładowy ciąg wynikowy|
|--|--|
|G/g (ustawienie domyślne)| |
|D/d|32767|
|N/n|32,767|       
|X/x|7fff|
              
Jeśli metoda nie powiedzie się, iteracyjne zwiększyć rozmiar buforu i ponów próbę, aż do skutku.
 
        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public static bool TryFormat (sbyte value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFormat(int8 value, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Buffers.StandardFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.SByte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFormat (value As SByte, destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional format As StandardFormat = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFormat : sbyte * Span&lt;byte&gt; *  * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.Text.Utf8Formatter.TryFormat (value, destination, bytesWritten, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do sformatowania.</param>
        <param name="destination">Bufor do zapisu wartości formacie UTF8 do.</param>
        <param name="bytesWritten">Gdy metoda zwróci wartość, zawiera długość tekstu sformatowanego w bajtach.</param>
        <param name="format">Standardowy format do użycia.</param>
        <summary>Formatuje <see cref="T:System.SByte" /> jako ciągu UTF8.</summary>
        <returns><see langword="true" /> w przypadku powodzenia operacji formatowania <see langword="false" /> Jeśli <paramref name="buffer" /> jest za mały.</returns>
        <remarks>
          <format type="text/markdown">
        
            
Obsługiwane formaty:

|Ciąg formatu|Przykładowy ciąg wynikowy|
|--|--|
|G/g (ustawienie domyślne)| |
|D/d|122|
|N/n|122|       
|X/x|7a|

Jeśli metoda nie powiedzie się, iteracyjne zwiększyć rozmiar buforu i ponów próbę, aż do skutku.
               
        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public static bool TryFormat (float value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFormat(float32 value, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Buffers.StandardFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Single,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFormat (value As Single, destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional format As StandardFormat = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFormat : single * Span&lt;byte&gt; *  * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.Text.Utf8Formatter.TryFormat (value, destination, bytesWritten, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do sformatowania.</param>
        <param name="destination">Bufor do zapisu wartości formacie UTF8 do.</param>
        <param name="bytesWritten">Gdy metoda zwróci wartość, zawiera długość tekstu sformatowanego w bajtach.</param>
        <param name="format">Standardowy format do użycia.</param>
        <summary>Formatuje <see cref="T:System.Single" /> jako ciągu UTF8.</summary>
        <returns><see langword="true" /> w przypadku powodzenia operacji formatowania <see langword="false" /> Jeśli <paramref name="buffer" /> jest za mały.</returns>
        <remarks>
          <format type="text/markdown">
        
            
Obsługiwane formaty:

|Ciąg formatu|Przykładowy ciąg wynikowy|Komentarze|
|--|--|--|
|G/g (ustawienie domyślne)| |  
|F/f|12.45|Stały punktu|
|E/e|1.245000e1|Wykładnicza|

Jeśli metoda nie powiedzie się, iteracyjne zwiększyć rozmiar buforu i ponów próbę, aż do skutku.
 
        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public static bool TryFormat (TimeSpan value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFormat(valuetype System.TimeSpan value, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Buffers.StandardFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.TimeSpan,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFormat (value As TimeSpan, destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional format As StandardFormat = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFormat : TimeSpan * Span&lt;byte&gt; *  * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.Text.Utf8Formatter.TryFormat (value, destination, bytesWritten, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do sformatowania.</param>
        <param name="destination">Bufor do zapisu wartości formacie UTF8 do.</param>
        <param name="bytesWritten">Gdy metoda zwróci wartość, zawiera długość tekstu sformatowanego w bajtach.</param>
        <param name="format">Standardowy format do użycia.</param>
        <summary>Formatuje <see cref="T:System.TimeSpan" /> jako ciągu UTF8.</summary>
        <returns><see langword="true" /> w przypadku powodzenia operacji formatowania <see langword="false" /> Jeśli <paramref name="buffer" /> jest za mały.</returns>
        <remarks>
          <format type="text/markdown">
        
            
Obsługiwane formaty:

|Ciąg formatu|Ciąg wynikowy|Komentarze|
|--|--|--|
|t-c-T (ustawienie domyślne)|[-] [d]. : mm: ss [.fffffff]|(format stałe)|
|G|[-]d:hh:mm:ss.fffffff||(Ogólne long)|
|g|[-] [d:] [h] ss [.f [f [f [f [f [f [f]]]|(skrócona ogólne)|

Jeśli metoda nie powiedzie się, iteracyjne zwiększyć rozmiar buforu i ponów próbę, aż do skutku.

        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public static bool TryFormat (ushort value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFormat(unsigned int16 value, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Buffers.StandardFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFormat (value As UShort, destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional format As StandardFormat = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFormat : uint16 * Span&lt;byte&gt; *  * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.Text.Utf8Formatter.TryFormat (value, destination, bytesWritten, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do sformatowania.</param>
        <param name="destination">Bufor do zapisu wartości formacie UTF8 do.</param>
        <param name="bytesWritten">Gdy metoda zwróci wartość, zawiera długość tekstu sformatowanego w bajtach.</param>
        <param name="format">Standardowy format do użycia.</param>
        <summary>Formatuje <see cref="T:System.UInt16" /> jako ciągu UTF8.</summary>
        <returns><see langword="true" /> w przypadku powodzenia operacji formatowania <see langword="false" /> Jeśli <paramref name="buffer" /> jest za mały.</returns>
        <remarks>
          <format type="text/markdown">
        
            
Obsługiwane formaty:

|Ciąg formatu|Przykładowy ciąg wynikowy|
|--|--|
|G/g (ustawienie domyślne)| |
|D/d|32767|
|N/n|32,767|       
|X/x|7fff|

Jeśli metoda nie powiedzie się, iteracyjne zwiększyć rozmiar buforu i ponów próbę, aż do skutku.
 
        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public static bool TryFormat (uint value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFormat(unsigned int32 value, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Buffers.StandardFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFormat (value As UInteger, destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional format As StandardFormat = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFormat : uint32 * Span&lt;byte&gt; *  * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.Text.Utf8Formatter.TryFormat (value, destination, bytesWritten, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do sformatowania.</param>
        <param name="destination">Bufor do zapisu wartości formacie UTF8 do.</param>
        <param name="bytesWritten">Gdy metoda zwróci wartość, zawiera długość tekstu sformatowanego w bajtach.</param>
        <param name="format">Standardowy format do użycia.</param>
        <summary>Formatuje <see cref="T:System.UInt32" /> jako ciągu UTF8.</summary>
        <returns><see langword="true" /> w przypadku powodzenia operacji formatowania <see langword="false" /> Jeśli <paramref name="buffer" /> jest za mały.</returns>
        <remarks>
          <format type="text/markdown">
        

Obsługiwane formaty:

|Ciąg formatu|Przykładowy ciąg wynikowy|
|--|--|
|G/g (ustawienie domyślne)| |
|D/d|32767|
|N/n|32,767|       
|X/x|7fff|

Jeśli metoda nie powiedzie się, iteracyjne zwiększyć rozmiar buforu i ponów próbę, aż do skutku.
 
        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public static bool TryFormat (ulong value, Span&lt;byte&gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFormat(unsigned int64 value, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Buffers.StandardFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFormat (value As ULong, destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional format As StandardFormat = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFormat : uint64 * Span&lt;byte&gt; *  * System.Buffers.StandardFormat -&gt; bool" Usage="System.Buffers.Text.Utf8Formatter.TryFormat (value, destination, bytesWritten, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.Buffers.StandardFormat" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do sformatowania.</param>
        <param name="destination">Bufor do zapisu wartości formacie UTF8 do.</param>
        <param name="bytesWritten">Gdy metoda zwróci wartość, zawiera długość tekstu sformatowanego w bajtach.</param>
        <param name="format">Standardowy format do użycia.</param>
        <summary>Formatuje <see cref="T:System.UInt64" /> jako ciągu UTF8.</summary>
        <returns><see langword="true" /> w przypadku powodzenia operacji formatowania <see langword="false" /> Jeśli <paramref name="buffer" /> jest za mały.</returns>
        <remarks>
          <format type="text/markdown">
        
            
Obsługiwane formaty:

|Ciąg formatu|Przykładowy ciąg wynikowy|
|--|--|
|G/g (ustawienie domyślne)| |
|D/d|32767|
|N/n|32,767|       
|X/x|7fff|

Jeśli metoda nie powiedzie się, iteracyjne zwiększyć rozmiar buforu i ponów próbę, aż do skutku.
 
        ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
