<Type Name="Utf8Parser" FullName="System.Buffers.Text.Utf8Parser">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5d78780112fafda36f9e5cefd47832fcb7b0879e" /><Meta Name="ms.sourcegitcommit" Value="cfc0e4215fd0d259582ada2141878befd7c3c8c6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/12/2019" /><Meta Name="ms.locfileid" Value="67854584" /></Metadata><TypeSignature Language="C#" Value="public static class Utf8Parser" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Utf8Parser extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.Text.Utf8Parser" />
  <TypeSignature Language="VB.NET" Value="Public Class Utf8Parser" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8Parser abstract sealed" />
  <TypeSignature Language="F#" Value="type Utf8Parser = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera metody statyczne służące do analizowania ciągów Utf8 do typowych typów danych.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out bool value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] bool&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Boolean, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg Utf8 do analizy.</param>
        <param name="value">Gdy metoda zwróci wartość, zawiera wartość pochodzącą z analizy <paramref name="source" />, jeśli operacja analizowania zakończyła się pomyślnie.</param>
        <param name="bytesConsumed">Jeśli operacji analizowania zakończyło się pomyślnie, zawiera długość w bajtach przeanalizowany podciągu w przypadku zwrotu metody. Jeśli metoda nie powiedzie się, <paramref name="bytesConsumed" /> jest równa 0.</param>
        <param name="standardFormat">Oczekiwany format ciągu Utf8.</param>
        <summary>Analizuje <see cref="T:System.Boolean" /> na początku ciągu Utf8.</summary>
        <returns><see langword="true" /> w celu osiągnięcia sukcesu; <see langword="false" /> Jeśli ciąg nie jest syntaktycznie prawidłowy lub przepełnienie lub niedopełnienie wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Obsługiwane formaty: 

|Ciąg formatu|Przykład oczekiwanego formatu.|
|--|--|
|G (ustawienie domyślne)|PRAWDA/FAŁSZ|
|l|PRAWDA/FAŁSZ|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out byte value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int8&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Byte, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Byte" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg Utf8 do analizy.</param>
        <param name="value">Gdy metoda zwróci wartość, zawiera wartość pochodzącą z analizy <paramref name="source" />, jeśli operacja analizowania zakończyła się pomyślnie.</param>
        <param name="bytesConsumed">Jeśli operacji analizowania zakończyło się pomyślnie, zawiera długość w bajtach przeanalizowany podciągu w przypadku zwrotu metody. Jeśli metoda nie powiedzie się, <paramref name="bytesConsumed" /> jest równa 0.</param>
        <param name="standardFormat">Oczekiwany format ciągu Utf8.</param>
        <summary>Analizuje <see cref="T:System.Byte" /> na początku ciągu Utf8.</summary>
        <returns><see langword="true" /> w celu osiągnięcia sukcesu; <see langword="false" /> Jeśli ciąg nie jest syntaktycznie prawidłowy lub przepełnienie lub niedopełnienie wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Obsługiwane formaty: 

|Ciąg formatu|Przykład oczekiwanego formatu.|
|--|--|
|G/g (ustawienie domyślne)| |
|D/d|122|
|N/n|122|       
|X/x|7a|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out DateTime value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.DateTime&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As DateTime, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg Utf8 do analizy.</param>
        <param name="value">Gdy metoda zwróci wartość, zawiera wartość pochodzącą z analizy <paramref name="source" />, jeśli operacja analizowania zakończyła się pomyślnie.</param>
        <param name="bytesConsumed">Jeśli operacji analizowania zakończyło się pomyślnie, zawiera długość w bajtach przeanalizowany podciągu w przypadku zwrotu metody. Jeśli metoda nie powiedzie się, <paramref name="bytesConsumed" /> jest równa 0.</param>
        <param name="standardFormat">Oczekiwany format ciągu Utf8.</param>
        <summary>Analizuje <see cref="T:System.DateTime" /> na początku ciągu Utf8.</summary>
        <returns><see langword="true" /> w celu osiągnięcia sukcesu; <see langword="false" /> Jeśli ciąg nie jest syntaktycznie prawidłowy lub przepełnienie lub niedopełnienie wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Obsługiwane formaty:

|Ciąg formatu|Przykład oczekiwanego formatu.|Komentarze|
|--|--|--|
|G (ustawienie domyślne)|05/25/2017 10:30:15| |
|R|Wt 03 stycznia 2017 r. 08:08:05 GMT|(RFC 1123)|
|l|Wt 03 stycznia 2017 r. 08:08:05 gmt|(Małe RFC 1123)|
|O|2017-06-12T05:30:45.7680000-07:00|(Wysyłanych)|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out DateTimeOffset value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.DateTimeOffset&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As DateTimeOffset, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg Utf8 do analizy.</param>
        <param name="value">Gdy metoda zwróci wartość, zawiera wartość pochodzącą z analizy <paramref name="source" />, jeśli operacja analizowania zakończyła się pomyślnie.</param>
        <param name="bytesConsumed">Jeśli operacji analizowania zakończyło się pomyślnie, zawiera długość w bajtach przeanalizowany podciągu w przypadku zwrotu metody. Jeśli metoda nie powiedzie się, <paramref name="bytesConsumed" /> jest równa 0.</param>
        <param name="standardFormat">Oczekiwany format ciągu Utf8.</param>
        <summary>Analizuje <see cref="T:System.DateTimeOffset" /> na początku ciągu Utf8.</summary>
        <returns><see langword="true" /> w celu osiągnięcia sukcesu; <see langword="false" /> Jeśli ciąg nie jest syntaktycznie prawidłowy lub przepełnienie lub niedopełnienie wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Obsługiwane formaty:

|Ciąg formatu|Przykład oczekiwanego formatu.|Komentarze|
|--|--|--|
|G (ustawienie domyślne)|05/25/2017 10:30:15| |
|R|Wt 03 stycznia 2017 r. 08:08:05 GMT|(RFC 1123)|
|l|Wt 03 stycznia 2017 r. 08:08:05 gmt|(Małe RFC 1123)|
|O|2017-06-12T05:30:45.7680000-07:00|(Wysyłanych)|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out decimal value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.Decimal&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Decimal, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg Utf8 do analizy.</param>
        <param name="value">Gdy metoda zwróci wartość, zawiera wartość pochodzącą z analizy <paramref name="source" />, jeśli operacja analizowania zakończyła się pomyślnie.</param>
        <param name="bytesConsumed">Jeśli operacji analizowania zakończyło się pomyślnie, zawiera długość w bajtach przeanalizowany podciągu w przypadku zwrotu metody. Jeśli metoda nie powiedzie się, <paramref name="bytesConsumed" /> jest równa 0.</param>
        <param name="standardFormat">Oczekiwany format ciągu Utf8.</param>
        <summary>Analizuje <see cref="T:System.Decimal" /> na początku ciągu Utf8.</summary>
        <returns><see langword="true" /> w celu osiągnięcia sukcesu; <see langword="false" /> Jeśli ciąg nie jest syntaktycznie prawidłowy lub przepełnienie lub niedopełnienie wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Obsługiwane formaty:

|Ciąg formatu|Przykład oczekiwanego formatu.|Komentarze|
|--|--|--|
|G/g (ustawienie domyślne)| |  
|F/f|12.45|Stały punktu|
|E/e|1.245000e1|Wykładnicza|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out double value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] float64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Double, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg Utf8 do analizy.</param>
        <param name="value">Gdy metoda zwróci wartość, zawiera wartość pochodzącą z analizy <paramref name="source" />, jeśli operacja analizowania zakończyła się pomyślnie.</param>
        <param name="bytesConsumed">Jeśli operacji analizowania zakończyło się pomyślnie, zawiera długość w bajtach przeanalizowany podciągu w przypadku zwrotu metody. Jeśli metoda nie powiedzie się, <paramref name="bytesConsumed" /> jest równa 0.</param>
        <param name="standardFormat">Oczekiwany format ciągu Utf8.</param>
        <summary>Analizuje <see cref="T:System.Double" /> na początku ciągu Utf8.</summary>
        <returns><see langword="true" /> w celu osiągnięcia sukcesu; <see langword="false" /> Jeśli ciąg nie jest syntaktycznie prawidłowy lub przepełnienie lub niedopełnienie wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Obsługiwane formaty:

|Ciąg formatu|Przykład oczekiwanego formatu.|Komentarze|
|--|--|--|
|G/g (ustawienie domyślne)| |  
|F/f|12.45|Stały punktu|
|E/e|1.245000e1|Wykładnicza|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out Guid value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.Guid&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Guid, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg Utf8 do analizy.</param>
        <param name="value">Gdy metoda zwróci wartość, zawiera wartość pochodzącą z analizy <paramref name="source" />, jeśli operacja analizowania zakończyła się pomyślnie.</param>
        <param name="bytesConsumed">Jeśli operacji analizowania zakończyło się pomyślnie, zawiera długość w bajtach przeanalizowany podciągu w przypadku zwrotu metody. Jeśli metoda nie powiedzie się, <paramref name="bytesConsumed" /> jest równa 0.</param>
        <param name="standardFormat">Oczekiwany format ciągu Utf8.</param>
        <summary>Analizuje <see cref="T:System.Guid" /> na początku ciągu Utf8.</summary>
        <returns><see langword="true" /> w celu osiągnięcia sukcesu; <see langword="false" /> Jeśli ciąg nie jest syntaktycznie prawidłowy lub przepełnienie lub niedopełnienie wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Obsługiwane formaty:

|Ciąg formatu|Oczekiwany format|
|--|--|
|D (ustawienie domyślne)|nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn|
|B|{nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}|
|P|(nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn)|
|N|nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out short value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int16&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Short, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int16" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg Utf8 do analizy.</param>
        <param name="value">Gdy metoda zwróci wartość, zawiera wartość pochodzącą z analizy <paramref name="source" />, jeśli operacja analizowania zakończyła się pomyślnie.</param>
        <param name="bytesConsumed">Jeśli operacji analizowania zakończyło się pomyślnie, zawiera długość w bajtach przeanalizowany podciągu w przypadku zwrotu metody. Jeśli metoda nie powiedzie się, <paramref name="bytesConsumed" /> jest równa 0.</param>
        <param name="standardFormat">Oczekiwany format ciągu Utf8.</param>
        <summary>Analizuje <see cref="T:System.Int16" /> na początku ciągu Utf8.</summary>
        <returns><see langword="true" /> w celu osiągnięcia sukcesu; <see langword="false" /> Jeśli ciąg nie jest syntaktycznie prawidłowy lub przepełnienie lub niedopełnienie wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Obsługiwane formaty:

|Ciąg formatu|Przykład oczekiwanego formatu.|
|--|--|
|G/g (ustawienie domyślne)| |
|D/d|32767|
|N/n|32,767|       
|X/x|7fff|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out int value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Integer, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg Utf8 do analizy.</param>
        <param name="value">Gdy metoda zwróci wartość, zawiera wartość pochodzącą z analizy <paramref name="source" />, jeśli operacja analizowania zakończyła się pomyślnie.</param>
        <param name="bytesConsumed">Jeśli operacji analizowania zakończyło się pomyślnie, zawiera długość w bajtach przeanalizowany podciągu w przypadku zwrotu metody. Jeśli metoda nie powiedzie się, <paramref name="bytesConsumed" /> jest równa 0.</param>
        <param name="standardFormat">Oczekiwany format ciągu Utf8.</param>
        <summary>Analizuje <see cref="T:System.Int32" /> na początku ciągu Utf8.</summary>
        <returns><see langword="true" /> w celu osiągnięcia sukcesu; <see langword="false" /> Jeśli ciąg nie jest syntaktycznie prawidłowy lub przepełnienie lub niedopełnienie wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Obsługiwane formaty:

|Ciąg formatu|Przykład oczekiwanego formatu.|
|--|--|
|G/g (ustawienie domyślne)| |
|D/d|32767|
|N/n|32,767|       
|X/x|7fff|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out long value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Long, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg Utf8 do analizy.</param>
        <param name="value">Gdy metoda zwróci wartość, zawiera wartość pochodzącą z analizy <paramref name="source" />, jeśli operacja analizowania zakończyła się pomyślnie.</param>
        <param name="bytesConsumed">Jeśli operacji analizowania zakończyło się pomyślnie, zawiera długość w bajtach przeanalizowany podciągu w przypadku zwrotu metody. Jeśli metoda nie powiedzie się, <paramref name="bytesConsumed" /> jest równa 0.</param>
        <param name="standardFormat">Oczekiwany format ciągu Utf8.</param>
        <summary>Analizuje <see cref="T:System.Int64" /> na początku ciągu Utf8.</summary>
        <returns><see langword="true" /> w celu osiągnięcia sukcesu; <see langword="false" /> Jeśli ciąg nie jest syntaktycznie prawidłowy lub przepełnienie lub niedopełnienie wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Obsługiwane formaty:

|Ciąg formatu|Przykład oczekiwanego formatu.|
|--|--|
|G/g (ustawienie domyślne)| |
|D/d|32767|
|N/n|32,767|       
|X/x|7fff|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out sbyte value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int8&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As SByte, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.SByte" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg Utf8 do analizy.</param>
        <param name="value">Gdy metoda zwróci wartość, zawiera wartość pochodzącą z analizy <paramref name="source" />, jeśli operacja analizowania zakończyła się pomyślnie.</param>
        <param name="bytesConsumed">Jeśli operacji analizowania zakończyło się pomyślnie, zawiera długość w bajtach przeanalizowany podciągu w przypadku zwrotu metody. Jeśli metoda nie powiedzie się, <paramref name="bytesConsumed" /> jest równa 0.</param>
        <param name="standardFormat">Oczekiwany format ciągu Utf8.</param>
        <summary>Analizuje <see cref="T:System.SByte" /> na początku ciągu Utf8.</summary>
        <returns><see langword="true" /> w celu osiągnięcia sukcesu; <see langword="false" /> Jeśli ciąg nie jest syntaktycznie prawidłowy lub przepełnienie lub niedopełnienie wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Obsługiwane formaty: 

|Ciąg formatu|Przykład oczekiwanego formatu.|
|--|--|
|G/g (ustawienie domyślne)| |
|D/d|122|
|N/n|122|       
|X/x|7a|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out float value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] float32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Single, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg Utf8 do analizy.</param>
        <param name="value">Gdy metoda zwróci wartość, zawiera wartość pochodzącą z analizy <paramref name="source" />, jeśli operacja analizowania zakończyła się pomyślnie.</param>
        <param name="bytesConsumed">Jeśli operacji analizowania zakończyło się pomyślnie, zawiera długość w bajtach przeanalizowany podciągu w przypadku zwrotu metody. Jeśli metoda nie powiedzie się, <paramref name="bytesConsumed" /> jest równa 0.</param>
        <param name="standardFormat">Oczekiwany format ciągu Utf8.</param>
        <summary>Analizuje <see cref="T:System.Single" /> na początku ciągu Utf8.</summary>
        <returns><see langword="true" /> w celu osiągnięcia sukcesu; <see langword="false" /> Jeśli ciąg nie jest syntaktycznie prawidłowy lub przepełnienie lub niedopełnienie wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Obsługiwane formaty: 

Ciąg formatu|Przykład oczekiwano fornmat|Komentarze|
|--|--|--|
|G/g (ustawienie domyślne)| |  
|F/f|12.45|Stały punktu|
|E/e|1.245000e1|Wykładnicza|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out TimeSpan value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.TimeSpan&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As TimeSpan, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.TimeSpan" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg Utf8 do analizy.</param>
        <param name="value">Gdy metoda zwróci wartość, zawiera wartość pochodzącą z analizy <paramref name="source" />, jeśli operacja analizowania zakończyła się pomyślnie.</param>
        <param name="bytesConsumed">Jeśli operacji analizowania zakończyło się pomyślnie, zawiera długość w bajtach przeanalizowany podciągu w przypadku zwrotu metody. Jeśli metoda nie powiedzie się, <paramref name="bytesConsumed" /> jest równa 0.</param>
        <param name="standardFormat">Oczekiwany format ciągu Utf8.</param>
        <summary>Analizuje <see cref="T:System.TimeSpan" /> na początku ciągu Utf8.</summary>
        <returns><see langword="true" /> w celu osiągnięcia sukcesu; <see langword="false" /> Jeśli ciąg nie jest syntaktycznie prawidłowy lub przepełnienie lub niedopełnienie wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Obsługiwane formaty: 

|Ciąg formatu|Oczekiwany format|Komentarze|
|--|--|--|
|t-c-T (ustawienie domyślne)|[-] [d]. : mm: ss [.fffffff]|(format stałe)|
|G|[-]d:hh:mm:ss.fffffff||(Ogólne long)|
|g|[-] [d:] [h] ss [.f [f [f [f [f [f [f]]]|(skrócona ogólne)|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out ushort value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int16&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As UShort, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt16" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg Utf8 do analizy.</param>
        <param name="value">Gdy metoda zwróci wartość, zawiera wartość pochodzącą z analizy <paramref name="source" />, jeśli operacja analizowania zakończyła się pomyślnie.</param>
        <param name="bytesConsumed">Jeśli operacji analizowania zakończyło się pomyślnie, zawiera długość w bajtach przeanalizowany podciągu w przypadku zwrotu metody. Jeśli metoda nie powiedzie się, <paramref name="bytesConsumed" /> jest równa 0.</param>
        <param name="standardFormat">Oczekiwany format ciągu Utf8.</param>
        <summary>Analizuje <see cref="T:System.UInt16" /> na początku ciągu Utf8.</summary>
        <returns><see langword="true" /> w celu osiągnięcia sukcesu; <see langword="false" /> Jeśli ciąg nie jest syntaktycznie prawidłowy lub przepełnienie lub niedopełnienie wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Obsługiwane formaty:

|Ciąg formatu|Przykład oczekiwanego formatu.|
|--|--|
|G/g (ustawienie domyślne)| |
|D/d|32767|
|N/n|32,767|       
|X/x|7fff|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out uint value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As UInteger, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg Utf8 do analizy.</param>
        <param name="value">Gdy metoda zwróci wartość, zawiera wartość pochodzącą z analizy <paramref name="source" />, jeśli operacja analizowania zakończyła się pomyślnie.</param>
        <param name="bytesConsumed">Jeśli operacji analizowania zakończyło się pomyślnie, zawiera długość w bajtach przeanalizowany podciągu w przypadku zwrotu metody. Jeśli metoda nie powiedzie się, <paramref name="bytesConsumed" /> jest równa 0.</param>
        <param name="standardFormat">Oczekiwany format ciągu Utf8.</param>
        <summary>Analizuje <see cref="T:System.UInt32" /> na początku ciągu Utf8.</summary>
        <returns><see langword="true" /> w celu osiągnięcia sukcesu; <see langword="false" /> Jeśli ciąg nie jest syntaktycznie prawidłowy lub przepełnienie lub niedopełnienie wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Obsługiwane formaty:

|Ciąg formatu|Przykład oczekiwanego formatu.|
|--|--|
|G/g (ustawienie domyślne)| |
|D/d|32767|
|N/n|32,767|       
|X/x|7fff|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out ulong value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As ULong, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg Utf8 do analizy.</param>
        <param name="value">Gdy metoda zwróci wartość, zawiera wartość pochodzącą z analizy <paramref name="source" />, jeśli operacja analizowania zakończyła się pomyślnie.</param>
        <param name="bytesConsumed">Jeśli operacji analizowania zakończyło się pomyślnie, zawiera długość w bajtach przeanalizowany podciągu w przypadku zwrotu metody. Jeśli metoda nie powiedzie się, <paramref name="bytesConsumed" /> jest równa 0.</param>
        <param name="standardFormat">Oczekiwany format ciągu Utf8.</param>
        <summary>Analizuje <see cref="T:System.UInt64" /> na początku ciągu Utf8.</summary>
        <returns><see langword="true" /> w celu osiągnięcia sukcesu; <see langword="false" /> Jeśli ciąg nie jest syntaktycznie prawidłowy lub przepełnienie lub niedopełnienie wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Obsługiwane formaty:

|Ciąg formatu|Przykład oczekiwanego formatu.|
|--|--|
|G/g (ustawienie domyślne)| |
|D/d|32767|
|N/n|32,767|       
|X/x|7fff|

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
