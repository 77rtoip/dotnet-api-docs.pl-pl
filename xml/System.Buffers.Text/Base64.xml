<Type Name="Base64" FullName="System.Buffers.Text.Base64">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ccdcbb33753dfa1bd9ba714a6c438e823c9f8a0f" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56354757" /></Metadata><TypeSignature Language="C#" Value="public static class Base64" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Base64 extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.Text.Base64" />
  <TypeSignature Language="VB.NET" Value="Public Class Base64" />
  <TypeSignature Language="C++ CLI" Value="public ref class Base64 abstract sealed" />
  <TypeSignature Language="F#" Value="type Base64 = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Konwertuje między danych binarnych i UTF-8 kodowany w formacie tekstowym, która jest reprezentowana w base 64.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DecodeFromUtf8">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus DecodeFromUtf8 (ReadOnlySpan&lt;byte&gt; utf8, Span&lt;byte&gt; bytes, out int bytesConsumed, out int bytesWritten, bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus DecodeFromUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8, valuetype System.Span`1&lt;unsigned int8&gt; bytes, [out] int32&amp; bytesConsumed, [out] int32&amp; bytesWritten, bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeFromUtf8 (utf8 As ReadOnlySpan(Of Byte), bytes As Span(Of Byte), ByRef bytesConsumed As Integer, ByRef bytesWritten As Integer, Optional isFinalBlock As Boolean = true) As OperationStatus" />
      <MemberSignature Language="F#" Value="static member DecodeFromUtf8 : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; *  *  * bool -&gt; System.Buffers.OperationStatus" Usage="System.Buffers.Text.Base64.DecodeFromUtf8 (utf8, bytes, bytesConsumed, bytesWritten, isFinalBlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8">Zakres danych wejściowych, zawierający UTF-8 kodowany w formacie tekstu w base 64, który ma zostać zdekodowane.</param>
        <param name="bytes">Zakres danych wyjściowych, który zawiera wynik operacji, czyli dekodowane dane binarne.</param>
        <param name="bytesConsumed">Liczba bajtów wejściowych używane podczas operacji. To może służyć do tworzenia wycinków danych wejściowych dla kolejnych wywołań, jeśli to konieczne.</param>
        <param name="bytesWritten">Liczba bajtów zapisanych na zakres danych wyjściowych. To może służyć do tworzenia wycinków danych wyjściowych dla kolejnych wywołań, jeśli to konieczne.</param>
        <param name="isFinalBlock"><see langword="true" /> (domyślnie), jeśli zakres danych wejściowych zawiera całe dane do odkodowania. <see langword="false" /> Jeśli zakres danych wejściowych zawiera częściowe dane z większej ilości danych, aby wykonać.</param>
        <summary>Dekoduje zakres tekstu kodowany w formacie UTF-8, reprezentowane jako base-64 w danych binarnych. Jeśli dane wejściowe nie jest wielokrotnością liczby 4, będzie dekodowania, jak to możliwe do najbliższej wielokrotności 4.</summary>
        <returns>Jedna z wartości wyliczenia, które wskazuje stan operacji dekodowania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Zwracana wartość może być w następujący sposób:

- <xref:System.Buffers.OperationStatus.Done?displayProperty=nameWithType>: Przetworzono cały zakres danych wejściowych.
- <xref:System.Buffers.OperationStatus.DestinationTooSmall?displayProperty=nameWithType>: W zakresie danych wyjściowych do zapisania zdekodowany danych wejściowych jest za mało miejsca.
- <xref:System.Buffers.OperationStatus.NeedMoreData?displayProperty=nameWithType>: `isFinalBlock` jest `false` i danych wejściowych nie jest wielokrotnością liczby 4. W przeciwnym razie jest uznawany za częściowe dane wejściowe <xref:System.Buffers.OperationStatus.InvalidData>.
- <xref:System.Buffers.OperationStatus.InvalidData?displayProperty=nameWithType>: Dane wejściowe zawiera bajtów poza oczekiwanym zakresem 64 podstawowego, jest nieprawidłowy lub więcej niż dwa znaki dopełnienie lub nie została ukończona (czyli nie jest wielokrotnością liczby 4) i `isFinalBlock` jest `true`.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeFromUtf8InPlace">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus DecodeFromUtf8InPlace (Span&lt;byte&gt; buffer, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus DecodeFromUtf8InPlace(valuetype System.Span`1&lt;unsigned int8&gt; buffer, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64.DecodeFromUtf8InPlace(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeFromUtf8InPlace (buffer As Span(Of Byte), ByRef bytesWritten As Integer) As OperationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::OperationStatus DecodeFromUtf8InPlace(Span&lt;System::Byte&gt; buffer, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="static member DecodeFromUtf8InPlace : Span&lt;byte&gt; *  -&gt; System.Buffers.OperationStatus" Usage="System.Buffers.Text.Base64.DecodeFromUtf8InPlace (buffer, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">Zakres danych wejściowych zawiera dane tekstowe base-64, który ma zostać zdekodowane.</param>
        <param name="bytesWritten">Liczba bajtów zapisanych w buforze.</param>
        <summary>Dekoduje zakres tekstu kodowany w formacie UTF-8 w base-64 (miejscowe) na dane binarne. Zdekodowany binarne dane wyjściowe jest mniejszy niż dane tekstowe, zawarte w danych wejściowych (operacja deflates danych). Jeśli dane wejściowe nie jest wielokrotnością liczby 4, metoda będzie go zdekodować do żadnych danych.</summary>
        <returns>Jedna z wartości wyliczenia, które wskazuje stan operacji dekodowania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Zwracana wartość może być w następujący sposób:

- <xref:System.Buffers.OperationStatus.Done?displayProperty=nameWithType>: Przetworzono cały zakres danych wejściowych.
- <xref:System.Buffers.OperationStatus.InvalidData?displayProperty=nameWithType>: Dane wejściowe zawiera bajtów poza oczekiwanym zakresem 64 podstawowego, jest nieprawidłowy lub więcej niż dwa znaki dopełnienie lub nie została ukończona (czyli nie jest wielokrotnością liczby 4).

Ta metoda nie może zwracać <xref:System.Buffers.OperationStatus.DestinationTooSmall?displayProperty=nameWithType> i <xref:System.Buffers.OperationStatus.NeedMoreData?displayProperty=nameWithType> wartości.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToUtf8">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus EncodeToUtf8 (ReadOnlySpan&lt;byte&gt; bytes, Span&lt;byte&gt; utf8, out int bytesConsumed, out int bytesWritten, bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus EncodeToUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, valuetype System.Span`1&lt;unsigned int8&gt; utf8, [out] int32&amp; bytesConsumed, [out] int32&amp; bytesWritten, bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64.EncodeToUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EncodeToUtf8 (bytes As ReadOnlySpan(Of Byte), utf8 As Span(Of Byte), ByRef bytesConsumed As Integer, ByRef bytesWritten As Integer, Optional isFinalBlock As Boolean = true) As OperationStatus" />
      <MemberSignature Language="F#" Value="static member EncodeToUtf8 : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; *  *  * bool -&gt; System.Buffers.OperationStatus" Usage="System.Buffers.Text.Base64.EncodeToUtf8 (bytes, utf8, bytesConsumed, bytesWritten, isFinalBlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bytes">Zakres danych wejściowych, zawierający dane binarne, które musi być zakodowany.</param>
        <param name="utf8">Zakres danych wyjściowych, który zawiera wynik operacji, czyli UTF-8 kodowany w formacie tekstu w base 64.</param>
        <param name="bytesConsumed">Liczba bajtów wejściowych używane podczas operacji. To może służyć do tworzenia wycinków danych wejściowych dla kolejnych wywołań, jeśli to konieczne.</param>
        <param name="bytesWritten">Liczba bajtów zapisanych na zakres danych wyjściowych. To może służyć do tworzenia wycinków danych wyjściowych dla kolejnych wywołań, jeśli to konieczne.</param>
        <param name="isFinalBlock"><see langword="true" /> (ustawienie domyślne), jeśli dane wejściowe obejmują zawiera całe dane do zakodowania. <see langword="false" /> Jeśli zakres danych wejściowych zawiera częściowe dane z większej ilości danych, aby wykonać.</param>
        <summary>Koduje zakres danych binarnych w tekst kodowany w formacie UTF-8, reprezentowane jako base-64.</summary>
        <returns>Jedna z wartości wyliczenia, które wskazuje stan operację kodowania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Zwracana wartość może być w następujący sposób:

- <xref:System.Buffers.OperationStatus.Done?displayProperty=nameWithType>: Przetworzono cały zakres danych wejściowych.
- <xref:System.Buffers.OperationStatus.DestinationTooSmall?displayProperty=nameWithType>: Nie ma wystarczającej ilości miejsca w zakresie danych wyjściowych, aby dopasować zakodowanych danych wejściowych.
- <xref:System.Buffers.OperationStatus.NeedMoreData?displayProperty=nameWithType>: `isFinalBlock` jest `false`. W przeciwnym razie, jeśli `isFinalBlock` jest `true`, dane wyjściowe są dopełniane, jeśli dane wejściowe nie jest wielokrotnością liczby 3.

Ta metoda nie może zwracać <xref:System.Buffers.OperationStatus.InvalidData?displayProperty=nameWithType> ponieważ nie jest możliwe kodowanie base-64.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToUtf8InPlace">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus EncodeToUtf8InPlace (Span&lt;byte&gt; buffer, int dataLength, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus EncodeToUtf8InPlace(valuetype System.Span`1&lt;unsigned int8&gt; buffer, int32 dataLength, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64.EncodeToUtf8InPlace(System.Span{System.Byte},System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EncodeToUtf8InPlace (buffer As Span(Of Byte), dataLength As Integer, ByRef bytesWritten As Integer) As OperationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::OperationStatus EncodeToUtf8InPlace(Span&lt;System::Byte&gt; buffer, int dataLength, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="static member EncodeToUtf8InPlace : Span&lt;byte&gt; * int *  -&gt; System.Buffers.OperationStatus" Usage="System.Buffers.Text.Base64.EncodeToUtf8InPlace (buffer, dataLength, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="dataLength" Type="System.Int32" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">Zakres danych wejściowych, zawierający dane binarne, które musi być zakodowany. Ponieważ metoda przeprowadza konwersję w miejscu, musi być wystarczająco duży, aby przechować wynik operacji.</param>
        <param name="dataLength">Liczba bajtów zawartych w buforu, który musi być zakodowany danych binarnych. Ta wartość musi być mniejsza niż długość buforu.</param>
        <param name="bytesWritten">Liczba bajtów zapisanych w buforze.</param>
        <summary>Koduje zakres danych binarnych (w miejscu) w tekst kodowany w formacie UTF-8, reprezentowane jako base-64. Zakodowany tekst wyjściowy jest większy niż dane binarne zawarte w danych wejściowych (operacja zwiększa ilość danych).</summary>
        <returns>Jedna z wartości wyliczenia, które wskazuje stan operację kodowania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Zwracana wartość może być w następujący sposób:

- <xref:System.Buffers.OperationStatus.Done?displayProperty=nameWithType>: Przetwarzanie całego bufora zakończyło się pomyślnie.
- <xref:System.Buffers.OperationStatus.DestinationTooSmall?displayProperty=nameWithType>: Nie ma wystarczającej ilości miejsca w buforze poza `dataLength` do wyniku kodowania danych wejściowych.

Ta metoda nie może zwracać <xref:System.Buffers.OperationStatus.NeedMoreData?displayProperty=nameWithType> i <xref:System.Buffers.OperationStatus.InvalidData?displayProperty=nameWithType>.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMaxDecodedFromUtf8Length">
      <MemberSignature Language="C#" Value="public static int GetMaxDecodedFromUtf8Length (int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetMaxDecodedFromUtf8Length(int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64.GetMaxDecodedFromUtf8Length(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMaxDecodedFromUtf8Length (length As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetMaxDecodedFromUtf8Length(int length);" />
      <MemberSignature Language="F#" Value="static member GetMaxDecodedFromUtf8Length : int -&gt; int" Usage="System.Buffers.Text.Base64.GetMaxDecodedFromUtf8Length length" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="length">To be added.</param>
        <summary>Zwraca maksymalną długość (w bajtach), w wyniku, gdyby dekodowania tekstowej szyfrowanej algorytmem base-64 zakresu bajtów o rozmiarze <paramref name="length" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> jest mniejsza niż 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMaxEncodedToUtf8Length">
      <MemberSignature Language="C#" Value="public static int GetMaxEncodedToUtf8Length (int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetMaxEncodedToUtf8Length(int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64.GetMaxEncodedToUtf8Length(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMaxEncodedToUtf8Length (length As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetMaxEncodedToUtf8Length(int length);" />
      <MemberSignature Language="F#" Value="static member GetMaxEncodedToUtf8Length : int -&gt; int" Usage="System.Buffers.Text.Base64.GetMaxEncodedToUtf8Length length" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="length">To be added.</param>
        <summary>Zwraca maksymalną długość (w bajtach), w wyniku, gdyby kodowanie danych binarnych zakresu bajtów o rozmiarze <paramref name="length" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> jest mniejsza niż 0 lub większy niż 1610612733 (ponieważ kodowanie zwiększa ilość danych przez 4/3).</exception>
      </Docs>
    </Member>
  </Members>
</Type>