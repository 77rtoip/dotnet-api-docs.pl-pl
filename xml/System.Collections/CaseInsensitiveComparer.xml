<Type Name="CaseInsensitiveComparer" FullName="System.Collections.CaseInsensitiveComparer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c6dc24764487dbaa54f43ba0d6881572ff38965e" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69334007" /></Metadata><TypeSignature Language="C#" Value="public class CaseInsensitiveComparer : System.Collections.IComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CaseInsensitiveComparer extends System.Object implements class System.Collections.IComparer" />
  <TypeSignature Language="DocId" Value="T:System.Collections.CaseInsensitiveComparer" />
  <TypeSignature Language="VB.NET" Value="Public Class CaseInsensitiveComparer&#xA;Implements IComparer" />
  <TypeSignature Language="C++ CLI" Value="public ref class CaseInsensitiveComparer : System::Collections::IComparer" />
  <TypeSignature Language="F#" Value="type CaseInsensitiveComparer = class&#xA;    interface IComparer" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Porównuje dwa obiekty w celu zapewnienia równoważności, ignorując wielkość liter w ciągach.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

<xref:System.Collections.CaseInsensitiveComparer>implementuje interfejs obsługujący porównywanie bez uwzględniania wielkości liter w ciągach <xref:System.Collections.CaseInsensitiveHashCodeProvider> , tak <xref:System.Collections.IHashCodeProvider> jak implementuje interfejs obsługujący porównywanie bez uwzględniania wielkości liter w ciągach. <xref:System.Collections.IComparer>  

> [!IMPORTANT]
>  Nie zalecamy używania `CaseInsensitiveComparer` klasy do nowych celów programistycznych. Zamiast tego <xref:System.StringComparer?displayProperty=nameWithType> zaleca się użycie obiektu zwróconego <xref:System.StringComparer.CurrentCultureIgnoreCase?displayProperty=nameWithType>przez właściwość, <xref:System.StringComparer.InvariantCultureIgnoreCase?displayProperty=nameWithType>, lub <xref:System.StringComparer.OrdinalIgnoreCase?displayProperty=nameWithType> .

Klasa jest domyślną implementacją <xref:System.Collections.IComparer> interfejsu i wykonuje porównania ciągów z uwzględnieniem wielkości liter. <xref:System.Collections.Comparer>  
  
 Obiekty używane jako <xref:System.Collections.Hashtable> klucze przez są wymagane do <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> przesłania metody (lub <xref:System.Collections.IHashCodeProvider> <xref:System.Collections.IComparer> interfejsu) i <xref:System.Object.Equals%2A?displayProperty=nameWithType> metody (lub interfejsu). Implementacja obu metod lub interfejsów musi obsługiwać rozróżnianie wielkości liter w ten sam sposób; w przeciwnym razie <xref:System.Collections.Hashtable> może zachowywać się nieprawidłowo. Na przykład podczas tworzenia elementu <xref:System.Collections.Hashtable>należy użyć tej klasy <xref:System.Collections.CaseInsensitiveHashCodeProvider> z klasą lub dowolną implementacją bez uwzględniania <xref:System.Collections.IHashCodeProvider> wielkości liter.  
  
 Porównania ciągów mogą mieć różne wyniki, w zależności od kultury. Aby uzyskać więcej informacji na temat porównań specyficznych dla <xref:System.Globalization> kultury, zobacz Przestrzeń nazw oraz [globalizacja i lokalizacja](~/docs/standard/globalization-localization/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy tabelę skrótów z rozróżnianiem wielkości liter i tabelę skrótów bez uwzględniania wielkości liter i pokazuje różnicę w ich zachowaniu, nawet jeśli oba zawierają te same elementy.  
  
 [!code-cpp[System.Collections.CaseInsensitive#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CPP/caseinsensitive.cpp#1)]
 [!code-csharp[System.Collections.CaseInsensitive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CS/caseinsensitive.cs#1)]
 [!code-vb[System.Collections.CaseInsensitive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/VB/caseinsensitive.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.IComparer" />
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.Comparer" />
    <altmember cref="T:System.Globalization.CompareInfo" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
    <altmember cref="T:System.Globalization.CultureInfo" />
    <altmember cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />
    <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">Wykonywanie niezależnych od kultury operacji na ciągach w kolekcjach</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Collections.CaseInsensitiveComparer" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CaseInsensitiveComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CaseInsensitiveComparer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CaseInsensitiveComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Collections.CaseInsensitiveComparer" /> klasy <see cref="P:System.Threading.Thread.CurrentCulture" /> przy użyciu bieżącego wątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy wystąpienie jest tworzone za pomocą tego konstruktora <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> , bieżący wątek jest zapisywany. <xref:System.Collections.CaseInsensitiveComparer> Procedury porównania używają zapisanej kultury do określenia kolejności sortowania i reguł wielkości liter. w związku z tym porównania ciągów mogą mieć różne wyniki, w zależności od kultury. Aby uzyskać więcej informacji na temat porównań specyficznych dla <xref:System.Globalization> kultury, zobacz Przestrzeń nazw oraz [globalizacja i lokalizacja](~/docs/standard/globalization-localization/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy tabelę skrótów z rozróżnianiem wielkości liter i tabelę skrótów bez uwzględniania wielkości liter i pokazuje różnicę w ich zachowaniu, nawet jeśli oba zawierają te same elementy.  
  
 [!code-cpp[System.Collections.CaseInsensitive#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CPP/caseinsensitive.cpp#1)]
 [!code-csharp[System.Collections.CaseInsensitive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CS/caseinsensitive.cs#1)]
 [!code-vb[System.Collections.CaseInsensitive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/VB/caseinsensitive.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.CompareInfo" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">Wykonywanie niezależnych od kultury operacji na ciągach w kolekcjach</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CaseInsensitiveComparer (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CaseInsensitiveComparer.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CaseInsensitiveComparer(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="new System.Collections.CaseInsensitiveComparer : System.Globalization.CultureInfo -&gt; System.Collections.CaseInsensitiveComparer" Usage="new System.Collections.CaseInsensitiveComparer culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">Do użycia dla nowego <see cref="T:System.Collections.CaseInsensitiveComparer" />. <see cref="T:System.Globalization.CultureInfo" /></param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Collections.CaseInsensitiveComparer" /> klasy przy użyciu określonego <see cref="T:System.Globalization.CultureInfo" />elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Procedury porównania używają określonego <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> do określenia kolejności sortowania i reguł wielkości liter. Porównania ciągów mogą mieć różne wyniki, w zależności od kultury. Aby uzyskać więcej informacji na temat porównań specyficznych dla <xref:System.Globalization> kultury, zobacz Przestrzeń nazw oraz [globalizacja i lokalizacja](~/docs/standard/globalization-localization/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy tabelę skrótów z rozróżnianiem wielkości liter i tabelę skrótów bez uwzględniania wielkości liter i pokazuje różnicę w ich zachowaniu, nawet jeśli oba zawierają te same elementy.  
  
 [!code-cpp[System.Collections.CaseInsensitive#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CPP/caseinsensitive.cpp#1)]
 [!code-csharp[System.Collections.CaseInsensitive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CS/caseinsensitive.cs#1)]
 [!code-vb[System.Collections.CaseInsensitive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/VB/caseinsensitive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="culture" />jest <see langword="null" />.</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.CompareInfo" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">Wykonywanie niezależnych od kultury operacji na ciągach w kolekcjach</related>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (object a, object b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(object a, object b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CaseInsensitiveComparer.Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (a As Object, b As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::Object ^ a, System::Object ^ b);" />
      <MemberSignature Language="F#" Value="abstract member Compare : obj * obj -&gt; int&#xA;override this.Compare : obj * obj -&gt; int" Usage="caseInsensitiveComparer.Compare (a, b)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Object" />
        <Parameter Name="b" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="a">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="b">Drugi obiekt, który będzie porównywany.</param>
        <summary>Wykonuje porównanie wielkości liter w dwóch obiektach tego samego typu i zwraca wartość wskazującą, czy jedna z nich jest mniejsza niż, równa lub większa od drugiej.</summary>
        <returns>Liczba całkowita ze znakiem, która wskazuje wartości <paramref name="a" /> względne i <paramref name="b" />, jak pokazano w poniższej tabeli.  
  
 <list type="table"><listheader><term> Wartość 
 </term><description> Znaczenie 
 </description></listheader><item><term> Mniej niż zero 
 </term><description><paramref name="a" />jest mniejsze niż <paramref name="b" />, z ignorowaniem wielkości liter.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="a" />równa <paramref name="b" />się, z ignorowaniem wielkości liter.  
  
 </description></item><item><term> Większe od zera 
 </term><description><paramref name="a" />jest większa niż <paramref name="b" />, z ignorowaniem wielkości liter.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `a` <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> <xref:System.IComparable> i `b` są oba ciągi, ta metoda używa do porównywania ciągów z ignorowaną wielkością liter; w przeciwnym razie używa implementacji obu obiektów. Oznacza to, że `a` Jeśli <xref:System.IComparable>implementuje, `a`Metoda ta zwraca wynik. `CompareTo`(`b`); w przeciwnym razie `b` , <xref:System.IComparable>jeśli implementuje, zwraca negację wyniku `b`. `CompareTo` (`a`).  
  
 Porównywanie `null` z dowolnym typem jest dozwolone i nie generuje wyjątku podczas korzystania z <xref:System.IComparable>programu. Podczas sortowania `null` jest uznawana za mniej niż każdy inny obiekt.  
  
 Porównania ciągów mogą mieć różne wyniki, w zależności od kultury. Aby uzyskać więcej informacji na temat porównań specyficznych dla <xref:System.Globalization> kultury, zobacz Przestrzeń nazw oraz [globalizacja i lokalizacja](~/docs/standard/globalization-localization/index.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ani nie implementuje<see cref="T:System.IComparable" /> interfejsu. <paramref name="b" /> <paramref name="a" />  
  
—lub— 
 <paramref name="a" />i <paramref name="b" /> są różne typy.</exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.Globalization.CompareInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">Wykonywanie niezależnych od kultury operacji na ciągach w kolekcjach</related>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Collections.CaseInsensitiveComparer Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.CaseInsensitiveComparer Default" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CaseInsensitiveComparer.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As CaseInsensitiveComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::CaseInsensitiveComparer ^ Default { System::Collections::CaseInsensitiveComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Collections.CaseInsensitiveComparer" Usage="System.Collections.CaseInsensitiveComparer.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.CaseInsensitiveComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wystąpienie <see cref="T:System.Collections.CaseInsensitiveComparer" /> , które jest skojarzone <see cref="P:System.Threading.Thread.CurrentCulture" /> z bieżącym wątkiem, które jest zawsze dostępne.</summary>
        <value>Wystąpienie <see cref="T:System.Collections.CaseInsensitiveComparer" /> , które jest skojarzone <see cref="P:System.Threading.Thread.CurrentCulture" /> z bieżącym wątkiem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy wystąpienie jest tworzone przy użyciu konstruktora bez parametrów <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> , bieżący wątek jest zapisywany. <xref:System.Collections.CaseInsensitiveComparer> Procedury porównania używają zapisanej kultury do określenia kolejności sortowania i reguł wielkości liter. w związku z tym porównania ciągów mogą mieć różne wyniki, w zależności od kultury. Aby uzyskać więcej informacji na temat porównań specyficznych dla <xref:System.Globalization> kultury, zobacz Przestrzeń nazw oraz [globalizacja i lokalizacja](~/docs/standard/globalization-localization/index.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CompareInfo" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">Wykonywanie niezależnych od kultury operacji na ciągach w kolekcjach</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultInvariant">
      <MemberSignature Language="C#" Value="public static System.Collections.CaseInsensitiveComparer DefaultInvariant { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.CaseInsensitiveComparer DefaultInvariant" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CaseInsensitiveComparer.DefaultInvariant" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultInvariant As CaseInsensitiveComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::CaseInsensitiveComparer ^ DefaultInvariant { System::Collections::CaseInsensitiveComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultInvariant : System.Collections.CaseInsensitiveComparer" Usage="System.Collections.CaseInsensitiveComparer.DefaultInvariant" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.CaseInsensitiveComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wystąpienie <see cref="T:System.Collections.CaseInsensitiveComparer" /> , które jest skojarzone z <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> i, które jest zawsze dostępne.</summary>
        <value>Wystąpienie <see cref="T:System.Collections.CaseInsensitiveComparer" /> , które jest skojarzone z <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Procedury porównania używają <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> do określenia kolejności sortowania i reguł wielkości liter. Porównania ciągów mogą mieć różne wyniki, w zależności od kultury. Aby uzyskać więcej informacji na temat porównań specyficznych dla <xref:System.Globalization> kultury, zobacz Przestrzeń nazw oraz [globalizacja i lokalizacja](~/docs/standard/globalization-localization/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy tabelę skrótów z rozróżnianiem wielkości liter i tabelę skrótów bez uwzględniania wielkości liter i pokazuje różnicę w ich zachowaniu, nawet jeśli oba zawierają te same elementy.  
  
 [!code-cpp[System.Collections.CaseInsensitive#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CPP/caseinsensitive.cpp#1)]
 [!code-csharp[System.Collections.CaseInsensitive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CS/caseinsensitive.cs#1)]
 [!code-vb[System.Collections.CaseInsensitive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/VB/caseinsensitive.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="T:System.Globalization.CompareInfo" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">Wykonywanie niezależnych od kultury operacji na ciągach w kolekcjach</related>
      </Docs>
    </Member>
  </Members>
</Type>
