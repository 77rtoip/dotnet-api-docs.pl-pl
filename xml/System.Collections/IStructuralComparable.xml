<Type Name="IStructuralComparable" FullName="System.Collections.IStructuralComparable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9453bb03072dbb0e96a839cb23cd4e2a2b274978" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69333756" /></Metadata><TypeSignature Language="C#" Value="public interface IStructuralComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStructuralComparable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IStructuralComparable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStructuralComparable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStructuralComparable" />
  <TypeSignature Language="F#" Value="type IStructuralComparable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Obsługuje porównanie strukturalne obiektów kolekcji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.IStructuralComparable> Interfejs umożliwia implementowanie dostosowań niestandardowych dla elementów członkowskich kolekcji. Oznacza to, że można zdefiniować dokładne znaczenie dla jednego obiektu kolekcji, aby poprzedzać, obserwować lub wystąpić w tym samym położeniu w kolejności sortowania jako drugi obiekt kolekcji. Następnie można określić, że ta definicja ma być używana z typem kolekcji akceptującym <xref:System.Collections.IStructuralComparable> interfejs.  
  
 Interfejs ma pojedynczy element członkowski <xref:System.Collections.IStructuralComparable.CompareTo%2A>, który określa, czy bieżący obiekt kolekcji jest mniejszy niż lub większy niż drugi obiekt w kolejności sortowania. Rzeczywiste porównanie elementów członkowskich lub elementów w bieżącym wystąpieniu z tymi w drugim obiekcie jest wykonywane przez <xref:System.Collections.IComparer> implementację interfejsu, która zawiera definicję niestandardowego porównania.  
  
> [!NOTE]
>  <xref:System.Collections.IStructuralComparable> Interfejs obsługuje tylko porównania strukturalne w celu sortowania lub porządkowania. <xref:System.Collections.IStructuralEquatable> Interfejs obsługuje niestandardowe porównania dla równości strukturalnej.  
  
 .NET Framework udostępnia dwa domyślne funkcje porównujące. Jeden jest zwracany przez <xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=nameWithType> Właściwość; drugi jest zwracany <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> przez właściwość.  
  
 Klasy uniwersalnej kolekcji (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, itd.) <xref:System.Collections.IStructuralComparable> i <xref:System.Array> Klasa zapewniają jawne implementacje interfejsu. Poprzez rzutowanie ( C#w) lub konwertowanie (w Visual Basic) bieżące wystąpienie tablicy lub krotki do <xref:System.Collections.IStructuralComparable> <xref:System.Collections.IComparer> wartości interfejsu i dostarczenie implementacji jako argumentu do <xref:System.Collections.IStructuralComparable.CompareTo%2A> metody, można zdefiniować niestandardową kolejność sortowania dla tablicy lub kolekcji. Nie jest jednak wywoływana <xref:System.Collections.IStructuralComparable.CompareTo%2A> Metoda bezpośrednio w większości przypadków. Zamiast tego <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>Metoda jest wywoływana przez sortowanie metod, takich jak. <xref:System.Collections.IStructuralComparable.CompareTo%2A> W takim przypadku należy zdefiniować <xref:System.Collections.IComparer> implementację i przekazać ją jako argument do metody sortowania lub konstruktora klasy obiektu kolekcji. <xref:System.Collections.IStructuralComparable.CompareTo%2A> Metoda z niestandardową funkcją porównującą jest następnie wywoływana automatycznie za każdym razem, gdy kolekcja jest sortowana.  
  
   
  
## Examples  
 Poniższy przykład tworzy tablicę <xref:System.Tuple%606> obiektów, które zawierają dane populacji dla trzech miast USA od 1960 do 2000. Pierwszy składnik Sextuple jest nazwą miasta. Pozostałe pięć składników reprezentuje populację w okresach dziesięciu lat od 1960 do 2000.  
  
 `PopulationComparer` Klasa<xref:System.Collections.IComparer> zawiera implementację, która umożliwia posortowanie tablicy sextuples według jednego z jej składników. Dwie wartości są dostarczane do `PopulationComparer` klasy w jej konstruktorze: pozycja składnika definiująca porządek sortowania i wartość logiczna wskazująca, czy obiekty krotek mają być sortowane w kolejności rosnącej czy malejącej.  
  
 Przykład wyświetla elementy w tablicy w kolejności niesortowanej, sortuje je według trzeciego składnika (populacji w 1970) i wyświetla je, a następnie sortuje według szóstego składnika (populacja w 2000) i wyświetla je. Należy zauważyć, że przykład nie wywołuje <xref:System.Collections.IStructuralComparable.CompareTo%2A> bezpośrednio metody. Metoda jest wywoływana niejawnie przez <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> metodę dla każdego obiektu krotki w tablicy.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.IStructuralEquatable" />
    <altmember cref="P:System.Collections.StructuralComparisons.StructuralComparer" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Object, comparer As IComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj * System.Collections.IComparer -&gt; int" Usage="iStructuralComparable.CompareTo (other, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt do porównania z bieżącym wystąpieniem.</param>
        <param name="comparer">Obiekt, który porównuje elementy członkowskie bieżącego obiektu kolekcji z odpowiednimi członkami <paramref name="other" />.</param>
        <summary>Określa, czy bieżący obiekt kolekcji poprzedza, występuje w tym samym położeniu co lub w kolejności sortowania.</summary>
        <returns>Liczba całkowita ze znakiem, która wskazuje relację bieżącego obiektu kolekcji <paramref name="other" /> na w kolejności sortowania:<br /> -Jeśli jest mniejsza niż 0, bieżące wystąpienie poprzedza <paramref name="other" />.<br /> -Jeśli 0, bieżące wystąpienie i <paramref name="other" /> jest równe.<br /> -Jeśli jest większa niż 0, bieżące wystąpienie jest <paramref name="other" />następujące.  
  
 <list type="table"><listheader><term> Wartość zwracana 
 </term><description> Opis 
 </description></listheader><item><term> -1 
 </term><description> Bieżące wystąpienie poprzedza <paramref name="other" />.  
  
 </description></item><item><term> 0 
 </term><description> Bieżące wystąpienie i <paramref name="other" /> jest równe.  
  
 </description></item><item><term> 1 
 </term><description> Bieżące wystąpienie jest następujące <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.IStructuralComparable.CompareTo%2A> Metoda obsługuje niestandardowe porównanie strukturalne i sortowanie obiektów array i krotek. Metoda wywołuje metodę<xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> obiektu, aby porównać poszczególne elementy tablicy lub składniki krotek, rozpoczynając od pierwszego elementu lub składnika. `comparer` <xref:System.Collections.IStructuralComparable.CompareTo%2A> Poszczególne wywołania do <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> końca <xref:System.Collections.IStructuralComparable.CompareTo%2A> i Metoda zwracają wartość, gdy spełniony jest jeden z następujących warunków:  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> Metoda zwraca wartość-1.  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> Metoda zwraca 1.  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> Metoda jest wywoływana dla ostatniego elementu lub składnika w obiekcie kolekcji.  
  
   
  
## Examples  
 Poniższy przykład tworzy tablicę <xref:System.Tuple%606> obiektów, które zawierają dane populacji dla trzech miast USA od 1960 do 2000. Pierwszy składnik Sextuple jest nazwą miasta. Pozostałe pięć składników reprezentuje populację w okresach dziesięciu lat od 1960 do 2000.  
  
 `PopulationComparer` Klasa<xref:System.Collections.IComparer> zawiera implementację, która umożliwia posortowanie tablicy sextuples według jednego z jej składników. Dwie wartości są dostarczane do `PopulationComparer` klasy w jej konstruktorze: położenie składnika, który definiuje porządek sortowania, <xref:System.Boolean> oraz wartość wskazującą, czy obiekty krotek mają być sortowane w kolejności rosnącej czy malejącej.  
  
 Przykład wyświetla elementy w tablicy w kolejności niesortowanej, sortuje je według trzeciego składnika (populacji w 1970) i wyświetla je, a następnie sortuje według szóstego składnika (populacja w 2000) i wyświetla je. Należy zauważyć, że przykład nie wywołuje <xref:System.Collections.IStructuralComparable.CompareTo%2A?displayProperty=nameWithType> bezpośrednio implementacji. Metoda jest wywoływana niejawnie przez <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> metodę dla każdego obiektu krotki w tablicy.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">To wystąpienie i <paramref name="other" /> nie jest tym samym typem.</exception>
        <altmember cref="T:System.Collections.IComparer" />
      </Docs>
    </Member>
  </Members>
</Type>
