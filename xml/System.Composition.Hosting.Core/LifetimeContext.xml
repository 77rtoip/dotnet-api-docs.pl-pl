<Type Name="LifetimeContext" FullName="System.Composition.Hosting.Core.LifetimeContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4991b380146d99d422c00f743125823c1462045f" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39817411" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class LifetimeContext : System.Composition.CompositionContext, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LifetimeContext extends System.Composition.CompositionContext implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Composition.Hosting.Core.LifetimeContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LifetimeContext&#xA;Inherits CompositionContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class LifetimeContext sealed : System::Composition::CompositionContext, IDisposable" />
  <TypeSignature Language="F#" Value="type LifetimeContext = class&#xA;    inherit CompositionContext&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.Hosting</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Composition.CompositionContext</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="c5945-101">Reprezentuje węzeł w drzewie okresu istnienia.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c5945-101">Represents a node in the lifetime tree.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="c5945-102"><xref:System.Composition.Hosting.Core.LifetimeContext> Obiektu to jednostka do udostępniania dla części udostępnionych.</span><span class="sxs-lookup"><span data-stu-id="c5945-102">The <xref:System.Composition.Hosting.Core.LifetimeContext> object is the unit of sharing for shared parts.</span></span> <span data-ttu-id="c5945-103">Ona kontroluje usuwania powiązanych części i może służyć do pobierania wystąpień, w ramach istniejących operacji tworzenia lub jako podstawy nowej operacji tworzenia.</span><span class="sxs-lookup"><span data-stu-id="c5945-103">It controls the disposal of bound parts and can be used to retrieve instances, either as part of an existing composition operation or as the basis of a new composition operation.</span></span> <span data-ttu-id="c5945-104">Kontekst poszczególnych okres istnienia może być oznaczony zawierać części, które są ograniczone przez konkretnego granice do udostępniania.</span><span class="sxs-lookup"><span data-stu-id="c5945-104">An individual lifetime context can be marked to contain parts that are constrained by particular sharing boundaries.</span></span>

<span data-ttu-id="c5945-105">Ten obiekt zawiera dwie części niezależnie chronionego udostępnionego stanu: udostępnionego wystąpienia, a powiązany wystąpieniach.</span><span class="sxs-lookup"><span data-stu-id="c5945-105">This object contains two pieces of independently protected shared state: shared part instances and bound part instances.</span></span> <span data-ttu-id="c5945-106">Wystąpienie część udostępniona jest wolne od blokady odczytu i nie powoduje problemów, jeśli jest ona dodawana do podczas usuwania.</span><span class="sxs-lookup"><span data-stu-id="c5945-106">A shared part instance is lock-free, readable, and does not result in issues if it is added to during disposal.</span></span> <span data-ttu-id="c5945-107">Jest chroniony przez Trwa blokowanie pliku sam.</span><span class="sxs-lookup"><span data-stu-id="c5945-107">It is protected by being locked itself.</span></span> <span data-ttu-id="c5945-108">W obszarze Ta blokada nieunikniony sposób nosi nazwę logiki aktywacji.</span><span class="sxs-lookup"><span data-stu-id="c5945-108">Activation logic is unavoidably called under this lock.</span></span> <span data-ttu-id="c5945-109">Wystąpienie część powiązane są zawsze chronione przez zablokowanie <see langword="this" />i nigdy nie mają być zapisywane po usuwania.</span><span class="sxs-lookup"><span data-stu-id="c5945-109">A bound part instance is always protected by locking <see langword="this" />, and should never be written to after disposal.</span></span> <span data-ttu-id="c5945-110">Wystąpienie część powiązanej jest ustawiona na <see langword="null" /> w ramach blokady w <xref:System.Composition.Hosting.Core.LifetimeContext.Dispose> metody.</span><span class="sxs-lookup"><span data-stu-id="c5945-110">A bound part instance is set to <see langword="null" /> under a lock in the <xref:System.Composition.Hosting.Core.LifetimeContext.Dispose> method.</span></span> <span data-ttu-id="c5945-111">Zapisywanie zezwolono na po usuwania dla wystąpienia powiązanej części, efekt byłby w częściach możliwe do rozporządzania nie zostały udostępnione.</span><span class="sxs-lookup"><span data-stu-id="c5945-111">If writing were allowed after disposal for a bound part instance, it would result in disposable parts not being released.</span></span> <span data-ttu-id="c5945-112">Metodę dispose dla części powiązanej nazywa się poza blokady.</span><span class="sxs-lookup"><span data-stu-id="c5945-112">The dispose method on a bound part is called outside of the lock.</span></span> 
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBoundInstance">
      <MemberSignature Language="C#" Value="public void AddBoundInstance (IDisposable instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBoundInstance(class System.IDisposable instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.AddBoundInstance(System.IDisposable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBoundInstance (instance As IDisposable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBoundInstance(IDisposable ^ instance);" />
      <MemberSignature Language="F#" Value="member this.AddBoundInstance : IDisposable -&gt; unit" Usage="lifetimeContext.AddBoundInstance instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.IDisposable" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="c5945-113">Część.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-113">The part.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5945-114">Wiąże okres istnienia możliwe do rozporządzania część tego kontekstu okresu istnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-114">Binds the lifetime of a disposable part to this lifetime context.</span>
          </span>
        </summary>
        <remarks></remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c5945-115">Operacja została wykonana dla zlikwidowanego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-115">The operation was performed on a disposed object.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AllocateSharingId">
      <MemberSignature Language="C#" Value="public static int AllocateSharingId ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AllocateSharingId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.AllocateSharingId" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateSharingId () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AllocateSharingId();" />
      <MemberSignature Language="F#" Value="static member AllocateSharingId : unit -&gt; int" Usage="System.Composition.Hosting.Core.LifetimeContext.AllocateSharingId " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5945-116">Generuje identyfikator, który może służyć do zlokalizowania udostępnionego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-116">Generates an identifier that can be used to locate shared part instances.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5945-117">Nowy unikatowy identyfikator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-117">A new unique identifier.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="lifetimeContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5945-118">Udostępnia kontekst okres istnienia, jak i wszystkie wystąpienia części powiązane z nim.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-118">Releases the lifetime context and any part instances bound to it.</span>
          </span>
        </summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FindContextWithin">
      <MemberSignature Language="C#" Value="public System.Composition.Hosting.Core.LifetimeContext FindContextWithin (string sharingBoundary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Hosting.Core.LifetimeContext FindContextWithin(string sharingBoundary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.FindContextWithin(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindContextWithin (sharingBoundary As String) As LifetimeContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Hosting::Core::LifetimeContext ^ FindContextWithin(System::String ^ sharingBoundary);" />
      <MemberSignature Language="F#" Value="member this.FindContextWithin : string -&gt; System.Composition.Hosting.Core.LifetimeContext" Usage="lifetimeContext.FindContextWithin sharingBoundary" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Hosting.Core.LifetimeContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharingBoundary" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sharingBoundary">
          <span data-ttu-id="c5945-119">Granicy udostępniania można znaleźć w kontekście okres istnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-119">The sharing boundary to find a lifetime context within.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5945-120">Umożliwia znalezienie największą kontekstu okres istnienia w obrębie całego określonymi granicami udostępniania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-120">Finds the broadest lifetime context within all of the specified sharing boundaries.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5945-121">Największą okres istnienia kontekst w obrębie całego określonymi granicami udostępniania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-121">The broadest lifetime context within all of the specified sharing boundaries.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5945-122">Obecnie katalog główny nie może być granicą.</span><span class="sxs-lookup"><span data-stu-id="c5945-122">Currently, the root cannot be a boundary.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreate">
      <MemberSignature Language="C#" Value="public object GetOrCreate (int sharingId, System.Composition.Hosting.Core.CompositionOperation operation, System.Composition.Hosting.Core.CompositeActivator creator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetOrCreate(int32 sharingId, class System.Composition.Hosting.Core.CompositionOperation operation, class System.Composition.Hosting.Core.CompositeActivator creator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.GetOrCreate(System.Int32,System.Composition.Hosting.Core.CompositionOperation,System.Composition.Hosting.Core.CompositeActivator)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrCreate (sharingId As Integer, operation As CompositionOperation, creator As CompositeActivator) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetOrCreate(int sharingId, System::Composition::Hosting::Core::CompositionOperation ^ operation, System::Composition::Hosting::Core::CompositeActivator ^ creator);" />
      <MemberSignature Language="F#" Value="member this.GetOrCreate : int * System.Composition.Hosting.Core.CompositionOperation * System.Composition.Hosting.Core.CompositeActivator -&gt; obj" Usage="lifetimeContext.GetOrCreate (sharingId, operation, creator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharingId" Type="System.Int32" />
        <Parameter Name="operation" Type="System.Composition.Hosting.Core.CompositionOperation" />
        <Parameter Name="creator" Type="System.Composition.Hosting.Core.CompositeActivator" />
      </Parameters>
      <Docs>
        <param name="sharingId">
          <span data-ttu-id="c5945-123">Identyfikator część udostępniona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-123">The ID of the shared part.</span>
          </span>
        </param>
        <param name="operation">
          <span data-ttu-id="c5945-124">Operacja, w której chcesz utworzyć element, jeśli to konieczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-124">An operation in which to create a part, if necessary.</span>
          </span>
        </param>
        <param name="creator">
          <span data-ttu-id="c5945-125">Aktywator, która może aktywować nowe wystąpienie części, jeśli to konieczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-125">An activator that can activate a new part instance, if necessary.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5945-126">Pobiera wystąpienie część udostępniona, o określonym identyfikatorze lub — jeśli nie można odnaleźć wystąpienia części, tworzy i udostępnia wystąpienia części, przy użyciu określonego autora w ramach określonej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-126">Retrieves a shared part instance with the specified ID, or if the part instance can not be found, creates and shares a part instance using the specified creator within the specified operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5945-127">Część nowego lub pobrana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-127">The new or retrieved part.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5945-128">Ta metoda jest wolne od blokady Jeśli wystąpienie część już istnieje.</span><span class="sxs-lookup"><span data-stu-id="c5945-128">This method is lock-free if the part instance already exists.</span></span> <span data-ttu-id="c5945-129">Jeśli wystąpienie część musi zostać utworzona, blokadę nastąpi przejście, będzie serializować innych zapisy, które używają tej metody (współbieżnego odczytywania będą nadal bezpiecznego i wolne od blokady).</span><span class="sxs-lookup"><span data-stu-id="c5945-129">If the part instance must be created, a lock will be taken that will serialize other writes that use this method (concurrent reads will continue to be safe and lock-free).</span></span> <span data-ttu-id="c5945-130">Ważne jest, że kompozycji, a zatem pozyskiwania blokady jest ściśle liścia do-katalog główny w drzewie okresu istnienia.</span><span class="sxs-lookup"><span data-stu-id="c5945-130">It is important that the composition, and thus lock acquisition, is strictly leaf-to-root in the lifetime tree.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lifetimeContext.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c5945-131">Zwraca reprezentację ciągu tego <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-131">Returns the string representation of this <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5945-132">Reprezentacja ciągu <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-132">The string representation of this <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> object.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport">
      <MemberSignature Language="C#" Value="public override bool TryGetExport (System.Composition.Hosting.Core.CompositionContract contract, out object export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryGetExport(class System.Composition.Hosting.Core.CompositionContract contract, [out] object&amp; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.TryGetExport(System.Composition.Hosting.Core.CompositionContract,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryGetExport (contract As CompositionContract, ByRef export As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryGetExport(System::Composition::Hosting::Core::CompositionContract ^ contract, [Runtime::InteropServices::Out] System::Object ^ % export);" />
      <MemberSignature Language="F#" Value="override this.TryGetExport : System.Composition.Hosting.Core.CompositionContract *  -&gt; bool" Usage="lifetimeContext.TryGetExport (contract, export)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Composition.Hosting.Core.CompositionContract" />
        <Parameter Name="export" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="contract">
          <span data-ttu-id="c5945-133">Kontrakt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-133">The contract.</span>
          </span>
        </param>
        <param name="export">
          <span data-ttu-id="c5945-134">Po powrocie z tej metody zawiera wystąpienie kontraktu, jeśli jest dostępna; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-134">After this method returns, contains the contract instance if available; otherwise, <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c5945-135">Pobiera wystąpienie umowy w kontekście kompozycji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-135">Retrieves a contract instance from the composition context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c5945-136">
            <see langword="true" /> Jeśli pobrano wystąpienie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c5945-136">
              <see langword="true" /> if the instance was retrieved; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>