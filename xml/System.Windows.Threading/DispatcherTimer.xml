<Type Name="DispatcherTimer" FullName="System.Windows.Threading.DispatcherTimer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2a9d009098a7d8eaa53affce0dc2ed5c47170486" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36463692" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DispatcherTimer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DispatcherTimer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherTimer" />
  <TypeSignature Language="VB.NET" Value="Public Class DispatcherTimer" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherTimer" />
  <TypeSignature Language="F#" Value="type DispatcherTimer = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Czasomierz, który jest zintegrowany z <see cref="T:System.Windows.Threading.Dispatcher" /> kolejki, które są przetwarzane w określonym interwale czasu i z priorytetem.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer> Jest ponownie oceniane w górnej części każdego <xref:System.Windows.Threading.Dispatcher> pętli.  
  
 Czasomierze nie ma gwarancji do wykonania, dokładnie tak, gdy występuje przedział czasu, ale ma gwarancji nie wykonać przed wystąpieniem przedział czasu.  Jest to spowodowane <xref:System.Windows.Threading.DispatcherTimer> operacji są umieszczane na <xref:System.Windows.Threading.Dispatcher> kolejki, podobnie jak inne operacje.  Gdy <xref:System.Windows.Threading.DispatcherTimer> wykonuje operację jest zależny od innych zadań w kolejce i ich priorytety.  
  
 Jeśli <xref:System.Timers.Timer?displayProperty=nameWithType> jest używany w [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] aplikacji, warto zauważyć, że <xref:System.Timers.Timer?displayProperty=nameWithType> działa w innym wątku, a następnie [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] wątku.  Aby uzyskać dostęp do obiektów na [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] wątku, konieczne jest po operacji na <xref:System.Windows.Threading.Dispatcher> z [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] wątku przy użyciu <xref:System.Windows.Threading.Dispatcher.Invoke%2A> lub <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. Kiedy korzystać z <xref:System.Windows.Threading.DispatcherTimer> przeciwieństwie do <xref:System.Timers.Timer?displayProperty=nameWithType> to <xref:System.Windows.Threading.DispatcherTimer> działa na tym samym wątku, co <xref:System.Windows.Threading.Dispatcher> i <xref:System.Windows.Threading.DispatcherPriority> można ustawić <xref:System.Windows.Threading.DispatcherTimer>.  
  
 A <xref:System.Windows.Threading.DispatcherTimer> będzie podtrzymywania obiektu zawsze, gdy metody obiektu są powiązane z czasomierza.  
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Threading.DispatcherTimer> który aktualizuje zawartość <xref:System.Windows.Controls.Label> i wywołuje <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> metoda <xref:System.Windows.Input.CommandManager>.  
  
 A <xref:System.Windows.Threading.DispatcherTimer> obiektu o nazwie `dispatcherTimer` jest tworzony.  Program obsługi zdarzeń `dispatcherTimer_Tick` jest dodawany do <xref:System.Windows.Threading.DispatcherTimer.Tick> zdarzenie `dispatcherTimer`.  <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> Ma ustawioną wartość 1 sekundę przy użyciu <xref:System.Windows.Duration.TimeSpan%2A> obiekt i czasomierz jest uruchomiona.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 <xref:System.Windows.Threading.DispatcherTimer.Tick> Aktualizacje programu obsługi zdarzeń <xref:System.Windows.Controls.Label> który wyświetla bieżącą drugi, i wywołuje <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> na <xref:System.Windows.Input.CommandManager>.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Threading.DispatcherTimer" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Threading.DispatcherTimer" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer> działa na <xref:System.Windows.Threading.Dispatcher> bieżącego wątku w <xref:System.Windows.Threading.DispatcherPriority.Background> priorytet.  Aby określić inną <xref:System.Windows.Threading.Dispatcher>, użyj następującego konstruktora: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer priority" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">Priorytet, jaką można wywołać czasomierza.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Threading.DispatcherTimer" /> klasy, która przetwarza zdarzenia w określony priorytet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer> działa na <xref:System.Windows.Threading.Dispatcher> bieżącego wątku.  Aby określić inną <xref:System.Windows.Threading.Dispatcher>, użyj następującego konstruktora: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (priority, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="priority">Priorytet, jaką można wywołać czasomierza.</param>
        <param name="dispatcher">Dyspozytor czasomierz jest skojarzony.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Threading.DispatcherTimer" /> klasy, w którym jest uruchomiona na określonym <see cref="T:System.Windows.Threading.Dispatcher" /> na określony priorytet.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dispatcher" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (TimeSpan interval, System.Windows.Threading.DispatcherPriority priority, EventHandler callback, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.TimeSpan interval, valuetype System.Windows.Threading.DispatcherPriority priority, class System.EventHandler callback, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(TimeSpan interval, System::Windows::Threading::DispatcherPriority priority, EventHandler ^ callback, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : TimeSpan * System.Windows.Threading.DispatcherPriority * EventHandler * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (interval, priority, callback, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="callback" Type="System.EventHandler" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="interval">Okres czasu między taktami.</param>
        <param name="priority">Priorytet, jaką można wywołać czasomierza.</param>
        <param name="callback">Program obsługi zdarzeń do wywołania, gdy <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> zdarzenie.</param>
        <param name="dispatcher">Dyspozytor czasomierz jest skojarzony.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Threading.DispatcherTimer" /> klasy, który używa określony interwał czasu, priorytet, program obsługi zdarzeń, a <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="interval" /> jest mniejsza niż 0 lub większą niż <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Windows.Threading.Dispatcher" /> skojarzony z tym <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <value>Dyspozytor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer.Dispatcher%2A> Właściwości jest określany przy tworzeniu <xref:System.Windows.Threading.DispatcherTimer> obiektu.  <xref:System.Windows.Threading.Dispatcher> Właściwość jest ustawiona na bieżącą <xref:System.Windows.Threading.Dispatcher> w czasie tworzenia chyba że innej <xref:System.Windows.Threading.Dispatcher> jest określona.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public TimeSpan Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Interval { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : TimeSpan with get, set" Usage="System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia czas między taktami.</summary>
        <value>Okres czasu między taktami. Wartość domyślna to 00:00:00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czasomierze nie ma gwarancji do wykonania, dokładnie tak, gdy występuje przedział czasu, ale ma gwarancji nie wykonać przed wystąpieniem przedział czasu.  Jest to spowodowane <xref:System.Windows.Threading.DispatcherTimer> operacji są umieszczane na <xref:System.Windows.Threading.Dispatcher> kolejki, podobnie jak inne operacje.  Gdy <xref:System.Windows.Threading.DispatcherTimer> wykonuje operację jest zależny od innych zadań w kolejce i ich priorytety.  
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Threading.DispatcherTimer>.  Nowy <xref:System.Windows.Threading.DispatcherTimer> obiektu o nazwie `dispatcherTimer` jest tworzony.  Program obsługi zdarzeń `dispatcherTimer_Tick` jest dodawany do <xref:System.Windows.Threading.DispatcherTimer.Tick> zdarzeń.  <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> Ma ustawioną wartość 1 sekundę przy użyciu <xref:System.TimeSpan> obiektu.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="interval" /> jest mniejsza niż 0 lub większą niż <see cref="F:System.Int32.MaxValue" /> milisekund.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy czasomierz jest uruchomiona.</summary>
        <value>
          <see langword="true" /> Włączenie czasomierza; w przeciwnym razie <see langword="false" />.  Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> należy wybrać opcję `true` dla <xref:System.Windows.Threading.DispatcherTimer.Tick> się zdarzenia.  
  
 Wywoływanie <xref:System.Windows.Threading.DispatcherTimer.Start%2A> ustawia <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> do `true`.  
  
 Wywoływanie <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> ustawia <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> do `false`.  
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Threading.DispatcherTimer>.  Nowy <xref:System.Windows.Threading.DispatcherTimer> obiektu o nazwie `dispatcherTimer` jest tworzony.  Program obsługi zdarzeń `dispatcherTimer_Tick` jest dodawany do <xref:System.Windows.Threading.DispatcherTimer.Tick> zdarzeń.  <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> Ma ustawioną wartość 1 sekundę przy użyciu <xref:System.TimeSpan> obiektu.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="dispatcherTimer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Uruchamia <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> do `false` po uruchomieniu czasomierza zatrzymuje czasomierza.  
  
 Ustawienie <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> do `true` po zatrzymaniu czasomierza uruchamia czasomierz.  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A> Ustawia <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> do `true`.  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A> Resetuje licznik <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Threading.DispatcherTimer>.  Nowy <xref:System.Windows.Threading.DispatcherTimer> obiektu o nazwie `dispatcherTimer` jest tworzony.  Program obsługi zdarzeń `dispatcherTimer_Tick` jest dodawany do <xref:System.Windows.Threading.DispatcherTimer.Tick> zdarzeń.  <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> Ma ustawioną wartość 1 sekundę przy użyciu <xref:System.Windows.Duration.TimeSpan%2A> obiektu.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="dispatcherTimer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zatrzymuje <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> do `false` po uruchomieniu czasomierza zatrzymuje czasomierza.  
  
 Ustawienie <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> do `true` po zatrzymaniu czasomierza uruchamia czasomierz.  
  
 Wywoływanie <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> ustawia <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> do `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obiekt danych zdefiniowane przez użytkownika.</summary>
        <value>Dane zdefiniowane przez użytkownika.  Wartość domyślna to <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.DispatcherTimer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po upłynięciu interwału czasomierza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Threading.DispatcherTimer.Tick> obsługi zdarzeń.  Aktualizacje programu obsługi zdarzeń <xref:System.Windows.Controls.Label> który wyświetla bieżącą drugi, i wywołuje <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> na <xref:System.Windows.Input.CommandManager>.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>