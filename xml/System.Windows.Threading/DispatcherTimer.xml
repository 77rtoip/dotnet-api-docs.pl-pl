<Type Name="DispatcherTimer" FullName="System.Windows.Threading.DispatcherTimer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4b2e50f88278a4455d96bba6b8bcca36042f334c" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69445706" /></Metadata><TypeSignature Language="C#" Value="public class DispatcherTimer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DispatcherTimer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherTimer" />
  <TypeSignature Language="VB.NET" Value="Public Class DispatcherTimer" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherTimer" />
  <TypeSignature Language="F#" Value="type DispatcherTimer = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Czasomierz, który jest zintegrowany z <see cref="T:System.Windows.Threading.Dispatcher" /> kolejką, która jest przetwarzana w określonym przedziale czasu i o określonym priorytecie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest on obliczany w górnej części każdej <xref:System.Windows.Threading.Dispatcher> pętli. <xref:System.Windows.Threading.DispatcherTimer>  
  
 Czasomierze nie są gwarantowane do wykonania dokładnie w przypadku przedziału czasowego, ale nie są gwarantowane przed upływem interwału czasu.  Wynika to z <xref:System.Windows.Threading.DispatcherTimer> faktu, że operacje <xref:System.Windows.Threading.Dispatcher> są umieszczane w kolejce, podobnie jak w przypadku innych operacji.  Gdy wykonanie <xref:System.Windows.Threading.DispatcherTimer> operacji jest zależne od innych zadań w kolejce i ich priorytetów.  
  
 Jeśli jest używana [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] w aplikacji, <xref:System.Timers.Timer?displayProperty=nameWithType> warto zauważyć, że są uruchamiane w innym wątku niż [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] wątek. <xref:System.Timers.Timer?displayProperty=nameWithType>  Aby można było uzyskać dostęp do obiektów [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] w wątku, konieczne jest opublikowanie operacji <xref:System.Windows.Threading.Dispatcher> na [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] wątku przy użyciu <xref:System.Windows.Threading.Dispatcher.Invoke%2A> lub <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.DispatcherTimer> Powody używania a zamiast <xref:System.Timers.Timer?displayProperty=nameWithType> tego są <xref:System.Windows.Threading.DispatcherTimer> uruchamiane <xref:System.Windows.Threading.Dispatcher> wtym<xref:System.Windows.Threading.DispatcherTimer>samym wątku, w którym możnaustawićna.<xref:System.Windows.Threading.DispatcherPriority>  
  
 Obiekt <xref:System.Windows.Threading.DispatcherTimer> stanie się aktywny, gdy metody obiektu są powiązane z czasomierzem.  
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Threading.DispatcherTimer> obiekt, który aktualizuje zawartość <xref:System.Windows.Controls.Label> a i <xref:System.Windows.Input.CommandManager>wywołuje <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> metodę w.  
  
 Utworzono obiekt o `dispatcherTimer`nazwie. <xref:System.Windows.Threading.DispatcherTimer>  Procedura obsługi `dispatcherTimer_Tick` zdarzeń jest dodawana <xref:System.Windows.Threading.DispatcherTimer.Tick> do zdarzenia `dispatcherTimer`.  Jest ustawiona na 1 sekundę <xref:System.Windows.Duration.TimeSpan%2A> przy użyciu obiektu, a czasomierz jest uruchamiany. <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 Program obsługi <xref:System.Windows.Controls.Label> <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> zdarzeń aktualizuje, który wyświetla bieżącą sekundę, <xref:System.Windows.Input.CommandManager>i wywołuje na. <xref:System.Windows.Threading.DispatcherTimer.Tick>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Threading.DispatcherTimer" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Threading.DispatcherTimer" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer>uruchamiany na <xref:System.Windows.Threading.Dispatcher> bieżącym wątku w <xref:System.Windows.Threading.DispatcherPriority.Background> priorytecie.  Aby określić inny <xref:System.Windows.Threading.Dispatcher>, użyj następującego konstruktora: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer priority" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">Priorytet, dla którego ma zostać wywołany czasomierz.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Threading.DispatcherTimer" /> klasy, które przetwarza zdarzenia czasomierza o określonym priorytecie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer>działa na <xref:System.Windows.Threading.Dispatcher> bieżącym wątku.  Aby określić inny <xref:System.Windows.Threading.Dispatcher>, użyj następującego konstruktora: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (priority, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="priority">Priorytet, dla którego ma zostać wywołany czasomierz.</param>
        <param name="dispatcher">Dyspozytor, z którym jest skojarzony czasomierz.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Threading.DispatcherTimer" /> klasy, która jest uruchamiana na określonym <see cref="T:System.Windows.Threading.Dispatcher" /> priorytecie.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dispatcher" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (TimeSpan interval, System.Windows.Threading.DispatcherPriority priority, EventHandler callback, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.TimeSpan interval, valuetype System.Windows.Threading.DispatcherPriority priority, class System.EventHandler callback, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(TimeSpan interval, System::Windows::Threading::DispatcherPriority priority, EventHandler ^ callback, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : TimeSpan * System.Windows.Threading.DispatcherPriority * EventHandler * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (interval, priority, callback, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="callback" Type="System.EventHandler" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="interval">Okres między taktami.</param>
        <param name="priority">Priorytet, dla którego ma zostać wywołany czasomierz.</param>
        <param name="callback">Procedura obsługi zdarzeń do wywołania po <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> wystąpieniu zdarzenia.</param>
        <param name="dispatcher">Dyspozytor, z którym jest skojarzony czasomierz.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Threading.DispatcherTimer" /> klasy, które używa określonego interwału czasu, priorytetu, programu obsługi zdarzeń i <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" />jest <see langword="null" />.

—lub—

          <paramref name="dispatcher" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="interval" />jest mniejsza niż 0 lub większa niż <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera skojarzoną z tym <see cref="T:System.Windows.Threading.DispatcherTimer" />elementem. <see cref="T:System.Windows.Threading.Dispatcher" /></summary>
        <value>Dyspozytor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość jest określana podczas tworzenia <xref:System.Windows.Threading.DispatcherTimer> obiektu. <xref:System.Windows.Threading.DispatcherTimer.Dispatcher%2A>  Właściwość jest ustawiana na bieżącą <xref:System.Windows.Threading.Dispatcher> podczas tworzenia, o ile nie określono innego <xref:System.Windows.Threading.Dispatcher>. <xref:System.Windows.Threading.Dispatcher>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public TimeSpan Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Interval { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : TimeSpan with get, set" Usage="System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia okres czasu między taktami czasomierza.</summary>
        <value>Okres między taktami. Wartość domyślna to 00:00:00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czasomierze nie są gwarantowane do wykonania dokładnie w przypadku przedziału czasowego, ale nie są gwarantowane przed upływem interwału czasu.  Wynika to z <xref:System.Windows.Threading.DispatcherTimer> faktu, że operacje <xref:System.Windows.Threading.Dispatcher> są umieszczane w kolejce, podobnie jak w przypadku innych operacji.  Gdy wykonanie <xref:System.Windows.Threading.DispatcherTimer> operacji jest zależne od innych zadań w kolejce i ich priorytetów.  
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Threading.DispatcherTimer>.  Tworzony jest <xref:System.Windows.Threading.DispatcherTimer> nowy obiekt `dispatcherTimer` o nazwie.  Procedura obsługi `dispatcherTimer_Tick` zdarzeń zostanie dodana <xref:System.Windows.Threading.DispatcherTimer.Tick> do zdarzenia.  Wartość jest ustawiona na 1 sekundę <xref:System.TimeSpan> przy użyciu obiektu. <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="interval" />jest mniejsza niż 0 lub większa niż <see cref="F:System.Int32.MaxValue" /> milisekunda.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy czasomierz jest uruchomiony.</summary>
        <value><see langword="true" />Jeśli czasomierz jest włączony; w przeciwnym razie. <see langword="false" />  Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>musi być ustawiona na `true` <xref:System.Windows.Threading.DispatcherTimer.Tick> dla zdarzenia, które ma zostać zgłoszone.  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A> Wywoływanie <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> zestawów do `true`.  
  
 <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> Wywoływanie <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> zestawów do `false`.  
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Threading.DispatcherTimer>.  Tworzony jest <xref:System.Windows.Threading.DispatcherTimer> nowy obiekt `dispatcherTimer` o nazwie.  Procedura obsługi `dispatcherTimer_Tick` zdarzeń zostanie dodana <xref:System.Windows.Threading.DispatcherTimer.Tick> do zdarzenia.  Wartość jest ustawiona na 1 sekundę <xref:System.TimeSpan> przy użyciu obiektu. <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="dispatcherTimer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Threading.DispatcherTimer" />Uruchamia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>pouruchomieniuczasomierza powodujezatrzymanieczasomierza.`false`  
  
 Ustawienie <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>momentuzatrzymania czasomierzapowodujeuruchomienieczasomierza.`true`  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A>ustawia <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> jako `true`.  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A>resetuje czasomierz <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Threading.DispatcherTimer>.  Tworzony jest <xref:System.Windows.Threading.DispatcherTimer> nowy obiekt `dispatcherTimer` o nazwie.  Procedura obsługi `dispatcherTimer_Tick` zdarzeń zostanie dodana <xref:System.Windows.Threading.DispatcherTimer.Tick> do zdarzenia.  Wartość jest ustawiona na 1 sekundę <xref:System.Windows.Duration.TimeSpan%2A> przy użyciu obiektu. <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="dispatcherTimer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kończy działanie <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>pouruchomieniuczasomierza powodujezatrzymanieczasomierza.`false`  
  
 Ustawienie <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>momentuzatrzymania czasomierzapowodujeuruchomienieczasomierza.`true`  
  
 <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> Wywoływanie <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> zestawów do `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obiekt danych zdefiniowany przez użytkownika.</summary>
        <value>Dane zdefiniowane przez użytkownika.  Wartość domyślna to <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.DispatcherTimer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po upłynięciu interwału czasomierza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Threading.DispatcherTimer.Tick> procedurę obsługi zdarzeń.  Program obsługi zdarzeń aktualizuje <xref:System.Windows.Controls.Label> , który wyświetla bieżącą sekundę, i wywołuje <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> na <xref:System.Windows.Input.CommandManager>.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
