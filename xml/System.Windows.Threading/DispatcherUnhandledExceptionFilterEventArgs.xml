<Type Name="DispatcherUnhandledExceptionFilterEventArgs" FullName="System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="af9044dcd025ed957654845b5d1f12d4b89f52e8" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69435273" /></Metadata><TypeSignature Language="C#" Value="public sealed class DispatcherUnhandledExceptionFilterEventArgs : System.Windows.Threading.DispatcherEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DispatcherUnhandledExceptionFilterEventArgs extends System.Windows.Threading.DispatcherEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DispatcherUnhandledExceptionFilterEventArgs&#xA;Inherits DispatcherEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherUnhandledExceptionFilterEventArgs sealed : System::Windows::Threading::DispatcherEventArgs" />
  <TypeSignature Language="F#" Value="type DispatcherUnhandledExceptionFilterEventArgs = class&#xA;    inherit DispatcherEventArgs" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dostarcza dane dla <see cref="T:System.Windows.Threading.Dispatcher" /> <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> zdarzenia.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenie występuje, gdy kod wykonywany przez metodę <xref:System.Windows.Threading.Dispatcher> zgłasza wyjątek, który nie jest obsługiwany. <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>  
  
 To <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> zdarzenie zapewnia metodę <xref:System.Windows.Threading.Dispatcher.UnhandledException> niezgłaszania zdarzenia.  <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> <xref:System.Windows.Threading.Dispatcher.UnhandledException> `false`Zdarzenie jest zgłaszane jako pierwsze, a jeśli wartość jest ustawiona na, zdarzenie nie zostanie zgłoszone. <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
    <altmember cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />
    <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
    <altmember cref="T:System.Windows.Threading.Dispatcher" />
  </Docs>
  <Members>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wyjątek, który został zgłoszony podczas wykonywania kodu za pomocą dyspozytora.</summary>
        <value>Wyjątek.</value>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      </Docs>
    </Member>
    <Member MemberName="RequestCatch">
      <MemberSignature Language="C#" Value="public bool RequestCatch { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequestCatch" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestCatch As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RequestCatch { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RequestCatch : bool with get, set" Usage="System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy wyjątek ma być przechwytywany oraz czy programy obsługi zdarzeń są wywoływane.</summary>
        <value><see langword="true" /><see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> Jeśli powinien zostać podniesiony; w przeciwnym razie <see langword="false" />.  Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> zdarzenie zapewnia metodę <xref:System.Windows.Threading.Dispatcher.UnhandledException> niezgłaszania zdarzenia.  <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> <xref:System.Windows.Threading.Dispatcher.UnhandledException> `false`Jest wywoływany jako pierwszy, a jeśli wartość jest ustawiona na, zdarzenie nie zostanie zgłoszone. <xref:System.Windows.Threading.Dispatcher.UnhandledException>  
  
 Poprzednia procedura obsługi w multiemisji zdarzenia mogła już ustawić tę właściwość `false`na, co oznacza, że wyjątek nie zostanie przechwycony.  Zachowanie "nie Przechwyć" przesłoni wszystkie inne osoby, ponieważ najprawdopodobniej będzie to scenariusz debugowania.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      </Docs>
    </Member>
  </Members>
</Type>
