<Type Name="ObjectQuery&lt;T&gt;" FullName="System.Data.Objects.ObjectQuery&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3f1246a4a2bd02cac1b4201f68c0e01b05ae85cb" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51323329" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ObjectQuery&lt;T&gt; : System.Data.Objects.ObjectQuery, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Linq.IOrderedQueryable&lt;T&gt;, System.Linq.IQueryable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectQuery`1&lt;T&gt; extends System.Data.Objects.ObjectQuery implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Linq.IOrderedQueryable, class System.Linq.IOrderedQueryable`1&lt;!T&gt;, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectQuery`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectQuery(Of T)&#xA;Inherits ObjectQuery&#xA;Implements IEnumerable(Of T), IOrderedQueryable(Of T), IQueryable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ObjectQuery : System::Data::Objects::ObjectQuery, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IOrderedQueryable&lt;T&gt;, System::Linq::IQueryable&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ObjectQuery&lt;'T&gt; = class&#xA;    inherit ObjectQuery&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IOrderedQueryable&lt;'T&gt;&#xA;    interface IOrderedQueryable&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.ObjectQuery</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IOrderedQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IOrderedQueryable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Typ jednostki zapytania.</typeparam>
    <summary>Reprezentuje wpisane zapytanie do modelu koncepcyjnego w kontekście danego obiektu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601> Klasa ogólna reprezentuje zapytanie, które zwraca kolekcję zero lub więcej obiektów określonego typu. <xref:System.Data.Objects.ObjectContext> Muszą być zdefiniowane przed mogą być wykonywane zapytanie obiektów. Ten kontekst udostępnia połączenia i informacje o metadanych, który jest wymagany do tworzenia i wykonywanie zapytania. Zapytanie obiektu jest wykonywane w następujących scenariuszach:  
  
-   Gdy jest działał, takich jak podczas `foreach` (C#) lub `For Each` wyliczenia (Visual Basic).  
  
-   Gdy jest przypisany do wypełnienia <xref:System.Collections.Generic.List%601> kolekcji.  
  
-   Gdy <xref:System.Data.Objects.ObjectQuery%601.Execute%2A> jawnie wywoływana jest metoda.  
  
 Samo zapytanie można utworzyć za pomocą [!INCLUDE[esql](~/includes/esql-md.md)] instrukcji lub zapytanie LINQ lub mogą być stopniowo wbudowane za pomocą metody konstruktora zapytań, które są zawarte w klasie. W każdym przypadku, wynik jest nowym <xref:System.Data.Objects.ObjectQuery%601> wystąpienie, które, gdy jawnie wykonywane lub wyliczenia za pośrednictwem, będzie wysyłać zapytania do źródła danych w celu wykonania i zwracają wyniki.  
  
 <xref:System.Data.Objects.ObjectQuery%601> Jest często typu jednostki, ale może też być z <xref:System.Data.Common.DbDataRecord> typu projekcji typu anonimowego, lub typ pierwotny, takich jak typu integer lub string. Aby uzyskać więcej informacji, zobacz [zapytań dotyczących obiektów](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
   
  
## Examples  
 W przykładzie w tym temacie opiera się na [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 W przykładzie pokazano sposób tworzenia wystąpienia <xref:System.Data.Objects.ObjectQuery%601> klasy.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="http://msdn.microsoft.com/library/9e7d8837-28c5-429d-a824-7bafb59724cf">Jednostki języka SQL</related>
    <related type="Article" href="http://msdn.microsoft.com/library/641f9b68-9046-47a1-abb0-1c8eaeda0e2d">LINQ do Jednostek</related>
    <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Objects.ObjectQuery`1" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601> Mogą być inicjowane w taki sposób, że reprezentuje jeden wynik skalarne i nie zbiór wyników skalarne. Niektóre metody rozszerzenia wymagają wyników kolekcji jako dane wejściowe. W tym przypadku <xref:System.ArgumentException> jest generowany, gdy wywoływana jest jedną z tych metod. Aby uzyskać więcej informacji, zobacz [zapytań dotyczących obiektów](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
 Aplikacja, generując zapytania SQL jednostki w czasie wykonywania, należy pamiętać o wszelkich ograniczeń długość polecenia źródła danych. Jednostka SQL nie wymusza ograniczeń w zakresie długości tekst polecenia zapytania.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty i kształtowania wyników (Entity Framework)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.Objects.ObjectContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (commandText As String, context As ObjectContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectQuery(System::String ^ commandText, System::Data::Objects::ObjectContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectQuery&lt;'T&gt; : string * System.Data.Objects.ObjectContext -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="new System.Data.Objects.ObjectQuery&lt;'T&gt; (commandText, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="context" Type="System.Data.Objects.ObjectContext" />
      </Parameters>
      <Docs>
        <param name="commandText">[!INCLUDE[esql](~/includes/esql-md.md)] Zapytania.</param>
        <param name="context">
          <see cref="T:System.Data.Objects.ObjectContext" /> Na podstawie którego ma zostać wykonane zapytanie.</param>
        <summary>Tworzy nową <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienia przy użyciu określonego [!INCLUDE[esql](~/includes/esql-md.md)] polecenia jako początkowego zapytania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacja, generując zapytania SQL jednostki w czasie wykonywania, należy pamiętać o wszelkich ograniczeń długość polecenia źródła danych. Jednostka SQL nie wymusza ograniczeń w zakresie długości tekst polecenia zapytania.  
  
   
  
## Examples  
 W przykładzie w tym temacie opiera się na [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie pokazano sposób tworzenia wystąpienia <xref:System.Data.Objects.ObjectQuery%601> klasy.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.Objects.ObjectContext context, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectQuery(System::String ^ commandText, System::Data::Objects::ObjectContext ^ context, System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectQuery&lt;'T&gt; : string * System.Data.Objects.ObjectContext * System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="new System.Data.Objects.ObjectQuery&lt;'T&gt; (commandText, context, mergeOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="context" Type="System.Data.Objects.ObjectContext" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="commandText">[!INCLUDE[esql](~/includes/esql-md.md)] Zapytania.</param>
        <param name="context">
          <see cref="T:System.Data.Objects.ObjectContext" /> Na podstawie którego ma zostać wykonane zapytanie.</param>
        <param name="mergeOption">Określa, jak jednostki, które są pobierane w drodze to zapytanie powinny zostać scalone z jednostkami, które zostały zwrócone z poprzednich zapytań w odniesieniu do tych samych <see cref="T:System.Data.Objects.ObjectContext" />.</param>
        <summary>Tworzy nową <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienia przy użyciu określonego [!INCLUDE[esql](~/includes/esql-md.md)] polecenia początkowego zapytania oraz opcji scalania określony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacja, generując zapytania SQL jednostki w czasie wykonywania, należy pamiętać o wszelkich ograniczeń długość polecenia źródła danych. Jednostka SQL nie wymusza ograniczeń w zakresie długości tekst polecenia zapytania.  
  
   
  
## Examples  
 Ten przykład jest oparty na [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). <xref:System.Data.Objects.ObjectQuery%601> Jest inicjowany za pomocą określonego zapytania <xref:System.Data.Objects.ObjectContext>, i <xref:System.Data.Objects.MergeOption>.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_select)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_select)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Distinct">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Distinct ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Distinct() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Distinct" />
      <MemberSignature Language="VB.NET" Value="Public Function Distinct () As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Distinct();" />
      <MemberSignature Language="F#" Value="member this.Distinct : unit -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Distinct " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ogranicza zapytanie do unikatowe wyniki.</summary>
        <returns>Nowy <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które odpowiada do oryginalnego wystąpienia z <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql">SELECT DISTINCT</see> stosowane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda konstruktora zapytanie zwraca <xref:System.Data.Objects.ObjectQuery%601> wystąpienia, który jest odpowiednikiem wartości oryginalnego zapytania z [SELECT DISTINCT](~/docs/framework/data/adonet/ef/language-reference/select-entity-sql.md) stosowane.  
  
 `DISTINCT` Nie można zastosować operatora do obiektu, który zawiera mapowania do innego niż porównywalne kolumny w źródle danych (na przykład ntext).  
  
   
  
## Examples  
 W przykładzie w tym temacie opiera się na [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie użyto <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> metodę, aby utworzyć nową <xref:System.Data.Objects.ObjectQuery%601> obiektu. Następnie wywołuje <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A> na nowym <xref:System.Data.Objects.ObjectQuery%601> można uzyskać unikatowe wyniki tego zapytania.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_unionall)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_unionall)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Except">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Except (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Except(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Except (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Except(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Except : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Except query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">
          <see cref="T:System.Data.Objects.ObjectQuery`1" /> Reprezentujący wyniki, które mają zostać wykluczone z kwerendy.</param>
        <summary>Ogranicza wyniki zapytania przez Wykluczanie wyników na podstawie wyników inne zapytanie obiektu.</summary>
        <returns>Nowy <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które odpowiada do oryginalnego wystąpienia z <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/except-entity-sql">EXCEPT</see> stosowane w zależności od określonego <paramref name="query" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podane `query` definiujący wyniki do wykluczenia muszą być tego samego typu lub typu, który jest zgodny z <xref:System.Data.Objects.ObjectQuery%601>.  
  
 Parametry, które są zdefiniowane w podanym `query` są scalane z parametrami, które są zdefiniowane w <xref:System.Data.Objects.ObjectQuery%601> wystąpienia. Parametry muszą być unikatowe w połączonych <xref:System.Data.Objects.ObjectParameterCollection>. Nie może być dwa parametry w połączonych kolekcji o takiej samej nazwie. Aby uzyskać więcej informacji, zobacz [metody konstruktora zapytań](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Wynikowe zapytanie dziedziczy połączenie z <xref:System.Data.Objects.ObjectQuery%601> wystąpienia, na którym <xref:System.Data.Objects.ObjectQuery%601.Except%2A> została wywołana.  
  
   
  
## Examples  
 Ten przykład jest oparty na [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie użyto <xref:System.Data.Objects.ObjectQuery%601.Except%2A> metodę, aby utworzyć nową <xref:System.Data.Objects.ObjectQuery%601> obiektu i następnie iterację przez wynik nowe zapytanie.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Except](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_except)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Except](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_except)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="query" /> Parametr jest <see langword="null" /> ani być pustym ciągiem.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty i kształtowania wyników (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;T&gt; Execute (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!T&gt; Execute(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectResult&lt;T&gt; ^ Execute(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="override this.Execute : System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectResult&lt;'T&gt;" Usage="objectQuery.Execute mergeOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">
          <see cref="T:System.Data.Objects.MergeOption" /> Do użycia podczas wykonywania zapytania. Wartość domyślna to <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
        <summary>Wykonuje zapytanie obiektów przy użyciu opcji scalania określony.</summary>
        <returns>
          <see cref="T:System.Data.Objects.ObjectResult`1" /> Zawiera kolekcję obiektów jednostek zwróconych przez zapytanie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest domyślną opcją scalania dla zapytań dotyczących obiektów <xref:System.Data.Objects.MergeOption.AppendOnly>. Aby uzyskać więcej informacji, zobacz [rozwiązanie tożsamości, zarządzania stanem i śledzenia zmian](http://msdn.microsoft.com/library/3bd49311-0e72-4ea4-8355-38fe57036ba0).  
  
   
  
## Examples  
 Ten przykład jest oparty na [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie zwracany jest <xref:System.Data.Objects.ObjectResult%601> z <xref:System.Data.Objects.ObjectQuery.Execute%2A> metody. Następnie pobiera moduł wyliczający i iterację w wynikach zapytania. Na końcu zwalnia moduł wyliczający i <xref:System.Data.Objects.ObjectResult%601> obiektu.  
  
 [!code-csharp[DP ObjectServices Concepts#QueryResult](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#queryresult)]
 [!code-vb[DP ObjectServices Concepts#QueryResult](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#queryresult)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt; GroupBy (string keys, string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;class System.Data.Common.DbDataRecord&gt; GroupBy(string keys, string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupBy (keys As String, projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of DbDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;System::Data::Common::DbDataRecord ^&gt; ^ GroupBy(System::String ^ keys, System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string * string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;" Usage="objectQuery.GroupBy (keys, projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">Kolumny klucza za pomocą którego do grupowania wyników.</param>
        <param name="projection">Lista wybranych właściwości, który definiuje projekcji.</param>
        <param name="parameters">Zero lub więcej parametrów, które są używane w przypadku tej metody.</param>
        <summary>Grupuje wyniki zapytania według określonych kryteriów.</summary>
        <returns>Nowy <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienia typu <see cref="T:System.Data.Common.DbDataRecord" /> oznacza to równoważne do oryginalnego wystąpienia z <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/group-by-entity-sql">GROUP BY</see> stosowane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.GroupBy%2A> stosuje projekcji określonej we właściwości przez `projection` parametru. Oznacza to, że <xref:System.Data.Objects.ObjectQuery%601> zwrócone przez <xref:System.Data.Objects.ObjectQuery%601.GroupBy%2A> metody jest zawsze typu <xref:System.Data.Common.DbDataRecord>. Aby uzyskać więcej informacji, zobacz [zapytań dotyczących obiektów](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
   
  
## Examples  
 Ten przykład jest oparty na [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 W tym przykładzie tworzy nowy <xref:System.Data.Objects.ObjectQuery%601> obiekt, który zawiera wyniki istniejące zapytanie, pogrupowane według nazwy produktu.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_groupby)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_groupby)]  
  
 W tym przykładzie zwraca zestaw rekordów zagnieżdżone dane, które zawierają `Contact.LastName` kolumny, grupowane i posortowane alfabetycznie według pierwszą literę `Contact.LastName`.  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_GroupBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_groupby)]
 [!code-vb[DP ObjectServices Concepts#Projection_GroupBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_groupby)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="query" /> Parametr jest <see langword="null" /> ani być pustym ciągiem.  
  
—lub— 
<paramref name="projection" /> Parametr jest <see langword="null" /> ani być pustym ciągiem.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Include">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Include (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Include(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Include(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Include (path As String) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Include(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Include : string -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Include path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Lista rozdzielonych kropka, powiązanych obiektów do zwrócenia w wynikach zapytania.</param>
        <summary>Określa powiązane obiekty do uwzględnienia w wynikach zapytania.</summary>
        <returns>Nowy <see cref="T:System.Data.Objects.ObjectQuery`1" /> ze ścieżką zdefiniowane zapytanie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ścieżki zapytania może służyć za pomocą zapytań jednostki SQL i LINQ.  
  
 Ścieżki są kompleksowych. Na przykład, jeśli wskazuje wywołanie dołączenia `Include("Orders.OrderLines")`, nie tylko będzie `OrderLines` być uwzględniony, ale także `Orders`. Aby uzyskać więcej informacji, zobacz [ładowanie powiązanych obiektów](http://msdn.microsoft.com/library/452347d2-7b3b-44cd-9001-231299a28cb1).  
  
 Gdy wywołujesz <xref:System.Data.Objects.ObjectQuery%601.Include%2A> metody, ścieżka kwerendy jest prawidłowa tylko na wystąpienie zwrócone <xref:System.Data.Objects.ObjectQuery%601>. Inne wystąpienia <xref:System.Data.Objects.ObjectQuery%601> i nie wpływają na sam kontekst.  
  
 Ponieważ <xref:System.Data.Objects.ObjectQuery%601.Include%2A> metoda zwraca obiekt zapytania, można wywołać tej metody wielokrotnie w <xref:System.Data.Objects.ObjectQuery%601> do określania wielu ścieżek dla zapytania, jak w poniższym przykładzie:  
  
 [!code-csharp[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#spanonlywithmultiplepaths)]
 [!code-vb[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#spanonlywithmultiplepaths)]  
  
   
  
## Examples  
 [!code-csharp[DP ObjectServices Concepts#QueryWithSpan](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithspan)]
 [!code-vb[DP ObjectServices Concepts#QueryWithSpan](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithspan)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> jest <see langword="empty" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Intersect (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Intersect(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Intersect(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Intersect : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Intersect query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">
          <see cref="T:System.Data.Objects.ObjectQuery`1" /> Reprezentujący wyników do uwzględnienia w zapytaniu.</param>
        <summary>Ogranicza wyniki zapytania, umieszczając tylko wyniki, które istnieją w innym zapytaniu obiektu.</summary>
        <returns>Nowy <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które odpowiada do oryginalnego wystąpienia z <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/intersect-entity-sql">INTERSECT</see> stosowane w zależności od określonego <paramref name="query" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podane `query` definiujący wyników do uwzględnienia muszą być tego samego typu lub typu, który jest zgodny z <xref:System.Data.Objects.ObjectQuery%601>.  
  
 Parametry, które są zdefiniowane w podanym `query` są scalane z parametrami, które są zdefiniowane w <xref:System.Data.Objects.ObjectQuery%601> wystąpienia. Parametry muszą być unikatowe w połączonych <xref:System.Data.Objects.ObjectParameterCollection>. Nie może być dwa parametry w połączonych kolekcji o takiej samej nazwie. Aby uzyskać więcej informacji, zobacz [metody konstruktora zapytań](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Wynikowe zapytanie dziedziczy połączenie z <xref:System.Data.Objects.ObjectQuery%601> wystąpienia, na którym <xref:System.Data.Objects.ObjectQuery%601.Intersect%2A> metoda została wywołana.  
  
   
  
## Examples  
 W przykładzie w tym temacie opiera się na [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W tym przykładzie tworzy nowy <xref:System.Data.Objects.ObjectQuery%601> obiekt, który zawiera wyniki dwa inne zapytania.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Intersect](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_intersect)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Intersect](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_intersect)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="query" /> Parametr jest <see langword="null" /> lub jest pustym ciągiem.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectQuery`1.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Data.Objects.ObjectQuery&lt;'T&gt;.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę tego zapytania obiektu.</summary>
        <value>A <see langword="string" /> wartość, która nazywa się to <see cref="T:System.Data.Objects.ObjectQuery`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa zapytania obiektu identyfikuje bieżącego zapytania obiektu w sekwencji według nazwy, podczas tworzenia metody konstruktora zapytań. Domyślnie nazwa zapytania jest `it`. Może to być przydatne, przy odwoływaniu się do bieżącej sekwencji w sprzężeniach wewnątrz <xref:System.Data.Objects.ObjectQuery`1.Where*> metody lub <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> metody. Aby uzyskać więcej informacji, zobacz [metody konstruktora zapytań](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Po ustawieniu <xref:System.Data.Objects.ObjectQuery%601.Name%2A> właściwość <xref:System.Data.Objects.ObjectQuery%601>, wartość ta wynosi aliasu w kolejnych metod.  
  
 Wartość <xref:System.Data.Objects.ObjectQuery%601.Name%2A> właściwość musi rozpoczynać się od litery i może zawierać litery, cyfry i znaki podkreślenia.  
  
   
  
## Examples  
 W tym przykładzie nazwa pierwszego <xref:System.Data.Objects.ObjectQuery%601> "product" i następnie używa tym aliasu w kolejnych <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> metody. W przykładzie w tym temacie opiera się na [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 [!code-csharp[DP ObjectServices Concepts#QueryWithAliasNamed](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithaliasnamed)]
 [!code-vb[DP ObjectServices Concepts#QueryWithAliasNamed](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithaliasnamed)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Wartość określona dla zestawu nie jest prawidłowy.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TResultType&gt; OfType&lt;TResultType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TResultType&gt; OfType&lt;TResultType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.OfType``1" />
      <MemberSignature Language="VB.NET" Value="Public Function OfType(Of TResultType) () As ObjectQuery(Of TResultType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TResultType&gt; ^ OfType();" />
      <MemberSignature Language="F#" Value="member this.OfType : unit -&gt; System.Data.Objects.ObjectQuery&lt;'ResultType&gt;" Usage="objectQuery.OfType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TResultType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResultType">Typ <see cref="T:System.Data.Objects.ObjectResult`1" /> zwracane, gdy zapytanie jest wykonywane przy użyciu zastosowany filtr.</typeparam>
        <summary>Ogranicza zapytanie, aby tylko wyniki z określonego typu.</summary>
        <returns>Nowy <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które odpowiada do oryginalnego wystąpienia z <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/oftype-entity-sql">OFTYPE</see> stosowane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<xref:System.Data.Objects.ObjectQuery`1.OfType*> Umożliwia filtrowanie wyników zapytania według określonej jednostki lub typ złożony. W ten sposób realizowany modelu koncepcyjnego z dziedziczenia obiektu. Aby uzyskać więcej informacji, zobacz [modelu danych jednostki: dziedziczenie](~/docs/framework/data/adonet/entity-data-model-inheritance.md).

<xref:System.Data.Objects.ObjectQuery`1.OfType*> Metoda może być stosowany tylko do <xref:System.Data.Objects.ObjectQuery%601> o typie jednostki lub typ złożony, który jest zdefiniowany w EDM.
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.EntitySqlException">Określony typ nie jest prawidłowy.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/be01614e-070e-41be-9746-bb674b41e488(v=vs.90)">Porady: tworzenie i wykonywanie obiektu, który wysyła kwerendę za pomocą Tabela wg hierarchii dziedziczenia (Entity Framework)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; OrderBy (string keys, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; OrderBy(string keys, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OrderBy (keys As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ OrderBy(System::String ^ keys, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.OrderBy (keys, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">Kolumny klucza za pomocą którego uporządkować wyniki.</param>
        <param name="parameters">Zero lub więcej parametrów, które są używane w przypadku tej metody.</param>
        <summary>Porządkuje wyniki zapytania według określonych kryteriów.</summary>
        <returns>Nowy <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które odpowiada do oryginalnego wystąpienia z <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/order-by-entity-sql">ORDER BY</see> stosowane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można zagwarantować kolejność wynikiem zapytań zagnieżdżonej.  
  
 <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> zawsze należy metody konstruktora ostatecznemu zapytaniu w sekwencji.  
  
   
  
## Examples  
 Ten przykład jest oparty na [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie jest tworzony nowy <xref:System.Data.Objects.ObjectQuery%601> obiekt, który zawiera wyniki istniejących porządkowania według `ProductID`.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_orderby)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_orderby)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keys" /> Lub <paramref name="parameters" /> parametr <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="key" /> Jest ciągiem pustym.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt; Select (string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;class System.Data.Common.DbDataRecord&gt; Select(string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of DbDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;System::Data::Common::DbDataRecord ^&gt; ^ Select(System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Select : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;" Usage="objectQuery.Select (projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="projection">Lista wybranych właściwości, który definiuje projekcji.</param>
        <param name="parameters">Zero lub więcej parametrów, które są używane w przypadku tej metody.</param>
        <summary>Ogranicza wyniki zapytania do właściwości, które są zdefiniowane w projekcji określonej.</summary>
        <returns>Nowy <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienia typu <see cref="T:System.Data.Common.DbDataRecord" /> oznacza to równoważne do oryginalnego wystąpienia z <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql">wybierz</see> stosowane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Select%2A> stosuje projekcji określonej we właściwości przez `projection` parametru. <xref:System.Data.Objects.ObjectQuery%601> Zwrócone przez <xref:System.Data.Objects.ObjectQuery%601.Select%2A> metody jest zawsze typem wiersza <xref:System.Data.Common.DbDataRecord>. Użyj <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> metodę, aby zwrócić wartości, które są proste typy, typy jednostek lub złożonych typów. Aby uzyskać więcej informacji, zobacz [składnik LINQ to Entities](~/docs/framework/data/adonet/ef/language-reference/linq-to-entities.md).  
  
 Gdy właściwość nawigacji jest uwzględniony w projekcji, wyniki zapytania zawierają zbiór zagnieżdżonych <xref:System.Data.Common.DbDataRecord> obiektów. Aby uzyskać więcej informacji, zobacz [porady: nawigowanie relacji za pomocą właściwości nawigacji](http://msdn.microsoft.com/library/b1d71c7d-16a7-4b46-96ac-690176bd5057).  
  
   
  
## Examples  
 Ten przykład jest oparty na [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie jest tworzony nowy <xref:System.Data.Objects.ObjectQuery%601> których wyniki są rekordów danych, które zawierają `ProductID` pola wyniki tego zapytania.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_select)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_select)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projection" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="parameters" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projection" /> Jest ciągiem pustym.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="SelectValue&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TResultType&gt; SelectValue&lt;TResultType&gt; (string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TResultType&gt; SelectValue&lt;TResultType&gt;(string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectValue(Of TResultType) (projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of TResultType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TResultType&gt; ^ SelectValue(System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.SelectValue : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'ResultType&gt;" Usage="objectQuery.SelectValue (projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TResultType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResultType">Typ <see cref="T:System.Data.Objects.ObjectQuery`1" /> zwrócone przez <see cref="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" /> metody.</typeparam>
        <param name="projection">Na liście projekcji.</param>
        <param name="parameters">Opcjonalny zestaw parametrów zapytania, które powinny być w zakresie podczas analizowania.</param>
        <summary>Ogranicza wyniki zapytania do tylko do właściwości, które są określone w projekcji.</summary>
        <returns>Nowy <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienia zgodny z określonym projekcji typu. Zwrócony <see cref="T:System.Data.Objects.ObjectQuery`1" /> jest równoważna do oryginalnego wystąpienia z <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql">SELECT VALUE</see> stosowane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> Służy do zwracania wartości, które są proste typy, typy jednostek lub złożonych typów. Użyj <xref:System.Data.Objects.ObjectQuery%601.Select%2A> metodę projekcji, które wymagają typu wiersza, zamiast typu wartości. Aby uzyskać więcej informacji, zobacz [zapytań dotyczących obiektów](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> Metoda stosowana projekcji określonej we właściwości przez `projection` parametru. <xref:System.Data.Objects.ObjectQuery%601> Zwrócone przez <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> metody musi być typem wartości, który jest zgodny z projekcji i musi być taki sam typ co typ <xref:System.Data.Objects.ObjectQuery`1.SelectValue*>.  
  
   
  
## Examples  
 Ten przykład jest oparty na [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie jest tworzony nowy <xref:System.Data.Objects.ObjectQuery%601> zawierający wyniki, które są sekwencji `ProductID` wartości przewidywany wynikach istniejące zapytanie.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_selectvalue)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_selectvalue)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projection" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="parameters" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projection" /> Jest ciągiem pustym.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Skip (string keys, string count, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Skip(string keys, string count, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Skip (keys As String, count As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Skip(System::String ^ keys, System::String ^ count, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Skip : string * string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Skip (keys, count, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="count" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">Kolumny klucza za pomocą którego uporządkować wyniki.</param>
        <param name="count">Liczba wyników do pominięcia. Musi to być stałą lub odwołanie parametru.</param>
        <param name="parameters">Opcjonalny zestaw parametrów zapytania, które powinny być w zakresie podczas analizowania.</param>
        <summary>Ustala kolejność zapytanie wyniki według określonych kryteriów, a pomija określoną liczbę wyników.</summary>
        <returns>Nowy <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które odpowiada do oryginalnego wystąpienia zarówno <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/order-by-entity-sql">ORDER BY</see> i [POMIŃ](~/docs/framework/data/adonet/ef/language-reference/skip-entity-sql.md) stosowane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> Nie można użyć metody po <xref:System.Data.Objects.ObjectQuery%601.Top%2A> metody. Kiedy używasz <xref:System.Data.Objects.ObjectQuery%601.Top%2A> po <xref:System.Data.Objects.ObjectQuery%601.Skip%2A>, działa jak [LIMIT](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md) instrukcji klauzuli.  
  
   
  
## Examples  
 W tym przykładzie pobiera pięciu `Product` obiektów po pominięciu pierwsze trzy w wyniku zapytania, posortowane według `Product.ListPrice`.  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_skiplimit)]
 [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_skiplimit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Którykolwiek z argumentów jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keys" /> jest ciągiem pustym.  
  
—lub— 
 <paramref name="count" /> jest ciągiem pustym.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który iteruje po wyniki zapytania.</summary>
        <returns>
          <see cref="T:System.Collections.Generic.IEnumerator`1" /> Obiektu, który może służyć do iteracji wyników.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie <xref:System.Data.Objects.ObjectQuery%601.System%23Collections%23Generic%23IEnumerable%7BT%7D%23GetEnumerator%2A> wykonuje zapytanie.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Top (string count, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Top(string count, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Top (count As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Top(System::String ^ count, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Top : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Top (count, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="count">Liczba elementów w wynikach jako ciąg.</param>
        <param name="parameters">Opcjonalny zestaw parametrów zapytania, które powinny być w zakresie podczas analizowania.</param>
        <summary>Ogranicza wyniki zapytania do określonej liczby elementów.</summary>
        <returns>Nowy <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które odpowiada do oryginalnego wystąpienia z <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/top-entity-sql">GÓRNEJ</see> stosowane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Top%2A> jest określana deterministycznie, chyba że zapytania są sortowane.  
  
 Zastosowania <xref:System.Data.Objects.ObjectQuery%601.Top%2A> metody <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> metody, będzie ona działać jak [LIMIT](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md) instrukcja [ORDER BY](~/docs/framework/data/adonet/ef/language-reference/order-by-entity-sql.md) klauzuli.  
  
   
  
## Examples  
 Te przykłady są oparte na [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 W tym przykładzie tworzy nowy <xref:System.Data.Objects.ObjectQuery%601> zawierającą dwa pierwsze wyniki istniejącego zapytania.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Top](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_top)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Top](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_top)]  
  
 W tym przykładzie pobiera pięciu `Product` obiektów po pominięciu pierwsze trzy w wyniku zapytania, posortowane według `Product.ListPrice`. <xref:System.Data.Objects.ObjectQuery%601.Top%2A> jest używana zamiast [LIMIT](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md) stronicowanie.  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_skiplimit)]
 [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_skiplimit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="count" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="count" /> jest ciągiem pustym.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Union (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Union(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Union(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Union : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Union query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">
          <see cref="T:System.Data.Objects.ObjectQuery`1" /> Reprezentujący wyniki do dodania.</param>
        <summary>Łączy wyniki zapytania z wynikami innego zapytania obiektu, bez duplikaty.</summary>
        <returns>Nowy <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które odpowiada do oryginalnego wystąpienia z <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/union-entity-sql">Unii</see> stosowane w celu dodania wyników o określonym parametrze <paramref name="query" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Union%2A> dodaje wyniki podane `query` bez duplikaty.  
  
 Podane `query` definiujący wyniki, aby dodać muszą być tego samego typu lub typu, który może być podwyższony do jego typ <xref:System.Data.Objects.ObjectQuery%601>. Na przykład poniżej przedstawiono prawidłowe ponieważ `DiscontinuedProducts` może być podwyższony do `Products`:  
  
```  
ObjectQuery<Product>.Union(ObjectQuery<DiscontinuedProduct>)  
```  
  
 Następujące spowoduje zgłoszenie wyjątku, ponieważ `Products` nie można podwyższyć poziomu do `DiscontinuedProducts`.  
  
```  
ObjectQuery <DiscontinuedProduct>.Union(ObjectQuery<Product>)   
```  
  
 Dla <xref:System.Data.Objects.ObjectQuery%601> typu <xref:System.Data.Common.DbDataRecord>, rekordy w obu zapytań musi mieć taką samą liczbę kolumn i typy w kolumnach tabeli <xref:System.Data.Common.DbDataRecord> przekazanych `query` musi umożliwiać Awansowanie do typów kolumn w <xref:System.Data.Common.DbDataRecord> programu <xref:System.Data.Objects.ObjectQuery%601>.  
  
 Parametry, które są zdefiniowane w podanym `query` są scalane z parametrami, które są zdefiniowane w <xref:System.Data.Objects.ObjectQuery%601> wystąpienia. Parametry muszą być unikatowe w połączonych <xref:System.Data.Objects.ObjectParameterCollection>. Nie może być dwa parametry w połączonych kolekcji o takiej samej nazwie. Aby uzyskać więcej informacji, zobacz [metody konstruktora zapytań](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Wynikowe zapytanie dziedziczy połączenie z <xref:System.Data.Objects.ObjectQuery%601> wystąpienia, na którym <xref:System.Data.Objects.ObjectQuery%601.Union%2A> została wywołana.  
  
   
  
## Examples  
 Ten przykład jest oparty na [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie użyto <xref:System.Data.Objects.ObjectQuery%601.Union%2A> metoda tworzy nowy <xref:System.Data.Objects.ObjectQuery%601> obiektu.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_union)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_union)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="query" /> Parametr <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="UnionAll">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; UnionAll (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; UnionAll(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function UnionAll (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ UnionAll(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.UnionAll : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.UnionAll query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">
          <see cref="T:System.Data.Objects.ObjectQuery`1" /> Reprezentujący wyniki do dodania.</param>
        <summary>Łączy wyniki zapytania z wynikami innego zapytania obiekt, w tym wszystkie duplikaty.</summary>
        <returns>Nowy <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które odpowiada do oryginalnego wystąpienia z <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/union-entity-sql">UNION ALL</see> stosowane w celu dodania wyników o określonym parametrze <paramref name="query" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> dodaje wyniki podane `query` w tym wszystkie duplikaty.  
  
 Podane `query` definiujący wyniki, aby dodać muszą być tego samego typu lub typu, który może być podwyższony do jego typ <xref:System.Data.Objects.ObjectQuery%601>. Na przykład poniżej przedstawiono prawidłowe ponieważ `DiscontinuedProducts` może być podwyższony do `Products`:  
  
```  
ObjectQuery<Product>.Union(ObjectQuery<DiscontinuedProduct>)  
```  
  
 Następujące spowoduje zgłoszenie wyjątku, ponieważ `Products` nie można podwyższyć poziomu do `DiscontinuedProducts`.  
  
```  
ObjectQuery <DiscontinuedProduct>.Union(ObjectQuery<Product>)   
```  
  
 Dla <xref:System.Data.Objects.ObjectQuery%601> typu <xref:System.Data.Common.DbDataRecord>, rekordy w obu zapytań musi mieć taką samą liczbę kolumn i typy w kolumnach tabeli <xref:System.Data.Common.DbDataRecord> przekazanych `query` musi umożliwiać Awansowanie do typów kolumn w <xref:System.Data.Common.DbDataRecord> programu <xref:System.Data.Objects.ObjectQuery%601>.  
  
 Parametry, które są zdefiniowane w podanym `query` są scalane z parametrami, które są zdefiniowane w <xref:System.Data.Objects.ObjectQuery%601> wystąpienia. Parametry muszą być unikatowe w połączonych <xref:System.Data.Objects.ObjectParameterCollection>. Nie może być dwa parametry w połączonych kolekcji o takiej samej nazwie. Aby uzyskać więcej informacji, zobacz [metody konstruktora zapytań](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Wynikowe zapytanie dziedziczy połączenie z <xref:System.Data.Objects.ObjectQuery%601> wystąpienia, na którym <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> została wywołana.  
  
   
  
## Examples  
 W przykładzie w tym temacie opiera się na [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie użyto <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> metodę, aby utworzyć nową <xref:System.Data.Objects.ObjectQuery%601> obiektu. Następnie wywołuje <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A> metody na nowym <xref:System.Data.Objects.ObjectQuery%601> można uzyskać unikatowe wyniki tego zapytania.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_unionall)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_unionall)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="query" /> Parametr <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Where (string predicate, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Where(string predicate, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Where (predicate As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Where(System::String ^ predicate, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Where : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Where (predicate, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="predicate">Predykat filtru.</param>
        <param name="parameters">Zero lub więcej parametrów, które są używane w przypadku tej metody.</param>
        <summary>Ogranicza zapytanie do wyników spełniających określone kryteria filtrowania.</summary>
        <returns>Nowy <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które odpowiada do oryginalnego wystąpienia z <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/where-entity-sql">gdzie</see> stosowane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Ten przykład jest oparty na [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie jest tworzony nowy <xref:System.Data.Objects.ObjectQuery%601> zawierający wyniki istniejące zapytanie, które są filtrowane według następujących kryteriów: `"it.ProductID = 900"`.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Where](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_where)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Where](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_where)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="parameters" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="predicate" /> Jest ciągiem pustym.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytania o dane jako obiekty (Entity Framework)</related>
      </Docs>
    </Member>
  </Members>
</Type>