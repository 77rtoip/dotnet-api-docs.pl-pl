<Type Name="ObjectQuery&lt;T&gt;" FullName="System.Data.Objects.ObjectQuery&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="df93ee6f31a619abb00a22e57e96cf6f7f494978" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69372666" /></Metadata><TypeSignature Language="C#" Value="public class ObjectQuery&lt;T&gt; : System.Data.Objects.ObjectQuery, System.Collections.Generic.IEnumerable&lt;T&gt;, System.ComponentModel.IListSource, System.Linq.IOrderedQueryable&lt;T&gt;, System.Linq.IQueryable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectQuery`1&lt;T&gt; extends System.Data.Objects.ObjectQuery implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Linq.IOrderedQueryable, class System.Linq.IOrderedQueryable`1&lt;!T&gt;, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectQuery`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectQuery(Of T)&#xA;Inherits ObjectQuery&#xA;Implements IEnumerable(Of T), IListSource, IOrderedQueryable(Of T), IQueryable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ObjectQuery : System::Data::Objects::ObjectQuery, System::Collections::Generic::IEnumerable&lt;T&gt;, System::ComponentModel::IListSource, System::Linq::IOrderedQueryable&lt;T&gt;, System::Linq::IQueryable&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ObjectQuery&lt;'T&gt; = class&#xA;    inherit ObjectQuery&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IOrderedQueryable&lt;'T&gt;&#xA;    interface IOrderedQueryable&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.ObjectQuery</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IOrderedQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IOrderedQueryable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Typ jednostki zapytania.</typeparam>
    <summary>Reprezentuje typ zapytania względem modelu koncepcyjnego w danym kontekście obiektu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa <xref:System.Data.Objects.ObjectQuery%601> generyczna reprezentuje zapytanie, które zwraca kolekcję zawierającą zero lub więcej obiektów określonego typu. Aby <xref:System.Data.Objects.ObjectContext> można było wykonać zapytanie obiektu, musi ono być zdefiniowane. Ten kontekst zapewnia informacje o połączeniu i metadanych, które są wymagane do tworzenia i wykonywania zapytania. Zapytanie obiektu jest wykonywane w następujących scenariuszach:  
  
-   Gdy jest ona podejmowana, na przykład podczas `foreach` wyliczania (C#) `For Each` lub (Visual Basic).  
  
-   Gdy jest przypisany do wypełnienia <xref:System.Collections.Generic.List%601> kolekcji.  
  
-   <xref:System.Data.Objects.ObjectQuery%601.Execute%2A> Gdy metoda jest jawnie wywoływana.  
  
 Zapytanie można utworzyć przy użyciu [!INCLUDE[esql](~/includes/esql-md.md)] instrukcji lub zapytania LINQ lub można je przyrostowo skompilować przy użyciu metod konstruktora zapytań zawartych w klasie. W każdym przypadku wynik jest nowym <xref:System.Data.Objects.ObjectQuery%601> wystąpieniem, które po jawnym wykonaniu lub wyliczeniu, wyśle zapytanie do źródła danych w celu wykonania i zwróci wyniki.  
  
 Jest często typem jednostki, ale może <xref:System.Data.Common.DbDataRecord> być również typu dla projekcji do typu anonimowego lub typu pierwotnego, takiego jak liczba całkowita lub ciąg. <xref:System.Data.Objects.ObjectQuery%601> Aby uzyskać więcej informacji, zobacz [zapytania dotyczące obiektów](https://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
   
  
## Examples  
 Przykład w tym temacie jest oparty na [modelu sprzedaży AdventureWorks](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 W przykładzie pokazano, jak utworzyć wystąpienie <xref:System.Data.Objects.ObjectQuery%601> klasy.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/9e7d8837-28c5-429d-a824-7bafb59724cf">Język Entity SQL</related>
    <related type="Article" href="https://msdn.microsoft.com/library/641f9b68-9046-47a1-abb0-1c8eaeda0e2d">LINQ do Jednostek</related>
    <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Objects.ObjectQuery`1" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601> Można zainicjować w taki sposób, aby reprezentuje pojedynczy wynik skalarny, a nie kolekcję wyników skalarnych. Niektóre metody rozszerzające wymagają wyników kolekcji jako dane wejściowe. W tym przypadku <xref:System.ArgumentException> jest generowane, gdy jest wywoływana jedna z tych metod. Aby uzyskać więcej informacji, zobacz [zapytania dotyczące obiektów](https://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
 Gdy aplikacja generuje Entity SQL zapytania w czasie wykonywania, należy pamiętać o wszystkich ograniczeniach długości poleceń źródła danych. Entity SQL nie wymusza ograniczeń długości tekstu polecenia w zapytaniach.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów i ich kształtowania (Entity Framework)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.Objects.ObjectContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (commandText As String, context As ObjectContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectQuery(System::String ^ commandText, System::Data::Objects::ObjectContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectQuery&lt;'T&gt; : string * System.Data.Objects.ObjectContext -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="new System.Data.Objects.ObjectQuery&lt;'T&gt; (commandText, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="context" Type="System.Data.Objects.ObjectContext" />
      </Parameters>
      <Docs>
        <param name="commandText">[!INCLUDE[esql](~/includes/esql-md.md)] Zapytanie.</param>
        <param name="context"><see cref="T:System.Data.Objects.ObjectContext" /> Na którym ma zostać wykonane zapytanie.</param>
        <summary>Tworzy nowe <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie przy użyciu określonego [!INCLUDE[esql](~/includes/esql-md.md)] polecenia jako wstępnego zapytania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy aplikacja generuje Entity SQL zapytania w czasie wykonywania, należy pamiętać o wszystkich ograniczeniach długości poleceń źródła danych. Entity SQL nie wymusza ograniczeń długości tekstu polecenia w zapytaniach.  
  
   
  
## Examples  
 Przykład w tym temacie jest oparty na [modelu sprzedaży AdventureWorks](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie pokazano, jak utworzyć wystąpienie <xref:System.Data.Objects.ObjectQuery%601> klasy.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.Objects.ObjectContext context, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectQuery(System::String ^ commandText, System::Data::Objects::ObjectContext ^ context, System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectQuery&lt;'T&gt; : string * System.Data.Objects.ObjectContext * System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="new System.Data.Objects.ObjectQuery&lt;'T&gt; (commandText, context, mergeOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="context" Type="System.Data.Objects.ObjectContext" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="commandText">[!INCLUDE[esql](~/includes/esql-md.md)] Zapytanie.</param>
        <param name="context"><see cref="T:System.Data.Objects.ObjectContext" /> Na którym ma zostać wykonane zapytanie.</param>
        <param name="mergeOption">Określa sposób, w jaki jednostki, które są pobierane za pośrednictwem tego zapytania, powinny być scalone z jednostkami, które zostały <see cref="T:System.Data.Objects.ObjectContext" />zwrócone z poprzednich zapytań względem tego samego.</param>
        <summary>Tworzy nowe <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie przy użyciu określonego [!INCLUDE[esql](~/includes/esql-md.md)] polecenia jako wstępnego zapytania i określonej opcji scalania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy aplikacja generuje Entity SQL zapytania w czasie wykonywania, należy pamiętać o wszystkich ograniczeniach długości poleceń źródła danych. Entity SQL nie wymusza ograniczeń długości tekstu polecenia w zapytaniach.  
  
   
  
## Examples  
 Ten przykład jest oparty na [modelu sprzedaży AdventureWorks](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Jest inicjowany z określonym <xref:System.Data.Objects.ObjectContext>zapytaniem, i <xref:System.Data.Objects.MergeOption>. <xref:System.Data.Objects.ObjectQuery%601>  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_select)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_select)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Distinct">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Distinct ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Distinct() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Distinct" />
      <MemberSignature Language="VB.NET" Value="Public Function Distinct () As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Distinct();" />
      <MemberSignature Language="F#" Value="member this.Distinct : unit -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Distinct " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ogranicza zapytanie do unikatowych wyników.</summary>
        <returns>Nowe <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które jest równoważne z oryginalnym wystąpieniem z zastosowaniem <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql">SELECT DISTINCT</see> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda konstruktora zapytań zwraca <xref:System.Data.Objects.ObjectQuery%601> wystąpienie, które jest równoważne z oryginalnym zapytaniem z zastosowaniem [SELECT DISTINCT](~/docs/framework/data/adonet/ef/language-reference/select-entity-sql.md) .  
  
 Nie można zastosować operatora do obiektu, który zawiera mapowanie do kolumny nieporównywalnej w źródle danych (np. ntext). `DISTINCT`  
  
   
  
## Examples  
 Przykład w tym temacie jest oparty na [modelu sprzedaży AdventureWorks](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie zastosowano <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> metodę, aby utworzyć <xref:System.Data.Objects.ObjectQuery%601> nowy obiekt. Następnie wywołuje <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A> nowy <xref:System.Data.Objects.ObjectQuery%601> obiekt, aby uzyskać unikatowe wyniki tego zapytania.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_unionall)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_unionall)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Except">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Except (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Except(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Except (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Except(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Except : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Except query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query"><see cref="T:System.Data.Objects.ObjectQuery`1" /> Reprezentuje wyniki do wykluczenia z zapytania.</param>
        <summary>Ogranicza wyniki zapytania, wykluczając wyniki w oparciu o wyniki zapytania innego obiektu.</summary>
        <returns>Nowe <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które jest równoważne z oryginalnym wystąpieniem z <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/except-entity-sql">wyjątkiem</see> zastosowania na podstawie określonego <paramref name="query" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dostarczone `query` , które definiuje wyniki do wykluczenia, muszą być tego samego typu lub typu, który jest zgodny <xref:System.Data.Objects.ObjectQuery%601>z.  
  
 Parametry, które są zdefiniowane w dostarczonych `query` , są scalane z parametrami, które <xref:System.Data.Objects.ObjectQuery%601> są zdefiniowane w wystąpieniu. Parametry muszą być unikatowe w połączeniu <xref:System.Data.Objects.ObjectParameterCollection>. W połączonej kolekcji nie mogą istnieć dwa parametry o tej samej nazwie. Aby uzyskać więcej informacji, zobacz [Konstruktor zapytań metod](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Wyniki zapytania dziedziczą połączenie z wystąpienia, <xref:System.Data.Objects.ObjectQuery%601> na którym <xref:System.Data.Objects.ObjectQuery%601.Except%2A> został wywołany.  
  
   
  
## Examples  
 Ten przykład jest oparty na [modelu sprzedaży AdventureWorks](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie zastosowano <xref:System.Data.Objects.ObjectQuery%601.Except%2A> metodę w celu utworzenia <xref:System.Data.Objects.ObjectQuery%601> nowego obiektu, a następnie iteracja przez wynik nowej kwerendy.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Except](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_except)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Except](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_except)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> Parametr jest<see langword="null" /> lub ciągiem pustym.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów i ich kształtowania (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;T&gt; Execute (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!T&gt; Execute(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectResult&lt;T&gt; ^ Execute(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="override this.Execute : System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectResult&lt;'T&gt;" Usage="objectQuery.Execute mergeOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption"><see cref="T:System.Data.Objects.MergeOption" /> Do użycia podczas wykonywania zapytania. Wartość domyślna to <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
        <summary>Wykonuje kwerendę obiektu z określoną opcją scalania.</summary>
        <returns>Element <see cref="T:System.Data.Objects.ObjectResult`1" /> zawierający kolekcję obiektów jednostek zwróconych przez zapytanie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Opcja scalania domyślnego dla kwerend obiektów to <xref:System.Data.Objects.MergeOption.AppendOnly>. Aby uzyskać więcej informacji, zobacz [rozpoznawanie tożsamości, zarządzanie stanami i Change Tracking](https://msdn.microsoft.com/library/3bd49311-0e72-4ea4-8355-38fe57036ba0).  
  
   
  
## Examples  
 Ten przykład jest oparty na [modelu sprzedaży AdventureWorks](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Przykład zwraca <xref:System.Data.Objects.ObjectResult%601> metodę from <xref:System.Data.Objects.ObjectQuery.Execute%2A> . Następnie Pobiera moduł wyliczający i wykonuje iterację w wyniku zapytania. Na końcu zwalnia moduł wyliczający i <xref:System.Data.Objects.ObjectResult%601> obiekt.  
  
 [!code-csharp[DP ObjectServices Concepts#QueryResult](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#queryresult)]
 [!code-vb[DP ObjectServices Concepts#QueryResult](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#queryresult)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt; GroupBy (string keys, string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;class System.Data.Common.DbDataRecord&gt; GroupBy(string keys, string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupBy (keys As String, projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of DbDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;System::Data::Common::DbDataRecord ^&gt; ^ GroupBy(System::String ^ keys, System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string * string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;" Usage="objectQuery.GroupBy (keys, projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">Kolumny klucza, według których mają być grupowane wyniki.</param>
        <param name="projection">Lista wybranych właściwości, które definiują projekcję.</param>
        <param name="parameters">Zero lub więcej parametrów, które są używane w tej metodzie.</param>
        <summary>Grupuje wyniki zapytania według określonych kryteriów.</summary>
        <returns>Nowe <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie typu <see cref="T:System.Data.Common.DbDataRecord" /> , które jest równoważne z oryginalnym wystąpieniem z zastosowanym <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/group-by-entity-sql">grupą</see> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.GroupBy%2A>stosuje projekcję określoną przez `projection` parametr. Oznacza to, że <xref:System.Data.Objects.ObjectQuery%601> zwracany <xref:System.Data.Objects.ObjectQuery%601.GroupBy%2A> przez metodę jest zawsze typu <xref:System.Data.Common.DbDataRecord>. Aby uzyskać więcej informacji, zobacz [zapytania dotyczące obiektów](https://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
   
  
## Examples  
 Ten przykład jest oparty na [modelu sprzedaży AdventureWorks](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 Ten przykład tworzy nowy <xref:System.Data.Objects.ObjectQuery%601> obiekt, który zawiera wyniki istniejącej kwerendy pogrupowane według nazwy produktu.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_groupby)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_groupby)]  
  
 Ten przykład zwraca zestaw zagnieżdżonych rekordów danych, które zawierają `Contact.LastName` kolumny pogrupowane i posortowane alfabetycznie według pierwszej `Contact.LastName`litery.  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_GroupBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_groupby)]
 [!code-vb[DP ObjectServices Concepts#Projection_GroupBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_groupby)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> Parametr jest<see langword="null" /> lub ciągiem pustym.  
  
—lub— 
<paramref name="projection" /> Parametr jest<see langword="null" /> lub ciągiem pustym.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Include">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Include (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Include(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Include(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Include (path As String) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Include(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Include : string -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Include path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Rozdzielana kropkami lista obiektów pokrewnych, które mają zostać zwrócone w wynikach zapytania.</param>
        <summary>Określa obiekty pokrewne do uwzględnienia w wynikach zapytania.</summary>
        <returns>Nowy <see cref="T:System.Data.Objects.ObjectQuery`1" /> ze zdefiniowaną ścieżką zapytania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ścieżki zapytań mogą być używane z zapytaniami Entity SQL i LINQ.  
  
 Ścieżki są wszystkie — włącznie. Na przykład, jeśli wywołanie include wskazuje `Include("Orders.OrderLines")`, nie tylko zostanie `OrderLines` uwzględnione, ale również `Orders`. Aby uzyskać więcej informacji, zobacz [ładowanie powiązanych obiektów](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896272(v=vs.100)).  
  
 Po wywołaniu <xref:System.Data.Objects.ObjectQuery%601.Include%2A> metody ścieżka zapytania jest prawidłowa tylko w zwracanym wystąpieniu <xref:System.Data.Objects.ObjectQuery%601>. Nie dotyczy to <xref:System.Data.Objects.ObjectQuery%601> innych wystąpień i samego kontekstu obiektu.  
  
 Ponieważ metoda zwraca obiekt zapytania, można wywołać tę metodę wiele razy <xref:System.Data.Objects.ObjectQuery%601> w, aby określić wiele ścieżek dla zapytania, jak w poniższym przykładzie: <xref:System.Data.Objects.ObjectQuery%601.Include%2A>  
  
 [!code-csharp[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#spanonlywithmultiplepaths)]
 [!code-vb[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#spanonlywithmultiplepaths)]  
  
   
  
## Examples  
 [!code-csharp[DP ObjectServices Concepts#QueryWithSpan](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithspan)]
 [!code-vb[DP ObjectServices Concepts#QueryWithSpan](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithspan)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" />jest <see langword="empty" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Intersect (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Intersect(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Intersect(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Intersect : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Intersect query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query"><see cref="T:System.Data.Objects.ObjectQuery`1" /> Reprezentuje wyniki do uwzględnienia w zapytaniu.</param>
        <summary>Ogranicza wyniki zapytania przez uwzględnienie tylko wyników istniejących w kwerendzie innego obiektu.</summary>
        <returns>Nowe <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które jest równoważne z oryginalnym wystąpieniem z <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/intersect-entity-sql"></see> zastosowaniem przecięcia, na <paramref name="query" />podstawie określonego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dostarczone `query` , które definiuje wyniki do dołączenia, muszą być tego samego typu lub typu, który jest zgodny <xref:System.Data.Objects.ObjectQuery%601>z.  
  
 Parametry, które są zdefiniowane w dostarczonych `query` , są scalane z parametrami, które <xref:System.Data.Objects.ObjectQuery%601> są zdefiniowane w wystąpieniu. Parametry muszą być unikatowe w połączeniu <xref:System.Data.Objects.ObjectParameterCollection>. W połączonej kolekcji nie mogą istnieć dwa parametry o tej samej nazwie. Aby uzyskać więcej informacji, zobacz [Konstruktor zapytań metod](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Wyniki zapytania dziedziczą połączenie z <xref:System.Data.Objects.ObjectQuery%601> wystąpienia, na <xref:System.Data.Objects.ObjectQuery%601.Intersect%2A> którym metoda została wywołana.  
  
   
  
## Examples  
 Przykład w tym temacie jest oparty na [modelu sprzedaży AdventureWorks](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Ten przykład tworzy nowy <xref:System.Data.Objects.ObjectQuery%601> obiekt, który zawiera wyniki dwóch innych zapytań.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Intersect](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_intersect)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Intersect](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_intersect)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> Parametr jest<see langword="null" /> lub jest ciągiem pustym.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectQuery`1.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Data.Objects.ObjectQuery&lt;'T&gt;.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę tego zapytania obiektu.</summary>
        <value>Wartość, która jest nazwą tego <see cref="T:System.Data.Objects.ObjectQuery`1" />elementu. <see langword="string" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa zapytania obiektu identyfikuje bieżące zapytanie obiektu w sekwencji według nazwy podczas konstruowania metod konstruktora zapytań. Domyślnie nazwa zapytania to `it`. Może to być przydatne w przypadku odwoływania się do bieżącej sekwencji w sprzężeniach wewnątrz <xref:System.Data.Objects.ObjectQuery`1.Where*> metody lub <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> w metodzie. Aby uzyskać więcej informacji, zobacz [Konstruktor zapytań metod](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Po ustawieniu <xref:System.Data.Objects.ObjectQuery%601.Name%2A> właściwości <xref:System.Data.Objects.ObjectQuery%601>, ta wartość zostanie aliasem w kolejnych metodach.  
  
 Wartość <xref:System.Data.Objects.ObjectQuery%601.Name%2A> właściwości musi rozpoczynać się od litery i może zawierać litery, cyfry i znaki podkreślenia.  
  
   
  
## Examples  
 Ten przykład ustawia nazwę pierwszego <xref:System.Data.Objects.ObjectQuery%601> elementu na "Product", a następnie używa tego aliasu w <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> pomyślnej metodzie. Przykład w tym temacie jest oparty na [modelu sprzedaży AdventureWorks](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 [!code-csharp[DP ObjectServices Concepts#QueryWithAliasNamed](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithaliasnamed)]
 [!code-vb[DP ObjectServices Concepts#QueryWithAliasNamed](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithaliasnamed)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Wartość określona w ustawieniu jest nieprawidłowa.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TResultType&gt; OfType&lt;TResultType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TResultType&gt; OfType&lt;TResultType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.OfType``1" />
      <MemberSignature Language="VB.NET" Value="Public Function OfType(Of TResultType) () As ObjectQuery(Of TResultType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TResultType&gt; ^ OfType();" />
      <MemberSignature Language="F#" Value="member this.OfType : unit -&gt; System.Data.Objects.ObjectQuery&lt;'ResultType&gt;" Usage="objectQuery.OfType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TResultType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResultType">Typ <see cref="T:System.Data.Objects.ObjectResult`1" /> zwracany, gdy zapytanie jest wykonywane z zastosowanym filtrem.</typeparam>
        <summary>Ogranicza zapytanie tylko do wyników określonego typu.</summary>
        <returns>Nowe <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które jest równoważne z oryginalnym wystąpieniem z zastosowaniem <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/oftype-entity-sql">OFTYPE</see> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<xref:System.Data.Objects.ObjectQuery`1.OfType*>służy do filtrowania wyników zapytania według określonej jednostki lub typu złożonego. Obsługuje model koncepcyjny z dziedziczeniem obiektów. Aby uzyskać więcej informacji, [zobacz Entity Data Model: Dziedziczenie](~/docs/framework/data/adonet/entity-data-model-inheritance.md).

Metodę można stosować tylko <xref:System.Data.Objects.ObjectQuery%601> do typu jednostki lub typu złożonego, który jest zdefiniowany w modelu EDM. <xref:System.Data.Objects.ObjectQuery`1.OfType*>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.EntitySqlException">Określony typ jest nieprawidłowy.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/be01614e-070e-41be-9746-bb674b41e488(v=vs.90)">Instrukcje: Tworzenie i wykonywanie zapytań dotyczących obiektów przy użyciu dziedziczenia na poziomie tabeli (Entity Framework)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; OrderBy (string keys, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; OrderBy(string keys, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OrderBy (keys As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ OrderBy(System::String ^ keys, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.OrderBy (keys, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">Kolumny klucza, według których mają być uporządkowane wyniki.</param>
        <param name="parameters">Zero lub więcej parametrów, które są używane w tej metodzie.</param>
        <summary>Porządkuje wyniki zapytania według określonych kryteriów.</summary>
        <returns>Nowe <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które jest równoważne z oryginalnym wystąpieniem z <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/order-by-entity-sql">kolejnością według</see> zastosowanej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można zagwarantować kolejności wyników w zagnieżdżonym zapytaniu.  
  
 <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A>zawsze powinna być ostatnią metodą konstruktora zapytań w sekwencji.  
  
   
  
## Examples  
 Ten przykład jest oparty na [modelu sprzedaży AdventureWorks](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie tworzony jest nowy <xref:System.Data.Objects.ObjectQuery%601> obiekt, który zawiera wyniki istniejącej `ProductID`kolejności zapytań.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_orderby)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_orderby)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr <paramref name="keys" /> lub <paramref name="parameters" /> jest .<see langword="null" /></exception>
        <exception cref="T:System.ArgumentException"><paramref name="key" /> Jest to pusty ciąg.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt; Select (string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;class System.Data.Common.DbDataRecord&gt; Select(string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of DbDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;System::Data::Common::DbDataRecord ^&gt; ^ Select(System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Select : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;" Usage="objectQuery.Select (projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="projection">Lista wybranych właściwości, które definiują projekcję.</param>
        <param name="parameters">Zero lub więcej parametrów, które są używane w tej metodzie.</param>
        <summary>Ogranicza wyniki zapytania tylko do właściwości, które są zdefiniowane w określonym projekcji.</summary>
        <returns>Nowe <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie typu <see cref="T:System.Data.Common.DbDataRecord" /> , które jest równoważne z oryginalnym wystąpieniem z zastosowaniem <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql">SELECT</see> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Select%2A>stosuje projekcję określoną przez `projection` parametr. Zwracany przez metodę jest zawsze typem wiersza. <xref:System.Data.Common.DbDataRecord> <xref:System.Data.Objects.ObjectQuery%601> <xref:System.Data.Objects.ObjectQuery%601.Select%2A> <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> Użyj metody, aby zwracać wartości, które są typami prostymi, typami jednostek lub typami złożonymi. Aby uzyskać więcej informacji, zobacz [LINQ to Entities](~/docs/framework/data/adonet/ef/language-reference/linq-to-entities.md).  
  
 Gdy właściwość nawigacji jest uwzględniona w projekcji, wyniki zapytania zawierają kolekcję zagnieżdżonych <xref:System.Data.Common.DbDataRecord> obiektów. Aby uzyskać więcej informacji, zobacz [jak: Nawigowanie po relacjach](https://msdn.microsoft.com/library/b1d71c7d-16a7-4b46-96ac-690176bd5057)przy użyciu właściwości nawigacji.  
  
   
  
## Examples  
 Ten przykład jest oparty na [modelu sprzedaży AdventureWorks](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie tworzony jest nowy <xref:System.Data.Objects.ObjectQuery%601> , którego wyniki są rekordy `ProductID` danych zawierające pola wyników tego zapytania.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_select)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_select)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="projection" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="parameters" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="projection" /> Jest to pusty ciąg.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="SelectValue&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TResultType&gt; SelectValue&lt;TResultType&gt; (string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TResultType&gt; SelectValue&lt;TResultType&gt;(string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectValue(Of TResultType) (projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of TResultType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TResultType&gt; ^ SelectValue(System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.SelectValue : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'ResultType&gt;" Usage="objectQuery.SelectValue (projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TResultType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResultType">Typ <see cref="T:System.Data.Objects.ObjectQuery`1" /> zwracany<see cref="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" /> przez metodę.</typeparam>
        <param name="projection">Lista projekcji.</param>
        <param name="parameters">Opcjonalny zestaw parametrów zapytania, który powinien znajdować się w zakresie podczas analizowania.</param>
        <summary>Ogranicza wyniki zapytania tylko do właściwości określonej w projekcji.</summary>
        <returns>Nowe <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie typu zgodne z konkretną projekcją. Zwracana <see cref="T:System.Data.Objects.ObjectQuery`1" /> wartość jest równoważna z oryginalnym wystąpieniem z zastosowanym <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql">wybieraniem wartości</see> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*>służy do zwracania wartości, które są typami prostymi, typami jednostek lub typami złożonymi. <xref:System.Data.Objects.ObjectQuery%601.Select%2A> Użyj metody dla projekcji, które wymagają typu wiersza zamiast typu wartości. Aby uzyskać więcej informacji, zobacz [zapytania dotyczące obiektów](https://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
 Metoda stosuje projekcję określoną `projection` przez parametr. <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> Zwracany przez metodę musi być typu wartości, który jest zgodny z projekcją i musi być tym samym <xref:System.Data.Objects.ObjectQuery`1.SelectValue*>typem co typ. <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> <xref:System.Data.Objects.ObjectQuery%601>  
  
   
  
## Examples  
 Ten przykład jest oparty na [modelu sprzedaży AdventureWorks](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie tworzony jest nowy <xref:System.Data.Objects.ObjectQuery%601> , który zawiera wyniki, które są `ProductID` sekwencją wartości rzutowanych od wyników istniejącego zapytania.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_selectvalue)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_selectvalue)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="projection" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="parameters" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="projection" /> Jest to pusty ciąg.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Skip (string keys, string count, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Skip(string keys, string count, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Skip (keys As String, count As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Skip(System::String ^ keys, System::String ^ count, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Skip : string * string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Skip (keys, count, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="count" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">Kolumny klucza, według których mają być uporządkowane wyniki.</param>
        <param name="count">Liczba wyników do pominięcia. Musi to być stała lub odwołanie do parametru.</param>
        <param name="parameters">Opcjonalny zestaw parametrów zapytania, który powinien znajdować się w zakresie podczas analizowania.</param>
        <summary>Porządkuje wyniki zapytania według określonych kryteriów i pomija określoną liczbę wyników.</summary>
        <returns>Nowe <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które jest równoważne z oryginalnym wystąpieniem z zastosowaniem <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/order-by-entity-sql">kolejności order by</see> i [Skip](~/docs/framework/data/adonet/ef/language-reference/skip-entity-sql.md) .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można użyć <xref:System.Data.Objects.ObjectQuery%601.Top%2A>metodypometodzie <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> . Gdy używasz <xref:System.Data.Objects.ObjectQuery%601.Top%2A> po <xref:System.Data.Objects.ObjectQuery%601.Skip%2A>, działa on podobnie jak instrukcja [Limit](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md) klauzuli.  
  
   
  
## Examples  
 Ten przykład pobiera pięć `Product` obiektów po pominięciu pierwszych trzech w wyniku zapytania, posortowane `Product.ListPrice`według.  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_skiplimit)]
 [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_skiplimit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Każdy argument jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="keys" />jest pustym ciągiem.  
  
—lub— 
 <paramref name="count" />jest pustym ciągiem.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który wykonuje iterację w wyniku zapytania.</summary>
        <returns><see cref="T:System.Collections.Generic.IEnumerator`1" /> Obiekt, który może służyć do iteracji wyników.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie <xref:System.Data.Objects.ObjectQuery%601.System%23Collections%23Generic%23IEnumerable%7BT%7D%23GetEnumerator%2A> wykonuje zapytanie.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Top (string count, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Top(string count, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Top (count As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Top(System::String ^ count, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Top : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Top (count, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="count">Liczba elementów w wynikach jako ciąg.</param>
        <param name="parameters">Opcjonalny zestaw parametrów zapytania, który powinien znajdować się w zakresie podczas analizowania.</param>
        <summary>Ogranicza wyniki zapytania do określonej liczby elementów.</summary>
        <returns>Nowe <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które jest równoważne z oryginalnym wystąpieniem z zastosowaniem najwyższego <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/top-entity-sql">poziomu</see> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Top%2A>jest niejednoznaczne, chyba że zapytanie jest sortowane.  
  
 Użycie <xref:System.Data.Objects.ObjectQuery%601.Top%2A> [](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md) metody <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> po metodzie działa podobnie jak w przypadku instrukcji [order by](~/docs/framework/data/adonet/ef/language-reference/order-by-entity-sql.md) .  
  
   
  
## Examples  
 Przykłady te są oparte na [modelu sprzedaży AdventureWorks](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 W tym przykładzie tworzony jest <xref:System.Data.Objects.ObjectQuery%601> nowy, który zawiera pierwsze dwa wyniki istniejącego zapytania.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Top](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_top)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Top](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_top)]  
  
 Ten przykład pobiera pięć `Product` obiektów po pominięciu pierwszych trzech w wyniku zapytania, posortowane `Product.ListPrice`według. <xref:System.Data.Objects.ObjectQuery%601.Top%2A>jest używany zamiast [limitu](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md) stronicowania.  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_skiplimit)]
 [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_skiplimit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="count" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="count" />jest pustym ciągiem.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Union (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Union(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Union(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Union : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Union query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query"><see cref="T:System.Data.Objects.ObjectQuery`1" /> Reprezentuje wyniki do dodania.</param>
        <summary>Łączy wyniki zapytania z wynikami zapytania innego obiektu, bez żadnych duplikatów.</summary>
        <returns>Nowe <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które jest równoważne z oryginalnym wystąpieniem z <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/union-entity-sql">Unią</see> zastosowano, aby dodać wyniki określonego <paramref name="query" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Union%2A>dodaje wyniki dostarczone `query` bez żadnych duplikatów.  
  
 Dostarczone `query` , które definiuje wyniki do dodania, muszą być tego samego typu lub typu, który można podwyższyć poziomu do tego <xref:System.Data.Objects.ObjectQuery%601>typu. Na przykład poniższe są prawidłowe, ponieważ `DiscontinuedProducts` można podwyższyć poziom do: `Products`  
  
```  
ObjectQuery<Product>.Union(ObjectQuery<DiscontinuedProduct>)  
```  
  
 Poniższe elementy spowodują zgłoszenie wyjątku, ponieważ `Products` nie można podwyższyć poziomu do. `DiscontinuedProducts`  
  
```  
ObjectQuery <DiscontinuedProduct>.Union(ObjectQuery<Product>)   
```  
  
 <xref:System.Data.Common.DbDataRecord> <xref:System.Data.Common.DbDataRecord> `query` W przypadku typu, rekordy w obu zapytaniach muszą mieć taką samą liczbę kolumn, a typy w kolumnach <xref:System.Data.Common.DbDataRecord> przenoszonej metody muszą być awansowane do typów kolumn w <xref:System.Data.Objects.ObjectQuery%601> <xref:System.Data.Objects.ObjectQuery%601>.  
  
 Parametry, które są zdefiniowane w dostarczonych `query` , są scalane z parametrami, które <xref:System.Data.Objects.ObjectQuery%601> są zdefiniowane w wystąpieniu. Parametry muszą być unikatowe w połączeniu <xref:System.Data.Objects.ObjectParameterCollection>. W połączonej kolekcji nie mogą istnieć dwa parametry o tej samej nazwie. Aby uzyskać więcej informacji, zobacz [Konstruktor zapytań metod](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Wyniki zapytania dziedziczą połączenie z wystąpienia, <xref:System.Data.Objects.ObjectQuery%601> na którym <xref:System.Data.Objects.ObjectQuery%601.Union%2A> został wywołany.  
  
   
  
## Examples  
 Ten przykład jest oparty na [modelu sprzedaży AdventureWorks](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie zastosowano <xref:System.Data.Objects.ObjectQuery%601.Union%2A> metodę, aby utworzyć <xref:System.Data.Objects.ObjectQuery%601> nowy obiekt.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_union)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_union)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="query" /></exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="UnionAll">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; UnionAll (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; UnionAll(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function UnionAll (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ UnionAll(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.UnionAll : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.UnionAll query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query"><see cref="T:System.Data.Objects.ObjectQuery`1" /> Reprezentuje wyniki do dodania.</param>
        <summary>Łączy wyniki zapytania z wynikami zapytania innego obiektu, w tym wszystkie duplikaty.</summary>
        <returns>Nowe <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które jest równoważne z oryginalnym wystąpieniem z zastosowaniem <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/union-entity-sql">Union All</see> w celu dodania wyników określonego <paramref name="query" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A>dodaje wyniki dostarczonych `query` , w tym wszystkie duplikaty.  
  
 Dostarczone `query` , które definiuje wyniki do dodania, muszą być tego samego typu lub typu, który można podwyższyć poziomu do tego <xref:System.Data.Objects.ObjectQuery%601>typu. Na przykład poniższe są prawidłowe, ponieważ `DiscontinuedProducts` można podwyższyć poziom do: `Products`  
  
```  
ObjectQuery<Product>.Union(ObjectQuery<DiscontinuedProduct>)  
```  
  
 Poniższe elementy spowodują zgłoszenie wyjątku, ponieważ `Products` nie można podwyższyć poziomu do. `DiscontinuedProducts`  
  
```  
ObjectQuery <DiscontinuedProduct>.Union(ObjectQuery<Product>)   
```  
  
 <xref:System.Data.Common.DbDataRecord> <xref:System.Data.Common.DbDataRecord> `query` W przypadku typu, rekordy w obu zapytaniach muszą mieć taką samą liczbę kolumn, a typy w kolumnach <xref:System.Data.Common.DbDataRecord> przenoszonej metody muszą być awansowane do typów kolumn w <xref:System.Data.Objects.ObjectQuery%601> <xref:System.Data.Objects.ObjectQuery%601>.  
  
 Parametry, które są zdefiniowane w dostarczonych `query` , są scalane z parametrami, które <xref:System.Data.Objects.ObjectQuery%601> są zdefiniowane w wystąpieniu. Parametry muszą być unikatowe w połączeniu <xref:System.Data.Objects.ObjectParameterCollection>. W połączonej kolekcji nie mogą istnieć dwa parametry o tej samej nazwie. Aby uzyskać więcej informacji, zobacz [Konstruktor zapytań metod](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Wyniki zapytania dziedziczą połączenie z wystąpienia, <xref:System.Data.Objects.ObjectQuery%601> na którym <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> został wywołany.  
  
   
  
## Examples  
 Przykład w tym temacie jest oparty na [modelu sprzedaży AdventureWorks](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie zastosowano <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> metodę, aby utworzyć nowy <xref:System.Data.Objects.ObjectQuery%601> obiekt. Następnie wywołuje <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A> metodę dla nowego <xref:System.Data.Objects.ObjectQuery%601> obiektu, aby uzyskać unikatowe wyniki tego zapytania.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_unionall)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_unionall)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="query" /></exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Where (string predicate, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Where(string predicate, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Where (predicate As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Where(System::String ^ predicate, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Where : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Where (predicate, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="predicate">Predykat filtru.</param>
        <param name="parameters">Zero lub więcej parametrów, które są używane w tej metodzie.</param>
        <summary>Ogranicza zapytanie do wyników, które pasują do określonych kryteriów filtrowania.</summary>
        <returns>Nowe <see cref="T:System.Data.Objects.ObjectQuery`1" /> wystąpienie, które jest równoważne z oryginalnym wystąpieniem, w <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/where-entity-sql">którym</see> zastosowano.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Ten przykład jest oparty na [modelu sprzedaży AdventureWorks](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). W przykładzie tworzony jest nowy <xref:System.Data.Objects.ObjectQuery%601> , który zawiera wyniki istniejącej kwerendy przefiltrowanej według następujących kryteriów: `"it.ProductID = 900"`.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Where](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_where)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Where](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_where)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="predicate" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="parameters" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="predicate" /> Jest to pusty ciąg.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Wykonywanie zapytań dotyczących danych jako obiektów (Entity Framework)</related>
      </Docs>
    </Member>
  </Members>
</Type>
