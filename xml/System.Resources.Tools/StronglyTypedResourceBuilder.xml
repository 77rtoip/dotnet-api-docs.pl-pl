<Type Name="StronglyTypedResourceBuilder" FullName="System.Resources.Tools.StronglyTypedResourceBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7be7f3118763d30ffd080582491bdf7c07503c21" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30564493" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class StronglyTypedResourceBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit StronglyTypedResourceBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Resources.Tools.StronglyTypedResourceBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class StronglyTypedResourceBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class StronglyTypedResourceBuilder abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia obsługę jednoznacznie zasobów. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj zasobów oddzielne kodu z zawartości wewnątrz aplikacji. Tworzenie i korzystanie z tych zasobów ułatwia tworzenie aplikacji możliwych do zlokalizowania. W programie .NET Framework, zasoby są zazwyczaj używane przy użyciu <xref:System.Resources.ResourceManager> klasy, która zawiera metody, które zapewniają dostęp do zasobów określonej kultury w czasie wykonywania. Aby uzyskać więcej informacji na temat tworzenia i korzystanie z zasobów, zobacz [zasobów w aplikacjach pulpitu](http://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890).  
  
 Obsługa zasobu o jednoznacznie jest funkcją kompilacji, która hermetyzuje dostęp do zasobów przez utworzenie klas, które zawierają zestaw statycznych, tylko do odczytu (`get`) właściwości. Zapewnia to alternatywny sposób, aby używać zasobów zamiast wywoływać metodę <xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType> i <xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType> metody.  
  
 Podstawowe funkcje obsługi zasobu o jednoznacznie są udostępniane przez <xref:System.Resources.Tools.StronglyTypedResourceBuilder> klasy (a także `/str` opcji wiersza polecenia w [Resgen.exe (Generator pliku zasobów)](~/docs/framework/tools/resgen-exe-resource-file-generator.md)). Dane wyjściowe <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> metoda jest klasa, która zawiera jednoznacznie właściwości, które odpowiada zasoby, do których odwołuje się parametr wejściowy. Ta klasa umożliwia dostęp tylko do odczytu z zasobami, które są dostępne w pliku przetworzone.  
  
   
  
## Examples  
 Poniższy przykład generuje klasę o nazwie `DemoResources` który jest napisany w języku C# lub Visual Basic (w zależności od kodu źródłowego w tym przykładzie). Ta klasa jest w `DemoApp` przestrzeni nazw i ma właściwości, które zwracają mapy bitowej logo i nazwę aplikacji. Przykład wywołania `CreateResourceFile` metodę w celu utworzenia plików resw niezbędne i wymaga się, że plik mapy bitowej o nazwie Logo.bmp można znaleźć w tym przykładzie w bieżącym katalogu. Przykład kodu wykorzystuje następujący plik zasobu o nazwie demo.resx:  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/example1.cs#1)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/example1.vb#1)]  
  
 Kod aplikacji można użyć klasy w następujący sposób:  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/demoresources.cs#2)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/demoresources.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Generuje plik klasy, który zawiera jednoznacznie właściwości, które odpowiada zasoby, które są określone w parametrze wejściowym.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">
          <see cref="T:System.Collections.IDictionary" /> Kolekcji, gdzie każda para klucza i wartości wpisu słownika jest nazwa zasobu oraz wartości zasobu.</param>
        <param name="baseName">Nazwa klasy do wygenerowania.</param>
        <param name="generatedCodeNamespace">Przestrzeń nazw klasy do wygenerowania.</param>
        <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> klasy, która zapewnia język, w którym zostanie wygenerowana klasa.</param>
        <param name="internalClass">
          <see langword="true" /> Aby wygenerować Wewnętrzna klasa; <see langword="false" /> do generowania klasy publicznej.</param>
        <param name="unmatchable">Tablica, która zawiera nazwę każdego zasobu, dla którego nie można wygenerować właściwości. Zazwyczaj nie można wygenerować właściwości, ponieważ nazwa zasobu nie jest prawidłowym identyfikatorem.</param>
        <summary>Generuje plik klasy, który zawiera jednoznacznie właściwości, które odpowiada zasoby w określonej kolekcji.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeCompileUnit" /> kontenera.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> do generowania klasy, która udostępnia otokę jednoznacznie, tylko do odczytu na dostęp do zasobów, które są zawarte w `resourceList` parametru.  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> Klasy ignoruje dowolną nazwę zasobu, który zaczyna się od znaków "$" lub ">>". Nazwy zasobów "Kultura" i "ResourceManager" są nieprawidłowe identyfikatory.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceList" />, <paramref name="basename" />, lub <paramref name="codeProvider" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Nazwa węzła zasobu nie odpowiada jego kluczowi w <paramref name="resourceList" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">Nazwa pliku .resx używane jako dane wejściowe.</param>
        <param name="baseName">Nazwa klasy do wygenerowania.</param>
        <param name="generatedCodeNamespace">Przestrzeń nazw klasy do wygenerowania.</param>
        <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> klasy, która zapewnia język, w którym zostanie wygenerowana klasa.</param>
        <param name="internalClass">
          <see langword="true" /> Aby wygenerować Wewnętrzna klasa; <see langword="false" /> do generowania klasy publicznej.</param>
        <param name="unmatchable">A <see cref="T:System.String" /> tablica, która zawiera nazwę każdego zasobu, dla którego nie można wygenerować właściwości. Zazwyczaj nie można wygenerować właściwości, ponieważ nazwa zasobu nie jest prawidłowym identyfikatorem.</param>
        <summary>Generuje plik klasy, który zawiera jednoznacznie właściwości, które odpowiada zasobów w pliku .resx określony.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeCompileUnit" /> kontenera.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> do generowania klasy, która zapewnia jednoznacznie, tylko do odczytu dostęp do zasobów, które są zawarte w `resxFile` parametru.  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> Klasy ignoruje dowolną nazwę zasobu, który zaczyna się od znaków "$" lub ">>". Nazwy zasobów "Kultura" i "ResourceManager" są nieprawidłowe identyfikatory.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basename" /> lub <paramref name="codeProvider" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">
          <see cref="T:System.Collections.IDictionary" /> Kolekcji, gdzie każda para klucza i wartości wpisu słownika jest nazwa zasobu oraz wartości zasobu.</param>
        <param name="baseName">Nazwa klasy do wygenerowania.</param>
        <param name="generatedCodeNamespace">Przestrzeń nazw klasy do wygenerowania.</param>
        <param name="resourcesNamespace">Przestrzeń nazw zasobów, które ma zostać wygenerowane.</param>
        <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> obiekt, który zawiera język, w którym zostanie wygenerowana klasa.</param>
        <param name="internalClass">
          <see langword="true" /> Aby wygenerować Wewnętrzna klasa; <see langword="false" /> do generowania klasy publicznej.</param>
        <param name="unmatchable">A <see cref="T:System.String" /> tablica, która zawiera nazwę każdego zasobu, dla którego nie można wygenerować właściwości. Zazwyczaj nie można wygenerować właściwości, ponieważ nazwa zasobu nie jest prawidłowym identyfikatorem.</param>
        <summary>Generuje plik klasy, który zawiera jednoznacznie właściwości, które odpowiada zasoby w określonej kolekcji.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeCompileUnit" /> kontenera.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie umożliwia używanie `resourcesNamespace` parametr, aby określić przestrzeń nazw dla wygenerowanego zasobów. W takim przypadku wygenerowany kod wygląda następująco:  
  
```  
System.Resources.ResourceManager rm = new System.Resources.ResourceManager("<resourceNamespace>.<baseName>",typeof(baseName).Assembly);  
```  
  
 W większości przypadków nie trzeba wywołać tę metodę w kodzie aplikacji.  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> Klasy ignoruje dowolną nazwę zasobu, który zaczyna się od znaków "$" lub ">>". Nazwy zasobów "Kultura" i "ResourceManager" są nieprawidłowe identyfikatory.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceList" />, <paramref name="basename" />, lub <paramref name="codeProvider" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Nazwa węzła zasobu nie odpowiada jego kluczowi w <paramref name="resourceList" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">Nazwa pliku .resx używane jako dane wejściowe.</param>
        <param name="baseName">Nazwa klasy do wygenerowania.</param>
        <param name="generatedCodeNamespace">Przestrzeń nazw klasy do wygenerowania.</param>
        <param name="resourcesNamespace">Przestrzeń nazw zasobów, które ma zostać wygenerowane.</param>
        <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> klasy, która zapewnia język, w którym zostanie wygenerowana klasa.</param>
        <param name="internalClass">
          <see langword="true" /> Aby wygenerować Wewnętrzna klasa; <see langword="false" /> do generowania klasy publicznej.</param>
        <param name="unmatchable">A <see cref="T:System.String" /> tablica, która zawiera nazwę każdego zasobu, dla którego nie można wygenerować właściwości. Zazwyczaj nie można wygenerować właściwości, ponieważ nazwa zasobu nie jest prawidłowym identyfikatorem.</param>
        <summary>Generuje plik klasy, który zawiera jednoznacznie właściwości, które odpowiada zasobów w pliku .resx określony.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeCompileUnit" /> kontenera.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> do generowania klasy, która zapewnia jednoznacznie, tylko do odczytu dostęp do zasobów, które są zawarte w `resxFile` parametru.  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> Klasy ignoruje dowolną nazwę zasobu, który zaczyna się od znaków "$" lub ">>". Nazwy zasobów "Kultura" i "ResourceManager" są nieprawidłowe identyfikatory.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basename" /> lub <paramref name="codeProvider" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyResourceName">
      <MemberSignature Language="C#" Value="public static string VerifyResourceName (string key, System.CodeDom.Compiler.CodeDomProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyResourceName(string key, class System.CodeDom.Compiler.CodeDomProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName(System.String,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyResourceName (key As String, provider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VerifyResourceName(System::String ^ key, System::CodeDom::Compiler::CodeDomProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="provider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="key">Ciąg, aby sprawdzić, a w razie potrzeby Konwertuj na prawidłową nazwę zasobu.</param>
        <param name="provider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> obiekt, który określa języka docelowego.</param>
        <summary>Generuje ciąg prawidłowego zasobu na podstawie określonego ciągu wejściowego i dostawcy kodu.</summary>
        <returns>Prawidłową nazwę zasobu pochodną <paramref name="key" /> parametru. Nieprawidłowy tokenów są zamieniane na znak podkreślenia (_) lub <see langword="null" /> Jeśli ciąg pochodnej nadal zawiera nieprawidłowe znaki zgodnie z językiem określonym przez <paramref name="provider" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `key` parametr jest prawidłowy ciąg znaków, jest zwracany ten ciąg. Jeśli `key` parametr jest nieprawidłowy ciąg lub ciąg, który zawiera nieprawidłowe znaki <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> metoda próbuje wygenerować prawidłowy ciąg na podstawie `key` i `provider` parametrów. Jeśli można wygenerować prawidłowy ciąg, że zostanie zwrócony ciąg; w przeciwnym razie `null` jest zwracany.  
  
 Jeśli `key` parametr jest pustym ciągiem (""), zostanie zwrócony ciąg składający się z jednego podkreślenia (_). Jeśli `key` parametr nie jest ciągiem pustym <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> metoda porównuje każdego znaku w ciągu do zestawu nieprawidłowy tokeny na podstawie języka określonego przez `provider` parametru. Dowolny nieprawidłowy znak w ciągu jest zastępowany się od znaku podkreślenia. Znaki, które zostaną zastąpione podkreślenia są następujące:  
  
 "" (miejsca), U + 00A0 (twardej spacji) "." (okres), "," (przecinek), ";" (średnik), "&#124;", "~", "@", '#', '%', "^", "&", "*", "+", "-", '/', "\\","\<", ">","?", "[", "]", "(",")", "{", "}", "" "(cudzysłów)," "(apostrof),": ", i"! ".  
  
> [!NOTE]
>  Zasoby jednoznacznie nie zezwala na używanie słów kluczowych języka (takich jak `if`, `for`i tak dalej) jako klucza nazwy zasobu. Jednak <xref:System.CodeDom> wzorca projektowego umożliwia używanie słów kluczowych języka, prefiksu — słowo kluczowe znakiem podkreślenia. <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> Wywołania metody <xref:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier%2A> metodę, aby wymusić ten projekt. Na przykład, jeśli używasz nazwę zasobu która jest taka sama jak słowem kluczowym języka, takich jak `for`, nazwa jest wyświetlana jako `_for` w klasie zasobu o jednoznacznie wygenerowany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> lub <paramref name="provider" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>