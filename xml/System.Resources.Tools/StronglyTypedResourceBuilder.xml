<Type Name="StronglyTypedResourceBuilder" FullName="System.Resources.Tools.StronglyTypedResourceBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="73821694b44de6d89969923dba3f331aa67d31f0" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51903115" /></Metadata><TypeSignature Language="C#" Value="public static class StronglyTypedResourceBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit StronglyTypedResourceBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Resources.Tools.StronglyTypedResourceBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class StronglyTypedResourceBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class StronglyTypedResourceBuilder abstract sealed" />
  <TypeSignature Language="F#" Value="type StronglyTypedResourceBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia obsługę silnie typizowanych zasobów. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle zasoby należy rozdzielić kodu z zawartości w aplikacji. Tworzenie i używanie tych zasobów ułatwia tworzenie aplikacji możliwych do zlokalizowania. W .NET Framework, zasoby są zwykle używane przy użyciu <xref:System.Resources.ResourceManager> klasy, która zawiera metody, które zapewniają dostęp do specyficznych dla kultury zasobów w czasie wykonywania. Aby uzyskać więcej informacji na temat tworzenia i używania zasobów, zobacz [zasoby w aplikacjach pulpitu](https://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890).  
  
 Obsługę silnie typizowanych zasobów jest funkcją czasu kompilacji, która hermetyzują dostęp do zasobów przez tworzenie klas zawierających zestaw statycznych, tylko do odczytu (`get`) właściwości. Zapewnia to alternatywny sposób zużywają zasoby, zamiast wywoływać metodę <xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType> i <xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType> metody.  
  
 Podstawowe funkcje obsługi silnie typizowanych zasobów są udostępniane przez <xref:System.Resources.Tools.StronglyTypedResourceBuilder> klasy (także `/str` opcji wiersza polecenia w [Resgen.exe (Generator pliku zasobów)](~/docs/framework/tools/resgen-exe-resource-file-generator.md)). Dane wyjściowe <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> metodą jest klasa zawierająca silnie typizowane właściwości, które odpowiadają zasobom, które są określone w parametrze wejściowym. Ta klasa dostarcza dostęp do zasobów, które są dostępne w przetwarzanym pliku tylko do odczytu.  
  
   
  
## Examples  
 Poniższy przykład generuje klasę o nazwie `DemoResources` który został napisany w języku C# lub Visual Basic (w zależności od przykładowym kodzie źródłowym). Ta klasa znajduje się w `DemoApp` przestrzeni nazw i ma właściwości, które zwracają mapa bitowa logo i nazwę aplikacji. Przykład wywołuje `CreateResourceFile` metodę, aby utworzyć plik resw niezbędne i wymaga, że plik mapy bitowej o nazwie Logo.bmp można znaleźć w tym przykładzie w bieżącym katalogu. Przykład kodu używa następującego pliku zasobów o nazwie demo.resx:  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/example1.cs#1)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/example1.vb#1)]  
  
 Kod aplikacji można użyć klasy w następujący sposób:  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/demoresources.cs#2)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/demoresources.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Generuje plik klasy, która zawiera silnie typizowane właściwości, które odpowiadają zasobom, które są określone w parametrze wejściowym.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList"><see cref="T:System.Collections.IDictionary" /> Kolekcji, gdzie każda para klucza i wartości wpisu słownika jest nazwa zasobu, a wartości zasobu.</param>
        <param name="baseName">Nazwa klasy do wygenerowania.</param>
        <param name="generatedCodeNamespace">Przestrzeń nazw klasy do wygenerowania.</param>
        <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> klasa, która zawiera język, w którym zostaną wygenerowane klasy.</param>
        <param name="internalClass"><see langword="true" /> Aby wygenerować Wewnętrzna klasa; <see langword="false" /> wygenerować klasę publiczną.</param>
        <param name="unmatchable">Tablica, która zawiera nazwy każdego zasobu, dla którego nie można wygenerować właściwości. Zazwyczaj właściwości nie można wygenerować, ponieważ nazwa zasobu nie jest prawidłowym identyfikatorem.</param>
        <summary>Generuje plik klasy, który zawiera silnie typizowane właściwości, które odpowiadają zasobów przywoływany w określonej kolekcji.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeCompileUnit" /> kontenera.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> metodę, aby wygenerować klasę, która udostępnia otokę silnie typizowany, tylko do odczytu do dostępu do zasobów, które są zawarte w `resourceList` parametru.  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> Klasy ignoruje wszelkie nazwy zasobów, której rozpoczyna się od znaków "$" lub ">>". Nazwy zasobów "Kultura" i "ResourceManager" są nieprawidłowe identyfikatory.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="resourceList" />, <paramref name="basename" />, lub <paramref name="codeProvider" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Nazwa węzła zasobu jest niezgodna z jego klucza w <paramref name="resourceList" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">Nazwa pliku ResX używane jako dane wejściowe.</param>
        <param name="baseName">Nazwa klasy do wygenerowania.</param>
        <param name="generatedCodeNamespace">Przestrzeń nazw klasy do wygenerowania.</param>
        <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> klasa, która zawiera język, w którym zostaną wygenerowane klasy.</param>
        <param name="internalClass"><see langword="true" /> Aby wygenerować Wewnętrzna klasa; <see langword="false" /> wygenerować klasę publiczną.</param>
        <param name="unmatchable">A <see cref="T:System.String" /> tablicę, która zawiera nazwy każdego zasobu, dla którego nie można wygenerować właściwości. Zazwyczaj właściwości nie można wygenerować, ponieważ nazwa zasobu nie jest prawidłowym identyfikatorem.</param>
        <summary>Generuje plik klasy, która zawiera silnie typizowane właściwości, które odpowiadają zasobom w określony plik .resx.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeCompileUnit" /> kontenera.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> metodę, aby wygenerować klasę, która udostępnia silnie typizowany, tylko do odczytu do zasobów, które są zawarte w `resxFile` parametru.  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> Klasy ignoruje wszelkie nazwy zasobów, której rozpoczyna się od znaków "$" lub ">>". Nazwy zasobów "Kultura" i "ResourceManager" są nieprawidłowe identyfikatory.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="basename" /> lub <paramref name="codeProvider" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList"><see cref="T:System.Collections.IDictionary" /> Kolekcji, gdzie każda para klucza i wartości wpisu słownika jest nazwa zasobu, a wartości zasobu.</param>
        <param name="baseName">Nazwa klasy do wygenerowania.</param>
        <param name="generatedCodeNamespace">Przestrzeń nazw klasy do wygenerowania.</param>
        <param name="resourcesNamespace">Przestrzeń nazw zasobów do wygenerowania.</param>
        <param name="codeProvider">Element <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> obiektu, który dostarcza język, w którym zostaną wygenerowane klasy.</param>
        <param name="internalClass"><see langword="true" /> Aby wygenerować Wewnętrzna klasa; <see langword="false" /> wygenerować klasę publiczną.</param>
        <param name="unmatchable">A <see cref="T:System.String" /> tablicę, która zawiera nazwy każdego zasobu, dla którego nie można wygenerować właściwości. Zazwyczaj właściwości nie można wygenerować, ponieważ nazwa zasobu nie jest prawidłowym identyfikatorem.</param>
        <summary>Generuje plik klasy, który zawiera silnie typizowane właściwości, które odpowiadają zasobów przywoływany w określonej kolekcji.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeCompileUnit" /> kontenera.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie umożliwia użycie `resourcesNamespace` parametru, aby określić przestrzeń nazw dla wygenerowanego zasobów. W takim wypadku wygenerowany kod wygląda następująco:  
  
```  
System.Resources.ResourceManager rm = new System.Resources.ResourceManager("<resourceNamespace>.<baseName>",typeof(baseName).Assembly);  
```  
  
 W większości przypadków nie musisz wywołać tę metodę w kodzie aplikacji.  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> Klasy ignoruje wszelkie nazwy zasobów, której rozpoczyna się od znaków "$" lub ">>". Nazwy zasobów "Kultura" i "ResourceManager" są nieprawidłowe identyfikatory.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="resourceList" />, <paramref name="basename" />, lub <paramref name="codeProvider" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Nazwa węzła zasobu jest niezgodna z jego klucza w <paramref name="resourceList" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">Nazwa pliku ResX używane jako dane wejściowe.</param>
        <param name="baseName">Nazwa klasy do wygenerowania.</param>
        <param name="generatedCodeNamespace">Przestrzeń nazw klasy do wygenerowania.</param>
        <param name="resourcesNamespace">Przestrzeń nazw zasobów do wygenerowania.</param>
        <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> klasa, która zawiera język, w którym zostaną wygenerowane klasy.</param>
        <param name="internalClass"><see langword="true" /> Aby wygenerować Wewnętrzna klasa; <see langword="false" /> wygenerować klasę publiczną.</param>
        <param name="unmatchable">A <see cref="T:System.String" /> tablicę, która zawiera nazwy każdego zasobu, dla którego nie można wygenerować właściwości. Zazwyczaj właściwości nie można wygenerować, ponieważ nazwa zasobu nie jest prawidłowym identyfikatorem.</param>
        <summary>Generuje plik klasy, która zawiera silnie typizowane właściwości, które odpowiadają zasobom w określony plik .resx.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeCompileUnit" /> kontenera.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> metodę, aby wygenerować klasę, która udostępnia silnie typizowany, tylko do odczytu do zasobów, które są zawarte w `resxFile` parametru.  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> Klasy ignoruje wszelkie nazwy zasobów, której rozpoczyna się od znaków "$" lub ">>". Nazwy zasobów "Kultura" i "ResourceManager" są nieprawidłowe identyfikatory.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="basename" /> lub <paramref name="codeProvider" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyResourceName">
      <MemberSignature Language="C#" Value="public static string VerifyResourceName (string key, System.CodeDom.Compiler.CodeDomProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyResourceName(string key, class System.CodeDom.Compiler.CodeDomProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName(System.String,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyResourceName (key As String, provider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VerifyResourceName(System::String ^ key, System::CodeDom::Compiler::CodeDomProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member VerifyResourceName : string * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName (key, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="provider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="key">Ciąg, aby sprawdzić, a jeśli to konieczne, należy przekonwertować prawidłową nazwę zasobu.</param>
        <param name="provider">Element <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> obiektu, który określa docelowy język do użycia.</param>
        <summary>Generuje ciąg prawidłowy zasób, na podstawie określonego ciągu wejściowego i dostawcy kodu.</summary>
        <returns>Prawidłową nazwę zasobu pochodną <paramref name="key" /> parametru. Wszelkie nieprawidłowe tokeny są zamieniane na znaku podkreślenia (_) lub <see langword="null" /> czy pochodne ciągu nadal zawiera nieprawidłowe znaki zgodnie z językiem określonym przez <paramref name="provider" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `key` parametr jest prawidłowy ciąg znaków, ten ciąg jest zwracany. Jeśli `key` parametr jest nieprawidłowy ciąg lub ciąg, który zawiera nieprawidłowe znaki <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> metoda próbuje wygenerować prawidłowy ciąg na podstawie `key` i `provider` parametrów. Jeśli prawidłowy ciąg mogą być generowane, zwracany jest ciąg; w przeciwnym razie `null` jest zwracana.  
  
 Jeśli `key` parametr jest pustym ciągiem (""), zostanie zwrócony ciąg, który składa się z znakiem pojedynczego znaku podkreślenia (_). Jeśli `key` parametr nie jest ciągiem pustym <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> metoda porównuje każdego znaku w ciągu, aby zestaw nieprawidłowe tokeny oparte na języku, który został określony przez `provider` parametru. Dowolny nieprawidłowy znak w ciągu jest zastępowany znaku podkreślenia. Znaki, które zostaną zastąpione znakiem podkreślenia są następujące:  
  
 "" (miejsca), U + 00A0 (spacja nierozdzielająca) "." (okres), "," (przecinek), ";" (średnik) "&#124;", "~", "@", "#", "%", "^", "&", "*", "+", "-", '/', "\\','\<", ">","?", "[", "]", '(',')', "{", "}", "" "(cudzysłów), ''"(apostrof),":", i "!".  
  
> [!NOTE]
>  Zasoby silnie typizowane nie zezwalają na użycie słowa kluczowe języka (takie jak `if`, `for`i tak dalej) jako zasobu nazwy kluczy. Jednak <xref:System.CodeDom> wzorzec projektowy pozwala na używanie słowa kluczowe języka przez dodanie przedrostka — słowo kluczowe znakiem podkreślenia. <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> Wywołania metody <xref:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier%2A> metodę, aby wymusić ten projekt. Na przykład, jeśli używasz nazwy zasobu, jest taka sama jak słowa kluczowego języka, takich jak `for`, nazwa jest wyświetlana jako `_for` w wygenerowanym silnie typizowanej klasy zasobów.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> lub <paramref name="provider" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>