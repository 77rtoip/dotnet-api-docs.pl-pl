<Type Name="HttpSimpleClientProtocol" FullName="System.Web.Services.Protocols.HttpSimpleClientProtocol">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="24110eb1ffa47f6267659a07e83cab2de1a0dfeb" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30585610" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class HttpSimpleClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit HttpSimpleClientProtocol extends System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class HttpSimpleClientProtocol&#xA;Inherits HttpWebClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpSimpleClientProtocol abstract : System::Web::Services::Protocols::HttpWebClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpWebClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje klasę podstawową dla komunikacji z usługą sieci Web XML przy użyciu prostego powiązań protokołów HTTP GET i POST protokołu HTTP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa określa większość implementacji komunikacji z usługi XML sieci Web za pośrednictwem protokołu HTTP za pomocą koderów kodowanie parametrów i wartości zwracane w typowych formatach MIME. Następujące kodery pochodzi od <xref:System.Web.Services.Protocols.MimeFormatter> klasy. Domyślnie klasy serwera proxy, wynikające z <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol> koduje parametry, używając application/x--www-form-urlencoded typu MIME i odpowiedzi w zwykłym kodzie XML. Elementy formatujące mime niestandardowych można określić za pomocą <xref:System.Web.Services.Protocols.HttpMethodAttribute> atrybutu, jednak nie jest obsługiwane dla integracji to Generowanie opis i serwera proxy usługi.  
  
 `Notes to Inheritors:` Aby zastąpić tę klasę, mogą stać się metody w klasie pochodnej, które są specyficzne dla określonego typu usługi XML sieci Web. Po prostu metody przechwytywania parametry i Wywołaj klasę bazową w pracy z komunikacji z tą lokacją. Jeśli wprowadzone metody asynchroniczne, wywołaj <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> i <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> metody. Jeśli wprowadzone metod synchronicznych, wywołaj <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> metody. Konstruktor przesłoniętych zwykle ustawia <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> właściwości do identyfikatora URI metody usług XML sieci Web.  
  
 Narzędzie Web Services Description Language (Wsdl.exe) generuje klas pochodnych <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol> dla danego opisu usługi.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest generowany przez Wsdl.exe dla klasy serwera proxy `Math` poniżej usługi XML sieci Web. Pochodną klasy serwera proxy <xref:System.Web.Services.Protocols.HttpGetClientProtocol>, która pochodzi z klasy abstrakcyjnej <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol> klasy.  
  
 [!code-cpp[Classic HttpGetClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpGetClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpGetClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpGetClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic HttpGetClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpGetClientProtocol Example/VB/source.vb#1)]  
  
 Poniższy przykładowy kod jest `Math` usługi XML sieci Web, z którego został utworzony poprzedniego klasy serwera proxy.  
  
 [!code-cpp[Classic HttpSimpleClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpSimpleClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic HttpSimpleClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ten typ jest bezpieczny wątkowo.</threadsafe>
    <altmember cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpSimpleClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; HttpSimpleClientProtocol();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginInvoke (string methodName, string requestUrl, object[] parameters, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginInvoke(string methodName, string requestUrl, object[] parameters, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function BeginInvoke (methodName As String, requestUrl As String, parameters As Object(), callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IAsyncResult ^ BeginInvoke(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Nazwa metody usługi XML sieci Web.</param>
        <param name="requestUrl">Adres URL używany do tworzenia <see cref="T:System.Net.WebRequest" />.</param>
        <param name="parameters">Tablica obiektów zawierających parametry do przekazania do metody usługi XML sieci Web. Odpowiada wartości w tablicy kolejności parametrów wywołania metody klasy pochodnej.</param>
        <param name="callback">Delegat do wywołania po ukończeniu asynchronicznego wywołania metody. Jeśli <c>wywołania zwrotnego</c> jest <see langword="null" />, delegat nie jest wywoływany.</param>
        <param name="asyncState">Dodatkowe informacje dostarczane przez klienta.</param>
        <summary>Uruchamia wywołanie asynchroniczne metody usług XML sieci Web.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Mogą zostać przekazane do <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)" /> metody można uzyskać wartości zwracanych przez metodę usługi XML sieci Web.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `methodName` Parametr jest używany do Znajdź typy parametrów i wartości metody, która wywołuje zwracane <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> metody. Służy również do znalezienia atrybutów niestandardowych, które mogły zostać dodane do metody. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>, <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>, i <xref:System.Xml.Serialization.XmlElementAttribute> zawierają dodatkowe informacje o Metoda pochodna, która jest wymagana dla protokołu HTTP.  
  
 `asyncState` jest ono przekazywane do `callback` i znajduje się w <xref:System.IAsyncResult> zwracanego z <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> metody. Jest przydatne w przypadku przekazywania informacji z kontekstu wywołania asynchronicznego do obsługi asynchronicznego wyniku w `callback`.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest formularza sieci Web ASP.NET, która wymaga usługi XML sieci Web o nazwie `Math`. W ramach `EnterBtn_Click` funkcji, uruchamiania formularza sieci Web i wykonuje asynchroniczne wywołanie `Add` metody usługi XML sieci Web.  
  
 [!code-aspx-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/sourcevb.aspx#1)]  
  
 Poniższy przykład kodu dotyczy klasy serwera proxy generowany przez narzędzie Web Services Description Language (Wsdl.exe) `Math` poniżej usługi XML sieci Web. W ramach `BeginAdd` metody klasy pośredniczącej, <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> metoda uruchamia wywołanie asynchroniczne `Add` metody usługi XML sieci Web.  
  
 [!code-cpp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CPP/source.cpp#2)]
 [!code-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/source.cs#2)]
 [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/source.vb#2)]  
  
 Poniższy przykładowy kod jest `Math` usługi XML sieci Web, z którego został utworzony poprzedniego klasy serwera proxy.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Żądanie osiągnięto komputera serwera, ale nie zostało przetworzone pomyślnie.</exception>
        <altmember cref="T:System.IAsyncResult" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="protected object EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EndInvoke (asyncResult As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> Zwrócony z <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" /> metody.</param>
        <summary>Kończy wywołanie asynchroniczne metody usług XML sieci Web przy użyciu protokołu HTTP.</summary>
        <returns>Tablica obiektów zawierająca wartości zwracanej i wszystkie przez odwołanie lub <paramref name="out" /> metody usługi XML sieci Web parametrów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod jest formularza sieci Web ASP.NET, która wymaga usługi XML sieci Web o nazwie `Math`. W ramach `EnterBtn_Click` funkcji, uruchamiania formularza sieci Web i wykonuje asynchroniczne wywołanie `Add` metody usługi XML sieci Web.  
  
 [!code-aspx-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/sourcevb.aspx#1)]  
  
 Poniższy przykład kodu dotyczy klasy serwera proxy generowany przez narzędzie Web Services Description Language (Wsdl.exe) `Math` poniżej usługi XML sieci Web. W ramach `EndAdd` metody klasy pośredniczącej, <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> metoda uruchamia wywołanie asynchroniczne `Add` metody usługi XML sieci Web.  
  
 [!code-cpp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CPP/source.cpp#2)]
 [!code-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/source.cs#2)]
 [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/source.vb#2)]  
  
 Poniższy przykładowy kod jest `Math` usługi XML sieci Web, z której utworzono powyższe klasy serwera proxy.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> nie jest wartością zwracaną przez <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" /> metody.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="protected object Invoke (string methodName, string requestUrl, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object Invoke(string methodName, string requestUrl, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (methodName As String, requestUrl As String, parameters As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ Invoke(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="methodName">Nazwa metody usługi XML sieci Web w klasie pochodnej, która wywołuje <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])" /> metody.</param>
        <param name="requestUrl">Adres URL metody usługi XML sieci Web, który klient żąda.</param>
        <param name="parameters">Tablica obiektów zawierających parametry do przekazania do zdalnej usługi XML sieci Web. Odpowiada wartości w tablicy kolejności parametrów wywołania metody klasy pochodnej.</param>
        <summary>Wywołuje metodę usługi XML sieci Web przy użyciu protokołu HTTP.</summary>
        <returns>Tablica obiektów zawierająca wartości zwracanej i wszelkie przez odwołanie lub <paramref name="out" /> parametry metody klasy pochodnej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `methodName` Parametr jest używany do Znajdź typy parametrów i wartości metody, która wywołuje zwracane <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> metody. Służy również do znalezienia atrybutów niestandardowych, które mogły zostać dodane do metody. <xref:System.Web.Services.Protocols.HttpMethodAttribute> i <xref:System.Xml.Serialization.XmlElementAttribute> zawierają dodatkowe informacje o Metoda pochodna, która jest wymagana dla protokołu SOAP.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest formularza sieci Web ASP.NET, która wymaga usługi XML sieci Web o nazwie `Math`. W ramach `EnterBtn_Click` funkcji formularza sieci Web wywołuje synchronicznie `Add` metody usługi XML sieci Web.  
  
 [!code-csharp[HttpSimpleClientProtocol.Invoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/CS/sourcecs.aspx#2)]
 [!code-vb[HttpSimpleClientProtocol.Invoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/VB/sourcevb.aspx#2)]  
  
 Poniższy przykład kodu dotyczy klasy serwera proxy generowany przez narzędzie Web Services Description Language (Wsdl.exe) `Math` poniżej usługi XML sieci Web. W ramach `Add` metody klasy pośredniczącej, <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> synchronicznie wywołuje metodę `Add` metody usługi sieci Web.  
  
 [!code-cpp[HttpSimpleClientProtocol.Invoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/CPP/source.cpp#1)]
 [!code-csharp[HttpSimpleClientProtocol.Invoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/CS/source.cs#1)]
 [!code-vb[HttpSimpleClientProtocol.Invoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/VB/source.vb#1)]  
  
 Poniższy przykładowy kod jest `Math` usługi XML sieci Web, z której utworzono powyższe klasy serwera proxy.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Żądanie osiągnięto komputera serwera, ale nie zostało przetworzone pomyślnie.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Asynchronicznie wywołuje określoną metodę.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, string requestUrl, object[] parameters, System.Threading.SendOrPostCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, string requestUrl, object[] parameters, class System.Threading.SendOrPostCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, requestUrl As String, parameters As Object(), callback As SendOrPostCallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
      </Parameters>
      <Docs>
        <param name="methodName">Nazwa metody do wywołania.</param>
        <param name="requestUrl">Adres URL żądania usługi sieci web wywołana.</param>
        <param name="parameters">Parametry do przekazania do metody.</param>
        <param name="callback">Delegat wywoływany w przypadku wywołania metody została ukończona.</param>
        <summary>Asynchronicznie wywołuje określoną metodę.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, string requestUrl, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, string requestUrl, object[] parameters, class System.Threading.SendOrPostCallback callback, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, requestUrl As String, parameters As Object(), callback As SendOrPostCallback, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback, System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Nazwa metody do wywołania.</param>
        <param name="requestUrl">Adres URL żądania usługi sieci web wywołana.</param>
        <param name="parameters">Parametry do przekazania do metody.</param>
        <param name="callback">Delegat wywoływany w przypadku wywołania metody została ukończona.</param>
        <param name="userState">Obiekt zawierający skojarzonych informacji o stanie, który jest przekazywany do <c>wywołania zwrotnego</c> delegować po ukończeniu metody.</param>
        <summary>Asynchronicznie wywołuje określoną metodę, przy zachowaniu skojarzony stan.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>