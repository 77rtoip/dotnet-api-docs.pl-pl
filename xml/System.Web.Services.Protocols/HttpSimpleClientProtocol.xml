<Type Name="HttpSimpleClientProtocol" FullName="System.Web.Services.Protocols.HttpSimpleClientProtocol">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ba2a15e866d0ac323f6ffa1f3130a66bc0bfe453" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52196923" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class HttpSimpleClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit HttpSimpleClientProtocol extends System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class HttpSimpleClientProtocol&#xA;Inherits HttpWebClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpSimpleClientProtocol abstract : System::Web::Services::Protocols::HttpWebClientProtocol" />
  <TypeSignature Language="F#" Value="type HttpSimpleClientProtocol = class&#xA;    inherit HttpWebClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpWebClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje klasę bazową do komunikowania się z usługą sieci Web XML przy użyciu prostych powiązań protokołów HTTP GET i POST protokołu HTTP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa określa większość implementacji dotyczących komunikacji z usługi XML sieci Web za pośrednictwem protokołu HTTP przy użyciu koderów do zakodowania parametry i zwracane wartości w typowych formatach MIME. Następujące kodery pochodzić od <xref:System.Web.Services.Protocols.MimeFormatter> klasy. Domyślnie klasy serwera proxy z <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol> koduje parametrów za pomocą application/x--www-form-urlencoded typu MIME i odpowiedzi w zwykłego kodu XML. Mime niestandardowe elementy formatujące można określać z użyciem <xref:System.Web.Services.Protocols.HttpMethodAttribute> atrybutu, jednak nie jest obsługiwane dla integracji to Generowanie opis i serwer proxy usługi.  
  
 `Notes to Inheritors:` Jeśli zastąpisz tę klasę, możesz wprowadzić metody w klasie pochodnej, które są specyficzne dla danego typu usługi XML sieci Web. Po prostu metody przechwytywania parametrów i Wywołaj klasę bazową, aby wykonywać pracę podczas komunikowania się z lokacją. Jeśli wprowadzono metody są asynchroniczne, wywołaj <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> i <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> metody. Jeśli wprowadzono metody są synchroniczne, wywołaj <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> metody. Zwykle ustawia konstruktora zgodnym z przesłoniętą <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> właściwości identyfikatora URI metody usługi sieci Web XML.  
  
 Narzędzie Web Services Description Language (Wsdl.exe) generuje klasy pochodne <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol> dla danego opisu usługi.  
  
   
  
## Examples  
 Poniższy przykład kodu jest klasą proxy generowany przez Wsdl.exe dla `Math` poniższych usług XML sieci Web. Pochodną klasy proxy <xref:System.Web.Services.Protocols.HttpGetClientProtocol>, która jest pochodną abstrakcyjnej <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol> klasy.  
  
 [!code-cpp[Classic HttpGetClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpGetClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpGetClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpGetClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic HttpGetClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpGetClientProtocol Example/VB/source.vb#1)]  
  
 Poniższy przykład kodu jest `Math` usługi XML sieci Web, z której została utworzona poprzedniego klasy proxy.  
  
 [!code-cpp[Classic HttpSimpleClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpSimpleClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic HttpSimpleClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ten typ jest bezpieczny wątkowo.</threadsafe>
    <altmember cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpSimpleClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; HttpSimpleClientProtocol();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginInvoke (string methodName, string requestUrl, object[] parameters, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginInvoke(string methodName, string requestUrl, object[] parameters, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function BeginInvoke (methodName As String, requestUrl As String, parameters As Object(), callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IAsyncResult ^ BeginInvoke(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : string * string * obj[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="httpSimpleClientProtocol.BeginInvoke (methodName, requestUrl, parameters, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Nazwa metody usługi sieci Web XML.</param>
        <param name="requestUrl">Adres URL do użycia podczas tworzenia <see cref="T:System.Net.WebRequest" />.</param>
        <param name="parameters">Tablica obiektów zawierających parametry do przekazania do metody usługi sieci Web XML. Kolejność wartości w tablicy odpowiada kolejności parametrów wywołania metody w klasie pochodnej.</param>
        <param name="callback">Delegat do wywołania po ukończeniu asynchronicznego wywołania metody. Jeśli <paramref name="callback" /> jest <see langword="null" />, delegat nie jest wywoływana.</param>
        <param name="asyncState">Dodatkowe informacje podane przez klienta.</param>
        <summary>Uruchamia asynchroniczne wywołanie metody usługi sieci Web XML.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Mogą być przekazywane do <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)" /> metodę, aby uzyskać wartość zwracaną z metody usługi sieci Web XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `methodName` Parametr jest używany do znalezienia typy parametrów i wartości zwracanych z metody, która wywołuje <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> metody. Służy również znaleźć atrybutów niestandardowych, które mogły zostać dodane do metody. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>, <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>, i <xref:System.Xml.Serialization.XmlElementAttribute> zawiera dodatkowe informacje na temat metody pochodnej, która jest wymagana dla protokołu HTTP.  
  
 `asyncState` jest przekazywana do `callback` i wchodzi w skład <xref:System.IAsyncResult> zwrócone z <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> metody. Jest to przydatne do przekazywania informacji z kontekstu wywołania asynchronicznego do obsługi asynchronicznego wyniku `callback`.  
  
   
  
## Examples  
 Poniższy przykład kodu jest formularz sieci Web ASP.NET, która wywołuje usługę sieci Web XML o nazwie `Math`. W ramach `EnterBtn_Click` funkcji, formularz sieci Web zostanie uruchomione i zakończy asynchroniczne wywołanie `Add` metody usługi sieci Web XML.  
  
 [!code-aspx-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/sourcevb.aspx#1)]  
  
 Poniższy przykład kodu jest klasą proxy generowany przez narzędzie Web Services Description Language (Wsdl.exe) dla `Math` poniższych usług XML sieci Web. W ramach `BeginAdd` metody klasy proxy <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> metoda uruchamia asynchroniczne wywołanie `Add` metody usługi sieci Web XML.  
  
 [!code-cpp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CPP/source.cpp#2)]
 [!code-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/source.cs#2)]
 [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/source.vb#2)]  
  
 Poniższy przykład kodu jest `Math` usługi XML sieci Web, z której została utworzona poprzedniego klasy proxy.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Żądanie osiągnięto na komputerze serwera, ale nie została przetworzona pomyślnie.</exception>
        <altmember cref="T:System.IAsyncResult" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="protected object EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EndInvoke (asyncResult As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; obj" Usage="httpSimpleClientProtocol.EndInvoke asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> Zwróciło <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" /> metody.</param>
        <summary>Wykonuje asynchroniczne wywołanie metody usługi sieci Web XML przy użyciu protokołu HTTP.</summary>
        <returns>Tablica obiektów zawierająca wartości zwracanej oraz wszelkie przez odwołanie lub <paramref name="out" /> metody usługi parametrów dla sieci Web XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest formularz sieci Web ASP.NET, która wywołuje usługę sieci Web XML o nazwie `Math`. W ramach `EnterBtn_Click` funkcji, formularz sieci Web zostanie uruchomione i zakończy asynchroniczne wywołanie `Add` metody usługi sieci Web XML.  
  
 [!code-aspx-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/sourcevb.aspx#1)]  
  
 Poniższy przykład kodu jest klasą proxy generowany przez narzędzie Web Services Description Language (Wsdl.exe) dla `Math` poniższych usług XML sieci Web. W ramach `EndAdd` metody klasy proxy <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> metoda uruchamia asynchroniczne wywołanie `Add` metody usługi sieci Web XML.  
  
 [!code-cpp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CPP/source.cpp#2)]
 [!code-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/source.cs#2)]
 [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/source.vb#2)]  
  
 Poniższy przykład kodu jest `Math` usługi XML sieci Web, z której utworzono powyższe klasy proxy.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> nie jest wartość zwrotną z elementu <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" /> metody.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="protected object Invoke (string methodName, string requestUrl, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object Invoke(string methodName, string requestUrl, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (methodName As String, requestUrl As String, parameters As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ Invoke(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Invoke : string * string * obj[] -&gt; obj" Usage="httpSimpleClientProtocol.Invoke (methodName, requestUrl, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="methodName">Nazwa metody usługi sieci Web XML w klasie pochodnej, która wywołuje <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])" /> metody.</param>
        <param name="requestUrl">Adres URL metody usługi sieci Web XML, który klient żąda.</param>
        <param name="parameters">Tablica obiektów zawierających parametry do przekazania do zdalnej usługi XML sieci Web. Kolejność wartości w tablicy odpowiada kolejności parametrów wywołania metody w klasie pochodnej.</param>
        <summary>Wywołuje metody usługi sieci Web XML przy użyciu protokołu HTTP.</summary>
        <returns>Tablica obiektów zawierająca wartości zwracanej i wszelkie przez odwołanie lub <paramref name="out" /> parametry metody w klasie pochodnej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `methodName` Parametr jest używany do znalezienia typy parametrów i wartości zwracanych z metody, która wywołuje <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> metody. Służy również znaleźć atrybutów niestandardowych, które mogły zostać dodane do metody. <xref:System.Web.Services.Protocols.HttpMethodAttribute> i <xref:System.Xml.Serialization.XmlElementAttribute> zawiera dodatkowe informacje na temat metody pochodnej, która jest wymagana dla protokołu SOAP.  
  
   
  
## Examples  
 Poniższy przykład kodu jest formularz sieci Web ASP.NET, która wywołuje usługę sieci Web XML o nazwie `Math`. W ramach `EnterBtn_Click` synchronicznie wywołuje funkcję, formularz sieci Web `Add` metody usługi sieci Web XML.  
  
 [!code-csharp[HttpSimpleClientProtocol.Invoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/CS/sourcecs.aspx#2)]
 [!code-vb[HttpSimpleClientProtocol.Invoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/VB/sourcevb.aspx#2)]  
  
 Poniższy przykład kodu jest klasą proxy generowany przez narzędzie Web Services Description Language (Wsdl.exe) dla `Math` poniższych usług XML sieci Web. W ramach `Add` metody klasy proxy <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> synchronicznie wywołuje metodę `Add` metody usługi sieci Web.  
  
 [!code-cpp[HttpSimpleClientProtocol.Invoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/CPP/source.cpp#1)]
 [!code-csharp[HttpSimpleClientProtocol.Invoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/CS/source.cs#1)]
 [!code-vb[HttpSimpleClientProtocol.Invoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/VB/source.vb#1)]  
  
 Poniższy przykład kodu jest `Math` usługi XML sieci Web, z której utworzono powyższe klasy proxy.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Żądanie osiągnięto na komputerze serwera, ale nie została przetworzona pomyślnie.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Asynchronicznie wywołuje określoną metodę.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, string requestUrl, object[] parameters, System.Threading.SendOrPostCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, string requestUrl, object[] parameters, class System.Threading.SendOrPostCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, requestUrl As String, parameters As Object(), callback As SendOrPostCallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * string * obj[] * System.Threading.SendOrPostCallback -&gt; unit" Usage="httpSimpleClientProtocol.InvokeAsync (methodName, requestUrl, parameters, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
      </Parameters>
      <Docs>
        <param name="methodName">Nazwa metody do wywołania.</param>
        <param name="requestUrl">Adres URL żądania usługi sieci web wywołana.</param>
        <param name="parameters">Parametry do przekazania do metody.</param>
        <param name="callback">Delegat wywoływany w przypadku wywołania metody została ukończona.</param>
        <summary>Asynchronicznie wywołuje określoną metodę.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, string requestUrl, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, string requestUrl, object[] parameters, class System.Threading.SendOrPostCallback callback, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, requestUrl As String, parameters As Object(), callback As SendOrPostCallback, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * string * obj[] * System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="httpSimpleClientProtocol.InvokeAsync (methodName, requestUrl, parameters, callback, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Nazwa metody do wywołania.</param>
        <param name="requestUrl">Adres URL żądania usługi sieci web wywołana.</param>
        <param name="parameters">Parametry do przekazania do metody.</param>
        <param name="callback">Delegat wywoływany w przypadku wywołania metody została ukończona.</param>
        <param name="userState">Obiekt zawierający skojarzone informacje o stanie, który jest przekazywany do <paramref name="callback" /> po zakończeniu metody.</param>
        <summary>Asynchronicznie wywołuje określoną metodę, przy zachowaniu stanu stowarzyszonego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>