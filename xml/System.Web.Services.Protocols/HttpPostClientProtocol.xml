<Type Name="HttpPostClientProtocol" FullName="System.Web.Services.Protocols.HttpPostClientProtocol">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f84965d80d3b3ed2bf1cf37f760b357fadbd1816" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36594781" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HttpPostClientProtocol : System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpPostClientProtocol extends System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.HttpPostClientProtocol" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpPostClientProtocol&#xA;Inherits HttpSimpleClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpPostClientProtocol : System::Web::Services::Protocols::HttpSimpleClientProtocol" />
  <TypeSignature Language="F#" Value="type HttpPostClientProtocol = class&#xA;    inherit HttpSimpleClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpSimpleClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Klasa podstawowa dla proxy klienta usługi XML sieci Web, które korzystają z protokołu HTTP POST.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy klient usługi XML sieci Web używa protokołu HTTP POST, przez parametry domyślne są zakodowane w treści HTTP przy użyciu reguł kodowania adresów URL i używa zwykłym kodzie XML dla odpowiedzi. Ten protokół używa klas pochodzących od <xref:System.Web.Services.Protocols.MimeFormatter> do kodowania parametrów i zwraca wartości w MIME standardowych formatów. Kodery do użycia podano w opisie usługi.  
  
 Jeśli tworzysz klient usługi XML sieci Web za pomocą programu ASP.NET, następnie klasy serwera proxy, wyprowadzanie pośrednio lub bezpośrednio z <xref:System.Web.Services.Protocols.WebClientProtocol> musi zostać utworzony dla usługi XML sieci Web, który chcesz wybrać. Gdy klient usługi XML sieci Web wywołuje przy użyciu protokołu HTTP, pochodzi z klasy serwera proxy <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol>, który z kolei jest pochodną <xref:System.Web.Services.Protocols.WebClientProtocol>.  
  
 <xref:System.Web.Services.Protocols.HttpGetClientProtocol> i <xref:System.Web.Services.Protocols.HttpPostClientProtocol> pochodzi od <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol>, zapewniając obsługę wywoływania metody usługi XML sieci Web przy użyciu protokołu HTTP GET i POST protokołu HTTP, odpowiednio. Klienci wywoływania usługi XML sieci Web przy użyciu protokołu SOAP powinien pochodzić od <xref:System.Web.Services.Protocols.SoapHttpClientProtocol>.  
  
 Aby uzyskać więcej informacji na temat budowania klasy serwera proxy, zobacz [ &#91; \<topic://cpconcreatingwebserviceproxy >&#93;](http://msdn.microsoft.com/library/142d91f5-3249-4cfc-a431-1f3acb76d756).  
  
   
  
## Examples  
 Poniższy przykład pochodzi z klasy proxy generowany przez narzędzie Wsdl.exe dla `Math` poniżej usługi XML sieci Web. Pochodną klasy serwera proxy <xref:System.Web.Services.Protocols.HttpPostClientProtocol>, która pochodzi z klasy abstrakcyjnej <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol> klasy.  
  
 [!code-cpp[Classic HttpPostClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpPostClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpPostClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpPostClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic HttpPostClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpPostClientProtocol Example/VB/source.vb#1)]  
  
 Poniżej przedstawiono przykład `Math` usługi XML sieci Web, z którego został utworzony poprzedniej klasy serwera proxy.  
  
  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Services.Protocols.HttpGetClientProtocol" />
    <altmember cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />
    <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
    <altmember cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpPostClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpPostClientProtocol.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpPostClientProtocol();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Services.Protocols.HttpPostClientProtocol" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[HttpPostClientProtocol_Constructor#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpPostClientProtocol_Constructor/CPP/httppostclientprotocol_constructor.cpp#1)]
 [!code-csharp[HttpPostClientProtocol_Constructor#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpPostClientProtocol_Constructor/CS/httppostclientprotocol_constructor.cs#1)]
 [!code-vb[HttpPostClientProtocol_Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpPostClientProtocol_Constructor/VB/httppostclientprotocol_constructor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected override System.Net.WebRequest GetWebRequest (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpPostClientProtocol.GetWebRequest(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Net::WebRequest ^ GetWebRequest(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="override this.GetWebRequest : Uri -&gt; System.Net.WebRequest" Usage="httpPostClientProtocol.GetWebRequest uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">
          <see cref="T:System.Uri" /> Używane podczas tworzenia <see cref="T:System.Net.WebRequest" />.</param>
        <summary>Tworzy <see cref="T:System.Net.WebRequest" /> wystąpienia dla określonego identyfikatora URI.</summary>
        <returns>
          <see cref="T:System.Net.WebRequest" /> Wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zastępuje podstawowej wersji <xref:System.Web.Services.Protocols.WebClientProtocol.GetWebRequest%2A> do określenia, że żądanie HTTP skierowane do usług XML sieci Web jest nawiązywane przy użyciu protokołu HTTP POST. Przez zastąpienie tej metody, można dostosować <xref:System.Net.WebRequest> obiekt przed dokonaniem żądanie usługi XML sieci Web. Na przykład można dodać niestandardowego nagłówka do żądania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="uri" /> Parametr ma wartość null lub ma długość równą zero.</exception>
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(System.Uri)" />
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
  </Members>
</Type>