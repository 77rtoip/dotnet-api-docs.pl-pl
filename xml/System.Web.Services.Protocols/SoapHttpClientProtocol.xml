<Type Name="SoapHttpClientProtocol" FullName="System.Web.Services.Protocols.SoapHttpClientProtocol">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f5c7af2e578056d4d8cafbca9a6d45158a3df968" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36594485" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SoapHttpClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SoapHttpClientProtocol extends System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <TypeSignature Language="VB.NET" Value="Public Class SoapHttpClientProtocol&#xA;Inherits HttpWebClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapHttpClientProtocol : System::Web::Services::Protocols::HttpWebClientProtocol" />
  <TypeSignature Language="F#" Value="type SoapHttpClientProtocol = class&#xA;    inherit HttpWebClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpWebClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Określa klienta klasy, które serwery proxy pochodzi od przy użyciu protokołu SOAP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli tworzysz klient usługi XML sieci Web, następnie klasy serwera proxy która jest pochodną pośrednio lub bezpośrednio <xref:System.Web.Services.Protocols.WebClientProtocol> musi zostać utworzony dla usługi XML sieci Web. Gdy klient usługi XML sieci Web wywołuje przy użyciu protokołu SOAP, musi być pochodną klasy serwera proxy <xref:System.Web.Services.Protocols.SoapHttpClientProtocol>, która jest pochodną <xref:System.Web.Services.Protocols.HttpWebClientProtocol>. <xref:System.Web.Services.Protocols.HttpWebClientProtocol>, z kolei jest pochodną <xref:System.Web.Services.Protocols.WebClientProtocol>.  
  
 Aby komunikować się z usługi XML sieci Web, Utwórz klasy serwera proxy, która jest pochodną pośrednio lub bezpośrednio <xref:System.Web.Services.Protocols.WebClientProtocol> dla usługi XML sieci Web, który chcesz wybrać. Zamiast ręcznego tworzenia klasy serwera proxy, należy użyć narzędzia Web Services Description Language (Wsdl.exe) do utworzenia klasy serwera proxy dla danej usługi XML sieci Web opisu usługi. Podczas generowania klasy serwera proxy protokołu SOAP synchroniczne wywołania metod usługi XML sieci Web zostały wprowadzone za pośrednictwem <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> metody, dlatego wywołania asynchroniczne są wykonywane przy użyciu <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> — metoda i <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> metody.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest generowany przez Wsdl.exe dla klasy serwera proxy `Math` usługi XML sieci Web. Pochodną klasy serwera proxy <xref:System.Web.Services.Protocols.SoapHttpClientProtocol>, która pochodzi z klasy abstrakcyjnej <xref:System.Web.Services.Protocols.WebClientProtocol> klasy.  
  
 [!code-cpp[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/VB/source.vb#1)]  
  
 Poniższy przykładowy kod jest `Math` usługi XML sieci Web, w którym został wygenerowany poprzedniego klasy serwera proxy.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
  
  
 ]]></format>
    </remarks>
    <threadsafe>Ten typ jest bezpieczny wątkowo.</threadsafe>
    <block subset="none" type="overrides">
      <para>Aby zastąpić tę klasę, mogą stać się metody w klasie pochodnej, które są specyficzne dla określonego typu usługi XML sieci Web. Metody przechwytywania parametry i Wywołaj klasę bazową pracy komunikowania się z usługi XML sieci Web. Jeśli wprowadzone metody asynchroniczne, wywołaj <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> — metoda i <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /> metody. Jeśli wprowadzone metod synchronicznych, wywołaj <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" /> metody. Konstruktor przesłoniętych zwykle ustawia <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" /> właściwości do adresu URL metod usługi XML sieci Web.</para>
    </block>
    <altmember cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapHttpClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapHttpClientProtocol();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginInvoke (string methodName, object[] parameters, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginInvoke(string methodName, object[] parameters, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function BeginInvoke (methodName As String, parameters As Object(), callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IAsyncResult ^ BeginInvoke(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : string * obj[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="soapHttpClientProtocol.BeginInvoke (methodName, parameters, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Nazwa metody usługi XML sieci Web w klasie pochodnej, która wywołuje <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> metody.</param>
        <param name="parameters">Tablica obiektów zawierających parametry do przekazania do usług XML sieci Web. Odpowiada wartości w tablicy kolejności parametrów wywołania metody klasy pochodnej.</param>
        <param name="callback">Delegat do wywołania po ukończeniu asynchronicznego wywołania. Jeśli <c>wywołania zwrotnego</c> jest <see langword="null" />, delegat nie jest wywoływany.</param>
        <param name="asyncState">Dodatkowe informacje dostarczane przez obiekt wywołujący.</param>
        <summary>Uruchamia wywołanie asynchroniczne metody usług XML sieci Web przy użyciu protokołu SOAP.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Przekazywany do <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /> metody można uzyskać wartości zwracanych z wywołań metody zdalnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle, możesz nie wywołać <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> metody bezpośrednio, chyba że zostały tworzenie własnych klasy serwera proxy dla usługi XML sieci Web.  
  
 Klasy serwera proxy generowany przez narzędzie Web Services Description Language (Wsdl.exe) z opisu usługi przedstawia metod usługi XML sieci Web w postaci nazwy pochodzi od klasy serwera proxy do wywołania metody usług XML sieci Web synchronicznie. Do asynchronicznego wywołania metody usług XML sieci Web, dwie dodatkowe metody są dodawane do klasy serwera proxy dla poszczególnych metod usługi XML sieci Web, z `Begin` Prefiks dodawany do nazwy metody usługi XML sieci Web, a druga `End` dodany prefiks.  
  
 Wywołania klasy serwera proxy <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> metodę, aby uruchomić wywołanie asynchroniczne wywołanie metody usługi XML sieci Web. Na przykład, jeśli usługi XML sieci Web udostępnia metody usług XML sieci Web o nazwie `Add`, klasy serwera proxy zawiera metodę o nazwie `BeginAdd`, do uruchamiania na XML sieci Web wywołania metody usługi. W ramach kod `BeginAdd`, połączenie jest nawiązywane w przypadku <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> — metoda i wyniki są umieszczane w oczekiwanym typem zwracanym dla `Add`.  
  
 `methodName` Jest używana do znajdowania atrybutów niestandardowych, które mogły zostać dodane do metody, takie jak <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> zawiera dodatkowe informacje na temat Metoda pochodna, która jest wymagana dla protokołu SOAP.  
  
 `asyncState` jest ono przekazywane do `callback` i znajduje się w <xref:System.IAsyncResult> zwracanego z <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> metody. `asyncState` Parametru może służyć do przekazywania informacji o kontekście wywołania asynchronicznego, określona w `callback` parametru do delegata, który obsługuje wynik.  
  
   
  
## Examples  
 Poniższy przykład kodu dotyczy klasy serwera proxy generowany przez narzędzie Web Services Description Language (Wsdl.exe) `Math` usługi XML sieci Web. W ramach `BeginAdd` metody klasy pośredniczącej, <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> metody jest uruchamiana na wywołania asynchroniczne `Add` metody usługi XML sieci Web.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/VB/source.vb#1)]  
  
 Poniższy przykładowy kod jest `Math` usługi XML sieci Web, z którego został utworzony poprzedniego klasy serwera proxy.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">Żądanie osiągnięto komputera serwera, ale nie zostało przetworzone pomyślnie.</exception>
        <exception cref="T:System.InvalidOperationException">Żądanie nie jest prawidłowa dla bieżącego stanu obiektu.</exception>
        <exception cref="T:System.Net.WebException">Wystąpił błąd podczas uzyskiwania dostępu do sieci.</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="Discover">
      <MemberSignature Language="C#" Value="public void Discover ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Discover() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover" />
      <MemberSignature Language="VB.NET" Value="Public Sub Discover ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Discover();" />
      <MemberSignature Language="F#" Value="member this.Discover : unit -&gt; unit" Usage="soapHttpClientProtocol.Discover " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dynamicznie wiąże usługi XML sieci Web z opisem w dokumencie odnajdywania w <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klient usługi XML sieci Web dynamicznie można powiązać usługi XML sieci Web innego niż ten, do którego odwołuje się przy użyciu klasy serwera proxy <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> metody. Zazwyczaj <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> właściwość odwołuje się do podstawowego adresu usługi XML sieci Web. Jednak przed wywołaniem <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> metody, ustawienie <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> właściwości do adresu URL dokumentu odnajdywania. <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> Metoda próbuje odnaleźć dopasowania w dokumencie odnajdywania do powiązania zdefiniowany w klasie, proxy i dynamicznie powiązanie do niego. W przypadku powodzenia wywołania metody kolejnych są przekierowywane do usług XML sieci Web opisanych w dokumencie odnajdywania.  
  
 Jeśli klasy serwera proxy jest utworzony przy użyciu narzędzia Web Services Description Language (Wsdl.exe), klasy serwera proxy definiuje powiązanie, implementowane za pomocą metod usługi XML sieci Web wywołuje, przy użyciu <xref:System.Web.Services.WebServiceBindingAttribute>. Gdy usługi XML sieci Web implementuje wiele powiązań, Wsdl.exe tworzy klasy serwera proxy dla każdego powiązania. Zastosowane do każdej klasy serwera proxy jest <xref:System.Web.Services.WebServiceBindingAttribute> definiuje nazwę powiązania i jego przestrzeni nazw. Dokument, musisz ustawić <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> właściwości musi zawierać odwołanie do usługi XML sieci Web, który implementuje tę samą nazwę powiązania i przestrzeni nazw lub jest zgłaszany wyjątek.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest generowany przy użyciu narzędzia Wsdl.exe dla klasy serwera proxy `Math` usługi XML sieci Web. A <xref:System.Web.Services.WebServiceBindingAttribute> jest stosowany do `Math` klasy serwera proxy, ustawienie nazwy powiązania `MathSoap` oraz jego przestrzeń nazw `http://tempuri.org/`.  
  
 [!code-cpp[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CPP/source.cpp#1)]
 [!code-csharp[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/source.cs#1)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/source.vb#1)]  
  
 Poniższy przykładowy kod jest klienta usługi sieci Web przy użyciu poprzedniego klasy serwera proxy. W ramach `EnterBtn_Click` zdarzenia formularza sieci Web, wywołań klienta usługi XML sieci Web <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> metody próby dynamicznie powiązania adres URL podany przez użytkownika.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-csharp[SoapHttpClientProtocol.Discover Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/sourcecs.aspx#2)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/sourcevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Klasy serwera proxy nie ma powiązania zdefiniowane.</exception>
        <altmember cref="T:System.Web.Services.WebServiceBindingAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="protected object[] EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EndInvoke (asyncResult As IAsyncResult) As Object()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; obj[]" Usage="soapHttpClientProtocol.EndInvoke asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> Zwrócony z <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> metody.</param>
        <summary>Kończy wywołanie asynchroniczne metody usług XML sieci Web przy użyciu protokołu SOAP.</summary>
        <returns>Tablica obiektów zawierający wartość zwracaną i wszelkie przez odwołanie lub <see langword="out" /> parametry metody klasy pochodnej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle, możesz nie wywołać <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> metody bezpośrednio, chyba że zostały tworzenie własnych klasy serwera proxy dla usługi XML sieci Web.  
  
 Klasy serwera proxy generowany przez narzędzie Web Services Description Language (Wsdl.exe) dla usługi XML sieci Web udostępnia metody usług XML sieci Web jako nazw wylogowuje klasy serwera proxy dla synchronicznego wywoływania metod usługi XML sieci Web. Wywołania asynchroniczne metody usług XML sieci Web, dwie dodatkowe metody są dodawane do klasy serwera proxy dla poszczególnych metod usługi XML sieci Web, z `Begin` Prefiks dodawany do nazwy metody usługi XML sieci Web i jeden z `End` dodany prefiks.  
  
 Wywołania klasy serwera proxy <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> metodę, aby ukończyć wywołanie asynchroniczne wywołanie metody usługi XML sieci Web. Na przykład, jeśli usługi XML sieci Web udostępnia metody usług XML sieci Web o nazwie `Add`, klasy serwera proxy zawiera metodę o nazwie `EndAdd`, metody ukończenia wywołania asynchronicznego elementu XML sieci Web usługi. W ramach kod `EndAdd` połączenie jest nawiązywane w przypadku <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> metody, a następnie wyniki są umieszczane w oczekiwanym typem zwracanym dla `Add`.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest generowany przez Wsdl.exe dla klasy serwera proxy `Math` usługi XML sieci Web. W ramach `EndAdd` metody klasy pośredniczącej, <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> na wywołania asynchroniczne ukończeniu metody `Add` metody usługi XML sieci Web.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/VB/source.vb#1)]  
  
 Poniższy przykładowy kod jest `Math` usługi XML sieci Web, z którego został utworzony poprzedniego klasy serwera proxy.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> nie jest wartością zwracaną przez <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> metody.</exception>
        <exception cref="T:System.Web.Services.Protocols.SoapException">Żądanie osiągnięto komputera serwera, ale nie zostało przetworzone pomyślnie.</exception>
        <exception cref="T:System.InvalidOperationException">Żądanie nie jest prawidłowa dla bieżącego stanu obiektu.</exception>
        <exception cref="T:System.Net.WebException">Wystąpił błąd podczas uzyskiwania dostępu do sieci.</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="GetReaderForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlReader GetReaderForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlReader GetReaderForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetReaderForMessage (message As SoapClientMessage, bufferSize As Integer) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::XmlReader ^ GetReaderForMessage(System::Web::Services::Protocols::SoapClientMessage ^ message, int bufferSize);" />
      <MemberSignature Language="F#" Value="abstract member GetReaderForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlReader&#xA;override this.GetReaderForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlReader" Usage="soapHttpClientProtocol.GetReaderForMessage (message, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">A <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> zapewnia <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> zainicjować <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="bufferSize">Rozmiar buforu początkowej <see cref="T:System.IO.StreamReader" /> używane przez <see cref="T:System.Xml.XmlReader" />.</param>
        <summary>Zwraca <see cref="T:System.Xml.XmlReader" /> zainicjowany przy użyciu <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> właściwość <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> parametru.</summary>
        <returns>A <see cref="T:System.Xml.XmlReader" /> zainicjowany przy użyciu <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> właściwość <paramref name="message" /> parametru.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected override System.Net.WebRequest GetWebRequest (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Net::WebRequest ^ GetWebRequest(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="override this.GetWebRequest : Uri -&gt; System.Net.WebRequest" Usage="soapHttpClientProtocol.GetWebRequest uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">
          <see cref="T:System.Uri" /> Używane podczas tworzenia <see cref="T:System.Net.WebRequest" />.</param>
        <summary>Tworzy <see cref="T:System.Net.WebRequest" /> dla określonego <paramref name="uri" />.</summary>
        <returns>
          <see cref="T:System.Net.WebRequest" /> Dla określonego identyfikatora URI.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może zostać zastąpiona w celu dostosowania <xref:System.Net.WebRequest> przed XML sieci Web usługi żądań. Na przykład można dodać niestandardowego nagłówka do żądania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="uri" /> Parametr jest <see langword="null" />.</exception>
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)" />
        <altmember cref="T:System.Net.HttpWebRequest" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="GetWriterForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlWriter GetWriterForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlWriter GetWriterForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWriterForMessage (message As SoapClientMessage, bufferSize As Integer) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::XmlWriter ^ GetWriterForMessage(System::Web::Services::Protocols::SoapClientMessage ^ message, int bufferSize);" />
      <MemberSignature Language="F#" Value="abstract member GetWriterForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlWriter&#xA;override this.GetWriterForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlWriter" Usage="soapHttpClientProtocol.GetWriterForMessage (message, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">A <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> zapewnia <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> zainicjować <see cref="T:System.Xml.XmlWriter" />.</param>
        <param name="bufferSize">Rozmiar buforu początkowej <see cref="T:System.IO.StreamWriter" /> używane przez <see cref="T:System.Xml.XmlWriter" />.</param>
        <summary>Zwraca <see cref="T:System.Xml.XmlWriter" /> zainicjowany przy użyciu <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> właściwość <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> parametru.</summary>
        <returns>A <see cref="T:System.Xml.XmlWriter" /> zainicjowany przy użyciu <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> właściwość <paramref name="message" /> parametru.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="protected object[] Invoke (string methodName, object[] parameters);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string methodName, object[] parameters) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (methodName As String, parameters As Object()) As Object()" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ Invoke(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="protected object[] Invoke (string method_name, object[] parameters);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string method_name, object[] parameters) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" FrameworkAlternate="xamarinandroid-7.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (method_name As String, parameters As Object()) As Object()" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ Invoke(System::String ^ method_name, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Invoke : string * obj[] -&gt; obj[]" Usage="soapHttpClientProtocol.Invoke (method_name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="method_name" Type="System.String" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Object[]" Index="1" />
      </Parameters>
      <Docs>
        <param name="methodName">To be added.</param>
        <param name="method_name">To be added.</param>
        <param name="parameters">Tablica obiektów zawierająca parametry do przekazania do usług XML sieci Web. Odpowiada wartości w tablicy kolejności parametrów wywołania metody klasy pochodnej.</param>
        <summary>Wywołuje metodę usługi XML sieci Web synchronicznie przy użyciu protokołu SOAP.</summary>
        <returns>Tablica obiektów zawierający wartość zwracaną i wszystkie <see langword="reference" /> lub <see langword="out" /> parametry metody klasy pochodnej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj nie zostanie wywołana <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> metody bezpośrednio, chyba że tworzenia własnych klasy serwera proxy dla usługi XML sieci Web.  
  
 Klasy serwera proxy generowany przez narzędzie Web Services Description Language (Wsdl.exe) dla usługi XML sieci Web udostępnia metody usług XML sieci Web jako nazwy wylogowuje klasy serwera proxy. Wywołania klasy serwera proxy <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> metody do wywołania wywołania metody usług XML sieci Web. Na przykład, jeśli usługi XML sieci Web udostępnia metody usług XML sieci Web o nazwie `Add`, klasy serwera proxy zawiera także metodę o nazwie `Add`. W ramach kod `Add` metoda klasy serwera proxy, synchroniczne wywołanie do metody usług XML sieci Web za pośrednictwem <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> metody, a następnie wyniki są umieszczane w oczekiwanym typem zwracanym dla `Add`.  
  
 `methodName` Parametru jest używana do znajdowania atrybutów niestandardowych, które mogły zostać dodane do metody, takie jak <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> zawiera dodatkowe informacje dotyczące Metoda pochodna, który jest wymagany dla protokołu SOAP.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest generowany przez Wsdl.exe dla klasy serwera proxy `Math` usługi XML sieci Web. W ramach `Add` metody klasy pośredniczącej, <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> wywołuje metodę `Add` metody usługi XML sieci Web.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/VB/source.vb#1)]  
  
 Poniższy przykładowy kod jest `Math` usługi XML sieci Web, z którego został utworzony poprzedniego klasy serwera proxy.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">Żądanie osiągnięto komputera serwera, ale nie zostało przetworzone pomyślnie.</exception>
        <exception cref="T:System.InvalidOperationException">Żądanie nie jest prawidłowa dla bieżącego stanu obiektu.</exception>
        <exception cref="T:System.Net.WebException">Wystąpił błąd podczas uzyskiwania dostępu do sieci.</exception>
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Asynchronicznie wywołuje określoną metodę.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, parameters As Object(), callback As SendOrPostCallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * obj[] * System.Threading.SendOrPostCallback -&gt; unit" Usage="soapHttpClientProtocol.InvokeAsync (methodName, parameters, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
      </Parameters>
      <Docs>
        <param name="methodName">Nazwa metody do wywołania.</param>
        <param name="parameters">Parametry do przekazania do metody.</param>
        <param name="callback">Delegat wywoływany w przypadku wywołania metody została ukończona.</param>
        <summary>Asynchronicznie wywołuje określoną metodę.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, parameters As Object(), callback As SendOrPostCallback, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * obj[] * System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="soapHttpClientProtocol.InvokeAsync (methodName, parameters, callback, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Nazwa metody do wywołania.</param>
        <param name="parameters">Parametry do przekazania do metody.</param>
        <param name="callback">Delegat wywoływany w przypadku wywołania metody została ukończona.</param>
        <param name="userState">Obiekt używany do przekazywania informacji o stanie do <c>wywołania zwrotnego</c> delegowanie.</param>
        <summary>Asynchronicznie wywołuje określoną metodę.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SoapVersion">
      <MemberSignature Language="C#" Value="public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Services.Protocols.SoapProtocolVersion SoapVersion" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property SoapVersion As SoapProtocolVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Services::Protocols::SoapProtocolVersion SoapVersion { System::Web::Services::Protocols::SoapProtocolVersion get(); void set(System::Web::Services::Protocols::SoapProtocolVersion value); };" />
      <MemberSignature Language="F#" Value="member this.SoapVersion : System.Web.Services.Protocols.SoapProtocolVersion with get, set" Usage="System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.SoapProtocolVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wersję protokołu SOAP użyta do zgłoszenia żądania SOAP do usług XML sieci Web.</summary>
        <value>Jeden z <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" /> wartości. Wartość domyślna to <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Soap11" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> Właściwość jest ustawiona w klasie proxy generowany przez narzędzie Web Services Description Language (Wsdl.exe) do <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11> domyślnie, gdy dokument WSDL dla usługi XML sieci Web obsługuje protokół SOAP w wersji 1.1. Jednak po usługi XML sieci Web obsługuje tylko protokołu SOAP 1.2, ustawia Wsdl.exe <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> właściwości <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12>. Aby wybrać wersję protokołu SOAP, podczas generowania klasy serwera proxy z Wsdl.exe, użyj `/protocol` przełącznik z `SOAP` lub `SOAP12` ustawienia, aby ustawić <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> właściwości <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11> i <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12>odpowiednio .  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia wersję protokołu używany do komunikacji z usługi XML sieci Web SOAP 1.2.  
  
 [!code-aspx-csharp[SoapHttpClientProtocol.SoapVersion#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/CS/serverusageclientcs.aspx#1)]
 [!code-aspx-vb[SoapHttpClientProtocol.SoapVersion#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/VB/serverusageclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
        <altmember cref="P:System.Web.HttpContext.Items" />
      </Docs>
    </Member>
  </Members>
</Type>