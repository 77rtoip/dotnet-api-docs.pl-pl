<Type Name="CollectionsUtil" FullName="System.Collections.Specialized.CollectionsUtil">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="805d8900b698672545c57ddd72de497444327b46" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37700584" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CollectionsUtil" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CollectionsUtil extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Specialized.CollectionsUtil" />
  <TypeSignature Language="VB.NET" Value="Public Class CollectionsUtil" />
  <TypeSignature Language="C++ CLI" Value="public ref class CollectionsUtil" />
  <TypeSignature Language="F#" Value="type CollectionsUtil = class" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Tworzy kolekcji, które ignorowanie wielkości liter w ciągach.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Te metody Generowanie bez uwzględniania wielkości liter wystąpieniem kolekcji przy użyciu bez uwzględniania wielkości liter implementacji dostawcy kodu wyznaczania wartości skrótu i modułu porównującego. Wynikowy wystąpienia mogą być używane jak inne wystąpienia tej klasy, chociaż może zachowywać się inaczej.  
  
 Załóżmy na przykład, dwa obiekty z kluczami "hello" i "HELLO", które mają być dodawane do tabeli wyznaczania wartości skrótu. Tabela skrótów uwzględniana wielkość liter spowodowałoby utworzenie dwóch różnych wpisy. natomiast tabelę mieszania bez uwzględniania wielkości liter może zgłosić wyjątek podczas dodawania drugiego obiektu.  
  
   
  
## Examples  
 W poniższym przykładzie użyto dwie kolekcje, tabelę mieszania i posortowanej listy do przechowywania wartości populacji dla grup miast. Są one pobierane z kolekcji przy użyciu nazwy miast jako klucze. Nazwy miast są w przypadku mieszany, aby wyświetlić ich użycia jako klucze bez uwzględniania wielkości liter.  
  
 [!code-cpp[System.Collections.Specialized.CollectionsUtil#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.collections.specialized.collectionsutil/cpp/source.cpp#1)]
 [!code-csharp[System.Collections.Specialized.CollectionsUtil#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.specialized.collectionsutil/cs/source.cs#1)]
 [!code-vb[System.Collections.Specialized.CollectionsUtil#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.specialized.collectionsutil/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Element <see cref="T:System.Collections.Hashtable" /> może obsługiwać jeden składnik zapisywania i wielu elementów odczytujących jednocześnie. Aby zapewnić obsługę wielu modułów zapisujących, wszystkie operacje muszą być wykonywane przez otoki zwrócony przez <see cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" /> metody.  Element <see cref="T:System.Collections.SortedList" /> może obsługiwać wielu elementów odczytujących współbieżnie, tak długo, jak długo Kolekcja nie jest modyfikowany. Aby zagwarantować bezpieczeństwo wątków z <see cref="T:System.Collections.SortedList" />, wszystkie operacje musi odbywać się przy użyciu otoki zwrócony przez <see cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" /> metody.  Wyliczanie w kolekcji nie jest wewnętrznie bezpieczne procedury wątku. Nawet gdy kolekcja jest synchronizowana, inne wątki nadal mogą ją modyfikować. Powoduje to zgłaszanie wyjątku przez moduł wyliczający. Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania albo rejestrować wyjątki wynikłe ze zmian wprowadzanych przez inne wątków.</threadsafe>
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CollectionsUtil ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.CollectionsUtil.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CollectionsUtil();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Collections.Specialized.CollectionsUtil" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCaseInsensitiveHashtable">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Collections.Hashtable" /> klasy, które ignoruje wielkość liter ciągów.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCaseInsensitiveHashtable">
      <MemberSignature Language="C#" Value="public static System.Collections.Hashtable CreateCaseInsensitiveHashtable ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Hashtable CreateCaseInsensitiveHashtable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCaseInsensitiveHashtable () As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Hashtable ^ CreateCaseInsensitiveHashtable();" />
      <MemberSignature Language="F#" Value="static member CreateCaseInsensitiveHashtable : unit -&gt; System.Collections.Hashtable" Usage="System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nowe wystąpienie bez uwzględniania wielkości liter <see cref="T:System.Collections.Hashtable" /> klasy z domyślną pojemność.</summary>
        <returns>Nowe wystąpienie bez uwzględniania wielkości liter <see cref="T:System.Collections.Hashtable" /> klasy z domyślną pojemność.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zamiast używania <xref:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable%2A> metody, użyj <xref:System.Collections.Hashtable.%23ctor%28System.Collections.IEqualityComparer%29?displayProperty=nameWithType> konstruktora, aby utworzyć bez uwzględniania wielkości liter <xref:System.Collections.Hashtable> klasy.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />
        <altmember cref="T:System.Collections.CaseInsensitiveComparer" />
      </Docs>
    </Member>
    <Member MemberName="CreateCaseInsensitiveHashtable">
      <MemberSignature Language="C#" Value="public static System.Collections.Hashtable CreateCaseInsensitiveHashtable (System.Collections.IDictionary d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Hashtable CreateCaseInsensitiveHashtable(class System.Collections.IDictionary d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCaseInsensitiveHashtable (d As IDictionary) As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Hashtable ^ CreateCaseInsensitiveHashtable(System::Collections::IDictionary ^ d);" />
      <MemberSignature Language="F#" Value="static member CreateCaseInsensitiveHashtable : System.Collections.IDictionary -&gt; System.Collections.Hashtable" Usage="System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="d">
          <see cref="T:System.Collections.IDictionary" /> Do skopiowania do nowej bez uwzględniania wielkości liter <see cref="T:System.Collections.Hashtable" />.</param>
        <summary>Kopiuje wpisy z określonego słownika do nowego wystąpienia bez uwzględniania wielkości liter <see cref="T:System.Collections.Hashtable" /> klasy przy użyciu tego samego pojemność jako liczba wpisów skopiowane.</summary>
        <returns>Nowe wystąpienie bez uwzględniania wielkości liter <see cref="T:System.Collections.Hashtable" /> klasa zawierająca wpisy z określonego <see cref="T:System.Collections.IDictionary" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zamiast używania <xref:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable%2A> metody, użyj <xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%2CSystem.Collections.IEqualityComparer%29?displayProperty=nameWithType> konstruktora, aby utworzyć bez uwzględniania wielkości liter <xref:System.Collections.Hashtable> klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />
        <altmember cref="T:System.Collections.CaseInsensitiveComparer" />
      </Docs>
    </Member>
    <Member MemberName="CreateCaseInsensitiveHashtable">
      <MemberSignature Language="C#" Value="public static System.Collections.Hashtable CreateCaseInsensitiveHashtable (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Hashtable CreateCaseInsensitiveHashtable(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCaseInsensitiveHashtable (capacity As Integer) As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Hashtable ^ CreateCaseInsensitiveHashtable(int capacity);" />
      <MemberSignature Language="F#" Value="static member CreateCaseInsensitiveHashtable : int -&gt; System.Collections.Hashtable" Usage="System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable capacity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">Przybliżona liczba wpisów, <see cref="T:System.Collections.Hashtable" /> początkowo może zawierać.</param>
        <summary>Tworzy nowe wystąpienie bez uwzględniania wielkości liter <see cref="T:System.Collections.Hashtable" /> klasy przy użyciu określonego pojemność.</summary>
        <returns>Nowe wystąpienie bez uwzględniania wielkości liter <see cref="T:System.Collections.Hashtable" /> klasy przy użyciu określonego pojemność.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zamiast używania <xref:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable%2A> metody, użyj <xref:System.Collections.Hashtable.%23ctor%28System.Int32%2CSystem.Collections.IEqualityComparer%29?displayProperty=nameWithType> konstruktora, aby utworzyć bez uwzględniania wielkości liter <xref:System.Collections.Hashtable> klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> jest mniejsza niż zero.</exception>
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />
        <altmember cref="T:System.Collections.CaseInsensitiveComparer" />
      </Docs>
    </Member>
    <Member MemberName="CreateCaseInsensitiveSortedList">
      <MemberSignature Language="C#" Value="public static System.Collections.SortedList CreateCaseInsensitiveSortedList ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.SortedList CreateCaseInsensitiveSortedList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveSortedList" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCaseInsensitiveSortedList () As SortedList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::SortedList ^ CreateCaseInsensitiveSortedList();" />
      <MemberSignature Language="F#" Value="static member CreateCaseInsensitiveSortedList : unit -&gt; System.Collections.SortedList" Usage="System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveSortedList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.SortedList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Collections.SortedList" /> klasy, które ignoruje wielkość liter ciągów.</summary>
        <returns>Nowe wystąpienie klasy <see cref="T:System.Collections.SortedList" /> klasy, które ignoruje wielkość liter ciągów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nowy <xref:System.Collections.SortedList> zgodnie z opisem w jest sortowane wystąpienie klasy <xref:System.Collections.CaseInsensitiveComparer>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.SortedList" />
        <altmember cref="T:System.Collections.CaseInsensitiveComparer" />
      </Docs>
    </Member>
  </Members>
</Type>