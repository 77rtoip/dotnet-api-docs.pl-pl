<Type Name="CollectionsUtil" FullName="System.Collections.Specialized.CollectionsUtil">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9ac2364366038b611b5d276d2c5371c6b6ce761" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30439557" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CollectionsUtil" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CollectionsUtil extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Specialized.CollectionsUtil" />
  <TypeSignature Language="VB.NET" Value="Public Class CollectionsUtil" />
  <TypeSignature Language="C++ CLI" Value="public ref class CollectionsUtil" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Tworzy kolekcje, które Ignoruj wielkość liter w ciągach.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Te metody wygenerować wystąpienia bez uwzględniania wielkości liter z kolekcji przy użyciu bez uwzględniania wielkości liter implementacji dostawcy kodu wyznaczania wartości skrótu i porównania. Wynikowa wystąpienie może być używane podobnie jak wszystkie inne wystąpienia tej klasy, chociaż może zachowywać się inaczej.  
  
 Załóżmy na przykład, dwa obiekty z kluczami "hello" i "HELLO", które mają być dodawane do tablicy skrótów. Tabeli z uwzględnieniem wielkości liter skrót spowoduje utworzenie dwóch różnych wpisy. natomiast w tablicy skrótów bez uwzględniania wielkości liter spowoduje zgłoszenie wyjątku, podczas dodawania drugiego obiektu.  
  
   
  
## Examples  
 W poniższym przykładzie użyto dwie kolekcje tablicy skrótów i posortowaną listę do przechowywania wartości populacji dla grupy miast. Wartości są pobierane z kolekcji przy użyciu nazwy miast jako klucze. Nazwy miast znajdują się w wielkich i małych liter pokazanie ich użycia jako klucze bez uwzględniania wielkości liter.  
  
 [!code-cpp[System.Collections.Specialized.CollectionsUtil#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.collections.specialized.collectionsutil/cpp/source.cpp#1)]
 [!code-csharp[System.Collections.Specialized.CollectionsUtil#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.specialized.collectionsutil/cs/source.cs#1)]
 [!code-vb[System.Collections.Specialized.CollectionsUtil#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.specialized.collectionsutil/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>A <see cref="T:System.Collections.Hashtable" /> może obsługiwać jeden moduł zapisujący i wielu czytników jednocześnie. Aby obsługiwać wiele składników zapisywania, wszystkie operacje muszą być wykonywane przez otoki zwrócony przez <see cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" /> metody.  
  
 A <see cref="T:System.Collections.SortedList" /> może obsługiwać wielu czytników jednocześnie, jak długo kolekcji nie jest modyfikowany. W celu zagwarantowania bezpieczeństwa wątków <see cref="T:System.Collections.SortedList" />, wszystkie operacje muszą być wykonywane przez otoki zwrócony przez <see cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" /> metody.  
  
 Wyliczanie za pomocą kolekcji leżą nie jest procedurą bezpieczne wątku. Nawet gdy kolekcja jest synchronizowana, inne wątki nadal mogą ją modyfikować. Powoduje to zgłaszanie wyjątku przez moduł wyliczający. Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania albo rejestrować wyjątki wynikłe ze zmian wprowadzanych przez inne wątków.</threadsafe>
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CollectionsUtil ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.CollectionsUtil.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CollectionsUtil();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Collections.Specialized.CollectionsUtil" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCaseInsensitiveHashtable">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Collections.Hashtable" /> klasy, która ignoruje wielkość liter ciągów.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCaseInsensitiveHashtable">
      <MemberSignature Language="C#" Value="public static System.Collections.Hashtable CreateCaseInsensitiveHashtable ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Hashtable CreateCaseInsensitiveHashtable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCaseInsensitiveHashtable () As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Hashtable ^ CreateCaseInsensitiveHashtable();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nowe wystąpienie bez uwzględniania wielkości liter <see cref="T:System.Collections.Hashtable" /> klasy początkowej wydajności domyślnej.</summary>
        <returns>Nowe wystąpienie bez uwzględniania wielkości liter <see cref="T:System.Collections.Hashtable" /> klasy początkowej wydajności domyślnej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zamiast <xref:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable%2A> metody, użyj <xref:System.Collections.Hashtable.%23ctor%28System.Collections.IEqualityComparer%29?displayProperty=nameWithType> konstruktora w celu utworzenia bez uwzględniania wielkości liter <xref:System.Collections.Hashtable> klasy.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />
        <altmember cref="T:System.Collections.CaseInsensitiveComparer" />
      </Docs>
    </Member>
    <Member MemberName="CreateCaseInsensitiveHashtable">
      <MemberSignature Language="C#" Value="public static System.Collections.Hashtable CreateCaseInsensitiveHashtable (System.Collections.IDictionary d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Hashtable CreateCaseInsensitiveHashtable(class System.Collections.IDictionary d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCaseInsensitiveHashtable (d As IDictionary) As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Hashtable ^ CreateCaseInsensitiveHashtable(System::Collections::IDictionary ^ d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="d">
          <see cref="T:System.Collections.IDictionary" /> Można skopiować do nowego bez uwzględniania wielkości liter <see cref="T:System.Collections.Hashtable" />.</param>
        <summary>Kopiuje dane z określonego słownika do nowego wystąpienia bez uwzględniania wielkości liter <see cref="T:System.Collections.Hashtable" /> klasa o tej samej początkowej pojemności jako liczbę wpisów skopiowane.</summary>
        <returns>Nowe wystąpienie bez uwzględniania wielkości liter <see cref="T:System.Collections.Hashtable" /> klasa zawierająca wpisów z określonego <see cref="T:System.Collections.IDictionary" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zamiast <xref:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable%2A> metody, użyj <xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%2CSystem.Collections.IEqualityComparer%29?displayProperty=nameWithType> konstruktora w celu utworzenia bez uwzględniania wielkości liter <xref:System.Collections.Hashtable> klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />
        <altmember cref="T:System.Collections.CaseInsensitiveComparer" />
      </Docs>
    </Member>
    <Member MemberName="CreateCaseInsensitiveHashtable">
      <MemberSignature Language="C#" Value="public static System.Collections.Hashtable CreateCaseInsensitiveHashtable (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Hashtable CreateCaseInsensitiveHashtable(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCaseInsensitiveHashtable (capacity As Integer) As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Hashtable ^ CreateCaseInsensitiveHashtable(int capacity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">Przybliżoną liczbę wpisów który <see cref="T:System.Collections.Hashtable" /> początkowo może zawierać.</param>
        <summary>Tworzy nowe wystąpienie bez uwzględniania wielkości liter <see cref="T:System.Collections.Hashtable" /> klasy o określonej pojemności początkowej.</summary>
        <returns>Nowe wystąpienie bez uwzględniania wielkości liter <see cref="T:System.Collections.Hashtable" /> klasy o określonej pojemności początkowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zamiast <xref:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable%2A> metody, użyj <xref:System.Collections.Hashtable.%23ctor%28System.Int32%2CSystem.Collections.IEqualityComparer%29?displayProperty=nameWithType> konstruktora w celu utworzenia bez uwzględniania wielkości liter <xref:System.Collections.Hashtable> klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> jest mniejsza od zera.</exception>
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />
        <altmember cref="T:System.Collections.CaseInsensitiveComparer" />
      </Docs>
    </Member>
    <Member MemberName="CreateCaseInsensitiveSortedList">
      <MemberSignature Language="C#" Value="public static System.Collections.SortedList CreateCaseInsensitiveSortedList ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.SortedList CreateCaseInsensitiveSortedList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveSortedList" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCaseInsensitiveSortedList () As SortedList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::SortedList ^ CreateCaseInsensitiveSortedList();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.SortedList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Collections.SortedList" /> klasy, która ignoruje wielkość liter ciągów.</summary>
        <returns>Nowe wystąpienie klasy <see cref="T:System.Collections.SortedList" /> klasy, która ignoruje wielkość liter ciągów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nowy <xref:System.Collections.SortedList> zgodnie z tym jest sortowane wystąpienie klasy <xref:System.Collections.CaseInsensitiveComparer>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.SortedList" />
        <altmember cref="T:System.Collections.CaseInsensitiveComparer" />
      </Docs>
    </Member>
  </Members>
</Type>