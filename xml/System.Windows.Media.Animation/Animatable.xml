<Type Name="Animatable" FullName="System.Windows.Media.Animation.Animatable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d76f2c0965e10e5062bdfec4d16886dd46b80a71" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69166241" /></Metadata><TypeSignature Language="C#" Value="public abstract class Animatable : System.Windows.Freezable, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Animatable extends System.Windows.Freezable implements class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.Animatable" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Animatable&#xA;Inherits Freezable&#xA;Implements IAnimatable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Animatable abstract : System::Windows::Freezable, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type Animatable = class&#xA;    inherit Freezable&#xA;    interface IAnimatable&#xA;    interface DUCE.IResource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Klasa abstrakcyjna, która zapewnia obsługę animacji.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Animatable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Animatable();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Media.Animation.Animatable" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Animowanie określonego <see cref="T:System.Windows.DependencyProperty" /> przy użyciu określonego <see cref="T:System.Windows.Media.Animation.AnimationClock" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="animatable.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość do animacji.</param>
        <param name="clock">Zegar, za pomocą którego ma być animowana określona właściwość. Jeśli <paramref name="clock" /> jest<see langword="null" />, wszystkie animacje zostaną usunięte z określonej właściwości (ale nie zatrzymane).</param>
        <summary>Stosuje do określonego <see cref="T:System.Windows.DependencyProperty" />. <see cref="T:System.Windows.Media.Animation.AnimationClock" /> Jeśli właściwość jest już animowana, <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> używane jest zachowanie podczas przedania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy zauważyć, że użycie tej metody do usuwania zegarów z właściwości nie powoduje zatrzymania tych zegarów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="animatable.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość do animacji.</param>
        <param name="clock">Zegar, za pomocą którego ma być animowana określona właściwość. Jeśli <paramref name="handoffBehavior" /> jest <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> i <paramref name="clock" /> ma ,wszystkieanimacjezostanąusuniętezokreślonejwłaściwości(aleniezatrzymane).<see langword="null" /> Jeśli <paramref name="handoffBehavior" /> <see langword="null" />jest <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" /> i Clock ma, ta metoda nie ma żadnego wpływu.</param>
        <param name="handoffBehavior">Wartość określająca sposób, w jaki Nowa animacja powinna współdziałać z wszystkimi bieżącymi animacjami, które mają już wpływ na wartość właściwości.</param>
        <summary>Stosuje do określonego <see cref="T:System.Windows.DependencyProperty" />. <see cref="T:System.Windows.Media.Animation.AnimationClock" /> Jeśli właściwość jest już animowana, zostanie użyta określona <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> .</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy zauważyć, że użycie tej metody do usuwania zegarów z właściwości nie powoduje zatrzymania tych zegarów.  
  
## <a name="using-the-compose-handoffbehavior"></a>Korzystanie z Compose HandoffBehavior  
 Po <xref:System.Windows.Media.Animation.Storyboard>zastosowaniu <xref:System.Windows.Media.Animation.Clock> , <xref:System.Windows.Media.Animation.AnimationTimeline>, lub <xref:System.Windows.Media.Animation.AnimationClock> do właściwości przy użyciu <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, wszystkie obiekty wcześniej skojarzone z tą właściwością nadal zużywają zasoby systemowe; system chronometrażu nie będzie Usuń te zegary automatycznie.  
  
 Aby uniknąć problemów z wydajnością podczas stosowania dużej liczby zegarów przy użyciu <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>programu, należy usunąć z właściwości animowane zegary, po ich zakończeniu. Istnieje kilka sposobów usunięcia zegara.  
  
-   Aby usunąć wszystkie zegary z właściwości, użyj <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> lub <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> metody animowanego obiektu. Określ animowaną właściwość jako pierwszy parametr, a `null` w drugim. Spowoduje to usunięcie wszystkich zegarów animacji z właściwości.  
  
-   <xref:System.Windows.Media.Animation.AnimationClock> Aby usunąć określony z listy zegarów, <xref:System.Windows.Media.Animation.Clock.Controller%2A> Użyj właściwości <xref:System.Windows.Media.Animation.AnimationClock> do pobrania <xref:System.Windows.Media.Animation.ClockController>a <xref:System.Windows.Media.Animation.ClockController>, a następnie Wywołaj <xref:System.Windows.Media.Animation.ClockController.Remove%2A> metodę. Jest to zazwyczaj wykonywane w programie <xref:System.Windows.Media.Animation.Clock.Completed> obsługi zdarzeń zegara. Należy zauważyć, że tylko zegary główne mogą być sterowane <xref:System.Windows.Media.Animation.ClockController>przez <xref:System.Windows.Media.Animation.Clock.Controller%2A> ; Właściwość zegara `null`podrzędnego zwróci wartość. Należy zauważyć, że <xref:System.Windows.Media.Animation.Clock.Completed> zdarzenie nie zostanie wywołane, jeśli czynny czas trwania zegara jest nieograniczona.  W takim przypadku użytkownik będzie musiał określić, kiedy ma być wywoływana <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  
  
 Jest to szczególnie problem w przypadku animacji na obiektach, które mają długi okres istnienia.  Gdy obiekt jest odzyskiwany, jego zegary również zostaną rozłączone i zostaną pobrane jako elementy bezużyteczne.  
  
 Aby uzyskać więcej informacji na temat obiektów zegara, zobacz [Omówienie animacji i systemu chronometrażu](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak zastosować zegary animacji przy użyciu różnych <xref:System.Windows.Media.Animation.HandoffBehavior> ustawień.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Stosuje animację do określonego <see cref="T:System.Windows.DependencyProperty" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="animatable.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość do animacji.</param>
        <param name="animation">Animacja używana do animowania określonej właściwości.  
  
Jeśli animacja <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> jest <see langword="null" />, wszystkie bieżące animacje zostaną usunięte i bieżąca wartość właściwości zostanie przeprowadzona.  
  
Jeśli <paramref name="animation" /> tak<see langword="null" />, wszystkie animacje zostaną usunięte z właściwości, a wartość właściwości zostanie przywrócona do wartości podstawowej.</param>
        <summary>Stosuje animację do określonego <see cref="T:System.Windows.DependencyProperty" />. Animacja jest uruchamiana, gdy Następna ramka jest renderowana. Jeśli określona właściwość jest już animowana, <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> używane jest zachowanie podczas przedania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli animacja ma <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> wartość większą od zera, animacja rozpocznie się po upływie tego czasu od momentu renderowania następnej ramki.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="animatable.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość do animacji.</param>
        <param name="animation">Animacja używana do animowania określonej właściwości.  
  
Jeśli <paramref name="handoffBehavior" /> jest <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> i animacja <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> jest<see langword="null" />, wszystkie bieżące animacje zostaną usunięte i bieżąca wartość właściwości zostanie przeprowadzona.  
  
Jeśli <paramref name="handoffBehavior" /> jest <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> i <paramref name="animation" /> jest odwołaniem,wszystkieanimacjezostanąusuniętezwłaściwości,awartośćwłaściwościzostanieprzywróconadowartościpodstawowej.<see langword="null" />  
  
Jeśli <paramref name="handoffBehavior" /> <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> <see langword="null" />jest <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" />, ta metoda nie będzie działać, jeśli animacja lub jej wartość jest.</param>
        <param name="handoffBehavior">Wartość określająca sposób, w jaki Nowa animacja powinna współdziałać z wszystkimi bieżącymi animacjami, które mają już wpływ na wartość właściwości.</param>
        <summary>Stosuje animację do określonego <see cref="T:System.Windows.DependencyProperty" />. Animacja jest uruchamiana, gdy Następna ramka jest renderowana. Jeśli określona właściwość jest już animowana, zostanie użyta określona <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> .</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli animacja ma <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> wartość większą od zera, animacja rozpocznie się po upływie tego czasu od momentu renderowania następnej ramki.  
  
## <a name="using-the-compose-handoffbehavior"></a>Korzystanie z Compose HandoffBehavior  
 Po <xref:System.Windows.Media.Animation.Storyboard>zastosowaniu <xref:System.Windows.Media.Animation.Clock> , <xref:System.Windows.Media.Animation.AnimationTimeline>, lub <xref:System.Windows.Media.Animation.AnimationClock> do właściwości przy użyciu <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, wszystkie obiekty wcześniej skojarzone z tą właściwością nadal zużywają zasoby systemowe; system chronometrażu nie będzie Usuń te zegary automatycznie.  
  
 Aby uniknąć problemów z wydajnością podczas stosowania dużej liczby zegarów przy użyciu <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>programu, należy usunąć z właściwości animowane zegary, po ich zakończeniu. Istnieje kilka sposobów usunięcia zegara.  
  
-   Aby usunąć wszystkie zegary z właściwości, użyj <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> lub <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> metody animowanego obiektu. Określ animowaną właściwość jako pierwszy parametr, a `null` w drugim. Spowoduje to usunięcie wszystkich zegarów animacji z właściwości.  
  
-   <xref:System.Windows.Media.Animation.AnimationClock> Aby usunąć określony z listy zegarów, <xref:System.Windows.Media.Animation.Clock.Controller%2A> Użyj właściwości <xref:System.Windows.Media.Animation.AnimationClock> do pobrania <xref:System.Windows.Media.Animation.ClockController>a <xref:System.Windows.Media.Animation.ClockController>, a następnie Wywołaj <xref:System.Windows.Media.Animation.ClockController.Remove%2A> metodę. Jest to zazwyczaj wykonywane w programie <xref:System.Windows.Media.Animation.Clock.Completed> obsługi zdarzeń zegara. Należy zauważyć, że tylko zegary główne mogą być sterowane <xref:System.Windows.Media.Animation.ClockController>przez <xref:System.Windows.Media.Animation.Clock.Controller%2A> ; Właściwość zegara `null`podrzędnego zwróci wartość. Należy zauważyć, że <xref:System.Windows.Media.Animation.Clock.Completed> zdarzenie nie zostanie wywołane, jeśli czynny czas trwania zegara jest nieograniczona.  W takim przypadku użytkownik będzie musiał określić, kiedy ma być wywoływana <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  
  
 Jest to szczególnie problem w przypadku animacji na obiektach, które mają długi okres istnienia.  Gdy obiekt jest odzyskiwany, jego zegary również zostaną rozłączone i zostaną pobrane jako elementy bezużyteczne.  
  
 Aby uzyskać więcej informacji na temat obiektów zegara, zobacz [Omówienie animacji i systemu chronometrażu](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak zastosować animacje przy użyciu różnych <xref:System.Windows.Media.Animation.HandoffBehavior> ustawień.  
  
 [!code-cpp[animateproperty#InteractiveAnimationExampleWholePage](~/samples/snippets/cpp/VS_Snippets_Wpf/animateproperty/CPP/InteractiveExample.cpp#interactiveanimationexamplewholepage)]
 [!code-csharp[animateproperty#InteractiveAnimationExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/animateproperty/CSharp/InteractiveExample.cs#interactiveanimationexamplewholepage)]
 [!code-vb[animateproperty#InteractiveAnimationExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateproperty/VisualBasic/InteractiveExample.vb#interactiveanimationexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Animatable Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Animation.Animatable Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Animatable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::Animation::Animatable ^ Clone();" />
      <MemberSignature Language="F#" Value="override this.Clone : unit -&gt; System.Windows.Media.Animation.Animatable" Usage="animatable.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Animatable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy modyfikowalny klon tego <see cref="T:System.Windows.Media.Animation.Animatable" />elementu, tworząc głębokie kopie wartości tego obiektu. Podczas kopiowania właściwości zależności tego obiektu ta metoda kopiuje odwołania zasobów i powiązania danych (ale mogą nie być już rozpoznawane), ale nie ma animacji ani ich bieżących wartości.</summary>
        <returns>Modyfikowalny klon tego wystąpienia. Zwrócony klon jest efektywnie kopią głębokiego bieżącego obiektu. <see cref="P:System.Windows.Freezable.IsFrozen" /> Właściwość klonu to <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda może służyć do tworzenia modyfikowalnych kopii obiektów zamrożonych <xref:System.Windows.Freezable>. <xref:System.Windows.Media.Animation.Animatable.Clone%2A> Dla wygody ta metoda przesłania metodę dziedziczonej <xref:System.Windows.Freezable.Clone%2A> w celu zapewnienia implementacji silnie określonego typu.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Freezable.Clone" />
      </Docs>
    </Member>
    <Member MemberName="FreezeCore">
      <MemberSignature Language="C#" Value="protected override bool FreezeCore (bool isChecking);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool FreezeCore(bool isChecking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function FreezeCore (isChecking As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool FreezeCore(bool isChecking);" />
      <MemberSignature Language="F#" Value="override this.FreezeCore : bool -&gt; bool" Usage="animatable.FreezeCore isChecking" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isChecking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isChecking"><see langword="true" />Jeśli ta metoda powinna po prostu określić, czy to wystąpienie może być zablokowane. <see langword="false" />Jeśli to wystąpienie powinno być rzeczywiście zawieszać się, gdy ta metoda jest wywoływana.</param>
        <summary>Sprawia, <see cref="T:System.Windows.Media.Animation.Animatable" /> że ten obiekt jest niemodyfikowalny lub określa, czy można go nie modyfikować.</summary>
        <returns>Jeśli <paramref name="isChecking" /> <see langword="true" /> jest <see langword="true" />, Tametoda<see langword="false" /> zwraca wartość, jeśli niemożnajejmodyfikowaćlubniemożnajejzmodyfikować.<see cref="T:System.Windows.Media.Animation.Animatable" />  
  
Jeśli <paramref name="isChecking" /> <see langword="true" /> jest <see langword="false" />, ta metoda <see langword="false" /> zwracawartość,jeślijestterazniemodyfikowalnalubniemożnajejzmienić,zefektemubocznymrozpoczętymwceluzmianystanuzamrożonegotegoobiektu.<see cref="T:System.Windows.Media.Animation.Animatable" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwróci wynik `false`. <xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A> `true`  
  
 Nie wywołuj tej metody bezpośrednio (z wyjątkiem sytuacji, w której jest wywoływana baza w implementacji). Ta metoda jest wywoływana wewnętrznie przez <xref:System.Windows.Freezable.CanFreeze%2A> (z `isChecking` równą `true`) i <xref:System.Windows.Freezable.Freeze%2A> (z `isChecking` równą `false`).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Klasy pochodne od <see cref="T:System.Windows.Media.Animation.Animatable" /> muszą przesłaniać tę metodę, gdy Klasa zawiera dane, które nie są przechowywane przy użyciu właściwości zależności.  
  
Typowa implementacja wywoła implementację podstawową, a następnie Wywołaj metodę <see cref="M:System.Windows.Freezable.Freeze" /> statyczną we <see cref="T:System.Windows.Freezable" /> wszystkich typach właściwości, które zawiera Klasa, <see langword="true" /> zwracając tylko wtedy, gdy wszystkie właściwości zostały zamrożone (lub mogły zostać zamrożone w przypadek przechodzenia przez <see langword="false" /> wartość dla <paramref name="isChecking" />).</para></block>
        <altmember cref="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)" />
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="animatable.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">Identyfikuje właściwość, której wartość podstawowa (nieanimowana) powinna zostać pobrana.</param>
        <summary>Zwraca nieanimowaną wartość określonego <see cref="T:System.Windows.DependencyProperty" />elementu.</summary>
        <returns>Wartość, która ma zostać zwrócona, jeśli określona właściwość nie była animowana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli określona właściwość nie jest animowana, ta metoda zwraca ten sam wynik co <xref:System.Windows.DependencyObject.GetValue%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie są pobierane i wyświetlane Nieanimowane wartości animowanych właściwości.  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalueexamplewholepage)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalueexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Animatable.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.Media.Animation.Animatable.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy co najmniej jeden <see cref="T:System.Windows.Media.Animation.AnimationClock" /> obiekt jest skojarzony z żadną z właściwości zależności tego obiektu.</summary>
        <value><see langword="true" />Jeśli co najmniej jeden <see cref="T:System.Windows.Media.Animation.AnimationClock" /> obiekt jest skojarzony z dowolnymi właściwościami zależności tego obiektu; <see langword="false" />w przeciwnym razie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość nie wskazuje, czy ten obiekt zawiera animowane obiekty podrzędne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStoredWeakReference">
      <MemberSignature Language="C#" Value="public static bool ShouldSerializeStoredWeakReference (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ShouldSerializeStoredWeakReference(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ShouldSerializeStoredWeakReference (target As DependencyObject) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ShouldSerializeStoredWeakReference(System::Windows::DependencyObject ^ target);" />
      <MemberSignature Language="F#" Value="static member ShouldSerializeStoredWeakReference : System.Windows.DependencyObject -&gt; bool" Usage="System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">Reprezentuje obiekt, który uczestniczy w systemie właściwości zależności.</param>
        <summary>Określa, czy obiekt zależności powinien być serializowany.</summary>
        <returns><see langword="true" />Aby serializować <paramref name="target" />; w przeciwnym <see langword="false" />razie,. Wartość domyślna to <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa używa metody, <xref:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference%2A> aby określić, czy właściwość powinna być serializowana. <xref:System.ComponentModel.TypeDescriptor>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
