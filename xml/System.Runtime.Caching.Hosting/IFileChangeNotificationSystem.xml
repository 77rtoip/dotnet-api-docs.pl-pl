<Type Name="IFileChangeNotificationSystem" FullName="System.Runtime.Caching.Hosting.IFileChangeNotificationSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ebfbbed64ce375ea6b980924387f099875657fa5" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39928275" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFileChangeNotificationSystem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFileChangeNotificationSystem" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFileChangeNotificationSystem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFileChangeNotificationSystem" />
  <TypeSignature Language="F#" Value="type IFileChangeNotificationSystem = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiuje sposób, aby udostępnić niestandardowy <see cref="T:System.Runtime.Caching.FileChangeMonitor" /> obiektu do implementacji pamięci podręcznej.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W programie ASP.NET: <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem> interfejs zapewnia dostęp do zarządzania powiadomień wewnętrznych zmian plików.  
  
 <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem> Interfejsu jest używana wewnętrznie przez <xref:System.Runtime.Caching.HostFileChangeMonitor> klasy.  
  
 Po uruchomieniu wdrożenia pamięci podręcznej w domenie aplikacji ASP.NET, ASP.NET implementuje <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem> interfejsu za pośrednictwem <xref:System.Runtime.Caching.ObjectCache.Host%2A> właściwości. <xref:System.Runtime.Caching.HostFileChangeMonitor> Klasy wykrywa tę właściwość i używa systemu powiadomień platformy ASP.NET zmian plików do wykluczenia z wpisy pamięci podręcznej, w oparciu o powiadomienia o zmianie pliku.  
  
 W aplikacjach niedotyczący środowiska ASP.NET jest brak środowiska hosta, który implementuje niestandardową <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem> interfejsu. W rezultacie <xref:System.Runtime.Caching.HostFileChangeMonitor> klasy używa <xref:System.IO.FileSystemWatcher> klasy środowiska CLR.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="StartMonitoring">
      <MemberSignature Language="C#" Value="public void StartMonitoring (string filePath, System.Runtime.Caching.OnChangedCallback onChangedCallback, out object state, out DateTimeOffset lastWriteTime, out long fileSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartMonitoring(string filePath, class System.Runtime.Caching.OnChangedCallback onChangedCallback, [out] object&amp; state, [out] valuetype System.DateTimeOffset&amp; lastWriteTime, [out] int64&amp; fileSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(System.String,System.Runtime.Caching.OnChangedCallback,System.Object@,System.DateTimeOffset@,System.Int64@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartMonitoring(System::String ^ filePath, System::Runtime::Caching::OnChangedCallback ^ onChangedCallback, [Runtime::InteropServices::Out] System::Object ^ % state, [Runtime::InteropServices::Out] DateTimeOffset % lastWriteTime, [Runtime::InteropServices::Out] long % fileSize);" />
      <MemberSignature Language="F#" Value="abstract member StartMonitoring : string * System.Runtime.Caching.OnChangedCallback *  *  *  -&gt; unit" Usage="iFileChangeNotificationSystem.StartMonitoring (filePath, onChangedCallback, state, lastWriteTime, fileSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
        <Parameter Name="state" Type="System.Object" RefType="out" />
        <Parameter Name="lastWriteTime" Type="System.DateTimeOffset" RefType="out" />
        <Parameter Name="fileSize" Type="System.Int64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="filePath">W pełni kwalifikowaną ścieżkę fizyczną katalogu lub pliku do monitorowania zmian.</param>
        <param name="onChangedCallback">Odwołanie do metody, która implementuje <see cref="T:System.Runtime.Caching.OnChangedCallback" /> delegować. Monitorowane pliku lub katalogu zmiany, implementacji środowiska hosta <see cref="T:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem" /> interfejsu zgłasza zdarzenie, wywołując <see cref="T:System.Runtime.Caching.OnChangedCallback" /> klasy.</param>
        <param name="state">Stan, który jest dostarczany przez środowisko hosta. Implementacjach pamięci podręcznej i monitory niestandardowe zmiany powinien traktować jako nieprzezroczysty wartość stanu. Jednak stanu muszą być przechowywane, aby mógł zostać wysłany do środowiska hosta podczas wywołania implementacji pamięci podręcznej <see cref="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring(System.String,System.Object)" /> metody.</param>
        <param name="lastWriteTime">Po powrocie z tej metody zawiera ostatni daty i godziny, wystąpienia operacji zapisu na <c>filePath</c>. Ten parametr jest przekazywany niezainicjowany. Ten parametr jest zwracany w środowisku hosta.</param>
        <param name="fileSize">Po powrocie z tej metody zawiera łączny rozmiar monitorowanych <c>filePath</c>. Ten parametr jest przekazywany niezainicjowany. Ten parametr jest zwracany w środowisku hosta.</param>
        <summary>Rejestruje ścieżkę pliku do monitorowania za pomocą środowiska hosta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest używana przez niestandardowe buforowania obiektów i niestandardowe Zmień monitory, które implementują środowisko hosta <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem> interfejsu do zarejestrowania ścieżki pliku do monitorowania za pomocą środowiska hosta. <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring%2A> Metoda jest wywoływana przez implementacje z <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem> interfejsu, aby zarejestrować plik lub katalog do monitorowania zmian.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopMonitoring">
      <MemberSignature Language="C#" Value="public void StopMonitoring (string filePath, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopMonitoring(string filePath, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopMonitoring (filePath As String, state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopMonitoring(System::String ^ filePath, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member StopMonitoring : string * obj -&gt; unit" Usage="iFileChangeNotificationSystem.StopMonitoring (filePath, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filePath">Ścieżka pliku lub folderu, aby zatrzymać monitorowanie. Powinien on odpowiadać wartości ścieżki pliku, który został przekazany w podczas wcześniejszego wywołania <see cref="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(System.String,System.Runtime.Caching.OnChangedCallback,System.Object@,System.DateTimeOffset@,System.Int64@)" /> metody.</param>
        <param name="state">Informacje o stanie, który pierwotnie został dostarczony przez środowisko hosta podczas wcześniejszego wywołania funkcji <see cref="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(System.String,System.Runtime.Caching.OnChangedCallback,System.Object@,System.DateTimeOffset@,System.Int64@)" /> metody.</param>
        <summary>Kończy się zmienić, monitorowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring%2A> Metoda musi zostać wywołana przez niestandardowe pamięci podręczne i niestandardowe Zmień monitory, które są zostanie usunięty przez środowisko hosta, aby zatrzymać monitorowanie ścieżki do plików i katalogów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>