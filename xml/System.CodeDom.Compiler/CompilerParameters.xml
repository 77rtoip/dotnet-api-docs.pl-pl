<Type Name="CompilerParameters" FullName="System.CodeDom.Compiler.CompilerParameters">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="89776e60ad6bbd4d6a333c403ae8b0808fca063e" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37704415" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CompilerParameters" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CompilerParameters extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CompilerParameters" />
  <TypeSignature Language="VB.NET" Value="Public Class CompilerParameters" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompilerParameters" />
  <TypeSignature Language="F#" Value="type CompilerParameters = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Przedstawia parametry używane do wywoływania kompilatora.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.CodeDom.Compiler.CompilerParameters> obiekt reprezentuje ustawienia i opcje dla <xref:System.CodeDom.Compiler.ICodeCompiler> interfejsu.  
  
 Jeśli kompilujesz program wykonywalny, musisz ustawić <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> właściwość `true`. Gdy <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> ustawiono `false`, kompilator wygeneruje bibliotekę klas. Domyślnie nowy <xref:System.CodeDom.Compiler.CompilerParameters> jest inicjowany za pomocą jego <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> właściwością `false`. Jeśli kompilacja pliku wykonywalnego z wykresu CodeDOM <xref:System.CodeDom.CodeEntryPointMethod> muszą być zdefiniowane na wykresie. Jeśli istnieje wiele punktów wejścia kodu, można wskazać klasę, która definiuje punkt wejścia do użycia przez nazwę klasy, która ma ustawienie <xref:System.CodeDom.Compiler.CompilerParameters.MainClass%2A> właściwości.  
  
 Można określić nazwę pliku dla zestawu wyjściowego w <xref:System.CodeDom.Compiler.CompilerParameters.OutputAssembly%2A> właściwości. W przeciwnym razie posłuży domyślną nazwę pliku wyjściowego. Aby uwzględnić informacje o debugowaniu w wygenerowanym zestawie, należy ustawić <xref:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation%2A> właściwość `true`. Jeśli projekt odwołuje się do wszystkich zestawów, należy określić nazwy zestawu jako elementy <xref:System.Collections.Specialized.StringCollection> równa <xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A> właściwość <xref:System.CodeDom.Compiler.CompilerParameters> używany podczas wywoływania kompilacji.  
  
 Można też kompilować zestaw, który jest zapisywany w pamięci, a nie na dysku, ustawiając <xref:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory%2A> właściwość `true`. Podczas generowania zestawu w pamięci, Twój kod może uzyskać odwołanie do wygenerowanego zestawu z <xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A> właściwość <xref:System.CodeDom.Compiler.CompilerResults>. Jeśli zestaw został napisany na dysku, można uzyskać ścieżki do wygenerowanego zestawu z <xref:System.CodeDom.Compiler.CompilerResults.PathToAssembly%2A> właściwość <xref:System.CodeDom.Compiler.CompilerResults>.  
  
 Aby określić poziom ostrzeżeń, od którego należy zatrzymać kompilacji, ustaw <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A> właściwości na liczbę całkowitą reprezentującą poziom ostrzeżeń, od którego należy zatrzymać kompilację. Można również skonfigurować kompilator, aby zatrzymać kompilacji, jeśli nie zostaną napotkane ostrzeżenia, ustawiając <xref:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors%2A> właściwość `true`.  
  
 Aby określić ciąg niestandardowe argumenty wiersza polecenia do użycia podczas wywoływania procesu kompilacji, należy określić ciąg <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A> właściwości. W przypadku systemu Win32 token zabezpieczający jest wymagany do wywołania proces kompilatora, należy określić token w <xref:System.CodeDom.Compiler.CompilerParameters.UserToken%2A> właściwości. Aby dołączyć pliki zasobów .NET Framework w skompilowanym zestawie, Dodaj nazwy plików zasobów <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> właściwości. Aby odwoływać się do zasobów .NET Framework w innym zestawie, Dodaj nazwy plików zasobów <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> właściwości. Aby dołączyć plik zasobów Win32 w skompilowanym zestawie, określ nazwę pliku zasobów Win32 w <xref:System.CodeDom.Compiler.CompilerParameters.Win32Resource%2A> właściwości.  
  
> [!NOTE]
>  Ta klasa zawiera żądanie łącza i dziedziczenia na poziomie klasy stosowane do wszystkich składowych. Element <xref:System.Security.SecurityException> jest generowany, gdy bezpośredniego obiektu wywołującego lub Klasa pochodna nie mają uprawnień pełnego zaufania. Aby uzyskać szczegółowe informacje na temat wymaganych zabezpieczeń, zobacz [zapotrzebowania na łącza](~/docs/framework/misc/link-demands.md) i [Inheritancedemand](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9).  
  
   
  
## Examples  
 Poniższy przykład opiera się źródło wykresu CodeDOM dla prostego programu Witaj świecie.  Źródło jest następnie zapisywany do pliku, skompilowany do pliku wykonywalnego, a następnie uruchom. `CompileCode` Metoda ilustruje sposób użycia <xref:System.CodeDom.Compiler.CompilerParameters> klasy, aby określić różne opcje i ustawienia kompilatora.  
  
 [!code-cpp[CompilerParametersExample#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#1)]
 [!code-csharp[CompilerParametersExample#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#1)]
 [!code-vb[CompilerParametersExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Nie można użyć tej klasy w kodzie częściowo zaufanym.</permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">aby uzyskać pełne zaufanie dla obiektów dziedziczących. Klasa ta nie może być dziedziczona przez kod częściowo zaufany.</permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilerParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerParameters.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompilerParameters();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.CodeDom.Compiler.CompilerParameters> Aby określić różne opcje i ustawienia kompilatora. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.CodeDom.Compiler.CompilerParameters> klasy.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Nie można użyć tej klasy w kodzie częściowo zaufanym.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilerParameters (string[] assemblyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompilerParameters(cli::array &lt;System::String ^&gt; ^ assemblyNames);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.Compiler.CompilerParameters : string[] -&gt; System.CodeDom.Compiler.CompilerParameters" Usage="new System.CodeDom.Compiler.CompilerParameters assemblyNames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">Nazwy zestawów odwołania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> przy użyciu nazwy określonego zestawu.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Nie można użyć tej klasy w kodzie częściowo zaufanym.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilerParameters (string[] assemblyNames, string outputName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames, string outputName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyNames As String(), outputName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompilerParameters(cli::array &lt;System::String ^&gt; ^ assemblyNames, System::String ^ outputName);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.Compiler.CompilerParameters : string[] * string -&gt; System.CodeDom.Compiler.CompilerParameters" Usage="new System.CodeDom.Compiler.CompilerParameters (assemblyNames, outputName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
        <Parameter Name="outputName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">Nazwy zestawów odwołania.</param>
        <param name="outputName">Nazwa pliku wyjściowego.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> klasy przy użyciu nazwy określonego zestawu i nazwa pliku wyjściowego.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Nie można użyć tej klasy w kodzie częściowo zaufanym.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilerParameters (string[] assemblyNames, string outputName, bool includeDebugInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames, string outputName, bool includeDebugInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyNames As String(), outputName As String, includeDebugInformation As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompilerParameters(cli::array &lt;System::String ^&gt; ^ assemblyNames, System::String ^ outputName, bool includeDebugInformation);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.Compiler.CompilerParameters : string[] * string * bool -&gt; System.CodeDom.Compiler.CompilerParameters" Usage="new System.CodeDom.Compiler.CompilerParameters (assemblyNames, outputName, includeDebugInformation)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
        <Parameter Name="outputName" Type="System.String" />
        <Parameter Name="includeDebugInformation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">Nazwy zestawów odwołania.</param>
        <param name="outputName">Nazwa pliku wyjściowego.</param>
        <param name="includeDebugInformation">
          <see langword="true" /> uwzględnienie informacji o debugowaniu; <see langword="false" /> do wykluczenia informacje debugowania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> przy użyciu nazwy określonego zestawu, nazwę danych wyjściowych i wartość wskazującą, czy chcesz uwzględnić informacje o debugowaniu.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Nie można użyć tej klasy w kodzie częściowo zaufanym.</permission>
      </Docs>
    </Member>
    <Member MemberName="CompilerOptions">
      <MemberSignature Language="C#" Value="public string CompilerOptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CompilerOptions" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions" />
      <MemberSignature Language="VB.NET" Value="Public Property CompilerOptions As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CompilerOptions { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompilerOptions : string with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.CompilerOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia opcjonalne argumenty wiersza polecenia do użycia podczas wywoływania kompilator.</summary>
        <value>Dodatkowe argumenty wiersza polecenia dla kompilatora.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.ICodeCompiler> Zwykle zawiera ten ciąg w wierszu polecenia podczas wywoływania kompilatora wiersza polecenia. Domyślnie ta właściwość zawiera pusty ciąg.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.CodeDom.Compiler.CompilerParameters> Aby określić różne opcje i ustawienia kompilatora. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.CodeDom.Compiler.CompilerParameters> klasy.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssemblyFileName">
      <MemberSignature Language="C#" Value="public string CoreAssemblyFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CoreAssemblyFileName" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property CoreAssemblyFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CoreAssemblyFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssemblyFileName : string with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę podstawowej lub standardowy zestaw, który zawiera typy podstawowe, takie jak <see cref="T:System.Object" />, <see cref="T:System.String" />, lub <see cref="T:System.Int32" />.</summary>
        <value>Nazwa zestawu core, który zawiera typy podstawowe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wartość tej właściwości jest ciągiem pustym lub `null`, kompilator używa domyślnego zestawu core. W zależności od wersji kompilatora zestaw podstawowych domyślny może być mscorlib.dll lub biblioteki System.Runtime.dll w katalogu Framework lub w katalogu zestawu odwołania. Jeśli wartość tej właściwości nie jest pusty, kod Document Object Model (CodeDOM) jawnie odwołuje się do określonego zestawu i emituje opcje kompilatora, które powodują kompilator, aby nie odwoływać się do wszystkich zestawów niejawnie podczas kompilacji... Dla kompilatorów odwołujące się do podstawowych funkcji lub standardowego zestawu tylko niejawnie przez domyślne, aby ta właściwość może służyć samodzielnie. Kompilatory, które niejawnie zestawów odwołań dodatkowo do podstawowych funkcji lub standardowego zestawu, aby uzyskać przy użyciu tej opcji może wymagać określenie dodatkowe pozycje w <xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A?displayProperty=nameWithType> właściwości.  
  
> [!NOTE]
>  <xref:System.CodeDom.Compiler.ICodeCompiler> Lub <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji mają możliwość zignoruj tę właściwość.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmbeddedResources">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringCollection EmbeddedResources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringCollection EmbeddedResources" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EmbeddedResources As StringCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringCollection ^ EmbeddedResources { System::Collections::Specialized::StringCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EmbeddedResources : System.Collections.Specialized.StringCollection" Usage="System.CodeDom.Compiler.CompilerParameters.EmbeddedResources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera pliki zasobów .NET Framework do uwzględnienia podczas kompilowania zestawu danych wyjściowych.</summary>
        <value>Kolekcja, która zawiera ścieżki do plików zasobów .NET Framework do uwzględnienia w wygenerowanym zestawie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zasoby osadzone są wbudowane w plik wyjściowy wygenerowanego zestawu. W tym pliki za pomocą tej właściwości jest podobny do `/resource` argument wiersza polecenia obsługiwane przez wiele kompilatorów .NET Framework.  
  
 Nie wszystkie kompilatory obsługuje pliki zasobów .NET Framework, więc należy przetestować obsługę przez wywołanie metody <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> metody z flagą <xref:System.CodeDom.Compiler.GeneratorSupport.Resources>.  
  
 Dodaj jeden lub więcej ścieżek plików zasobów .NET Framework do zwracanego <xref:System.Collections.Specialized.StringCollection> do osadzenia plików zasobów w skompilowanym zestawie. Dodawanie zduplikowany lub nieprawidłowy plik ścieżka wyników w błędach kompilacji; Upewnij się, że każdy ciąg Określa unikatową ścieżkę do prawidłowego pliku zasobów .NET Framework.  
  
 Użyj <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> obejmujący domyślne lub zasobów .NET Framework kultury neutralnej dla zestawu; użyj <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> właściwość, aby odwoływać się do zasobów .NET Framework w zestawach satelickich.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.CodeDom.Compiler.CompilerParameters> Aby określić różne opcje i ustawienia kompilatora. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.CodeDom.Compiler.CompilerParameters> klasy.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource" />
      </Docs>
    </Member>
    <Member MemberName="Evidence">
      <MemberSignature Language="C#" Value="public System.Security.Policy.Evidence Evidence { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.Evidence Evidence" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.Evidence" />
      <MemberSignature Language="VB.NET" Value="Public Property Evidence As Evidence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Policy::Evidence ^ Evidence { System::Security::Policy::Evidence ^ get(); void set(System::Security::Policy::Evidence ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Evidence : System.Security.Policy.Evidence with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.Evidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("CAS policy is obsolete and will be removed in a future release of the .NET Framework. Please see http://go2.microsoft.com/fwlink/?LinkId=131738 for more information.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa obiekt dowód, który reprezentuje uprawnienia zasad zabezpieczeń w celu przyznania skompilowanym zestawie.</summary>
        <value>Obiekt, który reprezentuje uprawnienia zasad zabezpieczeń w celu przyznania skompilowanym zestawie.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">możliwość dowodów kontroli. Wartość uprawnienia: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.Demand" /></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="GenerateExecutable">
      <MemberSignature Language="C#" Value="public bool GenerateExecutable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GenerateExecutable" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable" />
      <MemberSignature Language="VB.NET" Value="Public Property GenerateExecutable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GenerateExecutable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.GenerateExecutable : bool with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.GenerateExecutable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy generować pliku wykonywalnego.</summary>
        <value>
          <see langword="true" /> Jeśli musi zostać wygenerowany plik wykonywalny; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wartość tej właściwości jest `false`, zostanie wygenerowany biblioteki DLL. Domyślnie wartość tej właściwości jest `false`.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.CodeDom.Compiler.CompilerParameters> Aby określić różne opcje i ustawienia kompilatora. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.CodeDom.Compiler.CompilerParameters> klasy.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateInMemory">
      <MemberSignature Language="C#" Value="public bool GenerateInMemory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GenerateInMemory" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory" />
      <MemberSignature Language="VB.NET" Value="Public Property GenerateInMemory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GenerateInMemory { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.GenerateInMemory : bool with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.GenerateInMemory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy do generowania danych wyjściowych w pamięci.</summary>
        <value>
          <see langword="true" /> Jeśli kompilator powinien generować dane wyjściowe w pamięci. w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.CodeDom.Compiler.CompilerParameters> Aby określić różne opcje i ustawienia kompilatora. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.CodeDom.Compiler.CompilerParameters> klasy.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeDebugInformation">
      <MemberSignature Language="C#" Value="public bool IncludeDebugInformation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeDebugInformation" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeDebugInformation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeDebugInformation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeDebugInformation : bool with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy chcesz uwzględnić informacje o debugowaniu w skompilowany plik wykonywalny.</summary>
        <value>
          <see langword="true" /> Jeśli informacje dotyczące debugowania powinny być generowane; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkedResources">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringCollection LinkedResources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringCollection LinkedResources" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LinkedResources As StringCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringCollection ^ LinkedResources { System::Collections::Specialized::StringCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LinkedResources : System.Collections.Specialized.StringCollection" Usage="System.CodeDom.Compiler.CompilerParameters.LinkedResources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera pliki zasobów .NET Framework, które są określone w bieżącym źródle.</summary>
        <value>Kolekcja, która zawiera ścieżki do plików zasobów .NET Framework, które są przywoływane przez źródło.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pliki zasobów połączonych umożliwiają swoim zestawie odwoływać się do zasobów .NET Framework bez osadzania rzeczywistych zasobów w zestawie. Odwoływanie się do plików za pomocą tej właściwości jest podobny do `/linkresource` argument wiersza polecenia obsługiwane przez wiele kompilatorów .NET Framework.  
  
 Nie wszystkie kompilatory obsługuje pliki zasobów .NET Framework, więc należy przetestować obsługę przez wywołanie metody <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> metody z flagą <xref:System.CodeDom.Compiler.GeneratorSupport.Resources>.  
  
 Dodaj jeden lub więcej ścieżek plików zasobów .NET Framework do zwracanego <xref:System.Collections.Specialized.StringCollection> można utworzyć łącza do zasobów w skompilowanym zestawie. Dodawanie zduplikowany lub nieprawidłowy plik ścieżka wyników w błędach kompilacji; Upewnij się, że każdy ciąg Określa unikatową ścieżkę do prawidłowego pliku zasobów .NET Framework.  
  
 Użyj <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> odwołanie do zasobów .NET Framework w zestawach satelickich zlokalizowane dla danej kultury; użyj <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> właściwość Osadzanie zasobów w skompilowanym zestawie.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.CodeDom.Compiler.CompilerParameters> Aby określić różne opcje i ustawienia kompilatora. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.CodeDom.Compiler.CompilerParameters> klasy.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource" />
      </Docs>
    </Member>
    <Member MemberName="MainClass">
      <MemberSignature Language="C#" Value="public string MainClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MainClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.MainClass" />
      <MemberSignature Language="VB.NET" Value="Public Property MainClass As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MainClass { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MainClass : string with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.MainClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę klasy głównego.</summary>
        <value>Nazwa główna klasa.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Główna klasa zawiera punkt wejścia programu.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.CodeDom.Compiler.CompilerParameters> Aby określić różne opcje i ustawienia kompilatora. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.CodeDom.Compiler.CompilerParameters> klasy.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAssembly">
      <MemberSignature Language="C#" Value="public string OutputAssembly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OutputAssembly" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Property OutputAssembly As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OutputAssembly { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OutputAssembly : string with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.OutputAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę zestawu wyjściowego.</summary>
        <value>Nazwa zestawu wyjściowego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.CodeDom.Compiler.CompilerParameters> Aby określić różne opcje i ustawienia kompilatora. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.CodeDom.Compiler.CompilerParameters> klasy.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferencedAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringCollection ReferencedAssemblies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringCollection ReferencedAssemblies" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReferencedAssemblies As StringCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringCollection ^ ReferencedAssemblies { System::Collections::Specialized::StringCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReferencedAssemblies : System.Collections.Specialized.StringCollection" Usage="System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera zestawy przywoływane przez bieżący projekt.</summary>
        <value>Kolekcja, która zawiera nazwy zestawu, które są przywoływane przez źródło do skompilowania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kolekcji ciągów powinien składać się z lub zawierają zestawy przywoływane przez bieżący projekt. Dodaj nazwy plików zestawu do zwracanego <xref:System.Collections.Specialized.StringCollection> importować manifestu zestawu i odwoływać się do informacji o typie zestawu w bieżącym projekcie.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.CodeDom.Compiler.CompilerParameters> Aby określić różne opcje i ustawienia kompilatora. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.CodeDom.Compiler.CompilerParameters> klasy.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Specialized.StringCollection" />
      </Docs>
    </Member>
    <Member MemberName="TempFiles">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.TempFileCollection TempFiles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.TempFileCollection TempFiles" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.TempFiles" />
      <MemberSignature Language="VB.NET" Value="Public Property TempFiles As TempFileCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::TempFileCollection ^ TempFiles { System::CodeDom::Compiler::TempFileCollection ^ get(); void set(System::CodeDom::Compiler::TempFileCollection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TempFiles : System.CodeDom.Compiler.TempFileCollection with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.TempFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.TempFileCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kolekcję, która zawiera pliki tymczasowe.</summary>
        <value>Kolekcja, która zawiera pliki tymczasowe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pliki tymczasowe w kolekcji są przechowywane lub usuwane po zakończeniu działania kompilatora na podstawie wartości z <xref:System.CodeDom.Compiler.TempFileCollection.KeepFiles%2A> właściwości w kolekcji. <xref:System.CodeDom.Compiler.TempFileCollection.KeepFiles%2A> Właściwość jest ustawiona, jeśli kolekcja jest tworzona przy użyciu <xref:System.CodeDom.Compiler.TempFileCollection.%23ctor%28System.String%2CSystem.Boolean%29> konstruktora z `keepFiles` parametr `true`.  
  
> [!NOTE]
>  Ta klasa zawiera żądanie łącza i dziedziczenia na poziomie klasy stosowane do wszystkich składowych. Element <xref:System.Security.SecurityException> jest generowany, gdy bezpośredniego obiektu wywołującego lub Klasa pochodna nie mają uprawnień pełnego zaufania. Aby uzyskać szczegółowe informacje na temat wymaganych zabezpieczeń, zobacz [zapotrzebowania na łącza](~/docs/framework/misc/link-demands.md) i [Inheritancedemand](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9).  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.CodeDom.Compiler.CompilerParameters> Aby określić różne opcje i ustawienia kompilatora. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.CodeDom.Compiler.CompilerParameters> klasy.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez kod częściowo zaufany.</permission>
      </Docs>
    </Member>
    <Member MemberName="TreatWarningsAsErrors">
      <MemberSignature Language="C#" Value="public bool TreatWarningsAsErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TreatWarningsAsErrors" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property TreatWarningsAsErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TreatWarningsAsErrors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TreatWarningsAsErrors : bool with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ma być Traktuj ostrzeżenia jako błędy.</summary>
        <value>
          <see langword="true" /> Jeśli ostrzeżenia powinny być traktowane jako błędy; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.CodeDom.Compiler.CompilerParameters> Aby określić różne opcje i ustawienia kompilatora. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.CodeDom.Compiler.CompilerParameters> klasy.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserToken">
      <MemberSignature Language="C#" Value="public IntPtr UserToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int UserToken" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.UserToken" />
      <MemberSignature Language="VB.NET" Value="Public Property UserToken As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr UserToken { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.UserToken : nativeint with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.UserToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia token użytkownika do użycia podczas tworzenia procesu kompilatora.</summary>
        <value>Token użytkownika do użycia.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WarningLevel">
      <MemberSignature Language="C#" Value="public int WarningLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WarningLevel" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property WarningLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WarningLevel { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WarningLevel : int with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.WarningLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia poziom ostrzeżeń, w którym kompilator przerywa kompilację.</summary>
        <value>Poziom ostrzeżeń, w którym kompilator przerywa kompilację.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.CodeDom.Compiler.CompilerParameters> Aby określić różne opcje i ustawienia kompilatora. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.CodeDom.Compiler.CompilerParameters> klasy.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Win32Resource">
      <MemberSignature Language="C#" Value="public string Win32Resource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Win32Resource" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource" />
      <MemberSignature Language="VB.NET" Value="Public Property Win32Resource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Win32Resource { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Win32Resource : string with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.Win32Resource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę pliku w pliku zasobów Win32, aby połączyć w skompilowanym zestawie.</summary>
        <value>Plik zasobów Win32, które zostanie połączone w skompilowanym zestawie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Łączenie plików za pomocą tej właściwości jest podobny do `/winres` i `/winresource` argumenty wiersza polecenia obsługiwane przez wiele kompilatorów .NET Framework.  
  
 Użyj <xref:System.CodeDom.Compiler.CompilerParameters.Win32Resource%2A> skompilować plik zasobów Win32 w zestawie. Użyj <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> lub <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> skompilować z plikami zasobów .NET Framework.  
  
 Nie wszystkie kompilatory obsługuje pliki zasobów Win32, więc należy przetestować generator kodu dla tej obsługi przed połączeniem pliku zasobów przez wywołanie metody <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> metody z flagą <xref:System.CodeDom.Compiler.GeneratorSupport.Win32Resources>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources" />
      </Docs>
    </Member>
  </Members>
</Type>