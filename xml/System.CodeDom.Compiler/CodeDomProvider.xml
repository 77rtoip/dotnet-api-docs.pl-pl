<Type Name="CodeDomProvider" FullName="System.CodeDom.Compiler.CodeDomProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="76e1c10af9bc52b1c139e5e4706c9601f70ed474" />
    <Meta Name="ms.sourcegitcommit" Value="3507e865a3613c00760f25ad1045aaa11bae4dd8" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/23/2018" />
    <Meta Name="ms.locfileid" Value="31781355" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CodeDomProvider : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CodeDomProvider extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CodeDomProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeDomProvider&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeDomProvider abstract : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia klasę podstawową dla <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementacji. Ta klasa jest abstrakcyjna.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.CodeDom.Compiler.CodeDomProvider> może służyć do tworzenia i pobierania wystąpień generatory kodu i kompilatory kodu. Generatory kodu może służyć do generowania kodu w określonym języku, a kompilatory kodu może służyć do kompilowania kodu do zestawów.  
  
> [!NOTE]
>  W [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], metody udostępniona w generatora kodu i kompilatora kodu są dostępne bezpośrednio od dostawcy kodu. Nie należy wywołać <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> lub <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> dostępu do metody i te metody są oznaczone jako przestarzałe. Dotyczy to istniejące wcześniej, a także nowy implementacji dostawcy kodu.  
  
 A <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji zwykle zawiera kod, kodu lub generowania interfejsów kompilacji dla generowania kodu i zarządzanie nimi kompilacji dla jednego języka programowania. Wiele języków obsługiwanych przez <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji, które są dostarczane z [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]. Te języki C#, Visual Basic C++ i JScript. Deweloperzy lub dostawców kompilatora można zaimplementować <xref:System.CodeDom.Compiler.ICodeGenerator> i <xref:System.CodeDom.Compiler.ICodeCompiler> interfejsy i podaj <xref:System.CodeDom.Compiler.CodeDomProvider> który oferuje rozszerzone wsparcie CodeDOM dla innych języków programowania.  
  
 [ &lt;System.codedom&gt; elementu](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) w konfiguracji maszyny pliku (Machine.config) zapewnia mechanizm deweloperom i dostawcom kompilatora dodać ustawienia konfiguracji dla dodatkowych <xref:System.CodeDom.Compiler.CodeDomProvider>implementacji.  
  
 <xref:System.CodeDom.Compiler.CodeDomProvider> Klasa udostępnia metody statyczne do odnajdywania i wyliczyć <xref:System.CodeDom.Compiler.CodeDomProvider> implementacje na komputerze. <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> Metoda zwróci wartość ustawienia dla wszystkich <xref:System.CodeDom.Compiler.CodeDomProvider> implementacje na komputerze. <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> Metoda zwróci wartość ustawienia dla określonego <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji, w oparciu o nazwę języka programowania. <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> Metoda zwraca wystąpienie klasy <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji dla określonego języka.  
  
 Aby uzyskać więcej informacji na temat ustawień dostawcy języka w pliku konfiguracji, zobacz [schemat ustawień dostawcy języka i kompilatora](http://msdn.microsoft.com/library/c020b139-8699-4f0d-9ac9-70d0c5b2a8c8).  
  
> [!NOTE]
>  Ta klasa sprawia, że żądanie łącza i dziedziczenie żądanie na poziomie klasy. A <xref:System.Security.SecurityException> jest generowany, jeśli bezpośredniego obiektu wywołującego lub Klasa pochodna nie ma uprawnienia pełnego zaufania. Aby uzyskać szczegółowe informacje dotyczące żądania kontroli zabezpieczeń, zobacz [Linkdemand](~/docs/framework/misc/link-demands.md) i [Inheritancedemand](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9).  
  
   
  
## Examples  
 Następujący przykład program może Generowanie i kompilowanie kodu źródłowego, na podstawie programu, który wyświetla "Hello World" przy użyciu modelu CodeDOM <xref:System.Console> klasy. Podano interfejsu użytkownika formularzy systemu Windows. Użytkownik może wybrać docelowy język z kilku opcji programowania: C#, Visual Basic i JScript.  
  
 [!code-cpp[CodeDomExample#1](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#1)]
 [!code-csharp[CodeDomExample#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#1)]
 [!code-vb[CodeDomExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Nie można użyć tej klasy w kodzie częściowo zaufanym.</permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">aby uzyskać pełne zaufanie dla obiektów dziedziczących. Klasa ta nie może być dziedziczona przez kod częściowo zaufany.</permission>
    <block subset="none" type="overrides">
      <para>W wersji systemu .NET Framework 1.0 i 1.1 dostawców kodu składają się z implementacji <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />, <see cref="T:System.CodeDom.Compiler.ICodeParser" />, i <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />. W [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />, <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />, i <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> metody są nieaktualne oraz metody <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> i <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> są bezpośrednio dostępne w <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> klasy. Należy zastąpić tych metod w implementacji dostawcy kodu i nie mogą wywoływać metod bazowych.</para>
    </block>
    <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
    <altmember cref="T:Microsoft.CSharp.CSharpCodeProvider" />
    <altmember cref="T:Microsoft.VisualBasic.VBCodeProvider" />
    <altmember cref="T:Microsoft.JScript.JScriptCodeProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeDomProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeDomProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Nie można użyć tej klasy w kodzie częściowo zaufanym.</permission>
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromDom">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom (System.CodeDom.Compiler.CompilerParameters options, params System.CodeDom.CodeCompileUnit[] compilationUnits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom(class System.CodeDom.Compiler.CompilerParameters options, class System.CodeDom.CodeCompileUnit[] compilationUnits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromDom (options As CompilerParameters, ParamArray compilationUnits As CodeCompileUnit()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromDom(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::CodeDom::CodeCompileUnit ^&gt; ^ compilationUnits);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" />
        <Parameter Name="compilationUnits" Type="System.CodeDom.CodeCompileUnit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> obiekt, który wskazuje ustawienia kompilacji.</param>
        <param name="compilationUnits">Tablica typu <see cref="T:System.CodeDom.CodeCompileUnit" /> wskazujące kodu do kompilacji.</param>
        <summary>Kompiluje zestawu na podstawie <see cref="N:System.CodeDom" /> drzew zawartych w określonej tablicy <see cref="T:System.CodeDom.CodeCompileUnit" /> obiektów przy użyciu ustawienia określonego kompilatora.</summary>
        <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> obiekt, który wskazuje wyniki kompilacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W wersji systemu .NET Framework 1.0 i 1.1, ta metoda jest zapewniona przez <xref:System.CodeDom.Compiler.ICodeCompiler> wdrożenia, który jest zwracany przez <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> metodę dostawcy. W wersji 2.0 ta metoda może być wywoływana bezpośrednio na dostawcy kodu nawet wtedy, gdy nie jest on przesłaniany przez dostawcę kodu. Jeśli dostawca kodu nie przesłonić tę metodę <xref:System.CodeDom.Compiler.ICodeCompiler> implementacji jest wywoływana przez klasę podstawową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna metoda ta ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> metoda zostanie przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides">
          <para>Jeśli przesłonięcia tej metody należy wywołać nie odpowiedniej metody klasy podstawowej. Klasa podstawowa metoda tworzy generator w klasie pochodnej przy użyciu przestarzałe <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> metody dla zgodności z istniejących dostawców, które używają kompilatory kodu. Klasa podstawowa metoda wywołuje metodę odpowiednik <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> wykonania tej funkcji. Otrzymasz <see cref="T:System.NotImplementedException" /> od dostawcy kodu, który nie korzysta z kompilatora kodu można wywołać metody klasy podstawowej.</para>
        </block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromFile">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile (System.CodeDom.Compiler.CompilerParameters options, params string[] fileNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile(class System.CodeDom.Compiler.CompilerParameters options, string[] fileNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromFile (options As CompilerParameters, ParamArray fileNames As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromFile(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ fileNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" />
        <Parameter Name="fileNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> obiekt, który wskazuje ustawienia kompilacji.</param>
        <param name="fileNames">Tablica nazw plików do skompilowania.</param>
        <summary>Kompiluje zestawu z kodu źródłowego zawarte w określonych plików, za pomocą ustawienia określonego kompilatora.</summary>
        <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> obiekt, który wskazuje wyniki kompilacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W wersji systemu .NET Framework 1.0 i 1.1, ta metoda jest zapewniona przez <xref:System.CodeDom.Compiler.ICodeCompiler> wdrożenia, który jest zwracany przez <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> metodę dostawcy. W wersji 2.0 ta metoda może być wywoływana bezpośrednio na dostawcy kodu nawet wtedy, gdy nie jest on przesłaniany przez dostawcę kodu. Jeśli dostawca kodu nie przesłonić tę metodę <xref:System.CodeDom.Compiler.ICodeCompiler> implementacji jest wywoływana przez klasę podstawową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna metoda ta ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> metoda zostanie przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides">
          <para>Jeśli przesłonięcia tej metody należy wywołać nie odpowiedniej metody klasy podstawowej. Klasa podstawowa metoda tworzy generator w klasie pochodnej przy użyciu przestarzałe <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> metody dla zgodności z istniejących dostawców, które używają kompilatory kodu. Klasa podstawowa metoda wywołuje metodę odpowiednik <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> wykonania tej funkcji. Otrzymasz <see cref="T:System.NotImplementedException" /> od dostawcy kodu, który nie korzysta z kompilatora kodu można wywołać metody klasy podstawowej.</para>
        </block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromSource">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource (System.CodeDom.Compiler.CompilerParameters options, params string[] sources);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource(class System.CodeDom.Compiler.CompilerParameters options, string[] sources) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromSource (options As CompilerParameters, ParamArray sources As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromSource(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ sources);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" />
        <Parameter Name="sources" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> obiekt, który wskazuje Ustawienia kompilatora dla tej kompilacji.</param>
        <param name="sources">Tablica ciągów kodu źródłowego do skompilowania.</param>
        <summary>Kompiluje z określonej tablicy ciągi zawierające kod źródłowy, przy użyciu ustawienia kompilatora określonego zestawu.</summary>
        <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> obiekt, który wskazuje wyniki kompilacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W wersji systemu .NET Framework 1.0 i 1.1, ta metoda jest zapewniona przez <xref:System.CodeDom.Compiler.ICodeCompiler> wdrożenia, który jest zwracany przez <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> metodę dostawcy. W wersji 2.0 ta metoda może być wywoływana bezpośrednio na dostawcy kodu nawet wtedy, gdy nie jest on przesłaniany przez dostawcę kodu. Jeśli dostawca kodu nie przesłonić tę metodę <xref:System.CodeDom.Compiler.ICodeCompiler> implementacji jest wywoływana przez klasę podstawową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna metoda ta ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> metoda zostanie przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides">
          <para>Jeśli przesłonięcia tej metody należy wywołać nie odpowiedniej metody klasy podstawowej. Klasa podstawowa metoda tworzy generator w klasie pochodnej przy użyciu przestarzałe <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> metody dla zgodności z istniejących dostawców, które używają kompilatory kodu. Klasa podstawowa metoda wywołuje metodę odpowiednik <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> wykonania tej funkcji. Otrzymasz <see cref="T:System.NotImplementedException" /> od dostawcy kodu, który nie korzysta z kompilatora kodu można wywołać metody klasy podstawowej.</para>
        </block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CreateCompiler">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeCompiler CreateCompiler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeCompiler CreateCompiler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateCompiler () As ICodeCompiler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeCompiler ^ CreateCompiler();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ICodeCompiler is obsolete")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeCompiler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej tworzy nowy kompilator kodu.</summary>
        <returns>
          <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> Które mogą być używane dla kompilacji <see cref="N:System.CodeDom" /> na podstawie reprezentacji kodu źródłowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Zalecaną alternatywą jest wywołanie <xref:System.CodeDom.Compiler.ICodeCompiler> metod, które są bezpośrednio dostępne w dostawcy kodu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], należy zaimplementować <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> elementów członkowskich w <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> klasy i zgłosić <see cref="T:System.NotSupportedException" /> gdy ta metoda jest wywoływana.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateEscapedIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateEscapedIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateEscapedIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEscapedIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateEscapedIdentifier(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg, do których chcesz utworzyć identyfikatora o zmienionym znaczeniu.</param>
        <summary>Tworzy identyfikator o zmienionym znaczeniu dla określonej wartości.</summary>
        <returns>Identyfikator o zmienionym znaczeniu dla wartości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A> testy czy identyfikator powoduje konflikt ze wszystkimi zastrzeżone lub słowa kluczowe języka, a jeśli tak, zwraca takiej nazwie formatowania kodu ucieczki specyficzny dla języka. Jest to określane identyfikatora o zmienionym znaczeniu. Identyfikator o zmienionym znaczeniu zawiera takie same `value` , ale formatowanie kod wyjścia dodane do odróżnienia identyfikator ze słowem kluczowym. Dwa przykłady wdrożenia są poprzedzających `value` z "@" lub zestawianie `value` z "[" i "]".  
  
> [!NOTE]
>  W wersji systemu .NET Framework 1.0 i 1.1, ta metoda jest zapewniona przez <xref:System.CodeDom.Compiler.ICodeGenerator> wdrożenia, który jest zwracany przez <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> metodę dostawcy. W wersji 2.0 ta metoda może być wywoływana bezpośrednio na dostawcy kodu nawet wtedy, gdy nie jest on przesłaniany przez dostawcę kodu. Jeśli dostawca kodu nie przesłonić tę metodę <xref:System.CodeDom.Compiler.ICodeGenerator> implementacji jest wywoływana przez klasę podstawową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna metoda ta ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metoda zostanie przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides">
          <para>Jeśli przesłonięcia tej metody należy wywołać nie odpowiedniej metody klasy podstawowej. Klasa podstawowa metoda tworzy generator w klasie pochodnej przy użyciu przestarzałe <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody dla zgodności z istniejących dostawców, które używają generatory kodu. Klasa podstawowa metoda wywołuje metodę odpowiednik <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> wykonania tej funkcji. Otrzymasz <see cref="T:System.NotImplementedException" /> można wywołać metody klasy podstawowej od dostawcy kodu, który nie używa generatora kodu.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateGenerator">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej tworzy nowy generator kodu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeGenerator CreateGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateGenerator () As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ICodeGenerator is obsolete")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej tworzy nowy generator kodu.</summary>
        <returns>
          <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> Można wygenerować <see cref="N:System.CodeDom" /> na podstawie reprezentacji kodu źródłowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Zalecaną alternatywą jest wywołanie <xref:System.CodeDom.Compiler.ICodeGenerator> metod, które są bezpośrednio dostępne w <xref:System.CodeDom.Compiler.CodeDomProvider> klasy.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], należy zaimplementować <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> elementów członkowskich w <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> klasy i zgłosić <see cref="T:System.NotSupportedException" /> gdy ta metoda jest wywoływana.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (output As TextWriter) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="output">A <see cref="T:System.IO.TextWriter" /> służące do danych wyjściowych.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej tworzy nowy generator kodu przy użyciu określonego <see cref="T:System.IO.TextWriter" /> dla danych wyjściowych.</summary>
        <returns>
          <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> Można wygenerować <see cref="N:System.CodeDom" /> na podstawie reprezentacji kodu źródłowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda używa określonego <xref:System.IO.TextWriter> dla danych wyjściowych. Ta metoda obsługuje więcej zoptymalizowane generowanie kodu przyrostowo aktualizującym kodu źródłowego.  
  
> [!NOTE]
>  Klasa podstawowa implementacja wywołuje <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> metodę, która jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] i powoduje <xref:System.NotSupportedException> Jeśli <xref:System.CodeDom.Compiler.ICodeGenerator> obiektu nie są zwracane.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (fileName As String) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Nazwa pliku do wypełniania wyjściowego.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej tworzy nowy generator kodu przy użyciu określonej nazwy pliku dla danych wyjściowych.</summary>
        <returns>
          <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> Można wygenerować <see cref="N:System.CodeDom" /> na podstawie reprezentacji kodu źródłowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda używa określonej nazwy pliku dla danych wyjściowych.  
  
> [!NOTE]
>  Klasa podstawowa implementacja wywołuje <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> metodę, która jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] i powoduje <xref:System.NotSupportedException> Jeśli <xref:System.CodeDom.Compiler.ICodeGenerator> obiektu nie są zwracane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParser">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeParser CreateParser ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeParser CreateParser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateParser () As ICodeParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeParser ^ CreateParser();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ICodeParser is obsolete")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeParser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej tworzy nowy analizator kodu.</summary>
        <returns>
          <see cref="T:System.CodeDom.Compiler.ICodeParser" /> Można przeanalizować kodu źródłowego. Podstawowa implementacja zawsze zwraca <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateProvider">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> wystąpienia dla określonego języka.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">Nazwa języka.</param>
        <summary>Pobiera <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> wystąpienia dla określonego języka.</summary>
        <returns>Dostawcy CodeDOM, która jest zaimplementowana dla nazwy określonego języka.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Ta metoda jest najczęściej używane do utworzenia wystąpienia dostawcy kodu w aplikacji, która może opcjonalnie użyj jednej z wielu dostawców. <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> można określić w czasie wykonywania dostawcy kodu, który chcesz utworzyć wystąpienia. Jeśli znasz w czasie projektowania, które kodu dostawcy ma być używany, użytkownik powinien utworzyć wystąpienia dostawcy tego kodu zamiast używać <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> metody.  
  
 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> Metoda zwraca <xref:System.CodeDom.Compiler.CodeDomProvider> wystąpienie dla danego języka nazwy; jest podobna do wywoływania <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> metody z typem dostawcy języka. Użyj <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> Aby znaleźć dynamicznie implementacji skonfigurowanego dostawcy, jako nazwę języka.  
  
 Jeśli więcej niż jedna implementacja dostawcy jest skonfigurowany dla nazwy języka <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> zwraca wystąpienia dostawcy dla ostatniego pasującego elementu konfiguracji.  
  
 Użyj <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType> metoda przeładowania implementacji dostawcy określonego języka. Na przykład użyć <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> metodę, aby pobrać wystąpienia dostawcy, który obsługuje nazwy języka `"CSharp"`; użyj <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType> przeciążenie metody można pobrać wystąpienia dostawcy specjalnie z myślą o <xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType> implementacji. Należy używać [\], CultureInfo, obiekt\<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D% 2CSystem.Globalization.CultureInfo%2CSystem.Object%5b%5D%29?displayProperty=nameWithType > metodę, jeśli masz wiele dostawcy kodu dla języka i którymi chcesz utworzyć wystąpienia dostawcy określonego kodu.  
  
 <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> Metoda sprawdza, czy co najmniej jeden dostawca obsługuje określonego języka. Sprawdź poprawność nazwy języka przy użyciu <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> przed przekazaniem go do <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>. W przypadku przekazania nazwa nieobsługiwany język do <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> jest generowany.  
  
 <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> Metoda może służyć do określenia wszystkich <xref:System.CodeDom.Compiler.CodeDomProvider> implementacje na komputerze, włączając dodatkowe implementacje zapewniane przez deweloperów i kompilatora dostawców, którzy są objęci [ &lt;system.codedom &gt; Elementu](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) w pliku konfiguracji komputera (Machine.config).  
  
 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> Metoda zwraca wystąpienie klasy <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji dla określonego języka.  
  
 Język nazwy jest rozróżniana wielkość liter.  
  
   
  
## Examples  
 Poniższy przykład kodu Określa <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji dla języka i wyświetla skonfigurowane ustawienia dla dostawcy języka. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.CodeDom.Compiler.CompilerInfo> klasy.  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">
          <paramref name="language" /> Nie ma skonfigurowanego dostawcy na tym komputerze.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="language" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący nie posiada wymaganych uprawnień.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez kod częściowo zaufany.</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language, System.Collections.Generic.IDictionary&lt;string,string&gt; providerOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; providerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String, providerOptions As IDictionary(Of String, String)) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ providerOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
        <Parameter Name="providerOptions" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="language">Nazwa języka.</param>
        <param name="providerOptions">Kolekcja opcje dostawcy z pliku konfiguracji.</param>
        <summary>Pobiera <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> wystąpienia dla określonych opcji języka i dostawcy.</summary>
        <returns>Dostawcy CodeDOM implementowany nazwy określony język i opcje.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Ta metoda jest najczęściej używane do utworzenia wystąpienia dostawcy kodu w aplikacji, która może opcjonalnie użyj jednej z wielu dostawców. <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> można określić w czasie wykonywania za pośrednictwem dostawcy kodu, który chcesz utworzyć wystąpienia. Jeśli znasz w czasie projektowania, które kodu dostawcy ma być używany, należy utworzyć wystąpienia dostawcy tego kodu zamiast <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> metody.  
  
 Użyj <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> aby dynamicznie znaleźć implementacji skonfigurowanego dostawcy dla określonego języka i opcje. Język nazwy jest rozróżniana wielkość liter. Informacji o obsługiwanych dostawcy opcjach Zobacz szczegółowej dokumentacji dostawcy CodeDOM.  
  
 Uzyskać informacji o weryfikacji dostawcy i wywoływania dostawcy, jeśli więcej niż jedna implementacja dostawcy jest skonfigurowany dla nazwy języka, zobacz sekcję uwag <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29> metody.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak można utworzyć wystąpienia dostawcy przy użyciu `providerOptions` parametru.  
  
 [!code-csharp[CodeDomProvider.ProviderOptions#1](~/samples/snippets/csharp/VS_Snippets_CLR/codedomprovider.provideroptions/cs/program.cs#1)]
 [!code-vb[CodeDomProvider.ProviderOptions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/codedomprovider.provideroptions/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateValidIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateValidIdentifier(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg, do których chcesz wygenerować prawidłowym identyfikatorem.</param>
        <summary>Tworzy prawidłowy identyfikator dla określonej wartości.</summary>
        <returns>Nieprawidłowy identyfikator dla określonej wartości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A> sprawdza, czy identyfikator powoduje konflikt z zastrzeżonego lub słowa kluczowe języka, a jeśli tak, próbuje zwrócić prawidłowy identyfikator nazw, które nie powoduje konfliktu. Zazwyczaj zwrócony identyfikator tylko nieznacznie są modyfikowane w celu odróżnienia identyfikator od słowa kluczowego. na przykład nazwa może być poprzedzona znakiem podkreślenia ("_").  
  
> [!NOTE]
>  W wersji systemu .NET Framework 1.0 i 1.1, ta metoda jest zapewniona przez <xref:System.CodeDom.Compiler.ICodeGenerator> wdrożenia, który jest zwracany przez <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> metodę dostawcy. W wersji 2.0 ta metoda może być wywoływana bezpośrednio na dostawcy kodu nawet wtedy, gdy nie jest on przesłaniany przez dostawcę kodu. Jeśli dostawca kodu nie przesłonić tę metodę <xref:System.CodeDom.Compiler.ICodeGenerator> implementacji jest wywoływana przez klasę podstawową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna metoda ta ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metoda zostanie przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides">
          <para>Jeśli przesłonięcia tej metody należy wywołać nie odpowiedniej metody klasy podstawowej. Klasa podstawowa metoda tworzy generator w klasie pochodnej przy użyciu przestarzałe <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody dla zgodności z istniejących dostawców, które używają generatory kodu. Klasa podstawowa metoda wywołuje metodę odpowiednik <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> wykonania tej funkcji. Otrzymasz <see cref="T:System.NotImplementedException" /> można wywołać metody klasy podstawowej od dostawcy kodu, który nie używa generatora kodu.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FileExtension">
      <MemberSignature Language="C#" Value="public virtual string FileExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileExtension" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FileExtension As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FileExtension { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera domyślne rozszerzenie nazwy pliku do użycia na potrzeby plików kodu źródłowego w bieżącym języku.</summary>
        <value>Rozszerzenie nazwy pliku odpowiadający rozszerzenia plików źródłowych bieżącego języka. Podstawowa implementacja zawsze zwraca <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest używana przez generatory kodu i kompilatory kodu wskaż, jakie rozszerzenia plików powinny być generowane lub używane.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy wystąpienie <xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType>. W przykładzie przedstawiono nazwę dostawcy, skrót kodu i domyślne rozszerzenie nazwy pliku dla nowego wystąpienia dostawcy.  
  
 [!code-cpp[CodeDom_CompilerInfo#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#3)]
 [!code-csharp[CodeDom_CompilerInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#3)]
 [!code-vb[CodeDom_CompilerInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromCompileUnit">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromCompileUnit (System.CodeDom.CodeCompileUnit compileUnit, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromCompileUnit(class System.CodeDom.CodeCompileUnit compileUnit, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromCompileUnit (compileUnit As CodeCompileUnit, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromCompileUnit(System::CodeDom::CodeCompileUnit ^ compileUnit, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> do których chcesz wygenerować kod.</param>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> Jest wysłany kod wyjścia.</param>
        <param name="options">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> wskazujące opcje do użycia podczas generowania kodu.</param>
        <summary>Generuje kod dla określona jednostka kompilacji kodu Document Object Model (CodeDOM) i wysyła je w określonym składniku zapisywania tekstu, przy użyciu podanych opcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W wersji systemu .NET Framework 1.0 i 1.1, ta metoda jest zapewniona przez <xref:System.CodeDom.Compiler.ICodeGenerator> wdrożenia, który jest zwracany przez <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> metodę dostawcy. W wersji 2.0 ta metoda może być wywoływana bezpośrednio na dostawcy kodu nawet wtedy, gdy nie jest on przesłaniany przez dostawcę kodu. Jeśli dostawca kodu nie przesłonić tę metodę <xref:System.CodeDom.Compiler.ICodeGenerator> implementacji jest wywoływana przez klasę podstawową.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A> do generowania kodu dla aplikacji "Hello World" z <xref:System.CodeDom.CodeCompileUnit>. Ten przykład jest częścią większego przykładu udostępnionego dla <xref:System.CodeDom.Compiler.CodeDomProvider> klasy.  
  
 [!code-cpp[CodeDomExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#3)]
 [!code-vb[CodeDomExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna metoda ta ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metoda zostanie przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides">
          <para>Jeśli przesłonięcia tej metody należy wywołać nie odpowiedniej metody klasy podstawowej. Klasa podstawowa metoda tworzy generator w klasie pochodnej przy użyciu przestarzałe <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody dla zgodności z istniejących dostawców, które używają generatory kodu. Klasa podstawowa metoda wywołuje metodę odpowiednik <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> wykonania tej funkcji. Otrzymasz <see cref="T:System.NotImplementedException" /> można wywołać metody klasy podstawowej od dostawcy kodu, który nie używa generatora kodu.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromExpression">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromExpression (System.CodeDom.CodeExpression expression, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromExpression(class System.CodeDom.CodeExpression expression, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromExpression (expression As CodeExpression, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromExpression(System::CodeDom::CodeExpression ^ expression, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="expression">A <see cref="T:System.CodeDom.CodeExpression" /> obiekt, który określa wyrażenie, do których chcesz wygenerować kod.</param>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> Do których dane wyjściowe są wysyłane kodu.</param>
        <param name="options">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> wskazujące opcje do użycia podczas generowania kodu.</param>
        <summary>Generuje kod dla określonego wyrażenia kodu Document Object Model (CodeDOM) i wysyła je w określonym składniku zapisywania tekstu, przy użyciu podanych opcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W wersji systemu .NET Framework 1.0 i 1.1, ta metoda jest zapewniona przez <xref:System.CodeDom.Compiler.ICodeGenerator> wdrożenia, który jest zwracany przez <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> metodę dostawcy. W wersji 2.0 ta metoda może być wywoływana bezpośrednio na dostawcy kodu nawet wtedy, gdy nie jest on przesłaniany przez dostawcę kodu. Jeśli dostawca kodu nie przesłonić tę metodę <xref:System.CodeDom.Compiler.ICodeGenerator> implementacji jest wywoływana przez klasę podstawową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna metoda ta ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metoda zostanie przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides">
          <para>Jeśli przesłonięcia tej metody należy wywołać nie odpowiedniej metody klasy podstawowej. Klasa podstawowa metoda tworzy generator w klasie pochodnej przy użyciu przestarzałe <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody dla zgodności z istniejących dostawców, które używają generatory kodu. Klasa podstawowa metoda wywołuje metodę odpowiednik <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> wykonania tej funkcji. Otrzymasz <see cref="T:System.NotImplementedException" /> można wywołać metody klasy podstawowej od dostawcy kodu, który nie używa generatora kodu.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromMember">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromMember (System.CodeDom.CodeTypeMember member, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromMember(class System.CodeDom.CodeTypeMember member, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromMember (member As CodeTypeMember, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromMember(System::CodeDom::CodeTypeMember ^ member, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.CodeDom.CodeTypeMember" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="member">A <see cref="T:System.CodeDom.CodeTypeMember" /> obiekt, który wskazuje element członkowski, do których chcesz wygenerować kod.</param>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> Do których dane wyjściowe są wysyłane kodu.</param>
        <param name="options">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> wskazujące opcje do użycia podczas generowania kodu.</param>
        <summary>Generuje kod dla określonego deklaracji elementu członkowskiego kodu Document Object Model (CodeDOM) i wysyła je w określonym składniku zapisywania tekstu, przy użyciu podanych opcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa podstawowa implementacja zwraca <xref:System.NotImplementedException>. Zobacz <xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType> dokumentacji opisujące implementacja tej metody.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A> metody zaimplementowanego przez <xref:Microsoft.CSharp.CSharpCodeProvider> i <xref:Microsoft.VisualBasic.VBCodeProvider> klasy.  
  
 [!code-csharp[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/cs/program.cs#1)]
 [!code-vb[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Ta metoda nie zostanie przesłonięta w klasie pochodnej.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeMember" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromNamespace">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromNamespace (System.CodeDom.CodeNamespace codeNamespace, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromNamespace(class System.CodeDom.CodeNamespace codeNamespace, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromNamespace(System::CodeDom::CodeNamespace ^ codeNamespace, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> obiekt, który wskazuje przestrzeń nazw, do których chcesz wygenerować kod.</param>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> Do których dane wyjściowe są wysyłane kodu.</param>
        <param name="options">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> wskazujące opcje do użycia podczas generowania kodu.</param>
        <summary>Generuje kod dla określonego obszaru nazw kodu Document Object Model (CodeDOM) i wysyła je w określonym składniku zapisywania tekstu, przy użyciu podanych opcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W wersji systemu .NET Framework 1.0 i 1.1, ta metoda jest zapewniona przez <xref:System.CodeDom.Compiler.ICodeGenerator> wdrożenia, który jest zwracany przez <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> metodę dostawcy. W wersji 2.0 ta metoda może być wywoływana bezpośrednio na dostawcy kodu nawet wtedy, gdy nie jest on przesłaniany przez dostawcę kodu. Jeśli dostawca kodu nie przesłonić tę metodę <xref:System.CodeDom.Compiler.ICodeGenerator> implementacji jest wywoływana przez klasę podstawową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna metoda ta ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metoda zostanie przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides">
          <para>Jeśli przesłonięcia tej metody należy wywołać nie odpowiedniej metody klasy podstawowej. Klasa podstawowa metoda tworzy generator w klasie pochodnej przy użyciu przestarzałe <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody dla zgodności z istniejących dostawców, które używają generatory kodu. Klasa podstawowa metoda wywołuje metodę odpowiednik <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> wykonania tej funkcji. Otrzymasz <see cref="T:System.NotImplementedException" /> można wywołać metody klasy podstawowej od dostawcy kodu, który nie używa generatora kodu.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeNamespace" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromStatement">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromStatement (System.CodeDom.CodeStatement statement, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromStatement(class System.CodeDom.CodeStatement statement, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromStatement (statement As CodeStatement, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromStatement(System::CodeDom::CodeStatement ^ statement, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="statement">A <see cref="T:System.CodeDom.CodeStatement" /> zawierającej elementy CodeDOM, do których chcesz wygenerować kod.</param>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> Do których dane wyjściowe są wysyłane kodu.</param>
        <param name="options">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> wskazujące opcje do użycia podczas generowania kodu.</param>
        <summary>Generuje kod dla określonej instrukcji kodu Document Object Model (CodeDOM) i wysyła je w określonym składniku zapisywania tekstu, przy użyciu podanych opcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W wersji systemu .NET Framework 1.0 i 1.1, ta metoda jest zapewniona przez <xref:System.CodeDom.Compiler.ICodeGenerator> wdrożenia, który jest zwracany przez <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> metodę dostawcy. W wersji 2.0 ta metoda może być wywoływana bezpośrednio na dostawcy kodu nawet wtedy, gdy nie jest on przesłaniany przez dostawcę kodu. Jeśli dostawca kodu nie przesłonić tę metodę <xref:System.CodeDom.Compiler.ICodeGenerator> implementacji jest wywoływana przez klasę podstawową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna metoda ta ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metoda zostanie przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides">
          <para>Jeśli przesłonięcia tej metody należy wywołać nie odpowiedniej metody klasy podstawowej. Klasa podstawowa metoda tworzy generator w klasie pochodnej przy użyciu przestarzałe <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody dla zgodności z istniejących dostawców, które używają generatory kodu. Klasa podstawowa metoda wywołuje metodę odpowiednik <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> wykonania tej funkcji. Otrzymasz <see cref="T:System.NotImplementedException" /> można wywołać metody klasy podstawowej od dostawcy kodu, który nie używa generatora kodu.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeStatement" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromType">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromType (System.CodeDom.CodeTypeDeclaration codeType, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromType(class System.CodeDom.CodeTypeDeclaration codeType, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromType (codeType As CodeTypeDeclaration, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromType(System::CodeDom::CodeTypeDeclaration ^ codeType, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeType" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="codeType">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> obiekt, który wskazuje typ, do których chcesz wygenerować kod.</param>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> Do których dane wyjściowe są wysyłane kodu.</param>
        <param name="options">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> wskazujące opcje do użycia podczas generowania kodu.</param>
        <summary>Generuje kod dla określonego deklaracji typu kodu Document Object Model (CodeDOM) i wysyła je w określonym składniku zapisywania tekstu, przy użyciu podanych opcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W wersji systemu .NET Framework 1.0 i 1.1, ta metoda jest zapewniona przez <xref:System.CodeDom.Compiler.ICodeGenerator> wdrożenia, który jest zwracany przez <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> metodę dostawcy. W wersji 2.0 ta metoda może być wywoływana bezpośrednio na dostawcy kodu nawet wtedy, gdy nie jest on przesłaniany przez dostawcę kodu. Jeśli dostawca kodu nie przesłonić tę metodę <xref:System.CodeDom.Compiler.ICodeGenerator> implementacji jest wywoływana przez klasę podstawową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna metoda ta ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metoda zostanie przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides">
          <para>Jeśli przesłonięcia tej metody należy wywołać nie odpowiedniej metody klasy podstawowej. Klasa podstawowa metoda tworzy generator w klasie pochodnej przy użyciu przestarzałe <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody dla zgodności z istniejących dostawców, które używają generatory kodu. Klasa podstawowa metoda wywołuje metodę odpowiednik <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> wykonania tej funkcji. Otrzymasz <see cref="T:System.NotImplementedException" /> można wywołać metody klasy podstawowej od dostawcy kodu, który nie używa generatora kodu.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetAllCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllCompilerInfo () As CompilerInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::CodeDom::Compiler::CompilerInfo ^&gt; ^ GetAllCompilerInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca język ustawienia konfiguracji dostawcy i kompilatora dla tego komputera.</summary>
        <returns>Tablica typu <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> reprezentujący wszystkie skonfigurowane ustawienia <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> — metoda wyliczania ustawienia dostawcy języka na komputerze.  
  
> [!NOTE]
>  W [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], języka domyślnych dostawców dostarczanych przez program .NET Framework nie są określone w [ &lt;system.codedom&gt; elementu](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) konfiguracji kompilatora sekcji i nie można usunąć, dlatego ta Metoda zwraca informacje o domyślnych dostawców i wszystkie określone w pliku konfiguracji.  
  
   
  
## Examples  
 Poniższy przykład kodu wylicza dostawcy języka na komputerze i wyświetla ustawienia konfiguracji i kompilatora dla każdego dostawcy języka. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.CodeDom.Compiler.CompilerInfo> klasy.  
  
 [!code-cpp[CodeDom_CompilerInfo#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#8)]
 [!code-csharp[CodeDom_CompilerInfo#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#8)]
 [!code-vb[CodeDom_CompilerInfo#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący nie posiada wymaganych uprawnień.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez kod częściowo zaufany.</permission>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo GetCompilerInfo (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo GetCompilerInfo(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompilerInfo (language As String) As CompilerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerInfo ^ GetCompilerInfo(System::String ^ language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">Nazwa języka.</param>
        <summary>Zwraca język dostawcy i kompilatora ustawienia konfiguracji dla określonego języka.</summary>
        <returns>A <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> obiektu wypełniane przy użyciu ustawienia skonfigurowanego <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [ &lt;System.codedom&gt; elementu](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) w konfiguracji maszyny plik zawiera języka dostawcy i kompilatora ustawienia konfiguracji dla każdego <xref:System.CodeDom.Compiler.CodeDomProvider> wdrożenia na komputerze. Informacje o plikach konfiguracji komputera, zobacz sekcję plików konfiguracji maszyny w [konfigurowania aplikacji](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f). <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> Metoda szuka każdego elementu konfiguracji dostawcy dla nazwy określonego języka. Zwrócona <xref:System.CodeDom.Compiler.CompilerInfo> wystąpienie zawiera ustawienia dostawcy i kompilatora języka skonfigurowany.  
  
 <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> Metoda sprawdza, czy co najmniej jeden dostawca obsługuje określonego języka. Sprawdź poprawność nazwy języka przy użyciu <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> przed przekazaniem go do <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>. Zapobiega to zgłaszanie <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> podczas uzyskiwania dostępu <xref:System.CodeDom.Compiler.CompilerInfo> wystąpienia dla nazwy nieobsługiwany język.  
  
 Jeśli więcej niż jedna implementacja dostawcy jest skonfigurowany dla nazwy języka <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> zwraca ustawienia z ostatniego dostawcę pasującego elementu konfiguracji.  
  
 Język nazwy jest rozróżniana wielkość liter.  
  
   
  
## Examples  
 Poniższy przykład kodu Określa <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji dla języka i wyświetla skonfigurowane ustawienia dla dostawcy języka. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.CodeDom.Compiler.CompilerInfo> klasy.  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException">
          <paramref name="language" /> Nie ma skonfigurowanego dostawcy na tym komputerze.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">
          <paramref name="language" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący nie posiada wymaganych uprawnień.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez kod częściowo zaufany.</permission>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetConverter">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.TypeConverter GetConverter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.TypeConverter GetConverter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::TypeConverter ^ GetConverter(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Typ obiektu do pobrania dla konwertera typu.</param>
        <summary>Pobiera <see cref="T:System.ComponentModel.TypeConverter" /> dla określonego typu danych.</summary>
        <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> dla określonego typu lub <see langword="null" /> Jeśli <see cref="T:System.ComponentModel.TypeConverter" /> dla nie można odnaleźć określonego typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy pochodne mogą przesłaniać tę metodę zapewnienie określonych rodzajów typy konwerterów dla określonych typów danych.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeConverter" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguageFromExtension">
      <MemberSignature Language="C#" Value="public static string GetLanguageFromExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetLanguageFromExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguageFromExtension (extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetLanguageFromExtension(System::String ^ extension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extension">Rozszerzenie nazwy pliku.</param>
        <summary>Zwraca nazwę języka skojarzone z rozszerzeniem nazwy pliku, zgodnie z konfiguracją <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> kompilatora sekcji konfiguracji.</summary>
        <returns>Nazwa języka, skojarzone z rozszerzeniem nazwy pliku, zgodnie z konfiguracją <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> Ustawienia kompilatora konfiguracji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [ &lt;System.codedom&gt; elementu](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) w konfiguracji maszyny pliku (Machine.config) zawiera języka dostawcy i kompilatora ustawienia konfiguracji dla każdego <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji na poziomie komputer. <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> Metoda szuka każdego elementu konfiguracji dla określonego rozszerzenia nazwy pliku.  
  
 <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> Metoda sprawdza, czy co najmniej jeden dostawca obsługuje konkretnego rozszerzenia nazwy pliku. Sprawdź poprawność using rozszerzenie nazwy pliku <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> przed przekazaniem go do <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>. Zapobiega to <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> z zgłaszanie <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> nieobsługiwane rozszerzenie.  
  
 Jeśli rozszerzenie nazwy pliku wejściowego obsługuje implementacji dostawcy i wielu języków skonfigurowanych dla tego dostawcy, następnie <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> zwraca nazwę języka pierwszy dla tego dostawcy. Jeśli więcej niż jedna implementacja dostawcy jest skonfigurowany dla danego rozszerzenia nazwy pliku wejściowego <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> zwraca nazwę języka z ostatniego dostawcę pasującego elementu konfiguracji.  
  
 Język nazwy i rozszerzenia nazw plików jest rozróżniana wielkość liter.  
  
   
  
## Examples  
 Poniższy przykład kodu Określa <xref:System.CodeDom.Compiler.CodeDomProvider> wykonania na rozszerzenie nazwy pliku wejściowego i wyświetla skonfigurowane ustawienia dla dostawcy języka. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.CodeDom.Compiler.CompilerInfo> klasy.  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException">
          <paramref name="extension" /> Nie ma dostawcy języka skonfigurowanych na tym komputerze.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">
          <paramref name="extension" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący nie posiada wymaganych uprawnień.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez kod częściowo zaufany.</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeOutput">
      <MemberSignature Language="C#" Value="public virtual string GetTypeOutput (System.CodeDom.CodeTypeReference type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetTypeOutput(class System.CodeDom.CodeTypeReference type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeOutput (type As CodeTypeReference) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetTypeOutput(System::CodeDom::CodeTypeReference ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.CodeDom.CodeTypeReference" />
      </Parameters>
      <Docs>
        <param name="type">A <see cref="T:System.CodeDom.CodeTypeReference" /> wskazujące typ do zwrócenia.</param>
        <summary>Pobiera typ wskazuje określony <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
        <returns>Sformatowany tekst reprezentację określonego typu dla języka, w którym kod jest generowany przez tego generatora kodu. W języku Visual Basic, na przykład, przekazując <see cref="T:System.CodeDom.CodeTypeReference" /> dla <see cref="T:System.Int32" /> zwraca typ "Int".</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W wersji systemu .NET Framework 1.0 i 1.1, ta metoda jest zapewniona przez <xref:System.CodeDom.Compiler.ICodeGenerator> wdrożenia, który jest zwracany przez <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> metodę dostawcy. W wersji 2.0 ta metoda może być wywoływana bezpośrednio na dostawcy kodu nawet wtedy, gdy nie jest on przesłaniany przez dostawcę kodu. Jeśli dostawca kodu nie przesłonić tę metodę <xref:System.CodeDom.Compiler.ICodeGenerator> implementacji jest wywoływana przez klasę podstawową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna metoda ta ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metoda zostanie przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides">
          <para>Jeśli przesłonięcia tej metody należy wywołać nie odpowiedniej metody klasy podstawowej. Klasa podstawowa metoda tworzy generator w klasie pochodnej przy użyciu przestarzałe <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody dla zgodności z istniejących dostawców, które używają generatory kodu. Klasa podstawowa metoda wywołuje metodę odpowiednik <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> wykonania tej funkcji. Otrzymasz <see cref="T:System.NotImplementedException" /> można wywołać metody klasy podstawowej od dostawcy kodu, który nie używa generatora kodu.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedExtension">
      <MemberSignature Language="C#" Value="public static bool IsDefinedExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedExtension (extension As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedExtension(System::String ^ extension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extension">Rozszerzenie nazwy pliku.</param>
        <summary>Sprawdza, czy rozszerzenie nazwy pliku ma skojarzoną <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementacji skonfigurowanych na komputerze.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementacja jest skonfigurowana dla określonego rozszerzenia nazwy pliku, a w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [ &lt;System.codedom&gt; elementu](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) w konfiguracji maszyny pliku (Machine.config) zawiera języka dostawcy i kompilatora ustawienia konfiguracji dla każdego <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji na poziomie komputer. <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> Metody przeszukuje elementy konfiguracji dostawcy dla określonego rozszerzenia nazwy pliku.  
  
 Rozszerzenia nazw plików jest rozróżniana wielkość liter.  
  
   
  
## Examples  
 Poniższy przykład kodu Określa <xref:System.CodeDom.Compiler.CodeDomProvider> wykonania na rozszerzenie nazwy pliku wejściowego i wyświetla skonfigurowane ustawienia dla dostawcy języka. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.CodeDom.Compiler.CompilerInfo> klasy.  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extension" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący nie posiada wymaganych uprawnień.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez kod częściowo zaufany.</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefinedLanguage">
      <MemberSignature Language="C#" Value="public static bool IsDefinedLanguage (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedLanguage(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedLanguage (language As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedLanguage(System::String ^ language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">Nazwa języka.</param>
        <summary>Sprawdza, czy język ma <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementacji skonfigurowanych na komputerze.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementacja jest skonfigurowana dla określonego języka; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [ &lt;System.codedom&gt; elementu](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) w konfiguracji maszyny pliku (Machine.config) zawiera języka dostawcy i kompilatora ustawienia konfiguracji dla każdego <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji na poziomie komputer. <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> Metody przeszukuje elementy konfiguracji dostawcy dla nazwy określonego języka.  
  
 Język nazwy jest rozróżniana wielkość liter.  
  
   
  
## Examples  
 Poniższy przykład kodu Określa <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji dla języka i wyświetla skonfigurowane ustawienia dla dostawcy języka. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.CodeDom.Compiler.CompilerInfo> klasy.  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="language" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący nie posiada wymaganych uprawnień.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez kod częściowo zaufany.</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual bool IsValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidIdentifier (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidIdentifier(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Wartość, aby sprawdzić jako prawidłowy identyfikator.</param>
        <summary>Zwraca wartość wskazującą, czy określona wartość jest nieprawidłowym identyfikatorem dla bieżącego języka.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> parametr jest prawidłowy identyfikator; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda sprawdza, czy identyfikator jest nieprawidłowy. <xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A> Metoda jest właściwe dla dostawcy. Identyfikatory, które są prawidłowe dla jednego dostawcę może nie być prawidłowe dla innych dostawców. Jeśli `value` zawiera znaki spoza zakresu znaków ASCII, Sprawdź identyfikator dla wszystkich języków, które mogą być wykorzystane do skompilować kod.  
  
> [!NOTE]
>  W wersji systemu .NET Framework 1.0 i 1.1, ta metoda jest zapewniona przez <xref:System.CodeDom.Compiler.ICodeGenerator> wdrożenia, który jest zwracany przez <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> metodę dostawcy. W wersji 2.0 ta metoda może być wywoływana bezpośrednio na dostawcy kodu nawet wtedy, gdy nie jest on przesłaniany przez dostawcę kodu. Jeśli dostawca kodu nie przesłonić tę metodę <xref:System.CodeDom.Compiler.ICodeGenerator> implementacji jest wywoływana przez klasę podstawową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna metoda ta ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metoda zostanie przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /> w klasie pochodnej projektowania metodę, aby zwrócić <see langword="true" /> tylko wtedy, gdy wartość pasuje do reguły języka i nie powoduje konflikt ze słowem kluczowym.  
  
 Jeśli przesłonięcia tej metody należy wywołać nie odpowiedniej metody klasy podstawowej. Klasa podstawowa metoda tworzy generator w klasie pochodnej przy użyciu przestarzałe <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody dla zgodności z istniejących dostawców, które używają generatory kodu. Klasa podstawowa metoda wywołuje metodę odpowiednik <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> wykonania tej funkcji. Otrzymasz <see cref="T:System.NotImplementedException" /> można wywołać metody klasy podstawowej od dostawcy kodu, który nie używa generatora kodu.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LanguageOptions">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.LanguageOptions LanguageOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.CodeDom.Compiler.LanguageOptions LanguageOptions" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LanguageOptions As LanguageOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::CodeDom::Compiler::LanguageOptions LanguageOptions { System::CodeDom::Compiler::LanguageOptions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.LanguageOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator funkcji języka.</summary>
        <value>A <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> wskazujące specjalnych funkcji języka.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeCompileUnit Parse (System.IO.TextReader codeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeCompileUnit Parse(class System.IO.TextReader codeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Parse (codeStream As TextReader) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeCompileUnit ^ Parse(System::IO::TextReader ^ codeStream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeStream" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="codeStream">A <see cref="T:System.IO.TextReader" /> obiekt, który jest używany do odczytu kodu do przeanalizowania.</param>
        <summary>Kompiluje kod czytać ze strumienia określonego tekstu w <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeCompileUnit" /> zawierający reprezentację przeanalizowany kodu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W wersji systemu .NET Framework 1.0 i 1.1, ta metoda jest zapewniona przez <xref:System.CodeDom.Compiler.ICodeParser> wdrożenia, który jest zwracany przez <xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A> metodę dostawcy. W wersji 2.0 ta metoda może być wywoływana bezpośrednio na dostawcy kodu nawet wtedy, gdy nie jest on przesłaniany przez dostawcę kodu. Jeśli dostawca kodu nie przesłonić tę metodę <xref:System.CodeDom.Compiler.ICodeParser> implementacji jest wywoływana przez klasę podstawową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna metoda ta ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metoda zostanie przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides">
          <para>Jeśli przesłonięcia tej metody należy wywołać nie odpowiedniej metody klasy podstawowej. Klasa podstawowa metoda tworzy analizator w klasie pochodnej przy użyciu przestarzałe <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /> metody dla zgodności z istniejących usługodawców analizatory składni kodu. Klasa podstawowa metoda wywołuje metodę odpowiednik <see cref="T:System.CodeDom.Compiler.ICodeParser" /> wykonania tej funkcji. Otrzymasz <see cref="T:System.NotImplementedException" /> od dostawcy kodu, który nie używa analizator kodu można wywołać metody klasy podstawowej.</para>
        </block>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.IO.TextReader" />
      </Docs>
    </Member>
    <Member MemberName="Supports">
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport generatorSupport);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport generatorSupport) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport generatorSupport);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport supports) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)" FrameworkAlternate="xamarinmac-3.0;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Supports (supports As GeneratorSupport) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generatorSupport" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="supports" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generatorSupport">To be added.</param>
        <param name="supports">To be added.</param>
        <summary>Zwraca wartość wskazującą, czy obsługują generowanie kodu określonego podano.</summary>
        <returns>
          <see langword="true" /> Jeśli obsługują generowanie kodu określonego podano; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może być wywołana z liczbą <xref:System.CodeDom.Compiler.GeneratorSupport> flagi jednocześnie w celu zbadania zestaw funkcji, dołączając zestaw flag odpowiednia możliwość wraz z pliku binarnego `OR` — operator (&#124;).  
  
> [!NOTE]
>  W wersji systemu .NET Framework 1.0 i 1.1, ta metoda jest zapewniona przez <xref:System.CodeDom.Compiler.ICodeGenerator> wdrożenia, który jest zwracany przez <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> metodę dostawcy. W wersji 2.0 ta metoda może być wywoływana bezpośrednio na dostawcy kodu nawet wtedy, gdy nie jest on przesłaniany przez dostawcę kodu. Jeśli dostawca kodu nie przesłonić tę metodę <xref:System.CodeDom.Compiler.ICodeGenerator> implementacji jest wywoływana przez klasę podstawową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna metoda ta ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metoda zostanie przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides">
          <para>Jeśli przesłonięcia tej metody należy wywołać nie odpowiedniej metody klasy podstawowej. Klasa podstawowa metoda tworzy generator w klasie pochodnej przy użyciu przestarzałe <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody dla zgodności z istniejących dostawców, które używają generatory kodu. Klasa podstawowa metoda wywołuje metodę odpowiednik <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> wykonania tej funkcji. Otrzymasz <see cref="T:System.NotImplementedException" /> można wywołać metody klasy podstawowej od dostawcy kodu, który nie używa generatora kodu.</para>
        </block>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
      </Docs>
    </Member>
  </Members>
</Type>