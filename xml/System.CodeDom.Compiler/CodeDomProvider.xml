<Type Name="CodeDomProvider" FullName="System.CodeDom.Compiler.CodeDomProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="49dbf9fc3e3c148aaedf969701a304cffd34c946" /><Meta Name="ms.sourcegitcommit" Value="81833381d2d0b5a8c55f71b43f00769fd38298af" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/17/2019" /><Meta Name="ms.locfileid" Value="69568455" /></Metadata><TypeSignature Language="C#" Value="public abstract class CodeDomProvider : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CodeDomProvider extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CodeDomProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeDomProvider&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeDomProvider abstract : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type CodeDomProvider = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia klasę bazową dla <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementacji. Ta klasa jest abstrakcyjna.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.CodeDom.Compiler.CodeDomProvider> może służyć do tworzenia i pobierania wystąpień generatorów kodu i kompilatorów kodu. Generatory kodu mogą służyć do generowania kodu w określonym języku, a kompilatory kodu mogą służyć do kompilowania kodu do zestawów.  
  
> [!NOTE]
>  [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]W programie metody udostępniane w generatorze kodu i kompilatorze kodu są dostępne bezpośrednio od dostawcy kodu. Nie ma potrzeby wywoływania <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> lub <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> uzyskiwania dostępu do metod, a te metody są oznaczone jako przestarzałe. Dotyczy to zarówno istniejących, jak i nowych implementacji dostawców kodu.  
  
 <xref:System.CodeDom.Compiler.CodeDomProvider> Implementacja zazwyczaj oferuje interfejsy generowania kodu i/lub kompilowania kodu do generowania kodu i zarządzania kompilacją dla jednego języka programowania. Niektóre języki są obsługiwane przez <xref:System.CodeDom.Compiler.CodeDomProvider> implementacje, które są [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]dostarczane z. Te języki obejmują C#, Visual Basic, C++i JScript. Deweloperzy lub dostawcy kompilatora mogą zaimplementować <xref:System.CodeDom.Compiler.ICodeGenerator> interfejsy i <xref:System.CodeDom.Compiler.ICodeCompiler> i zapewnić <xref:System.CodeDom.Compiler.CodeDomProvider> obsługę rozszerzania CodeDOM do innych języków programowania.  
  
 [Element System. CodeDom&gt; w pliku konfiguracji komputera (Machine. config) zawiera mechanizm dla deweloperów i dostawców kompilatora, aby dodać ustawienia konfiguracji dla dodatkowych implementacji. &lt;](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) <xref:System.CodeDom.Compiler.CodeDomProvider>  
  
 Klasa zawiera metody statyczne do odnajdywania i <xref:System.CodeDom.Compiler.CodeDomProvider> wyliczania implementacji na komputerze. <xref:System.CodeDom.Compiler.CodeDomProvider> Metoda zwraca ustawienia dla wszystkich <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji na komputerze. <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> Metoda zwraca ustawienia dla konkretnej <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji, na podstawie nazwy języka programowania. <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> Metoda zwraca wystąpienie <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji dla określonego języka. <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>  
  
 Aby uzyskać więcej informacji na temat ustawień dostawcy języka w pliku konfiguracji, zobacz [Schemat ustawień kompilatora i dostawcy języka](~/docs/framework/configure-apps/file-schema/compiler/index.md).  
  
> [!NOTE]
>  Ta klasa wykonuje żądanie linku i żądanie dziedziczenia na poziomie klasy. Występuje <xref:System.Security.SecurityException> , jeśli bezpośredni obiekt wywołujący lub Klasa pochodna nie ma uprawnienia pełnego zaufania. Aby uzyskać szczegółowe informacje o wymaganiach dotyczących zabezpieczeń, zobacz Wymagania dotyczące [powiązań](~/docs/framework/misc/link-demands.md) i [wymagania](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100))dotyczące dziedziczenia.  
  
   
  
## Examples  
 Poniższy przykładowy program może generować i kompilować kod źródłowy na podstawie modelu CodeDOM programu, który drukuje "Hello World" przy użyciu <xref:System.Console> klasy. Podano interfejs użytkownika Windows Forms. Użytkownik może wybrać docelowy język programowania z kilku opcji: C#, Visual Basic i JScript.  
  
 [!code-cpp[CodeDomExample#1](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#1)]
 [!code-csharp[CodeDomExample#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#1)]
 [!code-vb[CodeDomExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Nie można użyć tej klasy w kodzie częściowo zaufanym.</permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">aby uzyskać pełne zaufanie dla obiektów dziedziczących. Klasa ta nie może być dziedziczona przez kod częściowo zaufany.</permission>
    <block subset="none" type="overrides"><para>W .NET Framework wersje 1,0 i 1,1 dostawcy kodu składają się z <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />implementacji, <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />, <see cref="T:System.CodeDom.Compiler.ICodeParser" />, i <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />. <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> W ,metody<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> , isą<see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> przestarzałe, a metody i są bezpośrednio dostępne w klasie. <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /> <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] Należy zastąpić te metody w implementacji dostawcy kodu i nie wywoływać metod podstawowych.</para></block>
    <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
    <altmember cref="T:Microsoft.CSharp.CSharpCodeProvider" />
    <altmember cref="T:Microsoft.VisualBasic.VBCodeProvider" />
    <altmember cref="T:Microsoft.JScript.JScriptCodeProvider" />
    <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schemat ustawień kompilatora i dostawcy języka</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeDomProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeDomProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Nie można użyć tej klasy w kodzie częściowo zaufanym.</permission>
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromDom">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom (System.CodeDom.Compiler.CompilerParameters options, params System.CodeDom.CodeCompileUnit[] compilationUnits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom(class System.CodeDom.Compiler.CompilerParameters options, class System.CodeDom.CodeCompileUnit[] compilationUnits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromDom (options As CompilerParameters, ParamArray compilationUnits As CodeCompileUnit()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromDom(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::CodeDom::CodeCompileUnit ^&gt; ^ compilationUnits);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromDom : System.CodeDom.Compiler.CompilerParameters * System.CodeDom.CodeCompileUnit[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromDom : System.CodeDom.Compiler.CompilerParameters * System.CodeDom.CodeCompileUnit[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromDom (options, compilationUnits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="compilationUnits" Type="System.CodeDom.CodeCompileUnit[]" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options"><see cref="T:System.CodeDom.Compiler.CompilerParameters" /> Obiekt, który wskazuje ustawienia dla kompilacji.</param>
        <param name="compilationUnits">Tablica typu <see cref="T:System.CodeDom.CodeCompileUnit" /> , która wskazuje kod do skompilowania.</param>
        <summary>Kompiluje zestaw na podstawie <see cref="N:System.CodeDom" /> drzew zawartych w określonej <see cref="T:System.CodeDom.CodeCompileUnit" /> tablicy obiektów przy użyciu określonych ustawień kompilatora.</summary>
        <returns><see cref="T:System.CodeDom.Compiler.CompilerResults" /> Obiekt, który wskazuje wyniki kompilacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W .NET Framework wersje 1,0 i 1,1 Ta metoda jest zapewniana przez <xref:System.CodeDom.Compiler.ICodeCompiler> implementację, która jest zwracana <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> przez metodę dostawcy. W wersji 2,0 tę metodę można wywołać bezpośrednio dla dostawcy kodu, nawet jeśli nie został on zastąpiony przez dostawcę kodu. Jeśli dostawca kodu nie przesłania tej metody, <xref:System.CodeDom.Compiler.ICodeCompiler> implementacja jest wywoływana przez klasę bazową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna z tych metod ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> Metoda nie została przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides"><para>W przypadku zastąpienia tej metody nie należy wywoływać odpowiedniej metody klasy bazowej. Metoda klasy bazowej tworzy generator w klasie pochodnej przy użyciu przestarzałej <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> metody w celu zapewnienia zgodności z istniejącymi dostawcami, którzy używają kompilatorów kodu. Metoda klasy bazowej następnie wywołuje równoważną metodę w <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementacji, aby wykonać tę funkcję. <see cref="T:System.NotImplementedException" /> Otrzymasz wywołanie metody klasy bazowej od dostawcy kodu, który nie używa kompilatora kodu.</para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromFile">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile (System.CodeDom.Compiler.CompilerParameters options, params string[] fileNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile(class System.CodeDom.Compiler.CompilerParameters options, string[] fileNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromFile (options As CompilerParameters, ParamArray fileNames As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromFile(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ fileNames);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromFile : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromFile : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromFile (options, fileNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="fileNames" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options"><see cref="T:System.CodeDom.Compiler.CompilerParameters" /> Obiekt, który wskazuje ustawienia dla kompilacji.</param>
        <param name="fileNames">Tablica nazw plików do skompilowania.</param>
        <summary>Kompiluje zestaw z kodu źródłowego zawartego w określonych plikach przy użyciu określonych ustawień kompilatora.</summary>
        <returns><see cref="T:System.CodeDom.Compiler.CompilerResults" /> Obiekt, który wskazuje wyniki kompilacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W .NET Framework wersje 1,0 i 1,1 Ta metoda jest zapewniana przez <xref:System.CodeDom.Compiler.ICodeCompiler> implementację, która jest zwracana <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> przez metodę dostawcy. W wersji 2,0 tę metodę można wywołać bezpośrednio dla dostawcy kodu, nawet jeśli nie został on zastąpiony przez dostawcę kodu. Jeśli dostawca kodu nie przesłania tej metody, <xref:System.CodeDom.Compiler.ICodeCompiler> implementacja jest wywoływana przez klasę bazową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna z tych metod ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> Metoda nie została przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides"><para>W przypadku zastąpienia tej metody nie należy wywoływać odpowiedniej metody klasy bazowej. Metoda klasy bazowej tworzy generator w klasie pochodnej przy użyciu przestarzałej <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> metody w celu zapewnienia zgodności z istniejącymi dostawcami, którzy używają kompilatorów kodu. Metoda klasy bazowej następnie wywołuje równoważną metodę w <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementacji, aby wykonać tę funkcję. <see cref="T:System.NotImplementedException" /> Otrzymasz wywołanie metody klasy bazowej od dostawcy kodu, który nie używa kompilatora kodu.</para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromSource">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource (System.CodeDom.Compiler.CompilerParameters options, params string[] sources);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource(class System.CodeDom.Compiler.CompilerParameters options, string[] sources) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromSource (options As CompilerParameters, ParamArray sources As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromSource(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ sources);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromSource : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromSource : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromSource (options, sources)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="sources" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options"><see cref="T:System.CodeDom.Compiler.CompilerParameters" /> Obiekt, który wskazuje ustawienia kompilatora dla tej kompilacji.</param>
        <param name="sources">Tablica ciągów kodu źródłowego do skompilowania.</param>
        <summary>Kompiluje zestaw z określonej tablicy ciągów zawierających kod źródłowy przy użyciu określonych ustawień kompilatora.</summary>
        <returns><see cref="T:System.CodeDom.Compiler.CompilerResults" /> Obiekt, który wskazuje wyniki kompilacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W .NET Framework wersje 1,0 i 1,1 Ta metoda jest zapewniana przez <xref:System.CodeDom.Compiler.ICodeCompiler> implementację, która jest zwracana <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> przez metodę dostawcy. W wersji 2,0 tę metodę można wywołać bezpośrednio dla dostawcy kodu, nawet jeśli nie został on zastąpiony przez dostawcę kodu. Jeśli dostawca kodu nie przesłania tej metody, <xref:System.CodeDom.Compiler.ICodeCompiler> implementacja jest wywoływana przez klasę bazową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna z tych metod ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> Metoda nie została przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides"><para>W przypadku zastąpienia tej metody nie należy wywoływać odpowiedniej metody klasy bazowej. Metoda klasy bazowej tworzy generator w klasie pochodnej przy użyciu przestarzałej <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> metody w celu zapewnienia zgodności z istniejącymi dostawcami, którzy używają kompilatorów kodu. Metoda klasy bazowej następnie wywołuje równoważną metodę w <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementacji, aby wykonać tę funkcję. <see cref="T:System.NotImplementedException" /> Otrzymasz wywołanie metody klasy bazowej od dostawcy kodu, który nie używa kompilatora kodu.</para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CreateCompiler">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeCompiler CreateCompiler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeCompiler CreateCompiler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateCompiler () As ICodeCompiler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeCompiler ^ CreateCompiler();" />
      <MemberSignature Language="F#" Value="abstract member CreateCompiler : unit -&gt; System.CodeDom.Compiler.ICodeCompiler" Usage="codeDomProvider.CreateCompiler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeCompiler is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
          <AttributeName>System.Obsolete("Callers should not use the ICodeCompiler interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeCompiler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gdy jest zastępowany w klasie pochodnej, tworzy nowy kompilator kodu.</summary>
        <returns>, Który może służyć do kompilowania reprezentacji kodu źródłowego opartego na danych <see cref="N:System.CodeDom" />. <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Zalecaną alternatywą jest wywoływanie <xref:System.CodeDom.Compiler.ICodeCompiler> metod, które są bezpośrednio dostępne w dostawcy kodu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>W, należy <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> zaimplementować elementy członkowskie w <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> klasie i zgłosić <see cref="T:System.NotSupportedException" /> metodę, gdy ta metoda jest wywoływana. [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateEscapedIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateEscapedIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateEscapedIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEscapedIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateEscapedIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateEscapedIdentifier : string -&gt; string&#xA;override this.CreateEscapedIdentifier : string -&gt; string" Usage="codeDomProvider.CreateEscapedIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg, dla którego ma zostać utworzony identyfikator o zmienionym znaczeniu.</param>
        <summary>Tworzy identyfikator o zmienionym znaczeniu dla określonej wartości.</summary>
        <returns>Identyfikator o zmienionym znaczeniu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A>testuje, czy identyfikator powoduje konflikt z wszelkimi słowami zarezerwowanymi lub językowymi, a jeśli tak, zwraca odpowiednik nazwy z użyciem specyficznego dla języka formatowania kodu ucieczki. Jest to nazywane identyfikatorem o zmienionym znaczeniu. Identyfikator o zmienionym znaczeniu zawiera te `value` same, ale ma formatowanie kodu do odróżnienia od słowa kluczowego. Dwa przykłady implementacji są poprzedzone `value` znakiem "@" lub nawiasem `value` klamrowym z "[" i "]".  
  
> [!NOTE]
>  W .NET Framework wersje 1,0 i 1,1 Ta metoda jest zapewniana przez <xref:System.CodeDom.Compiler.ICodeGenerator> implementację, która jest zwracana <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> przez metodę dostawcy. W wersji 2,0 tę metodę można wywołać bezpośrednio dla dostawcy kodu, nawet jeśli nie został on zastąpiony przez dostawcę kodu. Jeśli dostawca kodu nie przesłania tej metody, <xref:System.CodeDom.Compiler.ICodeGenerator> implementacja jest wywoływana przez klasę bazową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna z tych metod ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Metoda nie została przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides"><para>W przypadku zastąpienia tej metody nie należy wywoływać odpowiedniej metody klasy bazowej. Metoda klasy bazowej tworzy generator w klasie pochodnej przy użyciu przestarzałej <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody w celu zapewnienia zgodności z istniejącymi dostawcami, którzy używają generatorów kodu. Metoda klasy bazowej następnie wywołuje równoważną metodę w <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementacji, aby wykonać tę funkcję. <see cref="T:System.NotImplementedException" /> Otrzymasz wywołanie metody klasy bazowej od dostawcy kodu, który nie używa generatora kodu.</para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateGenerator">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gdy jest zastępowany w klasie pochodnej, tworzy nowy generator kodu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeGenerator CreateGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateGenerator () As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator();" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : unit -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeGenerator is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
          <AttributeName>System.Obsolete("Callers should not use the ICodeGenerator interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gdy jest zastępowany w klasie pochodnej, tworzy nowy generator kodu.</summary>
        <returns>, Który może służyć do generowania <see cref="N:System.CodeDom" /> reprezentacji kodu źródłowego na podstawie. <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Zalecaną alternatywą jest wywoływanie <xref:System.CodeDom.Compiler.ICodeGenerator> metod, które są bezpośrednio dostępne <xref:System.CodeDom.Compiler.CodeDomProvider> w klasie.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>W, należy <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> zaimplementować elementy członkowskie w <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> klasie i zgłosić <see cref="T:System.NotSupportedException" /> metodę, gdy ta metoda jest wywoływana. [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (output As TextWriter) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : System.IO.TextWriter -&gt; System.CodeDom.Compiler.ICodeGenerator&#xA;override this.CreateGenerator : System.IO.TextWriter -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="output"><see cref="T:System.IO.TextWriter" /> Do użycia do danych wyjściowych.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, tworzy nowy generator kodu przy użyciu określonego <see cref="T:System.IO.TextWriter" /> dla danych wyjściowych.</summary>
        <returns>, Który może służyć do generowania <see cref="N:System.CodeDom" /> reprezentacji kodu źródłowego na podstawie. <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda używa określonych <xref:System.IO.TextWriter> dla danych wyjściowych. Ta metoda obsługuje bardziej zoptymalizowane generowanie kodu, które przyrostowo aktualizuje kod źródłowy.  
  
> [!NOTE]
>  Implementacja <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> klasy bazowej wywołuje metodę, która jest przestarzała [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] w i <xref:System.CodeDom.Compiler.ICodeGenerator> powoduje <xref:System.NotSupportedException> , że obiekt nie jest zwracany.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (fileName As String) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : string -&gt; System.CodeDom.Compiler.ICodeGenerator&#xA;override this.CreateGenerator : string -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Nazwa pliku do wyprowadzenia.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, tworzy nowy generator kodu przy użyciu określonej nazwy pliku dla danych wyjściowych.</summary>
        <returns>, Który może służyć do generowania <see cref="N:System.CodeDom" /> reprezentacji kodu źródłowego na podstawie. <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda używa określonej nazwy pliku dla danych wyjściowych.  
  
> [!NOTE]
>  Implementacja <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> klasy bazowej wywołuje metodę, która jest przestarzała [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] w i <xref:System.CodeDom.Compiler.ICodeGenerator> powoduje <xref:System.NotSupportedException> , że obiekt nie jest zwracany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParser">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeParser CreateParser ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeParser CreateParser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateParser () As ICodeParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeParser ^ CreateParser();" />
      <MemberSignature Language="F#" Value="abstract member CreateParser : unit -&gt; System.CodeDom.Compiler.ICodeParser&#xA;override this.CreateParser : unit -&gt; System.CodeDom.Compiler.ICodeParser" Usage="codeDomProvider.CreateParser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeParser is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
          <AttributeName>System.Obsolete("Callers should not use the ICodeParser interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeParser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gdy jest zastępowany w klasie pochodnej, tworzy nowy parser kodu.</summary>
        <returns><see cref="T:System.CodeDom.Compiler.ICodeParser" /> , Który może służyć do analizowania kodu źródłowego. Podstawowa implementacja zawsze zwraca wartość <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateProvider">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> Pobiera wystąpienie dla określonego języka.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member CreateProvider : string -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="System.CodeDom.Compiler.CodeDomProvider.CreateProvider language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language">Nazwa języka.</param>
        <summary><see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> Pobiera wystąpienie dla określonego języka.</summary>
        <returns>Dostawca CodeDOM zaimplementowany dla określonej nazwy języka.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Ta metoda jest najczęściej używana do tworzenia wystąpienia dostawcy kodu w aplikacji, która może opcjonalnie używać jednego z kilku dostawców. <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>umożliwia określenie w czasie wykonywania dostawcy kodu, który chcesz utworzyć. Jeśli wiesz, w którym czasie projektowania ma być używany dostawca kodu, należy utworzyć wystąpienie tego dostawcy kodu zamiast korzystać z <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> metody.  
  
 Metoda zwraca wystąpienie dla określonej nazwy języka; <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> jest podobna do wywołania metody z typem dostawcy języka. <xref:System.CodeDom.Compiler.CodeDomProvider> <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> Użyj <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> , aby dynamicznie znaleźć skonfigurowaną implementację dostawcy dla nazwy języka.  
  
 W przypadku skonfigurowania więcej niż jednej implementacji dostawcy dla nazwy <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> języka funkcja zwraca wystąpienie dostawcy dla ostatniego pasującego elementu konfiguracji.  
  
 Użyj przeciążenia <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType> metody, jeśli chcesz zastosować określoną implementację dostawcy języka. Na przykład użyj <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> metody, aby uzyskać wystąpienie dostawcy, które obsługuje nazwę `"CSharp"`języka; Użyj <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType> przeciążenia metody, <xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType> Aby uzyskać wystąpienie dostawcy przeznaczone dla implementacji. Należy użyć [\], CultureInfo, Object\<linki XREF: System. aktywator. CreateInstance% 28System. Type% 2CSystem. odbicie. BindingFlags% 2CSystem. odbicie. Binder% 2CSystem. obiekt% 5B% 5D% 2CSystem. globalizacja. CultureInfo% 2CSystem. Object% 5B% 5D% 29? displayProperty = nameWithType > Metoda, jeśli masz wielu dostawców kodu dla języka i chcesz utworzyć wystąpienie określonego dostawcy kodu.  
  
 Metoda <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> sprawdza, czy co najmniej jedna implementacja dostawcy obsługuje określony język. Możesz sprawdzić poprawność nazwy języka <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> , używając przed przekazaniem jej do. <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> W przypadku przekazania nieobsługiwanej nazwy języka <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> do <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> elementu.  
  
 Metoda <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> ta może służyć do określania wszystkich <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji na komputerze, w tym dodatkowych implementacji dostarczonych przez deweloperów i dostawców kompilatora, [ &lt;które są identyfikowane w System. CodeDom&gt;](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) W pliku konfiguracji komputera (Machine. config).  
  
 Metoda zwraca wystąpienie <xref:System.CodeDom.Compiler.CodeDomProvider> implementacji dla określonego języka. <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>  
  
 W nazwach języków nie jest rozróżniana wielkość liter.  
  
   
  
## Examples  
 Poniższy przykład kodu określa <xref:System.CodeDom.Compiler.CodeDomProvider> implementację języka wejściowego i wyświetla skonfigurowane ustawienia dla dostawcy języka. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.CodeDom.Compiler.CompilerInfo> klasy.  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><paramref name="language" /> Nie ma skonfigurowanego dostawcy na tym komputerze.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="language" /> Ma<see langword="null" />wartość.</exception>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący nie posiada wymaganych uprawnień.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez kod częściowo zaufany.</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language, System.Collections.Generic.IDictionary&lt;string,string&gt; providerOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; providerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String, providerOptions As IDictionary(Of String, String)) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ providerOptions);" />
      <MemberSignature Language="F#" Value="static member CreateProvider : string * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="System.CodeDom.Compiler.CodeDomProvider.CreateProvider (language, providerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="providerOptions" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language">Nazwa języka.</param>
        <param name="providerOptions">Kolekcja opcji dostawcy z pliku konfiguracji.</param>
        <summary><see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> Pobiera wystąpienie dla określonego języka i opcji dostawcy.</summary>
        <returns>Dostawca CodeDOM zaimplementowany dla określonej nazwy języka i opcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Ta metoda jest najczęściej używana do tworzenia wystąpienia dostawcy kodu w aplikacji, która może opcjonalnie używać jednego z kilku dostawców. <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29>umożliwia określenie w czasie wykonywania wersji dostawcy kodu, który chcesz utworzyć. Jeśli wiesz, w którym czasie projektowania ma być używany dostawca kodu, należy utworzyć wystąpienie tego dostawcy kodu zamiast korzystać <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> z metody.  
  
 Użyj <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> , gdy chcesz dynamicznie znaleźć skonfigurowaną implementację dostawcy dla określonego języka i opcji. W nazwach języków nie jest rozróżniana wielkość liter. Informacje o obsługiwanych opcjach dostawcy można znaleźć w dokumentacji dotyczącej dostawcy CodeDOM.  
  
 Aby uzyskać informacje na temat weryfikowania dostawcy i wywoływania dostawcy w przypadku skonfigurowania więcej niż jednej implementacji dostawcy dla nazwy języka, zobacz sekcję <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29> uwagi w metodzie.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, `providerOptions` jak utworzyć wystąpienie dostawcy za pomocą parametru.  
  
 [!code-csharp[CodeDomProvider.ProviderOptions#1](~/samples/snippets/csharp/VS_Snippets_CLR/codedomprovider.provideroptions/cs/program.cs#1)]
 [!code-vb[CodeDomProvider.ProviderOptions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/codedomprovider.provideroptions/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateValidIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateValidIdentifier : string -&gt; string&#xA;override this.CreateValidIdentifier : string -&gt; string" Usage="codeDomProvider.CreateValidIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg, dla którego ma zostać wygenerowany prawidłowy identyfikator.</param>
        <summary>Tworzy prawidłowy identyfikator dla określonej wartości.</summary>
        <returns>Prawidłowy identyfikator określonej wartości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A>testuje, czy identyfikator powoduje konflikt z zastrzeżonym lub językowymi słowami kluczowymi, a jeśli tak, próbuje zwrócić prawidłową nazwę identyfikatora, która nie powoduje konfliktu. Zazwyczaj zwrócony identyfikator jest nieco modyfikowany tylko w celu odróżnienia identyfikatora od słowa kluczowego; na przykład nazwa może być poprzedzona znakiem podkreślenia ("_").  
  
> [!NOTE]
>  W .NET Framework wersje 1,0 i 1,1 Ta metoda jest zapewniana przez <xref:System.CodeDom.Compiler.ICodeGenerator> implementację, która jest zwracana <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> przez metodę dostawcy. W wersji 2,0 tę metodę można wywołać bezpośrednio dla dostawcy kodu, nawet jeśli nie został on zastąpiony przez dostawcę kodu. Jeśli dostawca kodu nie przesłania tej metody, <xref:System.CodeDom.Compiler.ICodeGenerator> implementacja jest wywoływana przez klasę bazową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna z tych metod ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Metoda nie została przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides"><para>W przypadku zastąpienia tej metody nie należy wywoływać odpowiedniej metody klasy bazowej. Metoda klasy bazowej tworzy generator w klasie pochodnej przy użyciu przestarzałej <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody w celu zapewnienia zgodności z istniejącymi dostawcami, którzy używają generatorów kodu. Metoda klasy bazowej następnie wywołuje równoważną metodę w <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementacji, aby wykonać tę funkcję. <see cref="T:System.NotImplementedException" /> Otrzymasz wywołanie metody klasy bazowej od dostawcy kodu, który nie używa generatora kodu.</para></block>
      </Docs>
    </Member>
    <Member MemberName="FileExtension">
      <MemberSignature Language="C#" Value="public virtual string FileExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileExtension" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FileExtension As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FileExtension { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileExtension : string" Usage="System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera domyślne rozszerzenie nazwy pliku, które ma być używane dla plików kodu źródłowego w bieżącym języku.</summary>
        <value>Rozszerzenie nazwy pliku odpowiadające rozszerzeniu plików źródłowych bieżącego języka. Podstawowa implementacja zawsze zwraca wartość <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest używana przez generatory kodu i kompilatory kodu, aby wskazać, jakie rozszerzenia plików powinny być generowane lub używane.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy wystąpienie <xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType>. Przykład wyświetla nazwę dostawcy, kod skrótu i domyślne rozszerzenie nazwy pliku dla nowego wystąpienia dostawcy.  
  
 [!code-cpp[CodeDom_CompilerInfo#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#3)]
 [!code-csharp[CodeDom_CompilerInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#3)]
 [!code-vb[CodeDom_CompilerInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromCompileUnit">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromCompileUnit (System.CodeDom.CodeCompileUnit compileUnit, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromCompileUnit(class System.CodeDom.CodeCompileUnit compileUnit, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromCompileUnit (compileUnit As CodeCompileUnit, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromCompileUnit(System::CodeDom::CodeCompileUnit ^ compileUnit, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromCompileUnit : System.CodeDom.CodeCompileUnit * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromCompileUnit : System.CodeDom.CodeCompileUnit * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromCompileUnit (compileUnit, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> , dla którego ma zostać wygenerowany kod.</param>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> Do którego zostanie wysłany kod wyjściowy.</param>
        <param name="options"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> , Który wskazuje opcje, które mają być używane do generowania kodu.</param>
        <summary>Generuje kod dla określonej jednostki kompilacji Code Document Object Model (CodeDOM) i wysyła ją do określonego składnika zapisywania tekstu przy użyciu określonych opcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W .NET Framework wersje 1,0 i 1,1 Ta metoda jest zapewniana przez <xref:System.CodeDom.Compiler.ICodeGenerator> implementację, która jest zwracana <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> przez metodę dostawcy. W wersji 2,0 tę metodę można wywołać bezpośrednio dla dostawcy kodu, nawet jeśli nie został on zastąpiony przez dostawcę kodu. Jeśli dostawca kodu nie przesłania tej metody, <xref:System.CodeDom.Compiler.ICodeGenerator> implementacja jest wywoływana przez klasę bazową.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A> metody do generowania kodu dla aplikacji "Hello World" <xref:System.CodeDom.CodeCompileUnit>z. Ten przykład jest częścią większego przykładu dostarczonego dla <xref:System.CodeDom.Compiler.CodeDomProvider> klasy.  
  
 [!code-cpp[CodeDomExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#3)]
 [!code-vb[CodeDomExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna z tych metod ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Metoda nie została przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides"><para>W przypadku zastąpienia tej metody nie należy wywoływać odpowiedniej metody klasy bazowej. Metoda klasy bazowej tworzy generator w klasie pochodnej przy użyciu przestarzałej <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody w celu zapewnienia zgodności z istniejącymi dostawcami, którzy używają generatorów kodu. Metoda klasy bazowej następnie wywołuje równoważną metodę w <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementacji, aby wykonać tę funkcję. <see cref="T:System.NotImplementedException" /> Otrzymasz wywołanie metody klasy bazowej od dostawcy kodu, który nie używa generatora kodu.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromExpression">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromExpression (System.CodeDom.CodeExpression expression, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromExpression(class System.CodeDom.CodeExpression expression, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromExpression (expression As CodeExpression, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromExpression(System::CodeDom::CodeExpression ^ expression, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromExpression : System.CodeDom.CodeExpression * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromExpression : System.CodeDom.CodeExpression * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromExpression (expression, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><see cref="T:System.CodeDom.CodeExpression" /> Obiekt, który wskazuje wyrażenie, dla którego ma zostać wygenerowany kod.</param>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> Do którego zostanie wysłany kod wyjściowy.</param>
        <param name="options"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> , Który wskazuje opcje, które mają być używane do generowania kodu.</param>
        <summary>Generuje kod dla określonego wyrażenia Code Document Object Model (CodeDOM) i wysyła go do określonego składnika zapisywania tekstu przy użyciu określonych opcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W .NET Framework wersje 1,0 i 1,1 Ta metoda jest zapewniana przez <xref:System.CodeDom.Compiler.ICodeGenerator> implementację, która jest zwracana <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> przez metodę dostawcy. W wersji 2,0 tę metodę można wywołać bezpośrednio dla dostawcy kodu, nawet jeśli nie został on zastąpiony przez dostawcę kodu. Jeśli dostawca kodu nie przesłania tej metody, <xref:System.CodeDom.Compiler.ICodeGenerator> implementacja jest wywoływana przez klasę bazową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna z tych metod ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Metoda nie została przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides"><para>W przypadku zastąpienia tej metody nie należy wywoływać odpowiedniej metody klasy bazowej. Metoda klasy bazowej tworzy generator w klasie pochodnej przy użyciu przestarzałej <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody w celu zapewnienia zgodności z istniejącymi dostawcami, którzy używają generatorów kodu. Metoda klasy bazowej następnie wywołuje równoważną metodę w <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementacji, aby wykonać tę funkcję. <see cref="T:System.NotImplementedException" /> Otrzymasz wywołanie metody klasy bazowej od dostawcy kodu, który nie używa generatora kodu.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromMember">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromMember (System.CodeDom.CodeTypeMember member, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromMember(class System.CodeDom.CodeTypeMember member, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromMember (member As CodeTypeMember, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromMember(System::CodeDom::CodeTypeMember ^ member, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromMember (member, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.CodeDom.CodeTypeMember" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="member"><see cref="T:System.CodeDom.CodeTypeMember" /> Obiekt, który wskazuje element członkowski, dla którego ma zostać wygenerowany kod.</param>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> Do którego zostanie wysłany kod wyjściowy.</param>
        <param name="options"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> , Który wskazuje opcje, które mają być używane do generowania kodu.</param>
        <summary>Generuje kod dla określonej deklaracji składowej Code Document Object Model (CodeDOM) i wysyła ją do określonego składnika zapisywania tekstu przy użyciu określonych opcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacja klasy bazowej zgłasza <xref:System.NotImplementedException>. Zapoznaj <xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType> się z dokumentacją opisującą implementację tej metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A> metody jako zaimplementowane <xref:Microsoft.CSharp.CSharpCodeProvider> przez klasy i <xref:Microsoft.VisualBasic.VBCodeProvider> .  
  
 [!code-csharp[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/cs/program.cs#1)]
 [!code-vb[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Ta metoda nie została przesłonięta w klasie pochodnej.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeMember" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromNamespace">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromNamespace (System.CodeDom.CodeNamespace codeNamespace, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromNamespace(class System.CodeDom.CodeNamespace codeNamespace, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromNamespace(System::CodeDom::CodeNamespace ^ codeNamespace, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromNamespace : System.CodeDom.CodeNamespace * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromNamespace : System.CodeDom.CodeNamespace * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromNamespace (codeNamespace, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeNamespace" Type="System.CodeDom.CodeNamespace" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codeNamespace"><see cref="T:System.CodeDom.CodeNamespace" /> Obiekt, który wskazuje przestrzeń nazw, dla której ma zostać wygenerowany kod.</param>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> Do którego zostanie wysłany kod wyjściowy.</param>
        <param name="options"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> , Który wskazuje opcje, które mają być używane do generowania kodu.</param>
        <summary>Generuje kod dla określonej przestrzeni nazw Code Document Object Model (CodeDOM) i wysyła go do określonego składnika zapisywania tekstu przy użyciu określonych opcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W .NET Framework wersje 1,0 i 1,1 Ta metoda jest zapewniana przez <xref:System.CodeDom.Compiler.ICodeGenerator> implementację, która jest zwracana <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> przez metodę dostawcy. W wersji 2,0 tę metodę można wywołać bezpośrednio dla dostawcy kodu, nawet jeśli nie został on zastąpiony przez dostawcę kodu. Jeśli dostawca kodu nie przesłania tej metody, <xref:System.CodeDom.Compiler.ICodeGenerator> implementacja jest wywoływana przez klasę bazową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna z tych metod ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Metoda nie została przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides"><para>W przypadku zastąpienia tej metody nie należy wywoływać odpowiedniej metody klasy bazowej. Metoda klasy bazowej tworzy generator w klasie pochodnej przy użyciu przestarzałej <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody w celu zapewnienia zgodności z istniejącymi dostawcami, którzy używają generatorów kodu. Metoda klasy bazowej następnie wywołuje równoważną metodę w <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementacji, aby wykonać tę funkcję. <see cref="T:System.NotImplementedException" /> Otrzymasz wywołanie metody klasy bazowej od dostawcy kodu, który nie używa generatora kodu.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeNamespace" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromStatement">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromStatement (System.CodeDom.CodeStatement statement, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromStatement(class System.CodeDom.CodeStatement statement, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromStatement (statement As CodeStatement, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromStatement(System::CodeDom::CodeStatement ^ statement, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromStatement : System.CodeDom.CodeStatement * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromStatement : System.CodeDom.CodeStatement * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromStatement (statement, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="System.CodeDom.CodeStatement" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="statement"><see cref="T:System.CodeDom.CodeStatement" /> Zawierający elementy CodeDOM, dla których ma zostać wygenerowany kod.</param>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> Do którego zostanie wysłany kod wyjściowy.</param>
        <param name="options"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> , Który wskazuje opcje, które mają być używane do generowania kodu.</param>
        <summary>Generuje kod dla określonej instrukcji Code Document Object Model (CodeDOM) i wysyła ją do określonego składnika zapisywania tekstu przy użyciu określonych opcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W .NET Framework wersje 1,0 i 1,1 Ta metoda jest zapewniana przez <xref:System.CodeDom.Compiler.ICodeGenerator> implementację, która jest zwracana <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> przez metodę dostawcy. W wersji 2,0 tę metodę można wywołać bezpośrednio dla dostawcy kodu, nawet jeśli nie został on zastąpiony przez dostawcę kodu. Jeśli dostawca kodu nie przesłania tej metody, <xref:System.CodeDom.Compiler.ICodeGenerator> implementacja jest wywoływana przez klasę bazową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna z tych metod ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Metoda nie została przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides"><para>W przypadku zastąpienia tej metody nie należy wywoływać odpowiedniej metody klasy bazowej. Metoda klasy bazowej tworzy generator w klasie pochodnej przy użyciu przestarzałej <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody w celu zapewnienia zgodności z istniejącymi dostawcami, którzy używają generatorów kodu. Metoda klasy bazowej następnie wywołuje równoważną metodę w <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementacji, aby wykonać tę funkcję. <see cref="T:System.NotImplementedException" /> Otrzymasz wywołanie metody klasy bazowej od dostawcy kodu, który nie używa generatora kodu.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeStatement" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromType">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromType (System.CodeDom.CodeTypeDeclaration codeType, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromType(class System.CodeDom.CodeTypeDeclaration codeType, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromType (codeType As CodeTypeDeclaration, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromType(System::CodeDom::CodeTypeDeclaration ^ codeType, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromType : System.CodeDom.CodeTypeDeclaration * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromType : System.CodeDom.CodeTypeDeclaration * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromType (codeType, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeType" Type="System.CodeDom.CodeTypeDeclaration" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codeType"><see cref="T:System.CodeDom.CodeTypeDeclaration" /> Obiekt, który wskazuje typ, dla którego ma zostać wygenerowany kod.</param>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> Do którego zostanie wysłany kod wyjściowy.</param>
        <param name="options"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> , Który wskazuje opcje, które mają być używane do generowania kodu.</param>
        <summary>Generuje kod dla określonej deklaracji typu Code Document Object Model (CodeDOM) i wysyła go do określonego składnika zapisywania tekstu przy użyciu określonych opcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W .NET Framework wersje 1,0 i 1,1 Ta metoda jest zapewniana przez <xref:System.CodeDom.Compiler.ICodeGenerator> implementację, która jest zwracana <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> przez metodę dostawcy. W wersji 2,0 tę metodę można wywołać bezpośrednio dla dostawcy kodu, nawet jeśli nie został on zastąpiony przez dostawcę kodu. Jeśli dostawca kodu nie przesłania tej metody, <xref:System.CodeDom.Compiler.ICodeGenerator> implementacja jest wywoływana przez klasę bazową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna z tych metod ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Metoda nie została przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides"><para>W przypadku zastąpienia tej metody nie należy wywoływać odpowiedniej metody klasy bazowej. Metoda klasy bazowej tworzy generator w klasie pochodnej przy użyciu przestarzałej <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody w celu zapewnienia zgodności z istniejącymi dostawcami, którzy używają generatorów kodu. Metoda klasy bazowej następnie wywołuje równoważną metodę w <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementacji, aby wykonać tę funkcję. <see cref="T:System.NotImplementedException" /> Otrzymasz wywołanie metody klasy bazowej od dostawcy kodu, który nie używa generatora kodu.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetAllCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllCompilerInfo () As CompilerInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::CodeDom::Compiler::CompilerInfo ^&gt; ^ GetAllCompilerInfo();" />
      <MemberSignature Language="F#" Value="static member GetAllCompilerInfo : unit -&gt; System.CodeDom.Compiler.CompilerInfo[]" Usage="System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ustawienia dostawcy języka i konfiguracji kompilatora dla tego komputera.</summary>
        <returns>Tablica typu <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> reprezentująca ustawienia wszystkich skonfigurowanych <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> Użyj metody, aby wyliczyć ustawienia dostawcy języka na komputerze.  
  
> [!NOTE]
>  W programie nie określono domyślnych dostawców języka dostarczonych przez .NET Framework [ &lt;w sekcji konfiguracja kompilatora elementu System. CodeDom&gt; ](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) i nie można jej usunąć, dlatego ta metoda zwraca [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] Informacje o domyślnych dostawcach i określonych w pliku konfiguracji.  
  
   
  
## Examples  
 Poniższy przykład kodu wylicza dostawców języka na komputerze i wyświetla konfigurację oraz ustawienia kompilatora dla każdego dostawcy języka. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.CodeDom.Compiler.CompilerInfo> klasy.  
  
 [!code-cpp[CodeDom_CompilerInfo#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#8)]
 [!code-csharp[CodeDom_CompilerInfo#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#8)]
 [!code-vb[CodeDom_CompilerInfo#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący nie posiada wymaganych uprawnień.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez kod częściowo zaufany.</permission>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schemat ustawień kompilatora i dostawcy języka</related>
      </Docs>
    </Member>
    <Member MemberName="GetCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo GetCompilerInfo (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo GetCompilerInfo(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompilerInfo (language As String) As CompilerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerInfo ^ GetCompilerInfo(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member GetCompilerInfo : string -&gt; System.CodeDom.Compiler.CompilerInfo" Usage="System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language">Nazwa języka.</param>
        <summary>Zwraca ustawienia dostawcy języka i konfiguracji kompilatora dla określonego języka.</summary>
        <returns>Obiekt został wypełniony ustawieniami skonfigurowanej <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementacji. <see cref="T:System.CodeDom.Compiler.CompilerInfo" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Element System. CodeDom&gt; w pliku konfiguracji komputera zawiera ustawienia dostawcy języka i konfiguracji kompilatora dla każdej implementacji na komputerze. &lt;](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) <xref:System.CodeDom.Compiler.CodeDomProvider> Informacje o plikach konfiguracji komputera znajdują się w sekcji pliki konfiguracji komputera w temacie [Konfigurowanie aplikacji](~/docs/framework/configure-apps/index.md). <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> Metoda wyszukuje każdy element konfiguracji dostawcy dla określonej nazwy języka. Zwrócone <xref:System.CodeDom.Compiler.CompilerInfo> wystąpienie zawiera skonfigurowany dostawca języka i ustawienia kompilatora.  
  
 Metoda <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> sprawdza, czy co najmniej jedna implementacja dostawcy obsługuje określony język. Możesz sprawdzić poprawność nazwy języka <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> , używając przed przekazaniem jej do. <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> Zapobiega to zgłaszaniu <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> przez <xref:System.CodeDom.Compiler.CompilerInfo> program dostępu do wystąpienia nieobsługiwanej nazwy języka.  
  
 W przypadku skonfigurowania więcej niż jednej implementacji dostawcy dla nazwy języka wejściowego <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> program zwraca ustawienia z ostatniego pasującego elementu konfiguracji dostawcy.  
  
 W nazwach języków nie jest rozróżniana wielkość liter.  
  
   
  
## Examples  
 Poniższy przykład kodu określa <xref:System.CodeDom.Compiler.CodeDomProvider> implementację języka wejściowego i wyświetla skonfigurowane ustawienia dla dostawcy języka. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.CodeDom.Compiler.CompilerInfo> klasy.  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException"><paramref name="language" /> Nie ma skonfigurowanego dostawcy na tym komputerze.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><paramref name="language" /> Ma<see langword="null" />wartość.</exception>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący nie posiada wymaganych uprawnień.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez kod częściowo zaufany.</permission>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schemat ustawień kompilatora i dostawcy języka</related>
      </Docs>
    </Member>
    <Member MemberName="GetConverter">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.TypeConverter GetConverter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.TypeConverter GetConverter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::TypeConverter ^ GetConverter(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetConverter : Type -&gt; System.ComponentModel.TypeConverter&#xA;override this.GetConverter : Type -&gt; System.ComponentModel.TypeConverter" Usage="codeDomProvider.GetConverter type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Typ obiektu, dla którego ma zostać pobrany konwerter typu.</param>
        <summary><see cref="T:System.ComponentModel.TypeConverter" /> Pobiera dla określonego typu danych.</summary>
        <returns>Dla określonego typu lub <see langword="null" /> Jeśli <see cref="T:System.ComponentModel.TypeConverter" /> nie można znaleźć określonego typu. <see cref="T:System.ComponentModel.TypeConverter" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa pochodna może przesłonić tę metodę w celu zapewnienia określonych typów konwerterów typów dla konkretnych typów danych.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeConverter" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguageFromExtension">
      <MemberSignature Language="C#" Value="public static string GetLanguageFromExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetLanguageFromExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguageFromExtension (extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetLanguageFromExtension(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member GetLanguageFromExtension : string -&gt; string" Usage="System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="extension">Rozszerzenie nazwy pliku.</param>
        <summary>Zwraca nazwę języka skojarzoną z określonym rozszerzeniem nazwy pliku, zgodnie z konfiguracją w <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> sekcji konfiguracja kompilatora.</summary>
        <returns>Nazwa języka skojarzona z rozszerzeniem nazwy pliku zgodnie z konfiguracją w <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> ustawieniach konfiguracji kompilatora.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Element System. CodeDom&gt; w pliku konfiguracji komputera (Machine. config) zawiera ustawienia dostawcy języka i konfiguracji kompilatora dla każdej implementacji na komputerze. &lt;](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) <xref:System.CodeDom.Compiler.CodeDomProvider> <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> Metoda wyszukuje każdy element konfiguracji dostawcy dla określonego rozszerzenia nazwy pliku.  
  
 Metoda <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> sprawdza, czy co najmniej jedna implementacja dostawcy obsługuje określone rozszerzenie nazwy pliku. Można sprawdzić poprawność rozszerzenia nazwy pliku <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> , używając przed przekazaniem go do. <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> Zapobiega <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> to<xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> zgłaszaniu dla nieobsługiwanego rozszerzenia nazwy pliku.  
  
 Jeśli implementacja dostawcy obsługuje rozszerzenie nazwy pliku wejściowego, a dla tego dostawcy skonfigurowano wiele obsługiwanych języków, <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> funkcja zwróci nazwę pierwszego języka dla tego dostawcy. Jeśli dla rozszerzenia nazwy pliku wejściowego skonfigurowano więcej niż jedną implementację dostawcy <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> , funkcja zwraca nazwę języka z ostatniego zgodnego elementu konfiguracji dostawcy.  
  
 Nazwy języka i rozszerzenia nazw plików nie uwzględniają wielkości liter.  
  
   
  
## Examples  
 Poniższy przykład kodu określa <xref:System.CodeDom.Compiler.CodeDomProvider> implementację rozszerzenia nazwy pliku wejściowego i wyświetla skonfigurowane ustawienia dla dostawcy języka. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.CodeDom.Compiler.CompilerInfo> klasy.  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException"><paramref name="extension" /> Na tym komputerze nie ma skonfigurowanego dostawcy języka.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><paramref name="extension" /> Ma<see langword="null" />wartość.</exception>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący nie posiada wymaganych uprawnień.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez kod częściowo zaufany.</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schemat ustawień kompilatora i dostawcy języka</related>
      </Docs>
    </Member>
    <Member MemberName="GetTypeOutput">
      <MemberSignature Language="C#" Value="public virtual string GetTypeOutput (System.CodeDom.CodeTypeReference type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetTypeOutput(class System.CodeDom.CodeTypeReference type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeOutput (type As CodeTypeReference) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetTypeOutput(System::CodeDom::CodeTypeReference ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string&#xA;override this.GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string" Usage="codeDomProvider.GetTypeOutput type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.CodeDom.CodeTypeReference" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.CodeDom.CodeTypeReference" /> Wskazuje typ do zwrócenia.</param>
        <summary>Pobiera typ wskazany przez określony <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
        <returns>Tekstowa reprezentacja określonego typu sformatowana dla języka, w którym kod jest generowany przez ten generator kodu. Na przykład w Visual Basic, przekazywanie w <see cref="T:System.CodeDom.CodeTypeReference" /> <see cref="T:System.Int32" /> dla typu zwróci wartość "Integer".</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W .NET Framework wersje 1,0 i 1,1 Ta metoda jest zapewniana przez <xref:System.CodeDom.Compiler.ICodeGenerator> implementację, która jest zwracana <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> przez metodę dostawcy. W wersji 2,0 tę metodę można wywołać bezpośrednio dla dostawcy kodu, nawet jeśli nie został on zastąpiony przez dostawcę kodu. Jeśli dostawca kodu nie przesłania tej metody, <xref:System.CodeDom.Compiler.ICodeGenerator> implementacja jest wywoływana przez klasę bazową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna z tych metod ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Metoda nie została przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides"><para>W przypadku zastąpienia tej metody nie należy wywoływać odpowiedniej metody klasy bazowej. Metoda klasy bazowej tworzy generator w klasie pochodnej przy użyciu przestarzałej <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody w celu zapewnienia zgodności z istniejącymi dostawcami, którzy używają generatorów kodu. Metoda klasy bazowej następnie wywołuje równoważną metodę w <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementacji, aby wykonać tę funkcję. <see cref="T:System.NotImplementedException" /> Otrzymasz wywołanie metody klasy bazowej od dostawcy kodu, który nie używa generatora kodu.</para></block>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedExtension">
      <MemberSignature Language="C#" Value="public static bool IsDefinedExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedExtension (extension As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedExtension(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member IsDefinedExtension : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="extension">Rozszerzenie nazwy pliku.</param>
        <summary>Sprawdza, czy rozszerzenie nazwy pliku ma skojarzoną <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementację skonfigurowaną na komputerze.</summary>
        <returns><see langword="true" />Jeśli implementacja została skonfigurowana dla określonego rozszerzenia nazwy pliku, <see langword="false" />w przeciwnym razie. <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Element System. CodeDom&gt; w pliku konfiguracji komputera (Machine. config) zawiera ustawienia dostawcy języka i konfiguracji kompilatora dla każdej implementacji na komputerze. &lt;](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) <xref:System.CodeDom.Compiler.CodeDomProvider> <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> Metoda przeszukuje elementy konfiguracji dostawcy dla określonego rozszerzenia nazwy pliku.  
  
 W rozszerzeniach nazw plików nie jest rozróżniana wielkość liter.  
  
   
  
## Examples  
 Poniższy przykład kodu określa <xref:System.CodeDom.Compiler.CodeDomProvider> implementację rozszerzenia nazwy pliku wejściowego i wyświetla skonfigurowane ustawienia dla dostawcy języka. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.CodeDom.Compiler.CompilerInfo> klasy.  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="extension" /> Ma<see langword="null" />wartość.</exception>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący nie posiada wymaganych uprawnień.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez kod częściowo zaufany.</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schemat ustawień kompilatora i dostawcy języka</related>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedLanguage">
      <MemberSignature Language="C#" Value="public static bool IsDefinedLanguage (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedLanguage(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedLanguage (language As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedLanguage(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member IsDefinedLanguage : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language">Nazwa języka.</param>
        <summary>Sprawdza, czy na komputerze jest <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> skonfigurowana implementacja.</summary>
        <returns><see langword="true" />Jeśli implementacja została skonfigurowana dla określonego języka; <see langword="false" />w przeciwnym razie. <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Element System. CodeDom&gt; w pliku konfiguracji komputera (Machine. config) zawiera ustawienia dostawcy języka i konfiguracji kompilatora dla każdej implementacji na komputerze. &lt;](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) <xref:System.CodeDom.Compiler.CodeDomProvider> <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> Metoda przeszukuje elementy konfiguracji dostawcy dla określonej nazwy języka.  
  
 W nazwach języków nie jest rozróżniana wielkość liter.  
  
   
  
## Examples  
 Poniższy przykład kodu określa <xref:System.CodeDom.Compiler.CodeDomProvider> implementację języka wejściowego i wyświetla skonfigurowane ustawienia dla dostawcy języka. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.CodeDom.Compiler.CompilerInfo> klasy.  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="language" /> Ma<see langword="null" />wartość.</exception>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący nie posiada wymaganych uprawnień.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">aby uzyskać pełne zaufanie dla bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez kod częściowo zaufany.</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schemat ustawień kompilatora i dostawcy języka</related>
      </Docs>
    </Member>
    <Member MemberName="IsValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual bool IsValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidIdentifier (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IsValidIdentifier : string -&gt; bool&#xA;override this.IsValidIdentifier : string -&gt; bool" Usage="codeDomProvider.IsValidIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do zweryfikowania jako prawidłowy identyfikator.</param>
        <summary>Zwraca wartość wskazującą, czy określona wartość jest prawidłowym identyfikatorem bieżącego języka.</summary>
        <returns><see langword="true" />Jeśli parametr jest prawidłowym identyfikatorem; w przeciwnym <see langword="false" />razie,. <paramref name="value" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda sprawdza, czy identyfikator jest prawidłowy. <xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A> Metoda jest specyficzna dla dostawcy. Identyfikatory, które są prawidłowe dla jednego dostawcy mogą być nieprawidłowe dla innych dostawców. Jeśli `value` zawiera znaki spoza zakresu znaków ASCII, należy sprawdzić identyfikator dla wszystkich języków, które mogą być używane do kompilowania kodu.  
  
> [!NOTE]
>  W .NET Framework wersje 1,0 i 1,1 Ta metoda jest zapewniana przez <xref:System.CodeDom.Compiler.ICodeGenerator> implementację, która jest zwracana <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> przez metodę dostawcy. W wersji 2,0 tę metodę można wywołać bezpośrednio dla dostawcy kodu, nawet jeśli nie został on zastąpiony przez dostawcę kodu. Jeśli dostawca kodu nie przesłania tej metody, <xref:System.CodeDom.Compiler.ICodeGenerator> implementacja jest wywoływana przez klasę bazową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna z tych metod ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Metoda nie została przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /> w klasie pochodnej należy zaprojektować metodę, <see langword="true" /> aby zwracała tylko wtedy, gdy wartość jest zgodna z regułami języka i nie powoduje konfliktu ze słowem kluczowym.  
  
W przypadku zastąpienia tej metody nie należy wywoływać odpowiedniej metody klasy bazowej. Metoda klasy bazowej tworzy generator w klasie pochodnej przy użyciu przestarzałej <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody w celu zapewnienia zgodności z istniejącymi dostawcami, którzy używają generatorów kodu. Metoda klasy bazowej następnie wywołuje równoważną metodę w <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementacji, aby wykonać tę funkcję. <see cref="T:System.NotImplementedException" /> Otrzymasz wywołanie metody klasy bazowej od dostawcy kodu, który nie używa generatora kodu.</para></block>
      </Docs>
    </Member>
    <Member MemberName="LanguageOptions">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.LanguageOptions LanguageOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.CodeDom.Compiler.LanguageOptions LanguageOptions" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LanguageOptions As LanguageOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::CodeDom::Compiler::LanguageOptions LanguageOptions { System::CodeDom::Compiler::LanguageOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.LanguageOptions : System.CodeDom.Compiler.LanguageOptions" Usage="System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.LanguageOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator funkcji języka.</summary>
        <value>A <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> wskazujące specjalne funkcje języka.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeCompileUnit Parse (System.IO.TextReader codeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeCompileUnit Parse(class System.IO.TextReader codeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Parse (codeStream As TextReader) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeCompileUnit ^ Parse(System::IO::TextReader ^ codeStream);" />
      <MemberSignature Language="F#" Value="abstract member Parse : System.IO.TextReader -&gt; System.CodeDom.CodeCompileUnit&#xA;override this.Parse : System.IO.TextReader -&gt; System.CodeDom.CodeCompileUnit" Usage="codeDomProvider.Parse codeStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeStream" Type="System.IO.TextReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codeStream"><see cref="T:System.IO.TextReader" /> Obiekt, który jest używany do odczytywania kodu do analizy.</param>
        <summary>Kompiluje kod odczytywany z określonego strumienia tekstu do <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeCompileUnit" /> , który zawiera reprezentację przeanalizowanego kodu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  W .NET Framework wersje 1,0 i 1,1 Ta metoda jest zapewniana przez <xref:System.CodeDom.Compiler.ICodeParser> implementację, która jest zwracana <xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A> przez metodę dostawcy. W wersji 2,0 tę metodę można wywołać bezpośrednio dla dostawcy kodu, nawet jeśli nie został on zastąpiony przez dostawcę kodu. Jeśli dostawca kodu nie przesłania tej metody, <xref:System.CodeDom.Compiler.ICodeParser> implementacja jest wywoływana przez klasę bazową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna z tych metod ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Metoda nie została przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides"><para>W przypadku zastąpienia tej metody nie należy wywoływać odpowiedniej metody klasy bazowej. Metoda klasy bazowej tworzy parser w klasie pochodnej przy użyciu przestarzałej <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /> metody w celu zapewnienia zgodności z istniejącymi dostawcami korzystającymi z analizatorów kodu. Metoda klasy bazowej następnie wywołuje równoważną metodę w <see cref="T:System.CodeDom.Compiler.ICodeParser" /> implementacji, aby wykonać tę funkcję. <see cref="T:System.NotImplementedException" /> Otrzymasz wywołanie metody klasy bazowej od dostawcy kodu, który nie korzysta z parsera kodu.</para></block>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.IO.TextReader" />
      </Docs>
    </Member>
    <Member MemberName="Supports">
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport generatorSupport);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport generatorSupport) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport generatorSupport);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport supports) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Supports (supports As GeneratorSupport) As Boolean" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool&#xA;override this.Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool" Usage="codeDomProvider.Supports generatorSupport" FrameworkAlternate="netframework-1.1;netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Supports (supports As GeneratorSupport) As Boolean" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool&#xA;override this.Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool" Usage="codeDomProvider.Supports supports" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)" FrameworkAlternate="xamarinmac-3.0;netcore-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generatorSupport" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="supports" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generatorSupport"><see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> Obiekt, który wskazuje typ obsługi generowania kodu do zweryfikowania.</param>
        <param name="supports">To be added.</param>
        <summary>Zwraca wartość wskazującą, czy podano określoną obsługę generowania kodu.</summary>
        <returns><see langword="true" />Jeśli podano obsługę generowania kodu; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może być wywoływana z wielu <xref:System.CodeDom.Compiler.GeneratorSupport> flag jednocześnie w celu przetestowania zestawu funkcji przez przyłączenie zestawu odpowiednich flag możliwości wraz z operatorem binarnym `OR` (&#124;).  
  
> [!NOTE]
>  W .NET Framework wersje 1,0 i 1,1 Ta metoda jest zapewniana przez <xref:System.CodeDom.Compiler.ICodeGenerator> implementację, która jest zwracana <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> przez metodę dostawcy. W wersji 2,0 tę metodę można wywołać bezpośrednio dla dostawcy kodu, nawet jeśli nie został on zastąpiony przez dostawcę kodu. Jeśli dostawca kodu nie przesłania tej metody, <xref:System.CodeDom.Compiler.ICodeGenerator> implementacja jest wywoływana przez klasę bazową.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Żadna z tych metod ani <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Metoda nie została przesłonięta w klasie pochodnej.</exception>
        <block subset="none" type="overrides"><para>W przypadku zastąpienia tej metody nie należy wywoływać odpowiedniej metody klasy bazowej. Metoda klasy bazowej tworzy generator w klasie pochodnej przy użyciu przestarzałej <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> metody w celu zapewnienia zgodności z istniejącymi dostawcami, którzy używają generatorów kodu. Metoda klasy bazowej następnie wywołuje równoważną metodę w <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementacji, aby wykonać tę funkcję. <see cref="T:System.NotImplementedException" /> Otrzymasz wywołanie metody klasy bazowej od dostawcy kodu, który nie używa generatora kodu.</para></block>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
      </Docs>
    </Member>
  </Members>
</Type>
