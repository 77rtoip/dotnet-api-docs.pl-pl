<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="823d71cbaaa13fafd00a179a866a2f9f24b156a8" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52603559" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopy&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopy sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SqlBulkCopy = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Pozwala na efektywne ładowania zbiorczego tabeli programu SQL Server przy użyciu danych z innego źródła.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft SQL Server zawiera popularne narzędzia wiersza polecenia o nazwie **bcp** przenoszenia danych z jednej tabeli do innej, czy komputer znajduje się na jednym serwerze lub między serwerami. <xref:System.Data.SqlClient.SqlBulkCopy> Klasy umożliwia pisanie kodu zarządzanego rozwiązania, które zapewniają podobne funkcje. Istnieją inne sposoby, aby załadować dane do tabeli programu SQL Server (instrukcji INSERT, na przykład), ale <xref:System.Data.SqlClient.SqlBulkCopy> oferuje zalety istotnie poprawiającą wydajność, nad nimi.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> Klasa może być używana w celu zapisania danych tylko do tabel programu SQL Server. Jednakże źródła danych nie jest ograniczona do programu SQL Server; Dowolne źródło danych może służyć, tak długo, jak długo dane mogą być ładowane do <xref:System.Data.DataTable> wystąpienia lub odczytu z <xref:System.Data.IDataReader> wystąpienia.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> zakończy się niepowodzeniem podczas ładowania zbiorczego <xref:System.Data.DataTable> kolumny typu <xref:System.Data.SqlTypes.SqlDateTime> do programu SQL Server kolumny, której typem jest jeden z typów daty i godziny dodane w programie SQL Server 2008.  
  
   
  
## Examples  
 Następująca aplikacja konsoli Pokazuje, jak załadować dane przy użyciu <xref:System.Data.SqlClient.SqlBulkCopy> klasy. W tym przykładzie <xref:System.Data.SqlClient.SqlDataReader> służy do kopiowania danych z **Production.Product** tabeli w programie SQL Server **AdventureWorks** bazy danych do tabeli podobne w tej samej bazy danych.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, chyba że utworzonego tabelami pracy zgodnie z opisem w [Konfiguracja przykładu kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zademonstrowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabele źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze użyj instrukcji Transact-SQL `INSERT … SELECT` instrukcję, aby skopiować dane.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> klasy.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">Już otwarta <see cref="T:System.Data.SqlClient.SqlConnection" /> wystąpienia, która będzie służyć do wykonywania operacji kopiowania zbiorczego. Jeśli parametry połączenia nie są używane <see langword="Integrated Security = true" />, można użyć <see cref="T:System.Data.SqlClient.SqlCredential" /> przekazać identyfikator użytkownika i hasło, bezpieczniejsze niż przez określenie Identyfikatora użytkownika i hasła jako tekst w parametrach połączenia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> przy użyciu określonego otwartego wystąpienia <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ połączenie jest już otwarty podczas <xref:System.Data.SqlClient.SqlBulkCopy> wystąpienie jest inicjowane, połączenie pozostaje otwarty po <xref:System.Data.SqlClient.SqlBulkCopy> instancja jest zamknięta.  
  
 Jeśli `connection` argument ma wartość null, <xref:System.ArgumentNullException> zgłaszany.  
  
   
  
## Examples  
 Następująca aplikacja konsoli Pokazuje, jak zbiorczo załadować dane przy użyciu połączenia, który jest już otwarty. W tym przykładzie <xref:System.Data.SqlClient.SqlDataReader> służy do kopiowania danych z **Production.Product** tabeli w programie SQL Server **AdventureWorks** bazy danych do tabeli podobne w tej samej bazy danych. Ten przykład dotyczy tylko w celach demonstracyjnych. Nie należy używać `SqlBulkCopy` do przenoszenia danych z jednej tabeli do drugiego w tej samej bazy danych w aplikacji produkcyjnej. Należy zauważyć, że źródło danych nie musi znajdować się w programie SQL Server; można użyć dowolnego źródła danych, który może zostać odczytany <xref:System.Data.IDataReader> lub załadować go do <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, chyba że utworzonego tabelami pracy zgodnie z opisem w [Konfiguracja przykładu kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zademonstrowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabele źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze użyj instrukcji Transact-SQL `INSERT … SELECT` instrukcję, aby skopiować dane.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Parametry połączenia, który ma zostać otwarty do użytku przez definiowanie <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> wystąpienia. Jeśli parametry połączenia nie są używane <see langword="Integrated Security = true" />, można użyć <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> lub <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> i <see cref="T:System.Data.SqlClient.SqlCredential" /> przekazać identyfikator użytkownika i hasło, bezpieczniejsze niż przez określenie Identyfikatora użytkownika i hasła jako tekst w parametrach połączenia.</param>
        <summary>Inicjuje i otwiera nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlConnection" /> oparte na podanym <paramref name="connectionString" />. Używa konstruktora <see cref="T:System.Data.SqlClient.SqlConnection" /> zainicjować nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Połączenie jest automatycznie zamknięte po zakończeniu operacji kopiowania zbiorczego.  
  
 Jeśli `connectionString` ma wartość null, <xref:System.ArgumentNullException> zgłaszany. Jeśli `connectionString` jest ciągiem pustym <xref:System.ArgumentException> zgłaszany.  
  
   
  
## Examples  
 Następująca aplikacja konsoli Pokazuje, jak zbiorczo załadować dane przy użyciu określonego jako ciąg połączenia. Połączenie jest zamknięte automatycznie, gdy <xref:System.Data.SqlClient.SqlBulkCopy> instancja jest zamknięta.  
  
 W tym przykładzie źródło danych, najpierw są odczytywane z tabeli programu SQL Server w taki sposób, aby <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Źródło danych nie musi znajdować się w programie SQL Server; można użyć dowolnego źródła danych, który może zostać odczytany <xref:System.Data.IDataReader> lub załadować go do <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, chyba że utworzonego tabelami pracy zgodnie z opisem w [Konfiguracja przykładu kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zademonstrowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabele źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze użyj instrukcji Transact-SQL `INSERT … SELECT` instrukcję, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Operacje kopiowania masowego w programie SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, copyOptions As SqlBulkCopyOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString, System::Data::SqlClient::SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string * System.Data.SqlClient.SqlBulkCopyOptions -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connectionString, copyOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">Parametry połączenia, który ma zostać otwarty do użytku przez definiowanie <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> wystąpienia. Jeśli parametry połączenia nie są używane <see langword="Integrated Security = true" />, można użyć <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> lub <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> i <see cref="T:System.Data.SqlClient.SqlCredential" /> przekazać identyfikator użytkownika i hasło, bezpieczniejsze niż przez określenie Identyfikatora użytkownika i hasła jako tekst w parametrach połączenia.</param>
        <param name="copyOptions">Kombinacja wartości z <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> wyliczenia, która określa, które wiersze źródła danych zostaną skopiowane do tabeli docelowej.</param>
        <summary>Inicjuje i otwiera nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlConnection" /> oparte na podanym <paramref name="connectionString" />. Używa konstruktora, który <see cref="T:System.Data.SqlClient.SqlConnection" /> zainicjować nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> klasy. <see cref="T:System.Data.SqlClient.SqlConnection" /> Wystąpienia zachowuje się zgodnie z opcjami podane w <paramref name="copyOptions" /> parametru.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz uzyskać szczegółowe informacje o wszystkich opcjach kopiowania zbiorczego w <xref:System.Data.SqlClient.SqlBulkCopyOptions> tematu.  
  
   
  
## Examples  
 Następująca aplikacja konsoli Pokazuje, jak można wykonać ładowania zbiorczego przy użyciu określonego jako ciąg połączenia. Ustawiono opcję Użyj wartości w kolumnie tożsamości tabeli źródłowej podczas ładowania tabeli docelowej. W tym przykładzie źródło danych, najpierw są odczytywane z tabeli programu SQL Server w taki sposób, aby <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. W tabeli źródłowej, jak i tabela docelowa obejmują kolumny tożsamości. Domyślnie nową wartość dla **tożsamości** kolumny jest generowany w tabeli docelowej dla każdego wiersza dodane. W tym przykładzie opcja jest ustawiona, gdy połączenie jest otwarte, która wymusza proces ładowania zbiorczego, używać **tożsamości** zamiast wartości z tabeli źródłowej. Aby zobaczyć zmiany sposobu działania ładowania zbiorczego, uruchom aplikację przykładową przy użyciu opcji **dbo. BulkCopyDemoMatchingColumns** tabela jest pusta. Załaduj wszystkie wiersze ze źródła. Następnie ponownie uruchom przykład bez opróżniania w tabeli. Wyjątek jest generowany i kod zapisuje komunikat do konsoli, informujący o tym, że wiersze nie zostały dodane z powodu naruszenia ograniczenia klucza podstawowego.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, chyba że utworzonego tabelami pracy zgodnie z opisem w [Konfiguracja przykładu kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zademonstrowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabele źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze użyj instrukcji Transact-SQL `INSERT … SELECT` instrukcję, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlBulkCopyOptions copyOptions, System::Data::SqlClient::SqlTransaction ^ externalTransaction);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection * System.Data.SqlClient.SqlBulkCopyOptions * System.Data.SqlClient.SqlTransaction -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connection, copyOptions, externalTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection">Już otwarta <see cref="T:System.Data.SqlClient.SqlConnection" /> wystąpienia, która będzie służyć do wykonywania kopiowania zbiorczego. Jeśli parametry połączenia nie są używane <see langword="Integrated Security = true" />, można użyć <see cref="T:System.Data.SqlClient.SqlCredential" /> przekazać identyfikator użytkownika i hasło, bezpieczniejsze niż przez określenie Identyfikatora użytkownika i hasła jako tekst w parametrach połączenia.</param>
        <param name="copyOptions">Kombinacja wartości z <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> wyliczenia, która określa, które wiersze źródła danych zostaną skopiowane do tabeli docelowej.</param>
        <param name="externalTransaction">Istniejące <see cref="T:System.Data.SqlClient.SqlTransaction" /> wystąpienia w ramach której nastąpi kopiowania zbiorczego.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> przy użyciu podanej istniejących otwartego wystąpienia <see cref="T:System.Data.SqlClient.SqlConnection" />. <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> Wystąpienia zachowuje się zgodnie z opcjami podane w <paramref name="copyOptions" /> parametru. Jeśli inna niż null <see cref="T:System.Data.SqlClient.SqlTransaction" /> jest podany, operacje kopiowania będą wprowadzane w ramach danej transakcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli opcje obejmują `UseInternalTransaction` i `externalTransaction` argument nie jest null, **InvalidArgumentException** zgłaszany.  
  
 Aby uzyskać przykłady pokazujące, jak używać `SqlBulkCopy` w transakcji, zobacz [transakcja i operacje kopiowania masowego](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BatchSize : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Liczba wierszy w każdej partii. Na końcu każdej partii wierszy w partii wysyłanych do serwera.</summary>
        <value>Wartość całkowitą <see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> właściwości lub zero, jeśli wartość nie została ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Partii jest ukończone, gdy <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> wiersze zostały przetworzone lub nie ma żadnych więcej wierszy, aby wysłać do docelowego źródła danych.  
  
 Zero (domyślnie) wskazuje, że każdy <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operacja jest pojedyncza partia.  
  
 Jeśli <xref:System.Data.SqlClient.SqlBulkCopy> wystąpienia została zadeklarowana bez <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> opcja w praktyce wiersze są wysyłane do serwera <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> wierszy w danym momencie, ale żadne działania związane z transakcji jest zajęta. Jeśli <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> obowiązuje, każdej partii wierszy jest wstawiany jako oddzielna transakcja.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> Właściwość można ustawić w dowolnym momencie. W przypadku kopiowania masowego już w toku, bieżącej partii jest o rozmiarach, zgodnie z poprzednim rozmiar partii. Kolejne partie użyć nowego rozmiaru. Jeśli <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> początkowo jest równa zero i zmienione podczas <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operacja jest już w toku, czy operacja służy do ładowania danych jako jedna partia. Każda kolejna <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operacji na tym samym <xref:System.Data.SqlClient.SqlBulkCopy> wystąpienia korzystać z nowych <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
   
  
## Examples  
 Następująca aplikacja konsoli Pokazuje, jak zbiorczo załadować dane w partiach 50 wierszy. Aby uzyskać przykład ilustrujący sposób <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> współpracuje z transakcji, zobacz [transakcja i operacje kopiowania masowego](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 W tym przykładzie źródło danych, najpierw są odczytywane z tabeli programu SQL Server w taki sposób, aby <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Źródło danych nie musi znajdować się w programie SQL Server; można użyć dowolnego źródła danych, który może zostać odczytany <xref:System.Data.IDataReader> lub załadować go do <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, chyba że utworzonego tabelami pracy zgodnie z opisem w [Konfiguracja przykładu kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zademonstrowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabele źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze użyj instrukcji Transact-SQL `INSERT … SELECT` instrukcję, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Operacje kopiowania masowego w programie SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BulkCopyTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulkCopyTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BulkCopyTimeout : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Liczba sekund dla operacji do wykonania przed upływem limitu czasu.</summary>
        <value>Wartość całkowitą <see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" /> właściwości. Wartość domyślna to 30 sekund. Wartość 0 oznacza brak limitu; kopiowanie masowe będzie czekać w nieskończoność.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli operacja ma limit czasu, transakcja nie została zatwierdzona i wszystkie skopiowane wiersze są usuwane z tabeli docelowej.  
  
   
  
## Examples  
 Następująca aplikacja konsoli Pokazuje, jak zmodyfikować limit czasu na 60 sekund zbiorczego podczas ładowania danych.  
  
 W tym przykładzie źródło danych, najpierw są odczytywane z tabeli programu SQL Server w taki sposób, aby <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Źródło danych nie musi znajdować się w programie SQL Server; można użyć dowolnego źródła danych, który może zostać odczytany <xref:System.Data.IDataReader> lub załadować go do <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, chyba że utworzonego tabelami pracy zgodnie z opisem w [Konfiguracja przykładu kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zademonstrowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabele źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze do użycia [!INCLUDE[tsql](~/includes/tsql-md.md)] `INSERT … SELECT` instrukcję, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="sqlBulkCopy.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po wywołaniu metody <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> na <xref:System.Data.SqlClient.SqlBulkCopy> obiektu, żadna inna operacja zostanie wykonana pomyślnie. Wywołania <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> metoda zgłosi <xref:System.InvalidOperationException>.  
  
 Wywoływanie <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> metody z <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> powoduje, że zdarzenie <xref:System.InvalidOperationException> zostanie wygenerowany.  
  
 Należy pamiętać, że open <xref:System.Data.SqlClient.SqlBulkCopy> wystąpienia są niejawnie zamknięty na końcu `using` bloku.  
  
   
  
## Examples  
 Poniższy przykład używa tych samych <xref:System.Data.SqlClient.SqlBulkCopy> wystąpienie do dodania do dwóch tabel docelowych zamówień sprzedaży i ich szczegóły. Ponieważ **AdventureWorks** tabele zamówienia sprzedaży jest duża, przykład odczytuje tylko zamówienia złożone przez numer konta i zbiorcze kopiuje tych zamówień i szczegółowe informacje do tabel docelowych. <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> Metoda jest używana tylko po wykonaniu obu operacje kopiowania zbiorczego.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, chyba że utworzonego tabelami pracy zgodnie z opisem w [Konfiguracja przykładu kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zademonstrowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabele źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze użyj instrukcji Transact-SQL `INSERT … SELECT` instrukcję, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ ColumnMappings { System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnMappings : System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" Usage="System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca kolekcję <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> elementów. Mapowania kolumn Definiowanie relacji między kolumnami w źródle danych i kolumn w miejscu docelowym.</summary>
        <value>Kolekcja mapowania kolumn. Domyślnie jest pustą kolekcją.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli źródło danych i tabeli docelowej mają tę samą liczbę kolumn, a porządkowym każdej kolumny źródłowej w źródle danych porządkowym odpowiadającej jej kolumny docelowej <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> kolekcji nie jest konieczne. Jednakże, jeśli różnią się liczbą kolumn lub numerem porządkowym pozycji nie są zgodne, należy użyć <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> aby upewnić się, że dane są kopiowane do właściwymi kolumnami.  
  
 Podczas wykonywania operacji kopiowania zbiorczego można można uzyskać dostępu do tej kolekcji, ale nie można jej zmienić. Każda próba odbywają się zgłosi <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationTableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationTableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DestinationTableName : string with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nazwa tabeli docelowej na serwerze.</summary>
        <value>Wartość ciągu <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość lub wartość null, jeśli nie został dostarczony.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> nie została ustawiona podczas <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> jest wywoływana, <xref:System.ArgumentNullException> zgłaszany.  
  
 Jeśli <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> jest modyfikowany podczas <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operacja jest w toku, zmiana nie ma wpływu na bieżącej operacji. Nowy <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> wartość jest używana przy następnym <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> metoda jest wywoływana.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> jest to nazwa trzyczęściowej serii (`<database>.<owningschema>.<name>`). Jeśli wybierzesz, możesz skorzystać nazwy tabeli z bazy danych i schemat będącej właścicielem. Jednakże, jeśli nazwa tabeli używa znaku podkreślenia ("_") ani innych znaków specjalnych, musisz wyjść nazwę, używając nawiasów, podobnie jak w (`[<database>.<owningschema>.<name_01>]`). Aby uzyskać więcej informacji, zobacz [identyfikatory bazy danych](/sql/relational-databases/databases/database-identifiers).  
  
 Możesz danych kopiowanie masowe do tabeli tymczasowej przy użyciu wartości, takich jak `tempdb..#table` lub `tempdb.<owner>.#table` dla <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> właściwości.  
  
   
  
## Examples  
 Następująca aplikacja konsoli Pokazuje, jak zbiorczo załadować dane przy użyciu połączenia, który jest już otwarty. Tabela docelowa jest to tabela w **AdventureWorks** bazy danych.  
  
 W tym przykładzie połączenie najpierw służy do odczytywania danych z tabeli programu SQL Server w taki sposób, aby <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Źródło danych nie musi znajdować się w programie SQL Server; można użyć dowolnego źródła danych, który może zostać odczytany <xref:System.Data.IDataReader> lub załadować go do <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, chyba że utworzonego tabelami pracy zgodnie z opisem w [Konfiguracja przykładu kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zademonstrowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabele źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze użyj instrukcji Transact-SQL `INSERT … SELECT` instrukcję, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableStreaming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableStreaming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableStreaming : bool with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Włącza lub wyłącza <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu przesyłanie strumieniowe danych z <see cref="T:System.Data.IDataReader" /> obiektu</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> strumieniowo dane z obiektu <see cref="T:System.Data.IDataReader" /> obiektu; w przeciwnym razie wartość false. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A> jest `true`, <xref:System.Data.SqlClient.SqlBulkCopy> odczytuje z <xref:System.Data.IDataReader> przy użyciu <xref:System.Data.CommandBehavior.SequentialAccess>, Optymalizacja użycia pamięci za pomocą <xref:System.Data.IDataReader> funkcjami przesyłania strumieniowego. Gdy jest ustawiona na wartość false, <xref:System.Data.SqlClient.SqlBulkCopy> klasy ładuje wszystkie dane, które są zwracane przez <xref:System.Data.IDataReader> obiektu w pamięci przed wysłaniem ich do programu SQL Server lub SQL Azure.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyAfter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NotifyAfter { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyAfter : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa liczbę wierszy, które mają być przetwarzane przed wygenerowaniem powiadomienia.</summary>
        <value>Wartość całkowitą <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> właściwości lub zero, jeśli nie ustawiono właściwości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest przeznaczona dla składników interfejsu użytkownika, które ilustrują postęp operacji kopiowania zbiorczego. Wskazuje liczbę wierszy, które mają być przetwarzane przed wygenerowaniem powiadomienia. <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Właściwość można ustawić w dowolnym momencie, nawet wtedy, gdy operacji kopiowania zbiorczego jest w toku. Zmiany wprowadzone podczas operacji kopiowania zbiorczego zaczęły obowiązywać, po następnym powiadomień. Nowe ustawienie ma zastosowanie do wszystkich kolejnych operacji wykonywanych na tym samym wystąpieniu.  
  
 Jeśli <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> jest ustawiona na liczbę, mniejsza od zera, <xref:System.ArgumentOutOfRangeException> zgłaszany.  
  
   
  
## Examples  
 Następująca aplikacja konsoli Pokazuje, jak zbiorczo załadować dane przy użyciu połączenia, który jest już otwarty. <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Właściwość jest ustawiona, tak aby program obsługi zdarzeń jest wywoływana po każdym 50 wierszy skopiowane do tabeli.  
  
 W tym przykładzie połączenie najpierw służy do odczytywania danych z tabeli programu SQL Server w taki sposób, aby <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Następnie drugie połączenie jest otwarty do zbiorczego kopiowania danych. Należy zauważyć, że źródło danych nie musi znajdować się w programie SQL Server; można użyć dowolnego źródła danych, który może zostać odczytany <xref:System.Data.IDataReader> lub załadować go do <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, chyba że utworzonego tabelami pracy zgodnie z opisem w [Konfiguracja przykładu kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zademonstrowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabele źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze użyj instrukcji Transact-SQL `INSERT … SELECT` instrukcję, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SqlRowsCopied As SqlRowsCopiedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowsCopiedEventHandler ^ SqlRowsCopied;" />
      <MemberSignature Language="F#" Value="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " Usage="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje za każdym razem, liczba wierszy określoną przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> właściwości zostały przetworzone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy pamiętać, że ustawienia <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> i <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> są niezależne. Odebranie <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> zdarzeń nie oznacza, że wszystkie wiersze zostały wysłane do serwera lub zatwierdzone.  
  
 Nie można wywołać SqlBulkCopy.Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) lub SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) z tego zdarzenia. Takie działanie spowoduje <xref:System.InvalidOperationException> jest zgłaszana i <xref:System.Data.SqlClient.SqlBulkCopy> nie zmieni się stan obiektu. Jeśli użytkownik chce anulować operację z poziomu zdarzenia <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> właściwość <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> mogą być używane. (Zobacz [transakcja i operacje kopiowania masowego](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md) przykłady, które używają <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> właściwości.)  
  
 Brak akcji, takich jak działania transakcji jest obsługiwana w ramach połączenia podczas wykonywania operacji kopiowania zbiorczego i zalecane jest, aby używać tego samego połączenia, które są używane podczas <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> zdarzeń. Jednakże możesz otworzyć inne połączenie.  
  
   
  
## Examples  
 Następująca aplikacja konsoli Pokazuje, jak zbiorczo załadować dane przy użyciu połączenia, który jest już otwarty. <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Właściwość jest ustawiona, tak aby program obsługi zdarzeń jest wywoływana po każdym 50 wierszy skopiowane do tabeli.  
  
 W tym przykładzie połączenie najpierw służy do odczytywania danych z tabeli programu SQL Server w taki sposób, aby <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Należy zauważyć, że źródło danych nie musi znajdować się w programie SQL Server; można użyć dowolnego źródła danych, który może zostać odczytany <xref:System.Data.IDataReader> lub załadować go do <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, chyba że utworzonego tabelami pracy zgodnie z opisem w [Konfiguracja przykładu kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zademonstrowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabele źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze użyj instrukcji Transact-SQL `INSERT … SELECT` instrukcję, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez bieżące wystąpienie <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj `Dispose` po zakończeniu przy użyciu <xref:System.Data.SqlClient.SqlBulkCopy>. `Dispose` Pozostawia metoda <xref:System.Data.SqlClient.SqlBulkCopy> w stanie uniemożliwiającym jego używanie. Po wywołaniu `Dispose`, trzeba zwolnić wszystkie odwołania do <xref:System.Data.SqlClient.SqlBulkCopy> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć, <xref:System.Data.SqlClient.SqlBulkCopy> zajmowaną przez wystąpienie.  
  
 Aby uzyskać więcej informacji, zobacz [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) i [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Zawsze wywołuj `Dispose` przed publikacją swoje ostatnie odwołanie do <xref:System.Data.SqlClient.SqlBulkCopy>. W przeciwnym razie zasobów jest przy użyciu nie zostanie zwolniona, dopóki moduł odśmiecania pamięci wywołuje <xref:System.Data.SqlClient.SqlBulkCopy> obiektu `Finalize` metody.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Kopiuje wszystkie wiersze ze źródła danych do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wiele aktywnych zestawów wyników (MARS) jest wyłączone, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> sprawia, że połączenie jest zajęte. Jeśli MARS jest włączone, można przeplatać wywołania <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> z innymi poleceniami, w tym samym połączeniu.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.Common.DbDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">A <see cref="T:System.Data.Common.DbDataReader" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>Kopiuje wszystkie wiersze z podanym <see cref="T:System.Data.Common.DbDataReader" /> tablicy do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataRow[] -&gt; unit" Usage="sqlBulkCopy.WriteToServer rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">Tablica <see cref="T:System.Data.DataRow" /> obiektów, które zostaną skopiowane do tabeli docelowej.</param>
        <summary>Kopiuje wszystkie wiersze z podanym <see cref="T:System.Data.DataRow" /> tablicy do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas operacji kopiowania zbiorczego jest w toku, skojarzone docelowy <xref:System.Data.SqlClient.SqlConnection> jest zajęty obsługująca i w ramach połączenia można wykonać żadnych innych operacji.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> Kolekcji mapy z <xref:System.Data.DataRow> kolumn do tabeli docelowej bazy danych.  
  
   
  
## Examples  
 Następująca aplikacja konsoli Pokazuje, jak zbiorczo załadować dane z <xref:System.Data.DataRow> tablicy. Tabela docelowa jest to tabela w **AdventureWorks** bazy danych.  
  
 W tym przykładzie <xref:System.Data.DataTable> jest tworzony w czasie wykonywania. Pojedynczy wiersz jest wybrana w zaufanym <xref:System.Data.DataTable> do skopiowania do tabeli docelowej.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, chyba że utworzonego tabelami pracy zgodnie z opisem w [Konfiguracja przykładu kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zademonstrowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabele źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze użyj instrukcji Transact-SQL `INSERT … SELECT` instrukcję, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable -&gt; unit" Usage="sqlBulkCopy.WriteToServer table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">A <see cref="T:System.Data.DataTable" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>Kopiuje wszystkie wiersze w podanym <see cref="T:System.Data.DataTable" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie wiersze w <xref:System.Data.DataTable> są kopiowane do tabeli docelowej z wyjątkiem tych, które zostały usunięte.  
  
 Podczas operacji kopiowania zbiorczego jest w toku, skojarzone docelowy <xref:System.Data.SqlClient.SqlConnection> jest zajęty obsługująca i w ramach połączenia można wykonać żadnych innych operacji.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> Kolekcji mapy z <xref:System.Data.DataTable> kolumn do tabeli docelowej bazy danych.  
  
   
  
## Examples  
 Następująca aplikacja konsoli Pokazuje, jak zbiorczo załadować dane z <xref:System.Data.DataTable>. Tabela docelowa jest to tabela w **AdventureWorks** bazy danych.  
  
 W tym przykładzie <xref:System.Data.DataTable> jest tworzony w czasie wykonywania i jest źródłem `SqlBulkCopy` operacji.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, chyba że utworzonego tabelami pracy zgodnie z opisem w [Konfiguracja przykładu kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zademonstrowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabele źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze użyj instrukcji Transact-SQL `INSERT … SELECT` instrukcję, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.IDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">A <see cref="T:System.Data.IDataReader" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>Kopiuje wszystkie wiersze w podanym <see cref="T:System.Data.IDataReader" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja kopiowania rozpoczyna się w następnym wierszu dostępne w czytniku. W większości przypadków, czytnik właśnie został zwrócony przez <xref:System.Data.IDbCommand.ExecuteReader%2A> lub podobne wywołanie, aby następny wiersz dostępne jest pierwszy wiersz. Aby przetwarzać wiele wyników, należy wywołać <xref:System.Data.IDataReader.NextResult%2A> czytnik danych i wywołania <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> ponownie.  
  
 Należy pamiętać, że używanie <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> modyfikuje stanu czytnika. Metoda wywoła <xref:System.Data.IDataReader.Read%2A> do momentu zwraca wartość false, operacja została przerwana lub wystąpi błąd. Oznacza to, że czytnik danych będzie w innym stanie prawdopodobnie pod koniec zestawu wyników, gdy <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operacja została zakończona.  
  
 Podczas operacji kopiowania zbiorczego jest w toku, skojarzone docelowy <xref:System.Data.SqlClient.SqlConnection> jest zajęty obsługująca i w ramach połączenia można wykonać żadnych innych operacji.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> Kolekcji mapuje z danych czytnika kolumny tabeli docelowej bazy danych.  
  
   
  
## Examples  
 Następująca aplikacja konsoli Pokazuje, jak zbiorczo załadować dane z <xref:System.Data.SqlClient.SqlDataReader>. Tabela docelowa jest to tabela w **AdventureWorks** bazy danych.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, chyba że utworzonego tabelami pracy zgodnie z opisem w [Konfiguracja przykładu kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zademonstrowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabele źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze użyj instrukcji Transact-SQL `INSERT … SELECT` instrukcję, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable, rowState As DataRowState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable * System.Data.DataRowState -&gt; unit" Usage="sqlBulkCopy.WriteToServer (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="table">A <see cref="T:System.Data.DataTable" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="rowState">Wartość z zakresu od <see cref="T:System.Data.DataRowState" /> wyliczenia. Tylko odpowiadające stanu wiersza wiersze są kopiowane do miejsca docelowego.</param>
        <summary>Kopiuje tylko wiersze spełniające stanu wiersza podane w podanym <see cref="T:System.Data.DataTable" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko wiersze, w <xref:System.Data.DataTable> znajdujących się w Stanach czcionką `rowState` argument, a nie usuwane są kopiowane do tabeli docelowej.  
  
> [!NOTE]
>  Jeśli <xref:System.Data.DataRowState.Deleted> jest określony, wszystkie <xref:System.Data.DataRowState.Unchanged>, <xref:System.Data.DataRowState.Added>, i <xref:System.Data.DataRowState.Modified> wierszy również zostaną skopiowane na serwer. Zostanie wygenerowany żaden wyjątek.  
  
 Podczas operacji kopiowania zbiorczego jest w toku, skojarzone docelowy <xref:System.Data.SqlClient.SqlConnection> jest zajęty obsługująca i w ramach połączenia można wykonać żadnych innych operacji.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> Kolekcji mapy z <xref:System.Data.DataTable> kolumn do tabeli docelowej bazy danych.  
  
   
  
## Examples  
 Następujące konsoli aplikacji pokazuje, jak zbiorczo załadować tylko wiersze z <xref:System.Data.DataTable> odpowiadających określonym stanie. W tym przypadku są dodawane tylko wiersze bez zmian. Tabela docelowa jest to tabela w **AdventureWorks** bazy danych.  
  
 W tym przykładzie <xref:System.Data.DataTable> jest tworzony w czasie wykonywania i trzy wiersze są dodawane do niego. Przed <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> metoda jest wykonywana, jeden z wierszy jest edytowany. <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Metoda jest wywoływana z `DataRowState.Unchanged` `rowState` argument, dlatego tylko dwa wiersze bez zmian są kopiowane do lokalizacji docelowej masowo.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, chyba że utworzonego tabelami pracy zgodnie z opisem w [Konfiguracja przykładu kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zademonstrowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabele źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze użyj instrukcji Transact-SQL `INSERT … SELECT` instrukcję, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Asynchroniczna wersja <see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" />, która kopiuje wszystkie wiersze ze źródła danych do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wiele aktywnych zestawów wyników (MARS) jest wyłączone, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> sprawia, że połączenie jest zajęte. Jeśli MARS jest włączone, można przeplatać wywołania <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> z innymi poleceniami, w tym samym połączeniu.  
  
 Liczba wierszy, które jest wycofywany po awarii jednego jest zależna od kilka rzeczy:  
  
-   Jeśli <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> jest określony.  
  
-   Jeśli masz własne transakcji.  
  
-   Wartość <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
 Gdy wystąpi błąd podczas wysyłania danych do serwera bieżącej partii (zgodnie z określonym <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>) zostanie wycofana. Jeśli <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> nie jest określona i mieć własne transakcji, cała transakcja zostanie wycofana (co obejmuje również wszystkich poprzednich partii finansowe).  
  
 Użyj <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> wiedzieć, ile wierszy zostały skopiowane do serwera.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">A <see cref="T:System.Data.Common.DbDataReader" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>To wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, który kopiuje wszystkie wiersze z podanym <see cref="T:System.Data.Common.DbDataReader" /> tablicy do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">Tablica <see cref="T:System.Data.DataRow" /> obiektów, które zostaną skopiowane do tabeli docelowej.</param>
        <summary>To wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, który kopiuje wszystkie wiersze z podanym <see cref="T:System.Data.DataRow" /> tablicy do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w .NET Framework Data Provider for SQL Server, zobacz [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> wiele razy dla tego samego wystąpienia przed zakończeniem zadania.  
  
Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> i <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> dla tego samego wystąpienia przed zakończeniem zadania.  
  
Połączenie maleje lub jest zamykane podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> wykonywania.  
  
Zwracane w obiekt zadania <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
Zwracana w obiekt zadania, wystąpił limit czasu puli połączeń.  
  
Zwracane w obiekt zadania <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracana w obiekt zadania, a wszelkie błędy zwrócone przez program SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">A <see cref="T:System.Data.DataTable" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>To wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, który kopiuje wszystkie wiersze w podanym <see cref="T:System.Data.DataTable" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w .NET Framework Data Provider for SQL Server, zobacz [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> wiele razy dla tego samego wystąpienia przed zakończeniem zadania.  
  
Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> i <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> dla tego samego wystąpienia przed zakończeniem zadania.  
  
Połączenie maleje lub jest zamykane podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> wykonywania.  
  
Zwracane w obiekt zadania <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
Zwracana w obiekt zadania, wystąpił limit czasu puli połączeń.  
  
Zwracane w obiekt zadania <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracana w obiekt zadania, a wszelkie błędy zwrócone przez program SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">A <see cref="T:System.Data.IDataReader" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>To wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, który kopiuje wszystkie wiersze w podanym <see cref="T:System.Data.IDataReader" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w .NET Framework Data Provider for SQL Server, zobacz [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> wiele razy dla tego samego wystąpienia przed zakończeniem zadania.  
  
Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> i <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> dla tego samego wystąpienia przed zakończeniem zadania.  
  
Połączenie maleje lub jest zamykane podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> wykonywania.  
  
Zwracane w obiekt zadania <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
Zwracana w obiekt zadania, wystąpił limit czasu puli połączeń.  
  
Zwracane w obiekt zadania <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
<see cref="T:System.Data.IDataReader" /> Zostało zamknięte przed ukończoną <see cref="T:System.Threading.Tasks.Task" /> zwracane.  
  
<see cref="T:System.Data.IDataReader" />Użytkownika skojarzone z nimi połączenie zostało zamknięte przed ukończoną <see cref="T:System.Threading.Tasks.Task" /> zwracane.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracana w obiekt zadania, a wszelkie błędy zwrócone przez program SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">A <see cref="T:System.Data.Common.DbDataReader" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="cancellationToken">Instrukcja anulowania. A <see cref="P:System.Threading.CancellationToken.None" /> wartości tego parametru sprawia, że ta metoda jest odpowiednikiem <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />.</param>
        <summary>To wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, który kopiuje wszystkie wiersze z podanym <see cref="T:System.Data.Common.DbDataReader" /> tablicy do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (rows, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="rows">Tablica <see cref="T:System.Data.DataRow" /> obiektów, które zostaną skopiowane do tabeli docelowej.</param>
        <param name="cancellationToken">Instrukcja anulowania. A <see cref="P:System.Threading.CancellationToken.None" /> wartości tego parametru sprawia, że ta metoda jest odpowiednikiem <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>To wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, który kopiuje wszystkie wiersze z podanym <see cref="T:System.Data.DataRow" /> tablicy do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.  
  
Token anulowania, może służyć do żądania, czy operacja porzucone, zanim upłynie limit czasu polecenia.  Wyjątki będą raportowane za pośrednictwem zwróconego obiektu zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w .NET Framework Data Provider for SQL Server, zobacz [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> wiele razy dla tego samego wystąpienia przed zakończeniem zadania.  
  
Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> i <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> dla tego samego wystąpienia przed zakończeniem zadania.  
  
Połączenie maleje lub jest zamykane podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> wykonywania.  
  
Zwracane w obiekt zadania <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
Zwracana w obiekt zadania, wystąpił limit czasu puli połączeń.  
  
Zwracane w obiekt zadania <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracana w obiekt zadania, a wszelkie błędy zwrócone przez program SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="table">A <see cref="T:System.Data.DataTable" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="rowState">Wartość z zakresu od <see cref="T:System.Data.DataRowState" /> wyliczenia. Tylko odpowiadające stanu wiersza wiersze są kopiowane do miejsca docelowego.</param>
        <summary>To wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, który kopiuje tylko wiersze spełniające stanu wiersza podane w podanym <see cref="T:System.Data.DataTable" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w .NET Framework Data Provider for SQL Server, zobacz [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> wiele razy dla tego samego wystąpienia przed zakończeniem zadania.  
  
Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> i <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> dla tego samego wystąpienia przed zakończeniem zadania.  
  
Połączenie maleje lub jest zamykane podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> wykonywania.  
  
Zwracane w obiekt zadania <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
Zwracana w obiekt zadania, wystąpił limit czasu puli połączeń.  
  
Zwracane w obiekt zadania <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracana w obiekt zadania, a wszelkie błędy zwrócone przez program SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="table">A <see cref="T:System.Data.DataTable" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="cancellationToken">Instrukcja anulowania. A <see cref="P:System.Threading.CancellationToken.None" /> wartości tego parametru sprawia, że ta metoda jest odpowiednikiem <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>To wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, który kopiuje wszystkie wiersze w podanym <see cref="T:System.Data.DataTable" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.  
  
Token anulowania, może służyć do żądania, czy operacja porzucone, zanim upłynie limit czasu polecenia.  Wyjątki będą raportowane za pośrednictwem zwróconego obiektu zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w .NET Framework Data Provider for SQL Server, zobacz [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> wiele razy dla tego samego wystąpienia przed zakończeniem zadania.  
  
Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> i <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> dla tego samego wystąpienia przed zakończeniem zadania.  
  
Połączenie maleje lub jest zamykane podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> wykonywania.  
  
Zwracane w obiekt zadania <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
Zwracana w obiekt zadania, wystąpił limit czasu puli połączeń.  
  
Zwracane w obiekt zadania <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracana w obiekt zadania, a wszelkie błędy zwrócone przez program SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">A <see cref="T:System.Data.IDataReader" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="cancellationToken">Instrukcja anulowania. A <see cref="P:System.Threading.CancellationToken.None" /> wartości tego parametru sprawia, że ta metoda jest odpowiednikiem <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>To wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, który kopiuje wszystkie wiersze w podanym <see cref="T:System.Data.IDataReader" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.  
  
Token anulowania, może służyć do żądania, czy operacja porzucone, zanim upłynie limit czasu polecenia.  Wyjątki będą raportowane za pośrednictwem zwróconego obiektu zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w .NET Framework Data Provider for SQL Server, zobacz [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> wiele razy dla tego samego wystąpienia przed zakończeniem zadania.  
  
Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> i <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> dla tego samego wystąpienia przed zakończeniem zadania.  
  
Połączenie maleje lub jest zamykane podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> wykonywania.  
  
Zwracane w obiekt zadania <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
Zwracana w obiekt zadania, wystąpił limit czasu puli połączeń.  
  
Zwracane w obiekt zadania <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
<see cref="T:System.Data.IDataReader" /> Zostało zamknięte przed ukończoną <see cref="T:System.Threading.Tasks.Task" /> zwracane.  
  
<see cref="T:System.Data.IDataReader" />Użytkownika skojarzone z nimi połączenie zostało zamknięte przed ukończoną <see cref="T:System.Threading.Tasks.Task" /> zwracane.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracana w obiekt zadania, a wszelkie błędy zwrócone przez program SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="table">A <see cref="T:System.Data.DataTable" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="rowState">Wartość z zakresu od <see cref="T:System.Data.DataRowState" /> wyliczenia. Tylko odpowiadające stanu wiersza wiersze są kopiowane do miejsca docelowego.</param>
        <param name="cancellationToken">Instrukcja anulowania. A <see cref="P:System.Threading.CancellationToken.None" /> wartości tego parametru sprawia, że ta metoda jest odpowiednikiem <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>To wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, który kopiuje tylko wiersze spełniające stanu wiersza podane w podanym <see cref="T:System.Data.DataTable" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.  
  
Token anulowania, może służyć do żądania, czy operacja porzucone, zanim upłynie limit czasu polecenia.  Wyjątki będą raportowane za pośrednictwem zwróconego obiektu zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w .NET Framework Data Provider for SQL Server, zobacz [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> wiele razy dla tego samego wystąpienia przed zakończeniem zadania.  
  
Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> i <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> dla tego samego wystąpienia przed zakończeniem zadania.  
  
Połączenie maleje lub jest zamykane podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> wykonywania.  
  
Zwracane w obiekt zadania <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
Zwracana w obiekt zadania, wystąpił limit czasu puli połączeń.  
  
Zwracane w obiekt zadania <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracana w obiekt zadania, a wszelkie błędy zwrócone przez program SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
  </Members>
</Type>