<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="913de004f355c8ec72b363a3a33c142db5cfa36d" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32038041" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopy&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopy sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Umożliwia wydajne ładowanie zbiorcze tabeli programu SQL Server przy użyciu danych z innego źródła.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft SQL Server zawiera popularne narzędzia wiersza polecenia o nazwie **bcp** do przenoszenia danych z jednej tabeli do innego, czy na jednym serwerze lub między serwerami. <xref:System.Data.SqlClient.SqlBulkCopy> Klasa umożliwia pisanie kodu zarządzanego rozwiązań w zakresie podobnych możliwościach. Istnieją inne sposoby, aby załadować dane do tabeli programu SQL Server (instrukcji INSERT, na przykład), ale <xref:System.Data.SqlClient.SqlBulkCopy> oferuje wydajności znaczących korzyści nad nimi.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> Klasa może być używana do zapisu danych tylko do tabel programu SQL Server. Jednak źródła danych nie jest ograniczona do programu SQL Server; wszystkie źródła danych może służyć, jak długo dane mogą być ładowane do <xref:System.Data.DataTable> wystąpienia lub odczytu z <xref:System.Data.IDataReader> wystąpienia.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> zakończy się niepowodzeniem podczas ładowania zbiorczego <xref:System.Data.DataTable> kolumny typu <xref:System.Data.SqlTypes.SqlDateTime> do programu SQL Server dodać kolumnę, którego typ jest jednym z typów daty/godziny w programie SQL Server 2008.  
  
   
  
## Examples  
 Następującej aplikacji konsoli Pokazuje, jak załadować dane przy użyciu <xref:System.Data.SqlClient.SqlBulkCopy> klasy. W tym przykładzie <xref:System.Data.SqlClient.SqlDataReader> służy do kopiowania danych z **Production.Product** tabeli w programie SQL Server **AdventureWorks** bazy danych do tabeli podobne w tej samej bazy danych.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, jeśli nie utworzono tabel roboczych zgodnie z opisem w [Instalatora przykład kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zaprezentowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabel źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze do używania języka Transact-SQL `INSERT … SELECT` instrukcji, aby skopiować dane.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">Już otwarta <see cref="T:System.Data.SqlClient.SqlConnection" /> wystąpienia, która będzie służyć do wykonywania operacji kopiowania zbiorczego. Jeśli nie są używane parametry połączenia <see langword="Integrated Security = true" />, można użyć <see cref="T:System.Data.SqlClient.SqlCredential" /> do przekazania bezpieczniejsze niż identyfikator użytkownika i hasło określającego identyfikator użytkownika i hasło jako tekst w ciągu połączenia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> przy użyciu określonego otwartego wystąpienia <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ połączenie jest już otwarty podczas <xref:System.Data.SqlClient.SqlBulkCopy> zainicjowano wystąpienia, połączenie pozostaje otwarty po <xref:System.Data.SqlClient.SqlBulkCopy> instancja jest zamknięta.  
  
 Jeśli `connection` argument ma wartość null, <xref:System.ArgumentNullException> jest generowany.  
  
   
  
## Examples  
 Następującej aplikacji konsoli Pokazuje, jak zbiorcze ładowanie danych przy użyciu połączenia, który jest już otwarty. W tym przykładzie <xref:System.Data.SqlClient.SqlDataReader> służy do kopiowania danych z **Production.Product** tabeli w programie SQL Server **AdventureWorks** bazy danych do tabeli podobne w tej samej bazy danych. W tym przykładzie jest tylko w celach demonstracyjnych. Nie należy używać `SqlBulkCopy` do przenoszenia danych z jednej tabeli do innego w tej samej bazy danych w aplikacji produkcyjnej. Należy pamiętać, że źródło danych nie musi znajdować się na serwerze SQL Server; można użyć dowolnego źródła danych, który może zostać odczytany <xref:System.Data.IDataReader> lub załadować do <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, jeśli nie utworzono tabel roboczych zgodnie z opisem w [Instalatora przykład kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zaprezentowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabel źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze do używania języka Transact-SQL `INSERT … SELECT` instrukcji, aby skopiować dane.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Ciąg połączenia, który ma zostać otwarty na potrzeby używania przez definiowanie <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> wystąpienia. Jeśli nie są używane parametry połączenia <see langword="Integrated Security = true" />, można użyć <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> lub <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> i <see cref="T:System.Data.SqlClient.SqlCredential" /> do przekazania bezpieczniejsze niż identyfikator użytkownika i hasło określającego identyfikator użytkownika i hasło jako tekst w ciągu połączenia.</param>
        <summary>Inicjuje i otwiera nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlConnection" /> oparte na podane <paramref name="connectionString" />. Używa konstruktora <see cref="T:System.Data.SqlClient.SqlConnection" /> zainicjować nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Połączenie jest zamykane automatycznie po zakończeniu operacji kopiowania zbiorczego.  
  
 Jeśli `connectionString` ma wartość null, <xref:System.ArgumentNullException> jest generowany. Jeśli `connectionString` to ciąg pusty <xref:System.ArgumentException> jest generowany.  
  
   
  
## Examples  
 Następującej aplikacji konsoli Pokazuje, jak ładowanie danych zbiorczo za pomocą połączenia określony jako ciąg. Połączenie zostaje automatycznie zamknięty kiedy <xref:System.Data.SqlClient.SqlBulkCopy> instancja jest zamknięta.  
  
 W tym przykładzie źródło danych, najpierw zostanie odczytany z tabeli programu SQL Server w taki sposób, aby <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Źródło danych nie musi znajdować się na serwerze SQL Server; można użyć dowolnego źródła danych, który może zostać odczytany <xref:System.Data.IDataReader> lub załadować do <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, jeśli nie utworzono tabel roboczych zgodnie z opisem w [Instalatora przykład kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zaprezentowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabel źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze do używania języka Transact-SQL `INSERT … SELECT` instrukcji, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, copyOptions As SqlBulkCopyOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString, System::Data::SqlClient::SqlBulkCopyOptions copyOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">Ciąg połączenia, który ma zostać otwarty na potrzeby używania przez definiowanie <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> wystąpienia. Jeśli nie są używane parametry połączenia <see langword="Integrated Security = true" />, można użyć <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> lub <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> i <see cref="T:System.Data.SqlClient.SqlCredential" /> do przekazania bezpieczniejsze niż identyfikator użytkownika i hasło określającego identyfikator użytkownika i hasło jako tekst w ciągu połączenia.</param>
        <param name="copyOptions">Kombinacja wartości z <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> wyliczenie określające wierszy źródła danych, które są kopiowane do tabeli docelowej.</param>
        <summary>Inicjuje i otwiera nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlConnection" /> oparte na podane <paramref name="connectionString" />. Używa konstruktora, który <see cref="T:System.Data.SqlClient.SqlConnection" /> zainicjować nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> klasy. <see cref="T:System.Data.SqlClient.SqlConnection" /> Wystąpienia działa zgodnie z podanym w opcji <paramref name="copyOptions" /> parametru.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz uzyskać szczegółowe informacje o wszystkich opcjach kopiowania zbiorczego w <xref:System.Data.SqlClient.SqlBulkCopyOptions> tematu.  
  
   
  
## Examples  
 Następującej aplikacji konsoli Pokazuje, jak wykonać ładowania zbiorczego przy użyciu połączenia określony jako ciąg. Opcja jest ustawiona na Użyj wartości w kolumnie tożsamości tabeli źródłowej podczas ładowania tabeli docelowej. W tym przykładzie źródło danych, najpierw zostanie odczytany z tabeli programu SQL Server w taki sposób, aby <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. W tabeli źródłowej, jak i tabela docelowa obejmują kolumny tożsamości. Domyślnie nową wartość dla **tożsamości** wygenerowaniu kolumny w tabeli docelowej dla każdego wiersza dodane. W tym przykładzie ustawiono opcję po otwarciu połączenia wymusza proces ładowania zbiorczego do użycia **tożsamości** zamiast wartości z tabeli źródłowej. Aby zobaczyć, jak opcja zmienia sposób działania ładowania zbiorczego, uruchom próbkę **dbo. BulkCopyDemoMatchingColumns** tabela jest pusta. Załaduj wszystkie wiersze ze źródła. Następnie uruchom próbkę ponownie bez opróżniania tabeli. Wyjątek i kod zapisuje komunikat w konsoli, informujący, że wiersze nie zostały dodane z powodu naruszenia ograniczenia klucza podstawowego.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, jeśli nie utworzono tabel roboczych zgodnie z opisem w [Instalatora przykład kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zaprezentowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabel źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze do używania języka Transact-SQL `INSERT … SELECT` instrukcji, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlBulkCopyOptions copyOptions, System::Data::SqlClient::SqlTransaction ^ externalTransaction);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection">Już otwarta <see cref="T:System.Data.SqlClient.SqlConnection" /> wystąpienia, która będzie służyć do wykonywania kopiowania zbiorczego. Jeśli nie są używane parametry połączenia <see langword="Integrated Security = true" />, można użyć <see cref="T:System.Data.SqlClient.SqlCredential" /> do przekazania bezpieczniejsze niż identyfikator użytkownika i hasło określającego identyfikator użytkownika i hasło jako tekst w ciągu połączenia.</param>
        <param name="copyOptions">Kombinacja wartości z <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> wyliczenie określające wierszy źródła danych, które są kopiowane do tabeli docelowej.</param>
        <param name="externalTransaction">Istniejące <see cref="T:System.Data.SqlClient.SqlTransaction" /> wystąpienie w ramach którego zostanie przeprowadzona kopiowania zbiorczego.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> przy użyciu dostarczonego istniejących otwartego wystąpienia <see cref="T:System.Data.SqlClient.SqlConnection" />. <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> Wystąpienia działa zgodnie z podanym w opcji <paramref name="copyOptions" /> parametru. Jeśli inne niż null <see cref="T:System.Data.SqlClient.SqlTransaction" /> jest podany, operacje kopiowania będą wykonywane w ramach tej transakcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli dostępne są następujące opcje `UseInternalTransaction` i `externalTransaction` argument nie jest zerowa, **InvalidArgumentException** jest generowany.  
  
 Aby uzyskać przykłady pokazujące, jak używać `SqlBulkCopy` w transakcji, zobacz [transakcji i operacje kopiowania masowego](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Liczba wierszy w każdej z partii. Po zakończeniu poszczególnych partii wierszy w partii są wysyłane do serwera.</summary>
        <value>Wartość całkowita <see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> właściwości lub zero, jeśli wartość nie została ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Plik wsadowy jest pełna, gdy <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> wiersze zostały przetworzone lub nie ma żadnych więcej wierszy, aby wysłać do docelowego źródła danych.  
  
 Zero (domyślnie) wskazuje, że każdy <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operacja jest pojedyncza partia.  
  
 Jeśli <xref:System.Data.SqlClient.SqlBulkCopy> wystąpienia została zadeklarowana bez <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> opcja w praktyce wiersze są wysyłane do serwera <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> wiersze na raz, ale nie działania związane z transakcji jest zajęta. Jeśli <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> obowiązuje, każdej z partii wierszy są wstawiane jako osobnej transakcji.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> Właściwość można ustawić w dowolnym momencie. Jeśli kopiowanie masowe jest już w toku, zgodnie z poprzednim rozmiar partii jest o rozmiarze bieżącej partii. Partie kolejnych Użyj nowego rozmiaru. Jeśli <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> początkowo wynosi zero i zmienione podczas <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operacja jest już w toku, że operacja ładuje dane jako pojedyncza partia. Wszystkie kolejne <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operacji na tym samym <xref:System.Data.SqlClient.SqlBulkCopy> użyć nowego wystąpienia <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
   
  
## Examples  
 Następującej aplikacji konsoli Pokazuje, jak ładowanie danych w partiach 50 wierszy zbiorczo. Na przykład ilustrujący sposób <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> współpracuje z transakcji, zobacz [transakcji i operacje kopiowania masowego](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 W tym przykładzie źródło danych, najpierw zostanie odczytany z tabeli programu SQL Server w taki sposób, aby <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Źródło danych nie musi znajdować się na serwerze SQL Server; można użyć dowolnego źródła danych, który może zostać odczytany <xref:System.Data.IDataReader> lub załadować do <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, jeśli nie utworzono tabel roboczych zgodnie z opisem w [Instalatora przykład kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zaprezentowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabel źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze do używania języka Transact-SQL `INSERT … SELECT` instrukcji, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BulkCopyTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulkCopyTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Liczba sekund dla operacji zanim upłynie limit czasu.</summary>
        <value>Wartość całkowita <see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" /> właściwości. Wartość domyślna to 30 sekund. Wartość 0 oznacza brak limitu; kopiowania zbiorczego będzie czekać w nieskończoność.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli operacja jest limit czasu, transakcja nie została zatwierdzona i wszystkie skopiowane wiersze zostaną usunięte z tabeli docelowej.  
  
   
  
## Examples  
 Następującej aplikacji konsoli Pokazuje, jak można zmodyfikować limitu czasu 60 sekund zbiorcze podczas ładowania danych.  
  
 W tym przykładzie źródło danych, najpierw zostanie odczytany z tabeli programu SQL Server w taki sposób, aby <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Źródło danych nie musi znajdować się na serwerze SQL Server; można użyć dowolnego źródła danych, który może zostać odczytany <xref:System.Data.IDataReader> lub załadować do <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, jeśli nie utworzono tabel roboczych zgodnie z opisem w [Instalatora przykład kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zaprezentowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabel źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze użyj [!INCLUDE[tsql](~/includes/tsql-md.md)] `INSERT … SELECT` instrukcji, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po wywołaniu metody <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> na <xref:System.Data.SqlClient.SqlBulkCopy> obiekt inna operacja zostanie wykonana pomyślnie. Wywołuje się <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> metoda zgłosi <xref:System.InvalidOperationException>.  
  
 Wywoływanie <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> metody z <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> zdarzenie <xref:System.InvalidOperationException> zostanie wygenerowany.  
  
 Należy pamiętać, że Otwórz <xref:System.Data.SqlClient.SqlBulkCopy> wystąpienia są zamknięte niejawnie na końcu `using` bloku.  
  
   
  
## Examples  
 W poniższym przykładzie użyto takie same <xref:System.Data.SqlClient.SqlBulkCopy> wystąpienie do dodania do dwóch tabel docelowych zamówienia i ich skojarzonych szczegóły. Ponieważ **AdventureWorks** zamówienia tabele są duże, próbki odczytuje tylko zamówień przez pewną liczbę konta i zbiorcze kopiuje tych zleceń i szczegóły do tabel docelowych. <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> Metoda jest używana tylko wtedy, gdy są spełnione oba operacje kopiowania masowego.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, jeśli nie utworzono tabel roboczych zgodnie z opisem w [Instalatora przykład kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zaprezentowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabel źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze do używania języka Transact-SQL `INSERT … SELECT` instrukcji, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ ColumnMappings { System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca kolekcję <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> elementów. Mapowania kolumn zdefiniować relacji między kolumnami w źródle danych i kolumn w lokalizacji docelowej.</summary>
        <value>Kolekcja mapowania kolumn. Domyślnie jest pustej kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli źródło danych i tabeli docelowej mają taką samą liczbę kolumn oraz numerem porządkowym każdej kolumny źródłowej w źródle danych jest zgodny z numerem porządkowym odpowiadającej mu kolumny docelowej <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> kolekcji nie jest konieczne. Jednak jeśli liczby kolumn są różne, lub numer porządkowy pozycji nie są zgodne, należy użyć <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> aby upewnić się, że dane są kopiowane na prawidłowe kolumny.  
  
 Podczas wykonywania operacji kopiowania zbiorczego umożliwia dostęp do tej kolekcji, ale nie można zmienić. Próba ją zmienić zgłosi <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationTableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationTableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nazwa tabeli docelowej na serwerze.</summary>
        <value>Wartość ciągu <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwości lub wartość null, jeśli nie został dostarczony.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> nie została ustawiona podczas <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> jest nazywany <xref:System.ArgumentNullException> jest generowany.  
  
 Jeśli <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> jest modyfikowany podczas <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operacja została uruchomiona, zmiana nie wpływa na bieżącej operacji. Nowy <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> wartość jest używana przy następnym <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> metoda jest wywoływana.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> jest to nazwa trzyczęściowej (`<database>.<owningschema>.<name>`). Jeśli wybierzesz może kwalifikować się nazwy tabeli z bazy danych i schemat będący właścicielem. Jednak jeśli nazwa tabeli używa znaku podkreślenia ("_") ani innych znaków specjalnych, użytkownik musi escape nazwy za pomocą nawiasów, podobnie jak w (`[<database>.<owningschema>.<name_01>]`). Aby uzyskać więcej informacji zobacz temat "Identyfikatory" w dokumentacji SQL Server — książki Online.  
  
 Można danych kopiowanie masowe do tabeli tymczasowej za pomocą wartości, takich jak `tempdb..#table` lub `tempdb.<owner>.#table` dla <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> właściwości.  
  
   
  
## Examples  
 Następującej aplikacji konsoli Pokazuje, jak zbiorcze ładowanie danych przy użyciu połączenia, który jest już otwarty. Miejsce docelowe jest tabela w **AdventureWorks** bazy danych.  
  
 W tym przykładzie połączenie najpierw służy do odczytywania danych z tabeli programu SQL Server w taki sposób, aby <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Źródło danych nie musi znajdować się na serwerze SQL Server; można użyć dowolnego źródła danych, który może zostać odczytany <xref:System.Data.IDataReader> lub załadować do <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, jeśli nie utworzono tabel roboczych zgodnie z opisem w [Instalatora przykład kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zaprezentowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabel źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze do używania języka Transact-SQL `INSERT … SELECT` instrukcji, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableStreaming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableStreaming { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Włącza lub wyłącza <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu do transmisji danych z <see cref="T:System.Data.IDataReader" /> obiektu</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu można przesyłać strumieniowo dane z <see cref="T:System.Data.IDataReader" /> obiektu; w przeciwnym razie wartość false. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A> jest `true`, <xref:System.Data.SqlClient.SqlBulkCopy> odczytuje z <xref:System.Data.IDataReader> przy użyciu <xref:System.Data.CommandBehavior.SequentialAccess>, Optymalizacja użycia pamięci za pomocą <xref:System.Data.IDataReader> przesyłania strumieniowego możliwości. Gdy ma wartość false, <xref:System.Data.SqlClient.SqlBulkCopy> klasy ładuje wszystkie dane zwrócone przez <xref:System.Data.IDataReader> obiektu w pamięci przed wysłaniem ich do programu SQL Server lub SQL Azure.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyAfter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NotifyAfter { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa liczbę wierszy do przetwarzania przed wygenerowaniem powiadomienia.</summary>
        <value>Wartość całkowita <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> właściwości lub zero, jeśli nie ustawiono właściwości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest przeznaczona dla składników interfejsu użytkownika, które ilustrują postęp operacji kopiowania zbiorczego. Wskazuje liczbę wierszy do przetwarzania przed wygenerowaniem powiadomienia. <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Właściwość można ustawić w dowolnym momencie, nawet wtedy, gdy trwa operacja kopiowania zbiorczego. Zmiany wprowadzone podczas operacji kopiowania zbiorczego zaczynają obowiązywać po następnym powiadomień. Nowe ustawienie jest stosowane do wszystkich kolejnych operacji na tym samym wystąpieniu.  
  
 Jeśli <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> jest ustaw wartość mniejsza od zera, <xref:System.ArgumentOutOfRangeException> jest generowany.  
  
   
  
## Examples  
 Następującej aplikacji konsoli Pokazuje, jak zbiorcze ładowanie danych przy użyciu połączenia, który jest już otwarty. <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Właściwość jest ustawiona tak, aby program obsługi zdarzeń jest wywoływana po skopiowaniu co 50 wierszy do tabeli.  
  
 W tym przykładzie połączenie najpierw służy do odczytywania danych z tabeli programu SQL Server w taki sposób, aby <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Następnie drugie połączenie jest otwarty do zbiorczego kopiowania danych. Należy pamiętać, że źródło danych nie musi znajdować się na serwerze SQL Server; można użyć dowolnego źródła danych, który może zostać odczytany <xref:System.Data.IDataReader> lub załadować do <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, jeśli nie utworzono tabel roboczych zgodnie z opisem w [Instalatora przykład kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zaprezentowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabel źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze do używania języka Transact-SQL `INSERT … SELECT` instrukcji, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SqlRowsCopied As SqlRowsCopiedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowsCopiedEventHandler ^ SqlRowsCopied;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje zawsze liczbę wierszy określony przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> właściwości zostały przetworzone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy pamiętać, że ustawienia <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> i <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> są niezależne. Odebranie <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> zdarzeń nie oznacza, że wszystkie wiersze zostały wysłane do serwera lub zatwierdzone.  
  
 Nie można wywołać SqlBulkCopy.Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) lub SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) z tego zdarzenia. To spowoduje <xref:System.InvalidOperationException> zgłoszone i <xref:System.Data.SqlClient.SqlBulkCopy> nie spowoduje zmiany stanu obiektu. Jeśli użytkownik chce anulować operację z poziomu zdarzenia <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> właściwości <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> mogą być używane. (Zobacz [transakcji i operacje kopiowania masowego](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md) przykłady, które używają <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> właściwości.)  
  
 Brak akcji, takich jak działania transakcji jest obsługiwana w połączenia podczas wykonywania operacji kopiowania zbiorczego, i zalecane jest, aby używać tego samego połączenia, które są używane podczas <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> zdarzeń. Jednak możesz otworzyć innego połączenia.  
  
   
  
## Examples  
 Następującej aplikacji konsoli Pokazuje, jak zbiorcze ładowanie danych przy użyciu połączenia, który jest już otwarty. <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Właściwość jest ustawiona tak, aby program obsługi zdarzeń jest wywoływana po skopiowaniu co 50 wierszy do tabeli.  
  
 W tym przykładzie połączenie najpierw służy do odczytywania danych z tabeli programu SQL Server w taki sposób, aby <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Należy pamiętać, że źródło danych nie musi znajdować się na serwerze SQL Server; można użyć dowolnego źródła danych, który może zostać odczytany <xref:System.Data.IDataReader> lub załadować do <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, jeśli nie utworzono tabel roboczych zgodnie z opisem w [Instalatora przykład kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zaprezentowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabel źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze do używania języka Transact-SQL `INSERT … SELECT` instrukcji, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie `Dispose` po zakończeniu przy użyciu <xref:System.Data.SqlClient.SqlBulkCopy>. `Dispose` Pozostawia metody <xref:System.Data.SqlClient.SqlBulkCopy> w stanie uniemożliwiającym jego używanie. Po wywołaniu `Dispose`, konieczne jest zwolnienie wszystkich odwołań do <xref:System.Data.SqlClient.SqlBulkCopy> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć który <xref:System.Data.SqlClient.SqlBulkCopy> klasy.  
  
 Aby uzyskać więcej informacji, zobacz [czyszczenie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i [implementacja metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Wywoływanie zawsze `Dispose` przed zwolnieniem ostatniego odwołania do <xref:System.Data.SqlClient.SqlBulkCopy>. W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <xref:System.Data.SqlClient.SqlBulkCopy> obiektu `Finalize` metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Kopiuje wszystkie wiersze ze źródła danych do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli zestawy wielu aktywnych wyników (MARS) jest wyłączone, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> sprawia, że połączenie jest zajęty. Jeśli MARS jest włączone, można interleave wywołań <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> z innymi poleceniami, w związku z tym samym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::Common::DbDataReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">A <see cref="T:System.Data.Common.DbDataReader" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>Kopiuje wszystkie wiersze z podane <see cref="T:System.Data.Common.DbDataReader" /> tablicy do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">Tablica <see cref="T:System.Data.DataRow" /> obiektów, które zostaną skopiowane do tabeli docelowej.</param>
        <summary>Kopiuje wszystkie wiersze z podane <see cref="T:System.Data.DataRow" /> tablicy do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas operacji kopiowania zbiorczego jest w toku, skojarzono docelowego <xref:System.Data.SqlClient.SqlConnection> jest zajęty obsługująca, a nie inne operacje mogą być wykonywane w ramach połączenia.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> Kolekcji mapy z <xref:System.Data.DataRow> kolumn do tabeli docelowej bazy danych.  
  
   
  
## Examples  
 Następującej aplikacji konsoli Pokazuje, jak ładowanie danych z zbiorczo <xref:System.Data.DataRow> tablicy. Miejsce docelowe jest tabela w **AdventureWorks** bazy danych.  
  
 W tym przykładzie <xref:System.Data.DataTable> jest tworzony w czasie wykonywania. Wybrano pojedynczy wiersz <xref:System.Data.DataTable> można skopiować do tabeli docelowej.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, jeśli nie utworzono tabel roboczych zgodnie z opisem w [Instalatora przykład kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zaprezentowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabel źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze do używania języka Transact-SQL `INSERT … SELECT` instrukcji, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">A <see cref="T:System.Data.DataTable" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>Kopiuje wszystkie wiersze w podane <see cref="T:System.Data.DataTable" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie wiersze w <xref:System.Data.DataTable> są kopiowane do tabeli docelowej z wyjątkiem tych, które zostały usunięte.  
  
 Podczas operacji kopiowania zbiorczego jest w toku, skojarzono docelowego <xref:System.Data.SqlClient.SqlConnection> jest zajęty obsługująca, a nie inne operacje mogą być wykonywane w ramach połączenia.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> Kolekcji mapy z <xref:System.Data.DataTable> kolumn do tabeli docelowej bazy danych.  
  
   
  
## Examples  
 Następującej aplikacji konsoli Pokazuje, jak ładowanie danych z zbiorczo <xref:System.Data.DataTable>. Miejsce docelowe jest tabela w **AdventureWorks** bazy danych.  
  
 W tym przykładzie <xref:System.Data.DataTable> jest tworzony w czasie wykonywania i jest elementem źródłowym `SqlBulkCopy` operacji.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, jeśli nie utworzono tabel roboczych zgodnie z opisem w [Instalatora przykład kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zaprezentowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabel źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze do używania języka Transact-SQL `INSERT … SELECT` instrukcji, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::IDataReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">A <see cref="T:System.Data.IDataReader" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>Kopiuje wszystkie wiersze w podane <see cref="T:System.Data.IDataReader" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja kopiowania rozpoczyna się od następnego wiersza dostępne w czytniku. W większości przypadków, czytnik właśnie został zwrócony przez <xref:System.Data.IDbCommand.ExecuteReader%2A> lub podobne wywołanie, więc następnego wiersza dostępne jest pierwszy wiersz. Aby przetwarzać wiele wyników, należy wywołać <xref:System.Data.IDataReader.NextResult%2A> czytnik danych i wywołanie <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> ponownie.  
  
 Należy pamiętać, że przy użyciu <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> modyfikuje stan czytnika danych. Wywoła metodę <xref:System.Data.IDataReader.Read%2A> do momentu zwraca wartość false, operacja została przerwana lub występuje błąd. Oznacza to, że czytnik danych będzie w innym stanie, prawdopodobnie na końcu zestawu wyników, gdy <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operacja została zakończona.  
  
 Podczas operacji kopiowania zbiorczego jest w toku, skojarzono docelowego <xref:System.Data.SqlClient.SqlConnection> jest zajęty obsługująca, a nie inne operacje mogą być wykonywane w ramach połączenia.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> Kolekcji mapuje danych z czytnika kolumn do tabeli docelowej bazy danych.  
  
   
  
## Examples  
 Następującej aplikacji konsoli Pokazuje, jak ładowanie danych z zbiorczo <xref:System.Data.SqlClient.SqlDataReader>. Miejsce docelowe jest tabela w **AdventureWorks** bazy danych.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, jeśli nie utworzono tabel roboczych zgodnie z opisem w [Instalatora przykład kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zaprezentowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabel źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze do używania języka Transact-SQL `INSERT … SELECT` instrukcji, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable, rowState As DataRowState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="table">A <see cref="T:System.Data.DataTable" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="rowState">Wartość z zakresu od <see cref="T:System.Data.DataRowState" /> wyliczenia. Odpowiadające stanu wiersza tylko wiersze są kopiowane do lokalizacji docelowej.</param>
        <summary>Kopiuje tylko wiersze spełniające podany wiersz stanu w podane <see cref="T:System.Data.DataTable" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko wiersze w <xref:System.Data.DataTable> w Stanach wskazanych w `rowState` argumentów i nie zostały usunięte są kopiowane do tabeli docelowej.  
  
> [!NOTE]
>  Jeśli <xref:System.Data.DataRowState.Deleted> jest określona, wszystkie <xref:System.Data.DataRowState.Unchanged>, <xref:System.Data.DataRowState.Added>, i <xref:System.Data.DataRowState.Modified> wierszy również zostaną skopiowane na serwer. Wyjątek nie zostanie wygenerowany.  
  
 Podczas operacji kopiowania zbiorczego jest w toku, skojarzono docelowego <xref:System.Data.SqlClient.SqlConnection> jest zajęty obsługująca, a nie inne operacje mogą być wykonywane w ramach połączenia.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> Kolekcji mapy z <xref:System.Data.DataTable> kolumn do tabeli docelowej bazy danych.  
  
   
  
## Examples  
 Następujące konsoli aplikacji pokazano, jak przeprowadzić zbiorczą załadować tylko wiersze z <xref:System.Data.DataTable> spełniających określonego stanu. W takim przypadku tylko zmienione wiersze zostaną dodane. Miejsce docelowe jest tabela w **AdventureWorks** bazy danych.  
  
 W tym przykładzie <xref:System.Data.DataTable> jest tworzony w czasie wykonywania i trzy wiersze zostaną dodane do niego. Przed <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> metoda jest wykonywana, jednego z wierszy jest edytowany. <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Metoda jest wywoływana z `DataRowState.Unchanged` `rowState` argumentu, dlatego tylko dwa wiersze bez zmian są kopiowane do lokalizacji docelowej masowo.  
  
> [!IMPORTANT]
>  W tym przykładzie nie będzie działać, jeśli nie utworzono tabel roboczych zgodnie z opisem w [Instalatora przykład kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany do zaprezentowania składnia przy użyciu **SqlBulkCopy** tylko. Jeśli tabel źródłowy i docelowy znajdują się w tym samym wystąpieniu programu SQL Server, jest łatwiejsze i szybsze do używania języka Transact-SQL `INSERT … SELECT` instrukcji, aby skopiować dane.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wersja asynchroniczna elementu <see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" />, która kopiuje wszystkie wiersze ze źródła danych do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli zestawy wielu aktywnych wyników (MARS) jest wyłączone, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> sprawia, że połączenie jest zajęty. Jeśli MARS jest włączone, można interleave wywołań <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> z innymi poleceniami, w związku z tym samym.  
  
 Liczba wierszy, które są wycofywany po awarii jednego zależy od kilka kwestii:  
  
-   Jeśli <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> jest określona.  
  
-   Jeśli masz własne transakcji.  
  
-   Wartość <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
 Gdy występuje błąd podczas wysyłania danych do serwera, bieżącej partii (zgodnie z określonym <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>) zostanie wycofana. Jeśli <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> nie jest określona i ma własną transakcji, cała transakcja zostanie wycofana (co obejmuje także wszystkie instancje poprzedniej).  
  
 Użyj <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> wiedzieć, ile wierszy zostały skopiowane do serwera.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">A <see cref="T:System.Data.Common.DbDataReader" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, która kopiuje wszystkie wiersze z podane <see cref="T:System.Data.Common.DbDataReader" /> tablicy do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">Tablica <see cref="T:System.Data.DataRow" /> obiektów, które zostaną skopiowane do tabeli docelowej.</param>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, która kopiuje wszystkie wiersze z podane <see cref="T:System.Data.DataRow" /> tablicy do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> wiele razy dla tego samego wystąpienia przed ukończeniem zadania.  
  
 Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> i <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> dla tego samego wystąpienia przed ukończeniem zadania.  
  
 Połączenie porzuca lub jest zamknięty podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> wykonywania.  
  
 Zwrócony w obiekcie zadań <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
 Zwracane w obiekt zadania, wystąpił limit czasu puli połączeń.  
  
 Zwrócony w obiekcie zadań <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracane w obiekt zadania błędu zwrócony przez program SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">A <see cref="T:System.Data.DataTable" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, która kopiuje wszystkie wiersze w podane <see cref="T:System.Data.DataTable" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> wiele razy dla tego samego wystąpienia przed ukończeniem zadania.  
  
 Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> i <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> dla tego samego wystąpienia przed ukończeniem zadania.  
  
 Połączenie porzuca lub jest zamknięty podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> wykonywania.  
  
 Zwrócony w obiekcie zadań <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
 Zwracane w obiekt zadania, wystąpił limit czasu puli połączeń.  
  
 Zwrócony w obiekcie zadań <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracane w obiekt zadania błędu zwrócony przez program SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">A <see cref="T:System.Data.IDataReader" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, która kopiuje wszystkie wiersze w podane <see cref="T:System.Data.IDataReader" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> wiele razy dla tego samego wystąpienia przed ukończeniem zadania.  
  
 Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> i <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> dla tego samego wystąpienia przed ukończeniem zadania.  
  
 Połączenie porzuca lub jest zamknięty podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> wykonywania.  
  
 Zwrócony w obiekcie zadań <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
 Zwracane w obiekt zadania, wystąpił limit czasu puli połączeń.  
  
 Zwrócony w obiekcie zadań <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see cref="T:System.Data.IDataReader" /> Został zamknięty przed ukończonej <see cref="T:System.Threading.Tasks.Task" /> zwracane.  
  
 <see cref="T:System.Data.IDataReader" />Jego skojarzony połączenie zostało zamknięte przed ukończonej <see cref="T:System.Threading.Tasks.Task" /> zwrócony.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracane w obiekt zadania błędu zwrócony przez program SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">A <see cref="T:System.Data.Common.DbDataReader" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="cancellationToken">Instrukcja anulowania. A <see cref="P:System.Threading.CancellationToken.None" /> wartość w tym parametrze sprawia, że ta metoda jest odpowiednikiem <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />.</param>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, która kopiuje wszystkie wiersze z podane <see cref="T:System.Data.Common.DbDataReader" /> tablicy do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="rows">Tablica <see cref="T:System.Data.DataRow" /> obiektów, które zostaną skopiowane do tabeli docelowej.</param>
        <param name="cancellationToken">Instrukcja anulowania. A <see cref="P:System.Threading.CancellationToken.None" /> wartość w tym parametrze sprawia, że ta metoda jest odpowiednikiem <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, która kopiuje wszystkie wiersze z podane <see cref="T:System.Data.DataRow" /> tablicy do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.  
  
 Token anulowania może służyć do żądania porzucony operację zanim upłynie limit czasu polecenia.  Wyjątki będą zgłaszane przez zwrócony obiekt zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> wiele razy dla tego samego wystąpienia przed ukończeniem zadania.  
  
 Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> i <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> dla tego samego wystąpienia przed ukończeniem zadania.  
  
 Połączenie porzuca lub jest zamknięty podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> wykonywania.  
  
 Zwrócony w obiekcie zadań <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
 Zwracane w obiekt zadania, wystąpił limit czasu puli połączeń.  
  
 Zwrócony w obiekcie zadań <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracane w obiekt zadania błędu zwrócony przez program SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="table">A <see cref="T:System.Data.DataTable" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="rowState">Wartość z zakresu od <see cref="T:System.Data.DataRowState" /> wyliczenia. Odpowiadające stanu wiersza tylko wiersze są kopiowane do lokalizacji docelowej.</param>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, który kopiuje tylko wiersze spełniające podany wiersz stanu w podane <see cref="T:System.Data.DataTable" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> wiele razy dla tego samego wystąpienia przed ukończeniem zadania.  
  
 Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> i <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> dla tego samego wystąpienia przed ukończeniem zadania.  
  
 Połączenie porzuca lub jest zamknięty podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> wykonywania.  
  
 Zwrócony w obiekcie zadań <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
 Zwracane w obiekt zadania, wystąpił limit czasu puli połączeń.  
  
 Zwrócony w obiekcie zadań <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracane w obiekt zadania błędu zwrócony przez program SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="table">A <see cref="T:System.Data.DataTable" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="cancellationToken">Instrukcja anulowania. A <see cref="P:System.Threading.CancellationToken.None" /> wartość w tym parametrze sprawia, że ta metoda jest odpowiednikiem <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, która kopiuje wszystkie wiersze w podane <see cref="T:System.Data.DataTable" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.  
  
 Token anulowania może służyć do żądania porzucony operację zanim upłynie limit czasu polecenia.  Wyjątki będą zgłaszane przez zwrócony obiekt zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> wiele razy dla tego samego wystąpienia przed ukończeniem zadania.  
  
 Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> i <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> dla tego samego wystąpienia przed ukończeniem zadania.  
  
 Połączenie porzuca lub jest zamknięty podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> wykonywania.  
  
 Zwrócony w obiekcie zadań <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
 Zwracane w obiekt zadania, wystąpił limit czasu puli połączeń.  
  
 Zwrócony w obiekcie zadań <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracane w obiekt zadania błędu zwrócony przez program SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">A <see cref="T:System.Data.IDataReader" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="cancellationToken">Instrukcja anulowania. A <see cref="P:System.Threading.CancellationToken.None" /> wartość w tym parametrze sprawia, że ta metoda jest odpowiednikiem <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, która kopiuje wszystkie wiersze w podane <see cref="T:System.Data.IDataReader" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.  
  
 Token anulowania może służyć do żądania porzucony operację zanim upłynie limit czasu polecenia.  Wyjątki będą zgłaszane przez zwrócony obiekt zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> wiele razy dla tego samego wystąpienia przed ukończeniem zadania.  
  
 Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> i <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> dla tego samego wystąpienia przed ukończeniem zadania.  
  
 Połączenie porzuca lub jest zamknięty podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> wykonywania.  
  
 Zwrócony w obiekcie zadań <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
 Zwracane w obiekt zadania, wystąpił limit czasu puli połączeń.  
  
 Zwrócony w obiekcie zadań <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see cref="T:System.Data.IDataReader" /> Został zamknięty przed ukończonej <see cref="T:System.Threading.Tasks.Task" /> zwracane.  
  
 <see cref="T:System.Data.IDataReader" />Jego skojarzony połączenie zostało zamknięte przed ukończonej <see cref="T:System.Threading.Tasks.Task" /> zwrócony.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracane w obiekt zadania błędu zwrócony przez program SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="table">A <see cref="T:System.Data.DataTable" /> której wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="rowState">Wartość z zakresu od <see cref="T:System.Data.DataRowState" /> wyliczenia. Odpowiadające stanu wiersza tylko wiersze są kopiowane do lokalizacji docelowej.</param>
        <param name="cancellationToken">Instrukcja anulowania. A <see cref="P:System.Threading.CancellationToken.None" /> wartość w tym parametrze sprawia, że ta metoda jest odpowiednikiem <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, który kopiuje tylko wiersze spełniające podany wiersz stanu w podane <see cref="T:System.Data.DataTable" /> do tabeli docelowej, określone przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.  
  
 Token anulowania może służyć do żądania porzucony operację zanim upłynie limit czasu polecenia.  Wyjątki będą zgłaszane przez zwrócony obiekt zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> wiele razy dla tego samego wystąpienia przed ukończeniem zadania.  
  
 Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> i <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> dla tego samego wystąpienia przed ukończeniem zadania.  
  
 Połączenie porzuca lub jest zamknięty podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> wykonywania.  
  
 Zwrócony w obiekcie zadań <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
 Zwracane w obiekt zadania, wystąpił limit czasu puli połączeń.  
  
 Zwrócony w obiekcie zadań <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracane w obiekt zadania błędu zwrócony przez program SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
  </Members>
</Type>