<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4caaf2e6bb3af18f4c4cf0168456a2dbe1ee0d16" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69123650" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopy&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopy sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SqlBulkCopy = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Umożliwia wydajne ładowanie tabeli SQL Server przy użyciu danych z innego źródła.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft SQL Server obejmuje popularne narzędzie wiersza polecenia o nazwie **BCP** do przeniesienia danych z jednej tabeli do drugiej, niezależnie od tego, czy działa na jednym serwerze, czy między serwerami. <xref:System.Data.SqlClient.SqlBulkCopy> Klasa umożliwia pisanie rozwiązań kodu zarządzanego, które zapewniają podobną funkcjonalność. Istnieją inne sposoby ładowania danych do tabeli SQL Server (na przykład instrukcje INSERT), ale <xref:System.Data.SqlClient.SqlBulkCopy> oferują one znaczącą wydajność.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> Klasa może służyć do zapisywania danych tylko w tabelach SQL Server. Jednak źródło danych nie jest ograniczone do SQL Server; można użyć dowolnego źródła danych, o ile dane mogą zostać załadowane do <xref:System.Data.DataTable> wystąpienia lub odczytane <xref:System.Data.IDataReader> za pomocą wystąpienia.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy>Wystąpił błąd podczas ładowania <xref:System.Data.DataTable> zbiorczego kolumny typu <xref:System.Data.SqlTypes.SqlDateTime> do kolumny SQL Server, której typ to jeden z typów daty/godziny dodanych w SQL Server 2008.  
  
   
  
## Examples  
 W poniższej aplikacji konsolowej pokazano, <xref:System.Data.SqlClient.SqlBulkCopy> jak załadować dane przy użyciu klasy. W tym przykładzie <xref:System.Data.SqlClient.SqlDataReader> jest używany do kopiowania danych z tabeli Production **. Product** w bazie danych SQL Server **AdventureWorks** do podobnej tabeli w tej samej bazie danych.  
  
> [!IMPORTANT]
>  Ten przykład nie zostanie uruchomiony, jeśli nie utworzono tabel roboczych, zgodnie z opisem w [przykładowej konfiguracji kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany w celu przedstawienia składni tylko za pomocą **SqlBulkCopy** . Jeśli tabele źródłowe i docelowe znajdują się w tym samym wystąpieniu SQL Server, łatwiej i szybciej można używać instrukcji języka Transact- `INSERT … SELECT` SQL do kopiowania danych.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> klasy.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">Już otwarte <see cref="T:System.Data.SqlClient.SqlConnection" /> wystąpienie, które zostanie użyte do wykonania operacji kopiowania zbiorczego. Jeśli parametry połączenia nie są używane <see langword="Integrated Security = true" />, można użyć <see cref="T:System.Data.SqlClient.SqlCredential" /> , aby bezpiecznie przekazać identyfikator i hasło użytkownika, niż przez określenie identyfikatora użytkownika i hasła jako tekstu w parametrach połączenia.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> klasy przy użyciu określonego otwartego <see cref="T:System.Data.SqlClient.SqlConnection" />wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ połączenie jest już otwarte po <xref:System.Data.SqlClient.SqlBulkCopy> zainicjowaniu wystąpienia, połączenie pozostaje otwarte <xref:System.Data.SqlClient.SqlBulkCopy> po zamknięciu wystąpienia.  
  
 Jeśli argument ma wartość null <xref:System.ArgumentNullException> , jest zgłaszany. `connection`  
  
   
  
## Examples  
 W poniższej aplikacji konsolowej pokazano, jak zbiorczo ładować dane przy użyciu połączenia, które jest już otwarte. W tym przykładzie <xref:System.Data.SqlClient.SqlDataReader> jest używany do kopiowania danych z tabeli Production **. Product** w bazie danych SQL Server **AdventureWorks** do podobnej tabeli w tej samej bazie danych. Ten przykład służy tylko do celów demonstracyjnych. Nie należy używać `SqlBulkCopy` do przenoszenia danych z jednej tabeli do drugiej w tej samej bazie danych w aplikacji produkcyjnej. Należy pamiętać, że dane źródłowe nie muszą znajdować się na SQL Server; można użyć dowolnego źródła danych, które może zostać odczytane <xref:System.Data.IDataReader> lub załadowane <xref:System.Data.DataTable>do.  
  
> [!IMPORTANT]
>  Ten przykład nie zostanie uruchomiony, jeśli nie utworzono tabel roboczych, zgodnie z opisem w [przykładowej konfiguracji kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany w celu przedstawienia składni tylko za pomocą **SqlBulkCopy** . Jeśli tabele źródłowe i docelowe znajdują się w tym samym wystąpieniu SQL Server, łatwiej i szybciej można używać instrukcji języka Transact- `INSERT … SELECT` SQL do kopiowania danych.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Ciąg definiujący połączenie, które będzie otwierane do użycia przez <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> wystąpienie. Jeśli nie korzystasz <see langword="Integrated Security = true" />z parametrów połączenia, możesz użyć <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> opcji lub <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> <see cref="T:System.Data.SqlClient.SqlCredential" /> , aby bezpiecznie przekazać identyfikator i hasło użytkownika, niż przez określenie identyfikatora użytkownika i hasła jako tekstu w parametrach połączenia.</param>
        <summary>Inicjuje i otwiera nowe wystąpienie <see cref="T:System.Data.SqlClient.SqlConnection" /> na podstawie podanego <paramref name="connectionString" />elementu. Konstruktor używa <see cref="T:System.Data.SqlClient.SqlConnection" /> do zainicjowania nowego wystąpienia <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Połączenie jest automatycznie zamykane na końcu operacji kopiowania zbiorczego.  
  
 Jeśli `connectionString` ma wartość null <xref:System.ArgumentNullException> , jest zgłaszany. Jeśli `connectionString` jest pustym ciągiem <xref:System.ArgumentException> , jest zgłaszany.  
  
   
  
## Examples  
 W poniższej aplikacji konsolowej pokazano, jak zbiorczo ładować dane przy użyciu połączenia określonego jako ciąg. Połączenie jest zamykane automatycznie po <xref:System.Data.SqlClient.SqlBulkCopy> zamknięciu wystąpienia.  
  
 W tym przykładzie dane źródłowe są najpierw odczytywane z tabeli SQL Server do <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Dane źródłowe nie muszą znajdować się na SQL Server; można użyć dowolnego źródła danych, które może zostać odczytane <xref:System.Data.IDataReader> lub załadowane <xref:System.Data.DataTable>do.  
  
> [!IMPORTANT]
>  Ten przykład nie zostanie uruchomiony, jeśli nie utworzono tabel roboczych, zgodnie z opisem w [przykładowej konfiguracji kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany w celu przedstawienia składni tylko za pomocą **SqlBulkCopy** . Jeśli tabele źródłowe i docelowe znajdują się w tym samym wystąpieniu SQL Server, łatwiej i szybciej można używać instrukcji języka Transact- `INSERT … SELECT` SQL do kopiowania danych.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Operacje kopiowania masowego w programie SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, copyOptions As SqlBulkCopyOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString, System::Data::SqlClient::SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string * System.Data.SqlClient.SqlBulkCopyOptions -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connectionString, copyOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">Ciąg definiujący połączenie, które będzie otwierane do użycia przez <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> wystąpienie. Jeśli nie korzystasz <see langword="Integrated Security = true" />z parametrów połączenia, możesz użyć <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> opcji lub <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> <see cref="T:System.Data.SqlClient.SqlCredential" /> , aby bezpiecznie przekazać identyfikator i hasło użytkownika, niż przez określenie identyfikatora użytkownika i hasła jako tekstu w parametrach połączenia.</param>
        <param name="copyOptions">Kombinacja wartości z <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> wyliczenia, która określa, które wiersze źródła danych są kopiowane do tabeli docelowej.</param>
        <summary>Inicjuje i otwiera nowe wystąpienie <see cref="T:System.Data.SqlClient.SqlConnection" /> na podstawie podanego <paramref name="connectionString" />elementu. Konstruktor używa tego, <see cref="T:System.Data.SqlClient.SqlConnection" /> aby zainicjować nowe wystąpienie <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> klasy. Wystąpienie zachowuje się zgodnie z opcjami podanymi <paramref name="copyOptions" /> w parametrze. <see cref="T:System.Data.SqlClient.SqlConnection" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz uzyskać szczegółowe informacje o wszystkich opcjach kopiowania zbiorczego w <xref:System.Data.SqlClient.SqlBulkCopyOptions> temacie.  
  
   
  
## Examples  
 W poniższej aplikacji konsolowej pokazano, jak wykonać obciążenie zbiorcze przy użyciu połączenia określonego jako ciąg. Opcja jest ustawiona do używania wartości w kolumnie tożsamość tabeli źródłowej podczas ładowania tabeli docelowej. W tym przykładzie dane źródłowe są najpierw odczytywane z tabeli SQL Server do <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Każda tabela źródłowa i tabela docelowa zawierają kolumnę tożsamości. Domyślnie nowa wartość kolumny **tożsamość** jest generowana w tabeli docelowej dla każdego dodanego wiersza. W tym przykładzie opcja jest ustawiana podczas otwierania połączenia, które wymusza użycie przez proces ładowania zbiorczego wartości **tożsamości** z tabeli źródłowej. Aby zobaczyć, jak opcja zmienia sposób działania ładowania zbiorczego, uruchom próbkę z **dbo. Tabela BulkCopyDemoMatchingColumns** jest pusta. Wszystkie wiersze są ładowane ze źródła. Następnie ponownie uruchom próbkę bez pustej tabeli. Zgłaszany jest wyjątek, a kod zapisuje komunikat w konsoli z informacją o tym, że wiersze nie zostały dodane ze względu na naruszenia ograniczenia PRIMARY KEY.  
  
> [!IMPORTANT]
>  Ten przykład nie zostanie uruchomiony, jeśli nie utworzono tabel roboczych, zgodnie z opisem w [przykładowej konfiguracji kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany w celu przedstawienia składni tylko za pomocą **SqlBulkCopy** . Jeśli tabele źródłowe i docelowe znajdują się w tym samym wystąpieniu SQL Server, łatwiej i szybciej można używać instrukcji języka Transact- `INSERT … SELECT` SQL do kopiowania danych.  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlBulkCopyOptions copyOptions, System::Data::SqlClient::SqlTransaction ^ externalTransaction);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection * System.Data.SqlClient.SqlBulkCopyOptions * System.Data.SqlClient.SqlTransaction -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connection, copyOptions, externalTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection">Już otwarte <see cref="T:System.Data.SqlClient.SqlConnection" /> wystąpienie, które zostanie użyte do wykonania kopiowania zbiorczego. Jeśli parametry połączenia nie są używane <see langword="Integrated Security = true" />, można użyć <see cref="T:System.Data.SqlClient.SqlCredential" /> , aby bezpiecznie przekazać identyfikator i hasło użytkownika, niż przez określenie identyfikatora użytkownika i hasła jako tekstu w parametrach połączenia.</param>
        <param name="copyOptions">Kombinacja wartości z <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> wyliczenia, która określa, które wiersze źródła danych są kopiowane do tabeli docelowej.</param>
        <param name="externalTransaction">Istniejące <see cref="T:System.Data.SqlClient.SqlTransaction" /> wystąpienie, w którym nastąpi kopia zbiorcza.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> klasy przy użyciu podanego istniejącego otwartego <see cref="T:System.Data.SqlClient.SqlConnection" />wystąpienia. Wystąpienie zachowuje się zgodnie z opcjami podanymi <paramref name="copyOptions" /> w parametrze. <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> Jeśli podano wartość różną <see cref="T:System.Data.SqlClient.SqlTransaction" /> od null, operacje kopiowania będą wykonywane w ramach tej transakcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli opcje obejmują `UseInternalTransaction` `externalTransaction` i argument nie ma wartości null, zgłaszany jest **InvalidArgumentException** .  
  
 Przykłady ilustrujące sposób użycia `SqlBulkCopy` w transakcji można znaleźć w temacie [operacje transakcji i kopiowania zbiorczego](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BatchSize : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Liczba wierszy w każdej partii. Na końcu każdej partii wiersze w partii są wysyłane do serwera.</summary>
        <value>Wartość <see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> całkowita właściwości lub zero, jeśli żadna wartość nie została ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Partia zadań została ukończona <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> , gdy wiersze zostały przetworzone lub nie ma więcej wierszy do wysłania do docelowego źródła danych.  
  
 Zero (wartość domyślna) wskazuje, że <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> każda operacja jest pojedynczą operacją wsadową.  
  
 Jeśli wystąpienie zostało zadeklarowane <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> bez zastosowania opcji, wiersze są wysyłane do wierszy serwera <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> w danym momencie, ale nie jest podejmowana żadna akcja związana z transakcją. <xref:System.Data.SqlClient.SqlBulkCopy> Jeśli <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> jest w efekcie, każda partia wierszy jest wstawiana jako oddzielna transakcja.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> Właściwość można ustawić w dowolnym momencie. Jeśli kopia zbiorcza jest już w toku, bieżąca partia ma rozmiar zgodnie z poprzednią ilością partii. W kolejnych partiach jest używany nowy rozmiar. Jeśli program <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> jest początkowo zerem i zmieniany, gdy operacja jest już w toku, ta operacja ładuje dane jako pojedynczą partię. <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> Wszystkie kolejne <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operacje w tym samym <xref:System.Data.SqlClient.SqlBulkCopy> wystąpieniu używają nowego <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
   
  
## Examples  
 W poniższej aplikacji konsolowej pokazano, jak zbiorczo ładować dane w partiach z 50 wierszy. Przykład ilustrujący sposób <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> działania z transakcją zawiera temat [operacje transakcji i kopiowania zbiorczego](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 W tym przykładzie dane źródłowe są najpierw odczytywane z tabeli SQL Server do <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Dane źródłowe nie muszą znajdować się na SQL Server; można użyć dowolnego źródła danych, które może zostać odczytane <xref:System.Data.IDataReader> lub załadowane <xref:System.Data.DataTable>do.  
  
> [!IMPORTANT]
>  Ten przykład nie zostanie uruchomiony, jeśli nie utworzono tabel roboczych, zgodnie z opisem w [przykładowej konfiguracji kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany w celu przedstawienia składni tylko za pomocą **SqlBulkCopy** . Jeśli tabele źródłowe i docelowe znajdują się w tym samym wystąpieniu SQL Server, łatwiej i szybciej można używać instrukcji języka Transact- `INSERT … SELECT` SQL do kopiowania danych.  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Operacje kopiowania masowego w programie SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BulkCopyTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulkCopyTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BulkCopyTimeout : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Liczba sekund oczekiwania na zakończenie operacji przed upływem limitu czasu.</summary>
        <value>Wartość <see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" /> całkowita właściwości. Wartość domyślna to 30 sekund. Wartość 0 oznacza brak limitu; kopia Zbiorcza będzie czekać w nieskończoność.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli operacja przekroczy limit czasu, transakcja nie zostanie zatwierdzona i wszystkie skopiowane wiersze zostaną usunięte z tabeli docelowej.  
  
   
  
## Examples  
 W poniższej aplikacji konsolowej pokazano, jak zmodyfikować limit czasu na 60 sekund podczas ładowania zbiorczego danych.  
  
 W tym przykładzie dane źródłowe są najpierw odczytywane z tabeli SQL Server do <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Dane źródłowe nie muszą znajdować się na SQL Server; można użyć dowolnego źródła danych, które może zostać odczytane <xref:System.Data.IDataReader> lub załadowane <xref:System.Data.DataTable>do.  
  
> [!IMPORTANT]
>  Ten przykład nie zostanie uruchomiony, jeśli nie utworzono tabel roboczych, zgodnie z opisem w [przykładowej konfiguracji kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany w celu przedstawienia składni tylko za pomocą **SqlBulkCopy** . Jeśli tabele źródłowe i docelowe znajdują się w tym samym wystąpieniu SQL Server, łatwiej i szybciej można użyć [!INCLUDE[tsql](~/includes/tsql-md.md)] `INSERT … SELECT` instrukcji kopiowania danych.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="sqlBulkCopy.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> Zamyka wystąpienie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po wywołaniu <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> <xref:System.Data.SqlClient.SqlBulkCopy> obiektu na obiekcie żadna inna operacja nie powiedzie się. Wywołania metody spowodują zgłoszenie elementu <xref:System.InvalidOperationException>. <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>  
  
 Wywołanie metody z zdarzenia powoduje, że <xref:System.InvalidOperationException> ma zostać zgłoszone. <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>  
  
 Należy zauważyć, <xref:System.Data.SqlClient.SqlBulkCopy> że otwarte wystąpienia są zamykane niejawnie na `using` końcu bloku.  
  
   
  
## Examples  
 Poniższy przykład używa tego samego <xref:System.Data.SqlClient.SqlBulkCopy> wystąpienia, aby dodać zamówienia sprzedaży i powiązane z nimi szczegóły do dwóch tabel docelowych. Ponieważ tabele zamówień sprzedaży **AdventureWorks** są duże, przykład odczytuje tylko zamówienia złożone przez określony numer konta i zbiorczo kopiuje te zamówienia i szczegóły do tabel docelowych. <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> Metoda jest używana tylko po zakończeniu obu operacji kopiowania zbiorczego.  
  
> [!IMPORTANT]
>  Ten przykład nie zostanie uruchomiony, jeśli nie utworzono tabel roboczych, zgodnie z opisem w [przykładowej konfiguracji kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany w celu przedstawienia składni tylko za pomocą **SqlBulkCopy** . Jeśli tabele źródłowe i docelowe znajdują się w tym samym wystąpieniu SQL Server, łatwiej i szybciej można używać instrukcji języka Transact- `INSERT … SELECT` SQL do kopiowania danych.  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ ColumnMappings { System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnMappings : System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" Usage="System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca kolekcję <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> elementów. Mapowania kolumn definiują relacje między kolumnami w źródle danych a kolumnami w miejscu docelowym.</summary>
        <value>Kolekcja mapowań kolumn. Domyślnie jest to pusta kolekcja.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli źródło danych i tabela docelowa mają tę samą liczbę kolumn, a pozycja porządkowa każdej kolumny źródłowej w źródle danych dopasowuje pozycję porządkową odpowiedniej kolumny docelowej, <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> kolekcja jest niepotrzebna. Jeśli jednak liczba kolumn jest różna lub pozycje porządkowe nie są spójne, należy użyć <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> , aby upewnić się, że dane są kopiowane do poprawnych kolumn.  
  
 Podczas wykonywania operacji kopiowania zbiorczego można uzyskać dostęp do tej kolekcji, ale nie można jej zmienić. Każda próba zmiany zostanie wygenerowanie <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationTableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationTableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DestinationTableName : string with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nazwa tabeli docelowej na serwerze.</summary>
        <value>Wartość <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> ciągu właściwości, lub wartość null, jeśli nie została podana.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> nie została ustawiona, gdy <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> jest wywoływana, <xref:System.ArgumentNullException> jest zgłaszany.  
  
 Jeśli <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> jest modyfikowany, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> gdy operacja jest uruchomiona, zmiana nie ma wpływu na bieżącą operację. Nowa <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> wartość zostanie użyta przy następnym <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> wywołaniu metody.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A>jest nazwą z trzema częścią`<database>.<owningschema>.<name>`(). Po wybraniu tej opcji można zakwalifikować nazwę tabeli wraz z jej bazą danych i schematem będącym właścicielem. Jeśli jednak nazwa tabeli używa znaku podkreślenia ("_") lub innych znaków specjalnych, należy zmienić nazwę przy użyciu otaczających nawiasów jako (`[<database>.<owningschema>.<name_01>]`). Aby uzyskać więcej informacji, zobacz [identyfikatory bazy danych](/sql/relational-databases/databases/database-identifiers).  
  
 Można zbiorczo kopiować dane do tabeli tymczasowej przy użyciu wartości takiej jak `tempdb..#table` lub `tempdb.<owner>.#table` dla <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> właściwości.  
  
   
  
## Examples  
 W poniższej aplikacji konsolowej pokazano, jak zbiorczo ładować dane przy użyciu połączenia, które jest już otwarte. Tabela docelowa jest tabelą w bazie danych **AdventureWorks** .  
  
 W tym przykładzie połączenie jest najpierw używane do odczytywania danych z tabeli SQL Server do <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Dane źródłowe nie muszą znajdować się na SQL Server; można użyć dowolnego źródła danych, które może zostać odczytane <xref:System.Data.IDataReader> lub załadowane <xref:System.Data.DataTable>do.  
  
> [!IMPORTANT]
>  Ten przykład nie zostanie uruchomiony, jeśli nie utworzono tabel roboczych, zgodnie z opisem w [przykładowej konfiguracji kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany w celu przedstawienia składni tylko za pomocą **SqlBulkCopy** . Jeśli tabele źródłowe i docelowe znajdują się w tym samym wystąpieniu SQL Server, łatwiej i szybciej można używać instrukcji języka Transact- `INSERT … SELECT` SQL do kopiowania danych.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableStreaming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableStreaming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableStreaming : bool with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Włącza lub wyłącza <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt do przesyłania strumieniowego danych <see cref="T:System.Data.IDataReader" /> z obiektu</summary>
        <value><see langword="true" />Jeśli obiekt może przesyłać strumieniowo dane <see cref="T:System.Data.IDataReader" /> z obiektu; w przeciwnym razie, FAŁSZ. <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A> jest `true`, <xref:System.Data.IDataReader> odczytuje z obiektu<xref:System.Data.IDataReader> przy użyciu<xref:System.Data.CommandBehavior.SequentialAccess>, optymalizując użycie pamięci za pomocą możliwości przesyłania strumieniowego. <xref:System.Data.SqlClient.SqlBulkCopy> Gdy jest ustawiona na wartość false, <xref:System.Data.SqlClient.SqlBulkCopy> Klasa ładuje wszystkie dane zwrócone <xref:System.Data.IDataReader> przez obiekt do pamięci przed wysłaniem ich do SQL Server lub SQL Azure.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyAfter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NotifyAfter { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyAfter : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa liczbę wierszy do przetworzenia przed wygenerowaniem zdarzenia powiadomienia.</summary>
        <value>Wartość <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> całkowita właściwości lub zero, jeśli właściwość nie została ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest przeznaczona dla składników interfejsu użytkownika, które ilustrują postęp operacji kopiowania zbiorczego. Wskazuje liczbę wierszy do przetworzenia przed wygenerowaniem zdarzenia powiadomienia. <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Właściwość można ustawić w dowolnym momencie, nawet gdy operacja kopiowania zbiorczego jest w toku. Zmiany wprowadzone podczas operacji kopiowania zbiorczego zaczną obowiązywać po następnym powiadomieniu. Nowe ustawienie ma zastosowanie do wszystkich kolejnych operacji w tym samym wystąpieniu.  
  
 Jeśli <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> jest ustawiona na liczbę mniejszą niż zero <xref:System.ArgumentOutOfRangeException> , zostanie zgłoszony.  
  
   
  
## Examples  
 W poniższej aplikacji konsolowej pokazano, jak zbiorczo ładować dane przy użyciu połączenia, które jest już otwarte. <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Właściwość jest ustawiona tak, aby program obsługi zdarzeń był wywoływany po każdym 50 wierszy skopiowanych do tabeli.  
  
 W tym przykładzie połączenie jest najpierw używane do odczytywania danych z tabeli SQL Server do <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Następnie zostanie otwarte drugie połączenie w celu zbiorczego kopiowania danych. Należy pamiętać, że dane źródłowe nie muszą znajdować się na SQL Server; można użyć dowolnego źródła danych, które może zostać odczytane <xref:System.Data.IDataReader> lub załadowane <xref:System.Data.DataTable>do.  
  
> [!IMPORTANT]
>  Ten przykład nie zostanie uruchomiony, jeśli nie utworzono tabel roboczych, zgodnie z opisem w [przykładowej konfiguracji kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany w celu przedstawienia składni tylko za pomocą **SqlBulkCopy** . Jeśli tabele źródłowe i docelowe znajdują się w tym samym wystąpieniu SQL Server, łatwiej i szybciej można używać instrukcji języka Transact- `INSERT … SELECT` SQL do kopiowania danych.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SqlRowsCopied As SqlRowsCopiedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowsCopiedEventHandler ^ SqlRowsCopied;" />
      <MemberSignature Language="F#" Value="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " Usage="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje za każdym razem, gdy liczba wierszy określona przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> właściwość została przetworzona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy zauważyć, że ustawienia <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> i <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> są niezależne. <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> Otrzymanie zdarzenia nie oznacza, że wszystkie wiersze zostały wysłane do serwera lub zatwierdzone.  
  
 Nie można wywołać metody SqlBulkCopy. Close<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>() ani SqlConnection.<xref:System.Data.SqlClient.SqlConnection.Close%2A>Close () z tego zdarzenia. Spowoduje <xref:System.InvalidOperationException> to wyrzucanie, <xref:System.Data.SqlClient.SqlBulkCopy> a stan obiektu nie ulegnie zmianie. Jeśli użytkownik chce anulować operację ze zdarzenia, <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> można użyć właściwości. (Zobacz [operacje transakcji i kopiowania zbiorczego](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md) , aby zapoznać się <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> z przykładami korzystającymi z właściwości).  
  
 W trakcie wykonywania operacji kopiowania zbiorczego nie jest obsługiwane działanie, takie jak działanie transakcji, i zaleca się, aby nie używać tego samego połączenia, które jest używane w trakcie tego <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> zdarzenia. Można jednak otworzyć inne połączenie.  
  
   
  
## Examples  
 W poniższej aplikacji konsolowej pokazano, jak zbiorczo ładować dane przy użyciu połączenia, które jest już otwarte. <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Właściwość jest ustawiona tak, aby program obsługi zdarzeń był wywoływany po każdym 50 wierszy skopiowanych do tabeli.  
  
 W tym przykładzie połączenie jest najpierw używane do odczytywania danych z tabeli SQL Server do <xref:System.Data.SqlClient.SqlDataReader> wystąpienia. Należy pamiętać, że dane źródłowe nie muszą znajdować się na SQL Server; można użyć dowolnego źródła danych, które może zostać odczytane <xref:System.Data.IDataReader> lub załadowane <xref:System.Data.DataTable>do.  
  
> [!IMPORTANT]
>  Ten przykład nie zostanie uruchomiony, jeśli nie utworzono tabel roboczych, zgodnie z opisem w [przykładowej konfiguracji kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany w celu przedstawienia składni tylko za pomocą **SqlBulkCopy** . Jeśli tabele źródłowe i docelowe znajdują się w tym samym wystąpieniu SQL Server, łatwiej i szybciej można używać instrukcji języka Transact- `INSERT … SELECT` SQL do kopiowania danych.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby używane przez bieżące wystąpienie <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj `Dispose` po zakończeniu korzystania z <xref:System.Data.SqlClient.SqlBulkCopy>. `Dispose` Metoda<xref:System.Data.SqlClient.SqlBulkCopy> pozostawia w stanie niezdatnym do użytku. Po wywołaniu `Dispose`należy wydać wszystkie odwołania <xref:System.Data.SqlClient.SqlBulkCopy> do, aby moduł wyrzucania elementów bezużytecznych mógł odwoływać pamięć <xref:System.Data.SqlClient.SqlBulkCopy> , którą zajmował.  
  
 Aby uzyskać więcej informacji, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i implementowanie [metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Zawsze wywołuj `Dispose` przed wydaniem ostatniego odwołania <xref:System.Data.SqlClient.SqlBulkCopy>do. W przeciwnym razie używane zasoby nie zostaną zwolnione do momentu wywołania <xref:System.Data.SqlClient.SqlBulkCopy> `Finalize` metody obiektu przez moduł zbierający elementy bezużyteczne.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Kopiuje wszystkie wiersze ze źródła danych do tabeli docelowej określonej przez <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> Właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli jest wyłączone wiele aktywnych zestawów wyników (MARS), <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> nawiązanie połączenia jest zajęte. Jeśli usługa Mars jest włączona, można nawiązywać połączenia <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> z innymi poleceniami w ramach tego samego połączenia.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.Common.DbDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">, <see cref="T:System.Data.Common.DbDataReader" /> Którego wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>Kopiuje wszystkie wiersze z dostarczonej <see cref="T:System.Data.Common.DbDataReader" /> tablicy do tabeli docelowej określonej <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> przez właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataRow[] -&gt; unit" Usage="sqlBulkCopy.WriteToServer rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="rows">Tablica <see cref="T:System.Data.DataRow" /> obiektów, które zostaną skopiowane do tabeli docelowej.</param>
        <summary>Kopiuje wszystkie wiersze z dostarczonej <see cref="T:System.Data.DataRow" /> tablicy do tabeli docelowej określonej <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> przez właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy operacja kopiowania zbiorczego jest w toku, skojarzone miejsce docelowe <xref:System.Data.SqlClient.SqlConnection> jest zajęte i nie można wykonać żadnych innych operacji w ramach połączenia.  
  
 Kolekcja <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> jest mapowana <xref:System.Data.DataRow> z kolumn do docelowej tabeli bazy danych.  
  
   
  
## Examples  
 W poniższej aplikacji konsolowej pokazano, jak zbiorczo ładować dane <xref:System.Data.DataRow> z tablicy. Tabela docelowa jest tabelą w bazie danych **AdventureWorks** .  
  
 W tym przykładzie <xref:System.Data.DataTable> jest tworzony w czasie wykonywania. Wybrano pojedynczy wiersz z <xref:System.Data.DataTable> elementu do skopiowania do tabeli docelowej.  
  
> [!IMPORTANT]
>  Ten przykład nie zostanie uruchomiony, jeśli nie utworzono tabel roboczych, zgodnie z opisem w [przykładowej konfiguracji kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany w celu przedstawienia składni tylko za pomocą **SqlBulkCopy** . Jeśli tabele źródłowe i docelowe znajdują się w tym samym wystąpieniu SQL Server, łatwiej i szybciej można używać instrukcji języka Transact- `INSERT … SELECT` SQL do kopiowania danych.  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable -&gt; unit" Usage="sqlBulkCopy.WriteToServer table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table">, <see cref="T:System.Data.DataTable" /> Którego wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>Kopiuje wszystkie wiersze z dostarczone <see cref="T:System.Data.DataTable" /> do tabeli docelowej określonej <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> przez właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie wiersze w programie <xref:System.Data.DataTable> są kopiowane do tabeli docelowej z wyjątkiem tych, które zostały usunięte.  
  
 Gdy operacja kopiowania zbiorczego jest w toku, skojarzone miejsce docelowe <xref:System.Data.SqlClient.SqlConnection> jest zajęte i nie można wykonać żadnych innych operacji w ramach połączenia.  
  
 Kolekcja <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> jest mapowana <xref:System.Data.DataTable> z kolumn do docelowej tabeli bazy danych.  
  
   
  
## Examples  
 W poniższej aplikacji konsolowej pokazano, jak zbiorczo ładować dane <xref:System.Data.DataTable>z programu. Tabela docelowa jest tabelą w bazie danych **AdventureWorks** .  
  
 W tym przykładzie <xref:System.Data.DataTable> jest tworzony w czasie wykonywania i jest źródłem `SqlBulkCopy` operacji.  
  
> [!IMPORTANT]
>  Ten przykład nie zostanie uruchomiony, jeśli nie utworzono tabel roboczych, zgodnie z opisem w [przykładowej konfiguracji kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany w celu przedstawienia składni tylko za pomocą **SqlBulkCopy** . Jeśli tabele źródłowe i docelowe znajdują się w tym samym wystąpieniu SQL Server, łatwiej i szybciej można używać instrukcji języka Transact- `INSERT … SELECT` SQL do kopiowania danych.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.IDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">, <see cref="T:System.Data.IDataReader" /> Którego wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>Kopiuje wszystkie wiersze z dostarczone <see cref="T:System.Data.IDataReader" /> do tabeli docelowej określonej <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> przez właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja kopiowania rozpocznie się w następnym dostępnym wierszu w czytniku. W większości przypadków czytelnik został właśnie zwrócony przez <xref:System.Data.IDbCommand.ExecuteReader%2A> lub podobne wywołanie, więc następnym dostępnym wierszem jest pierwszy wiersz. Aby przetworzyć wiele wyników <xref:System.Data.IDataReader.NextResult%2A> , należy wywołać czytnik danych i <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> ponownie wywołać.  
  
 Należy zauważyć, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> że użycie modyfikuje stan czytnika. Metoda będzie wywoływana <xref:System.Data.IDataReader.Read%2A> , dopóki nie zwróci wartości false, operacja zostanie przerwana lub wystąpi błąd. Oznacza to, że czytnik danych będzie w innym stanie, prawdopodobnie na końcu zestawu wyników, po <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> zakończeniu operacji.  
  
 Gdy operacja kopiowania zbiorczego jest w toku, skojarzone miejsce docelowe <xref:System.Data.SqlClient.SqlConnection> jest zajęte i nie można wykonać żadnych innych operacji w ramach połączenia.  
  
 Kolekcja <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> jest mapowana z kolumn czytnika danych do docelowej tabeli bazy danych.  
  
   
  
## Examples  
 W poniższej aplikacji konsolowej pokazano, jak zbiorczo ładować dane <xref:System.Data.SqlClient.SqlDataReader>z programu. Tabela docelowa jest tabelą w bazie danych **AdventureWorks** .  
  
> [!IMPORTANT]
>  Ten przykład nie zostanie uruchomiony, jeśli nie utworzono tabel roboczych, zgodnie z opisem w [przykładowej konfiguracji kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany w celu przedstawienia składni tylko za pomocą **SqlBulkCopy** . Jeśli tabele źródłowe i docelowe znajdują się w tym samym wystąpieniu SQL Server, łatwiej i szybciej można używać instrukcji języka Transact- `INSERT … SELECT` SQL do kopiowania danych.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable, rowState As DataRowState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable * System.Data.DataRowState -&gt; unit" Usage="sqlBulkCopy.WriteToServer (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table">, <see cref="T:System.Data.DataTable" /> Którego wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="rowState">Wartość z <see cref="T:System.Data.DataRowState" /> wyliczenia. Tylko wiersze pasujące do stanu wiersza są kopiowane do miejsca docelowego.</param>
        <summary>Kopiuje tylko wiersze, które pasują do podanego stanu <see cref="T:System.Data.DataTable" /> wiersza w dostarczonych do tabeli docelowej określonej <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> przez właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko wiersze w <xref:System.Data.DataTable> Stanach, które znajdują się w stanie `rowState` wskazywanym przez argument i nie zostały usunięte, są kopiowane do tabeli docelowej.  
  
> [!NOTE]
>  Jeśli <xref:System.Data.DataRowState.Deleted> jest określony, <xref:System.Data.DataRowState.Unchanged> <xref:System.Data.DataRowState.Added>any, i <xref:System.Data.DataRowState.Modified> wiersze również zostaną skopiowane na serwer. Żaden wyjątek nie zostanie zgłoszony.  
  
 Gdy operacja kopiowania zbiorczego jest w toku, skojarzone miejsce docelowe <xref:System.Data.SqlClient.SqlConnection> jest zajęte i nie można wykonać żadnych innych operacji w ramach połączenia.  
  
 Kolekcja <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> jest mapowana <xref:System.Data.DataTable> z kolumn do docelowej tabeli bazy danych.  
  
   
  
## Examples  
 W poniższej aplikacji konsolowej pokazano <xref:System.Data.DataTable> , jak zbiorczo ładować tylko wiersze w, które pasują do określonego stanu. W takim przypadku dodawane są tylko niezmienione wiersze. Tabela docelowa jest tabelą w bazie danych **AdventureWorks** .  
  
 W tym przykładzie <xref:System.Data.DataTable> jest tworzony w czasie wykonywania i do niego dodawane są trzy wiersze. Przed wykonaniem <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> metody jest edytowany jeden z wierszy. Metoda jest `DataRowState.Unchanged` wywoływana`rowState` z argumentem, dlatego tylko dwa niezmienione wiersze są zbiorczo kopiowane do miejsca docelowego. <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>  
  
> [!IMPORTANT]
>  Ten przykład nie zostanie uruchomiony, jeśli nie utworzono tabel roboczych, zgodnie z opisem w [przykładowej konfiguracji kopiowania zbiorczego](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ten kod jest dostarczany w celu przedstawienia składni tylko za pomocą **SqlBulkCopy** . Jeśli tabele źródłowe i docelowe znajdują się w tym samym wystąpieniu SQL Server, łatwiej i szybciej można używać instrukcji języka Transact- `INSERT … SELECT` SQL do kopiowania danych.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Wykonywanie operacji kopiowania zbiorczego</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Asynchroniczna wersja programu <see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" />, która kopiuje wszystkie wiersze ze źródła danych do tabeli docelowej określonej <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> przez właściwość <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli jest wyłączone wiele aktywnych zestawów wyników (MARS), <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> nawiązanie połączenia jest zajęte. Jeśli usługa Mars jest włączona, można nawiązywać połączenia <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> z innymi poleceniami w ramach tego samego połączenia.  
  
 Liczba wierszy, które są wycofywane w przypadku niepowodzenia, zależy od kilku elementów:  
  
-   Jeśli <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> jest określony.  
  
-   Jeśli masz własną transakcję.  
  
-   Wartość <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
 Jeśli wystąpi błąd podczas wysyłania danych do serwera, bieżąca partia (określona przez <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>) zostanie wycofana. Jeśli <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> nie zostanie określony i masz własną transakcję, cała transakcja zostanie wycofana (obejmuje to również wszystkie wcześniejsze partie).  
  
 Użyj <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> , aby wiedzieć, ile wierszy zostało skopiowanych na serwer.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">, <see cref="T:System.Data.Common.DbDataReader" /> Którego wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>Wersja <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />asynchroniczna, która kopiuje wszystkie wiersze z dostarczonej <see cref="T:System.Data.Common.DbDataReader" /> tablicy do tabeli <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> docelowej określonej <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> przez właściwość obiektu.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows">Tablica <see cref="T:System.Data.DataRow" /> obiektów, które zostaną skopiowane do tabeli docelowej.</param>
        <summary>Wersja <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />asynchroniczna, która kopiuje wszystkie wiersze z dostarczonej <see cref="T:System.Data.DataRow" /> tablicy do tabeli <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> docelowej określonej <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> przez właściwość obiektu.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w Dostawca danych .NET Framework dla SQL Server, zobacz [programowanie asynchroniczne](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> wielu razy dla tego samego wystąpienia przed ukończeniem zadania.  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> i dla tego samego wystąpienia przed ukończeniem zadania.  
  
Połączenie zostanie przerwane lub zamknięte podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> wykonywania.  
  
Zwracany w obiekcie Task, <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
Zwrócono w obiekcie zadania, Przekroczono limit czasu puli połączeń.  
  
Zwracany w obiekcie Task, <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" />jest określony w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracany w obiekcie Task, każdy błąd zwrócony przez SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">, <see cref="T:System.Data.DataTable" /> Którego wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>Wersja <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />asynchroniczna, która kopiuje wszystkie wiersze z dostarczone <see cref="T:System.Data.DataTable" /> do tabeli <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> docelowej określonej <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> przez właściwość obiektu.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w Dostawca danych .NET Framework dla SQL Server, zobacz [programowanie asynchroniczne](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> wielu razy dla tego samego wystąpienia przed ukończeniem zadania.  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> i dla tego samego wystąpienia przed ukończeniem zadania.  
  
Połączenie zostanie przerwane lub zamknięte podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> wykonywania.  
  
Zwracany w obiekcie Task, <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
Zwrócono w obiekcie zadania, Przekroczono limit czasu puli połączeń.  
  
Zwracany w obiekcie Task, <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" />jest określony w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracany w obiekcie Task, każdy błąd zwrócony przez SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">, <see cref="T:System.Data.IDataReader" /> Którego wiersze zostaną skopiowane do tabeli docelowej.</param>
        <summary>Wersja <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />asynchroniczna, która kopiuje wszystkie wiersze z dostarczone <see cref="T:System.Data.IDataReader" /> do tabeli <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> docelowej określonej <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> przez właściwość obiektu.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w Dostawca danych .NET Framework dla SQL Server, zobacz [programowanie asynchroniczne](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> wielu razy dla tego samego wystąpienia przed ukończeniem zadania.  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> i dla tego samego wystąpienia przed ukończeniem zadania.  
  
Połączenie zostanie przerwane lub zamknięte podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> wykonywania.  
  
Zwracany w obiekcie Task, <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
Zwrócono w obiekcie zadania, Przekroczono limit czasu puli połączeń.  
  
Zwracany w obiekcie Task, <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
Zostało zamknięte przed ukończeniem <see cref="T:System.Threading.Tasks.Task" />. <see cref="T:System.Data.IDataReader" />  
  
Skojarzone połączenie zostało zamknięte przed zakończeniem <see cref="T:System.Threading.Tasks.Task" />. <see cref="T:System.Data.IDataReader" />  
  
 <see langword="Context Connection=true" />jest określony w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracany w obiekcie Task, każdy błąd zwrócony przez SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">, <see cref="T:System.Data.Common.DbDataReader" /> Którego wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="cancellationToken">Instrukcja anulowania. Wartość w tym parametrze powoduje, że ta metoda jest równoważna z <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />. <see cref="P:System.Threading.CancellationToken.None" /></param>
        <summary>Wersja <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />asynchroniczna, która kopiuje wszystkie wiersze z dostarczonej <see cref="T:System.Data.Common.DbDataReader" /> tablicy do tabeli <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> docelowej określonej <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> przez właściwość obiektu.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task" />wartość.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (rows, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows">Tablica <see cref="T:System.Data.DataRow" /> obiektów, które zostaną skopiowane do tabeli docelowej.</param>
        <param name="cancellationToken">Instrukcja anulowania. Wartość w tym parametrze powoduje, że ta metoda jest równoważna z <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />. <see cref="P:System.Threading.CancellationToken.None" /></param>
        <summary>Wersja <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />asynchroniczna, która kopiuje wszystkie wiersze z dostarczonej <see cref="T:System.Data.DataRow" /> tablicy do tabeli <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> docelowej określonej <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> przez właściwość obiektu.  
  
Tokenu anulowania można użyć do żądania, aby operacja została porzucona przed upływem limitu czasu polecenia.  Wyjątki będą raportowane za pośrednictwem zwracanego obiektu zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w Dostawca danych .NET Framework dla SQL Server, zobacz [programowanie asynchroniczne](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> wielu razy dla tego samego wystąpienia przed ukończeniem zadania.  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> i dla tego samego wystąpienia przed ukończeniem zadania.  
  
Połączenie zostanie przerwane lub zamknięte podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> wykonywania.  
  
Zwracany w obiekcie Task, <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
Zwrócono w obiekcie zadania, Przekroczono limit czasu puli połączeń.  
  
Zwracany w obiekcie Task, <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" />jest określony w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracany w obiekcie Task, każdy błąd zwrócony przez SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">, <see cref="T:System.Data.DataTable" /> Którego wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="rowState">Wartość z <see cref="T:System.Data.DataRowState" /> wyliczenia. Tylko wiersze pasujące do stanu wiersza są kopiowane do miejsca docelowego.</param>
        <summary>Wersja <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />asynchroniczna, która kopiuje tylko wiersze, które pasują do podanego stanu wiersza <see cref="T:System.Data.DataTable" /> w podanej tabeli <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> docelowej określonej <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> przez właściwość obiektu.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w Dostawca danych .NET Framework dla SQL Server, zobacz [programowanie asynchroniczne](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> wielu razy dla tego samego wystąpienia przed ukończeniem zadania.  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> i dla tego samego wystąpienia przed ukończeniem zadania.  
  
Połączenie zostanie przerwane lub zamknięte podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> wykonywania.  
  
Zwracany w obiekcie Task, <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
Zwrócono w obiekcie zadania, Przekroczono limit czasu puli połączeń.  
  
Zwracany w obiekcie Task, <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" />jest określony w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracany w obiekcie Task, każdy błąd zwrócony przez SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">, <see cref="T:System.Data.DataTable" /> Którego wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="cancellationToken">Instrukcja anulowania. Wartość w tym parametrze powoduje, że ta metoda jest równoważna z <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />. <see cref="P:System.Threading.CancellationToken.None" /></param>
        <summary>Wersja <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />asynchroniczna, która kopiuje wszystkie wiersze z dostarczone <see cref="T:System.Data.DataTable" /> do tabeli <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> docelowej określonej <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> przez właściwość obiektu.  
  
Tokenu anulowania można użyć do żądania, aby operacja została porzucona przed upływem limitu czasu polecenia.  Wyjątki będą raportowane za pośrednictwem zwracanego obiektu zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w Dostawca danych .NET Framework dla SQL Server, zobacz [programowanie asynchroniczne](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> wielu razy dla tego samego wystąpienia przed ukończeniem zadania.  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> i dla tego samego wystąpienia przed ukończeniem zadania.  
  
Połączenie zostanie przerwane lub zamknięte podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> wykonywania.  
  
Zwracany w obiekcie Task, <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
Zwrócono w obiekcie zadania, Przekroczono limit czasu puli połączeń.  
  
Zwracany w obiekcie Task, <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" />jest określony w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracany w obiekcie Task, każdy błąd zwrócony przez SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">, <see cref="T:System.Data.IDataReader" /> Którego wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="cancellationToken">Instrukcja anulowania. Wartość w tym parametrze powoduje, że ta metoda jest równoważna z <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />. <see cref="P:System.Threading.CancellationToken.None" /></param>
        <summary>Wersja <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />asynchroniczna, która kopiuje wszystkie wiersze z dostarczone <see cref="T:System.Data.IDataReader" /> do tabeli <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> docelowej określonej <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> przez właściwość obiektu.  
  
Tokenu anulowania można użyć do żądania, aby operacja została porzucona przed upływem limitu czasu polecenia.  Wyjątki będą raportowane za pośrednictwem zwracanego obiektu zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w Dostawca danych .NET Framework dla SQL Server, zobacz [programowanie asynchroniczne](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> wielu razy dla tego samego wystąpienia przed ukończeniem zadania.  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> i dla tego samego wystąpienia przed ukończeniem zadania.  
  
Połączenie zostanie przerwane lub zamknięte podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> wykonywania.  
  
Zwracany w obiekcie Task, <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
Zwrócono w obiekcie zadania, Przekroczono limit czasu puli połączeń.  
  
Zwracany w obiekcie Task, <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
Zostało zamknięte przed ukończeniem <see cref="T:System.Threading.Tasks.Task" />. <see cref="T:System.Data.IDataReader" />  
  
Skojarzone połączenie zostało zamknięte przed zakończeniem <see cref="T:System.Threading.Tasks.Task" />. <see cref="T:System.Data.IDataReader" />  
  
 <see langword="Context Connection=true" />jest określony w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracany w obiekcie Task, każdy błąd zwrócony przez SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">, <see cref="T:System.Data.DataTable" /> Którego wiersze zostaną skopiowane do tabeli docelowej.</param>
        <param name="rowState">Wartość z <see cref="T:System.Data.DataRowState" /> wyliczenia. Tylko wiersze pasujące do stanu wiersza są kopiowane do miejsca docelowego.</param>
        <param name="cancellationToken">Instrukcja anulowania. Wartość w tym parametrze powoduje, że ta metoda jest równoważna z <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />. <see cref="P:System.Threading.CancellationToken.None" /></param>
        <summary>Wersja <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />asynchroniczna, która kopiuje tylko wiersze, które pasują do podanego stanu wiersza <see cref="T:System.Data.DataTable" /> w podanej tabeli <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> docelowej określonej <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> przez właściwość obiektu.  
  
Tokenu anulowania można użyć do żądania, aby operacja została porzucona przed upływem limitu czasu polecenia.  Wyjątki będą raportowane za pośrednictwem zwracanego obiektu zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w Dostawca danych .NET Framework dla SQL Server, zobacz [programowanie asynchroniczne](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> wielu razy dla tego samego wystąpienia przed ukończeniem zadania.  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> Wywoływanie <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> i dla tego samego wystąpienia przed ukończeniem zadania.  
  
Połączenie zostanie przerwane lub zamknięte podczas <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> wykonywania.  
  
Zwracany w obiekcie Task, <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> obiekt został zamknięty podczas wykonywania metody.  
  
Zwrócono w obiekcie zadania, Przekroczono limit czasu puli połączeń.  
  
Zwracany w obiekcie Task, <see cref="T:System.Data.SqlClient.SqlConnection" /> obiekt jest zamknięty przed wykonaniem metody.  
  
 <see langword="Context Connection=true" />jest określony w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Zwracany w obiekcie Task, każdy błąd zwrócony przez SQL Server, który wystąpił podczas otwierania połączenia.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
