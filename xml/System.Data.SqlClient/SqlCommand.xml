<Type Name="SqlCommand" FullName="System.Data.SqlClient.SqlCommand">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9e8891757412c05298143442978e938ba77595ec" />
    <Meta Name="ms.sourcegitcommit" Value="686b5d3c1059c1af941ad0121b297270715175ab" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/20/2018" />
    <Meta Name="ms.locfileid" Value="36270716" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlCommand : System.Data.Common.DbCommand, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlCommand extends System.Data.Common.DbCommand implements class System.Data.IDbCommand, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlCommand" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlCommand&#xA;Inherits DbCommand&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlCommand sealed : System::Data::Common::DbCommand, ICloneable, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbCommand</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("RecordsAffected")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.SqlCommandDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IDesigner")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem("System.Drawing.Design.ToolboxItem, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje instrukcji języka Transact-SQL lub procedurę składowaną do wykonania na bazie danych programu SQL Server. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy wystąpienie klasy <xref:System.Data.SqlClient.SqlCommand> utworzeniu odczytu/zapisu właściwości są ustawione na wartości początkowe. Aby uzyskać listę tych wartości, zobacz <xref:System.Data.SqlClient.SqlCommand> konstruktora.  
  
 <xref:System.Data.SqlClient.SqlCommand> zawiera następujące metody wykonywania poleceń w bazie danych programu SQL Server:  
  
|Element|Opis|  
|----------|-----------------|  
|<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>|Inicjuje asynchroniczne wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która jest opisane przez to <xref:System.Data.SqlClient.SqlCommand>, zazwyczaj wykonywania poleceń, takich jak wstawianie, usuwanie, aktualizacji i ustaw instrukcje. Każde wywołanie <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> muszą łączyć się z wywołania <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> której zakończy działanie, zazwyczaj w oddzielnym wątku.|  
|<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>|Inicjuje asynchroniczne wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która jest opisane przez to <xref:System.Data.SqlClient.SqlCommand> i pobiera ustawia jeden lub więcej wyników z serwera. Każde wywołanie <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> muszą łączyć się z wywołania <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> której zakończy działanie, zazwyczaj w oddzielnym wątku.|  
|<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>|Inicjuje asynchroniczne wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która jest opisane przez to <xref:System.Data.SqlClient.SqlCommand>. Każde wywołanie `BeginExecuteXmlReader` muszą łączyć się z wywołania `EndExecuteXmlReader`, co zakończy działanie, zazwyczaj w oddzielnym wątku i zwraca <xref:System.Xml.XmlReader> obiektu.|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>|Wykonuje polecenia, które zwracają wierszy. Aby zwiększyć wydajność <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> wywołuje polecenia przy użyciu języka Transact-SQL `sp_executesql` procedury składowanej systemu. W związku z tym <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> może nie mieć efektu, jeśli używany do wykonania polecenia, takich jak instrukcji języka Transact-SQL USTAWIĆ.|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>|Wykonuje polecenia, takich jak instrukcje INSERT języka Transact-SQL, Usuń, aktualizacji i zestawu.|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>|Pobiera pojedynczą wartość (na przykład wartości zagregowanej) z bazy danych.|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>|Wysyła <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> do <xref:System.Data.SqlClient.SqlCommand.Connection%2A> i tworzy <xref:System.Xml.XmlReader> obiektu.|  
  
 Można resetować <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> właściwości i ponowne użycie <xref:System.Data.SqlClient.SqlCommand> obiektu. Jednak należy zamknąć <xref:System.Data.SqlClient.SqlDataReader> przed utworzeniem nowego lub poprzednie polecenie.  
  
 Jeśli <xref:System.Data.SqlClient.SqlException> jest generowany przez wykonanie metody <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlConnection> pozostaje otwarty, gdy poziom ważności jest 19 lub mniej. Jeśli poziom ważności jest 20 lub większą, serwer zwykle zamyka <xref:System.Data.SqlClient.SqlConnection>. Jednak użytkownik może ponownie otworzyć połączenie i kontynuować.  
  
> [!NOTE]
>  Określona, nazywany również porządkowej, parametry nie są obsługiwane przez dostawcę danych .NET Framework dla programu SQL Server.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.SqlClient.SqlConnection>, <xref:System.Data.SqlClient.SqlCommand>, a <xref:System.Data.SqlClient.SqlDataReader>. Przykład odczytuje dane pisania w konsoli. Na koniec zamyka przykładzie <xref:System.Data.SqlClient.SqlDataReader> , a następnie <xref:System.Data.SqlClient.SqlConnection> jako kończy działanie `Using` bloków kodu.  
  
 [!code-csharp[Classic WebData SqlCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand Example/VB/source.vb#1)]  
  
 Poniższy przykład przedstawia sposób tworzyć i wykonywać różne typy obiektów klasy SqlCommand.  
  
 Najpierw należy utworzyć przykładowej bazy danych, wykonując następujący skrypt:  
  
```  
USE [master]  
GO  
  
CREATE DATABASE [MySchool]  
GO  
  
USE [MySchool]  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE procedure [dbo].[CourseExtInfo] @CourseId int  
as  
select c.CourseID,c.Title,c.Credits,d.Name as DepartmentName  
from Course as c left outer join Department as d on c.DepartmentID=d.DepartmentID  
where c.CourseID=@CourseId  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
create procedure [dbo].[DepartmentInfo] @DepartmentId int,@CourseCount int output  
as  
select @CourseCount=Count(c.CourseID)  
from course as c  
where c.DepartmentID=@DepartmentId  
  
select d.DepartmentID,d.Name,d.Budget,d.StartDate,d.Administrator  
from Department as d  
where d.DepartmentID=@DepartmentId  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
Create PROCEDURE [dbo].[GetDepartmentsOfSpecifiedYear]   
@Year int,@BudgetSum money output  
AS  
BEGIN  
        SELECT @BudgetSum=SUM([Budget])  
  FROM [MySchool].[dbo].[Department]  
  Where YEAR([StartDate])=@Year   
  
SELECT [DepartmentID]  
      ,[Name]  
      ,[Budget]  
      ,[StartDate]  
      ,[Administrator]  
  FROM [MySchool].[dbo].[Department]  
  Where YEAR([StartDate])=@Year  
  
END  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Course]([CourseID] [nvarchar](10) NOT NULL,  
[Year] [smallint] NOT NULL,  
[Title] [nvarchar](100) NOT NULL,  
[Credits] [int] NOT NULL,  
[DepartmentID] [int] NOT NULL,  
 CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   
(  
[CourseID] ASC,  
[Year] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Department]([DepartmentID] [int] IDENTITY(1,1) NOT NULL,  
[Name] [nvarchar](50) NOT NULL,  
[Budget] [money] NOT NULL,  
[StartDate] [datetime] NOT NULL,  
[Administrator] [int] NULL,  
 CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   
(  
[DepartmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Person]([PersonID] [int] IDENTITY(1,1) NOT NULL,  
[LastName] [nvarchar](50) NOT NULL,  
[FirstName] [nvarchar](50) NOT NULL,  
[HireDate] [datetime] NULL,  
[EnrollmentDate] [datetime] NULL,  
 CONSTRAINT [PK_School.Student] PRIMARY KEY CLUSTERED   
(  
[PersonID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[StudentGrade]([EnrollmentID] [int] IDENTITY(1,1) NOT NULL,  
[CourseID] [nvarchar](10) NOT NULL,  
[StudentID] [int] NOT NULL,  
[Grade] [decimal](3, 2) NOT NULL,  
 CONSTRAINT [PK_StudentGrade] PRIMARY KEY CLUSTERED   
(  
[EnrollmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
create view [dbo].[EnglishCourse]  
as  
select c.CourseID,c.Title,c.Credits,c.DepartmentID  
from Course as c join Department as d on c.DepartmentID=d.DepartmentID  
where d.Name=N'English'  
  
GO  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  
SET IDENTITY_INSERT [dbo].[Department] ON   
  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  
SET IDENTITY_INSERT [dbo].[Department] OFF  
SET IDENTITY_INSERT [dbo].[Person] ON   
  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (1, N'Hu', N'Nan', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (2, N'Norman', N'Laura', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (3, N'Olivotto', N'Nino', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (4, N'Anand', N'Arturo', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (5, N'Jai', N'Damien', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (6, N'Holt', N'Roger', CAST(0x000097F100000000 AS DateTime), NULL)  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (7, N'Martin', N'Randall', CAST(0x00008B1A00000000 AS DateTime), NULL)  
SET IDENTITY_INSERT [dbo].[Person] OFF  
SET IDENTITY_INSERT [dbo].[StudentGrade] ON   
  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (1, N'C1045', 1, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (2, N'C1045', 2, CAST(3.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (3, N'C1045', 3, CAST(2.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (4, N'C1045', 4, CAST(4.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (5, N'C1045', 5, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (6, N'C1061', 1, CAST(4.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (7, N'C1061', 3, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (8, N'C1061', 4, CAST(2.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (9, N'C1061', 5, CAST(1.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (10, N'C2021', 1, CAST(2.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (11, N'C2021', 2, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (12, N'C2021', 4, CAST(3.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (13, N'C2021', 5, CAST(3.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (14, N'C2042', 1, CAST(2.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (15, N'C2042', 2, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (16, N'C2042', 3, CAST(4.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (17, N'C2042', 5, CAST(3.00 AS Decimal(3, 2)))  
SET IDENTITY_INSERT [dbo].[StudentGrade] OFF  
ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  
REFERENCES [dbo].[Department] ([DepartmentID])  
GO  
ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  
GO  
ALTER TABLE [dbo].[StudentGrade]  WITH CHECK ADD  CONSTRAINT [FK_StudentGrade_Student] FOREIGN KEY([StudentID])  
REFERENCES [dbo].[Person] ([PersonID])  
GO  
ALTER TABLE [dbo].[StudentGrade] CHECK CONSTRAINT [FK_StudentGrade_Student]  
GO  
```  
  
 Następnie należy skompilować i wykonać następujące czynności:  
  
```  
using System;  
using System.Data;  
using System.Data.SqlClient;  
using System.Threading.Tasks;  
  
class Program {  
  
   static class SqlHelper {  
      // Set the connection, command, and then execute the command with non query.  
      public static Int32 ExecuteNonQuery(String connectionString, String commandText,  
          CommandType commandType, params SqlParameter[] parameters) {  
         using (SqlConnection conn = new SqlConnection(connectionString)) {  
            using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  
               // There're three command types: StoredProcedure, Text, TableDirect. The TableDirect   
               // type is only for OLE DB.    
               cmd.CommandType = commandType;  
               cmd.Parameters.AddRange(parameters);  
  
               conn.Open();  
               return cmd.ExecuteNonQuery();  
            }  
         }  
      }  
  
      // Set the connection, command, and then execute the command and only return one value.  
      public static Object ExecuteScalar(String connectionString, String commandText,  
          CommandType commandType, params SqlParameter[] parameters) {  
         using (SqlConnection conn = new SqlConnection(connectionString)) {  
            using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  
               cmd.CommandType = commandType;  
               cmd.Parameters.AddRange(parameters);  
  
               conn.Open();  
               return cmd.ExecuteScalar();  
            }  
         }  
      }  
  
      // Set the connection, command, and then execute the command with query and return the reader.  
      public static SqlDataReader ExecuteReader(String connectionString, String commandText,  
          CommandType commandType, params SqlParameter[] parameters) {  
         SqlConnection conn = new SqlConnection(connectionString);  
  
         using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  
            cmd.CommandType = commandType;  
            cmd.Parameters.AddRange(parameters);  
  
            conn.Open();  
            // When using CommandBehavior.CloseConnection, the connection will be closed when the   
            // IDataReader is closed.  
            SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);  
  
            return reader;  
         }  
      }  
   }  
  
   static void Main(string[] args) {  
      String connectionString = "Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;";  
  
      CountCourses(connectionString, 2012);  
      Console.WriteLine();  
  
      Console.WriteLine("Following result is the departments that started from 2007:");  
      GetDepartments(connectionString, 2007);  
      Console.WriteLine();  
  
      Console.WriteLine("Add the credits when the credits of course is lower than 4.");  
      AddCredits(connectionString, 4);  
      Console.WriteLine();  
  
      Console.WriteLine("Please press any key to exit...");  
      Console.ReadKey();  
   }  
  
   static void CountCourses(String connectionString, Int32 year) {  
      String commandText = "Select Count([CourseID]) FROM [MySchool].[dbo].[Course] Where Year=@Year";  
      SqlParameter parameterYear = new SqlParameter("@Year", SqlDbType.Int);  
      parameterYear.Value = year;  
  
      Object oValue = SqlHelper.ExecuteScalar(connectionString, commandText, CommandType.Text, parameterYear);  
      Int32 count;  
      if (Int32.TryParse(oValue.ToString(), out count))  
         Console.WriteLine("There {0} {1} course{2} in {3}.", count > 1 ? "are" : "is", count, count > 1 ? "s" : null, year);  
   }  
  
   // Display the Departments that start from the specified year.  
   static void GetDepartments(String connectionString, Int32 year) {  
      String commandText = "dbo.GetDepartmentsOfSpecifiedYear";  
  
      // Specify the year of StartDate  
      SqlParameter parameterYear = new SqlParameter("@Year", SqlDbType.Int);  
      parameterYear.Value = year;  
  
      // When the direction of parameter is set as Output, you can get the value after   
      // executing the command.  
      SqlParameter parameterBudget = new SqlParameter("@BudgetSum", SqlDbType.Money);  
      parameterBudget.Direction = ParameterDirection.Output;  
  
      using (SqlDataReader reader = SqlHelper.ExecuteReader(connectionString, commandText,  
          CommandType.StoredProcedure, parameterYear, parameterBudget)) {  
         Console.WriteLine("{0,-20}{1,-20}{2,-20}{3,-20}", "Name", "Budget", "StartDate",  
             "Administrator");  
         while (reader.Read()) {  
            Console.WriteLine("{0,-20}{1,-20:C}{2,-20:d}{3,-20}", reader["Name"],  
                reader["Budget"], reader["StartDate"], reader["Administrator"]);  
         }  
      }  
      Console.WriteLine("{0,-20}{1,-20:C}", "Sum:", parameterBudget.Value);  
   }  
  
   // If credits of course is lower than the certain value, the method will add the credits.  
   static void AddCredits(String connectionString, Int32 creditsLow) {  
      String commandText = "Update [MySchool].[dbo].[Course] Set Credits=Credits+1 Where Credits<@Credits";  
  
      SqlParameter parameterCredits = new SqlParameter("@Credits", creditsLow);  
  
      Int32 rows = SqlHelper.ExecuteNonQuery(connectionString, commandText, CommandType.Text, parameterCredits);  
  
      Console.WriteLine("{0} row{1} {2} updated.", rows, rows > 1 ? "s" : null, rows > 1 ? "are" : "is");  
   }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlCommand" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlCommand" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowy Konstruktor inicjuje wszystkie pola z wartościami domyślnymi. W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.Data.SqlClient.SqlCommand>.  
  
|Właściwości|Wartość początkowa|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|Pusty ciąg ("")|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|Null|  
  
 Można zmienić wartości dla żadnego z tych właściwości, za pomocą oddzielnego wywołania do właściwości.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.SqlClient.SqlCommand> i ustawia `CommandTimeout` właściwości.  
  
 [!code-csharp[Classic WebData IDbCommand.CommandTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cmdText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommand(System::String ^ cmdText);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cmdText">Tekst zapytania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlCommand" /> klasy z tekstu zapytania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy wystąpienie klasy <xref:System.Data.SqlClient.SqlCommand> utworzono następujące właściwości są ustawione na wartości początkowe odczytu/zapisu.  
  
|Właściwości|Wartość początkowa|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|null|  
  
 Można zmienić wartości dla żadnego z tych właściwości, za pomocą oddzielnego wywołania do właściwości.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.SqlClient.SqlCommand>, przekazując tekstu połączenia w ciągu i polecenia.  
  
 [!code-csharp[Classic WebData SqlCommand.SqlCommand1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.SqlCommand1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.SqlCommand1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.SqlCommand1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cmdText As String, connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommand(System::String ^ cmdText, System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="cmdText">Tekst zapytania.</param>
        <param name="connection">A <see cref="T:System.Data.SqlClient.SqlConnection" /> reprezentujący połączenie z wystąpieniem programu SQL Server.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlCommand" /> klasy tekst zapytania i <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.Data.SqlClient.SqlCommand>.  
  
|Właściwości|Wartość początkowa|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|Nowy <xref:System.Data.SqlClient.SqlConnection> czyli wartość `connection` parametru.|  
  
 Przez ustawienie właściwości pokrewne można zmienić wartości dla żadnego z tych parametrów.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.SqlClient.SqlCommand> i ustawia niektóre jego właściwości.  
  
 [!code-csharp[Classic WebData SqlCommand.SqlCommand2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.SqlCommand2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.SqlCommand2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.SqlCommand2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.SqlClient.SqlConnection connection, class System.Data.SqlClient.SqlTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cmdText As String, connection As SqlConnection, transaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommand(System::String ^ cmdText, System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlTransaction ^ transaction);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="transaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="cmdText">Tekst zapytania.</param>
        <param name="connection">A <see cref="T:System.Data.SqlClient.SqlConnection" /> reprezentujący połączenie z wystąpieniem programu SQL Server.</param>
        <param name="transaction">
          <see cref="T:System.Data.SqlClient.SqlTransaction" /> w którym <see cref="T:System.Data.SqlClient.SqlCommand" /> wykonuje.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlCommand" /> klasy tekst zapytania, <see cref="T:System.Data.SqlClient.SqlConnection" />i <see cref="T:System.Data.SqlClient.SqlTransaction" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.Data.SqlClient.SqlCommand>.  
  
|Właściwości|Wartość początkowa|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|Nowy <xref:System.Data.SqlClient.SqlConnection> czyli wartość `connection` parametru.|  
  
 Przez ustawienie właściwości pokrewne można zmienić wartości dla żadnego z tych parametrów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction, System.Data.SqlClient.SqlCommandColumnEncryptionSetting columnEncryptionSetting);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.SqlClient.SqlConnection connection, class System.Data.SqlClient.SqlTransaction transaction, valuetype System.Data.SqlClient.SqlCommandColumnEncryptionSetting columnEncryptionSetting) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlCommandColumnEncryptionSetting)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cmdText As String, connection As SqlConnection, transaction As SqlTransaction, columnEncryptionSetting As SqlCommandColumnEncryptionSetting)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommand(System::String ^ cmdText, System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlTransaction ^ transaction, System::Data::SqlClient::SqlCommandColumnEncryptionSetting columnEncryptionSetting);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="transaction" Type="System.Data.SqlClient.SqlTransaction" />
        <Parameter Name="columnEncryptionSetting" Type="System.Data.SqlClient.SqlCommandColumnEncryptionSetting" />
      </Parameters>
      <Docs>
        <param name="cmdText">Tekst zapytania.</param>
        <param name="connection">A <see cref="T:System.Data.SqlClient.SqlConnection" /> reprezentujący połączenie z wystąpieniem programu SQL Server.</param>
        <param name="transaction">
          <see cref="T:System.Data.SqlClient.SqlTransaction" /> w którym <see cref="T:System.Data.SqlClient.SqlCommand" /> wykonuje.</param>
        <param name="columnEncryptionSetting">Ustawienie szyfrowania. Aby uzyskać więcej informacji zobacz [zawsze Encrypted](/sql/relational-databases/security/encryption/always-encrypted-database-engine).</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlCommand" /> klasy z tekstu określonego polecenia, połączenie transakcji i ustawienie szyfrowania.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginExecuteNonQuery">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje asynchroniczne wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która jest opisane przez to <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginExecuteNonQuery">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteNonQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteNonQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteNonQuery () As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteNonQuery();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicjuje asynchroniczne wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która jest opisane przez to <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Który może służyć do sondowania lub zaczekaj na wyniki lub obu; ta wartość jest także potrzebne podczas wywoływania <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />, która zwraca liczbę wierszy dotyczy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> Metody rozpoczyna proces wykonywania asynchronicznie [!INCLUDE[tsql](~/includes/tsql-md.md)] instrukcji lub procedury składowanej, która nie zwraca wiersze, dzięki czemu inne zadania można uruchomić jednocześnie, gdy wykonanie instrukcji. Po ukończeniu instrukcji należy wywołać deweloperzy <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> metodę, aby zakończyć operację. <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> Metoda zwraca natychmiast (<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> nie ma wpływu <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>), ale dopóki kod wykonuje odpowiednie <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> wywołanie metody go nie wykonać inne uruchamianych wykonywania synchronicznego lub asynchronicznego wywołania odniesieniu do tych samych <xref:System.Data.SqlClient.SqlCommand> obiektu. Wywoływanie <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> przed wykonanie polecenia jest wypełniony przyczyny <xref:System.Data.SqlClient.SqlCommand> obiekt, aby zablokować dopiero po zakończeniu wykonywania.  
  
 Należy pamiętać, że tekst polecenia, a parametry są wysyłane do serwera synchronicznie. Jeśli polecenie dużych lub wielu parametrów są wysyłane, ta metoda może zablokować podczas operacji zapisu. Po wysłaniu polecenia, metoda zwraca się natychmiast bez oczekiwania na odpowiedź z serwera — to znaczy odczyty są asynchroniczne.  
  
 Ponieważ to przeciążenie nie obsługuje procedura wywołania zwrotnego, deweloperzy musi albo sondowania w celu ustalenia, czy polecenie zostało wykonane, za pomocą <xref:System.IAsyncResult.IsCompleted%2A> właściwość <xref:System.IAsyncResult> zwrócony przez <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> metody; lub poczekaj na zakończenie pracy programu co najmniej jedno polecenie za pomocą <xref:System.IAsyncResult.AsyncWaitHandle%2A> właściwości zwróconego elementu <xref:System.IAsyncResult>.  
  
   
  
## Examples  
 Następującej aplikacji konsoli tworzy aktualizacji danych w ramach **AdventureWorks** przykładowej bazy danych, podczas pracy asynchronicznie. Aby emulować długotrwały proces, w tym przykładzie wstawia instrukcję WAITFOR tekst polecenia. Zazwyczaj nie miałaby starań poleceniach działać wolniej, ale w ten sposób w takim przypadku ułatwia pokazują zachowanie asynchronicznego.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteNonQuery#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteNonQuery/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteNonQuery#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteNonQuery/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Błąd, który wystąpił podczas wykonywania tekst polecenia.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.InvalidOperationException">Pary nazwa/wartość "przetwarzania asynchronicznego = true" nie został dołączony w ramach definicji połączenia dla tego ciągu połączenia <see cref="T:System.Data.SqlClient.SqlCommand" />.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteNonQuery">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteNonQuery (AsyncCallback callback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteNonQuery(class System.AsyncCallback callback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteNonQuery (callback As AsyncCallback, stateObject As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteNonQuery(AsyncCallback ^ callback, System::Object ^ stateObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> Delegata, który jest wywoływany po zakończeniu wykonywania polecenia. Przekaż <see langword="null" /> (<see langword="Nothing" /> programu Microsoft Visual Basic) wskazująca, że nie wywołanie zwrotne nie jest wymagane.</param>
        <param name="stateObject">Obiekt stanu użytkownika, który jest przekazywany do procedury wywołania zwrotnego. Pobieranie tego obiektu wynikające ze w przy użyciu procedury wywołania zwrotnego <see cref="P:System.IAsyncResult.AsyncState" /> właściwości.</param>
        <summary>Inicjuje asynchroniczne wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która jest opisane przez to <see cref="T:System.Data.SqlClient.SqlCommand" />, procedury i stan informacje wywołania zwrotnego.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Który może służyć do sondowania lub zaczekaj na wyniki lub obu; ta wartość jest także potrzebne podczas wywoływania <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />, która zwraca liczbę wierszy dotyczy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> Metoda uruchamia proces asynchronicznie wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która nie zwraca wiersze, dzięki czemu inne zadania można uruchomić jednocześnie, gdy wykonanie instrukcji. Po ukończeniu instrukcji należy wywołać deweloperzy <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> metodę, aby zakończyć operację. <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> Metoda zwraca natychmiast (<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> nie ma wpływu <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>), ale dopóki kod wykonuje odpowiednie <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> wywołanie metody go nie wykonać inne uruchamianych wykonywania synchronicznego lub asynchronicznego wywołania odniesieniu do tych samych <xref:System.Data.SqlClient.SqlCommand> obiektu. Wywoływanie <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> przed wykonanie polecenia jest wypełniony przyczyny <xref:System.Data.SqlClient.SqlCommand> obiekt, aby zablokować dopiero po zakończeniu wykonywania.  
  
 `callback` Parametr umożliwia określenie <xref:System.AsyncCallback> delegata, który jest wywoływany, gdy instrukcja została ukończona. Możesz wywołać <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> metody w ramach tej procedury delegata lub z innej lokalizacji w aplikacji. Ponadto można przekazać dowolnego obiektu w `asyncStateObject` parametr, a procedura wywołania zwrotnego mogą pobierać te informacje przy użyciu <xref:System.IAsyncResult.AsyncState%2A> właściwości.  
  
 Należy pamiętać, że tekst polecenia, a parametry są wysyłane do serwera synchronicznie. Jeśli polecenie dużych lub wielu parametrów są wysyłane, ta metoda może zablokować podczas operacji zapisu. Po wysłaniu polecenia, metoda zwraca się natychmiast bez oczekiwania na odpowiedź z serwera — to znaczy odczyty są asynchroniczne.  
  
 Ponieważ procedura wywołania zwrotnego jest wykonywana z w wątku w tle dostarczonych przez program Microsoft .NET środowiska CLR, jest bardzo ważne, wykonać rygorystyczne podejście w celu obsługi interakcji między wątkami od w aplikacji. Na przykład możesz musi współdziała z zawartość formularza z wewnątrz procedura wywołania zwrotnego; powinien mieć zaktualizować formularz, musisz przełączyć się do formularza wątku w celu pracy. W przykładzie w tym temacie pokazano to zachowanie.  
  
 Wszystkie błędy podczas wykonywania operacji są zgłaszane jako wyjątki w procedurze wywołania zwrotnego. Musi obsługiwać wyjątek w procedurze wywołania zwrotnego, a nie w głównej aplikacji. Zapoznaj się z przykładem, w tym temacie, aby uzyskać więcej informacji dotyczących obsługi wyjątków w procedurze wywołania zwrotnego.  
  
   
  
## Examples  
 Następujące aplikacji systemu Windows zademonstrowano użycie <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> metody wykonywania instrukcji języka Transact-SQL, która obejmuje opóźnienia kilka sekund (emulowanie polecenia długotrwałe).  
  
 W tym przykładzie pokazano wiele ważnych technik. W tym wywołaniem metody, która współdziała z formularza z oddzielnym wątku. Ponadto w tym przykładzie pokazano, jak należy uniemożliwić użytkownikom wykonywania polecenia jednocześnie wiele razy i jak należy się upewnić, że formularz nie zamknięty przed procedura wywołania zwrotnego jest wywoływana.  
  
 Aby skonfigurować w tym przykładzie, Utwórz nową aplikację systemu Windows. Umieść <xref:System.Windows.Forms.Button> kontroli i <xref:System.Windows.Forms.Label> kontrolkę w formularzu (domyślna nazwa dla każdego formantu akceptowanie). Dodaj następujący kod do klasy formularza, modyfikowanie parametrów połączenia, zgodnie z wymaganiami środowiska.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteNonQueryForm#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteNonQueryForm/CS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteNonQueryForm#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteNonQueryForm/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Błąd, który wystąpił podczas wykonywania tekst polecenia.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.InvalidOperationException">Pary nazwa/wartość "przetwarzania asynchronicznego = true" nie został dołączony w ramach definicji połączenia dla tego ciągu połączenia <see cref="T:System.Data.SqlClient.SqlCommand" />.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginExecuteReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje asynchroniczne wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która jest opisane przez to <see cref="T:System.Data.SqlClient.SqlCommand" />i pobiera jeden lub więcej zestawów wyników z serwera.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteReader () As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteReader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicjuje asynchroniczne wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która jest opisane przez to <see cref="T:System.Data.SqlClient.SqlCommand" />i pobiera jeden lub więcej zestawów wyników z serwera.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Który może służyć do sondowania lub zaczekaj na wyniki lub obu; ta wartość jest także potrzebne podczas wywoływania <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />, która zwraca <see cref="T:System.Data.SqlClient.SqlDataReader" /> wystąpienia, który może służyć do pobierania zwrócone wiersze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> Metoda uruchamia proces asynchronicznie wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która zwraca wiersze, dzięki czemu inne zadania można uruchomić jednocześnie, gdy wykonanie instrukcji. Po ukończeniu instrukcji należy wywołać deweloperzy <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> metodę, aby zakończyć operację i pobrać <xref:System.Data.SqlClient.SqlDataReader> zwracanym przez polecenie. <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> Metoda zwraca natychmiast, ale dopóki kod wykonywany odpowiadającego <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> wywołanie metody go nie wykonać inne wywołania, które rozpocząć wykonywania synchronicznego lub asynchronicznego w odniesieniu do tych samych <xref:System.Data.SqlClient.SqlCommand> obiektu. Wywoływanie <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> przed wykonanie polecenia jest wypełniony przyczyny <xref:System.Data.SqlClient.SqlCommand> obiekt, aby zablokować dopiero po zakończeniu wykonywania.  
  
 Należy pamiętać, że tekst polecenia, a parametry są wysyłane do serwera synchronicznie. Jeśli polecenie dużych lub wielu parametrów są wysyłane, ta metoda może zablokować podczas operacji zapisu. Po wysłaniu polecenia, metoda zwraca się natychmiast bez oczekiwania na odpowiedź z serwera — to znaczy odczyty są asynchroniczne. Wykonanie polecenia jest asynchroniczne, pobieranie wartości jest nadal synchronicznego. Oznacza to, że wywołań <xref:System.Data.SqlClient.SqlDataReader.Read%2A> może zablokować, jeśli wymagane jest więcej danych i odnośnej sieci w blokach operacji odczytu.  
  
 Ponieważ to przeciążenie nie obsługuje procedura wywołania zwrotnego, deweloperzy musi albo sondowania w celu ustalenia, czy polecenie zostało wykonane, za pomocą <xref:System.IAsyncResult.IsCompleted%2A> właściwość <xref:System.IAsyncResult> zwrócony przez <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> metody; lub poczekaj na zakończenie pracy programu co najmniej jedno polecenie za pomocą <xref:System.IAsyncResult.AsyncWaitHandle%2A> właściwości zwróconego elementu <xref:System.IAsyncResult>.  
  
 Jeśli używasz <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> dostępu do danych XML, SQL Server zwróci żadnych wyników XML większa niż 2,033 znaków długości w wielu wierszach 2,033 znaków. Aby uniknąć tego zachowania, należy użyć <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> odczytać FOR XML zapytania. Aby uzyskać więcej informacji, zobacz artykuł Q310378, "PRB: XML danych jest obcięte podczas możesz Użyj SqlDataReader," w bazie wiedzy Microsoft Knowledge Base pod http://support.microsoft.com.  
  
   
  
## Examples  
 Następującej aplikacji konsoli rozpoczyna się proces pobierania asynchronicznie czytnik danych. Podczas oczekiwania na wyniki, ta prosta aplikacja znajduje się w pętli, badanie <xref:System.IAsyncResult.IsCompleted%2A> wartości właściwości. Zaraz po zakończeniu procesu kod pobiera <xref:System.Data.SqlClient.SqlDataReader> i wyświetla jego zawartość.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReader/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Błąd, który wystąpił podczas wykonywania tekst polecenia.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.InvalidOperationException">Pary nazwa/wartość "przetwarzania asynchronicznego = true" nie został dołączony w ramach definicji połączenia dla tego ciągu połączenia <see cref="T:System.Data.SqlClient.SqlCommand" />.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteReader (behavior As CommandBehavior) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteReader(System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">Jeden z <see cref="T:System.Data.CommandBehavior" /> wartości, wskazując opcje pobierania instrukcji wykonywania i danych.</param>
        <summary>Inicjuje asynchroniczne wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która jest opisane przez to <see cref="T:System.Data.SqlClient.SqlCommand" /> przy użyciu jednej z <see cref="T:System.Data.CommandBehavior" /> wartości.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Który może służyć do sondowania, poczekaj, aż wyników i/lub; ta wartość jest także potrzebne podczas wywoływania <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />, która zwraca <see cref="T:System.Data.SqlClient.SqlDataReader" /> wystąpienia, który może służyć do pobierania zwrócone wiersze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> Metoda uruchamia proces asynchronicznie wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która zwraca wiersze, dzięki czemu inne zadania można uruchomić jednocześnie, gdy wykonanie instrukcji. Po ukończeniu instrukcji należy wywołać deweloperzy <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> metodę, aby zakończyć operację i pobrać <xref:System.Data.SqlClient.SqlDataReader> zwracanym przez polecenie. <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> Metoda zwraca natychmiast, ale dopóki kod wykonywany odpowiadającego <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> wywołanie metody go nie wykonać inne wywołania, które rozpocząć wykonywania synchronicznego lub asynchronicznego w odniesieniu do tych samych <xref:System.Data.SqlClient.SqlCommand> obiektu. Wywoływanie <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> przed wykonanie polecenia jest wypełniony przyczyny <xref:System.Data.SqlClient.SqlCommand> obiekt, aby zablokować dopiero po zakończeniu wykonywania.  
  
 `behavior` Parametr pozwala Określ opcje kontrolujące zachowanie polecenia i jego połączenia. Wartości te można łączyć ze sobą (przy użyciu języka programowania `OR` operatora); ogólnie rzecz biorąc, deweloperzy za pomocą `CommandBehavior.CloseConnection` wartość, aby upewnić się, że połączenie jest zamknięte przez środowisko uruchomieniowe przy <xref:System.Data.SqlClient.SqlDataReader> jest zamknięty.  
  
 Należy pamiętać, że tekst polecenia, a parametry są wysyłane do serwera synchronicznie. Jeśli polecenie dużych lub wielu parametrów są wysyłane, ta metoda może zablokować podczas operacji zapisu. Po wysłaniu polecenia, metoda zwraca się natychmiast bez oczekiwania na odpowiedź z serwera — to znaczy odczyty są asynchroniczne. Wykonanie polecenia jest asynchroniczne, pobieranie wartości jest nadal synchronicznego. Oznacza to, że wywołań <xref:System.Data.SqlClient.SqlDataReader.Read%2A> może zablokować, jeśli wymagane jest więcej danych i odnośnej sieci w blokach operacji odczytu.  
  
 Ponieważ to przeciążenie nie obsługuje procedura wywołania zwrotnego, deweloperzy musi albo sondowania w celu ustalenia, czy polecenie zostało wykonane, za pomocą <xref:System.IAsyncResult.IsCompleted%2A> właściwość <xref:System.IAsyncResult> zwrócony przez <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> metody; lub poczekaj na zakończenie pracy programu co najmniej jedno polecenie za pomocą <xref:System.IAsyncResult.AsyncWaitHandle%2A> właściwości zwróconego elementu <xref:System.IAsyncResult>.  
  
 Jeśli używasz <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> dostępu do danych XML, program SQL Server zwraca wszystkie wyniki XML większa niż 2,033 znaków długości w wielu wierszach 2,033 znaków. Aby uniknąć tego zachowania, należy użyć <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> odczytać FOR XML zapytania. Aby uzyskać więcej informacji, zobacz artykuł Q310378, "PRB: XML danych jest obcięte podczas możesz Użyj SqlDataReader," w bazie wiedzy Microsoft Knowledge Base pod http://support.microsoft.com.  
  
   
  
## Examples  
 Następującej aplikacji konsoli rozpoczyna się proces pobierania asynchronicznie czytnik danych. Podczas oczekiwania na wyniki, ta prosta aplikacja znajduje się w pętli, badanie <xref:System.IAsyncResult.IsCompleted%2A> wartości właściwości. Po zakończeniu procesu kod pobiera <xref:System.Data.SqlClient.SqlDataReader> i wyświetla jego zawartość.  
  
 W tym przykładzie przekazuje także `CommandBehavior.CloseConnection` i `CommandBehavior.SingleRow` wartości w parametrze zachowanie powodujące połączenia zostanie zamknięty z zwróconego <xref:System.Data.SqlClient.SqlDataReader> jest zamknięty i zoptymalizować dla wyniku pojedynczy wiersz.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteReaderAsyncSimple#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsyncSimple/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsyncSimple#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsyncSimple/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Błąd, który wystąpił podczas wykonywania tekst polecenia.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.InvalidOperationException">Pary nazwa/wartość "przetwarzania asynchronicznego = true" nie został dołączony w ramach definicji połączenia dla tego ciągu połączenia <see cref="T:System.Data.SqlClient.SqlCommand" />.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader (AsyncCallback callback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader(class System.AsyncCallback callback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteReader (callback As AsyncCallback, stateObject As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteReader(AsyncCallback ^ callback, System::Object ^ stateObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> Delegata, który jest wywoływany po zakończeniu wykonywania polecenia. Przekaż <see langword="null" /> (<see langword="Nothing" /> programu Microsoft Visual Basic) wskazująca, że nie wywołanie zwrotne nie jest wymagane.</param>
        <param name="stateObject">Obiekt stanu użytkownika, który jest przekazywany do procedury wywołania zwrotnego. Pobieranie tego obiektu wynikające ze w przy użyciu procedury wywołania zwrotnego <see cref="P:System.IAsyncResult.AsyncState" /> właściwości.</param>
        <summary>Inicjuje asynchroniczne wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która jest opisane przez to <see cref="T:System.Data.SqlClient.SqlCommand" /> i pobiera jeden lub więcej zestawów wyników z serwera, procedury i stan informacje wywołania zwrotnego.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Który może służyć do sondowania, poczekaj, aż wyników i/lub; ta wartość jest także potrzebne podczas wywoływania <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />, która zwraca <see cref="T:System.Data.SqlClient.SqlDataReader" /> wystąpienia, która może służyć do pobierania zwrócone wiersze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> Metoda uruchamia proces asynchronicznie wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która zwraca wiersze, dzięki czemu inne zadania można uruchomić jednocześnie, gdy wykonanie instrukcji. Po ukończeniu instrukcji należy wywołać deweloperzy <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> metodę, aby zakończyć operację i pobrać <xref:System.Data.SqlClient.SqlDataReader> zwracanym przez polecenie. <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> Metoda zwraca natychmiast, ale dopóki kod wykonywany odpowiadającego <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> wywołanie metody go nie wykonać inne wywołania, które rozpocząć wykonywania synchronicznego lub asynchronicznego w odniesieniu do tych samych <xref:System.Data.SqlClient.SqlCommand> obiektu. Wywoływanie <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> przed zakończeniem wykonywania polecenia Przyczyna <xref:System.Data.SqlClient.SqlCommand> obiekt, aby zablokować dopiero po zakończeniu wykonywania.  
  
 `callback` Parametr umożliwia określenie <xref:System.AsyncCallback> delegata, który jest wywoływany, gdy instrukcja została ukończona. Możesz wywołać <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> metody w ramach tej procedury delegata lub z innej lokalizacji w aplikacji. Ponadto można przekazać dowolnego obiektu w `stateObject` parametr, a procedura wywołania zwrotnego mogą pobierać te informacje przy użyciu <xref:System.IAsyncResult.AsyncState%2A> właściwości.  
  
 Należy pamiętać, że tekst polecenia, a parametry są wysyłane do serwera synchronicznie. Jeśli polecenie dużych lub wielu parametrów są wysyłane, ta metoda może zablokować podczas operacji zapisu. Po wysłaniu polecenia, metoda zwraca się natychmiast bez oczekiwania na odpowiedź z serwera — to znaczy odczyty są asynchroniczne. Wykonanie polecenia jest asynchroniczne, pobieranie wartości jest nadal synchronicznego. Oznacza to, że wywołań <xref:System.Data.SqlClient.SqlDataReader.Read%2A> może zablokować, jeśli wymagane jest więcej danych i odnośnej sieci w blokach operacji odczytu.  
  
 Ponieważ procedura wywołania zwrotnego jest wykonywana z w wątku w tle dostarczanych przez środowisko uruchomieniowe platformy Microsoft .NET, jest bardzo ważne, wykonać rygorystyczne podejście w celu obsługi interakcji między wątkami od w aplikacji. Na przykład możesz musi współdziała z zawartość formularza z wewnątrz procedura wywołania zwrotnego; powinien mieć zaktualizować formularz, musisz przełączyć się do formularza wątku w celu pracy. W przykładzie w tym temacie pokazano to zachowanie.  
  
 Wszystkie błędy podczas wykonywania operacji są zgłaszane jako wyjątki w procedurze wywołania zwrotnego. Musi obsługiwać wyjątek w procedurze wywołania zwrotnego, a nie w głównej aplikacji. Zapoznaj się z przykładem, w tym temacie, aby uzyskać więcej informacji dotyczących obsługi wyjątków w procedurze wywołania zwrotnego.  
  
 Jeśli używasz <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> dostępu do danych XML, program SQL Server zwraca wszystkie wyniki XML większa niż 2,033 znaków długości w wielu wierszach 2,033 znaków. Aby uniknąć tego zachowania, należy użyć <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> odczytać FOR XML zapytania. Aby uzyskać więcej informacji, zobacz artykuł Q310378, "PRB: XML danych jest obcięte podczas możesz Użyj SqlDataReader," w bazie wiedzy Microsoft Knowledge Base pod http://support.microsoft.com.  
  
   
  
## Examples  
 Następujące aplikacji systemu Windows zademonstrowano użycie <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> metody wykonywania instrukcji języka Transact-SQL, która obejmuje opóźnienia kilka sekund (emulowanie polecenia długotrwałe). Ponieważ próbki wykonuje polecenie asynchronicznie, formularz pozostanie reakcji w oczekiwaniu na wyniki. W tym przykładzie przekazuje wykonywania <xref:System.Data.SqlClient.SqlCommand> obiekt jako `stateObject` parametru; w ten sposób upraszcza pobrać <xref:System.Data.SqlClient.SqlCommand> obiekt z w ramach procedury wywołania zwrotnego, dzięki czemu mogą wywoływać kodu <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> odpowiadający — metoda początkowa wywołanie <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.  
  
 W tym przykładzie pokazano wiele ważnych technik. W tym wywołaniem metody, która współdziała z formularza z oddzielnym wątku. Ponadto w tym przykładzie pokazano, jak należy uniemożliwić użytkownikom wykonywania polecenia jednocześnie wiele razy i jak należy się upewnić, że formularz nie zamknięty przed procedura wywołania zwrotnego jest wywoływana.  
  
 Aby skonfigurować w tym przykładzie, Utwórz nową aplikację systemu Windows. Umieść <xref:System.Windows.Forms.Button> kontroli, <xref:System.Windows.Forms.DataGridView> kontroli i <xref:System.Windows.Forms.Label> kontrolkę w formularzu (domyślna nazwa dla każdego formantu akceptowanie). Dodaj następujący kod do klasy formularza, modyfikowanie parametrów połączenia, zgodnie z wymaganiami środowiska.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteReaderAsync#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsync/CS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsync#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsync/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Błąd, który wystąpił podczas wykonywania tekst polecenia.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.InvalidOperationException">Pary nazwa/wartość "przetwarzania asynchronicznego = true" nie został dołączony w ramach definicji połączenia dla tego ciągu połączenia <see cref="T:System.Data.SqlClient.SqlCommand" />.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader (AsyncCallback callback, object stateObject, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader(class System.AsyncCallback callback, object stateObject, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteReader (callback As AsyncCallback, stateObject As Object, behavior As CommandBehavior) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteReader(AsyncCallback ^ callback, System::Object ^ stateObject, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> Delegata, który jest wywoływany po zakończeniu wykonywania polecenia. Przekaż <see langword="null" /> (<see langword="Nothing" /> programu Microsoft Visual Basic) wskazująca, że nie wywołanie zwrotne nie jest wymagane.</param>
        <param name="stateObject">Obiekt stanu użytkownika, który jest przekazywany do procedury wywołania zwrotnego. Pobieranie tego obiektu wynikające ze w przy użyciu procedury wywołania zwrotnego <see cref="P:System.IAsyncResult.AsyncState" /> właściwości.</param>
        <param name="behavior">Jeden z <see cref="T:System.Data.CommandBehavior" /> wartości, wskazując opcje pobierania instrukcji wykonywania i danych.</param>
        <summary>Inicjuje asynchroniczne wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która jest opisane przez to <see cref="T:System.Data.SqlClient.SqlCommand" />, przy użyciu jednej z <see langword="CommandBehavior" /> wartości i pobieranie jeden lub więcej zestawów wyników z serwera, procedura wywołania zwrotnego i stanu informacje.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Który może służyć do sondowania lub zaczekaj na wyniki lub obu; ta wartość jest także potrzebne podczas wywoływania <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />, która zwraca <see cref="T:System.Data.SqlClient.SqlDataReader" /> wystąpienia, która może służyć do pobierania zwrócone wiersze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> Metoda uruchamia proces asynchronicznie wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która zwraca wiersze, dzięki czemu inne zadania można uruchomić jednocześnie, gdy wykonanie instrukcji. Po ukończeniu instrukcji należy wywołać deweloperzy <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> metodę, aby zakończyć operację i pobrać <xref:System.Data.SqlClient.SqlDataReader> zwracanym przez polecenie. <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> Metoda zwraca natychmiast, ale dopóki kod wykonywany odpowiadającego <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> wywołanie metody go nie wykonać inne wywołania, które rozpocząć wykonywania synchronicznego lub asynchronicznego w odniesieniu do tych samych <xref:System.Data.SqlClient.SqlCommand> obiektu. Wywoływanie <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> przed wykonanie polecenia jest wypełniony przyczyny <xref:System.Data.SqlClient.SqlCommand> obiekt, aby zablokować dopiero po zakończeniu wykonywania.  
  
 `callback` Parametr umożliwia określenie <xref:System.AsyncCallback> delegata, który jest wywoływany, gdy instrukcja została ukończona. Możesz wywołać <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> metody w ramach tej procedury delegata lub z innej lokalizacji w aplikacji. Ponadto można przekazać dowolnego obiektu w `stateObject` parametr, a procedura wywołania zwrotnego mogą pobierać te informacje przy użyciu <xref:System.IAsyncResult.AsyncState%2A> właściwości.  
  
 `behavior` Parametr pozwala Określ opcje kontrolujące zachowanie polecenia i jego połączenia. Wartości te można łączyć ze sobą (przy użyciu języka programowania `Or` operatora); ogólnie rzecz biorąc, deweloperzy za pomocą `CloseConnection` wartość, aby upewnić się, że połączenie jest zamknięte przez środowisko uruchomieniowe przy <xref:System.Data.SqlClient.SqlDataReader> jest zamknięty. Deweloperzy można także zoptymalizować zachowanie <xref:System.Data.SqlClient.SqlDataReader> , określając `SingleRow` wartość, gdy jest ona znana wcześniej instrukcji języka Transact-SQL lub procedury składowanej tylko zwraca jeden wiersz.  
  
 Należy pamiętać, że tekst polecenia, a parametry są wysyłane do serwera synchronicznie. Jeśli polecenie dużych lub wielu parametrów są wysyłane, ta metoda może zablokować podczas operacji zapisu. Po wysłaniu polecenia, metoda zwraca się natychmiast bez oczekiwania na odpowiedź z serwera — to znaczy odczyty są asynchroniczne. Wykonanie polecenia jest asynchroniczne, pobieranie wartości jest nadal synchronicznego. Oznacza to, że wywołań <xref:System.Data.SqlClient.SqlDataReader.Read%2A> może zablokować, jeśli wymagane jest więcej danych i odnośnej sieci w blokach operacji odczytu.  
  
 Ponieważ procedura wywołania zwrotnego jest wykonywana z w wątku w tle dostarczonych przez program Microsoft .NET środowiska CLR, jest bardzo ważne, wykonać rygorystyczne podejście w celu obsługi interakcji między wątkami od w aplikacji. Na przykład użytkownik nie może mieć interakcji na podstawie zawartości formularza w ramach procedury wywołania zwrotnego — powinien mieć do aktualizacji formularzy, musisz przełączyć się do formularza wątku w celu pracy. W przykładzie w tym temacie pokazano to zachowanie.  
  
 Wszystkie błędy podczas wykonywania operacji są zgłaszane jako wyjątki w procedurze wywołania zwrotnego. Musi obsługiwać wyjątek w procedurze wywołania zwrotnego, a nie w głównej aplikacji. Zapoznaj się z przykładem, w tym temacie, aby uzyskać więcej informacji dotyczących obsługi wyjątków w procedurze wywołania zwrotnego.  
  
 Jeśli używasz <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> dostępu do danych XML, SQL Server zwróci żadnych wyników XML większa niż 2,033 znaków długości w wielu wierszach 2,033 znaków. Aby uniknąć tego zachowania, należy użyć <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> odczytać FOR XML zapytania. Aby uzyskać więcej informacji, zobacz artykuł Q310378, "PRB: XML danych jest obcięte podczas możesz Użyj SqlDataReader," w bazie wiedzy Microsoft Knowledge Base pod http://support.microsoft.com.  
  
   
  
## Examples  
 Następujące aplikacji systemu Windows zademonstrowano użycie <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> metody wykonywania instrukcji języka Transact-SQL, która obejmuje opóźnienia kilka sekund (emulowanie polecenia długotrwałe). Ponieważ próbki wykonuje polecenie asynchronicznie, formularz pozostanie reakcji w oczekiwaniu na wyniki. W tym przykładzie przekazuje wykonywania <xref:System.Data.SqlClient.SqlCommand> obiekt jako `stateObject` parametru; w ten sposób upraszcza pobrać <xref:System.Data.SqlClient.SqlCommand> obiekt z w ramach procedury wywołania zwrotnego, dzięki czemu mogą wywoływać kodu <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> odpowiadający — metoda początkowa wywołanie <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.  
  
 W tym przykładzie pokazano wiele ważnych technik. W tym wywołaniem metody, która współdziała z formularza z oddzielnym wątku. Ponadto w tym przykładzie pokazano, jak należy uniemożliwić użytkownikom wykonywania polecenia jednocześnie wiele razy i jak należy się upewnić, że formularz nie zamknięty przed procedura wywołania zwrotnego jest wywoływana.  
  
 Aby skonfigurować w tym przykładzie, Utwórz nową aplikację systemu Windows. Umieść <xref:System.Windows.Forms.Button> kontroli, <xref:System.Windows.Forms.DataGridView> kontroli i <xref:System.Windows.Forms.Label> kontrolkę w formularzu (domyślna nazwa dla każdego formantu akceptowanie). Dodaj następujący kod do klasy formularza, modyfikowanie parametrów połączenia, zgodnie z wymaganiami środowiska.  
  
 W tym przykładzie przekazuje `CommandBehavior.CloseConnection` wartość w `behavior` parametru powoduje zwróconego <xref:System.Data.SqlClient.SqlDataReader> automatycznie zamknąć połączenie, gdy jest ono zamknięte.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior/CS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Błąd, który wystąpił podczas wykonywania tekst polecenia.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.InvalidOperationException">Pary nazwa/wartość "przetwarzania asynchronicznego = true" nie został dołączony w ramach definicji połączenia dla tego ciągu połączenia <see cref="T:System.Data.SqlClient.SqlCommand" />.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginExecuteXmlReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje asynchroniczne wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która jest opisane przez to <see cref="T:System.Data.SqlClient.SqlCommand" /> i zwraca wyniki w postaci <see cref="T:System.Xml.XmlReader" /> obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginExecuteXmlReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteXmlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteXmlReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteXmlReader () As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteXmlReader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicjuje asynchroniczne wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która jest opisane przez to <see cref="T:System.Data.SqlClient.SqlCommand" /> i zwraca wyniki w postaci <see cref="T:System.Xml.XmlReader" /> obiektu.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Który może służyć do sondowania lub zaczekaj na wyniki lub obu; ta wartość jest także potrzebne podczas wywoływania <see langword="EndExecuteXmlReader" />, która zwraca pojedynczą wartość XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> Metoda uruchamia proces asynchronicznie wykonywania instrukcji języka Transact-SQL, która zwraca wiersze w formacie XML, dzięki czemu inne zadania można uruchomić jednocześnie, gdy wykonanie instrukcji. Po ukończeniu instrukcji należy wywołać deweloperzy `EndExecuteXmlReader` metodę, aby zakończyć operację i pobrać kod XML zwrócony przez polecenie. <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> Metoda zwraca natychmiast, ale dopóki kod wykonywany odpowiadającego `EndExecuteXmlReader` wywołanie metody go nie wykonać inne wywołania, które rozpocząć wykonywania synchronicznego lub asynchronicznego w odniesieniu do tych samych <xref:System.Data.SqlClient.SqlCommand> obiektu. Wywoływanie `EndExecuteXmlReader` przed wykonanie polecenia jest wypełniony przyczyny <xref:System.Data.SqlClient.SqlCommand> obiekt, aby zablokować dopiero po zakończeniu wykonywania.  
  
 <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> Właściwości zwykle określa instrukcji języka Transact-SQL z prawidłową klauzuli FOR XML. Jednak `CommandText` można również określić instrukcję, która zwraca `ntext` danych, który zawiera prawidłowy kod XML.  
  
 Typowe <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> zapytanie może być sformatowany jak w poniższym przykładzie C#:  
  
```  
SqlCommand command = new SqlCommand("SELECT ContactID, FirstName, LastName FROM dbo.Contact FOR XML AUTO, XMLDATA", SqlConn);  
```  
  
 Tej metody można również pobrać zestawu wyników pojedynczy wiersz, pojedynczej kolumny. W tym przypadku jeśli więcej niż jeden wiersz jest zwracany, `EndExecuteXmlReader` dołącza metody <xref:System.Xml.XmlReader> wartości w pierwszym wierszu i odrzucenia ustawić rest, wyników.  
  
 Wiele funkcji zestawu (MARS) aktywnych wyników umożliwia wielu akcji, użyj tego samego połączenia.  
  
 Należy pamiętać, że tekst polecenia, a parametry są wysyłane do serwera synchronicznie. Jeśli polecenie dużych lub wielu parametrów są wysyłane, ta metoda może zablokować podczas operacji zapisu. Po wysłaniu polecenia, metoda zwraca się natychmiast bez oczekiwania na odpowiedź z serwera — to znaczy odczyty są asynchroniczne. Wykonanie polecenia jest asynchroniczne, pobieranie wartości jest nadal synchronicznego.  
  
 Ponieważ to przeciążenie nie obsługuje procedura wywołania zwrotnego, deweloperzy muszą albo sondowania w celu określenia, czy polecenie zostało wykonane, za pomocą <xref:System.IAsyncResult.IsCompleted%2A> właściwość <xref:System.IAsyncResult> zwrócony przez <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> metody; lub poczekaj na zakończenie pracy jeden lub więcej poleceń przy użyciu <xref:System.IAsyncResult.AsyncWaitHandle%2A> właściwości zwróconego elementu <xref:System.IAsyncResult>.  
  
 Jeśli używasz <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> dostępu do danych XML, program SQL Server zwraca wszystkie wyniki XML większa niż 2,033 znaków długości w wielu wierszach 2,033 znaków. Aby uniknąć tego zachowania, należy użyć <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> odczytać FOR XML zapytania. Aby uzyskać więcej informacji, zobacz artykuł Q310378, "PRB: XML danych jest obcięte podczas możesz Użyj SqlDataReader," w bazie wiedzy Microsoft Knowledge Base pod http://support.microsoft.com.  
  
   
  
## Examples  
 Następującej aplikacji konsoli rozpoczyna się proces pobierania danych XML asynchronicznie. Podczas oczekiwania na wyniki, ta prosta aplikacja znajduje się w pętli, badanie <xref:System.IAsyncResult.IsCompleted%2A> wartości właściwości. Po zakończeniu procesu kod pobiera dane XML i wyświetla jego zawartość.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteXmlReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteXmlReader/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteXmlReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteXmlReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Błąd, który wystąpił podczas wykonywania tekst polecenia.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.InvalidOperationException">Pary nazwa/wartość "przetwarzania asynchronicznego = true" nie został dołączony w ramach definicji połączenia dla tego ciągu połączenia <see cref="T:System.Data.SqlClient.SqlCommand" />.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteXmlReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteXmlReader (AsyncCallback callback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteXmlReader(class System.AsyncCallback callback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteXmlReader (callback As AsyncCallback, stateObject As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteXmlReader(AsyncCallback ^ callback, System::Object ^ stateObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> Delegata, który jest wywoływany po zakończeniu wykonywania polecenia. Przekaż <see langword="null" /> (<see langword="Nothing" /> programu Microsoft Visual Basic) wskazująca, że nie wywołanie zwrotne nie jest wymagane.</param>
        <param name="stateObject">Obiekt stanu użytkownika, który jest przekazywany do procedury wywołania zwrotnego. Pobieranie tego obiektu wynikające ze w przy użyciu procedury wywołania zwrotnego <see cref="P:System.IAsyncResult.AsyncState" /> właściwości.</param>
        <summary>Inicjuje asynchroniczne wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która jest opisane przez to <see cref="T:System.Data.SqlClient.SqlCommand" /> i zwraca wyniki w postaci <see cref="T:System.Xml.XmlReader" /> obiekt, za pomocą procedury wywołania zwrotnego.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Który może służyć do sondowania, poczekaj, aż wyników i/lub; ta wartość jest również wymagane, gdy <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" /> jest wywoływana, które zwraca wyniki polecenia w formacie XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> Metoda uruchamia proces asynchronicznie wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która zwraca wiersze w formacie XML, dzięki czemu inne zadania można uruchomić jednocześnie, gdy wykonanie instrukcji. Po ukończeniu instrukcji należy wywołać deweloperzy <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> metodę, aby zakończyć operację i pobierania żądanych danych XML. <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> Metoda zwraca natychmiast, ale dopóki kod wykonywany odpowiadającego <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> wywołanie metody go nie wykonać inne wywołania, które rozpocząć wykonywania synchronicznego lub asynchronicznego w odniesieniu do tych samych <xref:System.Data.SqlClient.SqlCommand> obiektu. Wywoływanie <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> przed wykonanie polecenia jest wypełniony przyczyny <xref:System.Data.SqlClient.SqlCommand> obiekt, aby zablokować dopiero po zakończeniu wykonywania.  
  
 <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> Właściwości zwykle określa instrukcji języka Transact-SQL z prawidłową klauzuli FOR XML. Jednak `CommandText` można również określić instrukcję, która zwraca dane, które zawiera prawidłowy kod XML. Tej metody można również pobrać zestawu wyników pojedynczy wiersz, pojedynczej kolumny. W tym przypadku jeśli więcej niż jeden wiersz jest zwracany, <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> dołącza metody <xref:System.Xml.XmlReader> wartości w pierwszym wierszu i odrzucenia ustawić rest, wyników.  
  
 Typowe <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> zapytanie może być sformatowany jak w poniższym przykładzie C#:  
  
```  
SqlCommand command = new SqlCommand("SELECT ContactID, FirstName, LastName FROM Contact FOR XML AUTO, XMLDATA", SqlConn);  
```  
  
 Tej metody można również pobrać zestawu wyników pojedynczy wiersz, pojedynczej kolumny. W tym przypadku jeśli więcej niż jeden wiersz jest zwracany, <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> dołącza metody <xref:System.Xml.XmlReader> wartości w pierwszym wierszu i odrzucenia ustawić rest, wyników.  
  
 Wiele funkcji zestawu (MARS) aktywnych wyników umożliwia wielu akcji, użyj tego samego połączenia.  
  
 `callback` Parametr umożliwia określenie <xref:System.AsyncCallback> delegata, który jest wywoływany, gdy instrukcja została ukończona. Możesz wywołać <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> metody w ramach tej procedury delegata lub z innej lokalizacji w aplikacji. Ponadto można przekazać dowolnego obiektu w `stateObject` parametr, a procedura wywołania zwrotnego mogą pobierać te informacje przy użyciu <xref:System.IAsyncResult.AsyncState%2A> właściwości.  
  
 Należy pamiętać, że tekst polecenia, a parametry są wysyłane do serwera synchronicznie. Jeśli polecenie dużych lub wielu parametrów, ta metoda może zablokować podczas operacji zapisu. Po wysłaniu polecenia, metoda zwraca się natychmiast bez oczekiwania na odpowiedź z serwera — to znaczy odczyty są asynchroniczne.  
  
 Wszystkie błędy podczas wykonywania operacji są zgłaszane jako wyjątki w procedurze wywołania zwrotnego. Musi obsługiwać wyjątek w procedurze wywołania zwrotnego, a nie w głównej aplikacji. Zapoznaj się z przykładem, w tym temacie, aby uzyskać więcej informacji dotyczących obsługi wyjątków w procedurze wywołania zwrotnego.  
  
 Jeśli używasz <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> dostępu do danych XML, SQL Server zwróci żadnych wyników XML większa niż 2,033 znaków długości w wielu wierszach 2,033 znaków. Aby uniknąć tego zachowania, należy użyć <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> odczytać FOR XML zapytania. Aby uzyskać więcej informacji, zobacz artykuł Q310378, "PRB: XML danych jest obcięte podczas możesz Użyj SqlDataReader," w bazie wiedzy Microsoft Knowledge Base pod http://support.microsoft.com.  
  
   
  
## Examples  
 Następujące aplikacji systemu Windows zademonstrowano użycie <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> metody wykonywania instrukcji języka Transact-SQL, która obejmuje opóźnienia kilka sekund (emulowanie polecenia długotrwałe). W tym przykładzie przekazuje wykonywania <xref:System.Data.SqlClient.SqlCommand> obiekt jako `stateObject` parametr — w ten sposób ułatwia pobrać <xref:System.Data.SqlClient.SqlCommand> obiekt z w ramach procedury wywołania zwrotnego, dzięki czemu mogą wywoływać kodu <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> odpowiadający — metoda początkowa wywołanie <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>.  
  
 W tym przykładzie pokazano wiele ważnych technik. W tym wywołaniem metody, która współdziała z formularza z oddzielnym wątku. Ponadto w tym przykładzie pokazano, jak należy uniemożliwić użytkownikom wykonywania polecenia jednocześnie wiele razy i jak należy się upewnić, że formularz nie zamknięty przed procedura wywołania zwrotnego jest wywoływana.  
  
 Aby skonfigurować w tym przykładzie, Utwórz nową aplikację systemu Windows. Umieść <xref:System.Windows.Forms.Button> kontroli, <xref:System.Windows.Forms.ListBox> kontroli i <xref:System.Windows.Forms.Label> kontrolkę w formularzu (domyślna nazwa dla każdego formantu akceptowanie). Dodaj następujący kod do klasy formularza, modyfikowanie parametrów połączenia, zgodnie z wymaganiami środowiska.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteXmlReaderAsync#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteXmlReaderAsync/CS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteXmlReaderAsync#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteXmlReaderAsync/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Błąd, który wystąpił podczas wykonywania tekst polecenia.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.InvalidOperationException">Pary nazwa/wartość "przetwarzania asynchronicznego = true" nie został dołączony w ramach definicji połączenia dla tego ciągu połączenia <see cref="T:System.Data.SqlClient.SqlCommand" />.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <altmember cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />
        <altmember cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public override void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Cancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Cancel();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.Cancel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Próbuje anulować wykonywanie <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie ma nic do anulowania, nic się nie dzieje. Jednak jeśli jest poleceniem w procesie, a próba anulowania nie powiedzie się, zostanie wygenerowany żaden wyjątek.  
  
 Niektóre, czasami, jeśli wywołujesz <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> wywoływać <xref:System.Data.SqlClient.SqlDataReader.Close%2A> (implicitily lub jawnie) przed wywołaniem <xref:System.Data.SqlClient.SqlCommand.Cancel%2A>, a następnie wywołać <xref:System.Data.SqlClient.SqlCommand.Cancel%2A>, polecenie cancel nie zostaną wysłane do programu SQL Server i zestawu wyników mogą w dalszym ciągu strumienia po wywołanie <xref:System.Data.SqlClient.SqlConnection.Close%2A>. Aby tego uniknąć, upewnij się, że należy wywołać <xref:System.Data.SqlClient.SqlCommand.Cancel%2A> przed zamknięciem czytnik lub połączenia.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.Data.SqlClient.SqlCommand.Cancel%2A> metody.  
  
 [!code-csharp[Classic WebData SqlCommand.Cancel#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Cancel/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.Cancel#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Cancel/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nową <see cref="T:System.Data.SqlClient.SqlCommand" /> obiektu, który jest kopią bieżącego wystąpienia.</summary>
        <returns>Nowy <see cref="T:System.Data.SqlClient.SqlCommand" /> obiektu, który jest kopią tego wystąpienia.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionSetting">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommandColumnEncryptionSetting ColumnEncryptionSetting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SqlClient.SqlCommandColumnEncryptionSetting ColumnEncryptionSetting" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnEncryptionSetting As SqlCommandColumnEncryptionSetting" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlCommandColumnEncryptionSetting ColumnEncryptionSetting { System::Data::SqlClient::SqlCommandColumnEncryptionSetting get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommandColumnEncryptionSetting</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ustawienie szyfrowania kolumny dla tego polecenia.</summary>
        <value>Ustawienie szyfrowania kolumny dla tego polecenia.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandText">
      <MemberSignature Language="C#" Value="public override string CommandText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandText" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.CommandText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CommandText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CommandText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbCommand.CommandText</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.SQL.Design.SqlCommandTextEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia instrukcji języka Transact-SQL, nazwy tabeli lub procedura składowana do wykonania w źródle danych.</summary>
        <value>Instrukcji języka Transact-SQL lub procedury składowanej do wykonania. Wartość domyślna to ciąg pusty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> właściwość jest ustawiona na `StoredProcedure`, <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> właściwość powinna być ustawiona na nazwę procedury składowanej. Użytkownik może być wymagany do użycia składni znaku ucieczki, jeśli nazwa procedury składowanej zawiera wszelkie znaki specjalne. Polecenie wykonuje tę procedurę składowaną, wywołując jedną z `Execute` metody.  
  
 Microsoft .NET Framework Data Provider dla programu SQL Server nie obsługuje przekazywania parametrów do instrukcji języka Transact-SQL lub procedura składowana wywoływana za pomocą polecenia programu symbolu zastępczego znak zapytania (?) `CommandType.Text`. W takim przypadku należy użyć parametrów nazwanych. Na przykład:  
  
```  
SELECT * FROM dbo.Customers WHERE CustomerID = @CustomerID  
```  
  
 Aby uzyskać więcej informacji, zobacz [konfigurowania parametrów i typ danych parametru](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md).  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.SqlClient.SqlCommand> i ustawia niektóre jego właściwości.  
  
 [!code-csharp[Classic WebData SqlCommand.CommandText Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.CommandText Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.CommandText Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.CommandText Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTimeout">
      <MemberSignature Language="C#" Value="public override int CommandTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CommandTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.CommandTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CommandTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CommandTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbCommand.CommandTimeout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia czas oczekiwania przed zakończeniem próby wykonania polecenia i wygenerowaniem błędu.</summary>
        <value>Czas w sekundach oczekiwania na wykonanie polecenia. Wartość domyślna to 30 sekund.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość 0 oznacza brak limitu (próba wykonania polecenia będzie czekać w nieskończoność).  
  
> [!NOTE]
>  <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> Właściwość będzie ignorowana podczas wywołań metod asynchronicznych takich jak <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.  
  
 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> nie ma wpływu, jeśli polecenie zostanie wykonane przed połączeniem kontekstu ( <xref:System.Data.SqlClient.SqlConnection> otworzyć za pomocą "połączenia kontekstu = true" w parametrach połączenia).  
  
> [!NOTE]
>  Ta właściwość jest zbiorcza limit czasu (w przypadku wszystkich pakietów sieciowych, które są odczytywane podczas wywoływania metody) dla wszystkich odczyty sieci podczas wykonywania polecenia lub przetwarzania wyników. Limit czasu można nadal występują po pierwszego wiersza jest zwracany, a nie obejmuje czas przetwarzania użytkownika, tylko sieć czas odczytu.  
>   
>  Na przykład z czasem 30 sekund wychodzących, jeśli <xref:System.Data.SqlClient.SqlDataReader.Read%2A> wymaga dwóch pakietach sieciowych, a następnie do odczytu, zarówno pakietach sieciowych ma 30 sekund. Jeśli należy wywołać <xref:System.Data.SqlClient.SqlDataReader.Read%2A> ponownie, będzie miał innego 30 sekund do żadnych danych, który jest wymagany do odczytu.  
  
```  
using System;  
using System.Data.SqlClient;  
///   
public class A {  
   ///   
   public static void Main() {  
      string connectionString = "";  
      // Wait for 5 second delay in the command  
      string queryString = "waitfor delay '00:00:05'";  
      using (SqlConnection connection = new SqlConnection(connectionString)) {  
         connection.Open();  
         SqlCommand command = new SqlCommand(queryString, connection);  
         // Setting command timeout to 1 second  
         command.CommandTimeout = 1;  
         try {  
            command.ExecuteNonQuery();  
         }  
         catch (SqlException e) {  
            Console.WriteLine("Got expected SqlException due to command timeout ");  
            Console.WriteLine(e);  
         }  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandType">
      <MemberSignature Language="C#" Value="public override System.Data.CommandType CommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandType CommandType" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.CommandType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CommandType As CommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::CommandType CommandType { System::Data::CommandType get(); void set(System::Data::CommandType value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbCommand.CommandType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.CommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą sposób <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> właściwości mają być interpretowane.</summary>
        <value>Jeden z <see cref="T:System.Data.CommandType" /> wartości. Wartość domyślna to <see langword="Text" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas ustawiania <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> właściwości `StoredProcedure`, należy ustawić <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> właściwość na nazwę procedury składowanej. Polecenie wykonuje tę procedurę składowaną podczas wywoływania jednej z metod wykonania.  
  
 Microsoft .NET Framework Data Provider dla programu SQL Server nie obsługuje symbolu zastępczego znak zapytania (?) przekazywania parametrów do instrukcji SQL lub procedury składowanej wywołana z <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> z <xref:System.Data.CommandType.Text>. W takim przypadku należy użyć parametrów nazwanych. Na przykład:  
  
 Wybierz * klientów gdzie CustomerID = @CustomerID  
  
 Aby uzyskać więcej informacji, zobacz [konfigurowania parametrów i typ danych parametru](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md).  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.SqlClient.SqlCommand> i ustawia niektóre jego właściwości.  
  
 [!code-csharp[Classic WebData IDbCommand.CommandTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Wartość nie jest prawidłowym <see cref="T:System.Data.CommandType" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlConnection Connection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.Connection" />
      <MemberSignature Language="VB.NET" Value="Public Property Connection As SqlConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlConnection ^ Connection { System::Data::SqlClient::SqlConnection ^ get(); void set(System::Data::SqlClient::SqlConnection ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Data.SqlClient.SqlConnection" /> używane przez to wystąpienie elementu <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <value>Połączenie ze źródłem danych. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli polecenie jest zarejestrowany w istniejącej transakcji, a połączenie zostanie zmieniona, zgłosi próby wykonania polecenia <xref:System.InvalidOperationException>.  
  
 Jeśli <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> właściwość nie jest pusty i transakcja została już zatwierdzona lub wycofana, <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> jest ustawiony na wartość null.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.SqlClient.SqlCommand> i ustawia niektóre jego właściwości.  
  
 [!code-csharp[Classic WebData SqlCommand.Connection Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Connection Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.Connection Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Connection Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> Właściwości została zmieniona, gdy polecenie została zarejestrowana w transakcji.</exception>
        <altmember cref="P:System.Data.SqlClient.SqlCommand.CommandText" />
        <altmember cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" />
        <altmember cref="P:System.Data.SqlClient.SqlCommand.CommandType" />
      </Docs>
    </Member>
    <Member MemberName="CreateDbParameter">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbParameter CreateDbParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbParameter CreateDbParameter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.CreateDbParameter" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbParameter () As DbParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbParameter ^ CreateDbParameter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParameter">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlParameter CreateParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlParameter CreateParameter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.CreateParameter" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateParameter () As SqlParameter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlParameter ^ CreateParameter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Data.SqlClient.SqlParameter" /> obiektu.</summary>
        <returns>A <see cref="T:System.Data.SqlClient.SqlParameter" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommand.CreateParameter%2A> Metoda jest silnie typizowaną wersję <xref:System.Data.IDbCommand.CreateParameter%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbConnection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbConnection DbConnection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection DbConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.DbConnection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Property DbConnection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbConnection ^ DbConnection { System::Data::Common::DbConnection ^ get(); void set(System::Data::Common::DbConnection ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbParameterCollection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbParameterCollection DbParameterCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbParameterCollection DbParameterCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.DbParameterCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbParameterCollection As DbParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbParameterCollection ^ DbParameterCollection { System::Data::Common::DbParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction DbTransaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbTransaction DbTransaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.DbTransaction" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Property DbTransaction As DbTransaction" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbTransaction ^ DbTransaction { System::Data::Common::DbTransaction ^ get(); void set(System::Data::Common::DbTransaction ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DesignTimeVisible">
      <MemberSignature Language="C#" Value="public override bool DesignTimeVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DesignTimeVisible" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.DesignTimeVisible" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property DesignTimeVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool DesignTimeVisible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy obiekt polecenia powinny być widoczne w formancie projektanta formularzy systemu Windows.</summary>
        <value>Wartość wskazująca, czy obiekt polecenia powinny być widoczne w formancie. Wartość domyślna to ** true **.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndExecuteNonQuery">
      <MemberSignature Language="C#" Value="public int EndExecuteNonQuery (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndExecuteNonQuery(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndExecuteNonQuery (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndExecuteNonQuery(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> Zwrócony przez wywołanie <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />.</param>
        <summary>Kończy działanie asynchroniczne instrukcji języka Transact-SQL.</summary>
        <returns>Liczba zmodyfikowanych wierszy (jak <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wywoływania <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> do wykonania [!INCLUDE[tsql](~/includes/tsql-md.md)] instrukcji, należy wywołać <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> w celu ukończenia tej operacji. Jeśli proces wykonywania polecenia nie została jeszcze ukończona, ten uniemożliwia metody aż do zakończenia operacji. Użytkowników można sprawdzić, że polecenie zostało wykonane jego operacji za pomocą <xref:System.IAsyncResult> zwrócone przez wystąpienie <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> metody. Jeśli procedura wywołania zwrotnego został określony w wywołaniu <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>, ta metoda musi zostać wywołana.  
  
   
  
## Examples  
 Aby uzyskać przykłady pokazujące stosowania <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> metody, zobacz <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> parametr ma wartość null (<see langword="Nothing" /> programu Microsoft Visual Basic)</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> została wywołana więcej niż raz dla jednego polecenia wykonywania lub metody została niezgodne przed jej wykonanie metody (na przykład kod wywołuje <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> do ukończenia wykonywania wywołań do <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Czas określony w <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> upłynął i operacja asynchroniczna określona z <see cref="Overload:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> nie została ukończona.  W niektórych sytuacjach <see cref="T:System.IAsyncResult" /> może być ustawiony na <see langword="IsCompleted" /> niepoprawnie. W takim przypadku i <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> jest wywoływana, EndExecuteNonQuery mogą budzić błąd SqlException Jeśli czas określony w <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> upłynął i operacja asynchroniczna określona z <see cref="Overload:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> nie została ukończona. Aby naprawić tę sytuację, należy zwiększyć wartość CommandTimeout lub Zmniejsz ilość pracy wykonywana przez operację asynchroniczną.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataReader EndExecuteReader (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlDataReader EndExecuteReader(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndExecuteReader (asyncResult As IAsyncResult) As SqlDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlDataReader ^ EndExecuteReader(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> Zwrócony przez wywołanie <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader" />.</param>
        <summary>Kończy działanie asynchroniczne instrukcji języka Transact-SQL, zwracając żądany <see cref="T:System.Data.SqlClient.SqlDataReader" />.</summary>
        <returns>A <see cref="T:System.Data.SqlClient.SqlDataReader" /> obiektu, który może służyć do pobierania żądanych wierszy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wywoływania <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> do wykonania instrukcji języka Transact-SQL, należy wywołać <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> w celu ukończenia tej operacji. Jeśli proces wykonywania polecenia nie została jeszcze ukończona, ten uniemożliwia metody aż do zakończenia operacji. Użytkowników można sprawdzić, że polecenie zostało wykonane jego operacji za pomocą <xref:System.IAsyncResult> zwrócone przez wystąpienie <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> metody. Jeśli procedura wywołania zwrotnego został określony w wywołaniu <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>, ta metoda musi zostać wywołana.  
  
   
  
## Examples  
 Aby uzyskać przykłady pokazujące stosowania <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> metody, zobacz <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> parametr ma wartość null (<see langword="Nothing" /> programu Microsoft Visual Basic)</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> została wywołana więcej niż raz dla jednego polecenia wykonywania lub metody została niezgodne przed jej wykonanie metody (na przykład kod wywołuje <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> do ukończenia wykonywania wywołań do <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndExecuteXmlReader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader EndExecuteXmlReader (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader EndExecuteXmlReader(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndExecuteXmlReader (asyncResult As IAsyncResult) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ EndExecuteXmlReader(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> Zwrócony przez wywołanie <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />.</param>
        <summary>Kończy działanie asynchroniczne instrukcji języka Transact-SQL, zwracając żądane dane w formacie XML.</summary>
        <returns>
          <see cref="T:System.Xml.XmlReader" /> Obiektu, który może służyć do pobierania danych XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wywoływania <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> do wykonania instrukcji języka Transact-SQL, należy wywołać <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> w celu ukończenia tej operacji. Jeśli proces wykonywania polecenia nie została jeszcze ukończona, ten uniemożliwia metody aż do zakończenia operacji. Użytkowników można sprawdzić, że polecenie zostało wykonane jego operacji za pomocą <xref:System.IAsyncResult> zwrócone przez wystąpienie <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> metody. Jeśli procedura wywołania zwrotnego został określony w wywołaniu <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>, ta metoda musi zostać wywołana.  
  
   
  
## Examples  
 Aby uzyskać przykłady pokazujące stosowania <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> metody, zobacz <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> parametr ma wartość null (<see langword="Nothing" /> programu Microsoft Visual Basic)</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" /> została wywołana więcej niż raz dla jednego polecenia wykonywania lub metody została niezgodne przed jej wykonanie metody (na przykład kod wywołuje <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" /> do ukończenia wykonywania wywołań do <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDbDataReader">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbDataReader ExecuteDbDataReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbDataReader ExecuteDbDataReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteDbDataReader (behavior As CommandBehavior) As DbDataReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbDataReader ^ ExecuteDbDataReader(System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDbDataReaderAsync">
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt; ExecuteDbDataReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Data.Common.DbDataReader&gt; ExecuteDbDataReaderAsync(valuetype System.Data.CommandBehavior behavior, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Threading::Tasks::Task&lt;System::Data::Common::DbDataReader ^&gt; ^ ExecuteDbDataReaderAsync(System::Data::CommandBehavior behavior, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteNonQuery">
      <MemberSignature Language="C#" Value="public override int ExecuteNonQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ExecuteNonQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExecuteNonQuery () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ExecuteNonQuery();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.ExecuteNonQuery</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wykonuje instrukcję języka Transact-SQL w odniesieniu do połączenia i zwraca liczbę uwzględnionych wierszy.</summary>
        <returns>Liczba zmodyfikowanych wierszy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> do wykonywania operacji katalogu (na przykład podczas badania struktury bazy danych lub tworzenie obiektów bazy danych, takich jak tabele) lub aby zmienić dane w bazie danych bez korzystania z <xref:System.Data.DataSet> , wykonując AKTUALIZOWANIA, WSTAWIANIA lub usuwania instrukcje.  
  
 Mimo że <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> zwraca żadnych wierszy, wszystkie parametry wyjściowe lub zwracać wartości mapowane na parametry są wypełniane przy użyciu danych.  
  
 Dla instrukcji UPDATE, INSERT i DELETE wartość zwracana jest liczba wierszy objętych polecenia. Gdy wyzwalacz istnieje w tabeli są wstawiane lub aktualizowane, zwracana wartość zawiera liczbę wierszy dotyczy zarówno operacja wstawiania lub aktualizacji oraz liczbę wierszy, wyzwalacza lub wyzwalaczy. Dla wszystkich innych typów instrukcji wartość zwracana jest wartość -1. W przypadku wycofywania -1 jest również wartość zwracaną.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.SqlClient.SqlCommand> , a następnie wykonuje za pomocą <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>. Przykład jest przekazywany ciąg, który jest instrukcji języka Transact-SQL (na przykład AKTUALIZOWANIA, WSTAWIANIA lub usuwania), a ciąg wykorzystywany do nawiązania połączenia ze źródłem danych.  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteNonQuery Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteNonQuery Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Wystąpił wyjątek podczas wykonywania polecenia przed wierszem zablokowanym. Ten wyjątek nie jest generowany, gdy jest używany program Microsoft .NET Framework w wersji 1.0.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteNonQueryAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ExecuteNonQueryAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ExecuteNonQueryAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;int&gt; ^ ExecuteNonQueryAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Instrukcja anulowania.</param>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" />, który wykonuje [! Instrukcja include[TSQL](~/includes/TSQL-MD.MD)] przed połączenia i zwraca liczbę wierszy wpływ. Token anulowania może służyć do żądania porzucony operację zanim upłynie limit czasu polecenia.  Wyjątki będą zgłaszane przez zwrócony obiekt zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" /> więcej niż raz dla tego samego wystąpienia przed ukończeniem zadania.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">SQL Server zwrócił błąd podczas wykonywania tekst polecenia.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteReader">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wysyła <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> do <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> i tworzy <see cref="T:System.Data.SqlClient.SqlDataReader" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataReader ExecuteReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlDataReader ExecuteReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReader" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReader () As SqlDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlDataReader ^ ExecuteReader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wysyła <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> do <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> i tworzy <see cref="T:System.Data.SqlClient.SqlDataReader" />.</summary>
        <returns>A <see cref="T:System.Data.SqlClient.SqlDataReader" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> właściwość jest ustawiona na `StoredProcedure`, <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> właściwość powinna być ustawiona na nazwę procedury składowanej. Polecenie wykonuje tę procedurę składowaną podczas wywoływania <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>.  
  
> [!NOTE]
>  Jeśli jest typu transakcji, nie może zostać zgłoszony wyjątek, aż do <xref:System.Data.SqlClient.SqlDataReader.Read%2A> jest wywoływana.  
  
 Wiele funkcji zestawu (MARS) aktywnych wyników umożliwia wielu akcji przy użyciu tego samego połączenia.  
  
 Jeśli używasz <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> dostępu do danych XML, SQL Server zwróci żadnych wyników XML większa niż 2,033 znaków długości w wielu wierszach 2,033 znaków. Aby uniknąć tego zachowania, należy użyć <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> odczytać FOR XML zapytania. Aby uzyskać więcej informacji, zobacz artykuł Q310378, "PRB: XML danych jest obcięte podczas możesz Użyj SqlDataReader," w bazie wiedzy Microsoft Knowledge Base pod http://support.microsoft.com.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.SqlClient.SqlCommand>, a następnie wykonuje przez przekazanie ciąg, który jest instrukcji języka Transact-SQL SELECT, a ciąg wykorzystywany do nawiązania połączenia ze źródłem danych.  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteReader Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteReader Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteReader Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteReader Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Wystąpił wyjątek podczas wykonywania polecenia przed wierszem zablokowanym. Ten wyjątek nie jest generowany, gdy jest używany program Microsoft .NET Framework w wersji 1.0.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.InvalidOperationException">Bieżący stan połączenia jest zamknięty. <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" /> wymaga otwartego <see cref="T:System.Data.SqlClient.SqlConnection" />.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataReader ExecuteReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlDataReader ExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReader (behavior As CommandBehavior) As SqlDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlDataReader ^ ExecuteReader(System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">Jeden z <see cref="T:System.Data.CommandBehavior" /> wartości.</param>
        <summary>Wysyła <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> do <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />i tworzy <see cref="T:System.Data.SqlClient.SqlDataReader" /> przy użyciu jednej z <see cref="T:System.Data.CommandBehavior" /> wartości.</summary>
        <returns>A <see cref="T:System.Data.SqlClient.SqlDataReader" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> właściwość jest ustawiona na `StoredProcedure`, <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> właściwość powinna być ustawiona na nazwę procedury składowanej. Polecenie wykonuje tę procedurę składowaną podczas wywoływania <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>.  
  
> [!NOTE]
>  Użyj <xref:System.Data.CommandBehavior.SequentialAccess> można pobrać wartości dużych i danych binarnych. W przeciwnym razie <xref:System.OutOfMemoryException> może wystąpić i połączenie zostanie zamknięte.  
  
 Wiele funkcji zestawu (MARS) aktywnych wyników umożliwia wielu akcji przy użyciu tego samego połączenia.  
  
 Jeśli używasz <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> dostępu do danych XML, SQL Server zwróci żadnych wyników XML większa niż 2,033 znaków długości w wielu wierszach 2,033 znaków. Aby uniknąć tego zachowania, należy użyć <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> odczytać FOR XML zapytania. Aby uzyskać więcej informacji, zobacz artykuł Q310378, "PRB: XML danych jest obcięte podczas możesz Użyj SqlDataReader," w bazie wiedzy Microsoft Knowledge Base pod http://support.microsoft.com.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.SqlClient.SqlCommand>, a następnie wykonuje przez przekazanie ciąg, który jest instrukcji języka Transact-SQL SELECT, a ciąg wykorzystywany do nawiązania połączenia ze źródłem danych. <xref:System.Data.CommandBehavior> ustawiono <xref:System.Data.CommandBehavior.CloseConnection>.  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteReader2#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteReader2/CS/mysample.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteReader2#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteReader2/VB/mysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteReaderAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje asynchroniczne wykonywanie [! INCLUDE[TSQL](~/includes/TSQL-MD.MD)] instrukcji lub procedury przechowywanej, która jest opisane przez to <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReaderAsync () As Task(Of SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Data::SqlClient::SqlDataReader ^&gt; ^ ExecuteReaderAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" />, który wysyła <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> do <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> i tworzy <see cref="T:System.Data.SqlClient.SqlDataReader" />. Wyjątki będą zgłaszane przez zwrócony obiekt zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.ArgumentException">Nieprawidłowy <see cref="T:System.Data.CommandBehavior" /> wartość.</exception>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync" /> więcej niż raz dla tego samego wystąpienia przed ukończeniem zadania.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">SQL Server zwrócił błąd podczas wykonywania tekst polecenia.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReaderAsync (behavior As CommandBehavior) As Task(Of SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Data::SqlClient::SqlDataReader ^&gt; ^ ExecuteReaderAsync(System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">Opcje pobierania instrukcji wykonywania i danych.  Jeśli ustawiono <see langword="Default" />, <see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" /> odczytuje cały wiersz przed zwróceniem wykonać zadania.</param>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" />, który wysyła <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> do <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />i tworzy <see cref="T:System.Data.SqlClient.SqlDataReader" />. Wyjątki będą zgłaszane przez zwrócony obiekt zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.ArgumentException">Nieprawidłowy <see cref="T:System.Data.CommandBehavior" /> wartość.</exception>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)" /> więcej niż raz dla tego samego wystąpienia przed ukończeniem zadania.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">SQL Server zwrócił błąd podczas wykonywania tekst polecenia.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Data::SqlClient::SqlDataReader ^&gt; ^ ExecuteReaderAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Instrukcja anulowania.</param>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" />, który wysyła <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> do <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> i tworzy <see cref="T:System.Data.SqlClient.SqlDataReader" />.  Token anulowania może służyć do żądania porzucony operację zanim upłynie limit czasu polecenia.  Wyjątki będą zgłaszane przez zwrócony obiekt zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.ArgumentException">Nieprawidłowy <see cref="T:System.Data.CommandBehavior" /> wartość.</exception>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" /> więcej niż raz dla tego samego wystąpienia przed ukończeniem zadania.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">SQL Server zwrócił błąd podczas wykonywania tekst polecenia.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync(valuetype System.Data.CommandBehavior behavior, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Data::SqlClient::SqlDataReader ^&gt; ^ ExecuteReaderAsync(System::Data::CommandBehavior behavior, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="behavior">Opcje pobierania instrukcji wykonywania i danych.  Jeśli ustawiono <see langword="Default" />, <see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" /> odczytuje cały wiersz przed zwróceniem wykonać zadania.</param>
        <param name="cancellationToken">Instrukcja anulowania.</param>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" />, który wysyła <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> do <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />i tworzy <see cref="T:System.Data.SqlClient.SqlDataReader" /> token anulowania może służyć do żądania porzucony operację zanim upłynie limit czasu polecenia.  Wyjątki będą zgłaszane przez zwrócony obiekt zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.ArgumentException">Nieprawidłowy <see cref="T:System.Data.CommandBehavior" /> wartość.</exception>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" /> więcej niż raz dla tego samego wystąpienia przed ukończeniem zadania.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">SQL Server zwrócił błąd podczas wykonywania tekst polecenia.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteScalar">
      <MemberSignature Language="C#" Value="public override object ExecuteScalar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ExecuteScalar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteScalar" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExecuteScalar () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ExecuteScalar();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.ExecuteScalar</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wykonuje zapytanie i zwraca pierwszą kolumnę pierwszego wiersza w zestawie wyników zwróconych przez kwerendę. Dodatkowe kolumny lub wiersze są ignorowane.</summary>
        <returns>Pierwszą kolumnę pierwszego wiersza w zestawie wyników, lub odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), jeśli zestaw wyników jest pusty. Zwraca 2033 znaków.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A> metodę, aby pobrać pojedynczą wartość (na przykład wartości zagregowanej) z bazy danych. Wymaga to mniejsza ilość kodu niż przy użyciu <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> metody, a następnie wykonuje operacje, które są potrzebne do generowania pojedynczą wartość, przy użyciu danych zwróconych przez <xref:System.Data.SqlClient.SqlDataReader>.  
  
 Typowe <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A> zapytanie może być sformatowany jak w poniższym przykładzie C#:  
  
```  
cmd.CommandText = "SELECT COUNT(*) FROM dbo.region";  
Int32 count = (Int32) cmd.ExecuteScalar();  
```  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.SqlClient.SqlCommand> , a następnie wykonuje za pomocą <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>. Przykład jest przekazywany ciąg reprezentujący nowa wartość ma zostać wstawiony do tabeli, a ciąg wykorzystywany do nawiązania połączenia ze źródłem danych. Funkcja zwraca nowy **tożsamości** wartość kolumny została wstawiona nowego wiersza, awarii na 0.  
  
 [!code-csharp[DataWorks SqlCommand.ExecuteScalar#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.ExecuteScalar/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.ExecuteScalar#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.ExecuteScalar/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Wystąpił wyjątek podczas wykonywania polecenia przed wierszem zablokowanym. Ten wyjątek nie jest generowany, gdy jest używany program Microsoft .NET Framework w wersji 1.0.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteScalarAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;object&gt; ExecuteScalarAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ExecuteScalarAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ ExecuteScalarAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Instrukcja anulowania.</param>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalar" />, które asynchronicznie wykonuje zapytania i zwraca pierwszą kolumnę pierwszego wiersza w zestawie wyników zwróconych przez kwerendę. Dodatkowe kolumny lub wiersze są ignorowane.  Token anulowania może służyć do żądania porzucony operację zanim upłynie limit czasu polecenia. Wyjątki będą zgłaszane przez zwrócony obiekt zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" /> więcej niż raz dla tego samego wystąpienia przed ukończeniem zadania.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">SQL Server zwrócił błąd podczas wykonywania tekst polecenia.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteXmlReader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader ExecuteXmlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader ExecuteXmlReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteXmlReader () As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ ExecuteXmlReader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wysyła <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> do <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> i tworzy <see cref="T:System.Xml.XmlReader" /> obiektu.</summary>
        <returns>
          <see cref="T:System.Xml.XmlReader" /> Obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **XmlReader** zwróconych przez to metoda nie obsługuje operacji asynchronicznych.

 <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> Właściwość zazwyczaj określa [!INCLUDE[tsql](~/includes/tsql-md.md)] instrukcję, określając prawidłową klauzuli FOR XML. Jednak <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> można również określić instrukcję, która zwraca `ntext` lub `nvarchar` danych, który zawiera prawidłowy kod XML lub zawartości kolumny o `xml` — typ danych.  
  
 Typowe <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> zapytanie może być sformatowany jak w poniższym przykładzie Microsoft Visual C#:  
  
```  
SqlCommand command = new SqlCommand("SELECT * FROM dbo.Customers FOR XML AUTO, XMLDATA", SqlConn);  
```  
  
 Tej metody można również pobrać zestawu wyników pojedynczy wiersz, pojedynczej kolumny zawierającej dane XML. W tym przypadku jeśli więcej niż jeden wiersz jest zwracany, <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> dołącza metody <xref:System.Xml.XmlReader> wartości w pierwszym wierszu i odrzucenia ustawić rest, wyników.  
  
 Wiele funkcji zestawu (MARS) aktywnych wyników umożliwia wielu akcji przy użyciu tego samego połączenia.  
  
 Jeśli używasz <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> dostępu do danych XML, SQL Server zwróci żadnych wyników XML większa niż 2,033 znaków długości w wielu wierszach 2,033 znaków. Aby uniknąć tego zachowania, należy użyć <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> lub <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> odczytać FOR XML zapytania. Aby uzyskać więcej informacji, zobacz artykuł Q310378, "PRB: XML danych jest obcięte podczas możesz Użyj SqlDataReader," w bazie wiedzy Microsoft Knowledge Base pod http://support.microsoft.com.  


## Examples  
 Poniższy przykład tworzy <xref:System.Data.SqlClient.SqlCommand> , a następnie wykonuje za pomocą <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>. Przykład jest przekazywany ciąg, który jest instrukcji języka Transact-SQL wybierz XML, a ciąg wykorzystywany do nawiązania połączenia ze źródłem danych.  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteXmlReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteXmlReader/CS/mysample.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteXmlReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteXmlReader/VB/mysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Wystąpił wyjątek podczas wykonywania polecenia przed wierszem zablokowanym. Ten wyjątek nie jest generowany, gdy jest używany program Microsoft .NET Framework w wersji 1.0.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteXmlReaderAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje asynchroniczne wykonywania instrukcji języka Transact-SQL lub procedury przechowywanej, która jest opisane przez to <see cref="T:System.Data.SqlClient.SqlCommand" /> i zwraca wyniki w postaci <see cref="T:System.Xml.XmlReader" /> obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteXmlReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt; ExecuteXmlReaderAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Xml.XmlReader&gt; ExecuteXmlReaderAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteXmlReaderAsync () As Task(Of XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Xml::XmlReader ^&gt; ^ ExecuteXmlReaderAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />, który wysyła <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> do <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> i tworzy <see cref="T:System.Xml.XmlReader" /> obiektu.  Wyjątki będą zgłaszane przez zwrócony obiekt zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

**XmlReader** zwróconych przez to metoda nie obsługuje operacji asynchronicznych.

Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" /> więcej niż raz dla tego samego wystąpienia przed ukończeniem zadania.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">SQL Server zwrócił błąd podczas wykonywania tekst polecenia.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteXmlReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt; ExecuteXmlReaderAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Xml.XmlReader&gt; ExecuteXmlReaderAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Xml::XmlReader ^&gt; ^ ExecuteXmlReaderAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Instrukcja anulowania.</param>
        <summary>Wersja asynchroniczna elementu <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />, który wysyła <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> do <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> i tworzy <see cref="T:System.Xml.XmlReader" /> obiektu.  Token anulowania może służyć do żądania porzucony operację zanim upłynie limit czasu polecenia.  Wyjątki będą zgłaszane przez zwrócony obiekt zadania.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

**XmlReader** zwróconych przez to metoda nie obsługuje operacji asynchronicznych.

Aby uzyskać więcej informacji na temat programowania asynchronicznego w programie .NET Framework Data Provider for SQL Server, zobacz [programowania asynchronicznego](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Binary ** lub ** VarBinary ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.Stream" />. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Char ** ** NChar ** ** NVarChar ** ** VarChar ** lub ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.IO.TextReader" />.  A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> innych niż ** Xml ** został użyty podczas <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> ustawiono <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" /> więcej niż raz dla tego samego wystąpienia przed ukończeniem zadania.  <see cref="T:System.Data.SqlClient.SqlConnection" /> Zamknięty lub usunięty podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.  
  
 <see langword="Context Connection=true" /> określono w parametrach połączenia.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">SQL Server zwrócił błąd podczas wykonywania tekst polecenia.  Upłynął limit czasu podczas operacji przesyłania strumieniowego. Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> lub <see cref="T:System.IO.TextReader" /> obiektu podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> Lub <see cref="T:System.IO.TextReader" /> obiekt został zamknięty podczas operacji przesyłania strumieniowego.  Aby uzyskać więcej informacji na temat przesyłania strumieniowego Zobacz [SqlClient Support](~/docs/framework/data/adonet/sqlclient-streaming-support.md) przesyłania strumieniowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="Notification">
      <MemberSignature Language="C#" Value="public System.Data.Sql.SqlNotificationRequest Notification { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Sql.SqlNotificationRequest Notification" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.Notification" />
      <MemberSignature Language="VB.NET" Value="Public Property Notification As SqlNotificationRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Sql::SqlNotificationRequest ^ Notification { System::Data::Sql::SqlNotificationRequest ^ get(); void set(System::Data::Sql::SqlNotificationRequest ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Sql.SqlNotificationRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą <see cref="T:System.Data.Sql.SqlNotificationRequest" /> obiekt powiązany z tym poleceniem.</summary>
        <value>Gdy są ustawione na wartość null (ustawienie domyślne), można żądać prezentowane żadne powiadomienie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość dla tej właściwości należy ustawić przed wykonaniem polecenia dla niego zaczęły obowiązywać.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotificationAutoEnlist">
      <MemberSignature Language="C#" Value="public bool NotificationAutoEnlist { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotificationAutoEnlist" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.NotificationAutoEnlist" />
      <MemberSignature Language="VB.NET" Value="Public Property NotificationAutoEnlist As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotificationAutoEnlist { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy aplikacji powinien automatycznie otrzymywać powiadomień o zapytaniach wspólnego <see cref="T:System.Data.SqlClient.SqlDependency" /> obiektu.</summary>
        <value>** true ** czy aplikacja ma automatycznie otrzymywać powiadomień o zapytaniach; w przeciwnym razie ** false **. Wartość domyślna to ** true **.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta funkcja jest używana w aplikacjach ASP.NET, aby otrzymywać powiadomienia do wszystkich poleceń wykonania strony ASP na serwerze SQL. Dzięki temu program ASP.NET do pamięci podręcznej strony, dopóki dałby w efekcie różne wyniki zapytania, używane do renderowania strony. Automatyczne umieszczanie.  
  
 Ta właściwość dotyczy tylko wersji programu SQL Server, która obsługuje powiadomienia kwerendy. We wcześniejszych wersjach ustawienie tej właściwości na **true** nie ma wpływu na aplikację.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlParameterCollection Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlParameterCollection Parameters" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As SqlParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlParameterCollection ^ Parameters { System::Data::SqlClient::SqlParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Data.SqlClient.SqlParameterCollection" />.</summary>
        <value>Parametry instrukcji języka Transact-SQL lub procedury składowanej. Wartością domyślną jest pusta kolekcja.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft .NET Framework Data Provider dla programu SQL Server nie obsługuje przekazywania parametrów do instrukcji SQL lub procedura składowana wywoływana za pomocą polecenia programu symbolu zastępczego znak zapytania (?) `CommandType.Text`. W takim przypadku należy użyć parametrów nazwanych. Na przykład:  
  
 Wybierz * klientów gdzie CustomerID = @CustomerID  
  
> [!NOTE]
>  Parametry w kolekcji nie są zgodne z wymaganiami zapytania do wykonania, może spowodować błąd.  
  
 Aby uzyskać więcej informacji, zobacz [konfigurowania parametrów i typ danych parametru](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md).  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób tworzenia <xref:System.Data.SqlClient.SqlCommand> i dodać parametry <xref:System.Data.SqlClient.SqlParameterCollection>.  
  
 [!code-csharp[DataWorks SqlParameterCollection.AddWithValue#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlParameterCollection.AddWithValue/CS/source.cs#1)]
 [!code-vb[DataWorks SqlParameterCollection.AddWithValue#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlParameterCollection.AddWithValue/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public override void Prepare ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Prepare() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.Prepare" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Prepare ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Prepare();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.Prepare</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Utworzenie wersji przygotowanego polecenia w wystąpieniu programu SQL Server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> ustawiono `StoredProcedure`, wywołanie <xref:System.Data.SqlClient.SqlCommand.Prepare%2A> ma być pomyślnie wykonane, chociaż może to spowodować zerowa.  
  
 Przed wywołaniem <xref:System.Data.SqlClient.SqlCommand.Prepare%2A>, określ typ danych każdego parametru w instrukcji, aby móc przywrócić. Dla każdego parametru, który ma typ danych o zmiennej długości, należy ustawić <xref:System.Data.SqlClient.SqlParameter.Size%2A> właściwości do maksymalnego rozmiaru potrzebne. <xref:System.Data.SqlClient.SqlCommand.Prepare%2A> Zwraca błąd, jeśli te warunki nie są spełnione.  
  
> [!NOTE]
>  Jeśli kontekst bazy danych zostanie zmieniona, wykonując języka Transact-SQL `USE <database>` instrukcji lub poprzez wywołanie <xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A> metody, a następnie <xref:System.Data.SqlClient.SqlCommand.Prepare%2A> musi zostać wywołany po raz drugi.  
  
 Wywołanie `Execute` metody po wywołaniu <xref:System.Data.SqlClient.SqlCommand.Prepare%2A>, jest większa niż wartość określona przez dowolną wartość parametru <xref:System.Data.SqlClient.SqlParameter.Size%2A> właściwości automatycznie jest obcinana do oryginalnego rozmiaru określonego parametru, a nie obcięcie istnieją błędy zwracane.  
  
 Dane wyjściowe parametrów (czy przygotowane lub nie) musi być typu danych określonego użytkownika. Jeśli określisz typu danych o zmiennej długości, należy również określić maksymalną <xref:System.Data.SqlClient.SqlParameter.Size%2A>.  
  
 Przed Visual Studio 2010 <xref:System.Data.SqlClient.SqlCommand.Prepare%2A> zwrócił wyjątek.  Począwszy od programu Visual Studio 2010, ta metoda nie zgłasza wyjątek.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.Data.SqlClient.SqlCommand.Prepare%2A> metody.  
  
 [!code-csharp[Classic WebData SqlCommand.Prepare#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Prepare/CS/Source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.Prepare#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Prepare/VB/Source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetCommandTimeout">
      <MemberSignature Language="C#" Value="public void ResetCommandTimeout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetCommandTimeout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ResetCommandTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetCommandTimeout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetCommandTimeout();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resetuje <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> właściwości na wartość domyślną.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> wynosi 30 sekund.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StatementCompleted">
      <MemberSignature Language="C#" Value="public event System.Data.StatementCompletedEventHandler StatementCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.StatementCompletedEventHandler StatementCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlCommand.StatementCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StatementCompleted As StatementCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::StatementCompletedEventHandler ^ StatementCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.StatementCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zakończeniu wykonywania instrukcji języka Transact-SQL.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nową <see cref="T:System.Data.SqlClient.SqlCommand" /> obiektu, który jest kopią bieżącego wystąpienia.</summary>
        <returns>Nowy <see cref="T:System.Data.SqlClient.SqlCommand" /> obiektu, który jest kopią tego wystąpienia.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction Transaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlTransaction Transaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.Transaction" />
      <MemberSignature Language="VB.NET" Value="Public Property Transaction As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlTransaction ^ Transaction { System::Data::SqlClient::SqlTransaction ^ get(); void set(System::Data::SqlClient::SqlTransaction ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Data.SqlClient.SqlTransaction" /> w ramach którego <see cref="T:System.Data.SqlClient.SqlCommand" /> wykonuje.</summary>
        <value>
          <see cref="T:System.Data.SqlClient.SqlTransaction" />. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można ustawić <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> właściwości, jeśli jest już ustawiony na określoną wartość, a polecenie jest w trakcie wykonywania. Jeśli ustawiono właściwość transaction <xref:System.Data.SqlClient.SqlTransaction> obiektu, który nie jest podłączony do tej samej <xref:System.Data.SqlClient.SqlConnection> jako <xref:System.Data.SqlClient.SqlCommand> obiekt jest zwracany wyjątek, przy następnym uruchomieniu próbował wykonać instrukcję.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatedRowSource">
      <MemberSignature Language="C#" Value="public override System.Data.UpdateRowSource UpdatedRowSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.UpdateRowSource UpdatedRowSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.UpdatedRowSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property UpdatedRowSource As UpdateRowSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::UpdateRowSource UpdatedRowSource { System::Data::UpdateRowSource get(); void set(System::Data::UpdateRowSource value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbCommand.UpdatedRowSource</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.UpdateRowSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia sposób wyniki poleceń są stosowane do <see cref="T:System.Data.DataRow" /> gdy jest używana przez ** aktualizacji ** metody <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <value>Jeden z <see cref="T:System.Data.UpdateRowSource" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna <xref:System.Data.UpdateRowSource> wartość jest **zarówno** chyba, że polecenie jest generowana automatycznie (tak jak w przypadku liczby <xref:System.Data.SqlClient.SqlCommandBuilder>), w takim przypadku wartość domyślna to **Brak**.  
  
 Aby uzyskać więcej informacji o korzystaniu z **przetwarzania wsadowego** właściwości, zobacz [parametry element DataAdapter](~/docs/framework/data/adonet/dataadapter-parameters.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>