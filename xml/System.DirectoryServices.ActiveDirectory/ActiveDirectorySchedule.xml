<Type Name="ActiveDirectorySchedule" FullName="System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4fda4343f67ee23a6d2987b38d4f2b18073bf87b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37662089" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ActiveDirectorySchedule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ActiveDirectorySchedule extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule" />
  <TypeSignature Language="VB.NET" Value="Public Class ActiveDirectorySchedule" />
  <TypeSignature Language="C++ CLI" Value="public ref class ActiveDirectorySchedule" />
  <TypeSignature Language="F#" Value="type ActiveDirectorySchedule = class" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule" /> Klasa przedstawia tygodniowy harmonogram replikacji Active Directory Domain Services.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ActiveDirectorySchedule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ActiveDirectorySchedule();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ActiveDirectorySchedule (System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule schedule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule schedule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule.#ctor(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schedule As ActiveDirectorySchedule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ActiveDirectorySchedule(System::DirectoryServices::ActiveDirectory::ActiveDirectorySchedule ^ schedule);" />
      <MemberSignature Language="F#" Value="new System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule : System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule -&gt; System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule" Usage="new System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule schedule" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schedule" Type="System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule" />
      </Parameters>
      <Docs>
        <param name="schedule">A <see cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule" /> obiekt, który jest kopiowany do tego obiektu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule" /> klasy przy użyciu określonego <see cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule" /> obiektu.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="schedule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RawSchedule">
      <MemberSignature Language="C#" Value="public bool[,,] RawSchedule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool[,,] RawSchedule" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule.RawSchedule" />
      <MemberSignature Language="VB.NET" Value="Public Property RawSchedule As Boolean(,,)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;bool, 3&gt; ^ RawSchedule { cli::array &lt;bool, 3&gt; ^ get(); void set(cli::array &lt;bool, 3&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RawSchedule : bool[,,] with get, set" Usage="System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule.RawSchedule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean[,,]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tablicę trójwymiarową, który wskazuje, w jakich czasie w ciągu tygodnia, czy źródło jest dostępna podczas replikacji.</summary>
        <value>Tablicą trójwymiarową <see cref="T:System.Boolean" /> elementów, w których jest elementem <see langword="true" /> Jeśli źródło jest dostępna podczas replikacji czas tego konkretnego interwału 15 minut. Element jest <see langword="false" /> Jeśli źródło nie jest dostępna podczas replikacji.  Tablica ma postać RawSchedule [&lt;dnia tygodnia&gt;, &lt;godzinę&gt;, &lt;15-minutowych interwałach&gt;]. Wszystkie te wartości są oparte na zerze i tydzień zaczyna się od 00:00 w niedzielę rano, skoordynowanego czasu uniwersalnego.  Poniżej przedstawiono prawidłowe wartości dla dnia tygodnia.  
  
 <list type="table"><listheader><term> Wartość dnia tygodnia </term><description> Indicated dzień tygodnia.  </description></listheader><item><term> 0 </term><description> niedziela </description></item><item><term> 1 </term><description> poniedziałek </description></item><item><term> 2 </term><description> Wtorek </description></item><item><term> 3 </term><description> środę </description></item><item><term> 4 </term><description> Czwartek </description></item><item><term> 5 </term><description> piątek </description></item><item><term> 6 </term><description> Sobota </description></item></list> godziny jest liczony od zera i określone w formacie 24-godzinnym. Na przykład 2: 00 Czy można określić jako 14. Prawidłowe wartości to 0 – 23.  Interwał 15-minutowy określa blok 15-minutowy w ciągu godziny, którego źródłem jest dostępna podczas replikacji. W poniższej tabeli przedstawiono możliwe wartości dla 15-minutowych interwałach.  
  
 <list type="table"><listheader><term> interwał 15-minutowy </term><description> opis </description></listheader><item><term> 0 </term><description> źródłem jest dostępna podczas replikacji z zakresu od 0 do 14 minut po pełnej godzinie.  </description></item><item><term> 1 </term><description> źródłem jest dostępna podczas replikacji od 15 do 29 min. po godzinie.  </description></item><item><term> 2 </term><description> źródłem jest dostępna podczas replikacji od 30 do 44 min. po godzinie.  </description></item><item><term> 3 </term><description> źródłem jest dostępna podczas replikacji od 45 do 59 minut po pełnej godzinie.  </description></item></list>  W poniższym przykładzie C# pokazuje, jak używać tej właściwości, aby określić, jeśli źródło jest dostępne dla replikacji w 15:50 uniwersalny czas koordynowany we wtorek.  "" csharp Boolean isAvailable = scheduleObject.RawSchedule[2, 15, 3]; "" W poniższym przykładzie C# pokazuje, jak używać tej właściwości do obliczenia 15-minutowych interwałach w czasie wykonywania przez podzielenie minuty przez 15.  "" csharp Boolean isAvailable scheduleObject.RawSchedule[2, 15, (Int32) = 50/15]; ```</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetSchedule">
      <MemberSignature Language="C#" Value="public void ResetSchedule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetSchedule() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule.ResetSchedule" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetSchedule ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetSchedule();" />
      <MemberSignature Language="F#" Value="member this.ResetSchedule : unit -&gt; unit" Usage="activeDirectorySchedule.ResetSchedule " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resetuje całego harmonogramu niedostępny.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDailySchedule">
      <MemberSignature Language="C#" Value="public void SetDailySchedule (System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, System.DirectoryServices.ActiveDirectory.HourOfDay toHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDailySchedule(valuetype System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, valuetype System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, valuetype System.DirectoryServices.ActiveDirectory.HourOfDay toHour, valuetype System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule.SetDailySchedule(System.DirectoryServices.ActiveDirectory.HourOfDay,System.DirectoryServices.ActiveDirectory.MinuteOfHour,System.DirectoryServices.ActiveDirectory.HourOfDay,System.DirectoryServices.ActiveDirectory.MinuteOfHour)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDailySchedule (fromHour As HourOfDay, fromMinute As MinuteOfHour, toHour As HourOfDay, toMinute As MinuteOfHour)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDailySchedule(System::DirectoryServices::ActiveDirectory::HourOfDay fromHour, System::DirectoryServices::ActiveDirectory::MinuteOfHour fromMinute, System::DirectoryServices::ActiveDirectory::HourOfDay toHour, System::DirectoryServices::ActiveDirectory::MinuteOfHour toMinute);" />
      <MemberSignature Language="F#" Value="member this.SetDailySchedule : System.DirectoryServices.ActiveDirectory.HourOfDay * System.DirectoryServices.ActiveDirectory.MinuteOfHour * System.DirectoryServices.ActiveDirectory.HourOfDay * System.DirectoryServices.ActiveDirectory.MinuteOfHour -&gt; unit" Usage="activeDirectorySchedule.SetDailySchedule (fromHour, fromMinute, toHour, toMinute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromHour" Type="System.DirectoryServices.ActiveDirectory.HourOfDay" />
        <Parameter Name="fromMinute" Type="System.DirectoryServices.ActiveDirectory.MinuteOfHour" />
        <Parameter Name="toHour" Type="System.DirectoryServices.ActiveDirectory.HourOfDay" />
        <Parameter Name="toMinute" Type="System.DirectoryServices.ActiveDirectory.MinuteOfHour" />
      </Parameters>
      <Docs>
        <param name="fromHour">Jedną z <see cref="T:System.DirectoryServices.ActiveDirectory.HourOfDay" /> elementów członkowskich, które określa pierwszą godzinę, które źródło będzie dostępna podczas replikacji.</param>
        <param name="fromMinute">Jedną z <see cref="T:System.DirectoryServices.ActiveDirectory.MinuteOfHour" /> elementów członkowskich, które określa pierwszy interwał 15-minutowy źródłem będzie dostępna podczas replikacji.</param>
        <param name="toHour">Jedną z <see cref="T:System.DirectoryServices.ActiveDirectory.HourOfDay" /> elementów członkowskich, które określa godzinę końcowe, które źródło będzie dostępna podczas replikacji.</param>
        <param name="toMinute">Jedną z <see cref="T:System.DirectoryServices.ActiveDirectory.MinuteOfHour" /> elementów członkowskich, które określa ostateczny interwał 15-minutowy źródłem będzie dostępna podczas replikacji.</param>
        <summary>Dodaje zakres czasu dla każdego dnia tygodnia w harmonogramie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie parametry w tej metodzie są włącznie.  
  
 Ta metoda jest zbiorcze i nie usuwa wszelkie istniejące informacje o harmonogramie. Jeśli istniejący harmonogram i nowego harmonogramu nakładają się, wynik będzie w dalszym zbiorczej. Aby usunąć harmonogram, należy użyć <xref:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule.ResetSchedule%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.HourOfDay" />
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.MinuteOfHour" />
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule.ResetSchedule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetSchedule">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje zakres czasu z harmonogramem.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetSchedule">
      <MemberSignature Language="C#" Value="public void SetSchedule (DayOfWeek day, System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, System.DirectoryServices.ActiveDirectory.HourOfDay toHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSchedule(valuetype System.DayOfWeek day, valuetype System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, valuetype System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, valuetype System.DirectoryServices.ActiveDirectory.HourOfDay toHour, valuetype System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule.SetSchedule(System.DayOfWeek,System.DirectoryServices.ActiveDirectory.HourOfDay,System.DirectoryServices.ActiveDirectory.MinuteOfHour,System.DirectoryServices.ActiveDirectory.HourOfDay,System.DirectoryServices.ActiveDirectory.MinuteOfHour)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSchedule (day As DayOfWeek, fromHour As HourOfDay, fromMinute As MinuteOfHour, toHour As HourOfDay, toMinute As MinuteOfHour)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSchedule(DayOfWeek day, System::DirectoryServices::ActiveDirectory::HourOfDay fromHour, System::DirectoryServices::ActiveDirectory::MinuteOfHour fromMinute, System::DirectoryServices::ActiveDirectory::HourOfDay toHour, System::DirectoryServices::ActiveDirectory::MinuteOfHour toMinute);" />
      <MemberSignature Language="F#" Value="member this.SetSchedule : DayOfWeek * System.DirectoryServices.ActiveDirectory.HourOfDay * System.DirectoryServices.ActiveDirectory.MinuteOfHour * System.DirectoryServices.ActiveDirectory.HourOfDay * System.DirectoryServices.ActiveDirectory.MinuteOfHour -&gt; unit" Usage="activeDirectorySchedule.SetSchedule (day, fromHour, fromMinute, toHour, toMinute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="day" Type="System.DayOfWeek" />
        <Parameter Name="fromHour" Type="System.DirectoryServices.ActiveDirectory.HourOfDay" />
        <Parameter Name="fromMinute" Type="System.DirectoryServices.ActiveDirectory.MinuteOfHour" />
        <Parameter Name="toHour" Type="System.DirectoryServices.ActiveDirectory.HourOfDay" />
        <Parameter Name="toMinute" Type="System.DirectoryServices.ActiveDirectory.MinuteOfHour" />
      </Parameters>
      <Docs>
        <param name="day">Jedną z <see cref="T:System.DayOfWeek" /> elementów członkowskich, które określa dzień tygodnia, w których źródłem będzie dostępna podczas replikacji.</param>
        <param name="fromHour">Jedną z <see cref="T:System.DirectoryServices.ActiveDirectory.HourOfDay" /> elementów członkowskich, które określa pierwszą godzinę, które źródło będzie dostępna podczas replikacji.</param>
        <param name="fromMinute">Jedną z <see cref="T:System.DirectoryServices.ActiveDirectory.MinuteOfHour" /> elementów członkowskich, które określa pierwszy interwał 15-minutowy źródłem będzie dostępna podczas replikacji.</param>
        <param name="toHour">Jedną z <see cref="T:System.DirectoryServices.ActiveDirectory.HourOfDay" /> elementów członkowskich, które określa godzinę końcowe, które źródło będzie dostępna podczas replikacji.</param>
        <param name="toMinute">Jedną z <see cref="T:System.DirectoryServices.ActiveDirectory.MinuteOfHour" /> elementów członkowskich, które określa ostateczny interwał 15-minutowy źródłem będzie dostępna podczas replikacji.</param>
        <summary>Dodaje zakres czasów jeden dzień w harmonogramie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie parametry w tej metodzie są włącznie.  
  
 Ta metoda jest zbiorcze i nie usuwa wszelkie istniejące informacje o harmonogramie. Jeśli istniejący harmonogram i nowego harmonogramu nakładają się, wynik będzie w dalszym zbiorczej. Aby usunąć harmonogram, należy użyć <xref:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule.ResetSchedule%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Czas rozpoczęcia przypada po godzinie zakończenia.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Jeden lub więcej parametrów jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="days" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.DayOfWeek" />
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.HourOfDay" />
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.MinuteOfHour" />
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule.ResetSchedule" />
      </Docs>
    </Member>
    <Member MemberName="SetSchedule">
      <MemberSignature Language="C#" Value="public void SetSchedule (DayOfWeek[] days, System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, System.DirectoryServices.ActiveDirectory.HourOfDay toHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSchedule(valuetype System.DayOfWeek[] days, valuetype System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, valuetype System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, valuetype System.DirectoryServices.ActiveDirectory.HourOfDay toHour, valuetype System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule.SetSchedule(System.DayOfWeek[],System.DirectoryServices.ActiveDirectory.HourOfDay,System.DirectoryServices.ActiveDirectory.MinuteOfHour,System.DirectoryServices.ActiveDirectory.HourOfDay,System.DirectoryServices.ActiveDirectory.MinuteOfHour)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSchedule (days As DayOfWeek(), fromHour As HourOfDay, fromMinute As MinuteOfHour, toHour As HourOfDay, toMinute As MinuteOfHour)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSchedule(cli::array &lt;DayOfWeek&gt; ^ days, System::DirectoryServices::ActiveDirectory::HourOfDay fromHour, System::DirectoryServices::ActiveDirectory::MinuteOfHour fromMinute, System::DirectoryServices::ActiveDirectory::HourOfDay toHour, System::DirectoryServices::ActiveDirectory::MinuteOfHour toMinute);" />
      <MemberSignature Language="F#" Value="member this.SetSchedule : DayOfWeek[] * System.DirectoryServices.ActiveDirectory.HourOfDay * System.DirectoryServices.ActiveDirectory.MinuteOfHour * System.DirectoryServices.ActiveDirectory.HourOfDay * System.DirectoryServices.ActiveDirectory.MinuteOfHour -&gt; unit" Usage="activeDirectorySchedule.SetSchedule (days, fromHour, fromMinute, toHour, toMinute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.DayOfWeek[]" />
        <Parameter Name="fromHour" Type="System.DirectoryServices.ActiveDirectory.HourOfDay" />
        <Parameter Name="fromMinute" Type="System.DirectoryServices.ActiveDirectory.MinuteOfHour" />
        <Parameter Name="toHour" Type="System.DirectoryServices.ActiveDirectory.HourOfDay" />
        <Parameter Name="toMinute" Type="System.DirectoryServices.ActiveDirectory.MinuteOfHour" />
      </Parameters>
      <Docs>
        <param name="days">Jedną z <see cref="T:System.DayOfWeek" /> elementów członkowskich, które określa dzień tygodnia, w których źródłem będzie dostępna podczas replikacji.</param>
        <param name="fromHour">Jedną z <see cref="T:System.DirectoryServices.ActiveDirectory.HourOfDay" /> elementów członkowskich, które określa pierwszą godzinę, które źródło będzie dostępna podczas replikacji.</param>
        <param name="fromMinute">Jedną z <see cref="T:System.DirectoryServices.ActiveDirectory.MinuteOfHour" /> elementów członkowskich, które określa pierwszy interwał 15-minutowy źródłem będzie dostępna podczas replikacji.</param>
        <param name="toHour">Jedną z <see cref="T:System.DirectoryServices.ActiveDirectory.HourOfDay" /> elementów członkowskich, które określa godzinę końcowe, które źródło będzie dostępna podczas replikacji.</param>
        <param name="toMinute">Jedną z <see cref="T:System.DirectoryServices.ActiveDirectory.MinuteOfHour" /> elementów członkowskich, które określa ostateczny interwał 15-minutowy źródłem będzie dostępna podczas replikacji.</param>
        <summary>Dodaje zakres czasu dla wielu dni w harmonogramie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie parametry w tej metodzie są włącznie.  
  
 Ta metoda jest zbiorcze i nie usuwa wszelkie istniejące informacje o harmonogramie. Jeśli istniejący harmonogram i nowego harmonogramu nakładają się, wynik będzie w dalszym zbiorczej. Aby usunąć harmonogram, należy użyć <xref:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule.ResetSchedule%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Czas rozpoczęcia przypada po godzinie zakończenia.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Jeden lub więcej parametrów jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="days" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.DayOfWeek" />
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.HourOfDay" />
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.MinuteOfHour" />
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule.ResetSchedule" />
      </Docs>
    </Member>
  </Members>
</Type>