<Type Name="ProcessModelSection" FullName="System.Web.Configuration.ProcessModelSection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a71fbbc9ae451b21fc3e765b64633f96b72fed3f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69056378" /></Metadata><TypeSignature Language="C#" Value="public sealed class ProcessModelSection : System.Configuration.ConfigurationSection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ProcessModelSection extends System.Configuration.ConfigurationSection" />
  <TypeSignature Language="DocId" Value="T:System.Web.Configuration.ProcessModelSection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ProcessModelSection&#xA;Inherits ConfigurationSection" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProcessModelSection sealed : System::Configuration::ConfigurationSection" />
  <TypeSignature Language="F#" Value="type ProcessModelSection = class&#xA;    inherit ConfigurationSection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationSection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Konfiguruje ustawienia modelu procesów ASP.NET na serwerze sieci Web Internet Information Services (IIS). Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa umożliwia programistyczny dostęp i `processModel` modyfikowanie sekcji pliku konfiguracji. <xref:System.Web.Configuration.ProcessModelSection>  
  
 <xref:System.Web.Configuration.ProcessModelSection> Klasa kontroluje różne aspekty procesu roboczego ASP.NET, w tym jego okres istnienia, liczbę wystąpień utworzonych w danym momencie, tożsamość zabezpieczeń, w której jest uruchomiona, oraz rozmiar puli wątków CLR do żądań obsługi.  
  
 Gdy ASP.NET jest uruchomiony w ramach usług IIS 6 w trybie macierzystym, ASP.NET korzysta z modelu procesów usług IIS 6 i ignoruje większość ustawień w tej sekcji. Aby skonfigurować te właściwości, należy użyć interfejsu użytkownika administratora usług IIS. ASP.NET nadal używa następujących właściwości, które można skonfigurować za pomocą pliku konfiguracji: <xref:System.Web.Configuration.ProcessModelSection.RequestQueueLimit%2A> <xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A>, <xref:System.Web.Configuration.ProcessModelSection.MinWorkerThreads%2A> <xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A> <xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A>,,, i <xref:System.Web.Configuration.ProcessModelSection.MinWorkerThreads%2A>.  
  
 Nie można zaszyfrować sekcji przy użyciu funkcji i narzędzi chronionej konfiguracji, ponieważ jest ona używana przez rozszerzenie ISAPI ASP.NET. `processModel`  
  
   
  
## Examples  
 W tym przykładzie pokazano, jak określić wartości deklaratywnie dla kilku atrybutów `processModel` sekcji, do których można także uzyskać dostęp jako elementy członkowskie <xref:System.Web.Configuration.ProcessModelSection> klasy.  
  
 Poniższy przykład pliku konfiguracji pokazuje, jak określić wartości deklaratywnie dla `processModel` sekcji.  
  
```  
<processModel   
  enable="True" timeout="Infinite"   
  idleTimeout="Infinite"   
  shutdownTimeout="00:00:05" requestLimit="Infinite"  
  requestQueueLimit="5000" restartQueueLimit="10"   
  memoryLimit="60" webGarden="False" cpuMask="0xffffffff"   
  userName="machine" password="AutoGenerate" logLevel="Errors"  
  clientConnectedCheck="00:00:05"   
  comAuthenticationLevel="Connect" comImpersonationLevel="Impersonate"  
  responseDeadlockInterval="00:03:00"   
  responseRestartDeadlockInterval="00:03:00" autoConfig="True"  
  maxWorkerThreads="20" maxIoThreads="20" minWorkerThreads="1"  
  minIoThreads="1" serverErrorMessageFile="" pingFrequency="Infinite"  
  pingTimeout="Infinite" asyncOption="20" maxAppDomains="2000"   
/>  
```  
  
 Poniższy przykład kodu demonstruje, <xref:System.Web.Configuration.ProcessModelSection> jak używać klasy.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#1)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Configuration.ProcessModelSection" />
    <altmember cref="T:System.Web.Configuration.ProcessModelLogLevel" />
    <altmember cref="T:System.Web.Configuration.ProcessModelComAuthenticationLevel" />
    <altmember cref="T:System.Web.Configuration.ProcessModelComImpersonationLevel" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProcessModelSection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.ProcessModelSection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProcessModelSection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.Configuration.ProcessModelSection" /> klasy przy użyciu ustawień domyślnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Configuration.ProcessModelSection.%23ctor%2A> Konstruktor nie jest przeznaczony do użycia bezpośrednio w kodzie. Jest on wywoływany przez system konfiguracji ASP.NET. Wystąpienie <xref:System.Web.Configuration.ProcessModelSection> klasy uzyskuje się za <xref:System.Configuration.Configuration.GetSection%2A> pomocą metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.ConfigurationAllowDefinition" />
      </Docs>
    </Member>
    <Member MemberName="AutoConfig">
      <MemberSignature Language="C#" Value="public bool AutoConfig { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoConfig" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.AutoConfig" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoConfig As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoConfig { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoConfig : bool with get, set" Usage="System.Web.Configuration.ProcessModelSection.AutoConfig" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("autoConfig", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ustawienia wydajności ASP.NET są automatycznie konfigurowane dla aplikacji ASP.NET.</summary>
        <value><see langword="true" />Jeśli ustawienia wydajności są automatycznie konfigurowane dla aplikacji ASP.NET; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wartość jest ustawiona na `false`, do określenia konfiguracji wydajności dla aplikacji ASP.NET są używane wartości jawnie w pliku Web. config. <xref:System.Web.Configuration.ProcessModelSection.AutoConfig%2A> Jeśli wartość jest ustawiona na `true`, ustawienia wydajności są automatycznie konfigurowane dla aplikacji ASP.NET. <xref:System.Web.Configuration.ProcessModelSection.AutoConfig%2A>  
  
 Wartość jest jawnie ustawiona na `true` w pliku Machine. config. <xref:System.Web.Configuration.ProcessModelSection.AutoConfig%2A> Wartość domyślna kodu jest ustawiona na `false`.  <xref:System.Web.Configuration.ProcessModelSection.AutoConfig%2A> Jeśli wartość zostanie usunięta z pliku Machine. config, zostaną użyte ustawienia jawne zamiast ustawień skonfigurowanych domyślnie.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads" />
        <altmember cref="P:System.Web.Configuration.ProcessModelSection.MaxIOThreads" />
        <altmember cref="P:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads" />
        <altmember cref="P:System.Web.Configuration.HttpRuntimeSection.MinLocalRequestFreeThreads" />
        <altmember cref="P:System.Net.Configuration.ConnectionManagementElement.MaxConnection" />
      </Docs>
    </Member>
    <Member MemberName="ClientConnectedCheck">
      <MemberSignature Language="C#" Value="public TimeSpan ClientConnectedCheck { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ClientConnectedCheck" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.ClientConnectedCheck" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientConnectedCheck As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan ClientConnectedCheck { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.ClientConnectedCheck : TimeSpan with get, set" Usage="System.Web.Configuration.ProcessModelSection.ClientConnectedCheck" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("clientConnectedCheck", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, jak długo żądanie jest pozostawione w kolejce.</summary>
        <value><see cref="T:System.TimeSpan" /> Wartość wskazująca czas trwania kolejki. Wartość domyślna to 5 sekund.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość określa, jak długo żądanie jest umieszczane w kolejce zanim ASP.NET wykonuje test połączony z klientem.  
  
> [!NOTE]
>  Jeśli interwał wygaśnie, gdy żądanie jest nadal umieszczane w kolejce, przed przekazaniem żądania do procesu roboczego ASP.NET na potrzeby obsługi zostanie wykonane sprawdzanie podłączone przez klienta.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak uzyskać dostęp do właściwości i <xref:System.Web.Configuration.ProcessModelSection.ClientConnectedCheck%2A> zmodyfikować ją.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#18](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#18)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#18](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComAuthenticationLevel">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.ProcessModelComAuthenticationLevel ComAuthenticationLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Configuration.ProcessModelComAuthenticationLevel ComAuthenticationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.ComAuthenticationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ComAuthenticationLevel As ProcessModelComAuthenticationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Configuration::ProcessModelComAuthenticationLevel ComAuthenticationLevel { System::Web::Configuration::ProcessModelComAuthenticationLevel get(); void set(System::Web::Configuration::ProcessModelComAuthenticationLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ComAuthenticationLevel : System.Web.Configuration.ProcessModelComAuthenticationLevel with get, set" Usage="System.Web.Configuration.ProcessModelSection.ComAuthenticationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("comAuthenticationLevel", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.ProcessModelComAuthenticationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą poziom uwierzytelniania dla zabezpieczeń DCOM.</summary>
        <value>Jedna z <see cref="T:System.Web.Configuration.ProcessModelComAuthenticationLevel" /> wartości. Wartość domyślna to <see cref="F:System.Web.Configuration.ProcessModelComAuthenticationLevel.Connect" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy ta wartość właściwości jest ustawiona na <xref:System.Web.Configuration.ProcessModelComAuthenticationLevel.Default>, model DCOM określa poziom uwierzytelniania przy użyciu normalnego algorytmu negocjowania zabezpieczeń. Wartość domyślna przypisana do tej właściwości, jak określono w pliku Machine. config, to <xref:System.Web.Configuration.ProcessModelComAuthenticationLevel.Connect>. W takim przypadku model DCOM uwierzytelnia poświadczenia klienta tylko wtedy, gdy klient nawiąże relację z serwerem.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.ComAuthenticationLevel%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#21](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#21)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#21](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComImpersonationLevel">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.ProcessModelComImpersonationLevel ComImpersonationLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Configuration.ProcessModelComImpersonationLevel ComImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.ComImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ComImpersonationLevel As ProcessModelComImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Configuration::ProcessModelComImpersonationLevel ComImpersonationLevel { System::Web::Configuration::ProcessModelComImpersonationLevel get(); void set(System::Web::Configuration::ProcessModelComImpersonationLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ComImpersonationLevel : System.Web.Configuration.ProcessModelComImpersonationLevel with get, set" Usage="System.Web.Configuration.ProcessModelSection.ComImpersonationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("comImpersonationLevel", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.ProcessModelComImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą poziom uwierzytelniania dla zabezpieczeń COM.</summary>
        <value>Jedna z <see cref="T:System.Web.Configuration.ProcessModelComImpersonationLevel" /> wartości. Wartość domyślna to <see cref="F:System.Web.Configuration.ProcessModelComImpersonationLevel.Impersonate" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy ta wartość właściwości jest ustawiona na <xref:System.Web.Configuration.ProcessModelComImpersonationLevel.Default>, model DCOM określa poziom personifikacji przy użyciu normalnego algorytmu negocjowania zabezpieczeń. Wartość domyślna przypisana do tej właściwości, jak określono w pliku Machine. config, to <xref:System.Web.Configuration.ProcessModelComImpersonationLevel.Impersonate>. W takim przypadku proces serwera może personifikować kontekst zabezpieczeń klienta podczas działania w imieniu klienta.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.ComImpersonationLevel%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#22](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#22)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#22](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CpuMask">
      <MemberSignature Language="C#" Value="public int CpuMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CpuMask" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.CpuMask" />
      <MemberSignature Language="VB.NET" Value="Public Property CpuMask As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CpuMask { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CpuMask : int with get, set" Usage="System.Web.Configuration.ProcessModelSection.CpuMask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("cpuMask", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, które procesory na serwerze wieloprocesorowym mogą uruchamiać procesy ASP.NET.</summary>
        <value>Liczba reprezentująca wzorzec bitowy, który ma zostać zastosowany. Wartość domyślna to 0xFFFFFFFF.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> Wartość określa wzorzec bitowy, który wskazuje procesor CPU kwalifikujący się do uruchamiania wątków ASP.NET. Jeśli właściwość jest ustawiona na `true`, <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> ogranicza procesy procesów roboczych do liczby kwalifikujących się procesorów CPU. <xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A> Maksymalna dozwolona liczba procesów roboczych jest równa liczbie procesorów CPU. Domyślnie wszystkie procesory CPU są włączone i ASP.NET uruchamia jeden proces dla każdego procesora CPU. Jeśli właściwość jest ustawiona na `false`, <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> atrybut jest ignorowany i zostanie uruchomiony tylko jeden proces roboczy. <xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#25](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#25)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#25](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementProperty">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationElementProperty ElementProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationElementProperty ElementProperty" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.ElementProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ElementProperty As ConfigurationElementProperty" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationElementProperty ^ ElementProperty { System::Configuration::ConfigurationElementProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementProperty : System.Configuration.ConfigurationElementProperty" Usage="System.Web.Configuration.ProcessModelSection.ElementProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationElementProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enable">
      <MemberSignature Language="C#" Value="public bool Enable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enable" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.Enable" />
      <MemberSignature Language="VB.NET" Value="Public Property Enable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enable : bool with get, set" Usage="System.Web.Configuration.ProcessModelSection.Enable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enable", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy model procesu jest włączony.</summary>
        <value><see langword="true" />Jeśli model procesu jest włączony; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość <xref:System.Web.Configuration.ProcessModelSection.Enable%2A> określa, czy ASP.NET jest hostowana w zewnętrznym procesie roboczym. Jeśli <xref:System.Web.Configuration.ProcessModelSection.Enable%2A> jest`true`, ASP.NET jest hostowany w zewnętrznym procesie roboczym; w przeciwnym razie działa bezpośrednio w programie Inetinfo. exe.  
  
> [!NOTE]
>  Uruchamianie ASP.NET w programie Inetinfo. exe nie jest zalecane, ponieważ wymaga ono uruchomienia aplikacji w kontekście zabezpieczeń systemu lokalnego. Gdy usługa ASP.NET jest uruchamiana w trybie macierzystym programu Internet Information Services (IIS) 6, to ustawienie jest ignorowane, więc zazwyczaj nie `false`jest to konieczne.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.Enable%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#2)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IdleTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan IdleTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan IdleTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.IdleTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property IdleTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan IdleTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.IdleTimeout : TimeSpan with get, set" Usage="System.Web.Configuration.ProcessModelSection.IdleTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("idleTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą czas nieaktywności, po upływie którego ASP.NET automatycznie skończy proces roboczy.</summary>
        <value><see cref="T:System.TimeSpan" /> Wartość wskazująca czas bezczynności. Wartość domyślna to nieskończoność, która odnosi się <see cref="F:System.TimeSpan.MaxValue" />do.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Proces roboczy jest ponownie uruchamiany (odbijać), <xref:System.Web.Configuration.ProcessModelSection.IdleTimeout%2A> gdy wartość właściwości zostanie osiągnięta. Domyślnie tylko dwa warunki powodują odbijanie procesu: proces przekracza dozwolony limit pamięci lub proces przekracza dozwoloną liczbę żądań, które można umieścić w kolejce. Możesz dodać inne warunki do domyślnych. Na przykład można użyć <xref:System.Web.Configuration.ProcessModelSection.IdleTimeout%2A> właściwości, aby ograniczyć czas, w którym proces roboczy jest bezczynny.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.IdleTimeout%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#16](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#16)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#16](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogLevel">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.ProcessModelLogLevel LogLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Configuration.ProcessModelLogLevel LogLevel" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.LogLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property LogLevel As ProcessModelLogLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Configuration::ProcessModelLogLevel LogLevel { System::Web::Configuration::ProcessModelLogLevel get(); void set(System::Web::Configuration::ProcessModelLogLevel value); };" />
      <MemberSignature Language="F#" Value="member this.LogLevel : System.Web.Configuration.ProcessModelLogLevel with get, set" Usage="System.Web.Configuration.ProcessModelSection.LogLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("logLevel", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.ProcessModelLogLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą typy zdarzeń, które mają być rejestrowane w dzienniku zdarzeń.</summary>
        <value>Jedna z <see cref="T:System.Web.Configuration.ProcessModelLogLevel" /> wartości. Wartość domyślna to <see cref="F:System.Web.Configuration.ProcessModelLogLevel.Errors" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Używając poprawnej właściwości, można filtrować błędy, które system może rejestrować. Po założeniu nieprawidłowych lub wąskich gardeł aplikacji warto opracować strategię, która zawęża zakres błędów, które Cię interesują.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.LogLevel%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#23](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#23)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#23](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#23)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Configuration.ProcessModelLogLevel" />
      </Docs>
    </Member>
    <Member MemberName="MaxAppDomains">
      <MemberSignature Language="C#" Value="public int MaxAppDomains { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAppDomains" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.MaxAppDomains" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxAppDomains As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxAppDomains { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxAppDomains : int with get, set" Usage="System.Web.Configuration.ProcessModelSection.MaxAppDomains" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxAppDomains", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MaxValue=2147483646, MinValue=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia maksymalną dozwoloną liczbę domen aplikacji w jednym procesie.</summary>
        <value>Maksymalna dozwolona liczba domen aplikacji w jednym procesie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku przekroczenia progu najmniejsza użyta domena aplikacji jest zamykana, jeśli należy uruchomić nową domenę aplikacji. <xref:System.Web.Configuration.ProcessModelSection.MaxAppDomains%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.MaxAppDomains%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#27](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#27)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#27](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxIOThreads">
      <MemberSignature Language="C#" Value="public int MaxIOThreads { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxIOThreads" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.MaxIOThreads" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxIOThreads As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxIOThreads { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxIOThreads : int with get, set" Usage="System.Web.Configuration.ProcessModelSection.MaxIOThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxIoThreads", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MaxValue=2147483646, MinValue=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą maksymalną liczbę wątków we/wy na procesor w puli wątków CLR.</summary>
        <value>Maksymalna liczba wątków. Wartość domyślna to 20.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A> musi być równa lub większa <xref:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads%2A> od ustawienia w `httpRuntime` sekcji konfiguracji.  
  
 Można mieć pewną kontrolę nad użyciem procesora CPU przez ustawienie liczby wątków roboczych i wątków we/wy, odpowiednio przy użyciu <xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A> właściwości <xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A> i właściwości.  
  
 Różnica między dwoma typami wątków polega na tym, że te ostatnie są powiązane z obiektami we/wy, takimi jak strumień lub potok, a dawniej są tradycyjnymi, nieograniczone wątki. W przypadku Internet Information Services (IIS) w wersji 6,0 lub nowszej ASP.NET przetwarza żądania w wątkach roboczych. Wynika to z faktu, że usługa ASP.NET jest zintegrowana z usługami IIS.  
  
 Te wątki są uzyskiwane z puli wątków CLR obejmujących wiele procesów należących do aplikacji.  
  
> [!NOTE]
>  Zazwyczaj wartości domyślne dla dozwolonych wątków są wystarczające, aby zapewnić duże wykorzystanie procesora CPU. Jeśli z jakiegoś powodu aplikacja działa wolno, może to oczekiwać na zasoby zewnętrzne, można spróbować zwiększyć liczbę wątków do wartości mniejszej niż 100.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#5)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
      </Docs>
    </Member>
    <Member MemberName="MaxWorkerThreads">
      <MemberSignature Language="C#" Value="public int MaxWorkerThreads { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxWorkerThreads" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWorkerThreads As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxWorkerThreads { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxWorkerThreads : int with get, set" Usage="System.Web.Configuration.ProcessModelSection.MaxWorkerThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxWorkerThreads", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MaxValue=2147483646, MinValue=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą maksymalną liczbę wątków roboczych na procesor CPU w puli wątków CLR.</summary>
        <value>Maksymalna liczba wątków. Wartość domyślna to 20.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A> musi być równa lub większa <xref:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads%2A> od ustawienia w `httpRuntime` sekcji konfiguracji.  
  
 Można mieć pewną kontrolę nad użyciem procesora CPU przez ustawienie liczby wątków roboczych i wątków we/wy, odpowiednio przy użyciu <xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A> właściwości i <xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A> właściwości.  
  
 Różnica między dwoma typami wątków polega na tym, że te ostatnie są powiązane z obiektami we/wy, takimi jak strumień lub potok, a dawniej są tradycyjnymi, nieograniczone wątki. W przypadku Internet Information Services (IIS) w wersji 6,0 lub nowszej ASP.NET przetwarza żądania w wątkach roboczych. Wynika to z faktu, że usługa ASP.NET jest zintegrowana z usługami IIS.  
  
 Te wątki są uzyskiwane z puli wątków CLR obejmujących wiele procesów należących do aplikacji.  
  
> [!NOTE]
>  Zazwyczaj wartości domyślne dla dozwolonych wątków są wystarczające, aby zapewnić duże wykorzystanie procesora CPU. Jeśli z jakiegoś powodu aplikacja działa wolno, może to oczekiwać na zasoby zewnętrzne, można spróbować zwiększyć liczbę wątków do wartości mniejszej niż 100.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#7)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
      </Docs>
    </Member>
    <Member MemberName="MemoryLimit">
      <MemberSignature Language="C#" Value="public int MemoryLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MemoryLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.MemoryLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property MemoryLimit As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MemoryLimit { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MemoryLimit : int with get, set" Usage="System.Web.Configuration.ProcessModelSection.MemoryLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("memoryLimit", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą maksymalny dozwolony rozmiar pamięci.</summary>
        <value>Wartość procentowa całkowitej ilości pamięci systemowej. Wartość domyślna to 60 procent.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozmiar pamięci jest wyrażony jako procent całkowitej ilości pamięci systemowej. Jest to ilość pamięci, jaką może wykorzystać proces roboczy, zanim ASP.NET ponownie (odbija).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.MemoryLimit%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#3)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinIOThreads">
      <MemberSignature Language="C#" Value="public int MinIOThreads { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinIOThreads" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.MinIOThreads" />
      <MemberSignature Language="VB.NET" Value="Public Property MinIOThreads As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinIOThreads { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MinIOThreads : int with get, set" Usage="System.Web.Configuration.ProcessModelSection.MinIOThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("minIoThreads", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MaxValue=2147483646, MinValue=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia minimalną liczbę wątków we/wy na procesor w puli wątków CLR.</summary>
        <value>Minimalna liczba wątków we/wy na procesor CPU w puli wątków CLR.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.MinIOThreads%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#4)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWorkerThreads">
      <MemberSignature Language="C#" Value="public int MinWorkerThreads { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinWorkerThreads" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.MinWorkerThreads" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWorkerThreads As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinWorkerThreads { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MinWorkerThreads : int with get, set" Usage="System.Web.Configuration.ProcessModelSection.MinWorkerThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("minWorkerThreads", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MaxValue=2147483646, MinValue=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia minimalną liczbę wątków roboczych na procesor w puli wątków CLR.</summary>
        <value>Minimalna liczba wątków roboczych na procesor CPU w puli wątków CLR</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.MinWorkerThreads%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#6)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.Password" />
      <MemberSignature Language="VB.NET" Value="Public Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Password { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Password : string with get, set" Usage="System.Web.Configuration.ProcessModelSection.Password" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("password", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą hasło, które ma być używane dla tożsamości systemu Windows.</summary>
        <value>Hasło, które ma być używane. Wartość domyślna to AutoGenerate.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość musi być używana <xref:System.Web.Configuration.ProcessModelSection.UserName%2A> z właściwością. <xref:System.Web.Configuration.ProcessModelSection.Password%2A>  
  
 Gdy są obecne, te wartości właściwości powodują, że proces roboczy jest uruchamiany ze skonfigurowaną tożsamością systemu Windows.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.Password%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#20](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#20)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#20](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#20)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/51cdfe5b-9d82-458c-94ff-c551c4f38ed1">Szyfrowanie informacji o konfiguracji przy użyciu konfiguracji chronionej</related>
      </Docs>
    </Member>
    <Member MemberName="PingFrequency">
      <MemberSignature Language="C#" Value="public TimeSpan PingFrequency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan PingFrequency" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.PingFrequency" />
      <MemberSignature Language="VB.NET" Value="Public Property PingFrequency As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan PingFrequency { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.PingFrequency : TimeSpan with get, set" Usage="System.Web.Configuration.ProcessModelSection.PingFrequency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("pingFrequency", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą przedział czasu, w którym rozszerzenie ISAPI wysyła polecenie ping do procesu roboczego, aby określić, czy jest uruchomiony.</summary>
        <value><see cref="T:System.TimeSpan" /> Definiowanie interwału czasu. Wartość domyślna to 30 sekund.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Proces roboczy jest uruchamiany ponownie (odbijać), jeśli nie jest uruchomiony po <xref:System.Web.Configuration.ProcessModelSection.PingFrequency%2A> upływie interwału.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.PingFrequency%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#13](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#13)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PingTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan PingTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan PingTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.PingTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property PingTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan PingTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.PingTimeout : TimeSpan with get, set" Usage="System.Web.Configuration.ProcessModelSection.PingTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("pingTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą przedział czasu, po którym proces roboczy, który nie odpowiada, jest uruchamiany ponownie.</summary>
        <value><see cref="T:System.TimeSpan" /> Definiowanie interwału czasu. Wartość domyślna to 5 sekund.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozszerzenia ISAPI pingą proces roboczy w <xref:System.Web.Configuration.ProcessModelSection.PingFrequency%2A> przedziale czasu. Jeśli proces roboczy nie odpowie w <xref:System.Web.Configuration.ProcessModelSection.PingTimeout%2A> interwale, proces zostanie uruchomiony ponownie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.PingTimeout%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#14](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#14)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Configuration.ConfigurationPropertyCollection" Usage="System.Web.Configuration.ProcessModelSection.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestLimit">
      <MemberSignature Language="C#" Value="public int RequestLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RequestLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.RequestLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestLimit As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RequestLimit { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.RequestLimit : int with get, set" Usage="System.Web.Configuration.ProcessModelSection.RequestLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteIntConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requestLimit", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą liczbę żądań dozwolonych przed odtworzeniem procesu roboczego.</summary>
        <value>Liczba dozwolonych żądań. Wartość domyślna to nieskończoność.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku przekroczenia liczby żądań ASP.NET automatycznie uruchamia nowy proces roboczy, aby przetworzyć bieżącą lokalizację.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.RequestLimit%2A> jak używać właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#8)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestQueueLimit">
      <MemberSignature Language="C#" Value="public int RequestQueueLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RequestQueueLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.RequestQueueLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestQueueLimit As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RequestQueueLimit { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.RequestQueueLimit : int with get, set" Usage="System.Web.Configuration.ProcessModelSection.RequestQueueLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteIntConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requestQueueLimit", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą liczbę żądań dozwolonych w kolejce.</summary>
        <value>Liczba żądań, które mogą być umieszczone w kolejce. Wartość domyślna to 5000.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku przekroczenia liczby żądań dozwolonych w kolejce ASP.NET zacznie zwracać do nowych żądań błędy "503-serwer zbyt zajęty". Po osiągnięciu tego limitu system działa w nietypowych warunkach. Może to być objaw nieprawidłowego działania lub może to być tylko duże obciążenie. Ponowne uruchamianie (odbijanie) proces roboczy może stać się jedynym sposobem na uniknięcie dalszych problemów.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.RequestQueueLimit%2A> jak używać właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#10)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResponseDeadlockInterval">
      <MemberSignature Language="C#" Value="public TimeSpan ResponseDeadlockInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ResponseDeadlockInterval" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval" />
      <MemberSignature Language="VB.NET" Value="Public Property ResponseDeadlockInterval As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan ResponseDeadlockInterval { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.ResponseDeadlockInterval : TimeSpan with get, set" Usage="System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("responseDeadlockInterval", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.TimeSpanValidator(MaxValueString="10675199.02:48:05.4775807", MinValueString="00:00:00")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą interwał czasu, przez który proces roboczy ma reagować.</summary>
        <value><see cref="T:System.TimeSpan" /> Definiowanie interwału. Wartość domyślna to 3 minuty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Proces jest uruchamiany ponownie, jeśli istnieją kolejkowane żądania i jeśli nie ma odpowiedzi w przedziale czasowym zdefiniowanym przez <xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A>program.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A> jak używać właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#17](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#17)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#17](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResponseRestartDeadlockInterval">
      <MemberSignature Language="C#" Value="public TimeSpan ResponseRestartDeadlockInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ResponseRestartDeadlockInterval" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.ResponseRestartDeadlockInterval" />
      <MemberSignature Language="VB.NET" Value="Public Property ResponseRestartDeadlockInterval As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan ResponseRestartDeadlockInterval { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.ResponseRestartDeadlockInterval : TimeSpan with get, set" Usage="System.Web.Configuration.ProcessModelSection.ResponseRestartDeadlockInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("responseRestartDeadlockInterval", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nie jest już używany.</summary>
        <value>Nie dotyczy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość nie jest już używana przez ASP.NET i jest udostępniana tylko w celu zapewnienia zgodności z poprzednimi wersjami. Nie spowoduje to błędu konfiguracji, jeśli jest już obecny w pliku konfiguracji. Wszystkie odtwarzanie w przypadku warunków zakleszczenia jest teraz kontrolowane przez <xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A> właściwość.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.ResponseRestartDeadlockInterval%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#11)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestartQueueLimit">
      <MemberSignature Language="C#" Value="public int RestartQueueLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RestartQueueLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.RestartQueueLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property RestartQueueLimit As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RestartQueueLimit { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.RestartQueueLimit : int with get, set" Usage="System.Web.Configuration.ProcessModelSection.RestartQueueLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteIntConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("restartQueueLimit", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą maksymalną liczbę żądań umieszczonych w kolejce przez interfejs ISAPI podczas oczekiwania na rozpoczęcie obsługi żądań przez nowy proces roboczy.</summary>
        <value>Liczba żądań umieszczonych w kolejce. Wartość domyślna to 10.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po przekroczeniu tego limitu żądanie klienta otrzyma błąd 503, dopóki proces roboczy nie będzie gotowy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.RestartQueueLimit%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#9)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerErrorMessageFile">
      <MemberSignature Language="C#" Value="public string ServerErrorMessageFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerErrorMessageFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.ServerErrorMessageFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ServerErrorMessageFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServerErrorMessageFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServerErrorMessageFile : string with get, set" Usage="System.Web.Configuration.ProcessModelSection.ServerErrorMessageFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("serverErrorMessageFile", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą plik, którego zawartość musi być używana w przypadku wystąpienia błędu krytycznego.</summary>
        <value>Ścieżka pliku używana w przypadku wystąpienia błędu krytycznego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Plik, którego zawartość jest używana zamiast domyślnego komunikatu niedostępnego serwera.  
  
 Lokalizacją pliku może być względna lub bezwzględna ścieżka do pliku.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.ServerErrorMessageFile%2A> jak używać właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#28](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#28)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#28](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan ShutdownTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ShutdownTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.ShutdownTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ShutdownTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan ShutdownTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.ShutdownTimeout : TimeSpan with get, set" Usage="System.Web.Configuration.ProcessModelSection.ShutdownTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("shutdownTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.TimeSpanValidator(MaxValueString="10675199.02:48:05.4775807", MinValueString="00:00:00")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą czas, przez który proces roboczy ma zostać zamknięty.</summary>
        <value><see cref="T:System.TimeSpan" /> Definiowanie interwału. Wartość domyślna to 5 sekund.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość określa liczbę minut, przez którą proces roboczy może bezpiecznie wyłączyć. Po upływie limitu czasu ASP.NET wyłącza wymuszone proces roboczy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.ShutdownTimeout%2A> jak używać właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#15](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#15)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#15](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public TimeSpan Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Timeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan with get, set" Usage="System.Web.Configuration.ProcessModelSection.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("timeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą liczbę minut do momentu uruchomienia przez ASP.NET nowego procesu roboczego.</summary>
        <value><see cref="T:System.TimeSpan" /> Definiowanie interwału. Wartość domyślna to nieskończoność.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET uruchamia nowy proces roboczy, aby przetworzyć bieżącą lokalizację.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.Timeout%2A> jak używać właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#10)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserName">
      <MemberSignature Language="C#" Value="public string UserName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.UserName" />
      <MemberSignature Language="VB.NET" Value="Public Property UserName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UserName : string with get, set" Usage="System.Web.Configuration.ProcessModelSection.UserName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("userName", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą nazwę użytkownika dla tożsamości systemu Windows.</summary>
        <value>Nazwa użytkownika. Wartość domyślna to Machine.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli jest <xref:System.Web.Configuration.ProcessModelSection.UserName%2A> obecny, definiuje tożsamość systemu Windows inną niż dla procesu domyślnego. Ta tożsamość jest używana do uruchamiania procesu roboczego ASP.NET.  
  
 Domyślnie <xref:System.Web.Configuration.ProcessModelSection.UserName%2A> jest ustawiony na komputer o specjalnej wartości, a proces jest uruchamiany w ramach konta użytkownika o nazwie ASPNET, które jest tworzone automatycznie podczas instalacji ASP.NET.  
  
 Właściwość musi być używana <xref:System.Web.Configuration.ProcessModelSection.UserName%2A> z właściwością. <xref:System.Web.Configuration.ProcessModelSection.Password%2A>  
  
 Gdy są obecne, te wartości właściwości powodują, że proces roboczy jest uruchamiany ze skonfigurowaną tożsamością systemu Windows.  
  
> [!NOTE]
>  <xref:System.Web.Configuration.ProcessModelSection.UserName%2A> Jeśli właściwość jest ustawiona na system przy użyciu hasła AutoGenerate, definiuje jednostkę, która uruchamia proces jako konto administracyjne i zezwala na cały kod użytkownika ASP.NET uruchomiony w ramach procesu, aby miał pełne uprawnienia administracyjne. W takim przypadku należy zwrócić szczególną uwagę na to, że uprawnienia są dozwolone.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.UserName%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#19](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#19)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#19](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WebGarden">
      <MemberSignature Language="C#" Value="public bool WebGarden { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WebGarden" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.WebGarden" />
      <MemberSignature Language="VB.NET" Value="Public Property WebGarden As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WebGarden { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WebGarden : bool with get, set" Usage="System.Web.Configuration.ProcessModelSection.WebGarden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("webGarden", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość umożliwiającą dostępnym procesorom CPU uruchamianie procesów roboczych.</summary>
        <value><see langword="true" />, jeśli <see cref="P:System.Web.Configuration.ProcessModelSection.CpuMask" /> jest używany do mapowania procesów roboczych na liczbę kwalifikujących się procesorów CPU; <see langword="false" /> Jeśli<see cref="P:System.Web.Configuration.ProcessModelSection.CpuMask" /> jest ignorowany.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość musi być używana <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> z właściwością. <xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A>  
  
 Jeśli właściwość jest ustawiona na `false`, <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> atrybut jest ignorowany i tylko jeden proces roboczy zostanie uruchomiony. <xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A>  
  
> [!NOTE]
>  Serwer sieci Web wieloprocesorowy jest nazywany ogródem internetowym.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A> jak uzyskać dostęp do właściwości.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#24](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#24)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#24](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
