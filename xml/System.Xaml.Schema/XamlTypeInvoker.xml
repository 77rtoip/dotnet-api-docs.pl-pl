<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d908be848800de954203e3d83f4d2005b60a7c55" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39916363" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeInvoker" />
  <TypeSignature Language="F#" Value="type XamlTypeInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia punkt rozszerzenia, które można utworzyć wystąpienia typu XAML za pomocą metod innych niż odbicia i konstruktorów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Celem <xref:System.Xaml.Schema.XamlTypeInvoker> jest umożliwienie rozszerzalny system typów XAML, schemat oraz działającego wykonawczego, które nie zależą od w pełni funkcji CLR, takich jak atrybuty CLR, odbicie informacje za pośrednictwem <xref:System.Type> i <xref:System.Reflection.MemberInfo>i tak dalej. Podklasy <xref:System.Xaml.Schema.XamlTypeInvoker> są używane jako parametry wejściowe dla alternatywnej Konstruktory klasy schematu XAML takich jak <xref:System.Xaml.XamlType>. Możesz podklasy <xref:System.Xaml.XamlType> i przekazać <xref:System.Xaml.Schema.XamlTypeInvoker> za pośrednictwem konstruktora podstawowego. Wraz z definiowanie <xref:System.Xaml.Schema.XamlTypeInvoker> dla konstruktora, należy również podać zastąpień dla co najmniej część `Lookup` metody <xref:System.Xaml.XamlType>.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> zawiera domyślną implementację. Domyślna implementacja jest zgodna podobne modelu implementacji domyślnej typów schematu XAML <xref:System.Xaml.XamlType> i <xref:System.Xaml.XamlMember>: system typów CLR jest używany podczas tworzenia wystąpienia, wartości i wyszukiwań, w tym o korzystaniu z atrybutów CLR <xref:System.Type> i <xref:System.Reflection.MemberInfo>i tak dalej.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> udostępnia metody dla podstawowego wystąpienia (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) i metod, które są istotne dla typów gdzie <xref:System.Xaml.XamlType> odpowiada kolekcji, słownika lub tablicy (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlTypeInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja jest pusty.  
  
 Ten konstruktor jest wywoływana wewnętrznie podać wartość dla <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>. Dla <xref:System.Xaml.Schema.XamlTypeInvoker> podklasy, oczekuje się, że możesz użyć <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> podpis dla konstrukcji lub przesłonięcie, który wywołuje <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> jako podstawowy. Zapewnianie <xref:System.Xaml.XamlType> implementuje domyślnego wzorca, gdzie <xref:System.Xaml.Schema.XamlTypeInvoker> można modyfikować.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeInvoker(System::Xaml::XamlType ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlTypeInvoker : System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="new System.Xaml.Schema.XamlTypeInvoker type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Xaml.XamlType" /> Wartość dla określonego typu XAML dotyczą to <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> klasy, w oparciu o podany <see cref="T:System.Xaml.XamlType" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest wywoływana wewnętrznie na podstawie <xref:System.Xaml.XamlType> gdzie <xref:System.Xaml.Schema.XamlTypeInvoker> służy do konstruowania. `type` Podane tutaj odnosi się do innej metody wywołuje <xref:System.Xaml.Schema.XamlTypeInvoker>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollection (instance As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToCollection(System::Object ^ instance, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : obj * obj -&gt; unit&#xA;override this.AddToCollection : obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToCollection (instance, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Wystąpienie typu określonego przez <see cref="T:System.Xaml.XamlType" /> używane do konstruowania to <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <param name="item">Element do dodania.</param>
        <summary>Dodaje podany element do wystąpienia typu, która jest odpowiednia dla tego <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody powinny wywoływać tylko na <xref:System.Xaml.XamlType> reprezentujący kolekcję.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Ta metoda wywoływana <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> opartego na nieznany <see cref="T:System.Xaml.XamlType" />.  
  
 **- lub -** wywołać tę metodę w <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> gdzie odpowiedniego typu nie jest kolekcją.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">
          <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> w tym <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> zwraca <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Podstawowa implementacja zawiera wywołanie wewnętrznego Pomocnika <c>ThrowIfUnknown</c>. Tego pomocnika zawsze zgłasza wyjątek w przypadkach, gdzie <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> opiera się na nieznany <see cref="T:System.Xaml.XamlType" />, która obejmuje przypadków, gdy <see cref="P:System.Xaml.XamlType.UnderlyingType" /> z <see cref="T:System.Xaml.XamlType" /> jest <see langword="null" />.  Wewnętrznie, Podstawowa implementacja wywołuje <see cref="P:System.Xaml.XamlType.IsCollection" />i zgłasza wyjątek, jeśli wynik jest <see langword="false" />.  Podstawowa implementacja nie musi korzystać ze swoich własnych <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementacji. Po pierwsze, rzutowanie typu <paramref name="instance" /> do <see cref="T:System.Collections.IList" /> zostanie podjęta. Jeśli operacja się powiedzie, wywołanie <see cref="M:System.Collections.IList.Add(System.Object)" /> wykonano a metoda zwraca wartości. W przeciwnym razie Podstawowa implementacja używa CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> do wywołania bazowego <see langword="Add" /> uzyskany w wyniku wywołania metody <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> tego <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  W podstawowej implementacji nie wyjątek jest zgłaszany na to, jeśli poziom <paramref name="item" /> jest <see langword="null" />. Jest możliwe, że podstawowe <see langword="Add" /> metoda zgłosi wyjątek przy wywołaniu. Możliwe są inne wyjątki czasu wykonywania przypadku <see cref="P:System.Xaml.XamlType.ItemType" /> nie zwraca prawidłowy wynik.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToDictionary (instance As Object, key As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToDictionary(System::Object ^ instance, System::Object ^ key, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToDictionary : obj * obj * obj -&gt; unit&#xA;override this.AddToDictionary : obj * obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToDictionary (instance, key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Wystąpienie typu określonego przez <see cref="T:System.Xaml.XamlType" /> używane do konstruowania to <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <param name="key">Klucz ze słownika dla elementu do dodania.</param>
        <param name="item">Wartość elementu do dodania.</param>
        <summary>Dodaje wartość podany klucz i element do wystąpienia typu, która jest odpowiednia dla tego <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody powinny wywoływać tylko na <xref:System.Xaml.XamlType> reprezentujący słownika.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Ta metoda wywoływana <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> opartego na nieznany <see cref="T:System.Xaml.XamlType" />.  
  
 **- lub -** wywołać tę metodę w <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> gdzie odpowiedniego typu nie jest słownikiem.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">
          <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> w tym <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> zwraca <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Podstawowa implementacja zawiera wywołanie wewnętrznego Pomocnika <c>ThrowIfUnknown</c>. Tego pomocnika zawsze zgłasza wyjątek w przypadkach, gdzie <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> opiera się na nieznany <see cref="T:System.Xaml.XamlType" />, która obejmuje przypadków, gdy <see cref="P:System.Xaml.XamlType.UnderlyingType" /> z <see cref="T:System.Xaml.XamlType" /> jest <see langword="null" />.  Wewnętrznie, Podstawowa implementacja wywołuje <see cref="P:System.Xaml.XamlType.IsDictionary" />i zgłasza wyjątek, jeśli wynik jest <see langword="false" />.  Podstawowa implementacja nie musi korzystać ze swoich własnych <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementacji. Po pierwsze, rzutowanie typu <paramref name="instance" /> do <see cref="T:System.Collections.IDictionary" /> zostanie podjęta. Jeśli operacja się powiedzie, wywołanie <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /> wykonano a metoda zwraca wartości. W przeciwnym razie Podstawowa implementacja używa CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> do wywołania bazowego <see langword="Add" /> uzyskany w wyniku wywołania metody <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> tego <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  W podstawowej implementacji nie wyjątek jest zgłaszany na to, jeśli poziom <paramref name="item" /> lub <paramref name="key" /> są <see langword="null" />. Jest możliwe, że podstawowe <see langword="Add" /> metoda zgłosi wyjątek przy wywołaniu. Możliwe są inne wyjątki czasu wykonywania przypadku <see cref="P:System.Xaml.XamlType.ItemType" /> nie zwraca prawidłowy wynik.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (arguments As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : obj[] -&gt; obj&#xA;override this.CreateInstance : obj[] -&gt; obj" Usage="xamlTypeInvoker.CreateInstance arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments">Tablica obiektów, które dostarczają <see langword="x:ConstructorArgs" /> dla tego wystąpienia. Może być <see langword="null" /> dla typów, które nie wymagają lub użyć <see langword="x:ConstructorArgs" />.</param>
        <summary>Tworzy wystąpienie obiektu oparte na inicjowanych konstrukcji <see cref="T:System.Xaml.XamlType" /> tego <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <returns>Utworzone wystąpienie oparte na inicjowanych konstrukcji <see cref="T:System.Xaml.XamlType" /> tego <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MissingMethodException">Nie można rozpoznać konstruktora.</exception>
        <block subset="none" type="overrides">
          <para>Podstawowa implementacja zawiera wywołanie wewnętrznego Pomocnika <c>ThrowIfUnknown</c>. Tego pomocnika zawsze zgłasza wyjątek w przypadkach, gdzie <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> opiera się na nieznany <see cref="T:System.Xaml.XamlType" />, która obejmuje przypadków, gdy <see cref="P:System.Xaml.XamlType.UnderlyingType" /> z <see cref="T:System.Xaml.XamlType" /> jest <see langword="null" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAddMethod (contentType As XamlType) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod(System::Xaml::XamlType ^ contentType);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetAddMethod contentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType">
          <see cref="T:System.Xaml.XamlType" /> dla typu elementu, który jest używany przez <see langword="Add" /> metody.</param>
        <summary>Zwraca odpowiedni <see langword="Add" /> metodę <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> się do kolekcji lub słownika.</summary>
        <returns>CLR <see cref="T:System.Reflection.MethodInfo" /> informacje dotyczące <see langword="Add" /> metodę, lub wartość null.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda powinna zwracać `null` w przypadkach, gdzie <xref:System.Xaml.XamlType> tego <xref:System.Xaml.Schema.XamlTypeInvoker> nie jest zapisywalny kolekcji lub słownika. W szczególności powinna zwrócić `null` w przypadkach, gdzie <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> zwraca `None`.  
  
> [!IMPORTANT]
>  Jeśli nie uzyskujesz dostęp do całkowicie zaufanym systemie typu XAML, ta metoda może potencjalnie false raportu <xref:System.Reflection.MethodInfo> informacje dotyczące obiektów wywołujących.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="contentType" /> jest <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Zwraca implementację podstawową <see langword="null" /> w przypadkach, gdzie <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> opiera się na nieznany <see cref="T:System.Xaml.XamlType" />, która obejmuje przypadków, gdy <see cref="P:System.Xaml.XamlType.UnderlyingType" /> z <see cref="T:System.Xaml.XamlType" /> jest <see langword="null" />. Również zwraca <see langword="null" /> Jeśli <see cref="P:System.Xaml.XamlType.ItemType" /> jest <see langword="null" />.  Kolekcje XAML mogących mieć więcej niż jeden <see langword="Add" /> metody, ponieważ kolekcja XAML potencjalnie może obsługiwać więcej niż jeden typ zawartości (zobacz <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />, lub zobacz <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> uzyskać informacji na temat jedna implementacja tę koncepcję w WPF). Domyślna implementacja używa logika wewnętrzna do zwracania najlepszego dopasowania na podstawie sygnatur i typ podane <paramref name="contentType" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumeratorMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetEnumeratorMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetEnumeratorMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca obiekt reprezentujący metodę, która może wyliczyć nad elementami.</summary>
        <returns>
          <see cref="T:System.Reflection.MethodInfo" /> w przypadku metody modułu wyliczającego lub <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powinna zostać zwrócona `null` w przypadkach, gdzie <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> zwraca `None`.  
  
> [!IMPORTANT]
>  Jeśli nie uzyskujesz dostęp do całkowicie zaufanym systemie typu XAML, ta metoda może potencjalnie false raportu <xref:System.Reflection.MethodInfo> informacje dotyczące obiektów wywołujących.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podstawowa implementacja wywołuje metodę pomocnika wewnętrznego. Zwraca tego pomocnika <see langword="null" /> w przypadkach, gdzie <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> opiera się na nieznany <see cref="T:System.Xaml.XamlType" />, która obejmuje przypadków, gdy <see cref="P:System.Xaml.XamlType.UnderlyingType" /> z <see cref="T:System.Xaml.XamlType" /> jest <see langword="null" />. Również zwraca <see langword="null" /> w przypadkach, gdzie <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> zwraca <see langword="None" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItems (instance As Object) As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetItems(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetItems : obj -&gt; System.Collections.IEnumerator&#xA;override this.GetItems : obj -&gt; System.Collections.IEnumerator" Usage="xamlTypeInvoker.GetItems instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Wystąpienie typu określonego przez <see cref="T:System.Xaml.XamlType" /> używane do konstruowania to <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <summary>Zwraca <see cref="T:System.Collections.IEnumerator" /> obiekt reprezentujący zestaw elementów.</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerator" /> Obiektu lub <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Ta metoda wywoływana <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> opartego na nieznany <see cref="T:System.Xaml.XamlType" />.  
  
 **- lub -** wywołać tę metodę w <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> gdzie odpowiedni typ nie jest kolekcji lub słownika.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> jest <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Podstawowa implementacja zawiera wywołanie wewnętrznego Pomocnika <c>ThrowIfUnknown</c>. Tego pomocnika zawsze zgłasza wyjątek w przypadkach, gdzie <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> opiera się na nieznany <see cref="T:System.Xaml.XamlType" />, która obejmuje przypadków, gdy <see cref="P:System.Xaml.XamlType.UnderlyingType" /> z <see cref="T:System.Xaml.XamlType" /> jest <see langword="null" />.  Podstawowa implementacja nie musi korzystać ze swoich własnych <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> implementacji. Po pierwsze, rzutowanie typu <paramref name="instance" /> do <see cref="T:System.Collections.IEnumerable" /> zostanie podjęta. Jeśli operacja się powiedzie, wywołanie <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> wykonano i zwraca metody, które zwracają wartość. W przeciwnym razie Podstawowa implementacja używa CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> do wywołania bazowego <see langword="GetEnumerator" /> uzyskany w wyniku wywołania metody <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> tego <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetMarkupExtensionHandler As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ SetMarkupExtensionHandler { EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMarkupExtensionHandler : EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera program obsługi do użycia podczas <see cref="T:System.Xaml.XamlObjectWriter" /> wywołaniami zaimplementowano <see cref="T:System.Windows.Markup.MarkupExtension" />.</summary>
        <value>Implementacja programu obsługi, który obsługuje ten przypadek.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Program obsługi zdarzeń jest oparty na <xref:System.EventHandler%601> ograniczone z <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> dane zdarzenia.  
  
 Wartość zwracana, wywołuje <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> zachowanie <xref:System.Xaml.XamlType> , <xref:System.Xaml.Schema.XamlTypeInvoker> opiera się na.  
  
 Wartość zwracana jest `null` dla <xref:System.Xaml.Schema.XamlTypeInvoker> opartego na nieznany <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetTypeConverterHandler As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ SetTypeConverterHandler { EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetTypeConverterHandler : EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera program obsługi do użycia podczas <see cref="T:System.Xaml.XamlObjectWriter" /> wywołaniami zaimplementowane CLR <see cref="T:System.ComponentModel.TypeConverter" />.</summary>
        <value>Implementacja programu obsługi, który obsługuje ten przypadek.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Program obsługi zdarzeń jest oparty na <xref:System.EventHandler%601> ograniczone z <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> dane zdarzenia.  
  
 Wartość zwracana, wywołuje <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> zachowanie <xref:System.Xaml.XamlType> , <xref:System.Xaml.Schema.XamlTypeInvoker> opiera się na.  
  
 Wartość zwracana jest `null` dla <xref:System.Xaml.Schema.XamlTypeInvoker> opartego na nieznany <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlTypeInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnknownInvoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Udostępnia wartość statyczna, która reprezentuje nieznany, nie są w pełni zaimplementowane <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <value>Wartość statyczna, która reprezentuje nieznany, nie są w pełni zaimplementowane <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tę wartość do podawania <xref:System.Xaml.Schema.XamlTypeInvoker> parametru System.Xaml definicja interfejsu API zazwyczaj spowoduje, że dzwonić kodu zgłaszają wyjątki.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>