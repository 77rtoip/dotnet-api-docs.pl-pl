<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cab8b4ba43d15f1dca4640d35056935ab7791fdb" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69416514" /></Metadata><TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeInvoker" />
  <TypeSignature Language="F#" Value="type XamlTypeInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia punkt rozszerzenia, który może konstruować wystąpienia typu XAML za pomocą metod innych niż odbicie i konstruktory.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Celem <xref:System.Xaml.Schema.XamlTypeInvoker> jest umożliwienie rozszerzonego systemu typu XAML, schematu i czasu wykonywania pracy, który nie jest w pełni oparty na funkcjach środowiska CLR, takich jak atrybuty CLR, <xref:System.Type> informacje o odbiciu <xref:System.Reflection.MemberInfo>w i i tak dalej. Podklasy <xref:System.Xaml.Schema.XamlTypeInvoker> są używane jako parametry wejściowe dla alternatywnych konstruktorów klas schematu XAML, takich jak <xref:System.Xaml.XamlType>. Podklasa <xref:System.Xaml.XamlType> i <xref:System.Xaml.Schema.XamlTypeInvoker> przekazanie do konstruktora podstawowego. Wraz z zdefiniowaniem <xref:System.Xaml.Schema.XamlTypeInvoker> dla konstruktora, należy również podać zastąpienia dla co najmniej niektórych `Lookup` metod <xref:System.Xaml.XamlType>.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker>ma implementację domyślną. Domyślna implementacja jest zgodna z modelem domyślnym dla domyślnej implementacji typów <xref:System.Xaml.XamlType> schematów XAML i <xref:System.Xaml.XamlMember>: system typów CLR jest używany do tworzenia wystąpień, wartości i wyszukiwań, w <xref:System.Type> tym przy użyciu atrybutów CLR i <xref:System.Reflection.MemberInfo>itd.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker>dostarcza metody dla podstawowego tworzenia wystąpień (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) i metod, które są istotne dla typów, <xref:System.Xaml.XamlType> w których reprezentuje kolekcję, słownik lub tablicę (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlTypeInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja jest pusta.  
  
 Ten konstruktor jest wywoływany wewnętrznie w celu udostępnienia <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>wartości. Dla podklasy oczekuje się, że należy <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> użyć podpisu dla konstrukcji lub podać przesłonięcie, które wywołuje <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> jako bazę. <xref:System.Xaml.Schema.XamlTypeInvoker> Udostępnianie implementuje domyślnego wzorca, gdzie <xref:System.Xaml.Schema.XamlTypeInvoker> jest niezmienne. <xref:System.Xaml.XamlType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeInvoker(System::Xaml::XamlType ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlTypeInvoker : System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="new System.Xaml.Schema.XamlTypeInvoker type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">Wartość dla określonego typu XAML odpowiadającego temu <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />. <see cref="T:System.Xaml.XamlType" /></param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> klasy na podstawie podanej <see cref="T:System.Xaml.XamlType" />wartości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest wywoływany wewnętrznie na podstawie <xref:System.Xaml.XamlType> lokalizacji, <xref:System.Xaml.Schema.XamlTypeInvoker> w której jest używany do konstruowania. Podane tu dane są istotne dla wszystkich innych wywołań metody dla <xref:System.Xaml.Schema.XamlTypeInvoker>. `type`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollection (instance As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToCollection(System::Object ^ instance, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : obj * obj -&gt; unit&#xA;override this.AddToCollection : obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToCollection (instance, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Wystąpienie typu określonego przez <see cref="T:System.Xaml.XamlType" /> użyta do konstruowania tego <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />elementu.</param>
        <param name="item">Element do dodania.</param>
        <summary>Dodaje podany element do wystąpienia typu, który jest istotny dla tego <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda powinna być wywoływana tylko w przypadku <xref:System.Xaml.XamlType> , która reprezentuje kolekcję.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Wywołano tę metodę na <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> podstawie nieznanego <see cref="T:System.Xaml.XamlType" />elementu.  
  
 **oraz**  
  
Wywołano tę metodę w <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> miejscu, gdzie odpowiedni typ nie jest kolekcją.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="instance" />jest <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException"><see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />dla tego <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> wyniku <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Podstawowa implementacja obejmuje wywołanie wewnętrznego pomocnika <c>ThrowIfUnknown</c>. Ten pomocnik zawsze <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> zgłasza przypadki, gdy jest on oparty na nieznanym <see cref="T:System.Xaml.XamlType" />, <see cref="P:System.Xaml.XamlType.UnderlyingType" /> co obejmuje <see cref="T:System.Xaml.XamlType" /> przypadki, w których jest <see langword="null" />to.  
  
Wewnętrznie, podstawowe wywołania <see cref="P:System.Xaml.XamlType.IsCollection" />implementacji i zgłasza, jeśli wynik to. <see langword="false" />  
  
Implementacja podstawowa nie musi korzystać z własnej <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementacji. Najpierw podejmowana jest <paramref name="instance" /> rzutowanie <see cref="T:System.Collections.IList" /> na wartość. Jeśli to się powiedzie, wywołanie <see cref="M:System.Collections.IList.Add(System.Object)" /> zostanie wykonane i metoda zwróci metodę. W przeciwnym razie implementacja podstawowa używa środowiska <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> CLR do wywołania metody <see langword="Add" /> bazowej, jak uzyskano od wywołania do <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> tego <paramref name="" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  
  
W implementacji podstawowej na tym poziomie nie jest zgłaszany żaden wyjątek <paramref name="item" /> , <see langword="null" />jeśli jest. Nadal jest możliwe, że podstawowa <see langword="Add" /> Metoda zgłosi wyjątek podczas wywoływania. Inne wyjątki w czasie wykonywania są możliwe <see cref="P:System.Xaml.XamlType.ItemType" /> , jeśli nie zwróci prawidłowego wyniku.</para></block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToDictionary (instance As Object, key As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToDictionary(System::Object ^ instance, System::Object ^ key, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToDictionary : obj * obj * obj -&gt; unit&#xA;override this.AddToDictionary : obj * obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToDictionary (instance, key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Wystąpienie typu określonego przez <see cref="T:System.Xaml.XamlType" /> użyta do konstruowania tego <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />elementu.</param>
        <param name="key">Klucz słownika dla elementu do dodania.</param>
        <param name="item">Wartość elementu do dodania.</param>
        <summary>Dodaje podaną wartość klucza i elementu do wystąpienia typu, który jest istotny dla tej <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda powinna być wywoływana tylko w przypadku <xref:System.Xaml.XamlType> , która reprezentuje słownik.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Wywołano tę metodę na <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> podstawie nieznanego <see cref="T:System.Xaml.XamlType" />elementu.  
  
 **oraz**  
  
Wywołano tę metodę w <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> miejscu, gdzie odpowiedni typ nie jest słownikiem.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="instance" />jest <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException"><see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />dla tego <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> wyniku <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Podstawowa implementacja obejmuje wywołanie wewnętrznego pomocnika <c>ThrowIfUnknown</c>. Ten pomocnik zawsze <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> zgłasza przypadki, gdy jest on oparty na nieznanym <see cref="T:System.Xaml.XamlType" />, <see cref="P:System.Xaml.XamlType.UnderlyingType" /> co obejmuje <see cref="T:System.Xaml.XamlType" /> przypadki, w których jest <see langword="null" />to.  
  
Wewnętrznie, podstawowe wywołania <see cref="P:System.Xaml.XamlType.IsDictionary" />implementacji i zgłasza, jeśli wynik to. <see langword="false" />  
  
Implementacja podstawowa nie musi korzystać z własnej <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementacji. Najpierw podejmowana jest <paramref name="instance" /> rzutowanie <see cref="T:System.Collections.IDictionary" /> na wartość. Jeśli to się powiedzie, wywołanie <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /> zostanie wykonane i metoda zwróci metodę. W przeciwnym razie implementacja podstawowa używa środowiska <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> CLR do wywołania metody <see langword="Add" /> bazowej, jak uzyskano od wywołania do <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> tego <paramref name="" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  
  
W implementacji podstawowej żaden wyjątek nie jest uruchamiany na tym poziomie, <paramref name="item" /> Jeśli <paramref name="key" /> lub <see langword="null" />jest. Nadal jest możliwe, że podstawowa <see langword="Add" /> Metoda zgłosi wyjątek podczas wywoływania. Inne wyjątki w czasie wykonywania są możliwe <see cref="P:System.Xaml.XamlType.ItemType" /> , jeśli nie zwróci prawidłowego wyniku.</para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (arguments As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : obj[] -&gt; obj&#xA;override this.CreateInstance : obj[] -&gt; obj" Usage="xamlTypeInvoker.CreateInstance arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments">Tablica obiektów, które dostarczają <see langword="x:ConstructorArgs" /> dla tego wystąpienia. Może być <see langword="null" /> dla typów, które nie wymagają ani nie <see langword="x:ConstructorArgs" />są używane.</param>
        <summary>Tworzy wystąpienie obiektu na podstawie zainicjowanej <see cref="T:System.Xaml.XamlType" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />konstrukcji.</summary>
        <returns>Utworzone wystąpienie na podstawie zainicjowanej <see cref="T:System.Xaml.XamlType" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />konstrukcji.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MissingMethodException">Nie można rozpoznać konstruktora.</exception>
        <block subset="none" type="overrides"><para>Podstawowa implementacja obejmuje wywołanie wewnętrznego pomocnika <c>ThrowIfUnknown</c>. Ten pomocnik zawsze <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> zgłasza przypadki, gdy jest on oparty na nieznanym <see cref="T:System.Xaml.XamlType" />, <see cref="P:System.Xaml.XamlType.UnderlyingType" /> co obejmuje <see cref="T:System.Xaml.XamlType" /> przypadki, w których jest <see langword="null" />to.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAddMethod (contentType As XamlType) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod(System::Xaml::XamlType ^ contentType);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetAddMethod contentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType"><see cref="T:System.Xaml.XamlType" />dla typu elementu, który jest używany przez <see langword="Add" /> metodę.</param>
        <summary>Zwraca odpowiednią <see langword="Add" /> metodę dla elementu <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> , który jest istotny dla kolekcji lub słownika.</summary>
        <returns>Informacje <see cref="T:System.Reflection.MethodInfo" /> o CLR <see langword="Add" /> dla metody lub null.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda powinna zwracać `null` w przypadku, <xref:System.Xaml.XamlType> gdy nie jest <xref:System.Xaml.Schema.XamlTypeInvoker> to zapisywalna kolekcja ani słownik. W `null` odniesieniu do przypadków, <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> gdy `None`zwraca.  
  
> [!IMPORTANT]
>  Jeśli nie uzyskujesz dostępu do w pełni zaufanego systemu typów XAML, ta metoda ma możliwość zgłaszania <xref:System.Reflection.MethodInfo> fałszywych informacji do wywołujących.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="contentType" />jest <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Implementacja podstawowa <see langword="null" /> zwraca dla przypadków, <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> w których jest oparta na nieznanej <see cref="T:System.Xaml.XamlType" /> <see cref="T:System.Xaml.XamlType" />, która obejmuje przypadki, <see cref="P:System.Xaml.XamlType.UnderlyingType" /> w których jest <see langword="null" />to. Zwraca <see langword="null" /> również wtedy, <see cref="P:System.Xaml.XamlType.ItemType" /> gdy <see langword="null" />jest.  
  
Kolekcje XAML mogą mieć więcej niż jedną <see langword="Add" /> metodę, ponieważ kolekcja XAML może potencjalnie obsługiwać więcej niż jeden typ zawartości (zobacz <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />lub zobacz <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> , aby uzyskać informacje o jednej implementacji koncepcji w WPF). Implementacja domyślna używa logiki wewnętrznej w celu zwrócenia najlepszego dopasowania na podstawie sygnatur i typu podanego <paramref name="contentType" />elementu.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumeratorMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetEnumeratorMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetEnumeratorMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca obiekt reprezentujący metodę, która może wyliczyć dla elementów.</summary>
        <returns><see cref="T:System.Reflection.MethodInfo" />dla metody modułu wyliczającego <see langword="null" />lub.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy zwrócić `null` w przypadku przypadków <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> , `None`w których funkcja zwraca wartość.  
  
> [!IMPORTANT]
>  Jeśli nie uzyskujesz dostępu do w pełni zaufanego systemu typów XAML, ta metoda ma możliwość zgłaszania <xref:System.Reflection.MethodInfo> fałszywych informacji do wywołujących.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Implementacja podstawowa wywołuje wewnętrzną metodę pomocnika. Ten pomocnik zwraca <see langword="null" /> w przypadku <see cref="P:System.Xaml.XamlType.UnderlyingType" /> <see langword="null" /> <see cref="T:System.Xaml.XamlType" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />,gdy jest on oparty na nieznanym, co obejmuje przypadki, w których jestto.<see cref="T:System.Xaml.XamlType" /> Zwraca <see langword="null" /> również dla przypadków, gdy <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> zwraca <see langword="None" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItems (instance As Object) As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetItems(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetItems : obj -&gt; System.Collections.IEnumerator&#xA;override this.GetItems : obj -&gt; System.Collections.IEnumerator" Usage="xamlTypeInvoker.GetItems instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Wystąpienie typu określonego przez <see cref="T:System.Xaml.XamlType" /> użyta do konstruowania tego <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />elementu.</param>
        <summary><see cref="T:System.Collections.IEnumerator" /> Zwraca obiekt reprezentujący zestaw elementów.</summary>
        <returns><see cref="T:System.Collections.IEnumerator" /> Obiekt lub<see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Wywołano tę metodę na <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> podstawie nieznanego <see cref="T:System.Xaml.XamlType" />elementu.  
  
 **oraz**  
  
Wywołano tę metodę w <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> miejscu, gdzie odpowiedni typ nie jest kolekcją ani słownikiem.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="instance" />jest <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Podstawowa implementacja obejmuje wywołanie wewnętrznego pomocnika <c>ThrowIfUnknown</c>. Ten pomocnik zawsze <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> zgłasza przypadki, gdy jest on oparty na nieznanym <see cref="T:System.Xaml.XamlType" />, <see cref="P:System.Xaml.XamlType.UnderlyingType" /> co obejmuje <see cref="T:System.Xaml.XamlType" /> przypadki, w których jest <see langword="null" />to.  
  
Implementacja podstawowa nie musi korzystać z własnej <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> implementacji. Najpierw podejmowana jest <paramref name="instance" /> rzutowanie <see cref="T:System.Collections.IEnumerable" /> na wartość. Jeśli to się powiedzie, wywołanie <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> jest nawiązywane, a metoda zwraca tę wartość zwracaną. W przeciwnym razie implementacja podstawowa używa środowiska <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> CLR do wywołania metody <see langword="GetEnumerator" /> bazowej, jak uzyskano od wywołania do <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> tego <paramref name="" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetMarkupExtensionHandler As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ SetMarkupExtensionHandler { EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMarkupExtensionHandler : EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera procedurę obsługi, która będzie używana <see cref="T:System.Xaml.XamlObjectWriter" /> podczas wywołań do zaimplementowane <see cref="T:System.Windows.Markup.MarkupExtension" />.</summary>
        <value>Implementacja programu obsługi, która obsługuje ten przypadek.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Program obsługi zdarzeń jest oparty na <xref:System.EventHandler%601> ograniczonych <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> danych zdarzenia.  
  
 Zwracana wartość wywołuje <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> zachowanie <xref:System.Xaml.XamlType> w przypadku, w którym <xref:System.Xaml.Schema.XamlTypeInvoker> bazuje.  
  
 Wartość zwracana jest `null` dla elementu <xref:System.Xaml.Schema.XamlTypeInvoker> , który jest oparty na nieznanej <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetTypeConverterHandler As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ SetTypeConverterHandler { EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetTypeConverterHandler : EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera procedurę obsługi, która będzie używana <see cref="T:System.Xaml.XamlObjectWriter" /> podczas wywołań do implementowanego <see cref="T:System.ComponentModel.TypeConverter" />środowiska CLR.</summary>
        <value>Implementacja programu obsługi, która obsługuje ten przypadek.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Program obsługi zdarzeń jest oparty na <xref:System.EventHandler%601> ograniczonych <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> danych zdarzenia.  
  
 Zwracana wartość wywołuje <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> zachowanie <xref:System.Xaml.XamlType> w przypadku, w którym <xref:System.Xaml.Schema.XamlTypeInvoker> bazuje.  
  
 Wartość zwracana jest `null` dla elementu <xref:System.Xaml.Schema.XamlTypeInvoker> , który jest oparty na nieznanej <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlTypeInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnknownInvoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zawiera wartość statyczną, która reprezentuje nieznaną, nie w <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />pełni zaimplementowany.</summary>
        <value>Wartość statyczna, która reprezentuje nieznany, nie w pełni <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />zaimplementowany.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podanie tej wartości dla <xref:System.Xaml.Schema.XamlTypeInvoker> parametru klasy System. XAML zdefiniowanej przez interfejs API zwykle powoduje, że wywoływany kod zgłasza wyjątki.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
