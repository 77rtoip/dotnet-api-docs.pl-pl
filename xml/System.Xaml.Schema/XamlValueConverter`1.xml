<Type Name="XamlValueConverter&lt;TConverterBase&gt;" FullName="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="14f64c06d0c6afea97193bb13524fbf8204f703e" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69427745" /></Metadata><TypeSignature Language="C#" Value="public class XamlValueConverter&lt;TConverterBase&gt; : IEquatable&lt;System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;&gt; where TConverterBase : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlValueConverter`1&lt;class TConverterBase&gt; extends System.Object implements class System.IEquatable`1&lt;class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlValueConverter`1" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlValueConverter(Of TConverterBase)&#xA;Implements IEquatable(Of XamlValueConverter(Of TConverterBase))" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TConverterBase&gt;&#xA; where TConverterBase : classpublic ref class XamlValueConverter : IEquatable&lt;System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^&gt;" />
  <TypeSignature Language="F#" Value="type XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; = class&#xA;    interface IEquatable&lt;XamlValueConverter&lt;'ConverterBase&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TConverterBase">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TConverterBase">Klasa bazowa CLR dla określonego konwertera, który <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> reprezentuje. Zwykle jest to jedna z następujących czynności: <see cref="T:System.ComponentModel.TypeConverter" />; <see cref="T:System.Windows.Markup.MarkupExtension" />; <see cref="T:System.Windows.Markup.ValueSerializer" />;</typeparam>
    <summary>Udostępnia wspólną powierzchnię interfejsu API dla technik, które generują wartości inicjalizacji lub serializacji dla języka XAML na podstawie danych wejściowych innych niż docelowy. Obejmuje to rozszerzenia znaczników i konwertery typów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienia tego typu są zwracane przez metody interfejsu API schematu języka XAML, takich jak <xref:System.Xaml.XamlType.LookupTypeConverter%2A>. Ogólna implementacja programu <xref:System.Xaml.Schema.XamlValueConverter%601> zapewnia pośredni dla zestawu System. XAML, dzięki czemu podstawowy schemat XAML i system typów nie muszą przyjmować zależności od różnych technik konwersji wartości, które są zwykle implementacjami w innych zestawów.  
  
 Obiekt <xref:System.Xaml.Schema.XamlValueConverter%601> może być skonstruowany z typem implementacji o wartości null, ale <xref:System.Xaml.Schema.XamlValueConverter%601> takie polecenie `null` zwróci <xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A>wartość.  
  
 Sygnatury konstruktorów <xref:System.Xaml.Schema.XamlValueConverter%601> do `converterType` użycia parametru, który odwołuje się do określonego typu, który implementuje zachowanie konwersji. Aby zapewnić prawidłowe działanie <xref:System.Xaml.Schema.XamlValueConverter%601> (jeden, który ma wartość inną <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>niż null) `converterType` , oczekiwany `TConverterBase` jest rzutowanie na typ ograniczenia. Warunek niezgodności nie jest wymuszany przez konstruktory, ale może <xref:System.InvalidCastException> generować w czasie wykonywania.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlValueConverter (Type converterType, System.Xaml.XamlType targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type converterType, class System.Xaml.XamlType targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (converterType As Type, targetType As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlValueConverter(Type ^ converterType, System::Xaml::XamlType ^ targetType);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; : Type * System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;" Usage="new System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; (converterType, targetType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="converterType" Type="System.Type" />
        <Parameter Name="targetType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="converterType"><see cref="T:System.Type" /> Implementuje to zachowanie konwertera.</param>
        <param name="targetType">Obiekt docelowy/docelowy <see cref="T:System.Xaml.XamlType" />. <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /></param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> klasy w oparciu o implementujący <see cref="T:System.Type" /> konwerter i typ docelowy <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />/docelowy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlValueConverter (Type converterType, System.Xaml.XamlType targetType, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type converterType, class System.Xaml.XamlType targetType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (converterType As Type, targetType As XamlType, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlValueConverter(Type ^ converterType, System::Xaml::XamlType ^ targetType, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; : Type * System.Xaml.XamlType * string -&gt; System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;" Usage="new System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; (converterType, targetType, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="converterType" Type="System.Type" />
        <Parameter Name="targetType" Type="System.Xaml.XamlType" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="converterType"><see cref="T:System.Type" /> Implementuje to zachowanie konwertera.</param>
        <param name="targetType">Obiekt docelowy/docelowy <see cref="T:System.Xaml.XamlType" />. <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /></param>
        <param name="name">Nazwa ciągu.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> klasy na podstawie konwertera implementującego <see cref="T:System.Type" /> typ <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />docelowy/docelowy i nazwę ciągu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `name` jest podana jako `null`, nazwa domyślna `converterType` jest generowana na podstawie lub `targetType`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Wszystkie trzy parametry to <see langword="null" /> (co najmniej jeden z nich musi mieć wartość inną niż null).</exception>
      </Docs>
    </Member>
    <Member MemberName="ConverterInstance">
      <MemberSignature Language="C#" Value="public TConverterBase ConverterInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TConverterBase ConverterInstance" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConverterInstance As TConverterBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TConverterBase ConverterInstance { TConverterBase get(); };" />
      <MemberSignature Language="F#" Value="member this.ConverterInstance : 'ConverterBase" Usage="System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;.ConverterInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TConverterBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera utworzone wystąpienie implementacji konwertera.</summary>
        <value>Utworzone wystąpienie implementacji konwertera lub <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>wywołuje chronioną domyślną implementację <xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A> programu, aby uzyskać wartość (i może uzyskać dostęp do przechowywanej <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> wartości, jeśli została już wywołana <xref:System.Xaml.Schema.XamlValueConverter%601>w tym momencie.  
  
 Obiekt <xref:System.Xaml.Schema.XamlValueConverter%601> może być skonstruowany z typem implementacji o wartości null, ale <xref:System.Xaml.Schema.XamlValueConverter%601> takie polecenie `null` zwróci <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>wartość.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConverterType">
      <MemberSignature Language="C#" Value="public Type ConverterType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ConverterType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlValueConverter`1.ConverterType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConverterType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ConverterType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConverterType : Type" Usage="System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;.ConverterType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Type" /> Pobiera dla klasy, która implementuje zachowanie konwertera.</summary>
        <value><see cref="T:System.Type" /> Dla klasy, która implementuje zachowanie konwertera.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="protected virtual TConverterBase CreateInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TConverterBase CreateInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateInstance () As TConverterBase" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual TConverterBase CreateInstance();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : unit -&gt; 'ConverterBase&#xA;override this.CreateInstance : unit -&gt; 'ConverterBase" Usage="xamlValueConverter.CreateInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TConverterBase</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wystąpienie implementacji konwertera.</summary>
        <returns>Wystąpienie implementacji konwertera lub <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A>jest chroniony. Aby uzyskać wystąpienie konwertera z publicznym interfejsem API, należy pobrać wartość <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>.  
  
 Obiekt <xref:System.Xaml.Schema.XamlValueConverter%601> może być skonstruowany z typem implementacji o wartości null, ale <xref:System.Xaml.Schema.XamlValueConverter%601> takie polecenie `null` zwróci <xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A>wartość.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xaml.XamlSchemaException">Konwerter nie zaimplementował poprawnego typu podstawowego.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy to wystąpienie <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> i obiekt mają tę samą wartość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xamlValueConverter.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do porównania.</param>
        <summary>Określa, czy to wystąpienie <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> i określony obiekt, który również musi <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> być obiektem, mają tę samą wartość.</summary>
        <returns><see langword="true" />Jeśli <paramref name="obj" /> <see langword="false" />jest i jej wartość jest taka sama jak to wystąpienie; w przeciwnym razie,. <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Xaml.Schema.XamlValueConverter{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As XamlValueConverter(Of TConverterBase)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; -&gt; bool" Usage="xamlValueConverter.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> Do porównania.</param>
        <summary>Określa, czy to wystąpienie <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> i inny <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> obiekt mają tę samą wartość.</summary>
        <returns><see langword="true" />Jeśli <paramref name="other" /> <see langword="false" />jest i jej wartość jest taka sama jak to wystąpienie; w przeciwnym razie,. <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xamlValueConverter.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kod skrótu dla tego <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />elementu.</summary>
        <returns>Kod skrótu liczby całkowitej.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlValueConverter`1.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę ciągu dla tego <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />elementu.</summary>
        <value>Nazwa ciągu dla tego <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />elementu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej właściwości jest określana przez jedną z następujących wartości:  
  
-   Parametr konstruktora (zobacz <xref:System.Xaml.Schema.XamlValueConverter%601.%23ctor%2A?displayProperty=nameWithType>).  
  
-   Wewnętrzna logika, która przetwarza inne dane wejściowe konstruktora i tworzy ciąg.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; converter1, System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; converter2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt; converter1, class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt; converter2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (converter1 As XamlValueConverter(Of TConverterBase), converter2 As XamlValueConverter(Of TConverterBase)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ converter1, System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ converter2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; * System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; -&gt; bool" Usage="converter1 = converter2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converter1" Type="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;" />
        <Parameter Name="converter2" Type="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;" />
      </Parameters>
      <Docs>
        <param name="converter1">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, lub <see langword="null" />.</param>
        <param name="converter2">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, lub <see langword="null" />.</param>
        <summary>Określa, czy dwa <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> określone obiekty mają tę samą wartość.</summary>
        <returns><see langword="true" />Jeśli wartość <paramref name="converter1" /> jest taka sama jak <paramref name="converter2" />wartość; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; converter1, System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt; converter2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt; converter1, class System.Xaml.Schema.XamlValueConverter`1&lt;!TConverterBase&gt; converter2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (converter1 As XamlValueConverter(Of TConverterBase), converter2 As XamlValueConverter(Of TConverterBase)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ converter1, System::Xaml::Schema::XamlValueConverter&lt;TConverterBase&gt; ^ converter2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; * System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt; -&gt; bool" Usage="System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;.op_Inequality (converter1, converter2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converter1" Type="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;" />
        <Parameter Name="converter2" Type="System.Xaml.Schema.XamlValueConverter&lt;TConverterBase&gt;" />
      </Parameters>
      <Docs>
        <param name="converter1">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, lub <see langword="null" />.</param>
        <param name="converter2">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, lub <see langword="null" />.</param>
        <summary>Określa, czy dwa <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> określone obiekty mają różne wartości.</summary>
        <returns><see langword="true" />Jeśli wartość <paramref name="converter1" /> jest różna od <paramref name="converter2" />wartości; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType TargetType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlValueConverter`1.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ TargetType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : System.Xaml.XamlType" Usage="System.Xaml.Schema.XamlValueConverter&lt;'ConverterBase (requires 'ConverterBase : null)&gt;.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera element docelowy/docelowy <see cref="T:System.Xaml.XamlType" />. <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /></summary>
        <value>Obiekt docelowy/docelowy <see cref="T:System.Xaml.XamlType" />. <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /></value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlValueConverter`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xamlValueConverter.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wartość reprezentującą to <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />. <see cref="T:System.String" /></summary>
        <returns><see cref="T:System.String" /> Reprezentuje to<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość jest oparta na <xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A>. <xref:System.Xaml.Schema.XamlValueConverter%601.ToString%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
