<Type Name="ConcurrentStack&lt;T&gt;" FullName="System.Collections.Concurrent.ConcurrentStack&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1f942f8f4ab646b1bbce38671eb74a6a7ef8c74d" /><Meta Name="ms.sourcegitcommit" Value="d8bd5d494445ce3fcad1321267cb87548d23a45b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="12/15/2018" /><Meta Name="ms.locfileid" Value="53447606" /></Metadata><TypeSignature Language="C#" Value="public class ConcurrentStack&lt;T&gt; : System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ConcurrentStack`1&lt;T&gt; extends System.Object implements class System.Collections.Concurrent.IProducerConsumerCollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Concurrent.ConcurrentStack`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ConcurrentStack(Of T)&#xA;Implements IEnumerable(Of T), IProducerConsumerCollection(Of T), IReadOnlyCollection(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ConcurrentStack : System::Collections::Concurrent::IProducerConsumerCollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ConcurrentStack&lt;'T&gt; = class&#xA;    interface IProducerConsumerCollection&lt;'T&gt;&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Concurrent</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.14.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Concurrent.SystemCollectionsConcurrent_ProducerConsumerCollectionDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="38a0d-101">Typ elementów znajdujących się w stosie.</span><span class="sxs-lookup"><span data-stu-id="38a0d-101">The type of the elements contained in the stack.</span></span></typeparam>
    <summary><span data-ttu-id="38a0d-102">Reprezentuje kolekcję pierwszy LIFO ostatniego metodą o bezpiecznych wątkach.</span><span class="sxs-lookup"><span data-stu-id="38a0d-102">Represents a thread-safe last in-first out (LIFO) collection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="38a0d-103"><xref:System.Collections.Concurrent.ConcurrentStack%601> implementuje <xref:System.Collections.Generic.IReadOnlyCollection%601> interfejsu, począwszy od [!INCLUDE[net_v46](~/includes/net-v46-md.md)]; w poprzednich wersjach programu .NET Framework, <xref:System.Collections.Concurrent.ConcurrentStack%601> klasa nie implementuje ten interfejs.</span><span class="sxs-lookup"><span data-stu-id="38a0d-103"><xref:System.Collections.Concurrent.ConcurrentStack%601> implements the <xref:System.Collections.Generic.IReadOnlyCollection%601> interface starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)]; in previous versions of the .NET Framework, the <xref:System.Collections.Concurrent.ConcurrentStack%601> class did not implement this interface.</span></span>  
  
 <span data-ttu-id="38a0d-104"><xref:System.Collections.Concurrent.ConcurrentStack%601> zapewnia kilka głównych operacji:</span><span class="sxs-lookup"><span data-stu-id="38a0d-104"><xref:System.Collections.Concurrent.ConcurrentStack%601> provides a few main operations:</span></span>  
  
-   <span data-ttu-id="38a0d-105"><xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A> Wstawia element w górnej części <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span><span class="sxs-lookup"><span data-stu-id="38a0d-105"><xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A> inserts an element at the top of the <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span></span>  
  
-   <span data-ttu-id="38a0d-106"><xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A> Usuwa element z góry <xref:System.Collections.Concurrent.ConcurrentStack%601>, lub zwraca `false` Jeśli nie można usunąć elementu.</span><span class="sxs-lookup"><span data-stu-id="38a0d-106"><xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A> removes an element from the top of the <xref:System.Collections.Concurrent.ConcurrentStack%601>, or returns `false` if the item cannot be removed.</span></span>  
  
-   <span data-ttu-id="38a0d-107"><xref:System.Collections.Concurrent.ConcurrentStack%601.TryPeek%2A> Zwraca element, który znajduje się w górnej części <xref:System.Collections.Concurrent.ConcurrentStack%601> , ale nie spowoduje usunięcia go z <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span><span class="sxs-lookup"><span data-stu-id="38a0d-107"><xref:System.Collections.Concurrent.ConcurrentStack%601.TryPeek%2A> returns an element that is at the top of the <xref:System.Collections.Concurrent.ConcurrentStack%601> but does not remove it from the <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span></span>  
  
-   <span data-ttu-id="38a0d-108"><xref:System.Collections.Concurrent.ConcurrentStack%601.TryPopRange%2A> i <xref:System.Collections.Concurrent.ConcurrentStack%601.PushRange%2A> metody zapewniają efektywne wypychanie i usuwanie wielu elementów w ramach jednej operacji.</span><span class="sxs-lookup"><span data-stu-id="38a0d-108">The <xref:System.Collections.Concurrent.ConcurrentStack%601.TryPopRange%2A> and <xref:System.Collections.Concurrent.ConcurrentStack%601.PushRange%2A> methods provide efficient pushing and popping of multiple elements in a single operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38a0d-109">Poniższy przykład pokazuje, jak używać <xref:System.Collections.Concurrent.ConcurrentStack%601> i wypychania pop poszczególne elementy:</span><span class="sxs-lookup"><span data-stu-id="38a0d-109">The following example shows how to use a <xref:System.Collections.Concurrent.ConcurrentStack%601> to push and pop individual items:</span></span>  
  
 [!code-csharp[System.Collections.Concurrent.ConcurrentStack#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.concurrentstack/cs/concstack_single.cs#1)]
 [!code-vb[System.Collections.Concurrent.ConcurrentStack#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.concurrentstack/vb/concstack_single.vb#1)]
  
 <span data-ttu-id="38a0d-110">Poniższy przykład pokazuje, jak używać <xref:System.Collections.Concurrent.ConcurrentStack%601> i wypychania pop zakresów:</span><span class="sxs-lookup"><span data-stu-id="38a0d-110">The following example shows how to use a <xref:System.Collections.Concurrent.ConcurrentStack%601> to push and pop ranges of items:</span></span>  
  
 [!code-csharp[System.Collections.Concurrent.ConcurrentStack#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.concurrentstack/cs/concstack_range.cs#1)]
 [!code-vb[System.Collections.Concurrent.ConcurrentStack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.concurrentstack/vb/concstack_range.vb#1)]
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="38a0d-111">Wszystkie publiczne i chronione elementy członkowskie <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> są odporne na wątki i mogą być używane jednocześnie z wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="38a0d-111">All public and protected members of <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-112">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-112">Thread-Safe Collections</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConcurrentStack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConcurrentStack();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="38a0d-113">Inicjuje nowe wystąpienie klasy <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="38a0d-113">Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-114">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-114">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConcurrentStack (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConcurrentStack(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Concurrent.ConcurrentStack&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Concurrent.ConcurrentStack&lt;'T&gt;" Usage="new System.Collections.Concurrent.ConcurrentStack&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection"><span data-ttu-id="38a0d-115">Kolekcja, której elementy są kopiowane do nowego <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-115">The collection whose elements are copied to the new <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span></param>
        <summary><span data-ttu-id="38a0d-116">Inicjuje nowe wystąpienie klasy <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> klasy, która zawiera elementy kopiowane z określonej kolekcji</span><span class="sxs-lookup"><span data-stu-id="38a0d-116">Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> class that contains elements copied from the specified collection</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="38a0d-117"><paramref name="collection" /> Argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="38a0d-117">The <paramref name="collection" /> argument is null.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-118">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-118">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="concurrentStack.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="38a0d-119">Usuwa wszystkie obiekty z <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-119">Removes all objects from the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-120">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-120">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;T&gt; ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'T[] * int -&gt; unit&#xA;override this.CopyTo : 'T[] * int -&gt; unit" Usage="concurrentStack.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="38a0d-121">Jednowymiarowy <see cref="T:System.Array" /> czyli miejscem docelowym elementów kopiowanych z <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-121">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span> <span data-ttu-id="38a0d-122"><see cref="T:System.Array" /> Musi mieć Indeksowanie oparte na zerze.</span><span class="sxs-lookup"><span data-stu-id="38a0d-122">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="38a0d-123">Liczony od zera indeks w <paramref name="array" /> od rozpoczyna się kopiowanie które.</span><span class="sxs-lookup"><span data-stu-id="38a0d-123">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="38a0d-124">Kopiuje <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> elementy do istniejącej jednowymiarowej <see cref="T:System.Array" />, rozpoczynając od określonego indeksu tablicy.</span><span class="sxs-lookup"><span data-stu-id="38a0d-124">Copies the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="38a0d-125"><paramref name="array" /> to odwołanie o wartości null (Nothing w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="38a0d-125"><paramref name="array" /> is a null reference (Nothing in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="38a0d-126"><paramref name="index" /> jest mniejsza niż zero.</span><span class="sxs-lookup"><span data-stu-id="38a0d-126"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38a0d-127"><paramref name="index" /> jest równa lub większa niż długość <paramref name="array" /> - lub - liczba elementów w źródle <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> jest większa niż dostępna ilość miejsca od <paramref name="index" /> do końca tablicy docelowej <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-127"><paramref name="index" /> is equal to or greater than the length of the <paramref name="array" /> -or- The number of elements in the source <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-128">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-128">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.ConcurrentStack`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Concurrent.ConcurrentStack&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38a0d-129">Pobiera liczbę elementów znajdujących się w <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-129">Gets the number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span></summary>
        <value><span data-ttu-id="38a0d-130">Liczba elementów zawartych w słowniku <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-130">The number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38a0d-131">W celu określenia, czy kolekcja zawiera wszystkie elementy, użytkowania <xref:System.Collections.Concurrent.ConcurrentStack%601.IsEmpty%2A> zaleca się właściwości zamiast pobieranie liczby elementów z <xref:System.Collections.Concurrent.ConcurrentStack%601.Count%2A> właściwość i porównanie go na wartość 0.</span><span class="sxs-lookup"><span data-stu-id="38a0d-131">For determining whether the collection contains any items, use of the <xref:System.Collections.Concurrent.ConcurrentStack%601.IsEmpty%2A> property is recommended rather than retrieving the number of items from the <xref:System.Collections.Concurrent.ConcurrentStack%601.Count%2A> property and comparing it to 0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="concurrentStack.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="38a0d-132">Zwraca moduł wyliczający, który iteruje po <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-132">Returns an enumerator that iterates through the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span></summary>
        <returns><span data-ttu-id="38a0d-133">Moduł wyliczający <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-133">An enumerator for the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38a0d-134">Wyliczenie reprezentuje moment w czasie migawkę zawartość stosu.</span><span class="sxs-lookup"><span data-stu-id="38a0d-134">The enumeration represents a moment-in-time snapshot of the contents of the stack.</span></span> <span data-ttu-id="38a0d-135">Nie będzie odzwierciedlał wszelkie aktualizacje kolekcji po <xref:System.Collections.Concurrent.ConcurrentStack%601.GetEnumerator%2A> została wywołana.</span><span class="sxs-lookup"><span data-stu-id="38a0d-135">It does not reflect any updates to the collection after <xref:System.Collections.Concurrent.ConcurrentStack%601.GetEnumerator%2A> was called.</span></span> <span data-ttu-id="38a0d-136">Moduł wyliczający bezpiecznym rozwiązaniem jest użycie wątkom odczyty i zapisuje w stosie.</span><span class="sxs-lookup"><span data-stu-id="38a0d-136">The enumerator is safe to use concurrently with reads from and writes to the stack.</span></span> <span data-ttu-id="38a0d-137">Moduł wyliczający zwraca elementy w kolejności LIFO (ostatni na wejściu, first-out).</span><span class="sxs-lookup"><span data-stu-id="38a0d-137">The enumerator returns items in LIFO (last-in, first-out) order.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-138">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-138">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.ConcurrentStack`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Collections.Concurrent.ConcurrentStack&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38a0d-139">Pobiera wartość wskazującą, czy <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> jest pusty.</span><span class="sxs-lookup"><span data-stu-id="38a0d-139">Gets a value that indicates whether the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> is empty.</span></span></summary>
        <value><span data-ttu-id="38a0d-140"><see langword="true" /> Jeśli <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> jest pusty; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-140"><see langword="true" /> if the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38a0d-141">Określanie, czy kolekcja zawiera wszystkie elementy, zaleca się użycie tej właściwości, a nie podczas pobierania liczby elementów z <xref:System.Collections.Concurrent.ConcurrentStack%601.Count%2A> właściwość i porównanie go na wartość 0.</span><span class="sxs-lookup"><span data-stu-id="38a0d-141">For determining whether the collection contains any items, use of this property is recommended rather than retrieving the number of items from the <xref:System.Collections.Concurrent.ConcurrentStack%601.Count%2A> property and comparing it to 0.</span></span> <span data-ttu-id="38a0d-142">Jednak ponieważ ta kolekcja ma być uzyskiwany współbieżnie, może być przypadek, który inny wątek zmodyfikuje kolekcji po <xref:System.Collections.Concurrent.ConcurrentStack%601.IsEmpty%2A> zwraca, w tym samym unieważniając wynik.</span><span class="sxs-lookup"><span data-stu-id="38a0d-142">However, as this collection is intended to be accessed concurrently, it may be the case that another thread will modify the collection after <xref:System.Collections.Concurrent.ConcurrentStack%601.IsEmpty%2A> returns, thus invalidating the result.</span></span>  
  
 <span data-ttu-id="38a0d-143">Dla przykładu kodu zobacz <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span><span class="sxs-lookup"><span data-stu-id="38a0d-143">For a code example, see <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-144">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-144">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.Push(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push(T item);" />
      <MemberSignature Language="F#" Value="member this.Push : 'T -&gt; unit" Usage="concurrentStack.Push item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="38a0d-145">Obiekt do przekazania <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-145">The object to push onto the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span> <span data-ttu-id="38a0d-146">Wartość może być odwołaniem do wartości null (Nothing w języku Visual Basic) dla typów odwołań.</span><span class="sxs-lookup"><span data-stu-id="38a0d-146">The value can be a null reference (Nothing in Visual Basic) for reference types.</span></span></param>
        <summary><span data-ttu-id="38a0d-147">Wstawienie obiektu w górnej części <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-147">Inserts an object at the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-148">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-148">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="PushRange">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <remarks />
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-149">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-149">Thread-Safe Collections</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="PushRange">
      <MemberSignature Language="C#" Value="public void PushRange (T[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PushRange(!T[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PushRange (items As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PushRange(cli::array &lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.PushRange : 'T[] -&gt; unit" Usage="concurrentStack.PushRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="38a0d-150">Obiekty do przekazania <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-150">The objects to push onto the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span></param>
        <summary><span data-ttu-id="38a0d-151">Wstawia wiele obiektów w górnej części <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> niepodzielne.</span><span class="sxs-lookup"><span data-stu-id="38a0d-151">Inserts multiple objects at the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> atomically.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38a0d-152">Podczas dodawania wielu elementów na stos, za pomocą PushRange jest mechanizm bardziej wydajne niż przy użyciu <xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A> jeden element w danym momencie.</span><span class="sxs-lookup"><span data-stu-id="38a0d-152">When adding multiple items to the stack, using PushRange is a more efficient mechanism than using <xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A> one item at a time.</span></span> <span data-ttu-id="38a0d-153">Ponadto PushRange gwarantuje wszystkie elementy będą dodania niepodzielne, co oznacza, że nie ma innych wątków będzie można wstawić elementów między elementami wypychania.</span><span class="sxs-lookup"><span data-stu-id="38a0d-153">Additionally, PushRange guarantees that all of the elements will be added atomically, meaning that no other threads will be able to inject elements between the elements being pushed.</span></span> <span data-ttu-id="38a0d-154">Elementy na niższe indeksy w `items` tablicy będą wypychane przed elementami o wyższych indeksów.</span><span class="sxs-lookup"><span data-stu-id="38a0d-154">Items at lower indices in the `items` array will be pushed before items at higher indices.</span></span>  
  
 <span data-ttu-id="38a0d-155">Dla przykładu kodu zobacz <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span><span class="sxs-lookup"><span data-stu-id="38a0d-155">For a code example, see <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="38a0d-156"><paramref name="items" /> to odwołanie o wartości null (Nothing w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="38a0d-156"><paramref name="items" /> is a null reference (Nothing in Visual Basic).</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-157">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-157">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PushRange">
      <MemberSignature Language="C#" Value="public void PushRange (T[] items, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PushRange(!T[] items, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PushRange (items As T(), startIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PushRange(cli::array &lt;T&gt; ^ items, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.PushRange : 'T[] * int * int -&gt; unit" Usage="concurrentStack.PushRange (items, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="T[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="38a0d-158">Obiekty do przekazania <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-158">The objects to push onto the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span></param>
        <param name="startIndex"><span data-ttu-id="38a0d-159">Przesunięcie od zera w <paramref name="items" /> od którego należy rozpocząć wstawianie elementów na początku <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-159">The zero-based offset in <paramref name="items" /> at which to begin inserting elements onto the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span></param>
        <param name="count"><span data-ttu-id="38a0d-160">Liczba elementów, które ma zostać wstawiony na początku <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-160">The number of elements to be inserted onto the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span></param>
        <summary><span data-ttu-id="38a0d-161">Wstawia wiele obiektów w górnej części <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> niepodzielne.</span><span class="sxs-lookup"><span data-stu-id="38a0d-161">Inserts multiple objects at the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> atomically.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38a0d-162">Podczas dodawania wielu elementów na stos, za pomocą PushRange jest mechanizm bardziej wydajne niż przy użyciu <xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A> jeden element w danym momencie.</span><span class="sxs-lookup"><span data-stu-id="38a0d-162">When adding multiple items to the stack, using PushRange is a more efficient mechanism than using <xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A> one item at a time.</span></span> <span data-ttu-id="38a0d-163">Ponadto PushRange gwarantuje wszystkie elementy będą dodania niepodzielne, co oznacza, że nie ma innych wątków będzie można wstawić elementów między elementami wypychania.</span><span class="sxs-lookup"><span data-stu-id="38a0d-163">Additionally, PushRange guarantees that all of the elements will be added atomically, meaning that no other threads will be able to inject elements between the elements being pushed.</span></span> <span data-ttu-id="38a0d-164">Elementy na niższe indeksy w `items` tablicy będą wypychane przed elementami o wyższych indeksów.</span><span class="sxs-lookup"><span data-stu-id="38a0d-164">Items at lower indices in the `items` array will be pushed before items at higher indices.</span></span>  
  
 <span data-ttu-id="38a0d-165">Dla przykładu kodu zobacz <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span><span class="sxs-lookup"><span data-stu-id="38a0d-165">For a code example, see <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="38a0d-166"><paramref name="items" /> to odwołanie o wartości null (Nothing w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="38a0d-166"><paramref name="items" /> is a null reference (Nothing in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="38a0d-167"><paramref name="startIndex" /> lub <paramref name="count" /> jest ujemna.</span><span class="sxs-lookup"><span data-stu-id="38a0d-167"><paramref name="startIndex" /> or <paramref name="count" /> is negative.</span></span> <span data-ttu-id="38a0d-168">Lub <paramref name="startIndex" /> jest większa niż lub równa długości <paramref name="items" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-168">Or <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="items" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38a0d-169"><paramref name="startIndex" /> + <paramref name="count" /> jest większa niż długość <paramref name="items" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-169"><paramref name="startIndex" /> + <paramref name="count" /> is greater than the length of <paramref name="items" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-170">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-170">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryAdd">
      <MemberSignature Language="C#" Value="bool IProducerConsumerCollection&lt;T&gt;.TryAdd (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryAdd(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection&lt;T&gt;#TryAdd(`0)" />
      <MemberSignature Language="VB.NET" Value="Function TryAdd (item As T) As Boolean Implements IProducerConsumerCollection(Of T).TryAdd" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryAdd(T item) = System::Collections::Concurrent::IProducerConsumerCollection&lt;T&gt;::TryAdd;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="38a0d-171">Obiekt do dodania do <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-171">The object to add to the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span></span> <span data-ttu-id="38a0d-172">Wartość może być odwołaniem do wartości null (Nothing w języku Visual Basic) dla typów odwołań.</span><span class="sxs-lookup"><span data-stu-id="38a0d-172">The value can be a null reference (Nothing in Visual Basic) for reference types.</span></span></param>
        <summary><span data-ttu-id="38a0d-173">Podejmuje próbę dodania obiektu <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-173">Attempts to add an object to the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span></span></summary>
        <returns><span data-ttu-id="38a0d-174">wartość true, jeśli obiekt został dodany pomyślnie; w przeciwnym razie wartość false.</span><span class="sxs-lookup"><span data-stu-id="38a0d-174">true if the object was added successfully; otherwise, false.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38a0d-175">Aby uzyskać <xref:System.Collections.Concurrent.ConcurrentStack%601>, ta operacja wstawi zawsze obiektu w górnej części <xref:System.Collections.Concurrent.ConcurrentStack%601> i zwraca wartość true.</span><span class="sxs-lookup"><span data-stu-id="38a0d-175">For <xref:System.Collections.Concurrent.ConcurrentStack%601>, this operation will always insert the object onto the top of the <xref:System.Collections.Concurrent.ConcurrentStack%601> and return true.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-176">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-176">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryTake">
      <MemberSignature Language="C#" Value="bool IProducerConsumerCollection&lt;T&gt;.TryTake (out T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryTake([out] !T&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection&lt;T&gt;#TryTake(`0@)" />
      <MemberSignature Language="VB.NET" Value="Function TryTake (ByRef item As T) As Boolean Implements IProducerConsumerCollection(Of T).TryTake" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryTake([Runtime::InteropServices::Out] T % item) = System::Collections::Concurrent::IProducerConsumerCollection&lt;T&gt;::TryTake;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="38a0d-177">Gdy metoda zwróci wartość, jeśli operacja zakończyła się powodzeniem, <paramref name="item" /> zawiera obiekt, który został usunięty.</span><span class="sxs-lookup"><span data-stu-id="38a0d-177">When this method returns, if the operation was successful, <paramref name="item" /> contains the object removed.</span></span> <span data-ttu-id="38a0d-178">Jeśli żaden obiekt nie był dostępny do usunięcia, wartość jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="38a0d-178">If no object was available to be removed, the value is unspecified.</span></span></param>
        <summary><span data-ttu-id="38a0d-179">Próbuje usunąć i zwrócić obiekt z <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-179">Attempts to remove and return an object from the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span></span></summary>
        <returns><span data-ttu-id="38a0d-180">wartość true, jeśli element został usunięty i zwracany pomyślnie; w przeciwnym razie wartość false.</span><span class="sxs-lookup"><span data-stu-id="38a0d-180">true if an element was removed and returned succesfully; otherwise, false.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38a0d-181">Aby uzyskać <xref:System.Collections.Concurrent.ConcurrentStack%601>, ta operacja będzie podejmować próby pop obiektu w górnej części <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span><span class="sxs-lookup"><span data-stu-id="38a0d-181">For <xref:System.Collections.Concurrent.ConcurrentStack%601>, this operation will attempt to pop the object at the top of the <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-182">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-182">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="38a0d-183">Jednowymiarowy <see cref="T:System.Array" /> czyli miejscem docelowym elementów kopiowanych z <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-183">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span> <span data-ttu-id="38a0d-184"><see cref="T:System.Array" /> Musi mieć Indeksowanie oparte na zerze.</span><span class="sxs-lookup"><span data-stu-id="38a0d-184">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="38a0d-185">Liczony od zera indeks w <paramref name="array" /> od rozpoczyna się kopiowanie które.</span><span class="sxs-lookup"><span data-stu-id="38a0d-185">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="38a0d-186">Kopiuje elementy ze <see cref="T:System.Collections.ICollection" /> do <see cref="T:System.Array" />, rozpoczynając od określonego <see cref="T:System.Array" /> indeksu.</span><span class="sxs-lookup"><span data-stu-id="38a0d-186">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="38a0d-187"><paramref name="array" /> to odwołanie o wartości null (Nothing w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="38a0d-187"><paramref name="array" /> is a null reference (Nothing in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="38a0d-188"><paramref name="index" /> jest mniejsza niż zero.</span><span class="sxs-lookup"><span data-stu-id="38a0d-188"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38a0d-189"><paramref name="array" /> ma charakter wielowymiarowy.</span><span class="sxs-lookup"><span data-stu-id="38a0d-189"><paramref name="array" /> is multidimensional.</span></span> <span data-ttu-id="38a0d-190">- lub - <paramref name="array" /> ma indeksowania zaczynającego się od zera.</span><span class="sxs-lookup"><span data-stu-id="38a0d-190">-or- <paramref name="array" /> does not have zero-based indexing.</span></span> <span data-ttu-id="38a0d-191">- lub - <paramref name="index" /> jest równa lub większa niż długość <paramref name="array" /> - lub - liczba elementów w źródle <see cref="T:System.Collections.ICollection" /> jest większa niż dostępna ilość miejsca od <paramref name="index" /> do końca tablicy docelowej <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-191">-or- <paramref name="index" /> is equal to or greater than the length of the <paramref name="array" /> -or- The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span> <span data-ttu-id="38a0d-192">- lub - typ źródła <see cref="T:System.Collections.ICollection" /> nie można automatycznie rzutować na typ docelowy <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-192">-or- The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-193">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-193">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38a0d-194">Pobiera wartość wskazującą czy dostęp do <see cref="T:System.Collections.ICollection" /> jest zsynchronizowany z SyncRoot.</span><span class="sxs-lookup"><span data-stu-id="38a0d-194">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized with the SyncRoot.</span></span></summary>
        <value><span data-ttu-id="38a0d-195">Zawsze zwraca <see langword="false" /> do wskazania dostępu nie jest zsynchronizowany.</span><span class="sxs-lookup"><span data-stu-id="38a0d-195">Always returns <see langword="false" /> to indicate access is not synchronized.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38a0d-196">Pobiera obiekt, który może służyć do synchronizowania dostępu do <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-196">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="38a0d-197">Ta właściwość nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="38a0d-197">This property is not supported.</span></span></summary>
        <value><span data-ttu-id="38a0d-198">Zwraca wartość null (Nothing w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="38a0d-198">Returns null (Nothing in Visual Basic).</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="38a0d-199">Właściwość SyncRoot nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="38a0d-199">The SyncRoot property is not supported</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-200">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-200">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="38a0d-201">Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="38a0d-201">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="38a0d-202"><see cref="T:System.Collections.IEnumerator" /> Który może służyć do iterowania po kolekcji.</span><span class="sxs-lookup"><span data-stu-id="38a0d-202">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38a0d-203">Wyliczenie reprezentuje moment w czasie migawkę zawartość stosu.</span><span class="sxs-lookup"><span data-stu-id="38a0d-203">The enumeration represents a moment-in-time snapshot of the contents of the stack.</span></span> <span data-ttu-id="38a0d-204">Nie będzie odzwierciedlał wszelkie aktualizacje kolekcji po <xref:System.Collections.Concurrent.ConcurrentStack%601.GetEnumerator%2A> została wywołana.</span><span class="sxs-lookup"><span data-stu-id="38a0d-204">It does not reflect any updates to the collection after <xref:System.Collections.Concurrent.ConcurrentStack%601.GetEnumerator%2A> was called.</span></span> <span data-ttu-id="38a0d-205">Moduł wyliczający bezpiecznym rozwiązaniem jest użycie wątkom odczyty i zapisuje w stosie.</span><span class="sxs-lookup"><span data-stu-id="38a0d-205">The enumerator is safe to use concurrently with reads from and writes to the stack.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="abstract member ToArray : unit -&gt; 'T[]&#xA;override this.ToArray : unit -&gt; 'T[]" Usage="concurrentStack.ToArray " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="38a0d-206">Kopiuje elementy przechowywane w <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> do nowej tablicy.</span><span class="sxs-lookup"><span data-stu-id="38a0d-206">Copies the items stored in the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> to a new array.</span></span></summary>
        <returns><span data-ttu-id="38a0d-207">Nową tablicę zawierającą migawkę elementów kopiowanych z <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-207">A new array containing a snapshot of elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-208">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-208">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek :  -&gt; bool" Usage="concurrentStack.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="38a0d-209">Po powrocie z tej metody <paramref name="result" /> zawiera obiekt z góry <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> lub nieokreślona wartość, jeśli operacja nie powiodła się.</span><span class="sxs-lookup"><span data-stu-id="38a0d-209">When this method returns, <paramref name="result" /> contains an object from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> or an unspecified value if the operation failed.</span></span></param>
        <summary><span data-ttu-id="38a0d-210">Próbuje zwrócić obiekt od górnej krawędzi <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> bez usuwania go.</span><span class="sxs-lookup"><span data-stu-id="38a0d-210">Attempts to return an object from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> without removing it.</span></span></summary>
        <returns><span data-ttu-id="38a0d-211">wartość true, jeśli i Obiekt zwrócony został pomyślnie; w przeciwnym razie wartość false.</span><span class="sxs-lookup"><span data-stu-id="38a0d-211">true if and object was returned successfully; otherwise, false.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-212">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-212">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryPop">
      <MemberSignature Language="C#" Value="public bool TryPop (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPop([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPop (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPop([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPop :  -&gt; bool" Usage="concurrentStack.TryPop result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="38a0d-213">Gdy metoda zwróci wartość, jeśli operacja zakończyła się powodzeniem, <paramref name="result" /> zawiera obiekt, który został usunięty.</span><span class="sxs-lookup"><span data-stu-id="38a0d-213">When this method returns, if the operation was successful, <paramref name="result" /> contains the object removed.</span></span> <span data-ttu-id="38a0d-214">Jeśli żaden obiekt nie był dostępny do usunięcia, wartość jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="38a0d-214">If no object was available to be removed, the value is unspecified.</span></span></param>
        <summary><span data-ttu-id="38a0d-215">Podejmuje próbę pop i zwracaj obiekt w górnej części <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-215">Attempts to pop and return the object at the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span></summary>
        <returns><span data-ttu-id="38a0d-216">wartość true, jeśli element został usunięty i zwrócony z góry <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> pomyślnie; w przeciwnym razie wartość false.</span><span class="sxs-lookup"><span data-stu-id="38a0d-216">true if an element was removed and returned from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> successfully; otherwise, false.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38a0d-217">Dla przykładu kodu zobacz <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span><span class="sxs-lookup"><span data-stu-id="38a0d-217">For a code example, see <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryPopRange">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <remarks />
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-218">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-218">Thread-Safe Collections</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryPopRange">
      <MemberSignature Language="C#" Value="public int TryPopRange (T[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 TryPopRange(!T[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPopRange (items As T()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int TryPopRange(cli::array &lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.TryPopRange : 'T[] -&gt; int" Usage="concurrentStack.TryPopRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="38a0d-219"><see cref="T:System.Array" /> Na obiekty, które zdjęte ze stosu w górnej części <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> zostaną dodane.</span><span class="sxs-lookup"><span data-stu-id="38a0d-219">The <see cref="T:System.Array" /> to which objects popped from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> will be added.</span></span></param>
        <summary><span data-ttu-id="38a0d-220">Podejmuje próbę pop i zwracanie wielu obiektów z góry <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> niepodzielne.</span><span class="sxs-lookup"><span data-stu-id="38a0d-220">Attempts to pop and return multiple objects from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> atomically.</span></span></summary>
        <returns><span data-ttu-id="38a0d-221">Liczba obiektów pomyślnie zdjęte ze stosu w górnej części <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> i wstawiony w <paramref name="items" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-221">The number of objects successfully popped from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> and inserted in <paramref name="items" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38a0d-222">Gdy usuwanie wielu elementów, jeśli istnieje niewielkie rywalizacji o zasoby na stosie, za pomocą `TryPopRange` może być wydajniejsze niż używanie metody <xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A> jednorazowo dla każdego elementu do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="38a0d-222">When popping multiple items, if there is little contention on the stack, using `TryPopRange` can be more efficient than using <xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A> once per item to be removed.</span></span> <span data-ttu-id="38a0d-223">Wypełnienie węzłów `items` tablicy przy użyciu pierwszy element, aby zostać zdjęte ze stosu startIndex drugi element, aby zostać zdjęte ze stosu startIndex + 1 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="38a0d-223">Nodes fill the `items` array with the first item to be popped at the startIndex, the second item to be popped at startIndex + 1, and so on.</span></span>  
  
 <span data-ttu-id="38a0d-224">Dla przykładu kodu zobacz <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span><span class="sxs-lookup"><span data-stu-id="38a0d-224">For a code example, see <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="38a0d-225"><paramref name="items" /> jest argument o wartości null (Nothing w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="38a0d-225"><paramref name="items" /> is a null argument (Nothing in Visual Basic).</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-226">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-226">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryPopRange">
      <MemberSignature Language="C#" Value="public int TryPopRange (T[] items, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 TryPopRange(!T[] items, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPopRange (items As T(), startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int TryPopRange(cli::array &lt;T&gt; ^ items, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.TryPopRange : 'T[] * int * int -&gt; int" Usage="concurrentStack.TryPopRange (items, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="T[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="38a0d-227"><see cref="T:System.Array" /> Na obiekty, które zdjęte ze stosu w górnej części <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> zostaną dodane.</span><span class="sxs-lookup"><span data-stu-id="38a0d-227">The <see cref="T:System.Array" /> to which objects popped from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> will be added.</span></span></param>
        <param name="startIndex"><span data-ttu-id="38a0d-228">Przesunięcie od zera w <paramref name="items" /> od którego należy rozpocząć wstawianie elementów od górnej krawędzi <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-228">The zero-based offset in <paramref name="items" /> at which to begin inserting elements from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</span></span></param>
        <param name="count"><span data-ttu-id="38a0d-229">Liczba elementów, które mają zostać zdjęte ze stosu z góry <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> i wstawiony do <paramref name="items" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-229">The number of elements to be popped from top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> and inserted into <paramref name="items" />.</span></span></param>
        <summary><span data-ttu-id="38a0d-230">Podejmuje próbę pop i zwracanie wielu obiektów z góry <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> niepodzielne.</span><span class="sxs-lookup"><span data-stu-id="38a0d-230">Attempts to pop and return multiple objects from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> atomically.</span></span></summary>
        <returns><span data-ttu-id="38a0d-231">Liczba obiektów pomyślnie zdjęte ze stosu z góry stosu i wstawiać w <paramref name="items" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-231">The number of objects successfully popped from the top of the stack and inserted in <paramref name="items" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38a0d-232">Gdy usuwanie wielu elementów, jeśli istnieje niewielkie rywalizacji o zasoby na stosie, za pomocą TryPopRange może być wydajniejsze niż używanie metody <xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A> jednorazowo dla każdego elementu do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="38a0d-232">When popping multiple items, if there is little contention on the stack, using TryPopRange can be more efficient than using <xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A> once per item to be removed.</span></span> <span data-ttu-id="38a0d-233">Wypełnienie węzłów `items` tablicy przy użyciu pierwszy element, aby zostać zdjęte ze stosu startIndex drugi element, aby zostać zdjęte ze stosu startIndex + 1 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="38a0d-233">Nodes fill the `items` array with the first item to be popped at the startIndex, the second item to be popped at startIndex + 1, and so on.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="38a0d-234"><paramref name="items" /> to odwołanie o wartości null (Nothing w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="38a0d-234"><paramref name="items" /> is a null reference (Nothing in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="38a0d-235"><paramref name="startIndex" /> lub <paramref name="count" /> jest ujemna.</span><span class="sxs-lookup"><span data-stu-id="38a0d-235"><paramref name="startIndex" /> or <paramref name="count" /> is negative.</span></span> <span data-ttu-id="38a0d-236">Lub <paramref name="startIndex" /> jest większa niż lub równa długości <paramref name="items" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-236">Or <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="items" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38a0d-237"><paramref name="startIndex" /> + <paramref name="count" /> jest większa niż długość <paramref name="items" />.</span><span class="sxs-lookup"><span data-stu-id="38a0d-237"><paramref name="startIndex" /> + <paramref name="count" /> is greater than the length of <paramref name="items" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="38a0d-238">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="38a0d-238">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>