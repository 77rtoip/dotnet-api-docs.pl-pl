<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ConcurrentQueue`1.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac592d93820173a88b490f4ddc7494e6c9e4d136c0c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92d93820173a88b490f4ddc7494e6c9e4d136c0c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source>The type of the elements contained in the queue.</source>
          <target state="translated">Typ elementów znajdujących się w kolejce.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source>Represents a thread-safe first in-first out (FIFO) collection.</source>
          <target state="translated">Reprezentuje kolekcję pierwszy FIFO pierwszy wątkowo.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> implements the <ph id="ph2">&lt;xref:System.Collections.Generic.IReadOnlyCollection%601&gt;</ph> interface starting with the <ph id="ph3">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>; in previous versions of the .NET Framework, the <ph id="ph4">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> class did not implement this interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> implementuje <ph id="ph2">&lt;xref:System.Collections.Generic.IReadOnlyCollection%601&gt;</ph> interfejsu począwszy <ph id="ph3">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>; w poprzednich wersjach programu .NET Framework, <ph id="ph4">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> klasa nie implementuje interfejsu tego interfejsu.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> to enqueue and dequeue items:</source>
          <target state="translated">Poniższy przykład przedstawia użycie <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> można umieścić w kolejce i usuwania z kolejki elementów:</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads.</source>
          <target state="translated">Wszystkie publiczne i chronione elementy członkowskie <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> są wątkowo i mogą być używane jednocześnie wiele wątków.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection whose elements are copied to the new <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Kolekcja, której elementy są kopiowane do nowego <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> class that contains elements copied from the specified collection</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> klasy, który zawiera elementy skopiowane z określonej kolekcji</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;paramref name="collection" /&gt;</ph> argument is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> Argument ma wartość null.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from the <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Jednowymiarowa <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> który jest miejscem docelowym elementów kopiowanych z <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> Musi mieć indeksowania liczony od zera.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Liczony od zera indeks w <bpt id="p1">&lt;c&gt;</bpt>tablicy<ept id="p1">&lt;/c&gt;</ept> od rozpoczyna się kopiowanie które.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> elements to an existing one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified array index.</source>
          <target state="translated">Kopie <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> elementy do istniejącej jednowymiarowej tablicy <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, rozpoczynając od określonego indeksu tablicy.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> to odwołanie o wartości null (Nothing w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> jest mniejsza od zera.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than the length of the <ph id="ph2">&lt;paramref name="array" /&gt;</ph> -or- The number of elements in the source <ph id="ph3">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> is greater than the available space from <ph id="ph4">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph5">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> jest równa lub większa niż długość <ph id="ph2">&lt;paramref name="array" /&gt;</ph> - lub - liczba elementów w źródle <ph id="ph3">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> jest większa niż dostępne miejsce od <ph id="ph4">&lt;paramref name="index" /&gt;</ph> do końca tablicy docelowej <ph id="ph5">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Pobiera liczbę elementów zawartych w <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Liczba elementów zawartych w <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.Count">
          <source>For determining whether the collection contains any items, use of the <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A&gt;</ph> property is recommended rather than retrieving the number of items from the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A&gt;</ph> property and comparing it to 0.</source>
          <target state="translated">W celu określenia, czy kolekcja zawiera wszystkie elementy, użyj programu <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A&gt;</ph> zaleca się właściwość zamiast pobieranie liczby elementów z <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A&gt;</ph> właściwości i należy go porównać na 0.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)">
          <source>The object to add to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Obiekt do dodania na koniec <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)">
          <source>The value can be a null reference (Nothing in Visual Basic) for reference types.</source>
          <target state="translated">Wartość może być odwołanie o wartości null (Nothing w języku Visual Basic) dla typów odwołań.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)">
          <source>Adds an object to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Dodaje obiekt na koniec <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Zwraca moduł wyliczający, który iteruje po <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>An enumerator for the contents of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Moduł wyliczający dla zawartości <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>The enumeration represents a moment-in-time snapshot of the contents of the queue.</source>
          <target state="translated">Wyliczenie reprezentuje migawkę środowiska w momencie zawartość kolejki.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>It does not reflect any updates to the collection after <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.GetEnumerator%2A&gt;</ph> was called.</source>
          <target state="translated">Nie odzwierciedla żadnych aktualizacji do kolekcji po <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.GetEnumerator%2A&gt;</ph> została wywołana.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>The enumerator is safe to use concurrently with reads from and writes to the queue.</source>
          <target state="translated">Moduł wyliczający jest bezpiecznie korzystać równocześnie odczyty i zapisuje do kolejki.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>The enumerator returns the collection elements in the order in which they were added, which is FIFO order (first-in, first-out).</source>
          <target state="translated">Moduł wyliczający zwraca elementy kolekcji w kolejności, w jakiej zostały dodane, w której kolejności FIFO (pierwszy w, FIFO).</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> is empty.</source>
          <target state="translated">Pobiera wartość wskazującą, czy <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> jest pusta.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
          <source>true if the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> is empty; otherwise, false.</source>
          <target state="translated">wartość true, jeśli <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> jest pusty; w przeciwnym razie wartość false.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
          <source>For determining whether the collection contains any items, use of this property is recommended rather than retrieving the number of items from the <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A&gt;</ph> property and comparing it to 0.</source>
          <target state="translated">Określanie, czy kolekcja zawiera wszystkie elementy, zaleca się użycie tej właściwości, zamiast pobierania liczby elementów z <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A&gt;</ph> właściwości i należy go porównać na 0.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
          <source>However, as this collection is intended to be accessed concurrently, it may be the case that another thread will modify the collection after <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A&gt;</ph> returns, thus invalidating the result.</source>
          <target state="translated">Jednak jak ta kolekcja jest przeznaczona do można jednocześnie uzyskać dostęp, może być to inny wątek zmodyfikuje kolekcji po <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A&gt;</ph> zwraca, w związku z tym unieważnia wynik.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>The object to add to the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</source>
          <target state="translated">Obiekt do dodania do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>The value can be a null reference (Nothing in Visual Basic) for reference types.</source>
          <target state="translated">Wartość może być odwołanie o wartości null (Nothing w języku Visual Basic) dla typów odwołań.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>Attempts to add an object to the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</source>
          <target state="translated">Próbuje dodać obiektu do <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>true if the object was added successfully; otherwise, false.</source>
          <target state="translated">wartość true, jeśli obiekt został dodany pomyślnie; w przeciwnym razie wartość false.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>For <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>, this operation will always add the object to the end of the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> and return true.</source>
          <target state="translated">Aby uzyskać <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>, ta operacja doda zawsze obiekt na koniec <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> i zwraca wartość true.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>When this method returns, if the operation was successful, <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> contains the object removed.</source>
          <target state="translated">Gdy metoda zwróci wartość, jeśli operacja zakończyła się powodzeniem, <bpt id="p1">&lt;c&gt;</bpt>elementu<ept id="p1">&lt;/c&gt;</ept> zawiera usunięty obiekt.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>If no object was available to be removed, the value is unspecified.</source>
          <target state="translated">Jeśli obiekt nie był dostępny do usunięcia, wartość jest nieokreślony.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>Attempts to remove and return an object from the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</source>
          <target state="translated">Próbuje usunąć i zwracać obiekt z <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>true if an element was removed and returned succesfully; otherwise, false.</source>
          <target state="translated">wartość true, jeśli element został usunięty i zwrócona pomyślnie; w przeciwnym razie wartość false.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>For <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>, this operation will attempt to remove the object from the beginning of the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>.</source>
          <target state="translated">Aby uzyskać <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>, ta operacja podejmie próbę usunięcia obiektu od początku <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from the <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /&gt;</ph>.</source>
          <target state="translated">Jednowymiarowa <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> który jest miejscem docelowym elementów kopiowanych z <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> Musi mieć indeksowania liczony od zera.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Liczony od zera indeks w <bpt id="p1">&lt;c&gt;</bpt>tablicy<ept id="p1">&lt;/c&gt;</ept> od rozpoczyna się kopiowanie które.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">Kopiuje elementy <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> do <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, rozpoczynając od określonego <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> indeksu.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> to odwołanie o wartości null (Nothing w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> jest mniejsza od zera.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> jest wielowymiarowy.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or- <ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated">- lub - <ph id="ph1">&lt;paramref name="array" /&gt;</ph> nie ma indeksowania liczony od zera.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or- <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than the length of the <ph id="ph2">&lt;paramref name="array" /&gt;</ph> -or- The number of elements in the source <ph id="ph3">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph4">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph5">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">- lub - <ph id="ph1">&lt;paramref name="index" /&gt;</ph> jest równa lub większa niż długość <ph id="ph2">&lt;paramref name="array" /&gt;</ph> - lub - liczba elementów w źródle <ph id="ph3">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> jest większa niż dostępne miejsce od <ph id="ph4">&lt;paramref name="index" /&gt;</ph> do końca tablicy docelowej <ph id="ph5">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or- The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">- lub - typ źródła <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> nie można automatycznie rzutować na typ docelowy <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized with the SyncRoot.</source>
          <target state="translated">Pobiera wartość wskazującą czy uzyskują dostęp do <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> jest zsynchronizowany z SyncRoot.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized">
          <source>true if access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized with the SyncRoot; otherwise, false.</source>
          <target state="translated">wartość true, jeśli dostęp do <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> jest synchronizowana z SyncRoot; w przeciwnym razie wartość false.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized">
          <source>For <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>, this property always returns false.</source>
          <target state="translated">Aby uzyskać <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>, ta właściwość zawsze zwraca wartość false.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Pobiera obiekt, który może służyć do synchronizujący dostęp do <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
          <source>This property is not supported.</source>
          <target state="translated">Ta właściwość nie jest obsługiwana.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
          <source>Returns null  (Nothing in Visual Basic).</source>
          <target state="translated">Zwraca wartość null (Nothing w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
          <source>The SyncRoot property is not supported.</source>
          <target state="translated">Właściwości SyncRoot nie jest obsługiwane.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> Który może służyć do iterowania po kolekcji.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.ToArray">
          <source>Copies the elements stored in the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> to a new array.</source>
          <target state="translated">Kopiuje elementy przechowywane w <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> do nowej tablicy.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.ToArray">
          <source>A new array containing a snapshot of elements copied from the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">Nowej tablicy zawierający migawkę elementów kopiowanych z <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>When this method returns, if the operation was successful, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains the object removed.</source>
          <target state="translated">Gdy metoda zwróci wartość, jeśli operacja zakończyła się powodzeniem, <bpt id="p1">&lt;c&gt;</bpt>wynik<ept id="p1">&lt;/c&gt;</ept> zawiera usunięty obiekt.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>If no object was available to be removed, the value is unspecified.</source>
          <target state="translated">Jeśli obiekt nie był dostępny do usunięcia, wartość jest nieokreślony.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>Tries to remove and return the object at the beginning of the concurrent queue.</source>
          <target state="translated">Próbuje usunąć i zwrócić obiekt na początku równoczesnych kolejki.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an element was removed and returned from the beginning of the <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> successfully; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli element został usunięty i zwrócony z początku <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> pomyślnie; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> handles all synchronization internally.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> wewnętrznie obsługuje wszystkie synchronizacji.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>If two threads call <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph> at precisely the same moment, neither operation is blocked.</source>
          <target state="translated">Jeśli dwa wątki wywołania <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph> dokładnie tego samego obecnie żadna operacja została zablokowana.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>When a conflict is detected between two threads, one thread has to try again to retrieve the next element, and the synchronization is handled internally.</source>
          <target state="translated">Po wykryciu konflikt między dwoma wątkami ma jeden wątek spróbować ponownie pobrać następnego elementu, a synchronizacja jest obsługiwany wewnętrznie.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph> tries to remove an element from the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph> próbuje usunąć element z kolejki.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>If the method is successful, the item is removed and the method returns <ph id="ph1">`true`</ph>; otherwise, it returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Jeśli metoda zakończy się pomyślnie, element zostanie usunięty i metoda zwraca <ph id="ph1">`true`</ph>; w przeciwnym razie zwraca <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>That happens atomically with respect to other operations on the queue.</source>
          <target state="translated">Ma to miejsce atomowo względem innych operacji w kolejce.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>If the queue was populated with code such as <ph id="ph1">`q.Enqueue("a"); q.Enqueue("b"); q.Enqueue("c");`</ph> and two threads concurrently try to dequeue an element, one thread will dequeue <ph id="ph2">`a`</ph> and the other thread will dequeue <ph id="ph3">`b`</ph>.</source>
          <target state="translated">Jeśli kolejka został wypełniony z kodem, takich jak <ph id="ph1">`q.Enqueue("a"); q.Enqueue("b"); q.Enqueue("c");`</ph> i dwóch wątków próbuje jednocześnie usuwania z kolejki elementu, jeden wątek zostanie usuwania z kolejki <ph id="ph2">`a`</ph> i innych wątków będzie usuwania z kolejki <ph id="ph3">`b`</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>Both calls to <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph> will return <ph id="ph2">`true`</ph>, because they were both able to dequeue an element.</source>
          <target state="translated">Oba wywołania <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph> zwróci <ph id="ph2">`true`</ph>, ponieważ były jednocześnie możliwość usuwania z kolejki elementu.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>If each thread goes back to dequeue an additional element, one of the threads will dequeue <ph id="ph1">`c`</ph> and return <ph id="ph2">`true`</ph>, whereas the other thread will find the queue empty and will return <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Jeśli każdy wątek wraca do usuwania z kolejki dodatkowy element, jeden z wątków będzie usuwania z kolejki <ph id="ph1">`c`</ph> i zwracać <ph id="ph2">`true`</ph>, podczas gdy innego wątku znajdzie kolejki pusta i zwraca <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)">
          <source>When this method returns, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains an object from the beginning of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> or an unspecified value if the operation failed.</source>
          <target state="translated">Gdy metoda zwróci wartość, <bpt id="p1">&lt;c&gt;</bpt>wynik<ept id="p1">&lt;/c&gt;</ept> zawiera obiekt, od początku <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> lub nieokreślona wartość, jeśli operacja nie powiodła się.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)">
          <source>Tries to return an object from the beginning of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> without removing it.</source>
          <target state="translated">Próbuje przywrócić obiekt od początku <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> bez usuwania go.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an object was returned successfully; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli obiekt został zwrócony pomyślnie; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>