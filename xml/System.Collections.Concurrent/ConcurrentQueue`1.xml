<Type Name="ConcurrentQueue&lt;T&gt;" FullName="System.Collections.Concurrent.ConcurrentQueue&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e642bb69bfb48b6a58d54156c2d4772336d73655" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58555117" /></Metadata><TypeSignature Language="C#" Value="public class ConcurrentQueue&lt;T&gt; : System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ConcurrentQueue`1&lt;T&gt; extends System.Object implements class System.Collections.Concurrent.IProducerConsumerCollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Concurrent.ConcurrentQueue`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ConcurrentQueue(Of T)&#xA;Implements IEnumerable(Of T), IProducerConsumerCollection(Of T), IReadOnlyCollection(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ConcurrentQueue : System::Collections::Concurrent::IProducerConsumerCollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ConcurrentQueue&lt;'T&gt; = class&#xA;    interface IProducerConsumerCollection&lt;'T&gt;&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Concurrent</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.14.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Concurrent.SystemCollectionsConcurrent_ProducerConsumerCollectionDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="50962-101">Typ elementów znajdujących się w kolejce.</span><span class="sxs-lookup"><span data-stu-id="50962-101">The type of the elements contained in the queue.</span></span></typeparam>
    <summary><span data-ttu-id="50962-102">Reprezentuje kolekcję pierwszy FIFO pierwszą metodą o bezpiecznych wątkach.</span><span class="sxs-lookup"><span data-stu-id="50962-102">Represents a thread-safe first in-first out (FIFO) collection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="50962-103"><xref:System.Collections.Concurrent.ConcurrentQueue%601> implementuje <xref:System.Collections.Generic.IReadOnlyCollection%601> interfejsu, począwszy od [!INCLUDE[net_v46](~/includes/net-v46-md.md)]; w poprzednich wersjach programu .NET Framework, <xref:System.Collections.Concurrent.ConcurrentQueue%601> klasa nie implementuje ten interfejs.</span><span class="sxs-lookup"><span data-stu-id="50962-103"><xref:System.Collections.Concurrent.ConcurrentQueue%601> implements the <xref:System.Collections.Generic.IReadOnlyCollection%601> interface starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)]; in previous versions of the .NET Framework, the <xref:System.Collections.Concurrent.ConcurrentQueue%601> class did not implement this interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50962-104">Poniższy przykład pokazuje, jak używać <xref:System.Collections.Concurrent.ConcurrentQueue%601> można umieścić w kolejce i pobierać elementy:</span><span class="sxs-lookup"><span data-stu-id="50962-104">The following example shows how to use a <xref:System.Collections.Concurrent.ConcurrentQueue%601> to enqueue and dequeue items:</span></span>  
  
 [!code-csharp[System.Collections.Concurrent.ConcurrentQueue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.concurrentqueue/cs/concqueue.cs#1)]
 [!code-vb[System.Collections.Concurrent.ConcurrentQueue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.concurrentqueue/vb/concqueue.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="50962-105">Wszystkie publiczne i chronione elementy członkowskie <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> są odporne na wątki i mogą być używane jednocześnie z wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="50962-105">All public and protected members of <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="50962-106">Inicjuje nowe wystąpienie klasy <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="50962-106">Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> class.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-107">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-107">Thread-Safe Collections</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConcurrentQueue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConcurrentQueue();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="50962-108">Inicjuje nowe wystąpienie klasy <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="50962-108">Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-109">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-109">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConcurrentQueue (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConcurrentQueue(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Concurrent.ConcurrentQueue&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Concurrent.ConcurrentQueue&lt;'T&gt;" Usage="new System.Collections.Concurrent.ConcurrentQueue&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection"><span data-ttu-id="50962-110">Kolekcja, której elementy są kopiowane do nowego <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="50962-110">The collection whose elements are copied to the new <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></param>
        <summary><span data-ttu-id="50962-111">Inicjuje nowe wystąpienie klasy <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> klasy, która zawiera elementy kopiowane z określonej kolekcji</span><span class="sxs-lookup"><span data-stu-id="50962-111">Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> class that contains elements copied from the specified collection</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="50962-112"><paramref name="collection" /> Argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="50962-112">The <paramref name="collection" /> argument is null.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-113">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-113">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="concurrentQueue.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;T&gt; ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'T[] * int -&gt; unit&#xA;override this.CopyTo : 'T[] * int -&gt; unit" Usage="concurrentQueue.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="50962-114">Jednowymiarowy <see cref="T:System.Array" /> czyli miejscem docelowym elementów kopiowanych z <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="50962-114">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span> <span data-ttu-id="50962-115"><see cref="T:System.Array" /> Musi mieć Indeksowanie oparte na zerze.</span><span class="sxs-lookup"><span data-stu-id="50962-115">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="50962-116">Liczony od zera indeks w <paramref name="array" /> od rozpoczyna się kopiowanie które.</span><span class="sxs-lookup"><span data-stu-id="50962-116">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="50962-117">Kopiuje <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> elementy do istniejącej jednowymiarowej <see cref="T:System.Array" />, rozpoczynając od określonego indeksu tablicy.</span><span class="sxs-lookup"><span data-stu-id="50962-117">Copies the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="50962-118"><paramref name="array" /> to odwołanie o wartości null (Nothing w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="50962-118"><paramref name="array" /> is a null reference (Nothing in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="50962-119"><paramref name="index" /> jest mniejsza niż zero.</span><span class="sxs-lookup"><span data-stu-id="50962-119"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="50962-120"><paramref name="index" /> jest równa lub większa niż długość <paramref name="array" /> - lub - liczba elementów w źródle <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> jest większa niż dostępna ilość miejsca od <paramref name="index" /> do końca tablicy docelowej <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="50962-120"><paramref name="index" /> is equal to or greater than the length of the <paramref name="array" /> -or- The number of elements in the source <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-121">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-121">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.ConcurrentQueue`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Concurrent.ConcurrentQueue&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="50962-122">Pobiera liczbę elementów znajdujących się w <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="50962-122">Gets the number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></summary>
        <value><span data-ttu-id="50962-123">Liczba elementów zawartych w słowniku <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="50962-123">The number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50962-124">W celu określenia, czy kolekcja zawiera wszystkie elementy, użytkowania <xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A> zaleca się właściwości zamiast pobieranie liczby elementów z <xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A> właściwość i porównanie go na wartość 0.</span><span class="sxs-lookup"><span data-stu-id="50962-124">For determining whether the collection contains any items, use of the <xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A> property is recommended rather than retrieving the number of items from the <xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A> property and comparing it to 0.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-125">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-125">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public void Enqueue (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enqueue(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enqueue (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enqueue(T item);" />
      <MemberSignature Language="F#" Value="member this.Enqueue : 'T -&gt; unit" Usage="concurrentQueue.Enqueue item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="50962-126">Obiekt do dodania na koniec <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="50962-126">The object to add to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span> <span data-ttu-id="50962-127">Wartość może być odwołaniem do wartości null (Nothing w języku Visual Basic) dla typów odwołań.</span><span class="sxs-lookup"><span data-stu-id="50962-127">The value can be a null reference (Nothing in Visual Basic) for reference types.</span></span></param>
        <summary><span data-ttu-id="50962-128">Dodaje obiekt na koniec <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="50962-128">Adds an object to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-129">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-129">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="concurrentQueue.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="50962-130">Zwraca moduł wyliczający, który iteruje po <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="50962-130">Returns an enumerator that iterates through the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></summary>
        <returns><span data-ttu-id="50962-131">Moduł wyliczający dla zawartości <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="50962-131">An enumerator for the contents of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50962-132">Wyliczenie reprezentuje moment w czasie migawkę zawartość kolejki.</span><span class="sxs-lookup"><span data-stu-id="50962-132">The enumeration represents a moment-in-time snapshot of the contents of the queue.</span></span> <span data-ttu-id="50962-133">Nie będzie odzwierciedlał wszelkie aktualizacje kolekcji po <xref:System.Collections.Concurrent.ConcurrentQueue%601.GetEnumerator%2A> została wywołana.</span><span class="sxs-lookup"><span data-stu-id="50962-133">It does not reflect any updates to the collection after <xref:System.Collections.Concurrent.ConcurrentQueue%601.GetEnumerator%2A> was called.</span></span> <span data-ttu-id="50962-134">Moduł wyliczający bezpiecznym rozwiązaniem jest użycie wątkom odczyty i zapisuje do kolejki.</span><span class="sxs-lookup"><span data-stu-id="50962-134">The enumerator is safe to use concurrently with reads from and writes to the queue.</span></span>  
  
 <span data-ttu-id="50962-135">Moduł wyliczający zwraca elementy kolekcji, w kolejności, w jakiej zostały dodane, czyli kolejność FIFO (pierwszy in, first-out).</span><span class="sxs-lookup"><span data-stu-id="50962-135">The enumerator returns the collection elements in the order in which they were added, which is FIFO order (first-in, first-out).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-136">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-136">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Collections.Concurrent.ConcurrentQueue&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="50962-137">Pobiera wartość wskazującą, czy <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> jest pusty.</span><span class="sxs-lookup"><span data-stu-id="50962-137">Gets a value that indicates whether the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> is empty.</span></span></summary>
        <value><span data-ttu-id="50962-138"><see langword="true" /> Jeśli <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> jest pusty; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="50962-138"><see langword="true" /> if the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50962-139">Określanie, czy kolekcja zawiera wszystkie elementy, zaleca się użycie tej właściwości, a nie podczas pobierania liczby elementów z <xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A> właściwość i porównanie go na wartość 0.</span><span class="sxs-lookup"><span data-stu-id="50962-139">For determining whether the collection contains any items, use of this property is recommended rather than retrieving the number of items from the <xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A> property and comparing it to 0.</span></span> <span data-ttu-id="50962-140">Jednak ponieważ ta kolekcja ma być uzyskiwany współbieżnie, może być przypadek, który inny wątek zmodyfikuje kolekcji po <xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A> zwraca, w tym samym unieważniając wynik.</span><span class="sxs-lookup"><span data-stu-id="50962-140">However, as this collection is intended to be accessed concurrently, it may be the case that another thread will modify the collection after <xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A> returns, thus invalidating the result.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-141">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-141">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryAdd">
      <MemberSignature Language="C#" Value="bool IProducerConsumerCollection&lt;T&gt;.TryAdd (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryAdd(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&lt;T&gt;#TryAdd(`0)" />
      <MemberSignature Language="VB.NET" Value="Function TryAdd (item As T) As Boolean Implements IProducerConsumerCollection(Of T).TryAdd" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryAdd(T item) = System::Collections::Concurrent::IProducerConsumerCollection&lt;T&gt;::TryAdd;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="50962-142">Obiekt do dodania do <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span><span class="sxs-lookup"><span data-stu-id="50962-142">The object to add to the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span></span> <span data-ttu-id="50962-143">Wartość może być odwołaniem do wartości null (Nothing w języku Visual Basic) dla typów odwołań.</span><span class="sxs-lookup"><span data-stu-id="50962-143">The value can be a null reference (Nothing in Visual Basic) for reference types.</span></span></param>
        <summary><span data-ttu-id="50962-144">Podejmuje próbę dodania obiektu <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span><span class="sxs-lookup"><span data-stu-id="50962-144">Attempts to add an object to the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span></span></summary>
        <returns><span data-ttu-id="50962-145">wartość true, jeśli obiekt został dodany pomyślnie; w przeciwnym razie wartość false.</span><span class="sxs-lookup"><span data-stu-id="50962-145">true if the object was added successfully; otherwise, false.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50962-146">Aby uzyskać <xref:System.Collections.Concurrent.ConcurrentQueue%601>, ta operacja będzie zawsze dodać obiekt do końca <xref:System.Collections.Concurrent.ConcurrentQueue%601> i zwraca wartość true.</span><span class="sxs-lookup"><span data-stu-id="50962-146">For <xref:System.Collections.Concurrent.ConcurrentQueue%601>, this operation will always add the object to the end of the <xref:System.Collections.Concurrent.ConcurrentQueue%601> and return true.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-147">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-147">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryTake">
      <MemberSignature Language="C#" Value="bool IProducerConsumerCollection&lt;T&gt;.TryTake (out T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryTake([out] !T&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&lt;T&gt;#TryTake(`0@)" />
      <MemberSignature Language="VB.NET" Value="Function TryTake (ByRef item As T) As Boolean Implements IProducerConsumerCollection(Of T).TryTake" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryTake([Runtime::InteropServices::Out] T % item) = System::Collections::Concurrent::IProducerConsumerCollection&lt;T&gt;::TryTake;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="50962-148">Gdy metoda zwróci wartość, jeśli operacja zakończyła się powodzeniem, <paramref name="item" /> zawiera obiekt, który został usunięty.</span><span class="sxs-lookup"><span data-stu-id="50962-148">When this method returns, if the operation was successful, <paramref name="item" /> contains the object removed.</span></span> <span data-ttu-id="50962-149">Jeśli żaden obiekt nie był dostępny do usunięcia, wartość jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="50962-149">If no object was available to be removed, the value is unspecified.</span></span></param>
        <summary><span data-ttu-id="50962-150">Próbuje usunąć i zwrócić obiekt z <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span><span class="sxs-lookup"><span data-stu-id="50962-150">Attempts to remove and return an object from the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span></span></summary>
        <returns><span data-ttu-id="50962-151">wartość true, jeśli element został usunięty i pomyślnie; zwrócił w przeciwnym razie wartość false.</span><span class="sxs-lookup"><span data-stu-id="50962-151">true if an element was removed and returned successfully; otherwise, false.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50962-152">Aby uzyskać <xref:System.Collections.Concurrent.ConcurrentQueue%601>, ta operacja będzie próbował usunąć obiekt z początku <xref:System.Collections.Concurrent.ConcurrentQueue%601>.</span><span class="sxs-lookup"><span data-stu-id="50962-152">For <xref:System.Collections.Concurrent.ConcurrentQueue%601>, this operation will attempt to remove the object from the beginning of the <xref:System.Collections.Concurrent.ConcurrentQueue%601>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-153">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-153">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="50962-154">Jednowymiarowy <see cref="T:System.Array" /> czyli miejscem docelowym elementów kopiowanych z <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</span><span class="sxs-lookup"><span data-stu-id="50962-154">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</span></span> <span data-ttu-id="50962-155"><see cref="T:System.Array" /> Musi mieć Indeksowanie oparte na zerze.</span><span class="sxs-lookup"><span data-stu-id="50962-155">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="50962-156">Liczony od zera indeks w <paramref name="array" /> od rozpoczyna się kopiowanie które.</span><span class="sxs-lookup"><span data-stu-id="50962-156">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="50962-157">Kopiuje elementy ze <see cref="T:System.Collections.ICollection" /> do <see cref="T:System.Array" />, rozpoczynając od określonego <see cref="T:System.Array" /> indeksu.</span><span class="sxs-lookup"><span data-stu-id="50962-157">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="50962-158"><paramref name="array" /> to odwołanie o wartości null (Nothing w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="50962-158"><paramref name="array" /> is a null reference (Nothing in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="50962-159"><paramref name="index" /> jest mniejsza niż zero.</span><span class="sxs-lookup"><span data-stu-id="50962-159"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="50962-160"><paramref name="array" /> ma charakter wielowymiarowy.</span><span class="sxs-lookup"><span data-stu-id="50962-160"><paramref name="array" /> is multidimensional.</span></span> <span data-ttu-id="50962-161">- lub - <paramref name="array" /> ma indeksowania zaczynającego się od zera.</span><span class="sxs-lookup"><span data-stu-id="50962-161">-or- <paramref name="array" /> does not have zero-based indexing.</span></span> <span data-ttu-id="50962-162">- lub - <paramref name="index" /> jest równa lub większa niż długość <paramref name="array" /> - lub - liczba elementów w źródle <see cref="T:System.Collections.ICollection" /> jest większa niż dostępna ilość miejsca od <paramref name="index" /> do końca tablicy docelowej <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="50962-162">-or- <paramref name="index" /> is equal to or greater than the length of the <paramref name="array" /> -or- The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span> <span data-ttu-id="50962-163">- lub - typ źródła <see cref="T:System.Collections.ICollection" /> nie można automatycznie rzutować na typ docelowy <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="50962-163">-or- The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-164">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-164">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="50962-165">Pobiera wartość wskazującą czy dostęp do <see cref="T:System.Collections.ICollection" /> jest zsynchronizowany z SyncRoot.</span><span class="sxs-lookup"><span data-stu-id="50962-165">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized with the SyncRoot.</span></span></summary>
        <value><span data-ttu-id="50962-166">Zawsze zwraca <see langword="false" /> do wskazania dostępu nie jest zsynchronizowany.</span><span class="sxs-lookup"><span data-stu-id="50962-166">Always returns <see langword="false" /> to indicate access is not synchronized.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-167">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-167">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="50962-168">Pobiera obiekt, który może służyć do synchronizowania dostępu do <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="50962-168">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="50962-169">Ta właściwość nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="50962-169">This property is not supported.</span></span></summary>
        <value><span data-ttu-id="50962-170">Zwraca wartość null (Nothing w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="50962-170">Returns null  (Nothing in Visual Basic).</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="50962-171">Właściwość SyncRoot nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="50962-171">The SyncRoot property is not supported.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-172">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-172">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="50962-173">Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="50962-173">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="50962-174"><see cref="T:System.Collections.IEnumerator" /> Który może służyć do iterowania po kolekcji.</span><span class="sxs-lookup"><span data-stu-id="50962-174">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-175">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-175">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="abstract member ToArray : unit -&gt; 'T[]&#xA;override this.ToArray : unit -&gt; 'T[]" Usage="concurrentQueue.ToArray " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="50962-176">Kopiuje elementy przechowywane w <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> do nowej tablicy.</span><span class="sxs-lookup"><span data-stu-id="50962-176">Copies the elements stored in the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> to a new array.</span></span></summary>
        <returns><span data-ttu-id="50962-177">Nową tablicę zawierającą migawkę elementów kopiowanych z <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="50962-177">A new array containing a snapshot of elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-178">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-178">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryDequeue">
      <MemberSignature Language="C#" Value="public bool TryDequeue (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryDequeue([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryDequeue (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryDequeue([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryDequeue :  -&gt; bool" Usage="concurrentQueue.TryDequeue result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="50962-179">Gdy metoda zwróci wartość, jeśli operacja zakończyła się powodzeniem, <paramref name="result" /> zawiera obiekt, który został usunięty.</span><span class="sxs-lookup"><span data-stu-id="50962-179">When this method returns, if the operation was successful, <paramref name="result" /> contains the object removed.</span></span> <span data-ttu-id="50962-180">Jeśli żaden obiekt nie był dostępny do usunięcia, wartość jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="50962-180">If no object was available to be removed, the value is unspecified.</span></span></param>
        <summary><span data-ttu-id="50962-181">Próbuje usunąć i zwrócić obiekt na początku kolejka współbieżna.</span><span class="sxs-lookup"><span data-stu-id="50962-181">Tries to remove and return the object at the beginning of the concurrent queue.</span></span></summary>
        <returns><span data-ttu-id="50962-182"><see langword="true" /> Jeśli element zostało usunięte i zwrócony z początku <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> pomyślnie; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="50962-182"><see langword="true" /> if an element was removed and returned from the beginning of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50962-183"><xref:System.Collections.Concurrent.ConcurrentQueue%601> wewnętrznie obsługuje synchronizację.</span><span class="sxs-lookup"><span data-stu-id="50962-183"><xref:System.Collections.Concurrent.ConcurrentQueue%601> handles all synchronization internally.</span></span> <span data-ttu-id="50962-184">Jeśli dwa wątki wywołanie <xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A> dokładnie tych samych obecnie żadna operacja została zablokowana.</span><span class="sxs-lookup"><span data-stu-id="50962-184">If two threads call <xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A> at precisely the same moment, neither operation is blocked.</span></span> <span data-ttu-id="50962-185">Po wykryciu konflikt między dwoma wątkami, ma jeden wątek spróbować ponownie pobrać następny element, a synchronizacja odbywa się wewnętrznie.</span><span class="sxs-lookup"><span data-stu-id="50962-185">When a conflict is detected between two threads, one thread has to try again to retrieve the next element, and the synchronization is handled internally.</span></span>  
  
 <span data-ttu-id="50962-186"><xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A> podejmie próbę usunięcia elementu z kolejki.</span><span class="sxs-lookup"><span data-stu-id="50962-186"><xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A> tries to remove an element from the queue.</span></span> <span data-ttu-id="50962-187">Jeśli metoda zakończy się pomyślnie, element zostanie usunięty, a metoda zwraca `true`; w przeciwnym razie zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="50962-187">If the method is successful, the item is removed and the method returns `true`; otherwise, it returns `false`.</span></span> <span data-ttu-id="50962-188">Ma to miejsce niepodzielne względem innych operacji w kolejce.</span><span class="sxs-lookup"><span data-stu-id="50962-188">That happens atomically with respect to other operations on the queue.</span></span> <span data-ttu-id="50962-189">Jeśli kolejka została wypełniona przy użyciu kodu takich jak `q.Enqueue("a"); q.Enqueue("b"); q.Enqueue("c");` i dwoma wątkami jednocześnie wypróbować jej możliwości do usuwania z kolejki elementu, jeden wątek będzie pobierać `a` i innego wątku będą pobierać `b`.</span><span class="sxs-lookup"><span data-stu-id="50962-189">If the queue was populated with code such as `q.Enqueue("a"); q.Enqueue("b"); q.Enqueue("c");` and two threads concurrently try to dequeue an element, one thread will dequeue `a` and the other thread will dequeue `b`.</span></span> <span data-ttu-id="50962-190">Oba wywołania <xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A> zwróci `true`, ponieważ były one zarówno możliwość usuwania z kolejki elementu.</span><span class="sxs-lookup"><span data-stu-id="50962-190">Both calls to <xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A> will return `true`, because they were both able to dequeue an element.</span></span> <span data-ttu-id="50962-191">Jeśli każdy wątek powraca do usuwania z kolejki dodatkowy element, jeden z wątków będzie usuwania z kolejki `c` i zwracają `true`, podczas gdy znajdzie kolejki pustą innego wątku i zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="50962-191">If each thread goes back to dequeue an additional element, one of the threads will dequeue `c` and return `true`, whereas the other thread will find the queue empty and will return `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-192">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-192">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek :  -&gt; bool" Usage="concurrentQueue.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="50962-193">Po powrocie z tej metody <paramref name="result" /> zawiera obiekt od początku <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> lub nieokreślona wartość, jeśli operacja nie powiodła się.</span><span class="sxs-lookup"><span data-stu-id="50962-193">When this method returns, <paramref name="result" /> contains an object from the beginning of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> or an unspecified value if the operation failed.</span></span></param>
        <summary><span data-ttu-id="50962-194">Próbuje zwrócić obiekt od początku <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> bez usuwania go.</span><span class="sxs-lookup"><span data-stu-id="50962-194">Tries to return an object from the beginning of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> without removing it.</span></span></summary>
        <returns><span data-ttu-id="50962-195"><see langword="true" /> Jeśli obiekt został zwrócony pomyślnie; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="50962-195"><see langword="true" /> if an object was returned successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="50962-196">Kolekcje bezpieczne wątkowo</span><span class="sxs-lookup"><span data-stu-id="50962-196">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>