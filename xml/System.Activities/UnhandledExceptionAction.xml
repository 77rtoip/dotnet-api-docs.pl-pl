<Type Name="UnhandledExceptionAction" FullName="System.Activities.UnhandledExceptionAction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="070ae82d795d2b3a920f23bb6d8e67539cdf87c2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30436968" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum UnhandledExceptionAction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed UnhandledExceptionAction extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Activities.UnhandledExceptionAction" />
  <TypeSignature Language="VB.NET" Value="Public Enum UnhandledExceptionAction" />
  <TypeSignature Language="C++ CLI" Value="public enum class UnhandledExceptionAction" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Określa akcję wykonywaną, gdy wyjątek specjalne głównego przepływu pracy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> Funkcja jest wywoływana, jeśli wyjątek specjalne głównego przepływu pracy. <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> Zapewnia dostęp do wyjątku, a także wskaźnik do <xref:System.Activities.Activity> który wygenerowany wyjątek. Przerwanie jest domyślną akcję, jeśli nie <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> określono obsługi.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy, który zgłasza wyjątek. Wyjątek jest nieobsługiwany przez przepływ pracy i <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> obsługi jest wywoływany. <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> Są kontrolowane w celu podania informacji o wyjątku, a przepływ pracy zostanie zakończony.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#6](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="Abort" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Activities.UnhandledExceptionAction Abort = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Activities.UnhandledExceptionAction.Abort" />
      <MemberSignature Language="VB.NET" Value="Abort" />
      <MemberSignature Language="C++ CLI" Value="Abort" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.UnhandledExceptionAction</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Określa, że <see cref="T:System.Activities.WorkflowApplication" /> należy przerwać przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powoduje to <xref:System.Activities.WorkflowApplication.Aborted%2A> wywoływana po zakończeniu procesu przerwania. Nieobsługiwany wyjątek jest używany jako z powodu przerwania.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy, który zgłasza wyjątek. Wyjątek jest nieobsługiwany przez przepływ pracy i <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> obsługi jest wywoływany. <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> Są kontrolowane w celu podania informacji o wyjątku, a przepływ pracy został przerwany.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#7](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="Cancel" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Activities.UnhandledExceptionAction Cancel = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Activities.UnhandledExceptionAction.Cancel" />
      <MemberSignature Language="VB.NET" Value="Cancel" />
      <MemberSignature Language="C++ CLI" Value="Cancel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.UnhandledExceptionAction</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Określa, że <see cref="T:System.Activities.WorkflowApplication" /> należy zaplanować anulowania działania głównego i wznowić wykonywanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powoduje to <xref:System.Activities.WorkflowApplication.Completed%2A> wywoływana po zakończeniu procesu anulowania.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy, który zgłasza wyjątek. Wyjątek jest nieobsługiwany przez przepływ pracy i <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> obsługi jest wywoływany. <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> Są kontrolowane w celu podania informacji o wyjątku, i przepływu pracy zostało anulowane.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#8](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Terminate">
      <MemberSignature Language="C#" Value="Terminate" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Activities.UnhandledExceptionAction Terminate = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Activities.UnhandledExceptionAction.Terminate" />
      <MemberSignature Language="VB.NET" Value="Terminate" />
      <MemberSignature Language="C++ CLI" Value="Terminate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.UnhandledExceptionAction</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Określa, że <see cref="T:System.Activities.WorkflowApplication" /> należy zaplanować przerwanie działania głównego i wznowić wykonywanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powoduje to <xref:System.Activities.WorkflowApplication.Completed%2A> wywoływana po zakończeniu procesu zakończenia. Nieobsługiwany wyjątek jest używany jako z powodu zakończenia. Przerwanie jest domyślną akcję, jeśli nie <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> określono obsługi.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy, który zgłasza wyjątek. Wyjątek jest nieobsługiwany przez przepływ pracy i <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> obsługi jest wywoływany. <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> Są kontrolowane w celu podania informacji o wyjątku, a przepływ pracy zostanie zakończony.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#6](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>