<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3bc2cfd03550b0cb99a6b076761c6d2a51d25103" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39773360" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="3b86d-101">Umożliwia wywołanie przepływu pracy, jak w przypadku wywołania metody.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3b86d-101">Provides a means for invoking a workflow as if it were a method call.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-102"><xref:System.Activities.WorkflowInvoker> zawiera wystąpienie i metody statyczne do wywoływania synchronicznie przepływów pracy i wystąpienia metody asynchroniczne wywoływanie przepływów pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-102"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
 <span data-ttu-id="3b86d-103"><xref:System.Activities.WorkflowInvoker> nie zezwala na wystąpienie kontrolki, takiej jak przechowywanie, zwalnianie lub wznowienie zakładki.</span><span class="sxs-lookup"><span data-stu-id="3b86d-103"><xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks.</span></span> <span data-ttu-id="3b86d-104">W razie potrzeby wystąpienie kontrolki użyj <xref:System.Activities.WorkflowApplication> zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="3b86d-104">If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.</span></span>  
  
 <span data-ttu-id="3b86d-105">Do wykonania przepływów pracy synchronicznie przy użyciu wystąpienia nie może kontrolować, należy wywołać <xref:System.Activities.WorkflowInvoker.Invoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="3b86d-105">To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method.</span></span> <span data-ttu-id="3b86d-106">Aby są wykonywane asynchronicznie przy użyciu nie może kontrolować wystąpienia przepływu pracy, należy użyć <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> i <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> pary metody lub <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="3b86d-106">To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-107">Poniższy przykład wywołuje synchronicznie przepływu pracy składającą się z pojedynczej <xref:System.Activities.Statements.WriteLine> przy użyciu działania <xref:System.Activities.WorkflowInvoker>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-107">The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using <xref:System.Activities.WorkflowInvoker>.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="3b86d-108">Definicja przepływu pracy, przepływu pracy do wywołania przez to wystąpienie elementu <see cref="T:System.Activities.WorkflowInvoker" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-108">The workflow definition of the workflow to be invoked by this instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-109">Inicjuje nowe wystąpienie klasy <see cref="T:System.Activities.WorkflowInvoker" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-109">Initializes a new instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-110"><xref:System.Activities.WorkflowInvoker> zawiera wystąpienie i metody statyczne do wywoływania synchronicznie przepływów pracy i wystąpienia metody asynchroniczne wywoływanie przepływów pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-110"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-111">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej <xref:System.Activities.Statements.WriteLine> działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-111">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b86d-112">Wywołuje asynchronicznie za pomocą przepływu pracy <see cref="T:System.IAsyncResult" /> asynchronicznym wzorcem projektowym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-112">Invokes a workflow asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-113">Aby uzyskać więcej informacji, zobacz [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="3b86d-113">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="3b86d-114">Metoda do wywołania po ukończeniu przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-114">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3b86d-115">Opcjonalne obiekt specyficzne dla aplikacji, który zawiera informacje o operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-115">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-116">Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.AsyncCallback" /> i stan podanego przez użytkownika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-116">Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-117">Odwołanie do asynchronicznego wywołania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-117">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-118">Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone i pobrać parametrów wyjściowych przepływu pracy, należy wywołać <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> z `callback` metody.</span><span class="sxs-lookup"><span data-stu-id="3b86d-118">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="3b86d-119">Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed zakończeniem przepływu pracy, blokuje ukończenie przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-119">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="3b86d-120">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-120">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="3b86d-121">Ta metoda wywołuje asynchronicznie za pomocą przepływu pracy <xref:System.IAsyncResult> asynchronicznym wzorcem projektowym.</span><span class="sxs-lookup"><span data-stu-id="3b86d-121">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="3b86d-122">Aby uzyskać więcej informacji, zobacz [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="3b86d-122">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-123">Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-123">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="3b86d-124">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-124">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-125">Są one pobierane przez wywołanie metody <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-125">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="3b86d-126">Po wywołaniu <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwraca, każdy argument dane wyjściowe są zwracane w słowniku danych wyjściowych, kluczach nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-126">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="3b86d-127">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-127">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="3b86d-128">Metoda do wywołania po ukończeniu przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-128">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3b86d-129">Opcjonalne obiekt specyficzne dla aplikacji, który zawiera informacje o operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-129">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-130">Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych <see cref="T:System.AsyncCallback" />oraz stan podanego przez użytkownika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-130">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-131">Odwołanie do asynchronicznego wywołania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-131">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-132">Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone i pobrać parametrów wyjściowych przepływu pracy, należy wywołać <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> z `callback` metody.</span><span class="sxs-lookup"><span data-stu-id="3b86d-132">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="3b86d-133">Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed zakończeniem przepływu pracy, blokuje ukończenie przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-133">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  <span data-ttu-id="3b86d-134">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-134">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="3b86d-135">Ta metoda wywołuje asynchronicznie za pomocą przepływu pracy <xref:System.IAsyncResult> asynchronicznym wzorcem projektowym.</span><span class="sxs-lookup"><span data-stu-id="3b86d-135">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="3b86d-136">Aby uzyskać więcej informacji, zobacz [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="3b86d-136">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-137">Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-137">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="3b86d-138">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-138">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-139">Są one pobierane przez wywołanie metody <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-139">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="3b86d-140">Po wywołaniu <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwraca, każdy argument dane wyjściowe są zwracane w słowniku danych wyjściowych, kluczach nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-140">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="3b86d-141">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-141">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="3b86d-142">Metoda do wywołania po ukończeniu przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-142">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3b86d-143">Opcjonalne obiekt specyficzne dla aplikacji, który zawiera informacje o operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-143">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-144">Wywołuje asynchronicznie przy użyciu określonego interwału limitu czasu, przepływ pracy <see cref="T:System.AsyncCallback" />oraz stan podanego przez użytkownika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-144">Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-145">Odwołanie do asynchronicznego wywołania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-145">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-146">Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone i pobrać parametrów wyjściowych przepływu pracy, należy wywołać <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> z `callback` metody.</span><span class="sxs-lookup"><span data-stu-id="3b86d-146">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="3b86d-147">Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed zakończeniem przepływu pracy, blokuje ukończenie przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-147">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="3b86d-148">Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> jest generowany, gdy <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="3b86d-148">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b86d-149"><xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-149">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="3b86d-150">Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-150">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="3b86d-151">Ta metoda wywołuje asynchronicznie za pomocą przepływu pracy <xref:System.IAsyncResult> asynchronicznym wzorcem projektowym.</span><span class="sxs-lookup"><span data-stu-id="3b86d-151">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="3b86d-152">Aby uzyskać więcej informacji, zobacz [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="3b86d-152">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-153">Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-153">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="3b86d-154">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-154">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-155">Są one pobierane przez wywołanie metody <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-155">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="3b86d-156">Po wywołaniu <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwraca, każdy argument dane wyjściowe są zwracane w słowniku danych wyjściowych, kluczach nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-156">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="3b86d-157">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-157">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="3b86d-158">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-158">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="3b86d-159">Metoda do wywołania po ukończeniu przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-159">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3b86d-160">Opcjonalne obiekt specyficzne dla aplikacji, który zawiera informacje o operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-160">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-161">Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych, interwał limitu czasu <see cref="T:System.AsyncCallback" />oraz stan podanego przez użytkownika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-161">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-162">Odwołanie do asynchronicznego wywołania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-162">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-163">Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone i pobrać parametrów wyjściowych przepływu pracy, należy wywołać <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> z `callback` metody.</span><span class="sxs-lookup"><span data-stu-id="3b86d-163">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="3b86d-164">Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed zakończeniem przepływu pracy, blokuje ukończenie przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-164">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="3b86d-165">Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> jest generowany, gdy <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="3b86d-165">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b86d-166"><xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-166">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="3b86d-167">Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-167">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="3b86d-168">Ta metoda wywołuje asynchronicznie za pomocą przepływu pracy <xref:System.IAsyncResult> asynchronicznym wzorcem projektowym.</span><span class="sxs-lookup"><span data-stu-id="3b86d-168">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="3b86d-169">Aby uzyskać więcej informacji, zobacz [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="3b86d-169">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-170">Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-170">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="3b86d-171">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-171">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-172">Są one pobierane przez wywołanie metody <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-172">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="3b86d-173">Po wywołaniu <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwraca, każdy argument dane wyjściowe są zwracane w słowniku danych wyjściowych, kluczach nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-173">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">
          <span data-ttu-id="3b86d-174">Token dla przepływu pracy anulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-174">The token for the workflow to cancel.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-175">Próbuje anulować przepływu pracy, który został wywołany z określonym <paramref name="userState" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-175">Attempts to cancel the workflow that was invoked with the specified <paramref name="userState" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-176">Tylko przepływie pracy, które są wywoływane za pomocą jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> przeciążenia, które przyjmuje `userState` parametru może być anulowany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-176">Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.</span></span>  
  
 <span data-ttu-id="3b86d-177">W przypadku anulowania zakończy się powodzeniem, <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> właściwość <xref:System.Activities.InvokeCompletedEventArgs> przekazany do <xref:System.Activities.WorkflowInvoker.InvokeCompleted> program obsługi jest ustawiona na `true`; w przeciwnym razie jest równa `false`.</span><span class="sxs-lookup"><span data-stu-id="3b86d-177">If the cancellation succeeds, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-178">Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-178">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="3b86d-179">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-179">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-180">Gdy przepływ pracy zostanie wywołana, host próbuje anulować przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-180">Once the workflow is invoked, the host attempts to cancel the workflow.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="3b86d-181">
            <see cref="T:System.IAsyncResult" /> Odwołujący się <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operacji, który uruchomiony przepływ pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-181">The <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operation that started the workflow.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-182">Zwraca wyniki do przepływu pracy, która została wywołana przy użyciu jednej z <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> przeciążenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-182">Returns the results of a workflow that was invoked using one of the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> overloads.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-183">Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-183">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-184">Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone i pobrać parametrów wyjściowych przepływu pracy, należy wywołać <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> z `callback` metodą określoną przez <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-184">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span></span> <span data-ttu-id="3b86d-185">Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed zakończeniem przepływu pracy, blokuje ukończenie przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-185">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  
  
 <span data-ttu-id="3b86d-186">Ta metoda zwraca wynik przepływu pracy wywoływane asynchronicznie przy użyciu <xref:System.IAsyncResult> asynchronicznym wzorcem projektowym.</span><span class="sxs-lookup"><span data-stu-id="3b86d-186">This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="3b86d-187">Aby uzyskać więcej informacji, zobacz [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="3b86d-187">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-188">Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-188">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="3b86d-189">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-189">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-190">Są one pobierane przez wywołanie metody <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-190">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="3b86d-191">Po wywołaniu <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwraca, każdy argument dane wyjściowe są zwracane w słowniku danych wyjściowych, kluczach nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-191">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3b86d-192">Pobiera <see cref="T:System.Collections.ObjectModel.Collection`1" /> rozszerzeń, które są dostępne dla przepływów pracy, wywoływany przez <see cref="T:System.Activities.WorkflowInvoker" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-192">Gets the <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3b86d-193">
            <see cref="T:System.Collections.ObjectModel.Collection`1" /> Rozszerzeń, które są dostępne dla przepływów pracy, wywoływany przez <see cref="T:System.Activities.WorkflowInvoker" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-193">The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-194">Ta właściwość jest używana przez autorów hosta przepływu pracy, aby dodać rozszerzenia <xref:System.Activities.WorkflowInvoker> wystąpienia, dzięki czemu będą one dostępne do przepływów pracy wywoływane przez nią.</span><span class="sxs-lookup"><span data-stu-id="3b86d-194">This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-195">Poniższy przykład rejestruje niestandardowego <xref:System.Activities.Tracking.TrackingParticipant> z <xref:System.Activities.WorkflowInvoker.Extensions%2A> zbiór <xref:System.Activities.WorkflowInvoker> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="3b86d-195">The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the <xref:System.Activities.WorkflowInvoker.Extensions%2A> collection of a <xref:System.Activities.WorkflowInvoker> instance.</span></span> <span data-ttu-id="3b86d-196">Ten przykład kodu jest częścią [niestandardowe śledzenia](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) próbki.</span><span class="sxs-lookup"><span data-stu-id="3b86d-196">This code example is part of the [Custom Tracking](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b86d-197">Wywołuje przepływu pracy synchronicznie i zwraca słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-197">Invokes a workflow synchronously and returns a dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-198">To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-198">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="3b86d-199">Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-199">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="3b86d-200">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-200">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3b86d-201">Wywołuje synchronicznie przy użyciu definicji przepływu pracy przekazywany do przepływu pracy <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> konstruktora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-201">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-202">Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-202">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-203">To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-203">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="3b86d-204">Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-204">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="3b86d-205">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-205">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-206">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `DiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-206">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="3b86d-207">`DiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-207">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-208">Po wywołaniu `Invoke` zwraca, każdy argument dane wyjściowe są zwracane w słowniku danych wyjściowych, kluczach nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-208">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span> <span data-ttu-id="3b86d-209">Przepływ pracy jest wywoływana dwa razy, za pomocą definicji przepływu pracy, przekazywane do `WorkflowInvoker` konstruktora.</span><span class="sxs-lookup"><span data-stu-id="3b86d-209">The workflow is invoked twice, using the workflow definition passed into the `WorkflowInvoker` constructor.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 <span data-ttu-id="3b86d-210">Jeśli działanie główne przepływu pracy nie ma argumentów danych wyjściowych lub nie są wymagane przez hosta, może być ignorowane.</span><span class="sxs-lookup"><span data-stu-id="3b86d-210">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="3b86d-211">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej <xref:System.Activities.Statements.WriteLine> działanie, które nie ma żadnych danych wyjściowych argumentów.</span><span class="sxs-lookup"><span data-stu-id="3b86d-211">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="3b86d-212">Definicja przepływu pracy, przepływu pracy do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-212">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-213">Wywołuje synchronicznie przy użyciu definicji przepływu pracy określonego przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-213">Invokes a workflow synchronously using the specified workflow definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-214">Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-214">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-215">To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-215">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="3b86d-216">Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-216">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="3b86d-217">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-217">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-218">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `DiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-218">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="3b86d-219">`DiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-219">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-220">Po wywołaniu `Invoke` zwraca, każdy argument dane wyjściowe są zwracane w słowniku danych wyjściowych, kluczach nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-220">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 <span data-ttu-id="3b86d-221">Jeśli działanie główne przepływu pracy nie ma argumentów danych wyjściowych lub nie są wymagane przez hosta, może być ignorowane.</span><span class="sxs-lookup"><span data-stu-id="3b86d-221">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="3b86d-222">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej <xref:System.Activities.Statements.WriteLine> działanie, które nie ma żadnych danych wyjściowych argumentów.</span><span class="sxs-lookup"><span data-stu-id="3b86d-222">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="3b86d-223">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-223">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-224">Wywołuje działanie przekazany do <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> Konstruktor synchronicznie przy użyciu określonego <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-224">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-225">Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-225">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-226">To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-226">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="3b86d-227">Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-227">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="3b86d-228">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-228">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-229">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Divide` działania, ma dwa argumenty i dwa wyjściowych argumentów.</span><span class="sxs-lookup"><span data-stu-id="3b86d-229">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="3b86d-230">Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywana, który zawiera wartości dla każdego argumentu, kluczach nazwę argumentu w danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="3b86d-230">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="3b86d-231">Po wywołaniu `Invoke` zwraca, każdy argument dane wyjściowe są zwracane w `outputs` słownika, również kluczach nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-231">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 <span data-ttu-id="3b86d-232">Jeśli przepływ pracy jest pochodną <xref:System.Activities.ActivityWithResult>, takich jak `CodeActivity<TResult>` lub `Activity<TResult>`, i argumenty wyjściowe oprócz dobrze zdefiniowanych <xref:System.Activities.Activity%601.Result%2A> danych wyjściowych argumentu, przeciążenie nieogólnego `Invoke`, takie jak, musi być używany w kolejność, aby pobrać dodatkowe argumenty.</span><span class="sxs-lookup"><span data-stu-id="3b86d-232">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="3b86d-233">Aby to zrobić, definicja przepływu pracy są przekazywane do `WorkflowInvoker` konstruktora musi być typu <xref:System.Activities.Activity>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-233">To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="3b86d-234">W tym przykładzie `Divide` pochodzi od klasy działania `CodeActivity<int>`, ale jest zadeklarowany jako <xref:System.Activities.Activity> tak, aby to przeciążenia `Invoke`, zwraca słownika argumentów, a nie pojedyncze wartości zwracanej jest używany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-234">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="3b86d-235">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-235">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-236">Wywołuje przepływu pracy synchronicznie przy użyciu określonego interwału limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-236">Invokes a workflow synchronously with the specified time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-237">Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-237">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-238">To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-238">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="3b86d-239">Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-239">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="3b86d-240">Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-240">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b86d-241"><xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-241">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="3b86d-242">Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-242">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-243">Poniższy przykład przedstawia wywoływanie przepływu pracy, który zawiera dwa <xref:System.Activities.Statements.WriteLine> działań i <xref:System.Activities.Statements.Delay> działania skonfigurowano <xref:System.Activities.Statements.Delay.Duration%2A> jednej minuty.</span><span class="sxs-lookup"><span data-stu-id="3b86d-243">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="3b86d-244">Ten przepływ pracy zostanie wywołana dwukrotnie; po raz pierwszy przy użyciu limitu czasu wynosi dwie minuty, a po raz drugi z interwałem limitu czasu 30 sekund.</span><span class="sxs-lookup"><span data-stu-id="3b86d-244">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="3b86d-245">Pierwszy przepływ pracy zakończy się pomyślnie, ale nie jest drugi i <xref:System.TimeoutException> jest generowany i zostanie wyświetlony następujący komunikat.</span><span class="sxs-lookup"><span data-stu-id="3b86d-245">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="3b86d-246">Na przykład za pomocą `Invoke` z argumentami danych wyjściowych, zobacz przeciążenia <xref:System.Activities.WorkflowInvoker.Invoke%2A> parametrami tego przeciążenia bez limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-246">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="3b86d-247">Definicja przepływu pracy, przepływu pracy do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-247">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="3b86d-248">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-248">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-249">Wywołuje synchronicznie przy użyciu definicji przepływu pracy określonego przepływu pracy i <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-249">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-250">Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-250">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-251">To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-251">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="3b86d-252">Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-252">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="3b86d-253">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-253">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-254">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Divide` działania, ma dwa argumenty i dwa wyjściowych argumentów.</span><span class="sxs-lookup"><span data-stu-id="3b86d-254">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="3b86d-255">Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywana, który zawiera wartości dla każdego argumentu, kluczach nazwę argumentu w danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="3b86d-255">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="3b86d-256">Po wywołaniu `Invoke` zwraca, każdy argument dane wyjściowe są zwracane w `outputs` słownika, również kluczach nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-256">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 <span data-ttu-id="3b86d-257">Jeśli przepływ pracy jest pochodną <xref:System.Activities.ActivityWithResult>, takich jak `CodeActivity<TResult>` lub `Activity<TResult>`, i argumenty wyjściowe oprócz dobrze zdefiniowanych <xref:System.Activities.Activity%601.Result%2A> danych wyjściowych argumentu, przeciążenie nieogólnego `Invoke`, takie jak, musi być używany w kolejność, aby pobrać dodatkowe argumenty.</span><span class="sxs-lookup"><span data-stu-id="3b86d-257">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="3b86d-258">Aby to zrobić, definicja przepływu pracy są przekazywane do `Invoke` musi być typu <xref:System.Activities.Activity>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-258">To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="3b86d-259">W tym przykładzie `Divide` pochodzi od klasy działania `CodeActivity<int>`, ale jest zadeklarowany jako <xref:System.Activities.Activity> tak, aby to przeciążenia `Invoke`, zwraca słownika argumentów, a nie pojedyncze wartości zwracanej jest używany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-259">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="3b86d-260">Definicja przepływu pracy, przepływu pracy do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-260">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="3b86d-261">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-261">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-262">Wywołuje przepływu pracy synchronicznie przy użyciu definicji określonego przepływu pracy i interwał limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-262">Invokes a workflow synchronously using the specified workflow definition and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-263">Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-263">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-264">To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-264">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="3b86d-265">Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-265">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="3b86d-266">Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-266">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b86d-267"><xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-267">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="3b86d-268">Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-268">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-269">Poniższy przykład przedstawia wywoływanie przepływu pracy, który zawiera dwa <xref:System.Activities.Statements.WriteLine> działań i <xref:System.Activities.Statements.Delay> działania skonfigurowano <xref:System.Activities.Statements.Delay.Duration%2A> jednej minuty.</span><span class="sxs-lookup"><span data-stu-id="3b86d-269">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="3b86d-270">Ten przepływ pracy zostanie wywołana dwukrotnie; po raz pierwszy przy użyciu limitu czasu wynosi dwie minuty, a po raz drugi z interwałem limitu czasu 30 sekund.</span><span class="sxs-lookup"><span data-stu-id="3b86d-270">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="3b86d-271">Pierwszy przepływ pracy zakończy się pomyślnie, ale nie jest drugi i <xref:System.TimeoutException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-271">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="3b86d-272">Na przykład za pomocą `Invoke` z argumentami danych wyjściowych, zobacz przeciążenia <xref:System.Activities.WorkflowInvoker.Invoke%2A> parametrami tego przeciążenia bez limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-272">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="3b86d-273">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-273">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="3b86d-274">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-274">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-275">Wywołuje działanie przekazany do <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> Konstruktor synchronicznie przy użyciu określonego <see cref="T:System.Collections.Generic.IDictionary`2" /> parametry wejściowe i określonego interwału limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-275">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-276">Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-276">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-277">To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-277">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="3b86d-278">Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-278">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="3b86d-279">Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-279">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b86d-280"><xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-280">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="3b86d-281">Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-281">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-282">Poniższy przykład przedstawia wywoływanie przepływu pracy, który zawiera dwa <xref:System.Activities.Statements.WriteLine> działań i <xref:System.Activities.Statements.Delay> działania skonfigurowano <xref:System.Activities.Statements.Delay.Duration%2A> jednej minuty.</span><span class="sxs-lookup"><span data-stu-id="3b86d-282">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="3b86d-283">Ten przepływ pracy zostanie wywołana dwukrotnie; po raz pierwszy przy użyciu limitu czasu wynosi dwie minuty, a po raz drugi z interwałem limitu czasu 30 sekund.</span><span class="sxs-lookup"><span data-stu-id="3b86d-283">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="3b86d-284">Pierwszy przepływ pracy zakończy się pomyślnie, ale nie jest drugi i <xref:System.TimeoutException> jest generowany i zostanie wyświetlony następujący komunikat.</span><span class="sxs-lookup"><span data-stu-id="3b86d-284">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="3b86d-285">Na przykład za pomocą `Invoke` argumentów wejściowych i wyjściowych, zobacz przeciążenia <xref:System.Activities.WorkflowInvoker.Invoke%2A> parametrami tego przeciążenia bez limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-285">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="3b86d-286">Definicja przepływu pracy, przepływu pracy do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-286">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="3b86d-287">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-287">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="3b86d-288">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-288">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-289">Wywołuje przepływu pracy, synchronicznie przy użyciu definicji przepływu pracy określonego <see cref="T:System.Collections.Generic.IDictionary`2" /> parametry wejściowe i interwał limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-289">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-290">Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-290">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-291">To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-291">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="3b86d-292">Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-292">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="3b86d-293">Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-293">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b86d-294"><xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-294">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="3b86d-295">Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-295">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-296">Poniższy przykład przedstawia wywoływanie przepływu pracy, który zawiera dwa <xref:System.Activities.Statements.WriteLine> działań i <xref:System.Activities.Statements.Delay> działania skonfigurowano <xref:System.Activities.Statements.Delay.Duration%2A> jednej minuty.</span><span class="sxs-lookup"><span data-stu-id="3b86d-296">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="3b86d-297">Ten przepływ pracy zostanie wywołana dwukrotnie; po raz pierwszy przy użyciu limitu czasu wynosi dwie minuty, a po raz drugi z interwałem limitu czasu 30 sekund.</span><span class="sxs-lookup"><span data-stu-id="3b86d-297">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="3b86d-298">Pierwszy przepływ pracy zakończy się pomyślnie, ale nie jest drugi i <xref:System.TimeoutException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-298">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="3b86d-299">Na przykład za pomocą `Invoke` argumentów wejściowych i wyjściowych, zobacz przeciążenia <xref:System.Activities.WorkflowInvoker.Invoke%2A> parametrami tego przeciążenia bez limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-299">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3b86d-300">Typ przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-300">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="3b86d-301">Definicja przepływu pracy, przepływu pracy do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-301">The workflow definition of the workflow to invoke.</span>
          </span>
          <span data-ttu-id="3b86d-302">Definicja przepływu pracy musi pochodzić od <see cref="T:System.Activities.ActivityWithResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-302">The workflow definition needs to derive from <see cref="T:System.Activities.ActivityWithResult" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-303">Wywołuje synchronicznie przy użyciu definicji przepływu pracy przekazywany do przepływu pracy <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> konstruktora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-303">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-304">Wartość typu TResult z wynikiem wykonania działania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-304">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-305">To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-305">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="3b86d-306">Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-306">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="3b86d-307">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-307">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-308">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Add` działania, który ma dwa argumenty wejściowe i ponieważ pochodzi od klasy `CodeActivity<int>` daje on dobrze zdefiniowany <xref:System.Activities.Activity%601.Result%2A> danych wyjściowych argumentu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-308">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="3b86d-309">Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywana, który zawiera wartości dla każdego argumentu, kluczach nazwę argumentu w danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="3b86d-309">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="3b86d-310">Po wywołaniu `Invoke` zwraca wartość <xref:System.Activities.Activity%601.Result%2A> argument danych wyjściowych jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="3b86d-310">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="3b86d-311">Ten przykładowy kod opiera się wylogować się z [używanie klasy WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) próbki.</span><span class="sxs-lookup"><span data-stu-id="3b86d-311">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3b86d-312">Typ przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-312">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="3b86d-313">Definicja przepływu pracy, przepływu pracy do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-313">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="3b86d-314">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-314">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-315">Wywołuje synchronicznie przy użyciu definicji przepływu pracy określonego przepływu pracy i <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-315">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-316">Wartość typu TResult z wynikiem wykonania działania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-316">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-317">To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-317">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="3b86d-318">Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-318">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="3b86d-319">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-319">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b86d-320"><xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-320">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="3b86d-321">Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby zakończyć, kończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-321">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-322">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Add` działania, który ma dwa argumenty wejściowe i ponieważ pochodzi od klasy `CodeActivity<int>` daje on dobrze zdefiniowany <xref:System.Activities.Activity%601.Result%2A> danych wyjściowych argumentu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-322">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="3b86d-323">Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywana, który zawiera wartości dla każdego argumentu, kluczach nazwę argumentu w danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="3b86d-323">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="3b86d-324">Po wywołaniu `Invoke` zwraca wartość <xref:System.Activities.Activity%601.Result%2A> argument danych wyjściowych jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="3b86d-324">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="3b86d-325">Ten przykładowy kod opiera się wylogować się z [używanie klasy WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) próbki.</span><span class="sxs-lookup"><span data-stu-id="3b86d-325">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3b86d-326">Typ przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-326">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="3b86d-327">Definicja przepływu pracy, przepływu pracy do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-327">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="3b86d-328">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-328">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="3b86d-329">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-329">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-330">Wywołuje przepływu pracy, synchronicznie przy użyciu definicji przepływu pracy określonego <see cref="T:System.Collections.Generic.IDictionary`2" /> parametry wejściowe i interwał limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-330">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-331">Wartość typu TResult z wynikiem wykonania działania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-331">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-332">To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-332">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="3b86d-333">Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-333">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="3b86d-334">Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-334">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b86d-335"><xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-335">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="3b86d-336">Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby zakończyć, kończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-336">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-337">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Add` działania, który ma dwa argumenty wejściowe i ponieważ pochodzi od klasy `CodeActivity<int>` daje on dobrze zdefiniowany <xref:System.Activities.Activity%601.Result%2A> danych wyjściowych argumentu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-337">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="3b86d-338">Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywana, który zawiera wartości dla każdego argumentu, kluczach nazwę argumentu w danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="3b86d-338">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="3b86d-339">Po wywołaniu `Invoke` zwraca wartość <xref:System.Activities.Activity%601.Result%2A> argument danych wyjściowych jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="3b86d-339">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="3b86d-340">Ten przykładowy kod opiera się wylogować się z [używanie klasy WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) próbki.</span><span class="sxs-lookup"><span data-stu-id="3b86d-340">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; *  * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3b86d-341">Typ przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-341">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="3b86d-342">Definicja przepływu pracy, przepływu pracy do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-342">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="3b86d-343">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-343">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="additionalOutputs">
          <span data-ttu-id="3b86d-344">Słownik parametrów dodatkowych danych wyjściowych przepływu pracy, kluczach nazwę argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-344">The dictionary of additional output parameters of the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="3b86d-345">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-345">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-346">Wywołuje synchronicznie przy użyciu definicji przepływu pracy określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych <see cref="T:System.Collections.Generic.IDictionary`2" /> dodatkowych danych wyjściowych, parametrów i interwał limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-346">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.Collections.Generic.IDictionary`2" /> of additional output parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b86d-347">Wartość typu TResult z wynikiem wykonania działania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-347">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-348">To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-348">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="3b86d-349">Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-349">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="3b86d-350">Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-350">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b86d-351"><xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-351">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="3b86d-352">Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby zakończyć, kończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-352">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-353">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Add` działania, który ma dwa argumenty wejściowe i ponieważ pochodzi od klasy `CodeActivity<int>` daje on dobrze zdefiniowany <xref:System.Activities.Activity%601.Result%2A> danych wyjściowych argumentu.</span><span class="sxs-lookup"><span data-stu-id="3b86d-353">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="3b86d-354">Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywana, który zawiera wartości dla każdego argumentu, kluczach nazwę argumentu w danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="3b86d-354">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="3b86d-355">Po wywołaniu `Invoke` zwraca wartość <xref:System.Activities.Activity%601.Result%2A> argument danych wyjściowych jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="3b86d-355">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="3b86d-356">Ten przykładowy kod opiera się wylogować się z [używanie klasy WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) próbki.</span><span class="sxs-lookup"><span data-stu-id="3b86d-356">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b86d-357">Wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-357">Invokes a workflow asynchronously using the event-based asynchronous design pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-358">Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-358">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="3b86d-359">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-359">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="3b86d-360">Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-360">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="3b86d-361">Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="3b86d-361">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3b86d-362">Wywołuje asynchronicznie przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-362">Invokes a workflow asynchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-363">Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-363">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="3b86d-364">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-364">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="3b86d-365">Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-365">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="3b86d-366">Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="3b86d-366">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-367">Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-367">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="3b86d-368">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-368">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-369">Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="3b86d-369">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="3b86d-370">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-370">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-371">Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-371">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-372">Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-372">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="3b86d-373">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-373">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="3b86d-374">Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-374">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="3b86d-375">Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="3b86d-375">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-376">Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-376">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="3b86d-377">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-377">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-378">Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="3b86d-378">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">
          <span data-ttu-id="3b86d-379">Obiekt dostarczony przez użytkownika, używany do odróżnienia tej konkretnej asynchronicznego wywołania operacji od innych bieżącego asynchronicznego wywołania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-379">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-380">Wywołuje asynchronicznie przy użyciu określonego Unikatowy identyfikator przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-380">Invokes a workflow asynchronously using the specified unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-381">`userState` Parametru musi być unikatowa we wszystkich aktualnie uruchomionych <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operacji dla bieżącego działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-381">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="3b86d-382">Jeśli `userState` parametr nie jest unikatowa, <xref:System.ArgumentException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-382">If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="3b86d-383">`userState` Służy do identyfikowania przepływu pracy w <xref:System.Activities.WorkflowInvoker.InvokeCompleted>i anulowania w przepływie pracy używającym <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-383">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="3b86d-384">Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-384">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="3b86d-385">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-385">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="3b86d-386">Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-386">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="3b86d-387">Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="3b86d-387">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-388">Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-388">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="3b86d-389">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-389">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-390">Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="3b86d-390">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="3b86d-391">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-391">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-392">Wywołuje asynchronicznie z interwałem określonym limicie czasu przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-392">Invokes a workflow asynchronously with the specified time-out interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-393">Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-393">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="3b86d-394">Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-394">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b86d-395"><xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-395">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="3b86d-396">Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-396">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="3b86d-397">Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-397">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="3b86d-398">Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="3b86d-398">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-399">Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-399">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="3b86d-400">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-400">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-401">Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="3b86d-401">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="3b86d-402">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-402">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="3b86d-403">Obiekt dostarczony przez użytkownika, używany do odróżnienia tej konkretnej asynchronicznego wywołania operacji od innych bieżącego asynchronicznego wywołania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-403">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-404">Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametry wejściowe i unikatowy identyfikator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-404">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-405">`userState` Parametru musi być unikatowa we wszystkich aktualnie uruchomionych <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operacji dla bieżącego działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-405">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="3b86d-406">Jeśli `userState` nie jest unikatowa, <xref:System.ArgumentException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-406">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="3b86d-407">`userState` Służy do identyfikowania przepływu pracy w <xref:System.Activities.WorkflowInvoker.InvokeCompleted>i anulowania w przepływie pracy używającym <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-407">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="3b86d-408">Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-408">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="3b86d-409">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-409">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="3b86d-410">Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-410">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="3b86d-411">Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="3b86d-411">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-412">Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-412">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="3b86d-413">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-413">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-414">Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="3b86d-414">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="3b86d-415">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-415">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="3b86d-416">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-416">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-417">Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametry wejściowe i określonego interwału limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-417">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-418">Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-418">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="3b86d-419">Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-419">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b86d-420"><xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-420">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="3b86d-421">Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-421">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="3b86d-422">Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-422">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="3b86d-423">Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="3b86d-423">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-424">Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-424">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="3b86d-425">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-425">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-426">Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="3b86d-426">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="3b86d-427">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-427">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="3b86d-428">Obiekt dostarczony przez użytkownika, używany do odróżnienia tej konkretnej asynchronicznego wywołania operacji od innych bieżącego asynchronicznego wywołania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-428">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-429">Wywołuje asynchronicznie przy użyciu określonego interwału limitu czasu i unikatowy identyfikator przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-429">Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-430">`userState` Parametru musi być unikatowa we wszystkich aktualnie uruchomionych <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operacji dla bieżącego działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-430">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="3b86d-431">Jeśli `userState` nie jest unikatowa, <xref:System.ArgumentException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-431">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="3b86d-432">`userState` Służy do identyfikowania przepływu pracy w <xref:System.Activities.WorkflowInvoker.InvokeCompleted>i anulowania w przepływie pracy używającym <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-432">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="3b86d-433">Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-433">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="3b86d-434">Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-434">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b86d-435"><xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-435">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="3b86d-436">Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-436">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="3b86d-437">Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-437">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="3b86d-438">Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="3b86d-438">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-439">Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-439">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="3b86d-440">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-440">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-441">Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="3b86d-441">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="3b86d-442">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-442">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="3b86d-443">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-443">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="3b86d-444">Obiekt dostarczony przez użytkownika, używany do odróżnienia tej konkretnej asynchronicznego wywołania operacji od innych bieżącego asynchronicznego wywołania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-444">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b86d-445">Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych, określonego interwału limitu czasu i unikatowy identyfikator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-445">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, the specified time-out interval, and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-446">`userState` Parametru musi być unikatowa we wszystkich aktualnie uruchomionych <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operacji dla bieżącego działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-446">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="3b86d-447">Jeśli `userState` nie jest unikatowa, <xref:System.ArgumentException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-447">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="3b86d-448">`userState` Służy do identyfikowania przepływu pracy w <xref:System.Activities.WorkflowInvoker.InvokeCompleted>i anulowania w przepływie pracy używającym <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-448">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="3b86d-449">Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="3b86d-449">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="3b86d-450">Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="3b86d-450">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b86d-451"><xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-451">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="3b86d-452">Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="3b86d-452">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="3b86d-453">Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-453">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="3b86d-454">Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="3b86d-454">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-455">Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-455">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="3b86d-456">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-456">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-457">Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="3b86d-457">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3b86d-458">Występuje, gdy przepływ pracy jest wywoływana za pomocą jednej z <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> przeciążenia jest ukończone lub anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b86d-458">Occurs when the workflow invoked by one of the <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> overloads is completed or canceled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b86d-459">Ten element, aby określić, czy przepływ pracy ma być wywoływany przy użyciu jednego z obsługi <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> przeciążenia została ukończona pomyślnie i pobrać dane wyjściowe argumenty ukończony przepływ pracy.</span><span class="sxs-lookup"><span data-stu-id="3b86d-459">Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b86d-460">Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="3b86d-460">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="3b86d-461">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice.</span><span class="sxs-lookup"><span data-stu-id="3b86d-461">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="3b86d-462">Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="3b86d-462">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>