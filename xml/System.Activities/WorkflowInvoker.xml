<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d657d47debe88cddaa6631a275d224726f673e73" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69343403" /></Metadata><TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="af93f-101">Zapewnia sposób wywoływania przepływu pracy tak, jakby był wywołaniem metody.</span><span class="sxs-lookup"><span data-stu-id="af93f-101">Provides a means for invoking a workflow as if it were a method call.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-102"><xref:System.Activities.WorkflowInvoker>zawiera zarówno metody wystąpienia, jak i statyczne do wywoływania przepływów pracy synchronicznie i metody wystąpień do wywoływania przepływów pracy asynchronicznie.</span><span class="sxs-lookup"><span data-stu-id="af93f-102"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
 <span data-ttu-id="af93f-103"><xref:System.Activities.WorkflowInvoker>nie zezwala na kontrolowanie wystąpienia, takie jak utrwalanie, zwalnianie lub wznawianie zakładek.</span><span class="sxs-lookup"><span data-stu-id="af93f-103"><xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks.</span></span> <span data-ttu-id="af93f-104">Jeśli jest wymagana kontrola wystąpienia, użyj <xref:System.Activities.WorkflowApplication> zamiast niej.</span><span class="sxs-lookup"><span data-stu-id="af93f-104">If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.</span></span>  
  
 <span data-ttu-id="af93f-105">Aby wykonać przepływy pracy synchronicznie bez kontroli wystąpienia, wywołaj <xref:System.Activities.WorkflowInvoker.Invoke%2A> metodę.</span><span class="sxs-lookup"><span data-stu-id="af93f-105">To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method.</span></span> <span data-ttu-id="af93f-106">Aby wykonać przepływ pracy asynchronicznie bez kontroli wystąpienia, użyj <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> par <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> metod <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> i lub metody.</span><span class="sxs-lookup"><span data-stu-id="af93f-106">To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-107">Poniższy przykład synchronicznie wywołuje przepływ pracy składający się z pojedynczego <xref:System.Activities.Statements.WriteLine> działania przy <xref:System.Activities.WorkflowInvoker>użyciu.</span><span class="sxs-lookup"><span data-stu-id="af93f-107">The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using <xref:System.Activities.WorkflowInvoker>.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="af93f-108">Definicja przepływu pracy, która ma zostać wywołana przez to wystąpienie <see cref="T:System.Activities.WorkflowInvoker" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="af93f-108">The workflow definition of the workflow to be invoked by this instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span></span></param>
        <summary><span data-ttu-id="af93f-109">Inicjuje nowe wystąpienie klasy <see cref="T:System.Activities.WorkflowInvoker" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="af93f-109">Initializes a new instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-110"><xref:System.Activities.WorkflowInvoker>zawiera zarówno metody wystąpienia, jak i statyczne do wywoływania przepływów pracy synchronicznie i metody wystąpień do wywoływania przepływów pracy asynchronicznie.</span><span class="sxs-lookup"><span data-stu-id="af93f-110"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-111">Poniższy przykład wywołuje przepływ pracy składający się z pojedynczego <xref:System.Activities.Statements.WriteLine> działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-111">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="af93f-112">Wywołuje przepływ pracy asynchronicznie przy <see cref="T:System.IAsyncResult" /> użyciu wzorca projektowego asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="af93f-112">Invokes a workflow asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-113">Aby uzyskać więcej informacji, zobacz [Omówienie programowania asynchronicznego](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="af93f-113">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="af93f-114">Metoda, która ma być wywoływana po zakończeniu przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-114">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="af93f-115">Opcjonalny obiekt specyficzny dla aplikacji, który zawiera informacje o operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="af93f-115">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="af93f-116">Wywołuje przepływ pracy asynchronicznie przy użyciu <see cref="T:System.AsyncCallback" /> określonego i dostarczonego przez użytkownika stanu.</span><span class="sxs-lookup"><span data-stu-id="af93f-116">Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="af93f-117">Odwołanie do asynchronicznej operacji Invoke.</span><span class="sxs-lookup"><span data-stu-id="af93f-117">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-118">Aby otrzymywać powiadomienia o ukończeniu przepływu pracy i pobieraniu parametrów wyjściowych przepływu pracy, wywołaj <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> `callback` metodę.</span><span class="sxs-lookup"><span data-stu-id="af93f-118">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="af93f-119">Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed ukończeniem przepływu pracy, zostaje ona zablokowana do momentu zakończenia przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-119">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="af93f-120">Aby skonfigurować interwał przekroczenia limitu czasu, w którym przepływ pracy musi być zakończony, użyj <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> jednego z przeciążeń, które <xref:System.TimeSpan>zajmie.</span><span class="sxs-lookup"><span data-stu-id="af93f-120">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="af93f-121">Ta metoda wywołuje przepływ pracy asynchronicznie przy <xref:System.IAsyncResult> użyciu wzorca projektowego asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="af93f-121">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="af93f-122">Aby uzyskać więcej informacji, zobacz [Omówienie programowania asynchronicznego](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="af93f-122">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-123">Poniższy przykład wywołuje przepływ pracy składający się z `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-123">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="af93f-124">`LongRunningDiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-124">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-125">Są one pobierane przez wywołanie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="af93f-125">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="af93f-126">Gdy wywołanie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwrotne zwraca, każdy argument danych wyjściowych jest zwracany w słowniku wyników, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-126">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="af93f-127">Słownik parametrów wejściowych do przepływu pracy, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-127">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="callback"><span data-ttu-id="af93f-128">Metoda, która ma być wywoływana po zakończeniu przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-128">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="af93f-129">Opcjonalny obiekt specyficzny dla aplikacji, który zawiera informacje o operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="af93f-129">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="af93f-130">Wywołuje przepływ pracy asynchronicznie przy użyciu <see cref="T:System.Collections.Generic.IDictionary`2" /> określonych <see cref="T:System.AsyncCallback" />parametrów wejściowych, i stanu dostarczonego przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="af93f-130">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.AsyncCallback" />, and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="af93f-131">Odwołanie do asynchronicznej operacji Invoke.</span><span class="sxs-lookup"><span data-stu-id="af93f-131">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-132">Aby otrzymywać powiadomienia o ukończeniu przepływu pracy i pobieraniu parametrów wyjściowych przepływu pracy, wywołaj <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> `callback` metodę.</span><span class="sxs-lookup"><span data-stu-id="af93f-132">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="af93f-133">Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed ukończeniem przepływu pracy, zostaje ona zablokowana do momentu zakończenia przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-133">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  <span data-ttu-id="af93f-134">Aby skonfigurować interwał przekroczenia limitu czasu, w którym przepływ pracy musi być zakończony, użyj <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> jednego z przeciążeń, które <xref:System.TimeSpan>zajmie.</span><span class="sxs-lookup"><span data-stu-id="af93f-134">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="af93f-135">Ta metoda wywołuje przepływ pracy asynchronicznie przy <xref:System.IAsyncResult> użyciu wzorca projektowego asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="af93f-135">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="af93f-136">Aby uzyskać więcej informacji, zobacz [Omówienie programowania asynchronicznego](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="af93f-136">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-137">Poniższy przykład wywołuje przepływ pracy składający się z `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-137">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="af93f-138">`LongRunningDiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-138">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-139">Są one pobierane przez wywołanie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="af93f-139">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="af93f-140">Gdy wywołanie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwrotne zwraca, każdy argument danych wyjściowych jest zwracany w słowniku wyników, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-140">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="af93f-141">Interwał, w którym przepływ pracy musi zostać zakończony, zanim zostanie przerwany i <see cref="T:System.TimeoutException" /> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-141">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="callback"><span data-ttu-id="af93f-142">Metoda, która ma być wywoływana po zakończeniu przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-142">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="af93f-143">Opcjonalny obiekt specyficzny dla aplikacji, który zawiera informacje o operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="af93f-143">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="af93f-144">Wywołuje przepływ pracy asynchronicznie przy użyciu określonego interwału limitu czasu <see cref="T:System.AsyncCallback" />, i stanu dostarczonego przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="af93f-144">Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="af93f-145">Odwołanie do asynchronicznej operacji Invoke.</span><span class="sxs-lookup"><span data-stu-id="af93f-145">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-146">Aby otrzymywać powiadomienia o ukończeniu przepływu pracy i pobieraniu parametrów wyjściowych przepływu pracy, wywołaj <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> `callback` metodę.</span><span class="sxs-lookup"><span data-stu-id="af93f-146">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="af93f-147">Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed ukończeniem przepływu pracy, zostaje ona zablokowana do momentu zakończenia przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-147">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="af93f-148">Jeśli przepływ pracy nie zostanie ukończony w określonym limicie czasu, przepływ pracy zostanie przerwany i <xref:System.TimeoutException> zostanie wygenerowany, <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> gdy wywoływana jest metoda.</span><span class="sxs-lookup"><span data-stu-id="af93f-148">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af93f-149"><xref:System.TimeoutException> Jest generowany tylko wtedy, gdy upłynie limit czasu, a przepływ pracy stanie się nieczynny podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="af93f-149">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="af93f-150">Przepływ pracy, który trwa dłużej niż określony limit czasu, zostanie zakończony pomyślnie, jeśli przepływ pracy nie stanie się bezczynny.</span><span class="sxs-lookup"><span data-stu-id="af93f-150">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="af93f-151">Ta metoda wywołuje przepływ pracy asynchronicznie przy <xref:System.IAsyncResult> użyciu wzorca projektowego asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="af93f-151">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="af93f-152">Aby uzyskać więcej informacji, zobacz [Omówienie programowania asynchronicznego](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="af93f-152">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-153">Poniższy przykład wywołuje przepływ pracy składający się z `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-153">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="af93f-154">`LongRunningDiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-154">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-155">Są one pobierane przez wywołanie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="af93f-155">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="af93f-156">Gdy wywołanie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwrotne zwraca, każdy argument danych wyjściowych jest zwracany w słowniku wyników, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-156">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="af93f-157">Słownik parametrów wejściowych do przepływu pracy, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-157">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="af93f-158">Interwał, w którym przepływ pracy musi zostać zakończony, zanim zostanie przerwany i <see cref="T:System.TimeoutException" /> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-158">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="callback"><span data-ttu-id="af93f-159">Metoda, która ma być wywoływana po zakończeniu przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-159">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="af93f-160">Opcjonalny obiekt specyficzny dla aplikacji, który zawiera informacje o operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="af93f-160">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="af93f-161">Wywołuje przepływ pracy asynchronicznie przy użyciu <see cref="T:System.Collections.Generic.IDictionary`2" /> określonego parametru wejściowego, interwału limitu czasu <see cref="T:System.AsyncCallback" />, i stanu dostarczonego przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="af93f-161">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="af93f-162">Odwołanie do asynchronicznej operacji Invoke.</span><span class="sxs-lookup"><span data-stu-id="af93f-162">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-163">Aby otrzymywać powiadomienia o ukończeniu przepływu pracy i pobieraniu parametrów wyjściowych przepływu pracy, wywołaj <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> `callback` metodę.</span><span class="sxs-lookup"><span data-stu-id="af93f-163">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="af93f-164">Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed ukończeniem przepływu pracy, zostaje ona zablokowana do momentu zakończenia przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-164">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="af93f-165">Jeśli przepływ pracy nie zostanie ukończony w określonym limicie czasu, przepływ pracy zostanie przerwany i <xref:System.TimeoutException> zostanie wygenerowany po <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> wywołaniu.</span><span class="sxs-lookup"><span data-stu-id="af93f-165">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af93f-166"><xref:System.TimeoutException> Jest generowany tylko wtedy, gdy upłynie limit czasu, a przepływ pracy stanie się nieczynny podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="af93f-166">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="af93f-167">Przepływ pracy, który trwa dłużej niż określony limit czasu, zostanie zakończony pomyślnie, jeśli przepływ pracy nie stanie się bezczynny.</span><span class="sxs-lookup"><span data-stu-id="af93f-167">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="af93f-168">Ta metoda wywołuje przepływ pracy asynchronicznie przy <xref:System.IAsyncResult> użyciu wzorca projektowego asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="af93f-168">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="af93f-169">Aby uzyskać więcej informacji, zobacz [Omówienie programowania asynchronicznego](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="af93f-169">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-170">Poniższy przykład wywołuje przepływ pracy składający się z `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-170">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="af93f-171">`LongRunningDiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-171">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-172">Są one pobierane przez wywołanie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="af93f-172">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="af93f-173">Gdy wywołanie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwrotne zwraca, każdy argument danych wyjściowych jest zwracany w słowniku wyników, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-173">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState"><span data-ttu-id="af93f-174">Token dla przepływu pracy, który ma zostać anulowany.</span><span class="sxs-lookup"><span data-stu-id="af93f-174">The token for the workflow to cancel.</span></span></param>
        <summary><span data-ttu-id="af93f-175">Próbuje anulować przepływ pracy, który został wywołany z <paramref name="userState" />określonym.</span><span class="sxs-lookup"><span data-stu-id="af93f-175">Attempts to cancel the workflow that was invoked with the specified <paramref name="userState" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-176">Można anulować tylko przepływ pracy wywoływany przez <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> jedno z przeciążeń, które `userState` pobiera parametr.</span><span class="sxs-lookup"><span data-stu-id="af93f-176">Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.</span></span>  
  
 <span data-ttu-id="af93f-177">Jeśli anulowanie zakończy się pomyślnie, <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> Właściwość <xref:System.Activities.InvokeCompletedEventArgs> przekazana do <xref:System.Activities.WorkflowInvoker.InvokeCompleted> procedury obsługi jest ustawiona na `true`; w przeciwnym razie jest ustawiona na `false`.</span><span class="sxs-lookup"><span data-stu-id="af93f-177">If the cancellation succeeds, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-178">Poniższy przykład wywołuje przepływ pracy składający się z `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-178">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="af93f-179">`LongRunningDiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-179">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-180">Po wywołaniu przepływu pracy host próbuje anulować przepływ pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-180">Once the workflow is invoked, the host attempts to cancel the workflow.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="af93f-181">Odwołujesiędooperacji,którauruchomiłaprzepływpracy.<see cref="T:System.IAsyncResult" /> <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /></span><span class="sxs-lookup"><span data-stu-id="af93f-181">The <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operation that started the workflow.</span></span></param>
        <summary><span data-ttu-id="af93f-182">Zwraca wyniki przepływu pracy, który został wywołany przy użyciu jednego z <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> przeciążeń.</span><span class="sxs-lookup"><span data-stu-id="af93f-182">Returns the results of a workflow that was invoked using one of the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> overloads.</span></span></summary>
        <returns><span data-ttu-id="af93f-183">Słownik działań <see cref="T:System.Activities.OutArgument" /> głównych i <see cref="T:System.Activities.InOutArgument" /> wartości, które są oparte na nazwie argumentu, który reprezentuje dane wyjściowe przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-183">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-184">Aby otrzymywać powiadomienia o ukończeniu przepływu pracy i pobieraniu parametrów wyjściowych przepływu pracy, wywołaj <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> `callback` metodę określoną przez <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="af93f-184">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span></span> <span data-ttu-id="af93f-185">Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed ukończeniem przepływu pracy, zostaje ona zablokowana do momentu zakończenia przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-185">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  
  
 <span data-ttu-id="af93f-186">Ta metoda zwraca wynik przepływu pracy wywołanego asynchronicznie przy użyciu <xref:System.IAsyncResult> wzorca projektowego asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="af93f-186">This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="af93f-187">Aby uzyskać więcej informacji, zobacz [Omówienie programowania asynchronicznego](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="af93f-187">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-188">Poniższy przykład wywołuje przepływ pracy składający się z `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-188">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="af93f-189">`LongRunningDiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-189">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-190">Są one pobierane przez wywołanie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="af93f-190">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="af93f-191">Gdy wywołanie <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwrotne zwraca, każdy argument danych wyjściowych jest zwracany w słowniku wyników, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-191">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="af93f-192">Pobiera rozszerzenia, które są dostępne dla przepływów pracy wywoływanych <see cref="T:System.Activities.WorkflowInvoker" /> przez wystąpienie. <see cref="T:System.Collections.ObjectModel.Collection`1" /></span><span class="sxs-lookup"><span data-stu-id="af93f-192">Gets the <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span></span></summary>
        <value><span data-ttu-id="af93f-193">Rozszerzenia, które są dostępne dla przepływów pracy wywoływanych <see cref="T:System.Activities.WorkflowInvoker" /> przez wystąpienie. <see cref="T:System.Collections.ObjectModel.Collection`1" /></span><span class="sxs-lookup"><span data-stu-id="af93f-193">The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-194">Ta właściwość jest używana przez autorów hosta przepływu pracy do dodawania rozszerzeń do <xref:System.Activities.WorkflowInvoker> wystąpienia, dzięki czemu będą one dostępne dla przepływów pracy wywoływanych przez nią.</span><span class="sxs-lookup"><span data-stu-id="af93f-194">This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-195">Poniższy przykład rejestruje niestandardowe <xref:System.Activities.Tracking.TrackingParticipant> <xref:System.Activities.WorkflowInvoker.Extensions%2A> z kolekcją <xref:System.Activities.WorkflowInvoker> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="af93f-195">The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the <xref:System.Activities.WorkflowInvoker.Extensions%2A> collection of a <xref:System.Activities.WorkflowInvoker> instance.</span></span> <span data-ttu-id="af93f-196">Ten przykład kodu jest częścią niestandardowego przykładu [śledzenia](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) .</span><span class="sxs-lookup"><span data-stu-id="af93f-196">This code example is part of the [Custom Tracking](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="af93f-197">Wywołuje przepływ pracy synchronicznie i zwraca słownik działań <see cref="T:System.Activities.OutArgument" /> głównych i <see cref="T:System.Activities.InOutArgument" /> wartości, które odpowiadają na dane wyjściowe przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-197">Invokes a workflow synchronously and returns a dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-198">Ta metoda jest blokowana do momentu zakończenia przepływu pracy, w tym czasu bezczynności.</span><span class="sxs-lookup"><span data-stu-id="af93f-198">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="af93f-199">Wszystkie wykonywanie przepływu pracy jest gwarantowane do wykonania na wątku wywołującym.</span><span class="sxs-lookup"><span data-stu-id="af93f-199">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="af93f-200">Aby skonfigurować interwał przekroczenia limitu czasu, w którym przepływ pracy musi być zakończony, użyj <xref:System.Activities.WorkflowInvoker.Invoke%2A> jednego z przeciążeń, które <xref:System.TimeSpan>zajmie.</span><span class="sxs-lookup"><span data-stu-id="af93f-200">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="af93f-201">Wywołuje przepływ pracy synchronicznie przy użyciu definicji przepływu pracy przekazaną do <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="af93f-201">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span></span></summary>
        <returns><span data-ttu-id="af93f-202">Słownik działań <see cref="T:System.Activities.OutArgument" /> głównych i <see cref="T:System.Activities.InOutArgument" /> wartości, które są oparte na nazwie argumentu, który reprezentuje dane wyjściowe przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-202">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-203">Ta metoda jest blokowana do momentu zakończenia przepływu pracy, w tym czasu bezczynności.</span><span class="sxs-lookup"><span data-stu-id="af93f-203">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="af93f-204">Wszystkie wykonywanie przepływu pracy jest gwarantowane do wykonania na wątku wywołującym.</span><span class="sxs-lookup"><span data-stu-id="af93f-204">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="af93f-205">Aby skonfigurować interwał przekroczenia limitu czasu, w którym przepływ pracy musi być zakończony, użyj <xref:System.Activities.WorkflowInvoker.Invoke%2A> jednego z przeciążeń, które <xref:System.TimeSpan>zajmie.</span><span class="sxs-lookup"><span data-stu-id="af93f-205">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-206">Poniższy przykład wywołuje przepływ pracy składający się z pojedynczego `DiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-206">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="af93f-207">`DiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-207">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-208">Gdy wywołanie `Invoke` zwrotne zwraca, każdy argument danych wyjściowych jest zwracany w słowniku wyników, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-208">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span> <span data-ttu-id="af93f-209">Przepływ pracy jest wywoływany dwa razy, przy użyciu definicji przepływu pracy `WorkflowInvoker` przekazaną do konstruktora.</span><span class="sxs-lookup"><span data-stu-id="af93f-209">The workflow is invoked twice, using the workflow definition passed into the `WorkflowInvoker` constructor.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 <span data-ttu-id="af93f-210">Jeśli działanie główne przepływu pracy nie ma argumentów wyjściowych lub nie są one wymagane przez hosta, można je wymusić.</span><span class="sxs-lookup"><span data-stu-id="af93f-210">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="af93f-211">Poniższy przykład wywołuje przepływ pracy składający się z pojedynczego <xref:System.Activities.Statements.WriteLine> działania, które nie ma żadnych argumentów wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="af93f-211">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="af93f-212">Definicja przepływu pracy do wywołania.</span><span class="sxs-lookup"><span data-stu-id="af93f-212">The workflow definition of the workflow to invoke.</span></span></param>
        <summary><span data-ttu-id="af93f-213">Wywołuje przepływ pracy synchronicznie przy użyciu określonej definicji przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-213">Invokes a workflow synchronously using the specified workflow definition.</span></span></summary>
        <returns><span data-ttu-id="af93f-214">Słownik działań <see cref="T:System.Activities.OutArgument" /> głównych i <see cref="T:System.Activities.InOutArgument" /> wartości, które są oparte na nazwie argumentu, który reprezentuje dane wyjściowe przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-214">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-215">Ta metoda jest blokowana do momentu zakończenia przepływu pracy, w tym czasu bezczynności.</span><span class="sxs-lookup"><span data-stu-id="af93f-215">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="af93f-216">Wszystkie wykonywanie przepływu pracy jest gwarantowane do wykonania na wątku wywołującym.</span><span class="sxs-lookup"><span data-stu-id="af93f-216">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="af93f-217">Aby skonfigurować interwał przekroczenia limitu czasu, w którym przepływ pracy musi być zakończony, użyj <xref:System.Activities.WorkflowInvoker.Invoke%2A> jednego z przeciążeń, które <xref:System.TimeSpan>zajmie.</span><span class="sxs-lookup"><span data-stu-id="af93f-217">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-218">Poniższy przykład wywołuje przepływ pracy składający się z pojedynczego `DiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-218">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="af93f-219">`DiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-219">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-220">Gdy wywołanie `Invoke` zwrotne zwraca, każdy argument danych wyjściowych jest zwracany w słowniku wyników, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-220">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 <span data-ttu-id="af93f-221">Jeśli działanie główne przepływu pracy nie ma argumentów wyjściowych lub nie są one wymagane przez hosta, można je wymusić.</span><span class="sxs-lookup"><span data-stu-id="af93f-221">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="af93f-222">Poniższy przykład wywołuje przepływ pracy składający się z pojedynczego <xref:System.Activities.Statements.WriteLine> działania, które nie ma żadnych argumentów wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="af93f-222">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="af93f-223">Słownik parametrów wejściowych do przepływu pracy, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-223">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="af93f-224">Wywołuje działanie przesłane do <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> konstruktora synchronicznie z określonymi <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrami wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="af93f-224">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <returns><span data-ttu-id="af93f-225">Słownik działań <see cref="T:System.Activities.OutArgument" /> głównych i <see cref="T:System.Activities.InOutArgument" /> wartości, które są oparte na nazwie argumentu, który reprezentuje dane wyjściowe przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-225">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-226">Ta metoda jest blokowana do momentu zakończenia przepływu pracy, w tym czasu bezczynności.</span><span class="sxs-lookup"><span data-stu-id="af93f-226">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="af93f-227">Wszystkie wykonywanie przepływu pracy jest gwarantowane do wykonania na wątku wywołującym.</span><span class="sxs-lookup"><span data-stu-id="af93f-227">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="af93f-228">Aby skonfigurować interwał przekroczenia limitu czasu, w którym przepływ pracy musi być zakończony, użyj <xref:System.Activities.WorkflowInvoker.Invoke%2A> jednego z przeciążeń, które <xref:System.TimeSpan>zajmie.</span><span class="sxs-lookup"><span data-stu-id="af93f-228">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-229">Poniższy przykład wywołuje przepływ pracy składający się z pojedynczego `Divide` działania, które ma dwa argumenty wejściowe i dwa argumenty wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="af93f-229">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="af93f-230">Gdy przepływ pracy jest wywoływany, `arguments` jest przesyłany słownik zawierający wartości dla każdego argumentu wejściowego, który jest określany przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-230">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="af93f-231">Gdy wywołanie `Invoke` zwrotne zwraca, każdy argument wyjściowy jest zwracany `outputs` w słowniku, również przy użyciu nazwy argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-231">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 <span data-ttu-id="af93f-232">Jeśli przepływ pracy pochodzi z <xref:System.Activities.ActivityWithResult>, takich jak `CodeActivity<TResult>` lub `Activity<TResult>`, i istnieją argumenty wyjściowe oprócz dobrze zdefiniowanego <xref:System.Activities.Activity%601.Result%2A> argumentu wyjściowego, nieogólne Przeciążenie `Invoke`, takie jak this, musi być używane w Aby pobrać dodatkowe argumenty.</span><span class="sxs-lookup"><span data-stu-id="af93f-232">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="af93f-233">W tym celu definicja przepływu pracy przeniesiona do `WorkflowInvoker` konstruktora musi być typu. <xref:System.Activities.Activity></span><span class="sxs-lookup"><span data-stu-id="af93f-233">To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="af93f-234">W tym przykładzie `Divide` działanie pochodzi z `CodeActivity<int>`, ale jest zadeklarowane jako <xref:System.Activities.Activity> tak, że jest używane `Invoke`Przeciążenie, które zwraca słownik argumentów zamiast pojedynczej wartości zwracanej.</span><span class="sxs-lookup"><span data-stu-id="af93f-234">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="af93f-235">Interwał, w którym przepływ pracy musi zostać zakończony, zanim zostanie przerwany i <see cref="T:System.TimeoutException" /> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-235">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="af93f-236">Wywołuje przepływ pracy synchronicznie z określonym interwałem limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="af93f-236">Invokes a workflow synchronously with the specified time-out interval.</span></span></summary>
        <returns><span data-ttu-id="af93f-237">Słownik działań <see cref="T:System.Activities.OutArgument" /> głównych i <see cref="T:System.Activities.InOutArgument" /> wartości, które są oparte na nazwie argumentu, który reprezentuje dane wyjściowe przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-237">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-238">Ta metoda jest blokowana do momentu zakończenia przepływu pracy, w tym czasu bezczynności.</span><span class="sxs-lookup"><span data-stu-id="af93f-238">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="af93f-239">Wszystkie wykonywanie przepływu pracy jest gwarantowane do wykonania na wątku wywołującym.</span><span class="sxs-lookup"><span data-stu-id="af93f-239">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="af93f-240">Jeśli przepływ pracy nie zostanie ukończony w określonym limicie czasu, przepływ pracy zostanie przerwany i <xref:System.TimeoutException> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-240">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af93f-241"><xref:System.TimeoutException> Jest generowany tylko wtedy, gdy upłynie limit czasu, a przepływ pracy stanie się nieczynny podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="af93f-241">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="af93f-242">Przepływ pracy, który trwa dłużej niż określony limit czasu, zostanie zakończony pomyślnie, jeśli przepływ pracy nie stanie się bezczynny.</span><span class="sxs-lookup"><span data-stu-id="af93f-242">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-243">Poniższy przykład wywołuje przepływ pracy, który zawiera dwa <xref:System.Activities.Statements.WriteLine> działania <xref:System.Activities.Statements.Delay> i działanie skonfigurowane z <xref:System.Activities.Statements.Delay.Duration%2A> jedną minutę.</span><span class="sxs-lookup"><span data-stu-id="af93f-243">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="af93f-244">Ten przepływ pracy jest wywoływany dwukrotnie. po raz pierwszy z interwałem limitu czasu wynoszącym dwie minuty i drugim razem z interwałem limitu czasu wynoszącym 30 sekund.</span><span class="sxs-lookup"><span data-stu-id="af93f-244">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="af93f-245">Pierwszy przepływ pracy został zakończony pomyślnie, ale drugi z nich <xref:System.TimeoutException> nie jest zwracany i zostanie wyświetlony następujący komunikat.</span><span class="sxs-lookup"><span data-stu-id="af93f-245">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="af93f-246">Aby zapoznać się z przykładem użycia `Invoke` z argumentami wyjściowymi, zobacz <xref:System.Activities.WorkflowInvoker.Invoke%2A> Przeciążenie z tymi samymi parametrami co to Przeciążenie, bez interwału limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="af93f-246">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="af93f-247">Definicja przepływu pracy do wywołania.</span><span class="sxs-lookup"><span data-stu-id="af93f-247">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="af93f-248">Słownik parametrów wejściowych do przepływu pracy, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-248">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="af93f-249">Wywołuje przepływ pracy synchronicznie przy użyciu określonej definicji przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> i parametrów wejściowych.</span><span class="sxs-lookup"><span data-stu-id="af93f-249">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <returns><span data-ttu-id="af93f-250">Słownik działań <see cref="T:System.Activities.OutArgument" /> głównych i <see cref="T:System.Activities.InOutArgument" /> wartości, które są oparte na nazwie argumentu, który reprezentuje dane wyjściowe przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-250">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-251">Ta metoda jest blokowana do momentu zakończenia przepływu pracy, w tym czasu bezczynności.</span><span class="sxs-lookup"><span data-stu-id="af93f-251">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="af93f-252">Wszystkie wykonywanie przepływu pracy jest gwarantowane do wykonania na wątku wywołującym.</span><span class="sxs-lookup"><span data-stu-id="af93f-252">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="af93f-253">Aby skonfigurować interwał przekroczenia limitu czasu, w którym przepływ pracy musi być zakończony, użyj <xref:System.Activities.WorkflowInvoker.Invoke%2A> jednego z przeciążeń, które <xref:System.TimeSpan>zajmie.</span><span class="sxs-lookup"><span data-stu-id="af93f-253">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-254">Poniższy przykład wywołuje przepływ pracy składający się z pojedynczego `Divide` działania, które ma dwa argumenty wejściowe i dwa argumenty wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="af93f-254">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="af93f-255">Gdy przepływ pracy jest wywoływany, `arguments` jest przesyłany słownik zawierający wartości dla każdego argumentu wejściowego, który jest określany przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-255">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="af93f-256">Gdy wywołanie `Invoke` zwrotne zwraca, każdy argument wyjściowy jest zwracany `outputs` w słowniku, również przy użyciu nazwy argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-256">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 <span data-ttu-id="af93f-257">Jeśli przepływ pracy pochodzi z <xref:System.Activities.ActivityWithResult>, takich jak `CodeActivity<TResult>` lub `Activity<TResult>`, i istnieją argumenty wyjściowe oprócz dobrze zdefiniowanego <xref:System.Activities.Activity%601.Result%2A> argumentu wyjściowego, nieogólne Przeciążenie `Invoke`, takie jak this, musi być używane w Aby pobrać dodatkowe argumenty.</span><span class="sxs-lookup"><span data-stu-id="af93f-257">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="af93f-258">W tym celu przekazana `Invoke` definicja przepływu pracy musi być typu. <xref:System.Activities.Activity></span><span class="sxs-lookup"><span data-stu-id="af93f-258">To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="af93f-259">W tym przykładzie `Divide` działanie pochodzi z `CodeActivity<int>`, ale jest zadeklarowane jako <xref:System.Activities.Activity> tak, że jest używane `Invoke`Przeciążenie, które zwraca słownik argumentów zamiast pojedynczej wartości zwracanej.</span><span class="sxs-lookup"><span data-stu-id="af93f-259">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="af93f-260">Definicja przepływu pracy do wywołania.</span><span class="sxs-lookup"><span data-stu-id="af93f-260">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="timeout"><span data-ttu-id="af93f-261">Interwał, w którym przepływ pracy musi zostać zakończony, zanim zostanie przerwany i <see cref="T:System.TimeoutException" /> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-261">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="af93f-262">Wywołuje przepływ pracy synchronicznie przy użyciu określonej definicji przepływu pracy i interwału limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="af93f-262">Invokes a workflow synchronously using the specified workflow definition and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="af93f-263">Słownik działań <see cref="T:System.Activities.OutArgument" /> głównych i <see cref="T:System.Activities.InOutArgument" /> wartości, które są oparte na nazwie argumentu, który reprezentuje dane wyjściowe przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-263">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-264">Ta metoda jest blokowana do momentu zakończenia przepływu pracy, w tym czasu bezczynności.</span><span class="sxs-lookup"><span data-stu-id="af93f-264">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="af93f-265">Wszystkie wykonywanie przepływu pracy jest gwarantowane do wykonania na wątku wywołującym.</span><span class="sxs-lookup"><span data-stu-id="af93f-265">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="af93f-266">Jeśli przepływ pracy nie zostanie ukończony w określonym limicie czasu, przepływ pracy zostanie przerwany i <xref:System.TimeoutException> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-266">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af93f-267"><xref:System.TimeoutException> Jest generowany tylko wtedy, gdy upłynie limit czasu, a przepływ pracy stanie się nieczynny podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="af93f-267">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="af93f-268">Przepływ pracy, który trwa dłużej niż określony limit czasu, zostanie zakończony pomyślnie, jeśli przepływ pracy nie stanie się bezczynny.</span><span class="sxs-lookup"><span data-stu-id="af93f-268">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-269">Poniższy przykład wywołuje przepływ pracy, który zawiera dwa <xref:System.Activities.Statements.WriteLine> działania <xref:System.Activities.Statements.Delay> i działanie skonfigurowane z <xref:System.Activities.Statements.Delay.Duration%2A> jedną minutę.</span><span class="sxs-lookup"><span data-stu-id="af93f-269">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="af93f-270">Ten przepływ pracy jest wywoływany dwukrotnie. po raz pierwszy z interwałem limitu czasu wynoszącym dwie minuty i drugim razem z interwałem limitu czasu wynoszącym 30 sekund.</span><span class="sxs-lookup"><span data-stu-id="af93f-270">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="af93f-271">Pierwszy przepływ pracy został zakończony pomyślnie, ale drugi nie <xref:System.TimeoutException> został zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-271">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="af93f-272">Aby zapoznać się z przykładem użycia `Invoke` z argumentami wyjściowymi, zobacz <xref:System.Activities.WorkflowInvoker.Invoke%2A> Przeciążenie z tymi samymi parametrami co to Przeciążenie, bez interwału limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="af93f-272">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="af93f-273">Słownik parametrów wejściowych do przepływu pracy, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-273">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="af93f-274">Interwał, w którym przepływ pracy musi zostać zakończony, zanim zostanie przerwany i <see cref="T:System.TimeoutException" /> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-274">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="af93f-275">Wywołuje działanie przesłane do <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> konstruktora synchronicznie z określonymi <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrami wejściowymi i określonym interwałem limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="af93f-275">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span></span></summary>
        <returns><span data-ttu-id="af93f-276">Słownik działań <see cref="T:System.Activities.OutArgument" /> głównych i <see cref="T:System.Activities.InOutArgument" /> wartości, które są oparte na nazwie argumentu, który reprezentuje dane wyjściowe przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-276">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-277">Ta metoda jest blokowana do momentu zakończenia przepływu pracy, w tym czasu bezczynności.</span><span class="sxs-lookup"><span data-stu-id="af93f-277">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="af93f-278">Wszystkie wykonywanie przepływu pracy jest gwarantowane do wykonania na wątku wywołującym.</span><span class="sxs-lookup"><span data-stu-id="af93f-278">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="af93f-279">Jeśli przepływ pracy nie zostanie ukończony w określonym limicie czasu, przepływ pracy zostanie przerwany i <xref:System.TimeoutException> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-279">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af93f-280"><xref:System.TimeoutException> Jest generowany tylko wtedy, gdy upłynie limit czasu, a przepływ pracy stanie się nieczynny podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="af93f-280">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="af93f-281">Przepływ pracy, który trwa dłużej niż określony limit czasu, zostanie zakończony pomyślnie, jeśli przepływ pracy nie stanie się bezczynny.</span><span class="sxs-lookup"><span data-stu-id="af93f-281">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-282">Poniższy przykład wywołuje przepływ pracy, który zawiera dwa <xref:System.Activities.Statements.WriteLine> działania <xref:System.Activities.Statements.Delay> i działanie skonfigurowane z <xref:System.Activities.Statements.Delay.Duration%2A> jedną minutę.</span><span class="sxs-lookup"><span data-stu-id="af93f-282">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="af93f-283">Ten przepływ pracy jest wywoływany dwukrotnie. po raz pierwszy z interwałem limitu czasu wynoszącym dwie minuty i drugim razem z interwałem limitu czasu wynoszącym 30 sekund.</span><span class="sxs-lookup"><span data-stu-id="af93f-283">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="af93f-284">Pierwszy przepływ pracy został zakończony pomyślnie, ale drugi z nich <xref:System.TimeoutException> nie jest zwracany i zostanie wyświetlony następujący komunikat.</span><span class="sxs-lookup"><span data-stu-id="af93f-284">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="af93f-285">Aby zapoznać się z przykładem użycia `Invoke` z argumentami wejściowymi i wyjściowymi, zobacz <xref:System.Activities.WorkflowInvoker.Invoke%2A> Przeciążenie z takimi samymi parametrami jak to Przeciążenie, bez interwału limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="af93f-285">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="af93f-286">Definicja przepływu pracy do wywołania.</span><span class="sxs-lookup"><span data-stu-id="af93f-286">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="af93f-287">Słownik parametrów wejściowych do przepływu pracy, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-287">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="af93f-288">Interwał, w którym przepływ pracy musi zostać zakończony, zanim zostanie przerwany i <see cref="T:System.TimeoutException" /> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-288">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="af93f-289">Wywołuje przepływ pracy synchronicznie przy użyciu określonej definicji przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> , parametrów wejściowych i interwału limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="af93f-289">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="af93f-290">Słownik działań <see cref="T:System.Activities.OutArgument" /> głównych i <see cref="T:System.Activities.InOutArgument" /> wartości, które są oparte na nazwie argumentu, który reprezentuje dane wyjściowe przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-290">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-291">Ta metoda jest blokowana do momentu zakończenia przepływu pracy, w tym czasu bezczynności.</span><span class="sxs-lookup"><span data-stu-id="af93f-291">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="af93f-292">Wszystkie wykonywanie przepływu pracy jest gwarantowane do wykonania na wątku wywołującym.</span><span class="sxs-lookup"><span data-stu-id="af93f-292">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="af93f-293">Jeśli przepływ pracy nie zostanie ukończony w określonym limicie czasu, przepływ pracy zostanie przerwany i <xref:System.TimeoutException> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-293">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af93f-294"><xref:System.TimeoutException> Jest generowany tylko wtedy, gdy upłynie limit czasu, a przepływ pracy stanie się nieczynny podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="af93f-294">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="af93f-295">Przepływ pracy, który trwa dłużej niż określony limit czasu, zostanie zakończony pomyślnie, jeśli przepływ pracy nie stanie się bezczynny.</span><span class="sxs-lookup"><span data-stu-id="af93f-295">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-296">Poniższy przykład wywołuje przepływ pracy, który zawiera dwa <xref:System.Activities.Statements.WriteLine> działania <xref:System.Activities.Statements.Delay> i działanie skonfigurowane z <xref:System.Activities.Statements.Delay.Duration%2A> jedną minutę.</span><span class="sxs-lookup"><span data-stu-id="af93f-296">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="af93f-297">Ten przepływ pracy jest wywoływany dwukrotnie. po raz pierwszy z interwałem limitu czasu wynoszącym dwie minuty i drugim razem z interwałem limitu czasu wynoszącym 30 sekund.</span><span class="sxs-lookup"><span data-stu-id="af93f-297">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="af93f-298">Pierwszy przepływ pracy został zakończony pomyślnie, ale drugi nie <xref:System.TimeoutException> został zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-298">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="af93f-299">Aby zapoznać się z przykładem użycia `Invoke` z argumentami wejściowymi i wyjściowymi, zobacz <xref:System.Activities.WorkflowInvoker.Invoke%2A> Przeciążenie z takimi samymi parametrami jak to Przeciążenie, bez interwału limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="af93f-299">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="af93f-300">Typ przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-300">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="af93f-301">Definicja przepływu pracy do wywołania.</span><span class="sxs-lookup"><span data-stu-id="af93f-301">The workflow definition of the workflow to invoke.</span></span> <span data-ttu-id="af93f-302">Definicja przepływu pracy musi pochodzić od <see cref="T:System.Activities.ActivityWithResult" />.</span><span class="sxs-lookup"><span data-stu-id="af93f-302">The workflow definition needs to derive from <see cref="T:System.Activities.ActivityWithResult" />.</span></span></param>
        <summary><span data-ttu-id="af93f-303">Wywołuje przepływ pracy synchronicznie przy użyciu definicji przepływu pracy przekazaną do <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="af93f-303">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span></span></summary>
        <returns><span data-ttu-id="af93f-304">Wartość typu TResult z wynikiem wykonania działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-304">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-305">Ta metoda jest blokowana do momentu zakończenia przepływu pracy, w tym czasu bezczynności.</span><span class="sxs-lookup"><span data-stu-id="af93f-305">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="af93f-306">Wszystkie wykonywanie przepływu pracy jest gwarantowane do wykonania na wątku wywołującym.</span><span class="sxs-lookup"><span data-stu-id="af93f-306">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="af93f-307">Aby skonfigurować interwał przekroczenia limitu czasu, w którym przepływ pracy musi być zakończony, użyj <xref:System.Activities.WorkflowInvoker.Invoke%2A> jednego z przeciążeń, które <xref:System.TimeSpan>zajmie.</span><span class="sxs-lookup"><span data-stu-id="af93f-307">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-308">Poniższy przykład wywołuje przepływ pracy składający się z pojedynczego `Add` działania, które ma dwa argumenty wejściowe i ponieważ pochodzi od `CodeActivity<int>` niego, ma jeden prawidłowo zdefiniowany <xref:System.Activities.Activity%601.Result%2A> argument wyjściowy.</span><span class="sxs-lookup"><span data-stu-id="af93f-308">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="af93f-309">Gdy przepływ pracy jest wywoływany, `arguments` jest przesyłany słownik zawierający wartości dla każdego argumentu wejściowego, który jest określany przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-309">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="af93f-310">Gdy wywołanie `Invoke` funkcji zwraca, zwracana jest wartość <xref:System.Activities.Activity%601.Result%2A> argumentu wyjściowego.</span><span class="sxs-lookup"><span data-stu-id="af93f-310">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="af93f-311">Ten przykład kodu jest oparty na użyciu przykładu [klasy WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) .</span><span class="sxs-lookup"><span data-stu-id="af93f-311">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="af93f-312">Typ przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-312">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="af93f-313">Definicja przepływu pracy do wywołania.</span><span class="sxs-lookup"><span data-stu-id="af93f-313">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="af93f-314">Słownik parametrów wejściowych do przepływu pracy, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-314">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="af93f-315">Wywołuje przepływ pracy synchronicznie przy użyciu określonej definicji przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> i parametrów wejściowych.</span><span class="sxs-lookup"><span data-stu-id="af93f-315">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <returns><span data-ttu-id="af93f-316">Wartość typu TResult z wynikiem wykonania działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-316">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-317">Ta metoda jest blokowana do momentu zakończenia przepływu pracy, w tym czasu bezczynności.</span><span class="sxs-lookup"><span data-stu-id="af93f-317">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="af93f-318">Wszystkie wykonywanie przepływu pracy jest gwarantowane do wykonania na wątku wywołującym.</span><span class="sxs-lookup"><span data-stu-id="af93f-318">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="af93f-319">Aby skonfigurować interwał przekroczenia limitu czasu, w którym przepływ pracy musi być zakończony, użyj <xref:System.Activities.WorkflowInvoker.Invoke%2A> jednego z przeciążeń, które <xref:System.TimeSpan>zajmie.</span><span class="sxs-lookup"><span data-stu-id="af93f-319">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af93f-320"><xref:System.TimeoutException> Jest generowany tylko wtedy, gdy upłynie limit czasu, a przepływ pracy stanie się nieczynny podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="af93f-320">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="af93f-321">Przepływ pracy, który trwa dłużej niż określony limit czasu, zostanie zakończony pomyślnie, jeśli przepływ pracy nie stanie się bezczynny.</span><span class="sxs-lookup"><span data-stu-id="af93f-321">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-322">Poniższy przykład wywołuje przepływ pracy składający się z pojedynczego `Add` działania, które ma dwa argumenty wejściowe i ponieważ pochodzi od `CodeActivity<int>` niego, ma jeden prawidłowo zdefiniowany <xref:System.Activities.Activity%601.Result%2A> argument wyjściowy.</span><span class="sxs-lookup"><span data-stu-id="af93f-322">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="af93f-323">Gdy przepływ pracy jest wywoływany, `arguments` jest przesyłany słownik zawierający wartości dla każdego argumentu wejściowego, który jest określany przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-323">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="af93f-324">Gdy wywołanie `Invoke` funkcji zwraca, zwracana jest wartość <xref:System.Activities.Activity%601.Result%2A> argumentu wyjściowego.</span><span class="sxs-lookup"><span data-stu-id="af93f-324">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="af93f-325">Ten przykład kodu jest oparty na użyciu przykładu [klasy WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) .</span><span class="sxs-lookup"><span data-stu-id="af93f-325">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="af93f-326">Typ przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-326">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="af93f-327">Definicja przepływu pracy do wywołania.</span><span class="sxs-lookup"><span data-stu-id="af93f-327">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="af93f-328">Słownik parametrów wejściowych do przepływu pracy, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-328">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="af93f-329">Interwał, w którym przepływ pracy musi zostać zakończony, zanim zostanie przerwany i <see cref="T:System.TimeoutException" /> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-329">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="af93f-330">Wywołuje przepływ pracy synchronicznie przy użyciu określonej definicji przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> , parametrów wejściowych i interwału limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="af93f-330">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="af93f-331">Wartość typu TResult z wynikiem wykonania działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-331">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-332">Ta metoda jest blokowana do momentu zakończenia przepływu pracy, w tym czasu bezczynności.</span><span class="sxs-lookup"><span data-stu-id="af93f-332">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="af93f-333">Wszystkie wykonywanie przepływu pracy jest gwarantowane do wykonania na wątku wywołującym.</span><span class="sxs-lookup"><span data-stu-id="af93f-333">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="af93f-334">Jeśli przepływ pracy nie zostanie ukończony w określonym limicie czasu, przepływ pracy zostanie przerwany i <xref:System.TimeoutException> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-334">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af93f-335"><xref:System.TimeoutException> Jest generowany tylko wtedy, gdy upłynie limit czasu, a przepływ pracy stanie się nieczynny podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="af93f-335">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="af93f-336">Przepływ pracy, który trwa dłużej niż określony limit czasu, zostanie zakończony pomyślnie, jeśli przepływ pracy nie stanie się bezczynny.</span><span class="sxs-lookup"><span data-stu-id="af93f-336">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-337">Poniższy przykład wywołuje przepływ pracy składający się z pojedynczego `Add` działania, które ma dwa argumenty wejściowe i ponieważ pochodzi od `CodeActivity<int>` niego, ma jeden prawidłowo zdefiniowany <xref:System.Activities.Activity%601.Result%2A> argument wyjściowy.</span><span class="sxs-lookup"><span data-stu-id="af93f-337">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="af93f-338">Gdy przepływ pracy jest wywoływany, `arguments` jest przesyłany słownik zawierający wartości dla każdego argumentu wejściowego, który jest określany przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-338">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="af93f-339">Gdy wywołanie `Invoke` funkcji zwraca, zwracana jest wartość <xref:System.Activities.Activity%601.Result%2A> argumentu wyjściowego.</span><span class="sxs-lookup"><span data-stu-id="af93f-339">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="af93f-340">Ten przykład kodu jest oparty na użyciu przykładu [klasy WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) .</span><span class="sxs-lookup"><span data-stu-id="af93f-340">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; *  * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="af93f-341">Typ przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-341">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="af93f-342">Definicja przepływu pracy do wywołania.</span><span class="sxs-lookup"><span data-stu-id="af93f-342">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="af93f-343">Słownik parametrów wejściowych do przepływu pracy, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-343">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="additionalOutputs"><span data-ttu-id="af93f-344">Słownik dodatkowych parametrów wyjściowych przepływu pracy, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-344">The dictionary of additional output parameters of the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="af93f-345">Interwał, w którym przepływ pracy musi zostać zakończony, zanim zostanie przerwany i <see cref="T:System.TimeoutException" /> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-345">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="af93f-346">Wywołuje przepływ pracy synchronicznie przy użyciu określonej definicji przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> , parametrów wejściowych, <see cref="T:System.Collections.Generic.IDictionary`2" /> dodatkowych parametrów wyjściowych i interwału limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="af93f-346">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.Collections.Generic.IDictionary`2" /> of additional output parameters, and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="af93f-347">Wartość typu TResult z wynikiem wykonania działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-347">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-348">Ta metoda jest blokowana do momentu zakończenia przepływu pracy, w tym czasu bezczynności.</span><span class="sxs-lookup"><span data-stu-id="af93f-348">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="af93f-349">Wszystkie wykonywanie przepływu pracy jest gwarantowane do wykonania na wątku wywołującym.</span><span class="sxs-lookup"><span data-stu-id="af93f-349">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="af93f-350">Jeśli przepływ pracy nie zostanie ukończony w określonym limicie czasu, przepływ pracy zostanie przerwany i <xref:System.TimeoutException> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-350">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af93f-351"><xref:System.TimeoutException> Jest generowany tylko wtedy, gdy upłynie limit czasu, a przepływ pracy stanie się nieczynny podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="af93f-351">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="af93f-352">Przepływ pracy, który trwa dłużej niż określony limit czasu, zostanie zakończony pomyślnie, jeśli przepływ pracy nie stanie się bezczynny.</span><span class="sxs-lookup"><span data-stu-id="af93f-352">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-353">Poniższy przykład wywołuje przepływ pracy składający się z pojedynczego `Add` działania, które ma dwa argumenty wejściowe i ponieważ pochodzi od `CodeActivity<int>` niego, ma jeden prawidłowo zdefiniowany <xref:System.Activities.Activity%601.Result%2A> argument wyjściowy.</span><span class="sxs-lookup"><span data-stu-id="af93f-353">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="af93f-354">Gdy przepływ pracy jest wywoływany, `arguments` jest przesyłany słownik zawierający wartości dla każdego argumentu wejściowego, który jest określany przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-354">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="af93f-355">Gdy wywołanie `Invoke` funkcji zwraca, zwracana jest wartość <xref:System.Activities.Activity%601.Result%2A> argumentu wyjściowego.</span><span class="sxs-lookup"><span data-stu-id="af93f-355">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="af93f-356">Ten przykład kodu jest oparty na użyciu przykładu [klasy WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) .</span><span class="sxs-lookup"><span data-stu-id="af93f-356">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="af93f-357">Asynchronicznie wywołuje przepływ pracy przy użyciu asynchronicznego wzorca projektowego opartego na zdarzeniach.</span><span class="sxs-lookup"><span data-stu-id="af93f-357">Invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-358">Aby otrzymywać powiadomienia po zakończeniu przepływu pracy, dojście <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="af93f-358">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="af93f-359">Aby skonfigurować interwał przekroczenia limitu czasu, w którym przepływ pracy musi być zakończony, użyj <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> jednego z przeciążeń, które <xref:System.TimeSpan>zajmie.</span><span class="sxs-lookup"><span data-stu-id="af93f-359">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="af93f-360">Ta metoda wywołuje przepływ pracy asynchronicznie przy użyciu asynchronicznego wzorca projektowego opartego na zdarzeniach.</span><span class="sxs-lookup"><span data-stu-id="af93f-360">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="af93f-361">Aby uzyskać więcej informacji, zobacz [Omówienie asynchronicznego wzorca opartego na zdarzeniach](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="af93f-361">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="af93f-362">Asynchronicznie wywołuje przepływ pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-362">Invokes a workflow asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-363">Aby otrzymywać powiadomienia po zakończeniu przepływu pracy, dojście <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="af93f-363">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="af93f-364">Aby skonfigurować interwał przekroczenia limitu czasu, w którym przepływ pracy musi być zakończony, użyj <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> jednego z przeciążeń, które <xref:System.TimeSpan>zajmie.</span><span class="sxs-lookup"><span data-stu-id="af93f-364">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="af93f-365">Ta metoda wywołuje przepływ pracy asynchronicznie przy użyciu asynchronicznego wzorca projektowego opartego na zdarzeniach.</span><span class="sxs-lookup"><span data-stu-id="af93f-365">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="af93f-366">Aby uzyskać więcej informacji, zobacz [Omówienie asynchronicznego wzorca opartego na zdarzeniach](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="af93f-366">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-367">Poniższy przykład wywołuje przepływ pracy składający się z `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-367">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="af93f-368">`LongRunningDiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-368">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-369">Po zakończeniu przepływu pracy zostaną one pobrane w programie <xref:System.Activities.WorkflowInvoker.InvokeCompleted> obsługi.</span><span class="sxs-lookup"><span data-stu-id="af93f-369">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="af93f-370">Słownik parametrów wejściowych do przepływu pracy, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-370">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="af93f-371">Wywołuje przepływ pracy asynchronicznie przy użyciu <see cref="T:System.Collections.Generic.IDictionary`2" /> określonych parametrów wejściowych.</span><span class="sxs-lookup"><span data-stu-id="af93f-371">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-372">Aby otrzymywać powiadomienia po zakończeniu przepływu pracy, dojście <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="af93f-372">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="af93f-373">Aby skonfigurować interwał przekroczenia limitu czasu, w którym przepływ pracy musi być zakończony, użyj <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> jednego z przeciążeń, które <xref:System.TimeSpan>zajmie.</span><span class="sxs-lookup"><span data-stu-id="af93f-373">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="af93f-374">Ta metoda wywołuje przepływ pracy asynchronicznie przy użyciu asynchronicznego wzorca projektowego opartego na zdarzeniach.</span><span class="sxs-lookup"><span data-stu-id="af93f-374">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="af93f-375">Aby uzyskać więcej informacji, zobacz [Omówienie asynchronicznego wzorca opartego na zdarzeniach](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="af93f-375">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-376">Poniższy przykład wywołuje przepływ pracy składający się z `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-376">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="af93f-377">`LongRunningDiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-377">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-378">Po zakończeniu przepływu pracy zostaną one pobrane w programie <xref:System.Activities.WorkflowInvoker.InvokeCompleted> obsługi.</span><span class="sxs-lookup"><span data-stu-id="af93f-378">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState"><span data-ttu-id="af93f-379">Obiekt dostarczony przez użytkownika służący do rozróżnienia tej konkretnej asynchronicznej operacji Invoke z innych bieżących asynchronicznych operacji Invoke.</span><span class="sxs-lookup"><span data-stu-id="af93f-379">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="af93f-380">Wywołuje przepływ pracy asynchronicznie przy użyciu określonego unikatowego identyfikatora.</span><span class="sxs-lookup"><span data-stu-id="af93f-380">Invokes a workflow asynchronously using the specified unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-381">Parametr musi być unikatowy we wszystkich aktualnie uruchomionych <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operacjach dla bieżącego działania. `userState`</span><span class="sxs-lookup"><span data-stu-id="af93f-381">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="af93f-382">Jeśli parametr nie jest unikatowy <xref:System.ArgumentException> , zostanie zgłoszony. `userState`</span><span class="sxs-lookup"><span data-stu-id="af93f-382">If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="af93f-383">`userState`służy do identyfikowania przepływu pracy w <xref:System.Activities.WorkflowInvoker.InvokeCompleted>programie oraz do anulowania przepływu pracy przy <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>użyciu.</span><span class="sxs-lookup"><span data-stu-id="af93f-383">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="af93f-384">Aby otrzymywać powiadomienia po zakończeniu przepływu pracy, dojście <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="af93f-384">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="af93f-385">Aby skonfigurować interwał przekroczenia limitu czasu, w którym przepływ pracy musi być zakończony, użyj <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> jednego z przeciążeń, które <xref:System.TimeSpan>zajmie.</span><span class="sxs-lookup"><span data-stu-id="af93f-385">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="af93f-386">Ta metoda wywołuje przepływ pracy asynchronicznie przy użyciu asynchronicznego wzorca projektowego opartego na zdarzeniach.</span><span class="sxs-lookup"><span data-stu-id="af93f-386">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="af93f-387">Aby uzyskać więcej informacji, zobacz [Omówienie asynchronicznego wzorca opartego na zdarzeniach](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="af93f-387">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-388">Poniższy przykład wywołuje przepływ pracy składający się z `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-388">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="af93f-389">`LongRunningDiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-389">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-390">Po zakończeniu przepływu pracy zostaną one pobrane w programie <xref:System.Activities.WorkflowInvoker.InvokeCompleted> obsługi.</span><span class="sxs-lookup"><span data-stu-id="af93f-390">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="af93f-391">Interwał, w którym przepływ pracy musi zostać zakończony, zanim zostanie przerwany i <see cref="T:System.TimeoutException" /> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-391">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="af93f-392">Wywołuje przepływ pracy asynchronicznie z określonym interwałem limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="af93f-392">Invokes a workflow asynchronously with the specified time-out interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-393">Aby otrzymywać powiadomienia po zakończeniu przepływu pracy, dojście <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="af93f-393">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="af93f-394">Jeśli przepływ pracy nie zostanie ukończony w określonym limicie czasu, przepływ pracy zostanie przerwany i <xref:System.TimeoutException> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-394">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af93f-395"><xref:System.TimeoutException> Jest generowany tylko wtedy, gdy upłynie limit czasu, a przepływ pracy stanie się nieczynny podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="af93f-395">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="af93f-396">Przepływ pracy, który trwa dłużej niż określony limit czasu, zostanie zakończony pomyślnie, jeśli przepływ pracy nie stanie się bezczynny.</span><span class="sxs-lookup"><span data-stu-id="af93f-396">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="af93f-397">Ta metoda wywołuje przepływ pracy asynchronicznie przy użyciu asynchronicznego wzorca projektowego opartego na zdarzeniach.</span><span class="sxs-lookup"><span data-stu-id="af93f-397">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="af93f-398">Aby uzyskać więcej informacji, zobacz [Omówienie asynchronicznego wzorca opartego na zdarzeniach](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="af93f-398">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-399">Poniższy przykład wywołuje przepływ pracy składający się z `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-399">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="af93f-400">`LongRunningDiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-400">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-401">Po zakończeniu przepływu pracy zostaną one pobrane w programie <xref:System.Activities.WorkflowInvoker.InvokeCompleted> obsługi.</span><span class="sxs-lookup"><span data-stu-id="af93f-401">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="af93f-402">Słownik parametrów wejściowych do przepływu pracy, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-402">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="userState"><span data-ttu-id="af93f-403">Obiekt dostarczony przez użytkownika służący do rozróżnienia tej konkretnej asynchronicznej operacji Invoke z innych bieżących asynchronicznych operacji Invoke.</span><span class="sxs-lookup"><span data-stu-id="af93f-403">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="af93f-404">Wywołuje przepływ pracy asynchronicznie przy użyciu <see cref="T:System.Collections.Generic.IDictionary`2" /> określonych parametrów wejściowych i unikatowych identyfikatorów.</span><span class="sxs-lookup"><span data-stu-id="af93f-404">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and a unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-405">Parametr musi być unikatowy we wszystkich aktualnie uruchomionych <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operacjach dla bieżącego działania. `userState`</span><span class="sxs-lookup"><span data-stu-id="af93f-405">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="af93f-406">Jeśli `userState` nie jest unikatowa <xref:System.ArgumentException> , zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-406">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="af93f-407">`userState`służy do identyfikowania przepływu pracy w <xref:System.Activities.WorkflowInvoker.InvokeCompleted>programie oraz do anulowania przepływu pracy przy <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>użyciu.</span><span class="sxs-lookup"><span data-stu-id="af93f-407">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="af93f-408">Aby otrzymywać powiadomienia po zakończeniu przepływu pracy, dojście <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="af93f-408">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="af93f-409">Aby skonfigurować interwał przekroczenia limitu czasu, w którym przepływ pracy musi być zakończony, użyj <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> jednego z przeciążeń, które <xref:System.TimeSpan>zajmie.</span><span class="sxs-lookup"><span data-stu-id="af93f-409">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="af93f-410">Ta metoda wywołuje przepływ pracy asynchronicznie przy użyciu asynchronicznego wzorca projektowego opartego na zdarzeniach.</span><span class="sxs-lookup"><span data-stu-id="af93f-410">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="af93f-411">Aby uzyskać więcej informacji, zobacz [Omówienie asynchronicznego wzorca opartego na zdarzeniach](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="af93f-411">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-412">Poniższy przykład wywołuje przepływ pracy składający się z `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-412">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="af93f-413">`LongRunningDiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-413">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-414">Po zakończeniu przepływu pracy zostaną one pobrane w programie <xref:System.Activities.WorkflowInvoker.InvokeCompleted> obsługi.</span><span class="sxs-lookup"><span data-stu-id="af93f-414">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="af93f-415">Słownik parametrów wejściowych do przepływu pracy, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-415">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="af93f-416">Interwał, w którym przepływ pracy musi zostać zakończony, zanim zostanie przerwany i <see cref="T:System.TimeoutException" /> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-416">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="af93f-417">Wywołuje przepływ pracy asynchronicznie z określonymi <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrami wejściowymi i określonym interwałem limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="af93f-417">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-418">Aby otrzymywać powiadomienia po zakończeniu przepływu pracy, dojście <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="af93f-418">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="af93f-419">Jeśli przepływ pracy nie zostanie ukończony w określonym limicie czasu, przepływ pracy zostanie przerwany i <xref:System.TimeoutException> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-419">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af93f-420"><xref:System.TimeoutException> Jest generowany tylko wtedy, gdy upłynie limit czasu, a przepływ pracy stanie się nieczynny podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="af93f-420">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="af93f-421">Przepływ pracy, który trwa dłużej niż określony limit czasu, zostanie zakończony pomyślnie, jeśli przepływ pracy nie stanie się bezczynny.</span><span class="sxs-lookup"><span data-stu-id="af93f-421">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="af93f-422">Ta metoda wywołuje przepływ pracy asynchronicznie przy użyciu asynchronicznego wzorca projektowego opartego na zdarzeniach.</span><span class="sxs-lookup"><span data-stu-id="af93f-422">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="af93f-423">Aby uzyskać więcej informacji, zobacz [Omówienie asynchronicznego wzorca opartego na zdarzeniach](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="af93f-423">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-424">Poniższy przykład wywołuje przepływ pracy składający się z `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-424">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="af93f-425">`LongRunningDiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-425">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-426">Po zakończeniu przepływu pracy zostaną one pobrane w programie <xref:System.Activities.WorkflowInvoker.InvokeCompleted> obsługi.</span><span class="sxs-lookup"><span data-stu-id="af93f-426">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="af93f-427">Interwał, w którym przepływ pracy musi zostać zakończony, zanim zostanie przerwany i <see cref="T:System.TimeoutException" /> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-427">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="userState"><span data-ttu-id="af93f-428">Obiekt dostarczony przez użytkownika służący do rozróżnienia tej konkretnej asynchronicznej operacji Invoke z innych bieżących asynchronicznych operacji Invoke.</span><span class="sxs-lookup"><span data-stu-id="af93f-428">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="af93f-429">Wywołuje przepływ pracy asynchronicznie z określonym interwałem limitu czasu i unikatowym identyfikatorem.</span><span class="sxs-lookup"><span data-stu-id="af93f-429">Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-430">Parametr musi być unikatowy we wszystkich aktualnie uruchomionych <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operacjach dla bieżącego działania. `userState`</span><span class="sxs-lookup"><span data-stu-id="af93f-430">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="af93f-431">Jeśli `userState` nie jest unikatowa <xref:System.ArgumentException> , zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-431">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="af93f-432">`userState`służy do identyfikowania przepływu pracy w <xref:System.Activities.WorkflowInvoker.InvokeCompleted>programie oraz do anulowania przepływu pracy przy <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>użyciu.</span><span class="sxs-lookup"><span data-stu-id="af93f-432">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="af93f-433">Aby otrzymywać powiadomienia po zakończeniu przepływu pracy, dojście <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="af93f-433">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="af93f-434">Jeśli przepływ pracy nie zostanie ukończony w określonym limicie czasu, przepływ pracy zostanie przerwany i <xref:System.TimeoutException> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-434">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af93f-435"><xref:System.TimeoutException> Jest generowany tylko wtedy, gdy upłynie limit czasu, a przepływ pracy stanie się nieczynny podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="af93f-435">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="af93f-436">Przepływ pracy, który trwa dłużej niż określony limit czasu, zostanie zakończony pomyślnie, jeśli przepływ pracy nie stanie się bezczynny.</span><span class="sxs-lookup"><span data-stu-id="af93f-436">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="af93f-437">Ta metoda wywołuje przepływ pracy asynchronicznie przy użyciu asynchronicznego wzorca projektowego opartego na zdarzeniach.</span><span class="sxs-lookup"><span data-stu-id="af93f-437">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="af93f-438">Aby uzyskać więcej informacji, zobacz [Omówienie asynchronicznego wzorca opartego na zdarzeniach](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="af93f-438">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-439">Poniższy przykład wywołuje przepływ pracy składający się z `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-439">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="af93f-440">`LongRunningDiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-440">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-441">Po zakończeniu przepływu pracy zostaną one pobrane w programie <xref:System.Activities.WorkflowInvoker.InvokeCompleted> obsługi.</span><span class="sxs-lookup"><span data-stu-id="af93f-441">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="af93f-442">Słownik parametrów wejściowych do przepływu pracy, który jest poprzedzony przez nazwę argumentu.</span><span class="sxs-lookup"><span data-stu-id="af93f-442">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="af93f-443">Interwał, w którym przepływ pracy musi zostać zakończony, zanim zostanie przerwany i <see cref="T:System.TimeoutException" /> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-443">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="userState"><span data-ttu-id="af93f-444">Obiekt dostarczony przez użytkownika służący do rozróżnienia tej konkretnej asynchronicznej operacji Invoke z innych bieżących asynchronicznych operacji Invoke.</span><span class="sxs-lookup"><span data-stu-id="af93f-444">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="af93f-445">Wywołuje przepływ pracy asynchronicznie z określonymi <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrami wejściowymi, określonym interwałem limitu czasu i unikatowym identyfikatorem.</span><span class="sxs-lookup"><span data-stu-id="af93f-445">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, the specified time-out interval, and a unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-446">Parametr musi być unikatowy we wszystkich aktualnie uruchomionych <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operacjach dla bieżącego działania. `userState`</span><span class="sxs-lookup"><span data-stu-id="af93f-446">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="af93f-447">Jeśli `userState` nie jest unikatowa <xref:System.ArgumentException> , zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-447">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="af93f-448">`userState`służy do identyfikowania przepływu pracy w <xref:System.Activities.WorkflowInvoker.InvokeCompleted>programie oraz do anulowania przepływu pracy przy <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>użyciu.</span><span class="sxs-lookup"><span data-stu-id="af93f-448">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="af93f-449">Aby otrzymywać powiadomienia po zakończeniu przepływu pracy, dojście <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="af93f-449">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="af93f-450">Jeśli przepływ pracy nie zostanie ukończony w określonym limicie czasu, przepływ pracy zostanie przerwany i <xref:System.TimeoutException> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="af93f-450">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af93f-451"><xref:System.TimeoutException> Jest generowany tylko wtedy, gdy upłynie limit czasu, a przepływ pracy stanie się nieczynny podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="af93f-451">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="af93f-452">Przepływ pracy, który trwa dłużej niż określony limit czasu, zostanie zakończony pomyślnie, jeśli przepływ pracy nie stanie się bezczynny.</span><span class="sxs-lookup"><span data-stu-id="af93f-452">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="af93f-453">Ta metoda wywołuje przepływ pracy asynchronicznie przy użyciu asynchronicznego wzorca projektowego opartego na zdarzeniach.</span><span class="sxs-lookup"><span data-stu-id="af93f-453">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="af93f-454">Aby uzyskać więcej informacji, zobacz [Omówienie asynchronicznego wzorca opartego na zdarzeniach](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="af93f-454">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-455">Poniższy przykład wywołuje przepływ pracy składający się z `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-455">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="af93f-456">`LongRunningDiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-456">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-457">Po zakończeniu przepływu pracy zostaną one pobrane w programie <xref:System.Activities.WorkflowInvoker.InvokeCompleted> obsługi.</span><span class="sxs-lookup"><span data-stu-id="af93f-457">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="af93f-458">Występuje, gdy przepływ pracy wywoływany przez jedno <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> z przeciążeń zostanie ukończony lub anulowany.</span><span class="sxs-lookup"><span data-stu-id="af93f-458">Occurs when the workflow invoked by one of the <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> overloads is completed or canceled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af93f-459">Obsłuż to, aby określić, czy przepływ pracy wywołany <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> z jednym z przeciążeń został pomyślnie zakończony i pobrać argumenty wyjściowe ukończonego przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="af93f-459">Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af93f-460">Poniższy przykład wywołuje przepływ pracy składający się z `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="af93f-460">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="af93f-461">`LongRunningDiceRoll` Działanie ma dwa argumenty wyjściowe, które reprezentują wyniki operacji rzutowania indeksu.</span><span class="sxs-lookup"><span data-stu-id="af93f-461">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="af93f-462">Po zakończeniu przepływu pracy zostaną one pobrane w programie <xref:System.Activities.WorkflowInvoker.InvokeCompleted> obsługi.</span><span class="sxs-lookup"><span data-stu-id="af93f-462">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
