<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c72945be5ca2e82d6b9cbb6f146755c137b85aa0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="8df13-101">Umożliwia wywoływanie przepływu pracy, jak w przypadku wywołania metody.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8df13-101">Provides a means for invoking a workflow as if it were a method call.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-102"><xref:System.Activities.WorkflowInvoker> zawiera wystąpienie i metody statyczne do wywoływania synchronicznie przepływów pracy i wystąpienia metody do wywołania asynchroniczne przepływy pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-102"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
 <span data-ttu-id="8df13-103"><xref:System.Activities.WorkflowInvoker> nie zezwala na wystąpienie kontrolki przykład przechowywanie, zwalnianie lub wznawianie zakładki.</span><span class="sxs-lookup"><span data-stu-id="8df13-103"><xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks.</span></span> <span data-ttu-id="8df13-104">W razie potrzeby sterowania wystąpienia użyj <xref:System.Activities.WorkflowApplication> zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="8df13-104">If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.</span></span>  
  
 <span data-ttu-id="8df13-105">Aby wykonywać przepływy pracy synchronicznie przy użyciu kontrolka nie wystąpienia, należy wywołać <xref:System.Activities.WorkflowInvoker.Invoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="8df13-105">To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method.</span></span> <span data-ttu-id="8df13-106">Aby wykonać asynchronicznie z formantem nie wystąpienie przepływu pracy, użyj <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> i <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> pary metody lub <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> — metoda.</span><span class="sxs-lookup"><span data-stu-id="8df13-106">To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-107">Poniższy przykład wywołuje synchronicznie przepływu pracy składającą się z pojedynczej <xref:System.Activities.Statements.WriteLine> działania przy użyciu <xref:System.Activities.WorkflowInvoker>.</span><span class="sxs-lookup"><span data-stu-id="8df13-107">The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using <xref:System.Activities.WorkflowInvoker>.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="8df13-108">Definicji przepływu pracy do wywołania przez to wystąpienie przepływu pracy <see cref="T:System.Activities.WorkflowInvoker" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-108">The workflow definition of the workflow to be invoked by this instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-109">Inicjuje nowe wystąpienie klasy <see cref="T:System.Activities.WorkflowInvoker" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-109">Initializes a new instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-110"><xref:System.Activities.WorkflowInvoker> zawiera wystąpienie i metody statyczne do wywoływania synchronicznie przepływów pracy i wystąpienia metody do wywołania asynchroniczne przepływy pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-110"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-111">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej <xref:System.Activities.Statements.WriteLine> działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-111">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8df13-112">Wywołuje asynchronicznie za pomocą przepływu pracy <see cref="T:System.IAsyncResult" /> wzorca projektowego asynchronicznego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-112">Invokes a workflow asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="8df13-113"> [Omówienie programowania asynchronicznego](http://go.microsoft.com/fwlink/?LinkId=141764).</span><span class="sxs-lookup"><span data-stu-id="8df13-113"> [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="8df13-114">Metoda wywoływana, gdy przepływ pracy został ukończony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-114">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="8df13-115">Opcjonalne obiekt specyficzne dla aplikacji, który zawiera informacje o operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-115">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-116">Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.AsyncCallback" /> i stanu użytkownika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-116">Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-117">Odwołanie do asynchronicznego wywołania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-117">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-118">Powiadomienie po zakończeniu przepływu pracy i pobieranie parametrów wyjściowych przepływu pracy, należy wywołać <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> z `callback` metody.</span><span class="sxs-lookup"><span data-stu-id="8df13-118">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="8df13-119">Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed zakończeniem przepływu pracy, blokuje do momentu ukończenia przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-119">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="8df13-120">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads które trwają <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="8df13-120">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="8df13-121">Ta metoda wywołuje asynchronicznie za pomocą przepływu pracy <xref:System.IAsyncResult> wzorca projektowego asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="8df13-121">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="8df13-122"> [Omówienie programowania asynchronicznego](http://go.microsoft.com/fwlink/?LinkId=141764).</span><span class="sxs-lookup"><span data-stu-id="8df13-122"> [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-123">Poniższy przykład przedstawia wywoływanie składające się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-123">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="8df13-124">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-124">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-125">Są one pobierane przez wywołanie metody <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="8df13-125">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="8df13-126">Po wywołaniu <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwraca każdy argument wyjściowy jest zwracany w słowniku danych wyjściowych, wyznaczaną przez Nazwa argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-126">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="8df13-127">Słownik zawierający parametry wejściowe w przepływie pracy, wyznaczaną przez Nazwa argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-127">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="8df13-128">Metoda wywoływana, gdy przepływ pracy został ukończony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-128">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="8df13-129">Opcjonalne obiekt specyficzne dla aplikacji, który zawiera informacje o operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-129">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-130">Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych <see cref="T:System.AsyncCallback" />i stanu użytkownika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-130">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-131">Odwołanie do asynchronicznego wywołania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-131">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-132">Powiadomienie po zakończeniu przepływu pracy i pobieranie parametrów wyjściowych przepływu pracy, należy wywołać <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> z `callback` metody.</span><span class="sxs-lookup"><span data-stu-id="8df13-132">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="8df13-133">Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed zakończeniem przepływu pracy, blokuje do momentu ukończenia przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-133">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  <span data-ttu-id="8df13-134">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads które trwają <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="8df13-134">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="8df13-135">Ta metoda wywołuje asynchronicznie za pomocą przepływu pracy <xref:System.IAsyncResult> wzorca projektowego asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="8df13-135">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="8df13-136"> [Omówienie programowania asynchronicznego](http://go.microsoft.com/fwlink/?LinkId=141764).</span><span class="sxs-lookup"><span data-stu-id="8df13-136"> [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-137">Poniższy przykład przedstawia wywoływanie składające się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-137">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="8df13-138">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-138">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-139">Są one pobierane przez wywołanie metody <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="8df13-139">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="8df13-140">Po wywołaniu <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwraca każdy argument wyjściowy jest zwracany w słowniku danych wyjściowych, wyznaczaną przez Nazwa argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-140">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="8df13-141">Interwał przepływu pracy należy wykonać, zanim jest zostało przerwane i a <see cref="T:System.TimeoutException" /> jest generowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-141">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="8df13-142">Metoda wywoływana, gdy przepływ pracy został ukończony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-142">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="8df13-143">Opcjonalne obiekt specyficzne dla aplikacji, który zawiera informacje o operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-143">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-144">Wywołuje asynchronicznie za pomocą określony limit czasu, przepływ pracy <see cref="T:System.AsyncCallback" />i stanu użytkownika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-144">Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-145">Odwołanie do asynchronicznego wywołania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-145">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-146">Powiadomienie po zakończeniu przepływu pracy i pobieranie parametrów wyjściowych przepływu pracy, należy wywołać <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> z `callback` metody.</span><span class="sxs-lookup"><span data-stu-id="8df13-146">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="8df13-147">Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed zakończeniem przepływu pracy, blokuje do momentu ukończenia przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-147">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="8df13-148">Jeśli przepływ pracy nie zostanie zakończone w ramach określonego limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> jest generowany, gdy <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="8df13-148">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8df13-149"><xref:System.TimeoutException> Jest tylko element zgłaszany, gdy upłynie limit czasu, a przepływ pracy przestanie być bezczynne podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="8df13-149">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="8df13-150">Przepływ pracy, który będzie trwało dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-150">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="8df13-151">Ta metoda wywołuje asynchronicznie za pomocą przepływu pracy <xref:System.IAsyncResult> wzorca projektowego asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="8df13-151">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="8df13-152"> [Omówienie programowania asynchronicznego](http://go.microsoft.com/fwlink/?LinkId=141764).</span><span class="sxs-lookup"><span data-stu-id="8df13-152"> [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-153">Poniższy przykład przedstawia wywoływanie składające się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-153">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="8df13-154">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-154">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-155">Są one pobierane przez wywołanie metody <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="8df13-155">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="8df13-156">Po wywołaniu <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwraca każdy argument wyjściowy jest zwracany w słowniku danych wyjściowych, wyznaczaną przez Nazwa argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-156">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="8df13-157">Słownik zawierający parametry wejściowe w przepływie pracy, wyznaczaną przez Nazwa argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-157">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8df13-158">Interwał przepływu pracy należy wykonać, zanim jest zostało przerwane i a <see cref="T:System.TimeoutException" /> jest generowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-158">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="8df13-159">Metoda wywoływana, gdy przepływ pracy został ukończony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-159">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="8df13-160">Opcjonalne obiekt specyficzne dla aplikacji, który zawiera informacje o operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-160">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-161">Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych, limit czasu <see cref="T:System.AsyncCallback" />i stanu użytkownika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-161">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-162">Odwołanie do asynchronicznego wywołania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-162">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-163">Powiadomienie po zakończeniu przepływu pracy i pobieranie parametrów wyjściowych przepływu pracy, należy wywołać <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> z `callback` metody.</span><span class="sxs-lookup"><span data-stu-id="8df13-163">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="8df13-164">Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed zakończeniem przepływu pracy, blokuje do momentu ukończenia przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-164">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="8df13-165">Jeśli przepływ pracy nie zostanie zakończone w ramach określonego limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> jest generowany, gdy <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="8df13-165">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8df13-166"><xref:System.TimeoutException> Jest tylko element zgłaszany, gdy upłynie limit czasu, a przepływ pracy przestanie być bezczynne podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="8df13-166">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="8df13-167">Przepływ pracy, który będzie trwało dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-167">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="8df13-168">Ta metoda wywołuje asynchronicznie za pomocą przepływu pracy <xref:System.IAsyncResult> wzorca projektowego asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="8df13-168">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="8df13-169"> [Omówienie programowania asynchronicznego](http://go.microsoft.com/fwlink/?LinkId=141764).</span><span class="sxs-lookup"><span data-stu-id="8df13-169"> [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-170">Poniższy przykład przedstawia wywoływanie składające się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-170">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="8df13-171">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-171">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-172">Są one pobierane przez wywołanie metody <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="8df13-172">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="8df13-173">Po wywołaniu <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwraca każdy argument wyjściowy jest zwracany w słowniku danych wyjściowych, wyznaczaną przez Nazwa argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-173">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">
          <span data-ttu-id="8df13-174">Token anulować przepływ pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-174">The token for the workflow to cancel.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-175">Próbuje anulować przepływu pracy, który został wywołany z określonym <paramref name="userState" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-175">Attempts to cancel the workflow that was invoked with the specified <paramref name="userState" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-176">Tylko przepływ pracy wywołany przez jedną z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> przeciążeń, które przyjmuje `userState` parametru może być anulowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-176">Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.</span></span>  
  
 <span data-ttu-id="8df13-177">Jeśli anulowanie zakończy się powodzeniem, <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> właściwość <xref:System.Activities.InvokeCompletedEventArgs> przekazany do <xref:System.Activities.WorkflowInvoker.InvokeCompleted> program obsługi ma ustawioną wartość `true`; w przeciwnym razie wartość jest równa `false`.</span><span class="sxs-lookup"><span data-stu-id="8df13-177">If the cancellation succeeds, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-178">Poniższy przykład przedstawia wywoływanie składające się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-178">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="8df13-179">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-179">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-180">Gdy przepływ pracy zostanie wywołany, host próbuje anulować przepływ pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-180">Once the workflow is invoked, the host attempts to cancel the workflow.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="8df13-181">
            <see cref="T:System.IAsyncResult" /> , Która odwołuje się <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operacji, który uruchomił przepływ pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-181">The <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operation that started the workflow.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-182">Zwraca wyniki do przepływu pracy, który został wywołany za pomocą jednego z <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> przeciążenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-182">Returns the results of a workflow that was invoked using one of the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> overloads.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-183">Słownik działanie główne <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości wyznaczaną przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-183">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-184">Powiadomienie po zakończeniu przepływu pracy i pobieranie parametrów wyjściowych przepływu pracy, należy wywołać <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> z `callback` metodą określoną przez <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="8df13-184">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span></span> <span data-ttu-id="8df13-185">Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed zakończeniem przepływu pracy, blokuje do momentu ukończenia przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-185">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  
  
 <span data-ttu-id="8df13-186">Ta metoda zwraca wynik przepływu pracy wywołany asynchronicznie za pomocą <xref:System.IAsyncResult> wzorca projektowego asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="8df13-186">This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="8df13-187"> [Omówienie programowania asynchronicznego](http://go.microsoft.com/fwlink/?LinkId=141764).</span><span class="sxs-lookup"><span data-stu-id="8df13-187"> [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-188">Poniższy przykład przedstawia wywoływanie składające się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-188">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="8df13-189">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-189">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-190">Są one pobierane przez wywołanie metody <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="8df13-190">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="8df13-191">Po wywołaniu <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwraca każdy argument wyjściowy jest zwracany w słowniku danych wyjściowych, wyznaczaną przez Nazwa argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-191">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8df13-192">Pobiera <see cref="T:System.Collections.ObjectModel.Collection`1" /> rozszerzeń, które są dostępne dla przepływów pracy wywołany przez <see cref="T:System.Activities.WorkflowInvoker" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-192">Gets the <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8df13-193">
            <see cref="T:System.Collections.ObjectModel.Collection`1" /> Rozszerzeń, które są dostępne dla przepływów pracy wywołany przez <see cref="T:System.Activities.WorkflowInvoker" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-193">The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-194">Ta właściwość jest używana przez autorów hosta przepływu pracy można dodać rozszerzenia do <xref:System.Activities.WorkflowInvoker> wystąpienia, więc będą one dostępne do przepływów pracy wywołany przez nią.</span><span class="sxs-lookup"><span data-stu-id="8df13-194">This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-195">Poniższy przykład rejestruje niestandardowego <xref:System.Activities.Tracking.TrackingParticipant> z <xref:System.Activities.WorkflowInvoker.Extensions%2A> Kolekcja <xref:System.Activities.WorkflowInvoker> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="8df13-195">The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the <xref:System.Activities.WorkflowInvoker.Extensions%2A> collection of a <xref:System.Activities.WorkflowInvoker> instance.</span></span> <span data-ttu-id="8df13-196">Ten przykładowy kod jest częścią [śledzenia niestandardowe](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) próbki.</span><span class="sxs-lookup"><span data-stu-id="8df13-196">This code example is part of the [Custom Tracking](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8df13-197">Wywołuje synchronicznie przepływu pracy i zwraca słownik działanie główne <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości wyznaczaną przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-197">Invokes a workflow synchronously and returns a dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-198">Ten uniemożliwia metody dopiero po ukończeniu przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-198">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="8df13-199">Wszystkie wykonywania przepływu pracy jest gwarantowana do wykonania na wywoływanie wątku.</span><span class="sxs-lookup"><span data-stu-id="8df13-199">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="8df13-200">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads które trwają <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="8df13-200">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8df13-201">Wywołuje synchronicznie przy użyciu definicji przepływu pracy przekazywany do przepływu pracy <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> konstruktora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-201">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-202">Słownik działanie główne <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości wyznaczaną przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-202">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-203">Ten uniemożliwia metody dopiero po ukończeniu przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-203">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="8df13-204">Wszystkie wykonywania przepływu pracy jest gwarantowana do wykonania na wywoływanie wątku.</span><span class="sxs-lookup"><span data-stu-id="8df13-204">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="8df13-205">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads które trwają <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="8df13-205">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-206">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `DiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-206">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="8df13-207">`DiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-207">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-208">Po wywołaniu `Invoke` zwraca każdy argument wyjściowy jest zwracany w słowniku danych wyjściowych, wyznaczaną przez Nazwa argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-208">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span> <span data-ttu-id="8df13-209">Przepływ pracy jest wywoływana dwukrotnie przy użyciu definicji przepływu pracy przekazany `WorkflowInvoker` konstruktora.</span><span class="sxs-lookup"><span data-stu-id="8df13-209">The workflow is invoked twice, using the workflow definition passed into the `WorkflowInvoker` constructor.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 <span data-ttu-id="8df13-210">Jeśli nie są wymagane przez hosta przepływu pracy działania głównego nie ma argumentów danych wyjściowych, można być ignorowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-210">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="8df13-211">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej <xref:System.Activities.Statements.WriteLine> działanie, które nie ma żadnych danych wyjściowych argumentów.</span><span class="sxs-lookup"><span data-stu-id="8df13-211">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="8df13-212">Definicja przepływu pracy przepływu pracy do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-212">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-213">Wywołuje synchronicznie przy użyciu określonego przepływu pracy definicji przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-213">Invokes a workflow synchronously using the specified workflow definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-214">Słownik działanie główne <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości wyznaczaną przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-214">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-215">Ten uniemożliwia metody dopiero po ukończeniu przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-215">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="8df13-216">Wszystkie wykonywania przepływu pracy jest gwarantowana do wykonania na wywoływanie wątku.</span><span class="sxs-lookup"><span data-stu-id="8df13-216">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="8df13-217">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads które trwają <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="8df13-217">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-218">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `DiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-218">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="8df13-219">`DiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-219">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-220">Po wywołaniu `Invoke` zwraca każdy argument wyjściowy jest zwracany w słowniku danych wyjściowych, wyznaczaną przez Nazwa argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-220">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 <span data-ttu-id="8df13-221">Jeśli nie są wymagane przez hosta przepływu pracy działania głównego nie ma argumentów danych wyjściowych, można być ignorowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-221">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="8df13-222">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej <xref:System.Activities.Statements.WriteLine> działanie, które nie ma żadnych danych wyjściowych argumentów.</span><span class="sxs-lookup"><span data-stu-id="8df13-222">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="8df13-223">Słownik zawierający parametry wejściowe w przepływie pracy, wyznaczaną przez Nazwa argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-223">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-224">Wywołuje aktywność przekazany do <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> Konstruktor synchronicznie przy użyciu określonego <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-224">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-225">Słownik działanie główne <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości wyznaczaną przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-225">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-226">Ten uniemożliwia metody dopiero po ukończeniu przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-226">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="8df13-227">Wszystkie wykonywania przepływu pracy jest gwarantowana do wykonania na wywoływanie wątku.</span><span class="sxs-lookup"><span data-stu-id="8df13-227">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="8df13-228">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads które trwają <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="8df13-228">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-229">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Divide` działanie, czy ma dwa argumenty w danych wejściowych i wyjściowych dwóch argumentów.</span><span class="sxs-lookup"><span data-stu-id="8df13-229">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="8df13-230">Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywany, która zawiera wartości dla każdego wejścia argumentu, wyznaczaną przez Nazwa argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-230">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="8df13-231">Po wywołaniu `Invoke` zwraca każdy argument wyjściowy jest zwracany w `outputs` słownika, także klucze w postaci nazwy argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-231">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 <span data-ttu-id="8df13-232">Jeśli przepływ pracy jest pochodną <xref:System.Activities.ActivityWithResult>, takich jak `CodeActivity<TResult>` lub `Activity<TResult>`, i argumenty wyjściowe oprócz dobrze zdefiniowany <xref:System.Activities.Activity%601.Result%2A> output argumentu, przeciążenia nieogólnego `Invoke`, taki jak ta, musi być używany w Aby pobrać dodatkowe argumenty.</span><span class="sxs-lookup"><span data-stu-id="8df13-232">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="8df13-233">Aby to zrobić, definicji przepływu pracy przekazany `WorkflowInvoker` Konstruktor musi być typu <xref:System.Activities.Activity>.</span><span class="sxs-lookup"><span data-stu-id="8df13-233">To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="8df13-234">W tym przykładzie `Divide` działania jest pochodną `CodeActivity<int>`, ale jest zadeklarowany jako <xref:System.Activities.Activity> tak, aby to przeciążenia z `Invoke`, zwraca słownika argumentów zamiast pojedynczego zwracanej wartości, jest używany.</span><span class="sxs-lookup"><span data-stu-id="8df13-234">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="8df13-235">Interwał przepływu pracy należy wykonać, zanim jest zostało przerwane i a <see cref="T:System.TimeoutException" /> jest generowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-235">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-236">Wywołuje przepływu pracy synchronicznie przy użyciu określonego limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-236">Invokes a workflow synchronously with the specified time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-237">Słownik działanie główne <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości wyznaczaną przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-237">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-238">Ten uniemożliwia metody dopiero po ukończeniu przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-238">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="8df13-239">Wszystkie wykonywania przepływu pracy jest gwarantowana do wykonania na wywoływanie wątku.</span><span class="sxs-lookup"><span data-stu-id="8df13-239">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="8df13-240">Jeśli przepływ pracy nie zostanie zakończone w ramach określonego limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="8df13-240">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8df13-241"><xref:System.TimeoutException> Jest tylko element zgłaszany, gdy upłynie limit czasu, a przepływ pracy przestanie być bezczynne podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="8df13-241">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="8df13-242">Przepływ pracy, który będzie trwało dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-242">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-243">Poniższy przykład przedstawia wywoływanie przepływu pracy, który zawiera dwa <xref:System.Activities.Statements.WriteLine> działań i <xref:System.Activities.Statements.Delay> działania skonfigurowano <xref:System.Activities.Statements.Delay.Duration%2A> jednej minuty.</span><span class="sxs-lookup"><span data-stu-id="8df13-243">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="8df13-244">Ten przepływ pracy jest wywoływana dwukrotnie; po raz pierwszy z limitu czasu wynosi dwie minuty, a za drugim razem z limit czasu wynoszący 30 sekund.</span><span class="sxs-lookup"><span data-stu-id="8df13-244">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="8df13-245">Pierwszy przepływu pracy zostało ukończone pomyślnie, ale nie ma jeden i <xref:System.TimeoutException> jest zgłaszany i zostanie wyświetlony następujący komunikat.</span><span class="sxs-lookup"><span data-stu-id="8df13-245">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="8df13-246">Na przykład za pomocą `Invoke` z danych wyjściowych argumentami, zobacz przeciążenia <xref:System.Activities.WorkflowInvoker.Invoke%2A> o takich samych parametrach co tego przeciążenia bez limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="8df13-246">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="8df13-247">Definicja przepływu pracy przepływu pracy do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-247">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="8df13-248">Słownik zawierający parametry wejściowe w przepływie pracy, wyznaczaną przez Nazwa argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-248">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-249">Wywołuje synchronicznie przy użyciu określonego przepływu pracy definicji przepływu pracy i <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-249">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-250">Słownik działanie główne <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości wyznaczaną przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-250">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-251">Ten uniemożliwia metody dopiero po ukończeniu przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-251">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="8df13-252">Wszystkie wykonywania przepływu pracy jest gwarantowana do wykonania na wywoływanie wątku.</span><span class="sxs-lookup"><span data-stu-id="8df13-252">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="8df13-253">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads które trwają <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="8df13-253">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-254">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Divide` działanie, czy ma dwa argumenty w danych wejściowych i wyjściowych dwóch argumentów.</span><span class="sxs-lookup"><span data-stu-id="8df13-254">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="8df13-255">Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywany, która zawiera wartości dla każdego wejścia argumentu, wyznaczaną przez Nazwa argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-255">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="8df13-256">Po wywołaniu `Invoke` zwraca każdy argument wyjściowy jest zwracany w `outputs` słownika, także klucze w postaci nazwy argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-256">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 <span data-ttu-id="8df13-257">Jeśli przepływ pracy jest pochodną <xref:System.Activities.ActivityWithResult>, takich jak `CodeActivity<TResult>` lub `Activity<TResult>`, i argumenty wyjściowe oprócz dobrze zdefiniowany <xref:System.Activities.Activity%601.Result%2A> output argumentu, przeciążenia nieogólnego `Invoke`, taki jak ta, musi być używany w Aby pobrać dodatkowe argumenty.</span><span class="sxs-lookup"><span data-stu-id="8df13-257">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="8df13-258">Aby to zrobić, definicji przepływu pracy przekazany `Invoke` musi być typu <xref:System.Activities.Activity>.</span><span class="sxs-lookup"><span data-stu-id="8df13-258">To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="8df13-259">W tym przykładzie `Divide` działania jest pochodną `CodeActivity<int>`, ale jest zadeklarowany jako <xref:System.Activities.Activity> tak, aby to przeciążenia z `Invoke`, zwraca słownika argumentów zamiast pojedynczego zwracanej wartości, jest używany.</span><span class="sxs-lookup"><span data-stu-id="8df13-259">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="8df13-260">Definicja przepływu pracy przepływu pracy do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-260">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8df13-261">Interwał przepływu pracy należy wykonać, zanim jest zostało przerwane i a <see cref="T:System.TimeoutException" /> jest generowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-261">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-262">Wywołuje przepływu pracy synchronicznie przy użyciu definicji określonego przepływu pracy i interwał limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-262">Invokes a workflow synchronously using the specified workflow definition and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-263">Słownik działanie główne <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości wyznaczaną przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-263">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-264">Ten uniemożliwia metody dopiero po ukończeniu przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-264">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="8df13-265">Wszystkie wykonywania przepływu pracy jest gwarantowana do wykonania na wywoływanie wątku.</span><span class="sxs-lookup"><span data-stu-id="8df13-265">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="8df13-266">Jeśli przepływ pracy nie zostanie zakończone w ramach określonego limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="8df13-266">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8df13-267"><xref:System.TimeoutException> Jest tylko element zgłaszany, gdy upłynie limit czasu, a przepływ pracy przestanie być bezczynne podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="8df13-267">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="8df13-268">Przepływ pracy, który będzie trwało dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-268">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-269">Poniższy przykład przedstawia wywoływanie przepływu pracy, który zawiera dwa <xref:System.Activities.Statements.WriteLine> działań i <xref:System.Activities.Statements.Delay> działania skonfigurowano <xref:System.Activities.Statements.Delay.Duration%2A> jednej minuty.</span><span class="sxs-lookup"><span data-stu-id="8df13-269">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="8df13-270">Ten przepływ pracy jest wywoływana dwukrotnie; po raz pierwszy z limitu czasu wynosi dwie minuty, a za drugim razem z limit czasu wynoszący 30 sekund.</span><span class="sxs-lookup"><span data-stu-id="8df13-270">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="8df13-271">Pierwszy przepływu pracy zostało ukończone pomyślnie, ale nie ma jeden i <xref:System.TimeoutException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="8df13-271">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="8df13-272">Na przykład za pomocą `Invoke` z danych wyjściowych argumentami, zobacz przeciążenia <xref:System.Activities.WorkflowInvoker.Invoke%2A> o takich samych parametrach co tego przeciążenia bez limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="8df13-272">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="8df13-273">Słownik zawierający parametry wejściowe w przepływie pracy, wyznaczaną przez Nazwa argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-273">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8df13-274">Interwał przepływu pracy należy wykonać, zanim jest zostało przerwane i a <see cref="T:System.TimeoutException" /> jest generowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-274">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-275">Wywołuje aktywność przekazany do <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> Konstruktor synchronicznie przy użyciu określonego <see cref="T:System.Collections.Generic.IDictionary`2" /> parametry wejściowe i określonego limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-275">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-276">Słownik działanie główne <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości wyznaczaną przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-276">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-277">Ten uniemożliwia metody dopiero po ukończeniu przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-277">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="8df13-278">Wszystkie wykonywania przepływu pracy jest gwarantowana do wykonania na wywoływanie wątku.</span><span class="sxs-lookup"><span data-stu-id="8df13-278">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="8df13-279">Jeśli przepływ pracy nie zostanie zakończone w ramach określonego limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="8df13-279">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8df13-280"><xref:System.TimeoutException> Jest tylko element zgłaszany, gdy upłynie limit czasu, a przepływ pracy przestanie być bezczynne podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="8df13-280">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="8df13-281">Przepływ pracy, który będzie trwało dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-281">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-282">Poniższy przykład przedstawia wywoływanie przepływu pracy, który zawiera dwa <xref:System.Activities.Statements.WriteLine> działań i <xref:System.Activities.Statements.Delay> działania skonfigurowano <xref:System.Activities.Statements.Delay.Duration%2A> jednej minuty.</span><span class="sxs-lookup"><span data-stu-id="8df13-282">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="8df13-283">Ten przepływ pracy jest wywoływana dwukrotnie; po raz pierwszy z limitu czasu wynosi dwie minuty, a za drugim razem z limit czasu wynoszący 30 sekund.</span><span class="sxs-lookup"><span data-stu-id="8df13-283">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="8df13-284">Pierwszy przepływu pracy zostało ukończone pomyślnie, ale nie ma jeden i <xref:System.TimeoutException> jest zgłaszany i zostanie wyświetlony następujący komunikat.</span><span class="sxs-lookup"><span data-stu-id="8df13-284">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="8df13-285">Na przykład za pomocą `Invoke` argumentów wejściowych i wyjściowych, zobacz przeciążenia <xref:System.Activities.WorkflowInvoker.Invoke%2A> o takich samych parametrach co tego przeciążenia bez limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="8df13-285">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="8df13-286">Definicja przepływu pracy przepływu pracy do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-286">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="8df13-287">Słownik zawierający parametry wejściowe w przepływie pracy, wyznaczaną przez Nazwa argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-287">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8df13-288">Interwał przepływu pracy należy wykonać, zanim jest zostało przerwane i a <see cref="T:System.TimeoutException" /> jest generowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-288">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-289">Wywołuje synchronicznie przy użyciu definicji przepływu pracy określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametry wejściowe i interwał limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-289">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-290">Słownik działanie główne <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości wyznaczaną przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-290">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-291">Ten uniemożliwia metody dopiero po ukończeniu przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-291">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="8df13-292">Wszystkie wykonywania przepływu pracy jest gwarantowana do wykonania na wywoływanie wątku.</span><span class="sxs-lookup"><span data-stu-id="8df13-292">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="8df13-293">Jeśli przepływ pracy nie zostanie zakończone w ramach określonego limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="8df13-293">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8df13-294"><xref:System.TimeoutException> Jest tylko element zgłaszany, gdy upłynie limit czasu, a przepływ pracy przestanie być bezczynne podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="8df13-294">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="8df13-295">Przepływ pracy, który będzie trwało dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-295">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-296">Poniższy przykład przedstawia wywoływanie przepływu pracy, który zawiera dwa <xref:System.Activities.Statements.WriteLine> działań i <xref:System.Activities.Statements.Delay> działania skonfigurowano <xref:System.Activities.Statements.Delay.Duration%2A> jednej minuty.</span><span class="sxs-lookup"><span data-stu-id="8df13-296">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="8df13-297">Ten przepływ pracy jest wywoływana dwukrotnie; po raz pierwszy z limitu czasu wynosi dwie minuty, a za drugim razem z limit czasu wynoszący 30 sekund.</span><span class="sxs-lookup"><span data-stu-id="8df13-297">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="8df13-298">Pierwszy przepływu pracy zostało ukończone pomyślnie, ale nie ma jeden i <xref:System.TimeoutException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="8df13-298">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="8df13-299">Na przykład za pomocą `Invoke` argumentów wejściowych i wyjściowych, zobacz przeciążenia <xref:System.Activities.WorkflowInvoker.Invoke%2A> o takich samych parametrach co tego przeciążenia bez limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="8df13-299">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="8df13-300">Typ przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-300">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="8df13-301">Definicja przepływu pracy przepływu pracy do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-301">The workflow definition of the workflow to invoke.</span>
          </span>
          <span data-ttu-id="8df13-302">Definicji przepływu pracy musi pochodzić od <see cref="T:System.Activities.ActivityWithResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-302">The workflow definition needs to derive from <see cref="T:System.Activities.ActivityWithResult" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-303">Wywołuje synchronicznie przy użyciu definicji przepływu pracy przekazywany do przepływu pracy <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> konstruktora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-303">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-304">Wartości typu TResult w wyniku wykonania działania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-304">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-305">Ten uniemożliwia metody dopiero po ukończeniu przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-305">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="8df13-306">Wszystkie wykonywania przepływu pracy jest gwarantowana do wykonania na wywoływanie wątku.</span><span class="sxs-lookup"><span data-stu-id="8df13-306">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="8df13-307">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads które trwają <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="8df13-307">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-308">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Add` działania, która ma dwa argumenty wejściowe i ponieważ dziedziczy `CodeActivity<int>` istnieje dobrze zdefiniowany <xref:System.Activities.Activity%601.Result%2A> output argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-308">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="8df13-309">Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywany, która zawiera wartości dla każdego wejścia argumentu, wyznaczaną przez Nazwa argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-309">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="8df13-310">Po wywołaniu `Invoke` zwraca wartość <xref:System.Activities.Activity%601.Result%2A> argument wyjściowy jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="8df13-310">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="8df13-311">W tym przykładzie kodu jest oparta na off z [za pomocą klasy WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) próbki.</span><span class="sxs-lookup"><span data-stu-id="8df13-311">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="8df13-312">Typ przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-312">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="8df13-313">Definicja przepływu pracy przepływu pracy do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-313">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="8df13-314">Słownik zawierający parametry wejściowe w przepływie pracy, wyznaczaną przez Nazwa argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-314">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-315">Wywołuje synchronicznie przy użyciu określonego przepływu pracy definicji przepływu pracy i <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-315">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-316">Wartości typu TResult w wyniku wykonania działania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-316">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-317">Ten uniemożliwia metody dopiero po ukończeniu przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-317">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="8df13-318">Wszystkie wykonywania przepływu pracy jest gwarantowana do wykonania na wywoływanie wątku.</span><span class="sxs-lookup"><span data-stu-id="8df13-318">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="8df13-319">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads które trwają <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="8df13-319">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8df13-320"><xref:System.TimeoutException> Jest tylko element zgłaszany, gdy upłynie limit czasu, a przepływ pracy przestanie być bezczynne podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="8df13-320">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="8df13-321">Przepływ pracy, który będzie trwało dłużej niż interwał określony limit czasu, aby zakończyć, zakończy się pomyślnie, jeśli przepływ pracy przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-321">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-322">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Add` działania, która ma dwa argumenty wejściowe i ponieważ dziedziczy `CodeActivity<int>` istnieje dobrze zdefiniowany <xref:System.Activities.Activity%601.Result%2A> output argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-322">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="8df13-323">Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywany, która zawiera wartości dla każdego wejścia argumentu, wyznaczaną przez Nazwa argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-323">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="8df13-324">Po wywołaniu `Invoke` zwraca wartość <xref:System.Activities.Activity%601.Result%2A> argument wyjściowy jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="8df13-324">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="8df13-325">W tym przykładzie kodu jest oparta na off z [za pomocą klasy WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) próbki.</span><span class="sxs-lookup"><span data-stu-id="8df13-325">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="8df13-326">Typ przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-326">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="8df13-327">Definicja przepływu pracy przepływu pracy do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-327">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="8df13-328">Słownik zawierający parametry wejściowe w przepływie pracy, wyznaczaną przez Nazwa argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-328">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8df13-329">Interwał przepływu pracy należy wykonać, zanim jest zostało przerwane i a <see cref="T:System.TimeoutException" /> jest generowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-329">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-330">Wywołuje synchronicznie przy użyciu definicji przepływu pracy określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametry wejściowe i interwał limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-330">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-331">Wartości typu TResult w wyniku wykonania działania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-331">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-332">Ten uniemożliwia metody dopiero po ukończeniu przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-332">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="8df13-333">Wszystkie wykonywania przepływu pracy jest gwarantowana do wykonania na wywoływanie wątku.</span><span class="sxs-lookup"><span data-stu-id="8df13-333">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="8df13-334">Jeśli przepływ pracy nie zostanie zakończone w ramach określonego limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="8df13-334">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8df13-335"><xref:System.TimeoutException> Jest tylko element zgłaszany, gdy upłynie limit czasu, a przepływ pracy przestanie być bezczynne podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="8df13-335">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="8df13-336">Przepływ pracy, który będzie trwało dłużej niż interwał określony limit czasu, aby zakończyć, zakończy się pomyślnie, jeśli przepływ pracy przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-336">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-337">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Add` działania, która ma dwa argumenty wejściowe i ponieważ dziedziczy `CodeActivity<int>` istnieje dobrze zdefiniowany <xref:System.Activities.Activity%601.Result%2A> output argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-337">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="8df13-338">Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywany, która zawiera wartości dla każdego wejścia argumentu, wyznaczaną przez Nazwa argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-338">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="8df13-339">Po wywołaniu `Invoke` zwraca wartość <xref:System.Activities.Activity%601.Result%2A> argument wyjściowy jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="8df13-339">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="8df13-340">W tym przykładzie kodu jest oparta na off z [za pomocą klasy WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) próbki.</span><span class="sxs-lookup"><span data-stu-id="8df13-340">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;&amp;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="8df13-341">Typ przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-341">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="8df13-342">Definicja przepływu pracy przepływu pracy do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-342">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="8df13-343">Słownik zawierający parametry wejściowe w przepływie pracy, wyznaczaną przez Nazwa argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-343">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="additionalOutputs">
          <span data-ttu-id="8df13-344">Słownik zawierający dodatkowe dane wyjściowe parametry przepływu pracy, wyznaczaną przez Nazwa argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-344">The dictionary of additional output parameters of the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8df13-345">Interwał przepływu pracy należy wykonać, zanim jest zostało przerwane i a <see cref="T:System.TimeoutException" /> jest generowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-345">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-346">Wywołuje synchronicznie przy użyciu definicji przepływu pracy określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów dodatkowe dane wyjściowe i interwał limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-346">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.Collections.Generic.IDictionary`2" /> of additional output parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8df13-347">Wartości typu TResult w wyniku wykonania działania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-347">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-348">Ten uniemożliwia metody dopiero po ukończeniu przepływu pracy, w tym czas bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-348">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="8df13-349">Wszystkie wykonywania przepływu pracy jest gwarantowana do wykonania na wywoływanie wątku.</span><span class="sxs-lookup"><span data-stu-id="8df13-349">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="8df13-350">Jeśli przepływ pracy nie zostanie zakończone w ramach określonego limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="8df13-350">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8df13-351"><xref:System.TimeoutException> Jest tylko element zgłaszany, gdy upłynie limit czasu, a przepływ pracy przestanie być bezczynne podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="8df13-351">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="8df13-352">Przepływ pracy, który będzie trwało dłużej niż interwał określony limit czasu, aby zakończyć, zakończy się pomyślnie, jeśli przepływ pracy przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-352">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-353">Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Add` działania, która ma dwa argumenty wejściowe i ponieważ dziedziczy `CodeActivity<int>` istnieje dobrze zdefiniowany <xref:System.Activities.Activity%601.Result%2A> output argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-353">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="8df13-354">Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywany, która zawiera wartości dla każdego wejścia argumentu, wyznaczaną przez Nazwa argumentu.</span><span class="sxs-lookup"><span data-stu-id="8df13-354">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="8df13-355">Po wywołaniu `Invoke` zwraca wartość <xref:System.Activities.Activity%601.Result%2A> argument wyjściowy jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="8df13-355">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="8df13-356">W tym przykładzie kodu jest oparta na off z [za pomocą klasy WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) próbki.</span><span class="sxs-lookup"><span data-stu-id="8df13-356">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8df13-357">Wywołuje asynchronicznie za pomocą opartego na zdarzeniach asynchroniczne wzorcu przepływ pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-357">Invokes a workflow asynchronously using the event-based asynchronous design pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-358">Aby otrzymać powiadomienie po zakończeniu przepływu pracy, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="8df13-358">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="8df13-359">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads które trwają <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="8df13-359">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="8df13-360">Ta metoda wywołuje asynchronicznie za pomocą opartego na zdarzeniach asynchroniczne wzorcu przepływ pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-360">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="8df13-361"> [Omówienie wzorca asynchronicznego opartego na zdarzeniach](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="8df13-361"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8df13-362">Wywołuje asynchronicznie przepływ pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-362">Invokes a workflow asynchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-363">Aby otrzymać powiadomienie po zakończeniu przepływu pracy, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="8df13-363">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="8df13-364">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads które trwają <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="8df13-364">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="8df13-365">Ta metoda wywołuje asynchronicznie za pomocą opartego na zdarzeniach asynchroniczne wzorcu przepływ pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-365">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="8df13-366"> [Omówienie wzorca asynchronicznego opartego na zdarzeniach](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="8df13-366"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-367">Poniższy przykład przedstawia wywoływanie składające się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-367">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="8df13-368">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-368">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-369">Po zakończeniu tych przepływu pracy są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="8df13-369">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="8df13-370">Słownik zawierający parametry wejściowe w przepływie pracy, wyznaczaną przez Nazwa argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-370">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-371">Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-371">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-372">Aby otrzymać powiadomienie po zakończeniu przepływu pracy, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="8df13-372">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="8df13-373">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads które trwają <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="8df13-373">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="8df13-374">Ta metoda wywołuje asynchronicznie za pomocą opartego na zdarzeniach asynchroniczne wzorcu przepływ pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-374">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="8df13-375"> [Omówienie wzorca asynchronicznego opartego na zdarzeniach](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="8df13-375"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-376">Poniższy przykład przedstawia wywoływanie składające się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-376">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="8df13-377">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-377">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-378">Po zakończeniu tych przepływu pracy są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="8df13-378">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">
          <span data-ttu-id="8df13-379">Obiekt użytkownika używane do odróżnienia tego określonego asynchroniczne wywołać operację od innych bieżącego asynchronicznego wywołania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-379">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-380">Wywołuje asynchronicznie za pomocą określonego Unikatowy identyfikator przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-380">Invokes a workflow asynchronously using the specified unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-381">`userState` Parametru musi być unikatowa we wszystkich aktualnie uruchomionych <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operacje dla bieżącego działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-381">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="8df13-382">Jeśli `userState` parametru nie jest unikatowa, <xref:System.ArgumentException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="8df13-382">If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="8df13-383">`userState` Służy do identyfikowania przepływu pracy w <xref:System.Activities.WorkflowInvoker.InvokeCompleted>i Anuluj przy użyciu przepływu pracy <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="8df13-383">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="8df13-384">Aby otrzymać powiadomienie po zakończeniu przepływu pracy, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="8df13-384">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="8df13-385">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads które trwają <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="8df13-385">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="8df13-386">Ta metoda wywołuje asynchronicznie za pomocą opartego na zdarzeniach asynchroniczne wzorcu przepływ pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-386">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="8df13-387"> [Omówienie wzorca asynchronicznego opartego na zdarzeniach](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="8df13-387"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-388">Poniższy przykład przedstawia wywoływanie składające się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-388">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="8df13-389">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-389">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-390">Po zakończeniu tych przepływu pracy są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="8df13-390">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="8df13-391">Interwał przepływu pracy należy wykonać, zanim jest zostało przerwane i a <see cref="T:System.TimeoutException" /> jest generowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-391">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-392">Wywołuje asynchronicznie z określonego limitu czasu przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-392">Invokes a workflow asynchronously with the specified time-out interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-393">Aby otrzymać powiadomienie po zakończeniu przepływu pracy, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="8df13-393">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="8df13-394">Jeśli przepływ pracy nie zostanie zakończone w ramach określonego limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="8df13-394">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8df13-395"><xref:System.TimeoutException> Jest tylko element zgłaszany, gdy upłynie limit czasu, a przepływ pracy przestanie być bezczynne podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="8df13-395">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="8df13-396">Przepływ pracy, który będzie trwało dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-396">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="8df13-397">Ta metoda wywołuje asynchronicznie za pomocą opartego na zdarzeniach asynchroniczne wzorcu przepływ pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-397">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="8df13-398"> [Omówienie wzorca asynchronicznego opartego na zdarzeniach](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="8df13-398"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-399">Poniższy przykład przedstawia wywoływanie składające się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-399">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="8df13-400">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-400">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-401">Po zakończeniu tych przepływu pracy są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="8df13-401">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="8df13-402">Słownik zawierający parametry wejściowe w przepływie pracy, wyznaczaną przez Nazwa argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-402">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="8df13-403">Obiekt użytkownika używane do odróżnienia tego określonego asynchroniczne wywołać operację od innych bieżącego asynchronicznego wywołania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-403">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-404">Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametry wejściowe i unikatowym identyfikatorem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-404">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-405">`userState` Parametru musi być unikatowa we wszystkich aktualnie uruchomionych <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operacje dla bieżącego działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-405">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="8df13-406">Jeśli `userState` nie jest unikatowa, <xref:System.ArgumentException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="8df13-406">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="8df13-407">`userState` Służy do identyfikowania przepływu pracy w <xref:System.Activities.WorkflowInvoker.InvokeCompleted>i Anuluj przy użyciu przepływu pracy <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="8df13-407">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="8df13-408">Aby otrzymać powiadomienie po zakończeniu przepływu pracy, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="8df13-408">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="8df13-409">Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads które trwają <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="8df13-409">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="8df13-410">Ta metoda wywołuje asynchronicznie za pomocą opartego na zdarzeniach asynchroniczne wzorcu przepływ pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-410">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="8df13-411"> [Omówienie wzorca asynchronicznego opartego na zdarzeniach](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="8df13-411"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-412">Poniższy przykład przedstawia wywoływanie składające się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-412">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="8df13-413">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-413">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-414">Po zakończeniu tych przepływu pracy są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="8df13-414">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="8df13-415">Słownik zawierający parametry wejściowe w przepływie pracy, wyznaczaną przez Nazwa argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-415">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8df13-416">Interwał przepływu pracy należy wykonać, zanim jest zostało przerwane i a <see cref="T:System.TimeoutException" /> jest generowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-416">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-417">Wywołuje asynchronicznie z określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametry wejściowe i określonego limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-417">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-418">Aby otrzymać powiadomienie po zakończeniu przepływu pracy, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="8df13-418">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="8df13-419">Jeśli przepływ pracy nie zostanie zakończone w ramach określonego limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="8df13-419">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8df13-420"><xref:System.TimeoutException> Jest tylko element zgłaszany, gdy upłynie limit czasu, a przepływ pracy przestanie być bezczynne podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="8df13-420">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="8df13-421">Przepływ pracy, który będzie trwało dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-421">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="8df13-422">Ta metoda wywołuje asynchronicznie za pomocą opartego na zdarzeniach asynchroniczne wzorcu przepływ pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-422">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="8df13-423"> [Omówienie wzorca asynchronicznego opartego na zdarzeniach](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="8df13-423"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-424">Poniższy przykład przedstawia wywoływanie składające się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-424">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="8df13-425">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-425">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-426">Po zakończeniu tych przepływu pracy są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="8df13-426">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="8df13-427">Interwał przepływu pracy należy wykonać, zanim jest zostało przerwane i a <see cref="T:System.TimeoutException" /> jest generowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-427">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="8df13-428">Obiekt użytkownika używane do odróżnienia tego określonego asynchroniczne wywołać operację od innych bieżącego asynchronicznego wywołania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-428">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-429">Wywołuje asynchronicznie z określonego limitu czasu i unikatowy identyfikator przepływu pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-429">Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-430">`userState` Parametru musi być unikatowa we wszystkich aktualnie uruchomionych <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operacje dla bieżącego działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-430">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="8df13-431">Jeśli `userState` nie jest unikatowa, <xref:System.ArgumentException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="8df13-431">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="8df13-432">`userState` Służy do identyfikowania przepływu pracy w <xref:System.Activities.WorkflowInvoker.InvokeCompleted>i Anuluj przy użyciu przepływu pracy <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="8df13-432">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="8df13-433">Aby otrzymać powiadomienie po zakończeniu przepływu pracy, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="8df13-433">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="8df13-434">Jeśli przepływ pracy nie zostanie zakończone w ramach określonego limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="8df13-434">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8df13-435"><xref:System.TimeoutException> Jest tylko element zgłaszany, gdy upłynie limit czasu, a przepływ pracy przestanie być bezczynne podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="8df13-435">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="8df13-436">Przepływ pracy, który będzie trwało dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-436">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="8df13-437">Ta metoda wywołuje asynchronicznie za pomocą opartego na zdarzeniach asynchroniczne wzorcu przepływ pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-437">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="8df13-438"> [Omówienie wzorca asynchronicznego opartego na zdarzeniach](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="8df13-438"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-439">Poniższy przykład przedstawia wywoływanie składające się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-439">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="8df13-440">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-440">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-441">Po zakończeniu tych przepływu pracy są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="8df13-441">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="8df13-442">Słownik zawierający parametry wejściowe w przepływie pracy, wyznaczaną przez Nazwa argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-442">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8df13-443">Interwał przepływu pracy należy wykonać, zanim jest zostało przerwane i a <see cref="T:System.TimeoutException" /> jest generowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-443">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="8df13-444">Obiekt użytkownika używane do odróżnienia tego określonego asynchroniczne wywołać operację od innych bieżącego asynchronicznego wywołania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-444">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8df13-445">Wywołuje asynchronicznie z określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych, określony limit czasu i unikatowym identyfikatorem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-445">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, the specified time-out interval, and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-446">`userState` Parametru musi być unikatowa we wszystkich aktualnie uruchomionych <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operacje dla bieżącego działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-446">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="8df13-447">Jeśli `userState` nie jest unikatowa, <xref:System.ArgumentException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="8df13-447">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="8df13-448">`userState` Służy do identyfikowania przepływu pracy w <xref:System.Activities.WorkflowInvoker.InvokeCompleted>i Anuluj przy użyciu przepływu pracy <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="8df13-448">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="8df13-449">Aby otrzymać powiadomienie po zakończeniu przepływu pracy, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="8df13-449">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="8df13-450">Jeśli przepływ pracy nie zostanie zakończone w ramach określonego limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="8df13-450">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8df13-451"><xref:System.TimeoutException> Jest tylko element zgłaszany, gdy upłynie limit czasu, a przepływ pracy przestanie być bezczynne podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="8df13-451">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="8df13-452">Przepływ pracy, który będzie trwało dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy przejdzie w stan bezczynności.</span><span class="sxs-lookup"><span data-stu-id="8df13-452">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="8df13-453">Ta metoda wywołuje asynchronicznie za pomocą opartego na zdarzeniach asynchroniczne wzorcu przepływ pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-453">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="8df13-454"> [Omówienie wzorca asynchronicznego opartego na zdarzeniach](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="8df13-454"> [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-455">Poniższy przykład przedstawia wywoływanie składające się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-455">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="8df13-456">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-456">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-457">Po zakończeniu tych przepływu pracy są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="8df13-457">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8df13-458">Występuje, gdy przepływ pracy wywołany przez jedną z <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> przeciążenia zostało zakończone lub anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8df13-458">Occurs when the workflow invoked by one of the <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> overloads is completed or canceled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8df13-459">Obsługi, aby ustalić, czy przepływ pracy wywołany z jednym z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> przeciążenia została ukończona pomyślnie i pobrać argumenty wyjściowe ukończone przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="8df13-459">Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8df13-460">Poniższy przykład przedstawia wywoływanie składające się z przepływu pracy `LongRunningDiceRoll` działania.</span><span class="sxs-lookup"><span data-stu-id="8df13-460">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="8df13-461">`LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych reprezentujące wyniki operacji zbiorczego grupowane.</span><span class="sxs-lookup"><span data-stu-id="8df13-461">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="8df13-462">Po zakończeniu tych przepływu pracy są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="8df13-462">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>