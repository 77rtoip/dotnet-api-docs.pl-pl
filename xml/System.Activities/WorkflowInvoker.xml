<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="73cad7482ec89c2404cb253c90cebeaaff316196" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52590234" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Umożliwia wywołanie przepływu pracy, jak w przypadku wywołania metody.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker> zawiera wystąpienie i metody statyczne do wywoływania synchronicznie przepływów pracy i wystąpienia metody asynchroniczne wywoływanie przepływów pracy.  
  
 <xref:System.Activities.WorkflowInvoker> nie zezwala na wystąpienie kontrolki, takiej jak przechowywanie, zwalnianie lub wznowienie zakładki. W razie potrzeby wystąpienie kontrolki użyj <xref:System.Activities.WorkflowApplication> zamiast tego.  
  
 Do wykonania przepływów pracy synchronicznie przy użyciu wystąpienia nie może kontrolować, należy wywołać <xref:System.Activities.WorkflowInvoker.Invoke%2A> metody. Aby są wykonywane asynchronicznie przy użyciu nie może kontrolować wystąpienia przepływu pracy, należy użyć <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> i <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> pary metody lub <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład wywołuje synchronicznie przepływu pracy składającą się z pojedynczej <xref:System.Activities.Statements.WriteLine> przy użyciu działania <xref:System.Activities.WorkflowInvoker>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">Definicja przepływu pracy, przepływu pracy do wywołania przez to wystąpienie elementu <see cref="T:System.Activities.WorkflowInvoker" /> klasy.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Activities.WorkflowInvoker" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker> zawiera wystąpienie i metody statyczne do wywoływania synchronicznie przepływów pracy i wystąpienia metody asynchroniczne wywoływanie przepływów pracy.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej <xref:System.Activities.Statements.WriteLine> działania.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wywołuje asynchronicznie za pomocą przepływu pracy <see cref="T:System.IAsyncResult" /> asynchronicznym wzorcem projektowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji, zobacz [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">Metoda do wywołania po ukończeniu przepływu pracy.</param>
        <param name="state">Opcjonalne obiekt specyficzne dla aplikacji, który zawiera informacje o operacji asynchronicznej.</param>
        <summary>Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.AsyncCallback" /> i stan podanego przez użytkownika.</summary>
        <returns>Odwołanie do asynchronicznego wywołania operacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone i pobrać parametrów wyjściowych przepływu pracy, należy wywołać <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> z `callback` metody. Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed zakończeniem przepływu pracy, blokuje ukończenie przepływu pracy. Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.  
  
 Ta metoda wywołuje asynchronicznie za pomocą przepływu pracy <xref:System.IAsyncResult> asynchronicznym wzorcem projektowym. Aby uzyskać więcej informacji, zobacz [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania. `LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Są one pobierane przez wywołanie metody <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. Po wywołaniu <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwraca, każdy argument dane wyjściowe są zwracane w słowniku danych wyjściowych, kluczach nazwę argumentu.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</param>
        <param name="callback">Metoda do wywołania po ukończeniu przepływu pracy.</param>
        <param name="state">Opcjonalne obiekt specyficzne dla aplikacji, który zawiera informacje o operacji asynchronicznej.</param>
        <summary>Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych <see cref="T:System.AsyncCallback" />oraz stan podanego przez użytkownika.</summary>
        <returns>Odwołanie do asynchronicznego wywołania operacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone i pobrać parametrów wyjściowych przepływu pracy, należy wywołać <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> z `callback` metody. Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed zakończeniem przepływu pracy, blokuje ukończenie przepływu pracy.  Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.  
  
 Ta metoda wywołuje asynchronicznie za pomocą przepływu pracy <xref:System.IAsyncResult> asynchronicznym wzorcem projektowym. Aby uzyskać więcej informacji, zobacz [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania. `LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Są one pobierane przez wywołanie metody <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. Po wywołaniu <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwraca, każdy argument dane wyjściowe są zwracane w słowniku danych wyjściowych, kluczach nazwę argumentu.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</param>
        <param name="callback">Metoda do wywołania po ukończeniu przepływu pracy.</param>
        <param name="state">Opcjonalne obiekt specyficzne dla aplikacji, który zawiera informacje o operacji asynchronicznej.</param>
        <summary>Wywołuje asynchronicznie przy użyciu określonego interwału limitu czasu, przepływ pracy <see cref="T:System.AsyncCallback" />oraz stan podanego przez użytkownika.</summary>
        <returns>Odwołanie do asynchronicznego wywołania operacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone i pobrać parametrów wyjściowych przepływu pracy, należy wywołać <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> z `callback` metody. Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed zakończeniem przepływu pracy, blokuje ukończenie przepływu pracy. Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> jest generowany, gdy <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> metoda jest wywoływana.  
  
> [!NOTE]
>  <xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania. Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.  
  
 Ta metoda wywołuje asynchronicznie za pomocą przepływu pracy <xref:System.IAsyncResult> asynchronicznym wzorcem projektowym. Aby uzyskać więcej informacji, zobacz [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania. `LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Są one pobierane przez wywołanie metody <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. Po wywołaniu <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwraca, każdy argument dane wyjściowe są zwracane w słowniku danych wyjściowych, kluczach nazwę argumentu.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</param>
        <param name="timeout">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</param>
        <param name="callback">Metoda do wywołania po ukończeniu przepływu pracy.</param>
        <param name="state">Opcjonalne obiekt specyficzne dla aplikacji, który zawiera informacje o operacji asynchronicznej.</param>
        <summary>Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych, interwał limitu czasu <see cref="T:System.AsyncCallback" />oraz stan podanego przez użytkownika.</summary>
        <returns>Odwołanie do asynchronicznego wywołania operacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone i pobrać parametrów wyjściowych przepływu pracy, należy wywołać <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> z `callback` metody. Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed zakończeniem przepływu pracy, blokuje ukończenie przepływu pracy. Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> jest generowany, gdy <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana.  
  
> [!NOTE]
>  <xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania. Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.  
  
 Ta metoda wywołuje asynchronicznie za pomocą przepływu pracy <xref:System.IAsyncResult> asynchronicznym wzorcem projektowym. Aby uzyskać więcej informacji, zobacz [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania. `LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Są one pobierane przez wywołanie metody <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. Po wywołaniu <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwraca, każdy argument dane wyjściowe są zwracane w słowniku danych wyjściowych, kluczach nazwę argumentu.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">Token dla przepływu pracy anulować.</param>
        <summary>Próbuje anulować przepływu pracy, który został wywołany z określonym <paramref name="userState" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko przepływie pracy, które są wywoływane za pomocą jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> przeciążenia, które przyjmuje `userState` parametru może być anulowany.  
  
 W przypadku anulowania zakończy się powodzeniem, <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> właściwość <xref:System.Activities.InvokeCompletedEventArgs> przekazany do <xref:System.Activities.WorkflowInvoker.InvokeCompleted> program obsługi jest ustawiona na `true`; w przeciwnym razie jest równa `false`.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania. `LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Gdy przepływ pracy zostanie wywołana, host próbuje anulować przepływu pracy.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <see cref="T:System.IAsyncResult" /> Odwołujący się <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operacji, który uruchomiony przepływ pracy.</param>
        <summary>Zwraca wyniki do przepływu pracy, która została wywołana przy użyciu jednej z <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> przeciążenia.</summary>
        <returns>Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone i pobrać parametrów wyjściowych przepływu pracy, należy wywołać <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> z `callback` metodą określoną przez <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>. Jeśli <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> jest wywoływana przed zakończeniem przepływu pracy, blokuje ukończenie przepływu pracy.  
  
 Ta metoda zwraca wynik przepływu pracy wywoływane asynchronicznie przy użyciu <xref:System.IAsyncResult> asynchronicznym wzorcem projektowym. Aby uzyskać więcej informacji, zobacz [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania. `LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Są one pobierane przez wywołanie metody <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. Po wywołaniu <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> zwraca, każdy argument dane wyjściowe są zwracane w słowniku danych wyjściowych, kluczach nazwę argumentu.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Collections.ObjectModel.Collection`1" /> rozszerzeń, które są dostępne dla przepływów pracy, wywoływany przez <see cref="T:System.Activities.WorkflowInvoker" /> wystąpienia.</summary>
        <value>
          <see cref="T:System.Collections.ObjectModel.Collection`1" /> Rozszerzeń, które są dostępne dla przepływów pracy, wywoływany przez <see cref="T:System.Activities.WorkflowInvoker" /> wystąpienia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest używana przez autorów hosta przepływu pracy, aby dodać rozszerzenia <xref:System.Activities.WorkflowInvoker> wystąpienia, dzięki czemu będą one dostępne do przepływów pracy wywoływane przez nią.  
  
   
  
## Examples  
 Poniższy przykład rejestruje niestandardowego <xref:System.Activities.Tracking.TrackingParticipant> z <xref:System.Activities.WorkflowInvoker.Extensions%2A> zbiór <xref:System.Activities.WorkflowInvoker> wystąpienia. Ten przykład kodu jest częścią [niestandardowe śledzenia](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) próbki.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wywołuje przepływu pracy synchronicznie i zwraca słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności. Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania. Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wywołuje synchronicznie przy użyciu definicji przepływu pracy przekazywany do przepływu pracy <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> konstruktora.</summary>
        <returns>Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności. Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania. Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `DiceRoll` działania. `DiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Po wywołaniu `Invoke` zwraca, każdy argument dane wyjściowe są zwracane w słowniku danych wyjściowych, kluczach nazwę argumentu. Przepływ pracy jest wywoływana dwa razy, za pomocą definicji przepływu pracy, przekazywane do `WorkflowInvoker` konstruktora.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 Jeśli działanie główne przepływu pracy nie ma argumentów danych wyjściowych lub nie są wymagane przez hosta, może być ignorowane. Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej <xref:System.Activities.Statements.WriteLine> działanie, które nie ma żadnych danych wyjściowych argumentów.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">Definicja przepływu pracy, przepływu pracy do wywołania.</param>
        <summary>Wywołuje synchronicznie przy użyciu definicji przepływu pracy określonego przepływu pracy.</summary>
        <returns>Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności. Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania. Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `DiceRoll` działania. `DiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Po wywołaniu `Invoke` zwraca, każdy argument dane wyjściowe są zwracane w słowniku danych wyjściowych, kluczach nazwę argumentu.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 Jeśli działanie główne przepływu pracy nie ma argumentów danych wyjściowych lub nie są wymagane przez hosta, może być ignorowane. Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej <xref:System.Activities.Statements.WriteLine> działanie, które nie ma żadnych danych wyjściowych argumentów.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</param>
        <summary>Wywołuje działanie przekazany do <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> Konstruktor synchronicznie przy użyciu określonego <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych.</summary>
        <returns>Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności. Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania. Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Divide` działania, ma dwa argumenty i dwa wyjściowych argumentów. Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywana, który zawiera wartości dla każdego argumentu, kluczach nazwę argumentu w danych wejściowych. Po wywołaniu `Invoke` zwraca, każdy argument dane wyjściowe są zwracane w `outputs` słownika, również kluczach nazwę argumentu.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 Jeśli przepływ pracy jest pochodną <xref:System.Activities.ActivityWithResult>, takich jak `CodeActivity<TResult>` lub `Activity<TResult>`, i argumenty wyjściowe oprócz dobrze zdefiniowanych <xref:System.Activities.Activity%601.Result%2A> danych wyjściowych argumentu, przeciążenie nieogólnego `Invoke`, takie jak, musi być używany w kolejność, aby pobrać dodatkowe argumenty. Aby to zrobić, definicja przepływu pracy są przekazywane do `WorkflowInvoker` konstruktora musi być typu <xref:System.Activities.Activity>. W tym przykładzie `Divide` pochodzi od klasy działania `CodeActivity<int>`, ale jest zadeklarowany jako <xref:System.Activities.Activity> tak, aby to przeciążenia `Invoke`, zwraca słownika argumentów, a nie pojedyncze wartości zwracanej jest używany.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</param>
        <summary>Wywołuje przepływu pracy synchronicznie przy użyciu określonego interwału limitu czasu.</summary>
        <returns>Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności. Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania. Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.  
  
> [!NOTE]
>  <xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania. Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy, który zawiera dwa <xref:System.Activities.Statements.WriteLine> działań i <xref:System.Activities.Statements.Delay> działania skonfigurowano <xref:System.Activities.Statements.Delay.Duration%2A> jednej minuty. Ten przepływ pracy zostanie wywołana dwukrotnie; po raz pierwszy przy użyciu limitu czasu wynosi dwie minuty, a po raz drugi z interwałem limitu czasu 30 sekund. Pierwszy przepływ pracy zakończy się pomyślnie, ale nie jest drugi i <xref:System.TimeoutException> jest generowany i zostanie wyświetlony następujący komunikat.  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 Na przykład za pomocą `Invoke` z argumentami danych wyjściowych, zobacz przeciążenia <xref:System.Activities.WorkflowInvoker.Invoke%2A> parametrami tego przeciążenia bez limitu czasu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">Definicja przepływu pracy, przepływu pracy do wywołania.</param>
        <param name="inputs">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</param>
        <summary>Wywołuje synchronicznie przy użyciu definicji przepływu pracy określonego przepływu pracy i <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych.</summary>
        <returns>Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności. Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania. Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Divide` działania, ma dwa argumenty i dwa wyjściowych argumentów. Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywana, który zawiera wartości dla każdego argumentu, kluczach nazwę argumentu w danych wejściowych. Po wywołaniu `Invoke` zwraca, każdy argument dane wyjściowe są zwracane w `outputs` słownika, również kluczach nazwę argumentu.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 Jeśli przepływ pracy jest pochodną <xref:System.Activities.ActivityWithResult>, takich jak `CodeActivity<TResult>` lub `Activity<TResult>`, i argumenty wyjściowe oprócz dobrze zdefiniowanych <xref:System.Activities.Activity%601.Result%2A> danych wyjściowych argumentu, przeciążenie nieogólnego `Invoke`, takie jak, musi być używany w kolejność, aby pobrać dodatkowe argumenty. Aby to zrobić, definicja przepływu pracy są przekazywane do `Invoke` musi być typu <xref:System.Activities.Activity>. W tym przykładzie `Divide` pochodzi od klasy działania `CodeActivity<int>`, ale jest zadeklarowany jako <xref:System.Activities.Activity> tak, aby to przeciążenia `Invoke`, zwraca słownika argumentów, a nie pojedyncze wartości zwracanej jest używany.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">Definicja przepływu pracy, przepływu pracy do wywołania.</param>
        <param name="timeout">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</param>
        <summary>Wywołuje przepływu pracy synchronicznie przy użyciu definicji określonego przepływu pracy i interwał limitu czasu.</summary>
        <returns>Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności. Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania. Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.  
  
> [!NOTE]
>  <xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania. Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy, który zawiera dwa <xref:System.Activities.Statements.WriteLine> działań i <xref:System.Activities.Statements.Delay> działania skonfigurowano <xref:System.Activities.Statements.Delay.Duration%2A> jednej minuty. Ten przepływ pracy zostanie wywołana dwukrotnie; po raz pierwszy przy użyciu limitu czasu wynosi dwie minuty, a po raz drugi z interwałem limitu czasu 30 sekund. Pierwszy przepływ pracy zakończy się pomyślnie, ale nie jest drugi i <xref:System.TimeoutException> zgłaszany.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 Na przykład za pomocą `Invoke` z argumentami danych wyjściowych, zobacz przeciążenia <xref:System.Activities.WorkflowInvoker.Invoke%2A> parametrami tego przeciążenia bez limitu czasu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</param>
        <param name="timeout">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</param>
        <summary>Wywołuje działanie przekazany do <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> Konstruktor synchronicznie przy użyciu określonego <see cref="T:System.Collections.Generic.IDictionary`2" /> parametry wejściowe i określonego interwału limitu czasu.</summary>
        <returns>Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności. Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania. Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.  
  
> [!NOTE]
>  <xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania. Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy, który zawiera dwa <xref:System.Activities.Statements.WriteLine> działań i <xref:System.Activities.Statements.Delay> działania skonfigurowano <xref:System.Activities.Statements.Delay.Duration%2A> jednej minuty. Ten przepływ pracy zostanie wywołana dwukrotnie; po raz pierwszy przy użyciu limitu czasu wynosi dwie minuty, a po raz drugi z interwałem limitu czasu 30 sekund. Pierwszy przepływ pracy zakończy się pomyślnie, ale nie jest drugi i <xref:System.TimeoutException> jest generowany i zostanie wyświetlony następujący komunikat.  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 Na przykład za pomocą `Invoke` argumentów wejściowych i wyjściowych, zobacz przeciążenia <xref:System.Activities.WorkflowInvoker.Invoke%2A> parametrami tego przeciążenia bez limitu czasu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">Definicja przepływu pracy, przepływu pracy do wywołania.</param>
        <param name="inputs">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</param>
        <param name="timeout">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</param>
        <summary>Wywołuje przepływu pracy, synchronicznie przy użyciu definicji przepływu pracy określonego <see cref="T:System.Collections.Generic.IDictionary`2" /> parametry wejściowe i interwał limitu czasu.</summary>
        <returns>Słownik działania głównego <see cref="T:System.Activities.OutArgument" /> i <see cref="T:System.Activities.InOutArgument" /> wartości z kluczami przez argument nazwy reprezentujące dane wyjściowe przepływu pracy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności. Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania. Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.  
  
> [!NOTE]
>  <xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania. Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy, który zawiera dwa <xref:System.Activities.Statements.WriteLine> działań i <xref:System.Activities.Statements.Delay> działania skonfigurowano <xref:System.Activities.Statements.Delay.Duration%2A> jednej minuty. Ten przepływ pracy zostanie wywołana dwukrotnie; po raz pierwszy przy użyciu limitu czasu wynosi dwie minuty, a po raz drugi z interwałem limitu czasu 30 sekund. Pierwszy przepływ pracy zakończy się pomyślnie, ale nie jest drugi i <xref:System.TimeoutException> zgłaszany.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 Na przykład za pomocą `Invoke` argumentów wejściowych i wyjściowych, zobacz przeciążenia <xref:System.Activities.WorkflowInvoker.Invoke%2A> parametrami tego przeciążenia bez limitu czasu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Typ przepływu pracy.</typeparam>
        <param name="workflow">Definicja przepływu pracy, przepływu pracy do wywołania. Definicja przepływu pracy musi pochodzić od <see cref="T:System.Activities.ActivityWithResult" />.</param>
        <summary>Wywołuje synchronicznie przy użyciu definicji przepływu pracy przekazywany do przepływu pracy <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> konstruktora.</summary>
        <returns>Wartość typu TResult z wynikiem wykonania działania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności. Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania. Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Add` działania, który ma dwa argumenty wejściowe i ponieważ pochodzi od klasy `CodeActivity<int>` daje on dobrze zdefiniowany <xref:System.Activities.Activity%601.Result%2A> danych wyjściowych argumentu. Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywana, który zawiera wartości dla każdego argumentu, kluczach nazwę argumentu w danych wejściowych. Po wywołaniu `Invoke` zwraca wartość <xref:System.Activities.Activity%601.Result%2A> argument danych wyjściowych jest zwracana. Ten przykładowy kod opiera się wylogować się z [używanie klasy WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) próbki.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Typ przepływu pracy.</typeparam>
        <param name="workflow">Definicja przepływu pracy, przepływu pracy do wywołania.</param>
        <param name="inputs">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</param>
        <summary>Wywołuje synchronicznie przy użyciu definicji przepływu pracy określonego przepływu pracy i <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych.</summary>
        <returns>Wartość typu TResult z wynikiem wykonania działania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności. Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania. Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.Invoke%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.  
  
> [!NOTE]
>  <xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania. Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby zakończyć, kończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Add` działania, który ma dwa argumenty wejściowe i ponieważ pochodzi od klasy `CodeActivity<int>` daje on dobrze zdefiniowany <xref:System.Activities.Activity%601.Result%2A> danych wyjściowych argumentu. Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywana, który zawiera wartości dla każdego argumentu, kluczach nazwę argumentu w danych wejściowych. Po wywołaniu `Invoke` zwraca wartość <xref:System.Activities.Activity%601.Result%2A> argument danych wyjściowych jest zwracana. Ten przykładowy kod opiera się wylogować się z [używanie klasy WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) próbki.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Typ przepływu pracy.</typeparam>
        <param name="workflow">Definicja przepływu pracy, przepływu pracy do wywołania.</param>
        <param name="inputs">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</param>
        <param name="timeout">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</param>
        <summary>Wywołuje przepływu pracy, synchronicznie przy użyciu definicji przepływu pracy określonego <see cref="T:System.Collections.Generic.IDictionary`2" /> parametry wejściowe i interwał limitu czasu.</summary>
        <returns>Wartość typu TResult z wynikiem wykonania działania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności. Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania. Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.  
  
> [!NOTE]
>  <xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania. Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby zakończyć, kończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Add` działania, który ma dwa argumenty wejściowe i ponieważ pochodzi od klasy `CodeActivity<int>` daje on dobrze zdefiniowany <xref:System.Activities.Activity%601.Result%2A> danych wyjściowych argumentu. Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywana, który zawiera wartości dla każdego argumentu, kluczach nazwę argumentu w danych wejściowych. Po wywołaniu `Invoke` zwraca wartość <xref:System.Activities.Activity%601.Result%2A> argument danych wyjściowych jest zwracana. Ten przykładowy kod opiera się wylogować się z [używanie klasy WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) próbki.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; *  * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Typ przepływu pracy.</typeparam>
        <param name="workflow">Definicja przepływu pracy, przepływu pracy do wywołania.</param>
        <param name="inputs">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</param>
        <param name="additionalOutputs">Słownik parametrów dodatkowych danych wyjściowych przepływu pracy, kluczach nazwę argumentu.</param>
        <param name="timeout">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</param>
        <summary>Wywołuje synchronicznie przy użyciu definicji przepływu pracy określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych <see cref="T:System.Collections.Generic.IDictionary`2" /> dodatkowych danych wyjściowych, parametrów i interwał limitu czasu.</summary>
        <returns>Wartość typu TResult z wynikiem wykonania działania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To bloki metoda przed ukończeniem przepływu pracy, w tym czas bezczynności. Wszystkie wykonywania przepływu pracy jest gwarantowane do wykonania na wątku wywołania. Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.  
  
> [!NOTE]
>  <xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania. Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby zakończyć, kończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie przepływu pracy składającą się z pojedynczej `Add` działania, który ma dwa argumenty wejściowe i ponieważ pochodzi od klasy `CodeActivity<int>` daje on dobrze zdefiniowany <xref:System.Activities.Activity%601.Result%2A> danych wyjściowych argumentu. Jeśli przepływ pracy zostanie wywołane, `arguments` słownika jest przekazywana, który zawiera wartości dla każdego argumentu, kluczach nazwę argumentu w danych wejściowych. Po wywołaniu `Invoke` zwraca wartość <xref:System.Activities.Activity%601.Result%2A> argument danych wyjściowych jest zwracana. Ten przykładowy kod opiera się wylogować się z [używanie klasy WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) próbki.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.  
  
 Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy. Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wywołuje asynchronicznie przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.  
  
 Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy. Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania. `LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</param>
        <summary>Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.  
  
 Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy. Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania. `LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">Obiekt dostarczony przez użytkownika, używany do odróżnienia tej konkretnej asynchronicznego wywołania operacji od innych bieżącego asynchronicznego wywołania operacji.</param>
        <summary>Wywołuje asynchronicznie przy użyciu określonego Unikatowy identyfikator przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `userState` Parametru musi być unikatowa we wszystkich aktualnie uruchomionych <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operacji dla bieżącego działania. Jeśli `userState` parametr nie jest unikatowa, <xref:System.ArgumentException> zgłaszany. `userState` Służy do identyfikowania przepływu pracy w <xref:System.Activities.WorkflowInvoker.InvokeCompleted>i anulowania w przepływie pracy używającym <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  
  
 Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.  
  
 Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy. Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania. `LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</param>
        <summary>Wywołuje asynchronicznie z interwałem określonym limicie czasu przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.  
  
> [!NOTE]
>  <xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania. Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.  
  
 Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy. Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania. `LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</param>
        <param name="userState">Obiekt dostarczony przez użytkownika, używany do odróżnienia tej konkretnej asynchronicznego wywołania operacji od innych bieżącego asynchronicznego wywołania operacji.</param>
        <summary>Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametry wejściowe i unikatowy identyfikator.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `userState` Parametru musi być unikatowa we wszystkich aktualnie uruchomionych <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operacji dla bieżącego działania. Jeśli `userState` nie jest unikatowa, <xref:System.ArgumentException> zgłaszany. `userState` Służy do identyfikowania przepływu pracy w <xref:System.Activities.WorkflowInvoker.InvokeCompleted>i anulowania w przepływie pracy używającym <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  
  
 Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Aby skonfigurować interwał limitu czasu, w którym należy wykonać przepływu pracy, użyj jednej z <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> przeciążeń przybierają tego <xref:System.TimeSpan>.  
  
 Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy. Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania. `LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</param>
        <param name="timeout">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</param>
        <summary>Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametry wejściowe i określonego interwału limitu czasu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.  
  
> [!NOTE]
>  <xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania. Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.  
  
 Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy. Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania. `LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</param>
        <param name="userState">Obiekt dostarczony przez użytkownika, używany do odróżnienia tej konkretnej asynchronicznego wywołania operacji od innych bieżącego asynchronicznego wywołania operacji.</param>
        <summary>Wywołuje asynchronicznie przy użyciu określonego interwału limitu czasu i unikatowy identyfikator przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `userState` Parametru musi być unikatowa we wszystkich aktualnie uruchomionych <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operacji dla bieżącego działania. Jeśli `userState` nie jest unikatowa, <xref:System.ArgumentException> zgłaszany. `userState` Służy do identyfikowania przepływu pracy w <xref:System.Activities.WorkflowInvoker.InvokeCompleted>i anulowania w przepływie pracy używającym <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  
  
 Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.  
  
> [!NOTE]
>  <xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania. Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.  
  
 Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy. Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania. `LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">Słownik parametrów wejściowych w przepływie pracy, kluczach nazwę argumentu.</param>
        <param name="timeout">Interwał, w którym przepływ pracy należy wykonać, zanim został on przerwany, a co <see cref="T:System.TimeoutException" /> zgłaszany.</param>
        <param name="userState">Obiekt dostarczony przez użytkownika, używany do odróżnienia tej konkretnej asynchronicznego wywołania operacji od innych bieżącego asynchronicznego wywołania operacji.</param>
        <summary>Wywołuje asynchronicznie przy użyciu określonego przepływu pracy <see cref="T:System.Collections.Generic.IDictionary`2" /> parametrów wejściowych, określonego interwału limitu czasu i unikatowy identyfikator.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `userState` Parametru musi być unikatowa we wszystkich aktualnie uruchomionych <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operacji dla bieżącego działania. Jeśli `userState` nie jest unikatowa, <xref:System.ArgumentException> zgłaszany. `userState` Służy do identyfikowania przepływu pracy w <xref:System.Activities.WorkflowInvoker.InvokeCompleted>i anulowania w przepływie pracy używającym <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  
  
 Aby otrzymywać powiadomienia, gdy przepływ pracy zostanie zakończone, obsługi <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Jeśli przepływ pracy nie zostanie ukończone w ciągu określonego interwału limitu czasu przepływu pracy zostało przerwane i <xref:System.TimeoutException> zgłaszany.  
  
> [!NOTE]
>  <xref:System.TimeoutException> Tylko jest generowany, jeśli upłynie limit czasu i przepływ pracy staje się nieaktywna podczas wykonywania. Przepływ pracy, który trwa dłużej niż interwał określony limit czasu, aby ukończyć zakończy się pomyślnie, jeśli przepływ pracy nie przejdzie w stan bezczynności.  
  
 Ta metoda wywołuje asynchronicznie przy użyciu wzorca opartego na zdarzeniach asynchronicznych projektu przepływu pracy. Aby uzyskać więcej informacji, zobacz [oparte na zdarzeniach asynchronicznych omówienie wzorca](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania. `LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy przepływ pracy jest wywoływana za pomocą jednej z <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> przeciążenia jest ukończone lub anulowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element, aby określić, czy przepływ pracy ma być wywoływany przy użyciu jednego z obsługi <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> przeciążenia została ukończona pomyślnie i pobrać dane wyjściowe argumenty ukończony przepływ pracy.  
  
   
  
## Examples  
 Poniższy przykład przedstawia wywoływanie składający się z przepływu pracy `LongRunningDiceRoll` działania. `LongRunningDiceRoll` Działanie ma dwa argumenty danych wyjściowych, które reprezentują wyniki operacji rzutowania dice. Po ukończeniu przepływu pracy te są pobierane w <xref:System.Activities.WorkflowInvoker.InvokeCompleted> programu obsługi.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>