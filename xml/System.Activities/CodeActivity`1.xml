<Type Name="CodeActivity&lt;TResult&gt;" FullName="System.Activities.CodeActivity&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5c6d0f254abef2447080d7ce2c4a29cb2f16ad98" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30437259" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CodeActivity&lt;TResult&gt; : System.Activities.Activity&lt;TResult&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CodeActivity`1&lt;TResult&gt; extends System.Activities.Activity`1&lt;!TResult&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Activities.CodeActivity`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeActivity(Of TResult)&#xA;Inherits Activity(Of TResult)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public ref class CodeActivity abstract : System::Activities::Activity&lt;TResult&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Activities.Activity&lt;TResult&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TResult">TResult</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TResult">Wynik zwracany przez działanie.</typeparam>
    <summary>Klasa abstrakcyjna do tworzenia działań niestandardowych z natury zachowanie zdefiniowane w <see cref="M:System.Activities.CodeActivity.Execute(System.Activities.CodeActivityContext)" /> metody zapewniające dostęp do zmiennej i argument rozpoznawania i rozszerzenia.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy pochodne można zdefiniować wartość wyniku o typie określonym w specyfikatorze typu klasy.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób klasa wyprowadzona z <xref:System.Activities.CodeActivity%601>.  
  
 [!code-csharp[WorkflowInvoker#0](~/samples/snippets/csharp/VS_Snippets_CFX/workflowinvoker/cs/add.cs#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeActivity ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.CodeActivity`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeActivity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej, tworzy wystąpienie klasy pochodnej.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CacheMetadata">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy i sprawdza poprawność opis argumentów działania, zmienne, działania podrzędne i delegatów działania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Autorzy działania niestandardowego można podać logiki sprawdzania poprawności w działaniu <xref:System.Activities.CodeActivity%601.CacheMetadata%2A> zastąpienia. Wszelkie wyjątki, które są generowane z <xref:System.Activities.CodeActivity%601.CacheMetadata%2A> nie są traktowane jako błędy sprawdzania poprawności. Te wyjątki zostaną wyjścia z wywołania <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> i muszą być obsługiwane przez obiekt wywołujący.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CacheMetadata">
      <MemberSignature Language="C#" Value="protected override sealed void CacheMetadata (System.Activities.ActivityMetadata metadata);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CacheMetadata(valuetype System.Activities.ActivityMetadata metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.CodeActivity`1.CacheMetadata(System.Activities.ActivityMetadata)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub CacheMetadata (metadata As ActivityMetadata)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CacheMetadata(System::Activities::ActivityMetadata metadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Activities.ActivityMetadata" />
      </Parameters>
      <Docs>
        <param name="metadata">Nie jest zaimplementowana.</param>
        <summary>Nie jest zaimplementowana. Zamiast nich należy używać słów kluczowych <see cref="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Autorzy działania niestandardowego można podać logiki sprawdzania poprawności w działaniu <xref:System.Activities.CodeActivity%601.CacheMetadata%2A> zastąpienia. Wszelkie wyjątki, które są generowane z <xref:System.Activities.CodeActivity%601.CacheMetadata%2A> nie są traktowane jako błędy sprawdzania poprawności. Te wyjątki zostaną wyjścia z wywołania <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> i muszą być obsługiwane przez obiekt wywołujący.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMetadata">
      <MemberSignature Language="C#" Value="protected virtual void CacheMetadata (System.Activities.CodeActivityMetadata metadata);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CacheMetadata(valuetype System.Activities.CodeActivityMetadata metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.CodeActivity`1.CacheMetadata(System.Activities.CodeActivityMetadata)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CacheMetadata (metadata As CodeActivityMetadata)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void CacheMetadata(System::Activities::CodeActivityMetadata metadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Activities.CodeActivityMetadata" />
      </Parameters>
      <Docs>
        <param name="metadata">Metadane działania, który hermetyzuje argumentów działania, zmienne, działania podrzędne i delegatów działania.</param>
        <summary>Tworzy i sprawdza poprawność opis argumentów działania, zmienne, działania podrzędne i delegatów działania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja używa środowiska uruchomieniowego przepływu pracy <xref:System.Activities.CodeActivity%601.CacheMetadata%2A> aby zapewnić poprawne konstrukcji przepływu pracy oraz aby zarządzać relacjami środowiska wykonawczego i okres istnienia reguły. Domyślna implementacja <xref:System.Activities.CodeActivity%601.CacheMetadata%2A> sprawdza publiczne elementy członkowskie tego typu działania przy użyciu typu <xref:System.ComponentModel.TypeDescriptor>. Te publiczne elementy członkowskie są typu <xref:System.Activities.Argument>, <xref:System.Activities.Variable>, [IEnumerable\<zmiennej >](xref:System.Collections.Generic.IEnumerable%601), <xref:System.Activities.Activity>, [IEnumerable\<działania >](xref:System.Collections.Generic.IEnumerable%601), lub <xref:System.Activities.ActivityDelegate>. Mogą przesłaniać tę metodę, dostosować budynku Opis czasu wykonywania działania i zapewnienie logikę niestandardowego sprawdzania poprawności. Wszelkie wyjątki, które są generowane z <xref:System.Activities.CodeActivity%601.CacheMetadata%2A> nie są traktowane jako błędy sprawdzania poprawności. Te wyjątki zostaną wyjścia z wywołania <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> i muszą być obsługiwane przez obiekt wywołujący.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="protected abstract TResult Execute (System.Activities.CodeActivityContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TResult Execute(class System.Activities.CodeActivityContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.CodeActivity`1.Execute(System.Activities.CodeActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function Execute (context As CodeActivityContext) As TResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TResult Execute(System::Activities::CodeActivityContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.CodeActivityContext" />
      </Parameters>
      <Docs>
        <param name="context">Kontekst wykonywania, pod którą wykonuje działania.</param>
        <summary>Po zaimplementowaniu w klasie pochodnej, wykonuje wykonywania działania.</summary>
        <returns>Wynik wykonania działania.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Implementation">
      <MemberSignature Language="C#" Value="protected override sealed Func&lt;System.Activities.Activity&gt; Implementation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`1&lt;class System.Activities.Activity&gt; Implementation" />
      <MemberSignature Language="DocId" Value="P:System.Activities.CodeActivity`1.Implementation" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Property Implementation As Func(Of Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property Func&lt;System::Activities::Activity ^&gt; ^ Implementation { Func&lt;System::Activities::Activity ^&gt; ^ get(); void set(Func&lt;System::Activities::Activity ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.IgnoreDataMember</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Activities.Activity&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nieobsługiwane.</summary>
        <value>Zawsze zwraca <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie wartości dla tej właściwości zwraca <xref:System.NotSupportedException>. <xref:System.Activities.CodeActivity%601> nie zezwala na określenie logiki wykonywania jako działania. Zamiast tego logiki wykonywania muszą być zdefiniowane w <xref:System.Activities.CodeActivity%601.Execute%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImplementationVersion">
      <MemberSignature Language="C#" Value="protected internal override sealed Version ImplementationVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version ImplementationVersion" />
      <MemberSignature Language="DocId" Value="P:System.Activities.CodeActivity`1.ImplementationVersion" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides NotOverridable Property ImplementationVersion As Version" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property Version ^ ImplementationVersion { Version ^ get(); void set(Version ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wersję implementacji działania.</summary>
        <value>Wersja wykonania działania.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateDynamicUpdateMap">
      <MemberSignature Language="C#" Value="protected override sealed void OnCreateDynamicUpdateMap (System.Activities.DynamicUpdate.UpdateMapMetadata metadata, System.Activities.Activity originalActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnCreateDynamicUpdateMap(class System.Activities.DynamicUpdate.UpdateMapMetadata metadata, class System.Activities.Activity originalActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.CodeActivity`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub OnCreateDynamicUpdateMap (metadata As UpdateMapMetadata, originalActivity As Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnCreateDynamicUpdateMap(System::Activities::DynamicUpdate::UpdateMapMetadata ^ metadata, System::Activities::Activity ^ originalActivity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Activities.DynamicUpdate.UpdateMapMetadata" />
        <Parameter Name="originalActivity" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="metadata">Metadane.</param>
        <param name="originalActivity">Działanie oryginalnego.</param>
        <summary>Zgłasza zdarzenie, podczas tworzenia mapy aktualizacji dynamicznej.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>