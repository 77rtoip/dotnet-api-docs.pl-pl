<Type Name="OutArgument&lt;T&gt;" FullName="System.Activities.OutArgument&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4a2b64937b4d3f4d02444fb23a2c76d9c6aff5cc" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36716457" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OutArgument&lt;T&gt; : System.Activities.OutArgument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OutArgument`1&lt;T&gt; extends System.Activities.OutArgument" />
  <TypeSignature Language="DocId" Value="T:System.Activities.OutArgument`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OutArgument(Of T)&#xA;Inherits OutArgument" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class OutArgument sealed : System::Activities::OutArgument" />
  <TypeSignature Language="F#" Value="type OutArgument&lt;'T&gt; = class&#xA;    inherit OutArgument" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Activities.OutArgument</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Activities.XamlIntegration.OutArgumentConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Expression")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Activities.XamlIntegration.ArgumentValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="bf385-101">Typ danych miary <see cref="T:System.Activities.OutArgument`1" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bf385-101">The data type of the <see cref="T:System.Activities.OutArgument`1" />.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="bf385-102">Terminal powiązania, który reprezentuje przepływ danych poza działania.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bf385-102">A binding terminal that represents the flow of data out of an activity.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf385-103"><xref:System.Activities.OutArgument%601> Służy do przepływu danych poza działania.</span><span class="sxs-lookup"><span data-stu-id="bf385-103">An <xref:System.Activities.OutArgument%601> is used to flow data out of an activity.</span></span> <span data-ttu-id="bf385-104">Jeśli działanie będzie działanie główne przepływu pracy, następnie go służy również do przepływu danych poza przepływu pracy do hosta przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="bf385-104">If the activity is the root activity of a workflow, then it is also used to flow data out of the workflow to the workflow host.</span></span> <span data-ttu-id="bf385-105">W tym przykładzie niestandardowego `Divide` działanie, czy ma dwa argumenty w danych wejściowych i jeden wyjściowy argument jest używany jako działania głównego przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="bf385-105">In this example, a custom `Divide` activity that has two input arguments and one output argument is used as the root activity of a workflow.</span></span> <span data-ttu-id="bf385-106">Aplikacja hosta dwóch wartości jest przekazywana do przepływu pracy, a następnie pobierze wyniku podziału, po zakończeniu przepływu pracy.</span><span class="sxs-lookup"><span data-stu-id="bf385-106">The host application passes two values into the workflow and then retrieves the result of the division after the workflow completes.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 <span data-ttu-id="bf385-107">`Divide` Działania używa argumentów do odbierania wartości wejściowe i podaj wartości obliczanej wynik.</span><span class="sxs-lookup"><span data-stu-id="bf385-107">The `Divide` activity uses arguments to receive the input values and to provide the computed result values.</span></span> <span data-ttu-id="bf385-108">`Remainder` <xref:System.Activities.OutArgument%601> Używany do przekazywania poza pozostałej części dzielenia i <xref:System.Activities.Activity%601.Result%2A> wyjściowy argument dostarczony przez <xref:System.Activities.Activity%601> pochodzące od działania jest używany do przekazywania limit iloraz.</span><span class="sxs-lookup"><span data-stu-id="bf385-108">The `Remainder` <xref:System.Activities.OutArgument%601> is used to pass out the remainder of the division, and the <xref:System.Activities.Activity%601.Result%2A> output argument provided by <xref:System.Activities.Activity%601> derived activities is used to pass out the quotient.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf385-109">Jeśli działania niestandardowego jest określana na podstawie ogólnego <xref:System.Activities.CodeActivity%601> z <xref:System.Int32> jako argumentu typu ogólnego, po rozpoczęciu działania o <xref:System.Activities.WorkflowInvoker> wywołania metody, zwraca <xref:System.Int32> wartość.</span><span class="sxs-lookup"><span data-stu-id="bf385-109">If your custom activity is derived from the generic <xref:System.Activities.CodeActivity%601> with an <xref:System.Int32> as its generic type argument, when you invoke the activity with the <xref:System.Activities.WorkflowInvoker> Invoke method, it returns an <xref:System.Int32> value.</span></span> <span data-ttu-id="bf385-110">Ponadto <xref:System.Activities.CodeActivity%601.Execute%2A?displayProperty=nameWithType> metoda zwróci <xref:System.Int32> wartość zamiast `void` i nie trzeba ustawić wartość zwracaną.</span><span class="sxs-lookup"><span data-stu-id="bf385-110">In Addition, the <xref:System.Activities.CodeActivity%601.Execute%2A?displayProperty=nameWithType> method will return an <xref:System.Int32> value instead of `void` and you do not need to set a return value.</span></span>  
  
 [!code-csharp[CFX_WorkflowApplicationExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#120)]  
  
   
  
## Examples  
 <span data-ttu-id="bf385-111">W poniższym przykładzie kodu pokazano tworzenie <xref:System.Activities.OutArgument%601>.</span><span class="sxs-lookup"><span data-stu-id="bf385-111">The following code sample demonstrates creating an <xref:System.Activities.OutArgument%601>.</span></span> <span data-ttu-id="bf385-112">W tym przykładzie jest z próbki elementu formatującego.</span><span class="sxs-lookup"><span data-stu-id="bf385-112">This example is from the Formatter sample.</span></span>  
  
 [!code-csharp[wfs_Formatter#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_formatter/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bf385-113">Inicjuje nowe wystąpienie klasy <see cref="T:System.Activities.OutArgument`1" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-113">Initialize a new instance of the <see cref="T:System.Activities.OutArgument`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutArgument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutArgument();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bf385-114">Inicjuje nowe wystąpienie klasy <see cref="T:System.Activities.OutArgument`1" /> przy użyciu wartości domyślnych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-114">Initialize a new instance of the <see cref="T:System.Activities.OutArgument`1" /> class using default values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="bf385-115">W poniższym przykładzie kodu pokazano tworzenie <xref:System.Activities.OutArgument%601>.</span><span class="sxs-lookup"><span data-stu-id="bf385-115">The following code sample demonstrates creating an <xref:System.Activities.OutArgument%601>.</span></span> <span data-ttu-id="bf385-116">W tym przykładzie jest z próbki elementu formatującego.</span><span class="sxs-lookup"><span data-stu-id="bf385-116">This example is from the Formatter sample.</span></span>  
  
 [!code-csharp[wfs_Formatter#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_formatter/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutArgument (System.Activities.Activity&lt;System.Activities.Location&lt;T&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity`1&lt;class System.Activities.Location`1&lt;!T&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.#ctor(System.Activities.Activity{System.Activities.Location{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As Activity(Of Location(Of T)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutArgument(System::Activities::Activity&lt;System::Activities::Location&lt;T&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="new System.Activities.OutArgument&lt;'T&gt; : System.Activities.Activity&lt;System.Activities.Location&lt;'T&gt;&gt; -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="new System.Activities.OutArgument&lt;'T&gt; expression" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.Activities.Activity&lt;System.Activities.Location&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="bf385-117">Wartość argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-117">The value of the argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf385-118">Inicjuje nowe wystąpienie klasy <see cref="T:System.Activities.OutArgument`1" /> przy użyciu określonego <see cref="T:System.Activities.Activity`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-118">Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1" /> class using the specified <see cref="T:System.Activities.Activity`1" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutArgument (System.Activities.DelegateArgument delegateArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.DelegateArgument delegateArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.#ctor(System.Activities.DelegateArgument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutArgument(System::Activities::DelegateArgument ^ delegateArgument);" />
      <MemberSignature Language="F#" Value="new System.Activities.OutArgument&lt;'T&gt; : System.Activities.DelegateArgument -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="new System.Activities.OutArgument&lt;'T&gt; delegateArgument" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="delegateArgument" Type="System.Activities.DelegateArgument" />
      </Parameters>
      <Docs>
        <param name="delegateArgument">
          <span data-ttu-id="bf385-119">Wartość argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-119">The value of the argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf385-120">Inicjuje nowe wystąpienie klasy <see cref="T:System.Activities.OutArgument`1" /> przy użyciu określonego <see cref="T:System.Activities.DelegateArgument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-120">Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1" /> class using the specified <see cref="T:System.Activities.DelegateArgument" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutArgument (System.Activities.Variable variable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Variable variable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.#ctor(System.Activities.Variable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutArgument(System::Activities::Variable ^ variable);" />
      <MemberSignature Language="F#" Value="new System.Activities.OutArgument&lt;'T&gt; : System.Activities.Variable -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="new System.Activities.OutArgument&lt;'T&gt; variable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="variable" Type="System.Activities.Variable" />
      </Parameters>
      <Docs>
        <param name="variable">
          <span data-ttu-id="bf385-121">Wartość argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-121">The value of the argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf385-122">Inicjuje nowe wystąpienie klasy <see cref="T:System.Activities.OutArgument`1" /> przy użyciu określonego <see cref="T:System.Activities.Variable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-122">Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1" /> class using the specified <see cref="T:System.Activities.Variable" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutArgument (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,T&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !T&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As Expression(Of Func(Of ActivityContext, T)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutArgument(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, T&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="new System.Activities.OutArgument&lt;'T&gt; : System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext, 'T&gt;&gt; -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="new System.Activities.OutArgument&lt;'T&gt; expression" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="bf385-123">Wartość argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-123">The value of the argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf385-124">Inicjuje nowe wystąpienie klasy <see cref="T:System.Activities.OutArgument`1" /> przy użyciu określonego wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-124">Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1" /> class using the specified expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public System.Activities.Activity&lt;System.Activities.Location&lt;T&gt;&gt; Expression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Activity`1&lt;class System.Activities.Location`1&lt;!T&gt;&gt; Expression" />
      <MemberSignature Language="DocId" Value="P:System.Activities.OutArgument`1.Expression" />
      <MemberSignature Language="VB.NET" Value="Public Property Expression As Activity(Of Location(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Activity&lt;System::Activities::Location&lt;T&gt; ^&gt; ^ Expression { System::Activities::Activity&lt;System::Activities::Location&lt;T&gt; ^&gt; ^ get(); void set(System::Activities::Activity&lt;System::Activities::Location&lt;T&gt; ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Expression : System.Activities.Activity&lt;System.Activities.Location&lt;'T&gt;&gt; with get, set" Usage="System.Activities.OutArgument&lt;'T&gt;.Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Activities.Activity&lt;System.Activities.Location&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bf385-125">Pobiera <see cref="T:System.Activities.Activity`1" /> reprezentujący wartość to <see cref="T:System.Activities.OutArgument`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-125">Gets an <see cref="T:System.Activities.Activity`1" /> that represents the value of this <see cref="T:System.Activities.OutArgument`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bf385-126">To działanie, które reprezentuje wartość argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-126">An activity that represents the value of the argument.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromDelegateArgument">
      <MemberSignature Language="C#" Value="public static System.Activities.OutArgument&lt;T&gt; FromDelegateArgument (System.Activities.DelegateArgument delegateArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.OutArgument`1&lt;!T&gt; FromDelegateArgument(class System.Activities.DelegateArgument delegateArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.FromDelegateArgument(System.Activities.DelegateArgument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Activities::OutArgument&lt;T&gt; ^ FromDelegateArgument(System::Activities::DelegateArgument ^ delegateArgument);" />
      <MemberSignature Language="F#" Value="static member FromDelegateArgument : System.Activities.DelegateArgument -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="System.Activities.OutArgument&lt;'T&gt;.FromDelegateArgument delegateArgument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.OutArgument&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateArgument" Type="System.Activities.DelegateArgument" />
      </Parameters>
      <Docs>
        <param name="delegateArgument">
          <span data-ttu-id="bf385-127">Wartość argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-127">The value of the argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf385-128">Inicjuje i zwraca nowy <see cref="T:System.Activities.OutArgument`1" /> tworzony przy użyciu określonego <see cref="T:System.Activities.DelegateArgument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-128">Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.DelegateArgument" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf385-129">Nowy argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-129">The new argument.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromExpression">
      <MemberSignature Language="C#" Value="public static System.Activities.OutArgument&lt;T&gt; FromExpression (System.Activities.Activity&lt;System.Activities.Location&lt;T&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.OutArgument`1&lt;!T&gt; FromExpression(class System.Activities.Activity`1&lt;class System.Activities.Location`1&lt;!T&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.FromExpression(System.Activities.Activity{System.Activities.Location{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromExpression (expression As Activity(Of Location(Of T))) As OutArgument(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Activities::OutArgument&lt;T&gt; ^ FromExpression(System::Activities::Activity&lt;System::Activities::Location&lt;T&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="static member FromExpression : System.Activities.Activity&lt;System.Activities.Location&lt;'T&gt;&gt; -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="System.Activities.OutArgument&lt;'T&gt;.FromExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.OutArgument&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Activities.Activity&lt;System.Activities.Location&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="bf385-130">Wartość argumentu</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-130">The value of the argument,</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf385-131">Inicjuje i zwraca nowy <see cref="T:System.Activities.OutArgument`1" /> tworzony przy użyciu określonego <see cref="T:System.Activities.Activity`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-131">Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Activity`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf385-132">Nowy argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-132">The new argument.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromVariable">
      <MemberSignature Language="C#" Value="public static System.Activities.OutArgument&lt;T&gt; FromVariable (System.Activities.Variable variable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.OutArgument`1&lt;!T&gt; FromVariable(class System.Activities.Variable variable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.FromVariable(System.Activities.Variable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Activities::OutArgument&lt;T&gt; ^ FromVariable(System::Activities::Variable ^ variable);" />
      <MemberSignature Language="F#" Value="static member FromVariable : System.Activities.Variable -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="System.Activities.OutArgument&lt;'T&gt;.FromVariable variable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.OutArgument&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Activities.Variable" />
      </Parameters>
      <Docs>
        <param name="variable">
          <span data-ttu-id="bf385-133">Wartość argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-133">The value of the argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf385-134">Inicjuje i zwraca nowy <see cref="T:System.Activities.OutArgument`1" /> tworzony przy użyciu określonego <see cref="T:System.Activities.Variable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-134">Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Variable" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf385-135">Nowy argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-135">The new argument.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public T Get (System.Activities.ActivityContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Get(class System.Activities.ActivityContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.Get(System.Activities.ActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function Get (context As ActivityContext) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Get(System::Activities::ActivityContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.Get : System.Activities.ActivityContext -&gt; 'T" Usage="outArgument.Get context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.ActivityContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="bf385-136">Bieżący kontekst działania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-136">The current activity context.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf385-137">Pobiera wartość <see cref="T:System.Activities.OutArgument`1" /> przy użyciu kontekstu określonego działania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-137">Gets the value of the <see cref="T:System.Activities.OutArgument`1" /> using the specified activity context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf385-138">Wartość argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-138">The value of the argument.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLocation">
      <MemberSignature Language="C#" Value="public System.Activities.Location&lt;T&gt; GetLocation (System.Activities.ActivityContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Activities.Location`1&lt;!T&gt; GetLocation(class System.Activities.ActivityContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.GetLocation(System.Activities.ActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocation (context As ActivityContext) As Location(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Activities::Location&lt;T&gt; ^ GetLocation(System::Activities::ActivityContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.GetLocation : System.Activities.ActivityContext -&gt; System.Activities.Location&lt;'T&gt;" Usage="outArgument.GetLocation context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Location&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.ActivityContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="bf385-139">Kontekst działania, który zawiera wartość zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-139">The activity context that contains the value of the variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf385-140">Pobiera lokalizację wartość <see cref="T:System.Activities.OutArgument`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-140">Gets the location of the value for the <see cref="T:System.Activities.OutArgument`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf385-141">Odwołanie do lokalizacji, w której jest przechowywana wartość argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-141">A reference to the location where the value of the argument is stored.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Activities.OutArgument&lt;T&gt; (System.Activities.Activity&lt;System.Activities.Location&lt;T&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Activities.OutArgument`1&lt;!T&gt; op_Implicit(class System.Activities.Activity`1&lt;class System.Activities.Location`1&lt;!T&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})~System.Activities.OutArgument{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expression As Activity(Of Location(Of T))) As OutArgument(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Activities::OutArgument&lt;T&gt; ^(System::Activities::Activity&lt;System::Activities::Location&lt;T&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Activities.Activity&lt;System.Activities.Location&lt;'T&gt;&gt; -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="System.Activities.OutArgument&lt;'T&gt;.op_Implicit expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.OutArgument&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Activities.Activity&lt;System.Activities.Location&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="bf385-142">Wartość argumentu</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-142">The value of the argument,</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf385-143">Inicjuje i zwraca nowy <see cref="T:System.Activities.OutArgument`1" /> tworzony przy użyciu określonego <see cref="T:System.Activities.Activity`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-143">Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Activity`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf385-144">Nowy argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-144">The new argument.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Activities.OutArgument&lt;T&gt; (System.Activities.DelegateArgument delegateArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Activities.OutArgument`1&lt;!T&gt; op_Implicit(class System.Activities.DelegateArgument delegateArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.DelegateArgument)~System.Activities.OutArgument{`0}" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Activities::OutArgument&lt;T&gt; ^(System::Activities::DelegateArgument ^ delegateArgument);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Activities.DelegateArgument -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="System.Activities.OutArgument&lt;'T&gt;.op_Implicit delegateArgument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.OutArgument&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateArgument" Type="System.Activities.DelegateArgument" />
      </Parameters>
      <Docs>
        <param name="delegateArgument">
          <span data-ttu-id="bf385-145">Wartość argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-145">The value of the argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf385-146">Inicjuje i zwraca nowy <see cref="T:System.Activities.OutArgument`1" /> tworzony przy użyciu określonego <see cref="T:System.Activities.DelegateArgument" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-146">Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.DelegateArgument" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf385-147">Nowy argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-147">The new argument.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf385-148">Jest to niejawnej konwersji.</span><span class="sxs-lookup"><span data-stu-id="bf385-148">This is an implicit conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Activities.OutArgument&lt;T&gt; (System.Activities.Variable variable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Activities.OutArgument`1&lt;!T&gt; op_Implicit(class System.Activities.Variable variable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.Variable)~System.Activities.OutArgument{`0}" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Activities::OutArgument&lt;T&gt; ^(System::Activities::Variable ^ variable);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Activities.Variable -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="System.Activities.OutArgument&lt;'T&gt;.op_Implicit variable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.OutArgument&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Activities.Variable" />
      </Parameters>
      <Docs>
        <param name="variable">
          <span data-ttu-id="bf385-149">Wartość argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-149">The value of the argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf385-150">Inicjuje i zwraca nowy <see cref="T:System.Activities.OutArgument`1" /> tworzony przy użyciu określonego <see cref="T:System.Activities.Variable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-150">Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Variable" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf385-151">Nowy argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-151">The new argument.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public void Set (System.Activities.ActivityContext context, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Set(class System.Activities.ActivityContext context, !T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.Set(System.Activities.ActivityContext,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Set (context As ActivityContext, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Set(System::Activities::ActivityContext ^ context, T value);" />
      <MemberSignature Language="F#" Value="override this.Set : System.Activities.ActivityContext * 'T -&gt; unit" Usage="outArgument.Set (context, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.ActivityContext" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="bf385-152">Bieżący kontekst działania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-152">The current activity context.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="bf385-153">Nowa wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-153">The new value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf385-154">Ustawia wartość <see cref="T:System.Activities.OutArgument`1" /> przy użyciu kontekstu określonego działania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf385-154">Sets the value of the <see cref="T:System.Activities.OutArgument`1" /> using the specified activity context.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>