<Type Name="ContractAdapter" FullName="System.AddIn.Pipeline.ContractAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b00ee80d8f5c5f0a2f9aa662d6dc1805c53308a9" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63914470" /></Metadata><TypeSignature Language="C#" Value="public static class ContractAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ContractAdapter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Pipeline.ContractAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Class ContractAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContractAdapter abstract sealed" />
  <TypeSignature Language="F#" Value="type ContractAdapter = class" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera metody służące do udostępniania i readapting dodatków.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa umożliwia udostępnianie dodatku przy użyciu innego hosta, który nie ma tego samego potoku do tego dodatku (szczególnie innego hosta, który nie ma takie same hosta Widok dodatku).  
  
 Jeśli zachodzi potrzeba dostosowania aktywowanego dodatek z jej widok hosta do Umowy, użyj <xref:System.AddIn.Pipeline.ContractAdapter.ViewToContractAdapter%2A> metody.  
  
 Jeśli utworzono wystąpienie kontrakt i trzeba przekonwertować widoku hosta, użyj <xref:System.AddIn.Pipeline.ContractAdapter.ContractToViewAdapter%2A> metody.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="ContractToViewAdapter&lt;TView&gt;">
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera widok hosta dodatków, jeśli odpowiedni adapter po stronie hosta znajduje się w określonej lokalizacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContractToViewAdapter&lt;TView&gt;">
      <MemberSignature Language="C#" Value="public static TView ContractToViewAdapter&lt;TView&gt; (System.AddIn.Pipeline.ContractHandle contract, System.AddIn.Hosting.PipelineStoreLocation location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView ContractToViewAdapter&lt;TView&gt;(class System.AddIn.Pipeline.ContractHandle contract, valuetype System.AddIn.Hosting.PipelineStoreLocation location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.ContractAdapter.ContractToViewAdapter``1(System.AddIn.Pipeline.ContractHandle,System.AddIn.Hosting.PipelineStoreLocation)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContractToViewAdapter(Of TView) (contract As ContractHandle, location As PipelineStoreLocation) As TView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TView&gt;&#xA; static TView ContractToViewAdapter(System::AddIn::Pipeline::ContractHandle ^ contract, System::AddIn::Hosting::PipelineStoreLocation location);" />
      <MemberSignature Language="F#" Value="static member ContractToViewAdapter : System.AddIn.Pipeline.ContractHandle * System.AddIn.Hosting.PipelineStoreLocation -&gt; 'View" Usage="System.AddIn.Pipeline.ContractAdapter.ContractToViewAdapter (contract, location)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contract" Type="System.AddIn.Pipeline.ContractHandle" />
        <Parameter Name="location" Type="System.AddIn.Hosting.PipelineStoreLocation" />
      </Parameters>
      <Docs>
        <typeparam name="TView">Typ, który definiuje widok hosta dodatków.</typeparam>
        <param name="contract">Dojście do Umowy, używane przez dodatek do udostępnienia.</param>
        <param name="location">Podstawy aplikacji hosta.</param>
        <summary>Pobiera widok hosta dodatków, jeśli odpowiedni adapter po stronie hosta znajduje się w lokalizacji określonej przez wartość z zakresu od <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> wyliczenia.</summary>
        <returns>Widok hosta dodatku, który jest udostępniany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W tym scenariuszu jednostki znajduje się wystąpienie kontrakt i chce dostosować go do określonego widoku. Ta metoda umożliwia odpytać system w celu znajdowania i wystąpienia karty, aby przekonwertować do tego widoku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="location" /> jest nieprawidłowy.</exception>
      </Docs>
    </Member>
    <Member MemberName="ContractToViewAdapter&lt;TView&gt;">
      <MemberSignature Language="C#" Value="public static TView ContractToViewAdapter&lt;TView&gt; (System.AddIn.Pipeline.ContractHandle contract, string pipelineRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView ContractToViewAdapter&lt;TView&gt;(class System.AddIn.Pipeline.ContractHandle contract, string pipelineRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.ContractAdapter.ContractToViewAdapter``1(System.AddIn.Pipeline.ContractHandle,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContractToViewAdapter(Of TView) (contract As ContractHandle, pipelineRoot As String) As TView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TView&gt;&#xA; static TView ContractToViewAdapter(System::AddIn::Pipeline::ContractHandle ^ contract, System::String ^ pipelineRoot);" />
      <MemberSignature Language="F#" Value="static member ContractToViewAdapter : System.AddIn.Pipeline.ContractHandle * string -&gt; 'View" Usage="System.AddIn.Pipeline.ContractAdapter.ContractToViewAdapter (contract, pipelineRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contract" Type="System.AddIn.Pipeline.ContractHandle" />
        <Parameter Name="pipelineRoot" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TView">Typ, który definiuje widok hosta dodatków.</typeparam>
        <param name="contract">Dojście do Umowy, używane przez dodatek do udostępnienia.</param>
        <param name="pipelineRoot">Ścieżka do dodatków magazynu.</param>
        <summary>Pobiera widok hosta dodatków, jeśli odpowiedni adapter po stronie hosta znajduje się w lokalizacji określonej przez ścieżkę.</summary>
        <returns>Widok hosta dodatku, który jest udostępniany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W tym scenariuszu jednostki znajduje się wystąpienie kontrakt i chce dostosować go do określonego widoku. Ta metoda umożliwia odpytać system w celu znajdowania i wystąpienia karty, aby przekonwertować do tego widoku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewToContractAdapter">
      <MemberSignature Language="C#" Value="public static System.AddIn.Pipeline.ContractHandle ViewToContractAdapter (object view);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Pipeline.ContractHandle ViewToContractAdapter(object view) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.ContractAdapter.ViewToContractAdapter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ViewToContractAdapter (view As Object) As ContractHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::AddIn::Pipeline::ContractHandle ^ ViewToContractAdapter(System::Object ^ view);" />
      <MemberSignature Language="F#" Value="static member ViewToContractAdapter : obj -&gt; System.AddIn.Pipeline.ContractHandle" Usage="System.AddIn.Pipeline.ContractAdapter.ViewToContractAdapter view" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Pipeline.ContractHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="view">Widok hosta dodatków uaktywniony przez system z bieżącej domeny aplikacji.</param>
        <summary>Pobiera uchwyt do umowy dotyczącej widok hosta podana dodatku.</summary>
        <returns>Dojście do Umowy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W tym scenariuszu jednostki źródłowej (host) ma dodatek, który chce być współużytkowane przez jednostki docelowej (inny host).  
  
 Użyj tej metody można uzyskać dojścia do Umowy, który został uruchomiony dla jednostki źródłowej przez dodatek system.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="view" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>