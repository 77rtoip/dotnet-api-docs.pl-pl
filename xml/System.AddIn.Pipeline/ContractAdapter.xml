<Type Name="ContractAdapter" FullName="System.AddIn.Pipeline.ContractAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="41d4782b82dcc729dd9b148472be19b45036f486" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30437136" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ContractAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ContractAdapter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Pipeline.ContractAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Class ContractAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContractAdapter abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia metody do udostępniania i readapting dodatków.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa umożliwia udostępnianie dodatku innego hosta, który nie ma tego samego procesu do tego dodatku (szczególnie innego hosta, który nie ma taki sam host Widok dodatku).  
  
 Jeśli zajdzie potrzeba dostosowania aktywowanego dodatku z jego widoku hosta do kontraktu, użyj <xref:System.AddIn.Pipeline.ContractAdapter.ViewToContractAdapter%2A> metody.  
  
 Utworzono wystąpienie kontraktu, należy przekonwertować go do widoku hosta, za pomocą <xref:System.AddIn.Pipeline.ContractAdapter.ContractToViewAdapter%2A> metody.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="ContractToViewAdapter&lt;TView&gt;">
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera widok hosta dodatku, jeśli odpowiednie karty po stronie hosta znajduje się w określonej lokalizacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContractToViewAdapter&lt;TView&gt;">
      <MemberSignature Language="C#" Value="public static TView ContractToViewAdapter&lt;TView&gt; (System.AddIn.Pipeline.ContractHandle contract, System.AddIn.Hosting.PipelineStoreLocation location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView ContractToViewAdapter&lt;TView&gt;(class System.AddIn.Pipeline.ContractHandle contract, valuetype System.AddIn.Hosting.PipelineStoreLocation location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.ContractAdapter.ContractToViewAdapter``1(System.AddIn.Pipeline.ContractHandle,System.AddIn.Hosting.PipelineStoreLocation)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContractToViewAdapter(Of TView) (contract As ContractHandle, location As PipelineStoreLocation) As TView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TView&gt;&#xA; static TView ContractToViewAdapter(System::AddIn::Pipeline::ContractHandle ^ contract, System::AddIn::Hosting::PipelineStoreLocation location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contract" Type="System.AddIn.Pipeline.ContractHandle" />
        <Parameter Name="location" Type="System.AddIn.Hosting.PipelineStoreLocation" />
      </Parameters>
      <Docs>
        <typeparam name="TView">Typ, który definiuje widoku hosta dodatku.</typeparam>
        <param name="contract">Dojście do kontraktu używanego przez dodatek do udostępnienia.</param>
        <param name="location">Baza aplikacji hosta.</param>
        <summary>Pobiera widok hosta dodatku, jeśli odpowiednie karty po stronie hosta znajduje się w lokalizacji określonej przez wartość z zakresu od <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> wyliczenia.</summary>
        <returns>Widoku hosta dodatku, który jest współużytkowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W tym scenariuszu jednostki wystąpienie kontrakt i chce dostosować ją do określonego widoku. Ta metoda umożliwia wykonywanie zapytań względem systemu, aby znaleźć i wystąpienia karty, aby przekonwertować do tego widoku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="location" /> jest nieprawidłowy.</exception>
      </Docs>
    </Member>
    <Member MemberName="ContractToViewAdapter&lt;TView&gt;">
      <MemberSignature Language="C#" Value="public static TView ContractToViewAdapter&lt;TView&gt; (System.AddIn.Pipeline.ContractHandle contract, string pipelineRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView ContractToViewAdapter&lt;TView&gt;(class System.AddIn.Pipeline.ContractHandle contract, string pipelineRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.ContractAdapter.ContractToViewAdapter``1(System.AddIn.Pipeline.ContractHandle,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContractToViewAdapter(Of TView) (contract As ContractHandle, pipelineRoot As String) As TView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TView&gt;&#xA; static TView ContractToViewAdapter(System::AddIn::Pipeline::ContractHandle ^ contract, System::String ^ pipelineRoot);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contract" Type="System.AddIn.Pipeline.ContractHandle" />
        <Parameter Name="pipelineRoot" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TView">Typ, który definiuje widoku hosta dodatku.</typeparam>
        <param name="contract">Dojście do kontraktu używanego przez dodatek do udostępnienia.</param>
        <param name="pipelineRoot">Ścieżka do magazynu dodatku.</param>
        <summary>Pobiera widok hosta dodatku, jeśli odpowiednie karty po stronie hosta znajduje się w lokalizacji określonej przez ścieżkę.</summary>
        <returns>Widoku hosta dodatku, który jest współużytkowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W tym scenariuszu jednostki wystąpienie kontrakt i chce dostosować ją do określonego widoku. Ta metoda umożliwia wykonywanie zapytań względem systemu, aby znaleźć i wystąpienia karty, aby przekonwertować do tego widoku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewToContractAdapter">
      <MemberSignature Language="C#" Value="public static System.AddIn.Pipeline.ContractHandle ViewToContractAdapter (object view);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Pipeline.ContractHandle ViewToContractAdapter(object view) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.ContractAdapter.ViewToContractAdapter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ViewToContractAdapter (view As Object) As ContractHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::AddIn::Pipeline::ContractHandle ^ ViewToContractAdapter(System::Object ^ view);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Pipeline.ContractHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="view">Widoku hosta dodatku uaktywniony przez system z bieżącej domeny aplikacji.</param>
        <summary>Pobiera dojścia do kontraktu dla podanego widoku hosta dodatku.</summary>
        <returns>Dojście do kontraktu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W tym scenariuszu jednostki źródłowej (hosta) ma dodatku, który ma być współużytkowane przez jednostki docelowej (innego hosta).  
  
 Użyj tej metody można uzyskać dojścia do kontraktu, który wystąpienia encji źródłowej przez dodatek system.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="view" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>