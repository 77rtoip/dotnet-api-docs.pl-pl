<Type Name="CollectionAdapters" FullName="System.AddIn.Pipeline.CollectionAdapters">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9fce4444306abbfe8fb64b9df55abbd5d64aab51" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69337124" /></Metadata><TypeSignature Language="C#" Value="public static class CollectionAdapters" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CollectionAdapters extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Pipeline.CollectionAdapters" />
  <TypeSignature Language="VB.NET" Value="Public Class CollectionAdapters" />
  <TypeSignature Language="C++ CLI" Value="public ref class CollectionAdapters abstract sealed" />
  <TypeSignature Language="F#" Value="type CollectionAdapters = class" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Umożliwia przekazywanie kolekcji między dodatkiem a jego aplikacją hosta.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa dostarcza metody, które umożliwiają <xref:System.Collections.Generic.IList%601> konwersję kolekcji <xref:System.AddIn.Contract.IListContract%601> na kolekcję. Kolekcja jest przenoszona przez granicę izolacji i przekonwertowane <xref:System.Collections.Generic.IList%601> z powrotem do kolekcji, która może być używana przez dodatek lub aplikację hosta. <xref:System.AddIn.Contract.IListContract%601>  
  
 Obiekty w kolekcjach muszą być usługami zdalnymi. Aby uzyskać więcej informacji na temat typów obiektów, które można przekazać, zobacz [kontrakty, widoki i karty](https://msdn.microsoft.com/library/a6460173-9507-4b87-8c07-d4ee245d715c).  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/8dd45b02-7218-40f9-857d-40d7b98b850b">Dodatki i rozszerzalność</related>
  </Docs>
  <Members>
    <Member MemberName="ToIList&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;T&gt; ToIList&lt;T&gt; (System.AddIn.Contract.IListContract&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;!!T&gt; ToIList&lt;T&gt;(class System.AddIn.Contract.IListContract`1&lt;!!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIList(Of T) (collection As IListContract(Of T)) As IList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IList&lt;T&gt; ^ ToIList(System::AddIn::Contract::IListContract&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="static member ToIList : System.AddIn.Contract.IListContract&lt;'T&gt; -&gt; System.Collections.Generic.IList&lt;'T&gt;" Usage="System.AddIn.Pipeline.CollectionAdapters.ToIList collection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.AddIn.Contract.IListContract&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ obiektów, które znajdują się na liście. <paramref name="T" />musi być możliwy do serializacji.</typeparam>
        <param name="collection">Kolekcja z drugiej strony potoku.</param>
        <summary>Konwertuje określoną <see cref="T:System.AddIn.Contract.IListContract`1" /> kolekcję <see cref="T:System.Collections.Generic.IList`1" /> na kolekcję.</summary>
        <returns>Przekonwertowana kolekcja.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacja hosta lub dodatek mogą korzystać z zwróconej <xref:System.Collections.Generic.IList%601> kolekcji. Kolekcja będzie miała token okresu istnienia dla kolekcji zdalnej <xref:System.AddIn.Contract.IListContract%601>. <xref:System.Collections.Generic.IList%601>  
  
 Tej metody należy używać tylko wtedy, gdy zawartość jest typów możliwych <xref:System.AddIn.Contract.IListContract%601> do serializacji, które mogą być przesyłane bezpośrednio do dodatku i hosta (a nie do typów, które muszą zostać dopasowane do widoków).  
  
   
  
## Examples  
 Poniższy przykład implementuje segment potoku karty po stronie hosta zgodnie z opisem [: Przekazywanie kolekcji między hostami i dodatkami](https://msdn.microsoft.com/library/b532c604-548e-4fab-b11c-377257dd0ee5). Przykład dostosowuje metodę niestandardową `ProcessBooks` , <xref:System.AddIn.Contract.IListContract%601> pobierając kolekcję przekazaną z dodatku <xref:System.Collections.Generic.IList%601> i konwertując ją do kolekcji, która może być używana przez aplikację hosta.  
  
 [!code-csharp[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/cs/LibraryManagerViewToContractAddInAdapter.cs#3)]
 [!code-vb[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/vb/LibraryManagerViewToContractAddInAdapter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIList&lt;TContract,TView&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;TView&gt; ToIList&lt;TContract,TView&gt; (System.AddIn.Contract.IListContract&lt;TContract&gt; collection, Converter&lt;TContract,TView&gt; contractViewAdapter, Converter&lt;TView,TContract&gt; viewContractAdapter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;!!TView&gt; ToIList&lt;TContract, TView&gt;(class System.AddIn.Contract.IListContract`1&lt;!!TContract&gt; collection, class System.Converter`2&lt;!!TContract, !!TView&gt; contractViewAdapter, class System.Converter`2&lt;!!TView, !!TContract&gt; viewContractAdapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIList(Of TContract, TView) (collection As IListContract(Of TContract), contractViewAdapter As Converter(Of TContract, TView), viewContractAdapter As Converter(Of TView, TContract)) As IList(Of TView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract, typename TView&gt;&#xA; static System::Collections::Generic::IList&lt;TView&gt; ^ ToIList(System::AddIn::Contract::IListContract&lt;TContract&gt; ^ collection, Converter&lt;TContract, TView&gt; ^ contractViewAdapter, Converter&lt;TView, TContract&gt; ^ viewContractAdapter);" />
      <MemberSignature Language="F#" Value="static member ToIList : System.AddIn.Contract.IListContract&lt;'Contract&gt; * Converter&lt;'Contract, 'View&gt; * Converter&lt;'View, 'Contract&gt; -&gt; System.Collections.Generic.IList&lt;'View&gt;" Usage="System.AddIn.Pipeline.CollectionAdapters.ToIList (collection, contractViewAdapter, viewContractAdapter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;TView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
        <TypeParameter Name="TView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.AddIn.Contract.IListContract&lt;TContract&gt;" />
        <Parameter Name="contractViewAdapter" Type="System.Converter&lt;TContract,TView&gt;" />
        <Parameter Name="viewContractAdapter" Type="System.Converter&lt;TView,TContract&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract">Typ, który definiuje kontrakt do przekazywania obiektów typu <paramref name="TView" /> między granicami izolacji.</typeparam>
        <typeparam name="TView">Typ, który definiuje widok obiektów na liście.</typeparam>
        <param name="collection">Kolekcja do przekazania do drugiej strony potoku.</param>
        <param name="contractViewAdapter">Konwerter, który dostosowuje dane z typu zdefiniowanego w kontrakcie do typu oczekiwanego w widoku.</param>
        <param name="viewContractAdapter">Konwerter, który dostosowuje dane z typu zdefiniowanego w widoku do typu oczekiwanego przez kontrakt.</param>
        <summary>Konwertuje określoną <see cref="T:System.AddIn.Contract.IListContract`1" /> kolekcję <see cref="T:System.Collections.Generic.IList`1" /> do kolekcji za pomocą adapterów konwerterów.</summary>
        <returns>Przekonwertowana kolekcja.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego przeciążenia metody dla <xref:System.AddIn.Contract.IListContract%601> kolekcji zawierających typy, które muszą zostać dopasowane przed przekazaniem ich do dodatku lub hosta (zamiast prostych typów możliwych do serializacji, które mogą być przesyłane bezpośrednio). Aplikacja hosta lub dodatek mogą korzystać z zwróconej <xref:System.Collections.Generic.IList%601> kolekcji. Będzie on miał token okresu istnienia dla elementu <xref:System.AddIn.Contract.IListContract%601>zdalnego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIListContract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.AddIn.Contract.IListContract&lt;T&gt; ToIListContract&lt;T&gt; (System.Collections.Generic.IList&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Contract.IListContract`1&lt;!!T&gt; ToIListContract&lt;T&gt;(class System.Collections.Generic.IList`1&lt;!!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIListContract(Of T) (collection As IList(Of T)) As IListContract(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::AddIn::Contract::IListContract&lt;T&gt; ^ ToIListContract(System::Collections::Generic::IList&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="static member ToIListContract : System.Collections.Generic.IList&lt;'T&gt; -&gt; System.AddIn.Contract.IListContract&lt;'T&gt;" Usage="System.AddIn.Pipeline.CollectionAdapters.ToIListContract collection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.IListContract&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IList&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ obiektów, które znajdują się na liście. <paramref name="T" />musi być możliwy do serializacji.</typeparam>
        <param name="collection">Kolekcja do przekonwertowania.</param>
        <summary>Konwertuje określoną <see cref="T:System.Collections.Generic.IList`1" /> kolekcję <see cref="T:System.AddIn.Contract.IListContract`1" /> na kolekcję.</summary>
        <returns>Przekonwertowana kolekcja.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.AddIn.Contract.IListContract%601> Kolekcja może być organizowana na granicy izolacji między dodatkiem a jego aplikacją hosta.  
  
 Tego przeciążania metody należy używać tylko wtedy, gdy zawartość <xref:System.Collections.Generic.IList%601> kolekcji są typami możliwymi do serializacji, które mogą być przesyłane bezpośrednio do kontraktu (a nie typy, które muszą zostać dostosowane do kontraktów).  
  
   
  
## Examples  
 W poniższym przykładzie zaimplementowano klasę, która definiuje segment potoku karty bocznej. Dostosowuje metodę niestandardową `ProcessBooks` , <xref:System.Collections.Generic.IList%601> pobierając kolekcję przekazaną z segmentu widoku dodatku <xref:System.AddIn.Contract.IListContract%601> i konwertując ją do kolekcji, która może być organizowana przez granicę izolacji do hosta.  
  
 [!code-csharp[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/cs/LibraryManagerContractToViewHostAdapter.cs#4)]
 [!code-vb[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/vb/LibraryManagerContractToViewHostAdapter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIListContract&lt;TView,TContract&gt;">
      <MemberSignature Language="C#" Value="public static System.AddIn.Contract.IListContract&lt;TContract&gt; ToIListContract&lt;TView,TContract&gt; (System.Collections.Generic.IList&lt;TView&gt; collection, Converter&lt;TView,TContract&gt; viewContractAdapter, Converter&lt;TContract,TView&gt; contractViewAdapter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Contract.IListContract`1&lt;!!TContract&gt; ToIListContract&lt;TView, TContract&gt;(class System.Collections.Generic.IList`1&lt;!!TView&gt; collection, class System.Converter`2&lt;!!TView, !!TContract&gt; viewContractAdapter, class System.Converter`2&lt;!!TContract, !!TView&gt; contractViewAdapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIListContract(Of TView, TContract) (collection As IList(Of TView), viewContractAdapter As Converter(Of TView, TContract), contractViewAdapter As Converter(Of TContract, TView)) As IListContract(Of TContract)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TView, typename TContract&gt;&#xA; static System::AddIn::Contract::IListContract&lt;TContract&gt; ^ ToIListContract(System::Collections::Generic::IList&lt;TView&gt; ^ collection, Converter&lt;TView, TContract&gt; ^ viewContractAdapter, Converter&lt;TContract, TView&gt; ^ contractViewAdapter);" />
      <MemberSignature Language="F#" Value="static member ToIListContract : System.Collections.Generic.IList&lt;'View&gt; * Converter&lt;'View, 'Contract&gt; * Converter&lt;'Contract, 'View&gt; -&gt; System.AddIn.Contract.IListContract&lt;'Contract&gt;" Usage="System.AddIn.Pipeline.CollectionAdapters.ToIListContract (collection, viewContractAdapter, contractViewAdapter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.IListContract&lt;TContract&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TView" />
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IList&lt;TView&gt;" />
        <Parameter Name="viewContractAdapter" Type="System.Converter&lt;TView,TContract&gt;" />
        <Parameter Name="contractViewAdapter" Type="System.Converter&lt;TContract,TView&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TView">Typ, który definiuje widok obiektów na liście.</typeparam>
        <typeparam name="TContract">Typ, który definiuje kontrakt do przekazywania obiektów typu <paramref name="TView" /> między granicami izolacji.</typeparam>
        <param name="collection">Kolekcja do przekonwertowania.</param>
        <param name="viewContractAdapter">Konwerter, który dostosowuje dane z typu zdefiniowanego w widoku do typu oczekiwanego przez kontrakt.</param>
        <param name="contractViewAdapter">Konwerter, który dostosowuje dane z typu zdefiniowanego w kontrakcie do typu oczekiwanego w widoku.</param>
        <summary>Konwertuje określoną <see cref="T:System.Collections.Generic.IList`1" /> kolekcję <see cref="T:System.AddIn.Contract.IListContract`1" /> do kolekcji za pomocą adapterów konwerterów.</summary>
        <returns>Przekonwertowana kolekcja.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego przeciążenia metody dla <xref:System.Collections.Generic.IList%601> kolekcji, które zawierają typy, które muszą zostać dostosowane do kontraktów, zanim będą mogły zostać przesłane do kontraktu (a nie proste typy, które mogą być przesyłane bezpośrednio). <xref:System.AddIn.Contract.IListContract%601> Kolekcja może być organizowana na granicy izolacji między dodatkiem a jego aplikacją hosta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
