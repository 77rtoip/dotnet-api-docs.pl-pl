<Type Name="CollectionAdapters" FullName="System.AddIn.Pipeline.CollectionAdapters">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cda5b936b22052f7b99b2c7e5bd552235a459181" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30437496" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CollectionAdapters" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CollectionAdapters extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Pipeline.CollectionAdapters" />
  <TypeSignature Language="VB.NET" Value="Public Class CollectionAdapters" />
  <TypeSignature Language="C++ CLI" Value="public ref class CollectionAdapters abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Umożliwia kolekcje do przekazania między dodatek, a jej aplikację hosta.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa dostarcza metody, które umożliwiają <xref:System.Collections.Generic.IList%601> kolekcji ma zostać przekonwertowane na <xref:System.AddIn.Contract.IListContract%601> kolekcji. <xref:System.AddIn.Contract.IListContract%601> Kolekcji jest przekazywane przez granica izolacji i konwertowana z powrotem do <xref:System.Collections.Generic.IList%601> kolekcji, która służy lub w aplikacji hosta.  
  
 Obiekty w kolekcjach muszą być wykonywane zdalnie. Aby uzyskać więcej informacji na temat typów obiektów, które mogą upłynąć, zobacz [kontrakty, widoków i kart](http://msdn.microsoft.com/library/a6460173-9507-4b87-8c07-d4ee245d715c).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ToIList&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;T&gt; ToIList&lt;T&gt; (System.AddIn.Contract.IListContract&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;!!T&gt; ToIList&lt;T&gt;(class System.AddIn.Contract.IListContract`1&lt;!!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIList(Of T) (collection As IListContract(Of T)) As IList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IList&lt;T&gt; ^ ToIList(System::AddIn::Contract::IListContract&lt;T&gt; ^ collection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.AddIn.Contract.IListContract&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ obiektów, które znajdują się na liście. <c>T</c> muszą podlegać serializacji.</typeparam>
        <param name="collection">Kolekcja z drugiej stronie potoku.</param>
        <summary>Konwertuje określony <see cref="T:System.AddIn.Contract.IListContract`1" /> kolekcji <see cref="T:System.Collections.Generic.IList`1" /> kolekcji.</summary>
        <returns>Kolekcja przekonwertowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacja hosta lub Dodaj służy zwróconego <xref:System.Collections.Generic.IList%601> kolekcji. <xref:System.Collections.Generic.IList%601> Kolekcji mają okres istnienia tokenu do zdalnego <xref:System.AddIn.Contract.IListContract%601> kolekcji.  
  
 Przeciążenie tej metody należy używać tylko wtedy, gdy zawartość <xref:System.AddIn.Contract.IListContract%601> możliwy do serializacji typów, które mogą zostać przekazane bezpośrednio do dodatku i hosta (a nie typy, które muszą być dostosowywane do widoków).  
  
   
  
## Examples  
 Poniższy przykład implementuje segment potoku karty po stronie hosta, zgodnie z opisem [wskazówki: przekazywanie kolekcje między hostami i dodatki](http://msdn.microsoft.com/library/b532c604-548e-4fab-b11c-377257dd0ee5). Przykład dostosowuje niestandardowego `ProcessBooks` metody wykonując <xref:System.AddIn.Contract.IListContract%601> kolekcji przekazywane z dodatku, konwersja na <xref:System.Collections.Generic.IList%601> kolekcji, które umożliwiają aplikacji hosta.  
  
 [!code-csharp[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/cs/LibraryManagerViewToContractAddInAdapter.cs#3)]
 [!code-vb[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/vb/LibraryManagerViewToContractAddInAdapter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIList&lt;TContract,TView&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;TView&gt; ToIList&lt;TContract,TView&gt; (System.AddIn.Contract.IListContract&lt;TContract&gt; collection, Converter&lt;TContract,TView&gt; contractViewAdapter, Converter&lt;TView,TContract&gt; viewContractAdapter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;!!TView&gt; ToIList&lt;TContract, TView&gt;(class System.AddIn.Contract.IListContract`1&lt;!!TContract&gt; collection, class System.Converter`2&lt;!!TContract, !!TView&gt; contractViewAdapter, class System.Converter`2&lt;!!TView, !!TContract&gt; viewContractAdapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIList(Of TContract, TView) (collection As IListContract(Of TContract), contractViewAdapter As Converter(Of TContract, TView), viewContractAdapter As Converter(Of TView, TContract)) As IList(Of TView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract, typename TView&gt;&#xA; static System::Collections::Generic::IList&lt;TView&gt; ^ ToIList(System::AddIn::Contract::IListContract&lt;TContract&gt; ^ collection, Converter&lt;TContract, TView&gt; ^ contractViewAdapter, Converter&lt;TView, TContract&gt; ^ viewContractAdapter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;TView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
        <TypeParameter Name="TView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.AddIn.Contract.IListContract&lt;TContract&gt;" />
        <Parameter Name="contractViewAdapter" Type="System.Converter&lt;TContract,TView&gt;" />
        <Parameter Name="viewContractAdapter" Type="System.Converter&lt;TView,TContract&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract">Typ, który definiuje kontrakt dla obiektów typu przekazywanie <c>TView</c> granicy izolacji.</typeparam>
        <typeparam name="TView">Typ, który definiuje widoku obiektów na liście.</typeparam>
        <param name="collection">Kolekcja do przekazania do drugiej stronie potoku.</param>
        <param name="contractViewAdapter">Konwerter, który dostosowuje się od typu zdefiniowanego w umowie na typ oczekiwany w widoku danych.</param>
        <param name="viewContractAdapter">Konwerter, który dostosowuje danych od typu zdefiniowanego w widoku na typ oczekiwany przez umowy.</param>
        <summary>Konwertuje określoną <see cref="T:System.AddIn.Contract.IListContract`1" /> kolekcji <see cref="T:System.Collections.Generic.IList`1" /> kolekcji za pomocą konwertera kart.</summary>
        <returns>Kolekcja przekonwertowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie metody dla <xref:System.AddIn.Contract.IListContract%601> kolekcje, które zawierają typy, które muszą zostać dostosowane, zanim mogą zostać przekazane do dodatku lub hosta (a nie do serializacji typów prostych, które mogą zostać przekazane bezpośrednio). Aplikacja hosta lub Dodaj służy zwróconego <xref:System.Collections.Generic.IList%601> kolekcji. Jej okres istnienia tokenu do zdalnego <xref:System.AddIn.Contract.IListContract%601>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIListContract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.AddIn.Contract.IListContract&lt;T&gt; ToIListContract&lt;T&gt; (System.Collections.Generic.IList&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Contract.IListContract`1&lt;!!T&gt; ToIListContract&lt;T&gt;(class System.Collections.Generic.IList`1&lt;!!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIListContract(Of T) (collection As IList(Of T)) As IListContract(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::AddIn::Contract::IListContract&lt;T&gt; ^ ToIListContract(System::Collections::Generic::IList&lt;T&gt; ^ collection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.IListContract&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IList&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ obiektów, które znajdują się na liście. <c>T</c> muszą podlegać serializacji.</typeparam>
        <param name="collection">Kolekcja do konwersji.</param>
        <summary>Konwertuje określoną <see cref="T:System.Collections.Generic.IList`1" /> kolekcji <see cref="T:System.AddIn.Contract.IListContract`1" /> kolekcji.</summary>
        <returns>Kolekcja przekonwertowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.AddIn.Contract.IListContract%601> Kolekcji można zorganizować granicy izolacji między dodatek, a jej aplikację hosta.  
  
 Przeciążenie tej metody należy używać tylko wtedy, gdy zawartość <xref:System.Collections.Generic.IList%601> kolekcji jest możliwy do serializacji typy, które mogą zostać przekazane bezpośrednio do kontraktu (zamiast typów, które muszą być dostosowywane do umów).  
  
   
  
## Examples  
 Poniższy przykład implementuje klasy, która definiuje segmentów potoku karty po stronie dodatku. Dostosowuje go niestandardowego `ProcessBooks` metody wykonując <xref:System.Collections.Generic.IList%601> kolekcji przekazywane z segmentem dodatku widoku i konwersja na <xref:System.AddIn.Contract.IListContract%601> kolekcji, które mogą być przekazywane granicy izolacji na hoście.  
  
 [!code-csharp[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/cs/LibraryManagerContractToViewHostAdapter.cs#4)]
 [!code-vb[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/vb/LibraryManagerContractToViewHostAdapter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIListContract&lt;TView,TContract&gt;">
      <MemberSignature Language="C#" Value="public static System.AddIn.Contract.IListContract&lt;TContract&gt; ToIListContract&lt;TView,TContract&gt; (System.Collections.Generic.IList&lt;TView&gt; collection, Converter&lt;TView,TContract&gt; viewContractAdapter, Converter&lt;TContract,TView&gt; contractViewAdapter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Contract.IListContract`1&lt;!!TContract&gt; ToIListContract&lt;TView, TContract&gt;(class System.Collections.Generic.IList`1&lt;!!TView&gt; collection, class System.Converter`2&lt;!!TView, !!TContract&gt; viewContractAdapter, class System.Converter`2&lt;!!TContract, !!TView&gt; contractViewAdapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIListContract(Of TView, TContract) (collection As IList(Of TView), viewContractAdapter As Converter(Of TView, TContract), contractViewAdapter As Converter(Of TContract, TView)) As IListContract(Of TContract)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TView, typename TContract&gt;&#xA; static System::AddIn::Contract::IListContract&lt;TContract&gt; ^ ToIListContract(System::Collections::Generic::IList&lt;TView&gt; ^ collection, Converter&lt;TView, TContract&gt; ^ viewContractAdapter, Converter&lt;TContract, TView&gt; ^ contractViewAdapter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.IListContract&lt;TContract&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TView" />
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IList&lt;TView&gt;" />
        <Parameter Name="viewContractAdapter" Type="System.Converter&lt;TView,TContract&gt;" />
        <Parameter Name="contractViewAdapter" Type="System.Converter&lt;TContract,TView&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TView">Typ, który definiuje widoku obiektów na liście.</typeparam>
        <typeparam name="TContract">Typ, który definiuje kontrakt dla obiektów typu przekazywanie <c>TView</c> granicy izolacji.</typeparam>
        <param name="collection">Kolekcja do konwersji.</param>
        <param name="viewContractAdapter">Konwerter, który dostosowuje danych od typu zdefiniowanego w widoku na typ oczekiwany przez umowy.</param>
        <param name="contractViewAdapter">Konwerter, który dostosowuje się od typu zdefiniowanego w umowie na typ oczekiwany w widoku danych.</param>
        <summary>Konwertuje określoną <see cref="T:System.Collections.Generic.IList`1" /> kolekcji <see cref="T:System.AddIn.Contract.IListContract`1" /> kolekcji za pomocą konwertera kart.</summary>
        <returns>Kolekcja przekonwertowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie metody dla <xref:System.Collections.Generic.IList%601> kolekcje, które zawierają typy, które musi być dostosowywane w umowach przed mogą zostać przekazane do kontraktu (a nie do serializacji typów prostych, które mogą zostać przekazane bezpośrednio). <xref:System.AddIn.Contract.IListContract%601> Kolekcji można zorganizować granicy izolacji między dodatek, a jej aplikację hosta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>