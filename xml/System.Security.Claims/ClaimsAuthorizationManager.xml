<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7b0ce02435dc004c4e56705667ede4b0e0844cb7" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69264014" /></Metadata><TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthorizationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Definiuje podstawową implementację Menedżera autoryzacji oświadczeń.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthorizationManager> Klasa zawiera podstawową implementację Menedżera autoryzacji oświadczeń. Menedżera autoryzacji oświadczeń można używać w następujących dwóch scenariuszach:  
  
-   W przypadku aplikacji i usług opartych na sieci Web Menedżer autoryzacji oświadczeń można dodać do potoku przetwarzania, aby zapewnić punkt rozszerzalności, z którego można autoryzować dostęp do zasobu zgodnie z wartością oświadczeń przychodzących przed kodem aplikacji w rzeczywistości implementuje żądany zasób.  
  
-   W przypadku korzystania z <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> klasy <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> lub klasy w celu wykonywania autonomicznych lub deklaratywnych kontroli dostępu opartej na oświadczeniach w kodzie, Menedżer autoryzacji oświadczeń skonfigurowany dla aplikacji jest wywoływany przez system w celu wykonania niezaznaczone. Kontrola dostępu oparta na oświadczeniach może być wykonywana zarówno w aplikacjach sieci Web, jak i w aplikacjach klasycznych.  
  
 Domyślna implementacja dostarczona przez <xref:System.Security.Claims.ClaimsAuthorizationManager> klasę autoryzuje dostęp dla każdego z przedstawionych roszczeń, jednak można utworzyć ją z tej klasy i <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> zastąpić metodę, aby zapewnić własną logikę autoryzacji.  
  
 Korzystanie z Menedżera autoryzacji oświadczeń jest opcjonalne. Można skonfigurować aplikację do korzystania z Menedżera autoryzacji oświadczeń programowo przy użyciu <xref:System.IdentityModel.Configuration.IdentityConfiguration> klasy lub deklaratywnie, [ &lt;określając element składnika ClaimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) , który jest [ element&lt;&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) podrzędny elementu IdentityConfiguration w pliku konfiguracyjnym aplikacji. Jeśli aplikacja jest witryną sieci Web lub aplikacją sieci Web hostowaną w Internet Information Services (IIS), należy również dodać ją <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> w kolekcji modułów HTTP ASP.NET.  
  
> [!IMPORTANT]
>  W przypadku korzystania z <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> klasy <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> lub klasy, Menedżer autoryzacji oświadczeń, który jest używany do przeprowadzenia sprawdzenia dostępu jest taki, który jest określony w konfiguracji <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> tożsamości we właściwości. W pliku konfiguracji jest `<identityConfiguration>` to sekcja, do której odwołuje się element domyślny. `<federationConfiguration>` Jest to prawdziwe nawet w przypadku usług Windows Communication Foundation (WCF) i aplikacji klasycznych.  
  
 Klasa bazowa nie przyjmuje żadnej dodatkowej konfiguracji; można jednak <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> zastąpić klasy pochodne, aby zapewnić inicjalizację Menedżera autoryzacji oświadczeń `<claimsAuthorizationElement>`z elementów podrzędnych. <xref:System.Security.Claims.ClaimsAuthorizationManager> Typowym scenariuszem jest użycie tych elementów podrzędnych w celu określenia zasad autoryzacji, które określają, które typy i wartości zgłoszeń są wymagane w celu uzyskania dostępu do tego zasobu. Nie jest to wymaganie twarde, ale można zdefiniować dowolny sposób użycia i składni dla implementacji.  
  
   
  
## Examples  
 Przykłady kodu, które są używane w <xref:System.Security.Claims.ClaimsAuthorizationManager> tematach, są pobierane `Claims Based Authorization` z przykładu. Ten przykład zawiera niestandardowego Menedżera autoryzacji oświadczeń, który umożliwia autoryzowanie podmiotów na podstawie zasad określonych w konfiguracji. Menedżer autoryzacji oświadczeń niestandardowych składa się z trzech podstawowych składników: Klasa pochodna <xref:System.Security.Claims.ClaimsAuthorizationManager> implementująca Menedżera `ResourceAction` , Klasa, która par zasobów i akcja, oraz czytelnik zasad, który odczytuje i kompiluje zasady, które są określony w pliku konfiguracji. Te skompilowane zasady mogą następnie być używane przez Menedżera autoryzacji oświadczeń do oszacowania podmiotu zabezpieczeń w celu autoryzowania dostępu do zasobów. Nie wszystkie elementy są wyświetlane dla elementu zwięzłości. Aby uzyskać informacje na temat tego przykładu i innych przykładów dostępnych dla WIF i informacje o tym, gdzie je pobrać, zobacz [przykładowy indeks kodu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Poniższy kod przedstawia implementację niestandardowego Menedżera autoryzacji oświadczeń. Metoda odczytuje i kompiluje zasady z konfiguracji przy użyciu klasy pomocnika czytnika zasad (niepokazywany) <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> , a metoda udziela dostępu lub nie zezwala na dostęp na podstawie tych zasad. <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 Poniższy kod przedstawia `ResourceAction` klasę używaną przez Menedżera oświadczeń niestandardowych.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Poniższy kod XML przedstawia sposób konfigurowania Menedżera autoryzacji oświadczeń pokazanego powyżej dla aplikacji sieci Web hostowanej w usługach IIS 7,5. Wyświetlane są tylko elementy charakterystyczne dla konfiguracji Menedżera autoryzacji oświadczeń. Należy zauważyć, że odwołanie do <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> klasy należy dodać do potoku `<system.Webserver>` w ramach elementu. W przypadku lokacji i aplikacji hostowanych w wersjach usług IIS przed usługami IIS 7 Moduły można dodać do potoku w ramach `<system.Web>` elementu. Ta konfiguracja jest wyświetlana, ale jest oznaczona jako komentarz.  
  
 Zasady używane przez Menedżera autoryzacji oświadczeń są określane przez elementy niestandardowe `<policy>` [ &lt;w elemencie składnika ClaimsAuthorizationManager.&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) W pierwszej zasadzie podmiot zabezpieczeń musi mieć jedno z określonych oświadczeń, aby można było wykonać określoną akcję dla określonego zasobu. W drugiej zasadzie podmiot zabezpieczeń musi mieć oba oświadczenia, aby można było wykonać określoną akcję dla określonego zasobu. We wszystkich innych przypadkach podmiot zabezpieczeń jest automatycznie udzielany dostęp niezależnie od ich posiadanych oświadczeń.  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthorizationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool&#xA;override this.CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool" Usage="claimsAuthorizationManager.CheckAccess context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context">Kontekst autoryzacji, który zawiera temat, zasób i akcję, dla których ma zostać sprawdzona autoryzacja.</param>
        <summary>Po zaimplementowaniu w klasie pochodnej program sprawdza autoryzację podmiotu w określonym kontekście, aby wykonać określoną akcję dla określonego zasobu.</summary>
        <returns><see langword="true" />Jeśli podmiot jest autoryzowany do wykonania określonej akcji w określonym zasobie; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowa implementacja zawsze zwraca `true`, która autoryzuje dostęp. Można zastąpić tę metodę w klasie pochodnej, aby autoryzować dostęp na podstawie wymagań aplikacji RP. Jeśli ta metoda zwróci `false`metodę, Windows Identity Foundation (WIF) zwróci błąd nieautoryzowany do obiektu wywołującego; w przeciwnym razie wykonywanie jest przesyłane do aplikacji RP.  
  
   
  
## Examples  
 Przykłady kodu, które są używane w <xref:System.Security.Claims.ClaimsAuthorizationManager> tematach, są pobierane `Claims Based Authorization` z przykładu. Ten przykład zawiera niestandardowego Menedżera autoryzacji oświadczeń, który umożliwia autoryzowanie podmiotów na podstawie zasad określonych w konfiguracji. Menedżer autoryzacji oświadczeń niestandardowych składa się z trzech podstawowych składników: Klasa pochodna <xref:System.Security.Claims.ClaimsAuthorizationManager> implementująca Menedżera `ResourceAction` , Klasa, która par zasobów i akcja, oraz czytelnik zasad, który odczytuje i kompiluje zasady, które są określony w pliku konfiguracji. Te skompilowane zasady mogą następnie być używane przez Menedżera autoryzacji oświadczeń do oszacowania podmiotu zabezpieczeń w celu autoryzowania dostępu do zasobów. Nie wszystkie elementy są wyświetlane dla elementu zwięzłości. Aby uzyskać informacje na temat tego przykładu i innych przykładów dostępnych dla WIF i informacje o tym, gdzie je pobrać, zobacz [przykładowy indeks kodu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Poniższy kod przedstawia przesłonięcie <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> metody. Ta metoda udziela lub nie zezwala na dostęp na podstawie zasad odczytywanych i kompilowanych z pliku konfiguracji.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 Poniższy kod przedstawia `ResourceAction` klasę używaną przez Menedżera oświadczeń niestandardowych.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Zasady używane przez Menedżera autoryzacji oświadczeń są określane przez elementy niestandardowe `<policy>` [ &lt;w elemencie składnika ClaimsAuthorizationManager.&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) Te zasady są odczytywane i kompilowane przez <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> metodę. W pierwszej zasadzie podmiot zabezpieczeń musi mieć jedno z określonych oświadczeń, aby można było wykonać określoną akcję dla określonego zasobu. W drugiej zasadzie podmiot zabezpieczeń musi mieć oba oświadczenia, aby można było wykonać określoną akcję dla określonego zasobu. We wszystkich innych przypadkach podmiot zabezpieczeń jest automatycznie udzielany dostęp niezależnie od ich posiadanych oświadczeń.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthorizationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Elementy konfiguracji niestandardowej. Każdy węzeł na liście jest typu <see cref="T:System.Xml.XmlElement" />.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, ładuje konfigurację niestandardową z pliku XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> Metoda jest wywoływana przez infrastrukturę konfiguracji. Gdy ta metoda jest wywoływana, `nodelist` będzie zawierać elementy [ &lt;podrzędne najwyższego poziomu elementu składnika ClaimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) z pliku konfiguracyjnego. Każdy z tych elementów może z kolei zawierać atrybuty lub elementy podrzędne w zależności od schematu konfiguracji zdefiniowanego dla klasy pochodnej. Jeśli w pliku konfiguracji nie są wyświetlane `<claimsAuthorizationManager>` żadne elementy podrzędne, ta metoda nie jest wywoływana.  
  
 Domyślna implementacja zgłasza <xref:System.NotImplementedException>. Zastąp tę metodę w klasie pochodnej, aby włączyć inicjowanie Menedżera autoryzacji oświadczeń z pliku konfiguracji. Zazwyczaj elementy konfiguracji są używane do wyznaczania zasad autoryzacji. można jednak definiować elementy i używać ich w dowolny sposób, który ma sens na podstawie wymagań aplikacji.  
  
   
  
## Examples  
 Przykłady kodu, które są używane w <xref:System.Security.Claims.ClaimsAuthorizationManager> tematach, są pobierane `Claims Based Authorization` z przykładu. Ten przykład zawiera niestandardowego Menedżera autoryzacji oświadczeń, który umożliwia autoryzowanie podmiotów na podstawie zasad określonych w konfiguracji. Menedżer autoryzacji oświadczeń niestandardowych składa się z trzech podstawowych składników: Klasa pochodna <xref:System.Security.Claims.ClaimsAuthorizationManager> implementująca Menedżera `ResourceAction` , Klasa, która par zasobów i akcja, oraz czytelnik zasad, który odczytuje i kompiluje zasady, które są określony w pliku konfiguracji. Te skompilowane zasady mogą następnie być używane przez Menedżera autoryzacji oświadczeń do oszacowania podmiotu zabezpieczeń w celu autoryzowania dostępu do zasobów. Nie wszystkie elementy są wyświetlane dla elementu zwięzłości. Aby uzyskać informacje na temat tego przykładu i innych przykładów dostępnych dla WIF i informacje o tym, gdzie je pobrać, zobacz [przykładowy indeks kodu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Poniższy kod przedstawia przesłonięcie <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> metody. Ta metoda używa klasy czytnika zasad pomocnika (niepokazywany) do odczytywania i kompilowania zasad autoryzacji określonych w pliku konfiguracji. Zasady są dodawane do słownika i są dostępne `ResourceAction` dla obiektu klucza utworzonego na podstawie zasobu i akcji, dla których są przeznaczone.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 Poniższy kod przedstawia `ResourceAction` klasę używaną przez Menedżera oświadczeń niestandardowych.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Zasady używane przez Menedżera autoryzacji oświadczeń są określane przez elementy niestandardowe `<policy>` [ &lt;w elemencie składnika ClaimsAuthorizationManager.&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) Te zasady są odczytywane i kompilowane przez <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> metodę. W pierwszej zasadzie podmiot zabezpieczeń musi mieć jedno z określonych oświadczeń, aby można było wykonać określoną akcję dla określonego zasobu. W drugiej zasadzie podmiot zabezpieczeń musi mieć oba oświadczenia, aby można było wykonać określoną akcję dla określonego zasobu. We wszystkich innych przypadkach podmiot zabezpieczeń jest automatycznie udzielany dostęp niezależnie od ich posiadanych oświadczeń.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
