<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa77fc99c06460c962f41c33b11554f448051d19" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36531913" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthorizationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Definiuje implementację podstawową dla Menedżera autoryzacji oświadczeń.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthorizationManager> Klasa zawiera implementację podstawową dla Menedżera autoryzacji oświadczeń. Menedżer autoryzacji oświadczeń może służyć w następujących dwóch scenariuszach:  
  
-   W usługach i aplikacjach sieci web Menedżera autoryzacji oświadczeń można dodać do potoku przetwarzania, aby udostępnić punkt rozszerzalności, z którego można autoryzować dostęp do zasobów zgodnie z wartością oświadczenia przychodzące przed uruchomieniem kodu aplikacji czy rzeczywiście implementuje żądany zasób jest wywoływana.  
  
-   Kiedy używasz <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> klasy lub <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> klasy w celu wykonania deklaratywne lub imperatywne dostępu opartego na oświadczeniach sprawdza, czy w kodzie, Menedżera autoryzacji oświadczeń, który jest skonfigurowany dla aplikacji jest wywoływana przez system do wykonania Sprawdź. Kontrola dostępu oparta na oświadczeniach, mogą być wykonywane w aplikacji sieci web i aplikacji klasycznych.  
  
 Domyślna implementacja dostarczone przez <xref:System.Security.Claims.ClaimsAuthorizationManager> klasy autoryzuje dostęp Każde oświadczenie prezentowane; jednak może pochodzić z tej klasy i zastąpienia <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> metody w celu zapewnienia logika autoryzacji.  
  
 Korzystanie z Menedżera autoryzacji oświadczeń jest opcjonalne. Można skonfigurować aplikację do Menedżera autoryzacji oświadczeń programowo przy użyciu <xref:System.IdentityModel.Configuration.IdentityConfiguration> klasy lub w sposób deklaratywny, określenie [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)element, który jest elementem podrzędnym elementu [ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) elementu w pliku konfiguracyjnym aplikacji. Jeśli aplikacja jest witryną sieci web lub aplikacji sieci web hostowanych w Internet Information Services (IIS), musisz również dodać <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> w kolekcji moduły HTTP platformy ASP.NET.  
  
> [!IMPORTANT]
>  Kiedy używasz <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> klasy lub <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> klasy, Menedżer autoryzacji oświadczeń, który służy do przeprowadzania kontroli dostępu jest tą, która jest określona w konfiguracji tożsamości w ramach <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> właściwości. W pliku konfiguracji jest `<identityConfiguration>` sekcja, która odwołuje się do domyślnego `<federationConfiguration>` elementu. Ta zasada obowiązuje nawet w przypadku usług Windows Communication Foundation (WCF) i aplikacji klasycznych.  
  
 <xref:System.Security.Claims.ClaimsAuthorizationManager> Klasy bazowej nie przyjmuje żadnych dodatkowych czynności konfiguracyjnych; Jednakże, możesz zastąpić <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> w pochodnej klasy zapewniające inicjowanie Menedżera autoryzacji oświadczeń z elementami podrzędnymi `<claimsAuthorizationElement>`. Typowym scenariuszem jest określić zasady autoryzacji, które określają typy oświadczeń i wartości, które są wymagane w celu uzyskania dostępu do zasobu, który za pomocą tych elementów podrzędnych. Nie jest to bezwględnie wymagane, jeśli jesteś zdefiniowanie, niezależnie od użycia i składnia sensu implementacji.  
  
   
  
## Examples  
 Przykłady kodu, które są używane w <xref:System.Security.Claims.ClaimsAuthorizationManager> tematy są pobierane z `Claims Based Authorization` próbki. W tym przykładzie przedstawiono Menedżera autoryzacji oświadczenia niestandardowe, które mogą autoryzować tematy, oparte na zasadach, który jest określony w konfiguracji. Menedżer autoryzacji niestandardowe oświadczenia składa się z trzech podstawowych składników: klasą pochodną <xref:System.Security.Claims.ClaimsAuthorizationManager> implementującej menedżera, `ResourceAction` klasę, która pary zasobów i akcji oraz czytnika zasad, która odczytuje i kompiluje zasad, które są określona w pliku konfiguracji. To skompilowany zasad może następnie używane przez Menedżera autoryzacji oświadczeń do oceny, podmiot zabezpieczeń do autoryzowania dostępu do zasobów. Nie wszystkie elementy są wyświetlane w celu skrócenia programu. Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i o tym, gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Poniższy kod przedstawia implementację Menedżera autoryzacji oświadczenia niestandardowe. <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> Metoda odczytuje i kompiluje zasad z konfiguracji przy użyciu klasy pomocnika czytnika zasady (niewyświetlany) i <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> Metoda udzielania lub odmawiania dostępu oparte na tych zasadach.  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 Poniższy kod przedstawia `ResourceAction` klasą używaną przez Menedżera oświadczenia niestandardowe.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Następujący kod XML pokazuje, jak skonfigurować oświadczenia Menedżera autoryzacji powyżej dla aplikacji sieci web hostowanych w usługach IIS 7.5. Wyświetlane są tylko te elementy, które są związane z konfiguracją Menedżera autoryzacji oświadczeń. Należy pamiętać, że odwołanie do <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> klasy muszą zostać dodane do potoku, w obszarze `<system.Webserver>` elementu. Dla witryn i aplikacji hostowanych w wersji usług IIS przed usług IIS 7 moduły można dodać do potoku, w obszarze `<system.Web>` elementu. Ta konfiguracja jest wyświetlane, ale oznaczone jako komentarz.  
  
 Zasady używaną przez Menedżera autoryzacji oświadczeń jest określona przez niestandardowe `<policy>` elementy w obszarze [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elementu. W pierwszej zasady podmiot zabezpieczeń musi mieć jedno z oświadczeń określona w celu wykonywania określonej akcji na określony zasób. W drugim zasadach podmiot zabezpieczeń musi mieć zarówno oświadczeń, aby mieć możliwość wykonania określonej akcji na określony zasób. W przypadku wszystkich innych podmiot zabezpieczeń automatycznie uzyskuje dostęp, niezależnie od tego oświadczenia, które posiada.  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthoirzationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool&#xA;override this.CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool" Usage="claimsAuthorizationManager.CheckAccess context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context">Kontekst autoryzacji, który zawiera temat, zasobów i akcji, dla którego ma zostać sprawdzony autoryzacji.</param>
        <summary>Po zaimplementowaniu w klasie pochodnej, sprawdza autoryzacji dla tematu w określonym kontekście do wykonania określonej akcji na określony zasób.</summary>
        <returns>
          <see langword="true" /> Jeśli podmiot jest autoryzowany do wykonania określonej akcji na określony zasób; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca implementację podstawową zawsze `true`, które autoryzują dostęp. Można zastąpić tę metodę w pochodnej klasie Autoryzowanie dostępu na podstawie wymagań aplikacji jednostki Uzależnionej. Jeśli ta metoda zwraca `false`, Windows Identity Foundation (WIF) zwraca błąd dotyczący nieautoryzowanego dostępu do obiektu wywołującego; w przeciwnym razie wykonania jest przekazywany do aplikacji jednostki Uzależnionej.  
  
   
  
## Examples  
 Przykłady kodu, które są używane w <xref:System.Security.Claims.ClaimsAuthorizationManager> tematy są pobierane z `Claims Based Authorization` próbki. W tym przykładzie przedstawiono Menedżera autoryzacji oświadczenia niestandardowe, które mogą autoryzować tematy, oparte na zasadach, który jest określony w konfiguracji. Menedżer autoryzacji niestandardowe oświadczenia składa się z trzech podstawowych składników: klasą pochodną <xref:System.Security.Claims.ClaimsAuthorizationManager> implementującej menedżera, `ResourceAction` klasę, która pary zasobów i akcji oraz czytnika zasad, która odczytuje i kompiluje zasad, które są określona w pliku konfiguracji. To skompilowany zasad może następnie używane przez Menedżera autoryzacji oświadczeń do oceny, podmiot zabezpieczeń do autoryzowania dostępu do zasobów. Nie wszystkie elementy są wyświetlane w celu skrócenia programu. Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i o tym, gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Poniższy kod przedstawia zastępowania metody <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> metody. Ta metoda lub go przydziela nie zezwala na dostęp oparty na zasadach odczytywane i kompilowane z pliku konfiguracji.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 Poniższy kod przedstawia `ResourceAction` klasą używaną przez Menedżera oświadczenia niestandardowe.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Zasady używaną przez Menedżera autoryzacji oświadczeń jest określona przez niestandardowe `<policy>` elementy w obszarze [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elementu. Te zasady są odczytywane i kompilowane przez <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> metody. W pierwszej zasady podmiot zabezpieczeń musi mieć jedno z oświadczeń określona w celu wykonywania określonej akcji na określony zasób. W drugim zasadach podmiot zabezpieczeń musi mieć zarówno oświadczeń, aby mieć możliwość wykonania określonej akcji na określony zasób. W przypadku wszystkich innych podmiot zabezpieczeń automatycznie uzyskuje dostęp, niezależnie od tego oświadczenia, które posiada.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthorizationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Elementy konfiguracji niestandardowej. Każdy węzeł na liście jest typu <see cref="T:System.Xml.XmlElement" />.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, ładuje niestandardowej konfiguracji z pliku XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> Metoda jest wywoływana przez infrastrukturę konfiguracji. Gdy ta metoda jest wywoływana, `nodelist` będzie zawierać elementów podrzędnych najwyższego poziomu [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elementu z pliku konfiguracji. Każdy z tych elementów z kolei może zawierać, atrybutów lub elementów podrzędnych w zależności od schematu konfiguracji, jaką zdefiniujesz dla klasy pochodnej. Jeśli nie elementy podrzędne są wyświetlane w obszarze `<claimsAuthorizationManager>` elementu w pliku konfiguracji, ta metoda nie jest wywoływana.  
  
 Domyślna implementacja zwraca <xref:System.NotImplementedException>. Zastępuje tę metodę w pochodnej klasie umożliwiające inicjowanie Menedżera autoryzacji oświadczeń z pliku konfiguracji. Zazwyczaj elementy konfiguracji służą do wyrażania zasady autoryzacji; można jednak zdefiniować elementy i używać ich w żaden sposób, który ma sens, na podstawie wymagań aplikacji.  
  
   
  
## Examples  
 Przykłady kodu, które są używane w <xref:System.Security.Claims.ClaimsAuthorizationManager> tematy są pobierane z `Claims Based Authorization` próbki. W tym przykładzie przedstawiono Menedżera autoryzacji oświadczenia niestandardowe, które mogą autoryzować tematy, oparte na zasadach, który jest określony w konfiguracji. Menedżer autoryzacji niestandardowe oświadczenia składa się z trzech podstawowych składników: klasą pochodną <xref:System.Security.Claims.ClaimsAuthorizationManager> implementującej menedżera, `ResourceAction` klasę, która pary zasobów i akcji oraz czytnika zasad, która odczytuje i kompiluje zasad, które są określona w pliku konfiguracji. To skompilowany zasad może następnie używane przez Menedżera autoryzacji oświadczeń do oceny, podmiot zabezpieczeń do autoryzowania dostępu do zasobów. Nie wszystkie elementy są wyświetlane w celu skrócenia programu. Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i o tym, gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Poniższy kod przedstawia zastępowania metody <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> metody. Ta metoda używa klasy czytnika zasady pomocnika (niewyświetlany) do odczytu i kompilowania zasad autoryzacji, określone w pliku konfiguracji. Zasady są dodawane do słownika i są dostępne dla `ResourceAction` klucza obiektu, który jest tworzony z zasobów i akcji, dla których są one przeznaczone.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 Poniższy kod przedstawia `ResourceAction` klasą używaną przez Menedżera oświadczenia niestandardowe.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Zasady używaną przez Menedżera autoryzacji oświadczeń jest określona przez niestandardowe `<policy>` elementy w obszarze [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elementu. Te zasady są odczytywane i kompilowane przez <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> metody. W pierwszej zasady podmiot zabezpieczeń musi mieć jedno z oświadczeń określona w celu wykonywania określonej akcji na określony zasób. W drugim zasadach podmiot zabezpieczeń musi mieć zarówno oświadczeń, aby mieć możliwość wykonania określonej akcji na określony zasób. W przypadku wszystkich innych podmiot zabezpieczeń automatycznie uzyskuje dostęp, niezależnie od tego oświadczenia, które posiada.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>