<Type Name="XslCompiledTransform" FullName="System.Xml.Xsl.XslCompiledTransform">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="df35b09bb7bf6d29d6d71264fa0b9ba7fbd134ad" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30741782" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XslCompiledTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed XslCompiledTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslCompiledTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslCompiledTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslCompiledTransform sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Przekształcenia danych XML przy użyciu arkusz stylów XSLT.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> Klasa jest procesorze XSLT, obsługująca składnię XSLT 1.0. Nowe implementacji i obejmuje wzrost wydajności w porównaniu do przestarzałe <xref:System.Xml.Xsl.XslTransform> klasy. Struktura <xref:System.Xml.Xsl.XslCompiledTransform> klasy jest bardzo podobny do <xref:System.Xml.Xsl.XslTransform> klasy. <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> Metody ładuje i kompiluje styl arkusza podczas <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metoda wykonuje przekształcenie XSLT.  
  
 Obsługa XSLT `document()` funkcji i osadzonych skryptów bloki są domyślnie wyłączone. Te funkcje można włączyć, tworząc <xref:System.Xml.Xsl.XsltSettings> obiektu i nastąpiło przejście do <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metody.  
  
 Aby uzyskać więcej informacji, zobacz [za pomocą klasy XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) i [migracji z klasy XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
## <a name="security-considerations"></a>Zagadnienia dotyczące zabezpieczeń  
 Podczas tworzenia aplikacji, która używa <xref:System.Xml.Xsl.XslCompiledTransform> klasy, należy zwrócić uwagę na następujące elementy i ich wpływ na:  
  
-   Wykonywanie skryptów XSLT jest domyślnie wyłączona. Powinna być włączona obsługa skryptów XSLT, tylko wtedy, gdy wymagana jest obsługa skryptów, podczas pracy w pełni zaufanym środowisku.  
  
-   Przekształcenie XSLT `document()` funkcja jest domyślnie wyłączona. Po włączeniu `document()` funkcji, ograniczyć zasoby, które mogą być udostępniane przez przekazanie <xref:System.Xml.XmlSecureResolver> do obiektu <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metody.  
  
-   Obiekty rozszerzenia są domyślnie włączone. Jeśli <xref:System.Xml.Xsl.XsltArgumentList> obiekt zawierający obiekty rozszerzenia jest przekazywany do <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metody, są one wykorzystywane.  
  
-   Arkusze stylów XSLT może zawierać odwołania do innych plików i bloki osadzony skrypt. Złośliwy użytkownik może wykorzystać to poprzez dostarczanie danych lub arkusze stylów, który po wykonaniu może spowodować systemu do przetwarzania, dopóki komputer ma za mało zasobów.  
  
-   Aplikacje XSLT, które działają w środowisku mieszanym zaufania może spowodować fałszowania arkusza stylów. Na przykład, złośliwy użytkownik może załadować obiektu z arkusza stylów szkodliwe i przekazują do innego użytkownika, który następnie wywołuje <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> — metoda i wykonuje transformację.  
  
 Te problemy z zabezpieczeniami można zminimalizować przez nie zostanie włączona obsługa skryptów lub `document()` działać, chyba że arkusza stylów pochodzi z zaufanego źródła i nie akceptuje <xref:System.Xml.Xsl.XslCompiledTransform> obiekty, arkusze stylów XSLT lub XML źródła danych z niezaufanego źródła.  
  
   
  
## Examples  
 W poniższym przykładzie wykonuje transformację i danych wyjściowych do pliku.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 W przykładzie użyto następujących dwóch plików wejściowych:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> Obiektu jest bezpieczne dla wątków, gdy został załadowany. Innymi słowy, po <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> metody zostało pomyślnie ukończone, <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> metodę można wywołać jednocześnie wiele wątków.  
  
 Jeśli <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> metoda jest wywoływana ponownie w jeden wątek podczas <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> metoda jest wywoływana w innym wątku <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> obiektu ukończeniem wykonywania <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> wywołać przy użyciu poprzedni stan. Nowy stan jest używany podczas <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> metody pomyślnym zakończeniu.  
  
 <block subset="none" type="note"><para><see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> Metoda nie jest wielowątkowość wywołanego jednocześnie wiele wątków.  
  
</para></block></threadsafe>
    <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
    <altmember cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />
    <altmember cref="N:System.Xml" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform (bool enableDebug);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableDebug) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableDebug As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform(bool enableDebug);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enableDebug" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableDebug">
          <see langword="true" /> Aby wygenerować informacje debugowania; w przeciwnym razie <see langword="false" />. To ustawienie <see langword="true" /> umożliwia debugowanie arkusz stylów z debuger Microsoft Visual Studio.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> klasy z ustawieniem określonego debugowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby wkraczać do kodu i debugowanie arkusza stylów muszą być spełnione następujące warunki:  
  
-   `enableDebug` Ustawiono parametr `true`.  
  
-   Arkusz stylów jest przekazywana do <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metody jako identyfikatora URI lub implementacja <xref:System.Xml.XmlReader> klasa implementująca <xref:System.Xml.IXmlLineInfo> interfejsu. <xref:System.Xml.IXmlLineInfo> Interfejs jest wdrażany na wszystkich analizowania tekstu <xref:System.Xml.XmlReader> obiektów.  
  
     Innymi słowy Jeśli arkusz stylów został załadowany przy użyciu <xref:System.Xml.XPath.IXPathNavigable> obiektów, takich jak <xref:System.Xml.XmlDocument> lub <xref:System.Xml.XPath.XPathDocument>, lub <xref:System.Xml.XmlReader> wdrożenia, który nie implementuje <xref:System.Xml.IXmlLineInfo> interfejsu, nie można debugować arkusza stylów.  
  
-   <xref:System.Xml.XmlResolver> Używana do załadowania styl arkusza jest oparty na pliku <xref:System.Xml.XmlResolver>, takich jak <xref:System.Xml.XmlUrlResolver> (jest to domyślny <xref:System.Xml.XmlResolver> używane przez <xref:System.Xml.Xsl.XslCompiledTransform> klasy).  
  
-   Arkusz stylów znajduje się na komputerze lokalnym lub w sieci intranet.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak włączyć debugowanie XSLT.  
  
 [!code-csharp[XslCompiledTransform.Load#10](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#10)]
 [!code-vb[XslCompiledTransform.Load#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileToType">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerErrorCollection CompileToType (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver, bool debug, System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerErrorCollection CompileToType(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver, bool debug, class System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerErrorCollection ^ CompileToType(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver, bool debug, System::Reflection::Emit::TypeBuilder ^ typeBuilder, System::String ^ scriptAssemblyPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerErrorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="debug" Type="System.Boolean" />
        <Parameter Name="typeBuilder" Type="System.Reflection.Emit.TypeBuilder" />
        <Parameter Name="scriptAssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheet">
          <see cref="T:System.Xml.XmlReader" /> Znajduje się na początku arkusza stylów, który ma być kompilowana.</param>
        <param name="settings">
          <see cref="T:System.Xml.Xsl.XsltSettings" /> Ma zostać zastosowany do arkusza stylów. Jeśli jest to <see langword="null" />, <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> zostaną zastosowane.</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> Używać do rozpoznawania modułów arkusza stylów do którego odwołuje się <see langword="xsl:import" /> i <see langword="xsl:include" /> elementy. Jeśli jest to <see langword="null" />, zasobów zewnętrznych nie zostanie rozwiązany.</param>
        <param name="debug">To ustawienie <see langword="true" /> Włącza debugowanie arkusz stylów z debugera.</param>
        <param name="typeBuilder">
          <see cref="T:System.Reflection.Emit.TypeBuilder" /> Używany dla kompilacji arkusza stylów. Podana TypeBuilder służy do generowania wynikowy typ.</param>
        <param name="scriptAssemblyPath">Podstawowa ścieżka dla zestawów wygenerowany dla <see langword="msxsl:script" /> elementów. Jeśli tylko jeden zestaw skrypt został wygenerowany, ten parametr określa ścieżkę do tego zestawu. W przypadku wielu zestawów skryptu sufiksem charakterystyczne zostaną dodane do nazwy pliku, aby zapewnić unikatowość nazwy zestawu.</param>
        <summary>Kompiluje arkusz stylów XSLT do określonego typu.</summary>
        <returns>A <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> obiekt zawierający błędów i ostrzeżeń, które wskazuje wyniki kompilacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `xsltc.exe` Narzędzie jest otokę <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> metody. Kompilowanie arkusze stylów z `xsltc.exe` będzie spełniać wymagania większości aplikacji, które wykorzystują użycie arkuszy stylów skompilowanego. <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> Metoda powinna być używana podczas kompilowania narzędzia kompilacji niestandardowej.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Kompiluje arkusza stylów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że ogólną wydajność <xref:System.Xml.Xsl.XslCompiledTransform> klasy jest lepszym rozwiązaniem niż <xref:System.Xml.Xsl.XslTransform> klasy, <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metody <xref:System.Xml.Xsl.XslCompiledTransform> klasy może zapewnić więcej wolniej niż <xref:System.Xml.Xsl.XslTransform.Load%2A> metody <xref:System.Xml.Xsl.XslTransform> klasy pierwszy czasu wywoływana jest transformację. Jest to spowodowane musi zostać skompilowany plik XSLT, przed jego załadowaniem. Aby uzyskać więcej informacji, zobacz następującym wpisie w blogu: [XslCompiledTransform wolniej niż XslTransform?](http://go.microsoft.com/fwlink/?LinkId=130590)  
  
> [!NOTE]
>  Istnieją różnice między XSLT skompilowanych w trybie debugowania i XSLT skompilowanych w trybie wersji. W niektórych sytuacjach arkusze stylów skompilowanych w trybie debugowania nie zgłosi błędy podczas <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>, ale później zakończy się niepowodzeniem podczas <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Tym samym arkusza stylów skompilowanych w trybie wersji zakończy się niepowodzeniem podczas <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>. Przykładem takiego zachowania jest zmienna, która nie jest typu zestaw węzłów jest przypisany do wyrażenia którym wymagany jest zestaw węzłów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">Identyfikator URI arkusza stylów.</param>
        <summary>Ładuje i kompiluje arkusza stylów znajduje się na określony identyfikator URI.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> Klasa obsługuje składni XSLT 1.0. Należy użyć arkusza stylów XSLT `http://www.w3.org/1999/XSL/Transform` przestrzeni nazw.  
  
 Ta metoda ma następującą charakterystykę:  
  
-   <xref:System.Xml.XmlUrlResolver> z żaden użytkownik nie poświadczeń jest używany do rozpoznania arkusza stylów identyfikatora URI i przetworzyć żadnego `xsl:import` lub `xsl:include` elementów.  
  
-   <xref:System.Xml.XmlReader> z domyślnymi ustawieniami służy do załadować arkusza stylów. Przetwarzanie elementu DTD jest wyłączona na <xref:System.Xml.XmlReader>. Jeśli potrzebujesz przetwarzanie elementu DTD, Utwórz <xref:System.Xml.XmlReader> ta funkcja jest włączona i przekaż go do <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metody.  
  
-   `document()` Funkcja jest wyłączona.  
  
-   Osadzonych skryptów nie są obsługiwane.  
  
 Można użyć <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.String%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> przeciążenia, aby określić <xref:System.Xml.XmlResolver> przy użyciu poświadczeń niezbędnych uwierzytelniania lub można określić różne ustawienia XSLT.  
  
   
  
## Examples  
 W poniższym przykładzie wykonuje transformację i danych wyjściowych do pliku.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheetUri" /> Wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Arkusz stylów zawiera błąd.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Nie można odnaleźć arkusza stylów.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="stylesheetUri" /> Wartość zawiera nazwę pliku lub katalogu, którego nie można odnaleźć.</exception>
        <exception cref="T:System.Net.WebException">
          <paramref name="stylesheetUri" /> Wartości nie można rozpoznać.  
  
 —lub—  
  
 Wystąpił błąd podczas przetwarzania żądania.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="stylesheetUri" /> nie jest prawidłowym identyfikatorem URI.</exception>
        <exception cref="T:System.Xml.XmlException">Wystąpił błąd podczas analizowania ładowania arkusza stylów.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (Type compiledStylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Type compiledStylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (compiledStylesheet As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(Type ^ compiledStylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compiledStylesheet" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="compiledStylesheet">Nazwa klasy zawierającej arkusza stylów skompilowanego.  
  
 Zazwyczaj jest to nazwa arkusza stylów. O ile nie określono inaczej, narzędzie xsltc.exe używa nazwy arkusza stylów dla nazwy klasy i zestawu.</param>
        <summary>Ładuje arkusza stylów skompilowanego, który został utworzony przy użyciu [kompilatora XSLT (xsltc.exe)](~/docs/standard/data/xml/xslt-compiler-xsltc-exe.md).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Narzędzie xsltc.exe jest używana do kompilowania arkusze stylów i generowanie zestawów z arkuszy stylów. <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> Metody ładuje arkusza stylów skompilowanego z zestawu.  
  
> [!NOTE]
>  W aplikacji, musi również obejmować XSLT zestawu jako odwołania.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak załadować arkusza stylów skompilowanego z zestawu XSLT. W przykładzie założono, że narzędzie xsltc.exe został użyty do utworzenia zestawu o nazwie bookOrders.dll z klasy o nazwie bookOrders.  
  
> [!NOTE]
>  Należy odwoływać się do zestawu XSLT podczas kompilowania kodu. Na przykład `csc /r:system.dll;system.xml.dll;bookOrders.dll myCode.cs`.  
  
```  
// Load the type of the class.  
XslCompiledTransform xslt = new XslCompiledTransform();  
xslt.Load(typeof(bookOrders));  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">
          <see cref="T:System.Xml.XmlReader" /> Zawierający arkusza stylów.</param>
        <summary>Kompiluje arkusza stylów zawarte w <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> Klasa obsługuje składni XSLT 1.0. Należy użyć arkusza stylów XSLT `http://www.w3.org/1999/XSL/Transform` przestrzeni nazw.  
  
 Ładuje arkusz stylów z bieżącego węzła <xref:System.Xml.XmlReader> przez wszystkie elementy podrzędne. Pozwala na użycie części dokumentu jako arkusza stylów. Po <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metody zakończeniu <xref:System.Xml.XmlReader> znajduje się w węźle dalej na końcu arkusza stylów. Jeśli zostanie osiągnięty koniec dokumentu, <xref:System.Xml.XmlReader> znajduje się na końcu pliku (EOF).  
  
 Ta metoda ma następującą charakterystykę:  
  
-   <xref:System.Xml.XmlUrlResolver> z żadnego użytkownika poświadczeń jest używany do przetwarzania żadnego `xsl:import` lub `xsl:include` elementów.  
  
-   `document()` Funkcja jest wyłączona.  
  
-   Osadzonych skryptów nie są obsługiwane.  
  
 Można użyć <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> przeciążenia, aby określić <xref:System.Xml.XmlResolver> przy użyciu poświadczeń niezbędnych uwierzytelniania lub można określić różne ustawienia XSLT.  
  
   
  
## Examples  
 Poniższy przykład załaduje zawarte w arkuszu stylów <xref:System.Xml.XmlReader> obiektu.  
  
 [!code-csharp[XslCompiledTransform.Load#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Load#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheet" /> Wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Arkusz stylów zawiera błąd.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Implementacja obiektu <see cref="T:System.Xml.XPath.IXPathNavigable" /> interfejsu. W programie Microsoft .NET Framework, może to być albo <see cref="T:System.Xml.XmlNode" /> (zazwyczaj <see cref="T:System.Xml.XmlDocument" />), lub <see cref="T:System.Xml.XPath.XPathDocument" /> zawierające arkusza stylów.</param>
        <summary>Kompiluje arkusza stylów zawarte w <see cref="T:System.Xml.XPath.IXPathNavigable" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> Klasa obsługuje składni XSLT 1.0. Należy użyć arkusza stylów XSLT `http://www.w3.org/1999/XSL/Transform` przestrzeni nazw.  
  
 Ta metoda ma następującą charakterystykę:  
  
-   <xref:System.Xml.XmlUrlResolver> z żadnego użytkownika poświadczeń jest używany do przetwarzania żadnego `xsl:import` lub `xsl:include` elementów.  
  
-   `document()` Funkcja jest wyłączona.  
  
-   Osadzonych skryptów nie są obsługiwane.  
  
 Można użyć <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> przeciążenia, aby określić <xref:System.Xml.XmlResolver> przy użyciu poświadczeń niezbędnych uwierzytelniania lub można określić różne ustawienia XSLT.  
  
   
  
## Examples  
 Poniższy przykład załaduje zawarte w arkuszu stylów <xref:System.Xml.XPath.XPathDocument> obiektu.  
  
 [!code-csharp[XslCompiledTransform.Load#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Load#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheet" /> Wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Arkusz stylów zawiera błąd.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Reflection.MethodInfo executeMethod, byte[] queryData, Type[] earlyBoundTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Reflection.MethodInfo executeMethod, unsigned int8[] queryData, class System.Type[] earlyBoundTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (executeMethod As MethodInfo, queryData As Byte(), earlyBoundTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Reflection::MethodInfo ^ executeMethod, cli::array &lt;System::Byte&gt; ^ queryData, cli::array &lt;Type ^&gt; ^ earlyBoundTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executeMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="queryData" Type="System.Byte[]" />
        <Parameter Name="earlyBoundTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="executeMethod">A <see cref="T:System.Reflection.MethodInfo" /> obiekt reprezentujący generowane przez kompilator <c>wykonania</c> metody arkusza stylów skompilowanego.</param>
        <param name="queryData">Tablica bajtowa dane serializowane struktury w <c>staticData</c> pole arkusza stylów skompilowanego, tak jak w przypadku <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" /> metody.</param>
        <param name="earlyBoundTypes">Tablica typów przechowywane w generowane przez kompilator <c>ebTypes</c> pole arkusza stylów skompilowanego.</param>
        <summary>Ładuje z arkusza stylów skompilowana przy użyciu metody <see langword="XSLTC.exe" /> narzędzia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda przyjmuje arkusza stylów skompilowanego w formie <xref:System.Reflection.MethodInfo> obiektu, tablica bajtów i tablicy typu. <xref:System.Reflection.Emit.DynamicMethod> obiekty mogą służyć do Zezwalaj metod arkusza stylów skompilowanego odrzucone podczas <xref:System.Xml.Xsl.XslCompiledTransform> obiektu jest odzyskana.  
  
   
  
## Examples  
 Przykładowy kod poniżej używa <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> załadować arkusza stylów skompilowanego. Transformacja zmniejsza wartość `Price` element o 10 procent.  
  
 [!code-csharp[XsltDynamicMethodLoad#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltDynamicMethodLoad/CS/XsltDynamicMethodLoad.cs#1)]
 [!code-vb[XsltDynamicMethodLoad#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltDynamicMethodLoad/VB/XsltDynamicMethodLoad.vb#1)]  
  
> [!NOTE]
>  Zestaw "Transform" używany w tym przykładzie został utworzony przy użyciu narzędzia xsltc.exe. Aby uzyskać szczegółowe informacje na temat używania tego narzędzia wiersza polecenia, zobacz [porady: przekształcenie XSLT przy użyciu zestawu](~/docs/standard/data/xml/how-to-perform-an-xslt-transformation-by-using-an-assembly.md).  
  
 W powyższym przykładzie kodu używane następujące przekształcenia:  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"  
  xmlns:msxsl="urn:schemas-microsoft-com:xslt"  
  xmlns:user="urn:my-scripts">  
  <msxsl:script language="C#" implements-prefix="user">  
    <![CDATA[  
  public double modifyPrice(double price){  
    price*=0.9;  
    return price;  
  }  
  ]]]><![CDATA[]>  
  </msxsl:script>  
  <xsl:template match="Root">  
    <Root xmlns="">  
      <Price><xsl:value-of select="user:modifyPrice(Price)"/></Price>  
    </Root>  
  </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">Identyfikator URI arkusza stylów.</param>
        <param name="settings">
          <see cref="T:System.Xml.Xsl.XsltSettings" /> Do zastosowania do arkusza stylów. Jeśli jest to <see langword="null" />, <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> ustawienie jest stosowane.</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> Używany do rozpoznania arkusz stylów identyfikatora URI i wszystkie arkusze stylów w kodzie XSLT <c>zaimportować</c> i <c>obejmują</c> elementów.</param>
        <summary>Ładuje i kompiluje arkusz stylów XSLT określonego przez identyfikator URI. <see cref="T:System.Xml.XmlResolver" /> Usuwa wszelkie XSLT <c>zaimportować</c> lub <c>obejmują</c> elementy i ustawienia XSLT określają uprawnienia do arkusza stylów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> Klasa obsługuje składni XSLT 1.0. Należy użyć arkusza stylów XSLT `http://www.w3.org/1999/XSL/Transform` przestrzeni nazw.  
  
 <xref:System.Xml.XmlReader> z domyślnymi ustawieniami służy do załadować arkusza stylów. Przetwarzanie elementu DTD jest wyłączona na <xref:System.Xml.XmlReader>. Jeśli potrzebujesz przetwarzanie elementu DTD, Utwórz <xref:System.Xml.XmlReader> ta funkcja jest włączona i przekaż go do <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład załaduje arkusza stylów, który jest przechowywany w zasobie sieciowym. <xref:System.Xml.XmlSecureResolver> Obiektu Określa poświadczenia niezbędne do uzyskania dostępu arkusza stylów.  
  
 [!code-csharp[XslCompiledTransform.Load#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Load#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheetUri" /> Lub <paramref name="stylesheetResolver" /> wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Arkusz stylów zawiera błąd.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Nie można odnaleźć arkusza stylów.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="stylesheetUri" /> Wartość zawiera nazwę pliku lub katalogu, którego nie można odnaleźć.</exception>
        <exception cref="T:System.Net.WebException">
          <paramref name="stylesheetUri" /> Wartości nie można rozpoznać.  
  
 —lub—  
  
 Wystąpił błąd podczas przetwarzania żądania.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="stylesheetUri" /> nie jest prawidłowym identyfikatorem URI.</exception>
        <exception cref="T:System.Xml.XmlException">Wystąpił błąd podczas analizowania ładowania arkusza stylów.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">
          <see cref="T:System.Xml.XmlReader" /> Zawierający arkusza stylów.</param>
        <param name="settings">
          <see cref="T:System.Xml.Xsl.XsltSettings" /> Do zastosowania do arkusza stylów. Jeśli jest to <see langword="null" />, <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> ustawienie jest stosowane.</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> Używany do rozpoznania wszystkie arkusze stylów w kodzie XSLT <c>zaimportować</c> i <c>obejmują</c> elementów. Jeśli jest to <see langword="null" />, zasobów zewnętrznych nie są rozpoznawane.</param>
        <summary>Kompiluje arkusz stylów XSLT zawarte w <see cref="T:System.Xml.XmlReader" />. <see cref="T:System.Xml.XmlResolver" /> Usuwa wszelkie XSLT <c>zaimportować</c> lub <c>obejmują</c> elementy i ustawienia XSLT określają uprawnienia do arkusza stylów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> Klasa obsługuje składni XSLT 1.0. Należy użyć arkusza stylów XSLT `http://www.w3.org/1999/XSL/Transform` przestrzeni nazw.  
  
 Ładuje arkusz stylów z bieżącego węzła <xref:System.Xml.XmlReader> przez wszystkie elementy podrzędne. Pozwala na użycie części dokumentu jako arkusza stylów. Po <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metody zakończeniu <xref:System.Xml.XmlReader> znajduje się w węźle dalej na końcu arkusza stylów. Jeśli zostanie osiągnięty koniec dokumentu, <xref:System.Xml.XmlReader> znajduje się na końcu pliku (EOF).  
  
   
  
## Examples  
 Poniższy przykład załaduje arkusz stylów i umożliwia obsługę skryptów XSLT.  
  
 [!code-csharp[XslCompiledTransform.Load#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Load#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheet" /> Wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Arkusz stylów zawiera błąd.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Implementacja obiektu <see cref="T:System.Xml.XPath.IXPathNavigable" /> interfejsu. W programie Microsoft .NET Framework, może to być albo <see cref="T:System.Xml.XmlNode" /> (zazwyczaj <see cref="T:System.Xml.XmlDocument" />), lub <see cref="T:System.Xml.XPath.XPathDocument" /> zawierające arkusza stylów.</param>
        <param name="settings">
          <see cref="T:System.Xml.Xsl.XsltSettings" /> Do zastosowania do arkusza stylów. Jeśli jest to <see langword="null" />, <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> ustawienie jest stosowane.</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> Używany do rozpoznania wszystkie arkusze stylów w kodzie XSLT <c>zaimportować</c> i <c>obejmują</c> elementów. Jeśli jest to <see langword="null" />, zasobów zewnętrznych nie są rozpoznawane.</param>
        <summary>Kompiluje arkusz stylów XSLT zawarte w <see cref="T:System.Xml.XPath.IXPathNavigable" />. <see cref="T:System.Xml.XmlResolver" /> Usuwa wszelkie XSLT <c>zaimportować</c> lub <c>obejmują</c> elementy i ustawienia XSLT określają uprawnienia do arkusza stylów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> Klasa obsługuje składni XSLT 1.0. Należy użyć arkusza stylów XSLT `http://www.w3.org/1999/XSL/Transform` przestrzeni nazw.  
  
   
  
## Examples  
 Poniższy przykład załaduje arkusza stylów. <xref:System.Xml.XmlSecureResolver> Obiekt zawiera poświadczenia, które są niezbędne w celu uzyskania dostępu do `import` lub `include` elementy znalezione w arkuszu stylów.  
  
 [!code-csharp[XslCompiledTransform.Load#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Load#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheet" /> Wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Arkusz stylów zawiera błąd.</exception>
      </Docs>
    </Member>
    <Member MemberName="OutputSettings">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings OutputSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings OutputSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputSettings As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlWriterSettings ^ OutputSettings { System::Xml::XmlWriterSettings ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Xml.XmlWriterSettings" /> obiekt, który zawiera dane wyjściowe pochodzące z <c>XSL: Output</c> element arkusza stylów.</summary>
        <value>Tylko do odczytu <see cref="T:System.Xml.XmlWriterSettings" /> obiekt, który zawiera dane wyjściowe pochodzące z <c>XSL: Output</c> element arkusza stylów. Ta wartość może być <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest wypełniana po pomyślnym nawiązaniu połączenia z <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metody. Zawiera on informacje pochodzące z `xsl:output` element arkusza stylów skompilowanego. To <xref:System.Xml.XmlWriterSettings> obiektu mogą zostać przekazane do <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> metodę w celu utworzenia <xref:System.Xml.XmlWriter> obiektu, do którego chcesz danych wyjściowych.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> właściwość, aby utworzyć <xref:System.Xml.XmlWriter> obiekt, który zapisuje tekst do konsoli.  
  
 [!code-csharp[XslCompiledTransform.OutputSettings#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.OutputSettings/CS/xslt_OutputSettings.cs#1)]
 [!code-vb[XslCompiledTransform.OutputSettings#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.OutputSettings/VB/xslt_OutputSettings.vb#1)]  
  
 W przykładzie użyto `books.xml` i `outputConsole.xsl` pliki jako dane wejściowe.  
  
 `books.xml`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#2](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/books.xml#2)]  
  
 `outputConsole.xsl`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#3](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/outputConsole.xsl#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemporaryFiles">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.TempFileCollection TemporaryFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.TempFileCollection TemporaryFiles" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.TemporaryFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemporaryFiles As TempFileCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::TempFileCollection ^ TemporaryFiles { System::CodeDom::Compiler::TempFileCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.TempFileCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> zawierający pliki tymczasowe generowany na dysku po pomyślnym nawiązaniu połączenia z <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> metody.</summary>
        <value>
          <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> Zawierający pliki tymczasowe generowane na dysku. Ta wartość jest <see langword="null" /> Jeśli <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> — metoda nie została pomyślnie wywołana, lub jeśli nie włączono debugowanie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość określa pliki, które zostały wygenerowane podczas XSLT przetwarzania. Pliki są umieszczane w katalogu Temp (określonej przez zmienną środowiskową % TEMP %) można usunąć te pliki po zakończeniu przetwarzania XSLT.  
  
   
  
## Examples  
 Poniższy przykład zapisuje nazwy plików tymczasowych do konsoli.  
  
> [!NOTE]
>  Pliki tymczasowe są tworzone tylko wtedy, gdy podczas ładowania styl arkusze z \<msxsl:script > bloków.  
  
 [!code-csharp[XslCompiledTransform.Transform#8](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#8)]
 [!code-vb[XslCompiledTransform.Transform#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wykonuje transformację XSLT.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Istnieją różnice między XSLT skompilowanych w trybie debugowania i XSLT skompilowanych w trybie wersji. W niektórych sytuacjach arkusze stylów skompilowanych w trybie debugowania nie zgłosi błędy podczas <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>, ale później zakończy się niepowodzeniem podczas <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Tym samym arkusza stylów skompilowanych w trybie wersji zakończy się niepowodzeniem podczas <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>. Przykładem takiego zachowania jest zmienna, która nie jest typu zestaw węzłów jest przypisany do wyrażenia którym wymagany jest zestaw węzłów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, string resultsFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, string resultsFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, resultsFile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::String ^ resultsFile);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="resultsFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputUri">Dokument wejściowy identyfikator URI.</param>
        <param name="resultsFile">Identyfikator URI pliku wyjściowego.</param>
        <summary>Wykonuje przekształcenie korzystanie z dokumentów wejściowych, określony przez identyfikator URI i umieszcza wyniki w pliku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda używa domyślnego <xref:System.Xml.XmlUrlResolver> bez poświadczeń użytkownika można rozpoznać dokumentów wejściowych i wyjściowych. Jeśli żadnego z tych zasobów znajdują się w zasobie sieciowym, który wymaga uwierzytelniania, użyj przeciążenia, które przyjmuje <xref:System.Xml.XmlResolver> jako jeden z jego argumentów i określ <xref:System.Xml.XmlResolver> niezbędne poświadczenia.  
  
 <xref:System.Xml.XmlReader> z domyślnymi ustawieniami służy załadować dokument wejściowy. Przetwarzanie elementu DTD jest wyłączona na <xref:System.Xml.XmlReader>. Jeśli potrzebujesz przetwarzanie elementu DTD, Utwórz <xref:System.Xml.XmlReader> ta funkcja jest włączona i przekaż go do <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metody.  
  
   
  
## Examples  
 W poniższym przykładzie wykonuje transformację i danych wyjściowych do pliku.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 W przykładzie użyto następujących dwóch plików wejściowych:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputUri" /> Lub <paramref name="resultsFile" /> wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Wystąpił błąd podczas wykonywania przekształcenia XSLT.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Nie można odnaleźć dokument wejściowy.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="inputUri" /> Lub <paramref name="resultsFile" /> wartość zawiera nazwę pliku lub nie można odnaleźć katalogu.</exception>
        <exception cref="T:System.Net.WebException">
          <paramref name="inputUri" /> Lub <paramref name="resultsFile" /> wartości nie można rozpoznać.  
  
 —lub—  
  
 Wystąpił błąd podczas przetwarzania żądania</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> lub <paramref name="resultsFile" /> nie jest prawidłowym identyfikatorem URI.</exception>
        <exception cref="T:System.Xml.XmlException">Wystąpił błąd podczas analizowania ładowania dokument wejściowy.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">Dokument wejściowy identyfikator URI.</param>
        <param name="results">
          <see cref="T:System.Xml.XmlWriter" /> Do której ma zostać danych wyjściowych.  
  
 Jeśli arkusz stylów zawiera <c>XSL: Output</c> element, należy utworzyć <see cref="T:System.Xml.XmlWriter" /> przy użyciu <see cref="T:System.Xml.XmlWriterSettings" /> obiektu zwróconego z <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> właściwości. Gwarantuje to, że <see cref="T:System.Xml.XmlWriter" /> z ustawieniami poprawne dane wyjściowe.</param>
        <summary>Wykonuje przekształcenie korzystanie z dokumentów wejściowych, określony przez identyfikator URI i umieszcza wyniki w <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda używa domyślnego <xref:System.Xml.XmlUrlResolver> bez poświadczeń użytkownika można rozpoznać wystąpienia XSLT i dokumentów wejściowych `document()` znaleźć funkcji w arkuszu stylów. Jeśli żadnego z tych zasobów znajdują się w zasobie sieciowym, który wymaga uwierzytelniania, użyj przeciążenia, które przyjmuje <xref:System.Xml.XmlResolver> jako jeden z jego argumentów i określ <xref:System.Xml.XmlResolver> niezbędne poświadczenia.  
  
 <xref:System.Xml.XmlReader> z domyślnymi ustawieniami służy załadować dokument wejściowy. Przetwarzanie elementu DTD jest wyłączona na <xref:System.Xml.XmlReader>. Jeśli potrzebujesz przetwarzanie elementu DTD, Utwórz <xref:System.Xml.XmlReader> ta funkcja jest włączona i przekaż go do <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metody.  
  
 Ta metoda nie obsługuje `xsl:strip-space` elementu. Jeśli uwzględniona arkusza stylów skompilowanego `xsl:strip-space` element, należy użyć <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> przeciążenia, które ma <xref:System.Xml.XmlReader> jako argument wejściowy.  
  
   
  
## Examples  
 W poniższym przykładzie wykonuje transformację XSLT i dane wyjściowe <xref:System.Xml.XmlWriter> obiektu.  
  
 [!code-csharp[XslCompiledTransform.Transform#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Transform#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputUri" /> Lub <paramref name="results" /> wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Wystąpił błąd podczas wykonywania przekształcenia XSLT.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="inputUri" /> Wartość zawiera nazwę pliku lub nie można odnaleźć katalogu.</exception>
        <exception cref="T:System.Net.WebException">
          <paramref name="inputUri" /> Wartości nie można rozpoznać.  
  
 —lub—  
  
 Wystąpił błąd podczas przetwarzania żądania.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> nie jest prawidłowym identyfikatorem URI.</exception>
        <exception cref="T:System.Xml.XmlException">Wystąpił błąd podczas analizowania ładowania dokument wejściowy.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XmlReader" /> Zawierający dokument wejściowy.</param>
        <param name="results">
          <see cref="T:System.Xml.XmlWriter" /> Do której ma zostać danych wyjściowych.  
  
 Jeśli arkusz stylów zawiera <c>XSL: Output</c> element, należy utworzyć <see cref="T:System.Xml.XmlWriter" /> przy użyciu <see cref="T:System.Xml.XmlWriterSettings" /> obiektu zwróconego z <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> właściwości. Gwarantuje to, że <see cref="T:System.Xml.XmlWriter" /> z ustawieniami poprawne dane wyjściowe.</param>
        <summary>Wykonuje przekształcenie korzystanie z dokumentów wejściowych, określony przez <see cref="T:System.Xml.XmlReader" /> obiektu i umieszcza wyniki w <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli XSLT `document()` funkcja jest włączona, problem zostanie rozwiązany przy użyciu <xref:System.Xml.XmlUrlResolver> bez poświadczeń użytkownika. Jeśli zewnętrzny zasób znajduje się w zasobie sieciowym, który wymaga uwierzytelniania, użyj przeciążenia, które przyjmuje <xref:System.Xml.XmlResolver> jako jeden z jego argumentów i określ <xref:System.Xml.XmlResolver> niezbędne poświadczenia.  
  
   
  
## Examples  
 Poniższy przykład przekształca pierwszej książki w pliku books.xml.  
  
 [!code-csharp[XslCompiledTransform.Transform#7](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#7)]
 [!code-vb[XslCompiledTransform.Transform#7](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> Lub <paramref name="results" /> wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Wystąpił błąd podczas wykonywania przekształcenia XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Implementacja obiektu <see cref="T:System.Xml.XPath.IXPathNavigable" /> interfejsu. W programie Microsoft .NET Framework, może to być albo <see cref="T:System.Xml.XmlNode" /> (zazwyczaj <see cref="T:System.Xml.XmlDocument" />), lub <see cref="T:System.Xml.XPath.XPathDocument" /> zawierające dane, które mają zostać przetworzone.</param>
        <param name="results">
          <see cref="T:System.Xml.XmlWriter" /> Do której ma zostać danych wyjściowych.  
  
 Jeśli arkusz stylów zawiera <c>XSL: Output</c> element, należy utworzyć <see cref="T:System.Xml.XmlWriter" /> przy użyciu <see cref="T:System.Xml.XmlWriterSettings" /> obiektu zwróconego z <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> właściwości. Gwarantuje to, że <see cref="T:System.Xml.XmlWriter" /> z ustawieniami poprawne dane wyjściowe.</param>
        <summary>Wykonuje przekształcenie korzystanie z dokumentów wejściowych, określony przez <see cref="T:System.Xml.XPath.IXPathNavigable" /> obiektu i umieszcza wyniki w <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli XSLT `document()` funkcja jest włączona, problem zostanie rozwiązany przy użyciu <xref:System.Xml.XmlUrlResolver> bez poświadczeń użytkownika. Jeśli zewnętrzny zasób znajduje się w zasobie sieciowym, który wymaga uwierzytelniania, użyj przeciążenia, które przyjmuje <xref:System.Xml.XmlResolver> jako jeden z jego argumentów i określ <xref:System.Xml.XmlResolver> niezbędne poświadczenia.  
  
 Ta metoda nie obsługuje `xsl:strip-space` elementu. Jeśli uwzględniona arkusza stylów skompilowanego `xsl:strip-space` element, należy użyć <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> przeciążenia, które ma <xref:System.Xml.XmlReader> jako argument wejściowy.  
  
 <xref:System.Xml.XPath.IXPathNavigable> Interfejs jest wdrażany w <xref:System.Xml.XmlNode> i <xref:System.Xml.XPath.XPathDocument> klasy. Te klasy reprezentują w pamięci podręcznej danych XML.  
  
-   <xref:System.Xml.XmlNode> Klasy jest oparta na W3C modelu DOM (Document Object) i obejmuje możliwości edycji.  
  
-   <xref:System.Xml.XPath.XPathDocument> Klasy jest oparte na modelu danych XPath magazyn danych tylko do odczytu. <xref:System.Xml.XPath.XPathDocument> Klasa zalecane dla XSLT jest przetwarzanie. Zapewnia większą wydajność w porównaniu z <xref:System.Xml.XmlNode> klasy.  
  
 Przekształcenia mają zastosowanie do dokumentu jako całość. Innymi słowy w przypadku przekazania w węźle innym niż węzeł główny dokumentu, to nie zapobiega proces przekształcania podczas uzyskiwania dostępu do wszystkich węzłów w załadowanego dokumentu. Aby przekształcić fragmentu węzła, należy utworzyć obiekt zawierający tylko fragmentu węzeł i przekazać do obiektu <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metody. Aby uzyskać więcej informacji, zobacz [porady: Przekształcanie fragmentu węzła](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
   
  
## Examples  
 W poniższym przykładzie wykonuje transformację XSLT i dane wyjściowe <xref:System.Xml.XmlWriter> obiektu.  
  
 [!code-csharp[XslCompiledTransform.Transform#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Transform#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> Lub <paramref name="results" /> wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Wystąpił błąd podczas wykonywania przekształcenia XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="inputUri">Dokument wejściowy identyfikator URI.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Zawierającego użyte jako dane wejściowe do transformacji argumenty kwalifikowana przestrzeni nazw. Ta wartość może być <see langword="null" />.</param>
        <param name="results">Strumień, do którego chcesz danych wyjściowych.</param>
        <summary>Wykonuje przekształcenie korzystanie z dokumentów wejściowych, określony przez identyfikator URI i umieszcza wyniki w strumienia. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Udostępnia dodatkowe argumenty czasu wykonywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda używa domyślnego <xref:System.Xml.XmlUrlResolver> bez poświadczeń użytkownika można rozpoznać wystąpienia XSLT i dokumentów wejściowych `document()` znaleźć funkcji w arkuszu stylów. Jeśli żadnego z tych zasobów znajdują się w zasobie sieciowym, który wymaga uwierzytelniania, użyj przeciążenia, które przyjmuje <xref:System.Xml.XmlResolver> jako jeden z jego argumentów i określ <xref:System.Xml.XmlResolver> niezbędne poświadczenia.  
  
 <xref:System.Xml.XmlReader> z domyślnymi ustawieniami służy załadować dokument wejściowy. Przetwarzanie elementu DTD jest wyłączona na <xref:System.Xml.XmlReader>. Jeśli potrzebujesz przetwarzanie elementu DTD, Utwórz <xref:System.Xml.XmlReader> ta funkcja jest włączona i przekaż go do <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputUri" /> Lub <paramref name="results" /> wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Wystąpił błąd podczas wykonywania przekształcenia XSLT.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="inputUri" /> Wartość zawiera nazwę pliku lub nie można odnaleźć katalogu.</exception>
        <exception cref="T:System.Net.WebException">
          <paramref name="inputUri" /> Wartości nie można rozpoznać.  
  
 —lub—  
  
 Wystąpił błąd podczas przetwarzania żądania</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> nie jest prawidłowym identyfikatorem URI.</exception>
        <exception cref="T:System.Xml.XmlException">Wystąpił błąd podczas analizowania ładowania dokument wejściowy.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">Dokument wejściowy identyfikator URI.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Zawierającego użyte jako dane wejściowe do transformacji argumenty kwalifikowana przestrzeni nazw. Ta wartość może być <see langword="null" />.</param>
        <param name="results">
          <see cref="T:System.IO.TextWriter" /> Do której ma zostać danych wyjściowych.</param>
        <summary>Wykonuje przekształcenie korzystanie z dokumentów wejściowych, określony przez identyfikator URI i umieszcza wyniki w <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda używa domyślnego <xref:System.Xml.XmlUrlResolver> bez poświadczeń użytkownika można rozpoznać wystąpienia XSLT i dokumentów wejściowych `document()` znaleźć funkcji w arkuszu stylów. Jeśli żadnego z tych zasobów znajdują się w zasobie sieciowym, który wymaga uwierzytelniania, użyj przeciążenia, które przyjmuje <xref:System.Xml.XmlResolver> jako jeden z jego argumentów i określ <xref:System.Xml.XmlResolver> niezbędne poświadczenia.  
  
 <xref:System.Xml.XmlReader> z domyślnymi ustawieniami służy załadować dokument wejściowy. Przetwarzanie elementu DTD jest wyłączona na <xref:System.Xml.XmlReader>. Jeśli potrzebujesz przetwarzanie elementu DTD, Utwórz <xref:System.Xml.XmlReader> ta funkcja jest włączona i przekaż go do <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metody.  
  
   
  
## Examples  
 W poniższym przykładzie wykonuje transformację XSLT i generuje ciąg.  
  
 [!code-csharp[XslCompiledTransform.Transform#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Transform#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputUri" /> Lub <paramref name="results" /> wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Wystąpił błąd podczas wykonywania przekształcenia XSLT.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="inputUri" /> Wartość zawiera nazwę pliku lub nie można odnaleźć katalogu.</exception>
        <exception cref="T:System.Net.WebException">
          <paramref name="inputUri" /> Wartości nie można rozpoznać.  
  
 —lub—  
  
 Wystąpił błąd podczas przetwarzania żądania</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> nie jest prawidłowym identyfikatorem URI.</exception>
        <exception cref="T:System.Xml.XmlException">Wystąpił błąd podczas analizowania ładowania dokument wejściowy.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">Dokument wejściowy identyfikator URI.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Zawierającego użyte jako dane wejściowe do transformacji argumenty kwalifikowana przestrzeni nazw. Ta wartość może być <see langword="null" />.</param>
        <param name="results">
          <see cref="T:System.Xml.XmlWriter" /> Do której ma zostać danych wyjściowych.  
  
 Jeśli arkusz stylów zawiera <c>XSL: Output</c> element, należy utworzyć <see cref="T:System.Xml.XmlWriter" /> przy użyciu <see cref="T:System.Xml.XmlWriterSettings" /> obiektu zwróconego z <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> właściwości. Gwarantuje to, że <see cref="T:System.Xml.XmlWriter" /> z ustawieniami poprawne dane wyjściowe.</param>
        <summary>Wykonuje przekształcenie korzystanie z dokumentów wejściowych, określony przez identyfikator URI i umieszcza wyniki w <see cref="T:System.Xml.XmlWriter" />. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Udostępnia dodatkowe argumenty czasu wykonywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda używa domyślnego <xref:System.Xml.XmlUrlResolver> bez poświadczeń użytkownika można rozpoznać wystąpienia XSLT i dokumentów wejściowych `document()` znaleźć funkcji w arkuszu stylów. Jeśli żadnego z tych zasobów znajdują się w zasobie sieciowym, który wymaga uwierzytelniania, użyj przeciążenia, które przyjmuje <xref:System.Xml.XmlResolver> jako jeden z jego argumentów i określ <xref:System.Xml.XmlResolver> niezbędne poświadczenia.  
  
 <xref:System.Xml.XmlReader> z domyślnymi ustawieniami służy załadować dokument wejściowy. Przetwarzanie elementu DTD jest wyłączona na <xref:System.Xml.XmlReader>. Jeśli potrzebujesz przetwarzanie elementu DTD, Utwórz <xref:System.Xml.XmlReader> ta funkcja jest włączona i przekaż go do <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metody.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Xml.Xsl.XsltArgumentList> obiekt, aby utworzyć parametr reprezentujący bieżącą datę i godzinę.  
  
 [!code-csharp[XsltArgumentList.AddParam#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltArgumentList.AddParam/CS/addparam.cs#1)]
 [!code-vb[XsltArgumentList.AddParam#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltArgumentList.AddParam/VB/addparam.vb#1)]  
  
 W przykładzie użyto następujących plików dwóch danych jako dane wejściowe.  
  
 order.xml  
  
 [!code-xml[XsltArgumentList.AddParam#2](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xml#2)]  
  
 order.xsl  
  
 [!code-xml[XsltArgumentList.AddParam#3](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputUri" /> Lub <paramref name="results" /> wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Wystąpił błąd podczas wykonywania przekształcenia XSLT.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="inputtUri" /> Wartość zawiera nazwę pliku lub nie można odnaleźć katalogu.</exception>
        <exception cref="T:System.Net.WebException">
          <paramref name="inputUri" /> Wartości nie można rozpoznać.  
  
 —lub—  
  
 Wystąpił błąd podczas przetwarzania żądania.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> nie jest prawidłowym identyfikatorem URI.</exception>
        <exception cref="T:System.Xml.XmlException">Wystąpił błąd podczas analizowania ładowania dokument wejściowy.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XmlReader" /> Zawierający dokument wejściowy.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Zawierającego użyte jako dane wejściowe do transformacji argumenty kwalifikowana przestrzeni nazw. Ta wartość może być <see langword="null" />.</param>
        <param name="results">Strumień, do którego chcesz danych wyjściowych.</param>
        <summary>Wykonuje przekształcenie korzystanie z dokumentów wejściowych, określony przez <see cref="T:System.Xml.XmlReader" /> obiektu i umieszcza wyniki w strumieniu. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Udostępnia dodatkowe argumenty czasu wykonywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli arkusz stylów zawiera XSLT `document()` funkcji, jest ono rozwiązane za pomocą <xref:System.Xml.XmlUrlResolver> bez poświadczeń użytkownika. Jeśli zewnętrzny zasób znajduje się w zasobie sieciowym, który wymaga uwierzytelniania, użyj przeciążenia, które przyjmuje <xref:System.Xml.XmlResolver> jako jeden z jego argumentów i określ <xref:System.Xml.XmlResolver> niezbędne poświadczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> Lub <paramref name="results" /> wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Wystąpił błąd podczas wykonywania przekształcenia XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XmlReader" /> Zawierający dokument wejściowy.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Zawierającego użyte jako dane wejściowe do transformacji argumenty kwalifikowana przestrzeni nazw. Ta wartość może być <see langword="null" />.</param>
        <param name="results">
          <see cref="T:System.IO.TextWriter" /> Do której ma zostać danych wyjściowych.</param>
        <summary>Wykonuje przekształcenie korzystanie z dokumentów wejściowych, określony przez <see cref="T:System.Xml.XmlReader" /> obiektu i umieszcza wyniki w <see cref="T:System.IO.TextWriter" />. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Udostępnia dodatkowe argumenty czasu wykonywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli arkusz stylów zawiera XSLT `document()` funkcji, jest ono rozwiązane za pomocą <xref:System.Xml.XmlUrlResolver> bez poświadczeń użytkownika. Jeśli zewnętrzny zasób znajduje się w zasobie sieciowym, który wymaga uwierzytelniania, użyj przeciążenia, które przyjmuje <xref:System.Xml.XmlResolver> jako jeden z jego argumentów i określ <xref:System.Xml.XmlResolver> niezbędne poświadczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> Lub <paramref name="results" /> wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Wystąpił błąd podczas wykonywania przekształcenia XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XmlReader" /> Zawierający dokument wejściowy.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Zawierającego użyte jako dane wejściowe do transformacji argumenty kwalifikowana przestrzeni nazw. Ta wartość może być <see langword="null" />.</param>
        <param name="results">
          <see cref="T:System.Xml.XmlWriter" /> Do której ma zostać danych wyjściowych.  
  
 Jeśli arkusz stylów zawiera <c>XSL: Output</c> element, należy utworzyć <see cref="T:System.Xml.XmlWriter" /> przy użyciu <see cref="T:System.Xml.XmlWriterSettings" /> obiektu zwróconego z <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> właściwości. Gwarantuje to, że <see cref="T:System.Xml.XmlWriter" /> z ustawieniami poprawne dane wyjściowe.</param>
        <summary>Wykonuje przekształcenie korzystanie z dokumentów wejściowych, określony przez <see cref="T:System.Xml.XmlReader" /> obiektu i umieszcza wyniki w <see cref="T:System.Xml.XmlWriter" />. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Udostępnia dodatkowe argumenty czasu wykonywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli arkusz stylów zawiera XSLT `document()` funkcji, jest ono rozwiązane za pomocą <xref:System.Xml.XmlUrlResolver> bez poświadczeń użytkownika. Jeśli zewnętrzny zasób znajduje się w zasobie sieciowym, który wymaga uwierzytelniania, użyj przeciążenia, które przyjmuje <xref:System.Xml.XmlResolver> jako jeden z jego argumentów i określ <xref:System.Xml.XmlResolver> niezbędne poświadczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> Lub <paramref name="results" /> wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Wystąpił błąd podczas wykonywania przekształcenia XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">Implementacja obiektu <see cref="T:System.Xml.XPath.IXPathNavigable" /> interfejsu. W programie Microsoft .NET Framework, może to być albo <see cref="T:System.Xml.XmlNode" /> (zazwyczaj <see cref="T:System.Xml.XmlDocument" />), lub <see cref="T:System.Xml.XPath.XPathDocument" /> zawierające dane, które mają zostać przetworzone.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Zawierającego użyte jako dane wejściowe do transformacji argumenty kwalifikowana przestrzeni nazw. Ta wartość może być <see langword="null" />.</param>
        <param name="results">Strumień, do którego chcesz danych wyjściowych.</param>
        <summary>Wykonuje przekształcenie korzystanie z dokumentów wejściowych, określony przez <see cref="T:System.Xml.XPath.IXPathNavigable" /> obiektu i umieszcza wyniki w strumieniu. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Udostępnia dodatkowe środowiska uruchomieniowego argumentów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli XSLT `document()` funkcja jest włączona, problem zostanie rozwiązany przy użyciu <xref:System.Xml.XmlUrlResolver> bez poświadczeń użytkownika. Jeśli zewnętrzny zasób znajduje się w zasobie sieciowym, który wymaga uwierzytelniania, użyj przeciążenia, które przyjmuje <xref:System.Xml.XmlResolver> jako jeden z jego argumentów i określ <xref:System.Xml.XmlResolver> niezbędne poświadczenia.  
  
 Ta metoda nie obsługuje `xsl:strip-space` elementu. Jeśli uwzględniona arkusza stylów skompilowanego `xsl:strip-space` element, należy użyć <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> przeciążenia, które ma <xref:System.Xml.XmlReader> jako argument wejściowy.  
  
 <xref:System.Xml.XPath.IXPathNavigable> Interfejs jest wdrażany w <xref:System.Xml.XmlNode> i <xref:System.Xml.XPath.XPathDocument> klasy. Te klasy reprezentują w pamięci podręcznej danych XML.  
  
-   <xref:System.Xml.XmlNode> Klasy jest oparta na W3C modelu DOM (Document Object) i obejmuje możliwości edycji.  
  
-   <xref:System.Xml.XPath.XPathDocument> Klasy jest oparte na modelu danych XPath magazyn danych tylko do odczytu. <xref:System.Xml.XPath.XPathDocument> Klasa zalecane dla XSLT jest przetwarzanie. Zapewnia większą wydajność w porównaniu z <xref:System.Xml.XmlNode> klasy.  
  
 Przekształcenia mają zastosowanie do dokumentu jako całość. Innymi słowy w przypadku przekazania w węźle innym niż węzeł główny dokumentu, to nie zapobiega proces przekształcania podczas uzyskiwania dostępu do wszystkich węzłów w załadowanego dokumentu. Aby przekształcić fragmentu węzła, należy utworzyć obiekt zawierający tylko fragmentu węzeł i przekazać do obiektu <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metody. Aby uzyskać więcej informacji, zobacz [porady: Przekształcanie fragmentu węzła](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
   
  
## Examples  
 W poniższym przykładzie wykonuje transformację XSLT i dane wyjściowe <xref:System.IO.FileStream>.  
  
 [!code-csharp[XslCompiledTransform.Transform#6](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#6)]
 [!code-vb[XslCompiledTransform.Transform#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> Lub <paramref name="results" /> wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Wystąpił błąd podczas wykonywania przekształcenia XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">Implementacja obiektu <see cref="T:System.Xml.XPath.IXPathNavigable" /> interfejsu. W programie Microsoft .NET Framework, może to być albo <see cref="T:System.Xml.XmlNode" /> (zazwyczaj <see cref="T:System.Xml.XmlDocument" />), lub <see cref="T:System.Xml.XPath.XPathDocument" /> zawierające dane, które mają zostać przetworzone.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Zawierającego użyte jako dane wejściowe do transformacji argumenty kwalifikowana przestrzeni nazw. Ta wartość może być <see langword="null" />.</param>
        <param name="results">
          <see cref="T:System.IO.TextWriter" /> Do której ma zostać danych wyjściowych.</param>
        <summary>Wykonuje przekształcenie korzystanie z dokumentów wejściowych, określony przez <see cref="T:System.Xml.XPath.IXPathNavigable" /> obiektu i umieszcza wyniki w <see cref="T:System.IO.TextWriter" />. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Udostępnia dodatkowe argumenty czasu wykonywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli XSLT `document()` funkcja jest włączona, problem zostanie rozwiązany przy użyciu <xref:System.Xml.XmlUrlResolver> bez poświadczeń użytkownika. Jeśli zewnętrzny zasób znajduje się w zasobie sieciowym, który wymaga uwierzytelniania, użyj przeciążenia, które przyjmuje <xref:System.Xml.XmlResolver> jako jeden z jego argumentów i określ <xref:System.Xml.XmlResolver> niezbędne poświadczenia.  
  
 Ta metoda nie obsługuje `xsl:strip-space` elementu. Jeśli uwzględniona arkusza stylów skompilowanego `xsl:strip-space` element, należy użyć <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> przeciążenia, które ma <xref:System.Xml.XmlReader> jako argument wejściowy.  
  
 <xref:System.Xml.XPath.IXPathNavigable> Interfejs jest wdrażany w <xref:System.Xml.XmlNode> i <xref:System.Xml.XPath.XPathDocument> klasy. Te klasy reprezentują w pamięci podręcznej danych XML.  
  
-   <xref:System.Xml.XmlNode> Klasy jest oparta na W3C modelu DOM (Document Object) i obejmuje możliwości edycji.  
  
-   <xref:System.Xml.XPath.XPathDocument> Klasy jest oparte na modelu danych XPath magazyn danych tylko do odczytu. <xref:System.Xml.XPath.XPathDocument> Klasa zalecane dla XSLT jest przetwarzanie. Zapewnia większą wydajność w porównaniu z <xref:System.Xml.XmlNode> klasy.  
  
 Przekształcenia mają zastosowanie do dokumentu jako całość. Innymi słowy w przypadku przekazania w węźle innym niż węzeł główny dokumentu, to nie zapobiega proces przekształcania podczas uzyskiwania dostępu do wszystkich węzłów w załadowanego dokumentu. Aby przekształcić fragmentu węzła, należy utworzyć obiekt zawierający tylko fragmentu węzeł i przekazać do obiektu <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metody. Aby uzyskać więcej informacji, zobacz [porady: Przekształcanie fragmentu węzła](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> Lub <paramref name="results" /> wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Wystąpił błąd podczas wykonywania przekształcenia XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Implementacja obiektu <see cref="T:System.Xml.XPath.IXPathNavigable" /> interfejsu. W programie Microsoft .NET Framework, może to być albo <see cref="T:System.Xml.XmlNode" /> (zazwyczaj <see cref="T:System.Xml.XmlDocument" />), lub <see cref="T:System.Xml.XPath.XPathDocument" /> zawierające dane, które mają zostać przetworzone.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Zawierającego użyte jako dane wejściowe do transformacji argumenty kwalifikowana przestrzeni nazw. Ta wartość może być <see langword="null" />.</param>
        <param name="results">
          <see cref="T:System.Xml.XmlWriter" /> Do której ma zostać danych wyjściowych.  
  
 Jeśli arkusz stylów zawiera <c>XSL: Output</c> element, należy utworzyć <see cref="T:System.Xml.XmlWriter" /> przy użyciu <see cref="T:System.Xml.XmlWriterSettings" /> obiektu zwróconego z <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> właściwości. Gwarantuje to, że <see cref="T:System.Xml.XmlWriter" /> z ustawieniami poprawne dane wyjściowe.</param>
        <summary>Wykonuje przekształcenie korzystanie z dokumentów wejściowych, określony przez <see cref="T:System.Xml.XPath.IXPathNavigable" /> obiektu i umieszcza wyniki w <see cref="T:System.Xml.XmlWriter" />. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Udostępnia dodatkowe argumenty czasu wykonywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli XSLT `document()` funkcja jest włączona, problem zostanie rozwiązany przy użyciu <xref:System.Xml.XmlUrlResolver> bez poświadczeń użytkownika. Jeśli zewnętrzny zasób znajduje się w zasobie sieciowym, który wymaga uwierzytelniania, użyj przeciążenia, które przyjmuje <xref:System.Xml.XmlResolver> jako jeden z jego argumentów i określ <xref:System.Xml.XmlResolver> niezbędne poświadczenia.  
  
 Ta metoda nie obsługuje `xsl:strip-space` elementu. Jeśli uwzględniona arkusza stylów skompilowanego `xsl:strip-space` element, należy użyć <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> przeciążenia, które ma <xref:System.Xml.XmlReader> jako argument wejściowy.  
  
 <xref:System.Xml.XPath.IXPathNavigable> Interfejs jest wdrażany w <xref:System.Xml.XmlNode> i <xref:System.Xml.XPath.XPathDocument> klasy. Te klasy reprezentują w pamięci podręcznej danych XML.  
  
-   <xref:System.Xml.XmlNode> Klasy jest oparta na W3C modelu DOM (Document Object) i obejmuje możliwości edycji.  
  
-   <xref:System.Xml.XPath.XPathDocument> Klasy jest oparte na modelu danych XPath magazyn danych tylko do odczytu. <xref:System.Xml.XPath.XPathDocument> Klasa zalecane dla XSLT jest przetwarzanie. Zapewnia większą wydajność w porównaniu z <xref:System.Xml.XmlNode> klasy.  
  
 Przekształcenia mają zastosowanie do dokumentu jako całość. Innymi słowy w przypadku przekazania w węźle innym niż węzeł główny dokumentu, to nie zapobiega proces przekształcania podczas uzyskiwania dostępu do wszystkich węzłów w załadowanego dokumentu. Aby przekształcić fragmentu węzła, należy utworzyć obiekt zawierający tylko fragmentu węzeł i przekazać do obiektu <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metody. Aby uzyskać więcej informacji, zobacz [porady: Przekształcanie fragmentu węzła](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> Lub <paramref name="results" /> wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Wystąpił błąd podczas wykonywania przekształcenia XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XmlReader" /> Zawierający dokument wejściowy.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Zawierającego użyte jako dane wejściowe do transformacji argumenty kwalifikowana przestrzeni nazw. Ta wartość może być <see langword="null" />.</param>
        <param name="results">
          <see cref="T:System.Xml.XmlWriter" /> Do której ma zostać danych wyjściowych.  
  
 Jeśli arkusz stylów zawiera <c>XSL: Output</c> element, należy utworzyć <see cref="T:System.Xml.XmlWriter" /> przy użyciu <see cref="T:System.Xml.XmlWriterSettings" /> obiektu zwróconego z <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> właściwości. Gwarantuje to, że <see cref="T:System.Xml.XmlWriter" /> z ustawieniami poprawne dane wyjściowe.</param>
        <param name="documentResolver">
          <see cref="T:System.Xml.XmlResolver" /> Używany do rozpoznania XSLT <c>document()</c> funkcji. Jeśli jest to <see langword="null" />, <c>document()</c> funkcji nie zostanie rozwiązany.</param>
        <summary>Wykonuje przekształcenie korzystanie z dokumentów wejściowych, określony przez <see cref="T:System.Xml.XmlReader" /> obiektu i umieszcza wyniki w <see cref="T:System.Xml.XmlWriter" />. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Udostępnia dodatkowe argumenty środowiska wykonawczego i jest rozpoznawana element XmlResolver XSLT <c>document()</c> funkcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Xml.XmlSecureResolver> rozwiązywać XSLT `document()` funkcji.  
  
 [!code-csharp[XslCompiledTransform.Transform#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Transform#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> Lub <paramref name="results" /> wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Wystąpił błąd podczas wykonywania przekształcenia XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Dokument do przekształcania, który jest określony przez <see cref="T:System.Xml.XPath.IXPathNavigable" /> obiektu.</param>
        <param name="arguments">Lista argumentów jako <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</param>
        <param name="results">
          <see cref="T:System.Xml.XmlWriter" /> Do której ma zostać danych wyjściowych.  
  
 Jeśli arkusz stylów zawiera <see langword="xsl:output" /> element, należy utworzyć <see cref="T:System.Xml.XmlWriter" /> za pomocą <see cref="T:System.Xml.XmlWriterSettings" /> obiekt, który jest zwracany z <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> właściwości. Gwarantuje to, że <see cref="T:System.Xml.XmlWriter" /> z ustawieniami poprawne dane wyjściowe.</param>
        <param name="documentResolver">
          <see cref="T:System.Xml.XmlResolver" /> Używany do rozpoznania XSLT <see langword="document()" /> funkcji. Jeśli jest to <see langword="null" />, <see langword="document()" /> funkcji nie zostanie rozwiązany.</param>
        <summary>Wykonuje przekształcenie przy użyciu określonego przez dokument wejściowy <see cref="T:System.Xml.XPath.IXPathNavigable" /> obiektu i umieszcza wyniki w <see cref="T:System.Xml.XmlWriter" />. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Udostępnia dodatkowe argumenty środowiska wykonawczego i <see cref="T:System.Xml.XmlResolver" /> rozpoznaje XSLT <see langword="document()" /> funkcji.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>