<Type Name="Keyboard" FullName="Microsoft.VisualBasic.Devices.Keyboard">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e6440418bc813e76e5589dd15c3e510486030fde" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30431715" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Keyboard" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Keyboard extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Devices.Keyboard" />
  <TypeSignature Language="VB.NET" Value="Public Class Keyboard" />
  <TypeSignature Language="C++ CLI" Value="public ref class Keyboard" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dostarcza właściwości, aby uzyskać dostęp do bieżącego stanu klawiatury, takie jak co klucze są obecnie naciśnięty i udostępnia metodę Wyślij naciśnięcia klawiszy do aktywnego okna.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard` Obiektu zapewnia interfejs do klawiatury komputera. Właściwości `My.Computer.Keyboard` zawierają informacje o stanie kilka klawisze specjalne. `My.Computer.Keyboard.SendKeys` Metoda pozwala wysyłać klucze do aktywnego okna tak, jakby została wpisana za pomocą klawiatury.  
  
## <a name="tasks"></a>Zadania  
 W poniższej tabeli przedstawiono przykład zadań, obejmujących `My.Computer.Keyboard` obiektu.  
  
|Do|Zobacz|  
|-|-|  
|Wyślij naciśnięcia klawiszy do aplikacji|[Porady: uruchamianie aplikacji i wysłać go uderzenia w klawisze (Visual Basic)](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-start-an-application-and-send-it-keystrokes.md)|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|-|-|  
|Aplikacja systemu Windows|**Tak**|  
|Biblioteka klas|**Tak**|  
|Aplikacja konsoli|**Tak**|  
|Biblioteka formantów systemu Windows|**Tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**Tak**|  
|Witryna sieci Web|Nie|  
  
   
  
## Examples  
 W tym przykładzie użyto `My.Computer.Keyboard.CtrlKeyDown` właściwości w celu określenia, czy zostanie naciśnięty klawisz CTRL komputera.  
  
 [!code-vb[VbVbalrMyComputer#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#36)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Keyboard ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Keyboard();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:Microsoft.VisualBasic.Devices.Keyboard" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <Member MemberName="AltKeyDown">
      <MemberSignature Language="C#" Value="public bool AltKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AltKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AltKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AltKeyDown { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see langword="Boolean" /> wskazująca, czy klawisz ALT jest wyłączony.</summary>
        <value>A <see langword="Boolean" /> wartość: <see langword="True" /> Jeśli klawisz ALT jest dół; w przeciwnym razie <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.AltKeyDown` Właściwości zapewnia funkcje podobne do <xref:System.Windows.Forms.Control.ModifierKeys%2A> właściwości.  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|-|-|  
|Aplikacja systemu Windows|**Tak**|  
|Biblioteka klas|**Tak**|  
|Aplikacja konsoli|**Tak**|  
|Biblioteka formantów systemu Windows|**Tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**Tak**|  
|Witryna sieci Web|Nie|  
  
   
  
## Examples  
 W tym przykładzie użyto `My.Computer.Keyboard.AltKeyDown` właściwości w celu określenia, czy klawisz ALT komputera nie działa.  
  
 [!code-vb[VbVbalrMyComputer#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#23)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CapsLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.CapsLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CapsLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CapsLock { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see langword="Boolean" /> wskazującą, czy włączony klawisz CAPS LOCK jest włączony.</summary>
        <value>A <see langword="Boolean" /> wartość: <see langword="True" /> Jeśli włączony klawisz CAPS LOCK jest włączony, w przeciwnym <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwracany jest tylko stan włączony klawisz CAPS LOCK.  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|-|-|  
|Aplikacja systemu Windows|**Tak**|  
|Biblioteka klas|**Tak**|  
|Aplikacja konsoli|**Tak**|  
|Biblioteka formantów systemu Windows|**Tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**Tak**|  
|Witryna sieci Web|Nie|  
  
   
  
## Examples  
 W tym przykładzie użyto `My.Computer.Keyboard.CapsLock` właściwości w celu określenia, czy komputera włączony klawisz CAPS LOCK jest włączony.  
  
 [!code-vb[VbVbalrMyComputer#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#50)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <Member MemberName="CtrlKeyDown">
      <MemberSignature Language="C#" Value="public bool CtrlKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CtrlKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CtrlKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CtrlKeyDown { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see langword="Boolean" /> wskazująca, czy klawisz CTRL jest wyłączony.</summary>
        <value>A <see langword="Boolean" /> wartość. <see langword="True" /> Jeśli klawisz CTRL jest wyłączony; w przeciwnym razie <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.CtrlKeyDown` Właściwości zapewnia funkcje podobne do <xref:System.Windows.Forms.Control.ModifierKeys%2A> właściwości.  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|-|-|  
|Aplikacja systemu Windows|**Tak**|  
|Biblioteka klas|**Tak**|  
|Aplikacja konsoli|**Tak**|  
|Biblioteka formantów systemu Windows|**Tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**Tak**|  
|Witryna sieci Web|Nie|  
  
   
  
## Examples  
 W tym przykładzie użyto `My.Computer.Keyboard.CtrlKeyDown` właściwości w celu określenia, czy klawisz CTRL komputera nie działa.  
  
 [!code-vb[VbVbalrMyComputer#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="NumLock">
      <MemberSignature Language="C#" Value="public bool NumLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NumLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.NumLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NumLock { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see langword="Boolean" /> wskazująca, czy klawisz NUM LOCK jest włączony.</summary>
        <value>A <see langword="Boolean" /> wartość. <see langword="True" /> Jeśli NUM LOCK jest włączony; w przeciwnym razie <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwracany jest tylko stan klawisz NUM LOCK.  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|-|-|  
|Aplikacja systemu Windows|**Tak**|  
|Biblioteka klas|**Tak**|  
|Aplikacja konsoli|**Tak**|  
|Biblioteka formantów systemu Windows|**Tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**Tak**|  
|Witryna sieci Web|Nie|  
  
   
  
## Examples  
 W tym przykładzie użyto `My.Computer.Keyboard.NumLock` właściwości w celu określenia, czy jest włączony klawisz NUM LOCK komputera.  
  
 [!code-vb[VbVbalrMyComputer#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <Member MemberName="ScrollLock">
      <MemberSignature Language="C#" Value="public bool ScrollLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.ScrollLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScrollLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScrollLock { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see langword="Boolean" /> wskazująca, czy klucz blokady PRZEWIJANIA jest włączony.</summary>
        <value>A <see langword="Boolean" /> wartość. <see langword="True" /> w przypadku blokady PRZEWIJANIA. w przeciwnym razie <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwracany jest tylko stan blokady PRZEWIJANIA klucza.  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|-|-|  
|Aplikacja systemu Windows|**Tak**|  
|Biblioteka klas|**Tak**|  
|Aplikacja konsoli|**Tak**|  
|Biblioteka formantów systemu Windows|**Tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**Tak**|  
|Witryna sieci Web|Nie|  
  
   
  
## Examples  
 W tym przykładzie użyto `My.Computer.Keyboard.ScrollLock` właściwości w celu określenia, czy klucz blokady PRZEWIJANIA komputera znajduje się na.  
  
 [!code-vb[VbVbalrMyComputer#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SendKeys">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wysyła naciśnięcia klawiszy co najmniej jeden aktywnego okna tak, jakby wpisany na klawiaturze.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendKeys">
      <MemberSignature Language="C#" Value="public void SendKeys (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SendKeys(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendKeys (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendKeys(System::String ^ keys);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">A <see langword="String" /> definiuje klawisze służące do wysyłania.</param>
        <summary>Wysyła naciśnięcia klawiszy co najmniej jeden aktywnego okna tak, jakby wpisany na klawiaturze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.SendKeys` Metoda zapewnia funkcje podobne do <xref:System.Windows.Forms.SendKeys.Send%2A> i <xref:System.Windows.Forms.SendKeys.SendWait%2A> metody.  
  
 `wait` Argument jest przydatne, jeśli inna aplikacja musi zakończyć się przed kontynuowaniem aplikacji.  
  
> [!NOTE]
>  Ponieważ nie istnieje metoda zarządzanych do aktywowania innej aplikacji, możesz użyć tej klasy w bieżącej aplikacji, ręcznie wybierz okno, aby wysłać te klucze do lub użyj metody interfejsu API systemu Windows, takich jak `FindWindow` i `SetForegroundWindow`, aby wymusić fokus na inne aplikacje. Aby uzyskać więcej informacji, zobacz [wskazówki: wywoływanie Windows API](~/docs/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md).  
  
 `keys` Argument można określić dowolny klawisz, jednego lub dowolny klawisz, w połączeniu z ALT, klawisz CTRL, lub SHIFT (lub dowolna kombinacja tych kluczy). Każdy klucz jest reprezentowany przez jeden lub więcej znaków, takich jak `a` znaku "," lub `{ENTER}` dla klawisza ENTER.  
  
 Aby połączyć klucza z SHIFT, poprzedzać kod klucza z `+` (znak plus). Aby połączyć klucza z klawiszem CTRL, poprzedzać kod klucza z `^` (daszek). Aby połączyć klucza z ALT, poprzedzać kod klucza z `%` (procent). Aby określić identycznych klucze, użyj formy `{` *klucza numer*`}`. Możesz umieścić odstęp między *klucza* i *numer*. Na przykład `{LEFT 42}` oznacza "naciśnij klawisz Strzałka w lewo razy 42"; `{h 10}` oznacza "naciśnij"h"10 razy."  
  
 Poniższa tabela zawiera listę kodów, które mogą służyć do określenia znaki, które nie są wyświetlane po naciśnięciu odpowiedniego klucza (na przykład ENTER lub TAB).  
  
|Key|Kod|  
|-|-|  
|BACKSPACE|{BACKSPACE} lub {BS}|  
|PODZIEL|{BREAK}|  
|CAPS LOCK|{CAPSLOCK}|  
|WYCZYŚĆ|{CLEAR}|  
|DELETE|{USUNĄĆ} lub {DEL}|  
|STRZAŁKA W DÓŁ|{DOWN}|  
|END|{ZAKOŃCZENIA}|  
|Wprowadź (numerycznej)|{WPROWADŹ}|  
|ENTER|~|  
|ESC|{ESCAPE} lub {ESC}|  
|HELP|{HELP}|  
|STRONA GŁÓWNA|{HOME}|  
|DODATKI|{WSTAWIĆ}|  
|STRZAŁKA W LEWO|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|STRONA W GÓRĘ|{PGUP}|  
|RETURN|{RETURN}|  
|STRZAŁKA W PRAWO|{PRAWO}|  
|BLOKADY PRZEWIJANIA|{SCROLLLOCK}|  
|TAB|{TAB}|  
|STRZAŁKA W GÓRĘ|{UP}|  
|F1 za pośrednictwem klawisz F15|{F1} do {klawisz F15}|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|-|-|  
|Aplikacja systemu Windows|**Tak**|  
|Biblioteka klas|**Tak**|  
|Aplikacja konsoli|**Tak**|  
|Biblioteka formantów systemu Windows|**Tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**Tak**|  
|Witryna sieci Web|Nie|  
  
   
  
## Examples  
 W tym przykładzie użyto `My.Computer.Keyboard.SendKeys` do wysyłania naciśnięcia klawiszy do aplikacji zewnętrznych aplikacji Kalkulator uruchomione przez `Shell` funkcji.  
  
 [!code-vb[VbVbalrMyComputer#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#25)]  
  
 A <xref:System.ArgumentException> wyjątek jest zgłaszany, jeśli nie można odnaleźć aplikacji przy użyciu identyfikatora procesu żądanej.  
  
 Wywołanie `Shell` funkcja wymaga pełnego zaufania (<xref:System.Security.SecurityException> klasy).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Sytuacja częściowego zaufania istnieje, w którym użytkownik nie ma wystarczających uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Określa uprawnienia związane z interfejsów użytkownika i Schowka. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
        <altmember cref="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SendKeys">
      <MemberSignature Language="C#" Value="public void SendKeys (string keys, bool wait);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SendKeys(string keys, bool wait) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendKeys (keys As String, wait As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendKeys(System::String ^ keys, bool wait);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="wait" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="keys">A <see langword="String" /> definiuje klawisze służące do wysyłania.</param>
        <param name="wait">Opcjonalny. A <see langword="Boolean" /> Określa, czy należy poczekać naciśnięcia klawiszy do przetworzenie przed kontynuowaniem aplikacji. <see langword="True" /> Domyślnie.</param>
        <summary>Wysyła naciśnięcia klawiszy co najmniej jeden aktywnego okna tak, jakby wpisany na klawiaturze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.SendKeys` Metoda zapewnia funkcje podobne do <xref:System.Windows.Forms.SendKeys.Send%2A> i <xref:System.Windows.Forms.SendKeys.SendWait%2A> metody.  
  
 `wait` Argument jest przydatne, jeśli inna aplikacja musi zakończyć się przed kontynuowaniem aplikacji.  
  
> [!NOTE]
>  Ponieważ nie istnieje metoda zarządzanych do aktywowania innej aplikacji, możesz użyć tej klasy w bieżącej aplikacji, ręcznie wybierz okno, aby wysłać te klucze do lub użyj metody interfejsu API systemu Windows, takich jak `FindWindow` i `SetForegroundWindow`, aby wymusić fokus na inne aplikacje. Aby uzyskać więcej informacji, zobacz [wskazówki: wywoływanie Windows API](~/docs/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md).  
  
 `keys` Argument można określić dowolny klawisz, jednego lub dowolny klawisz, w połączeniu z ALT, klawisz CTRL, lub SHIFT (lub dowolna kombinacja tych kluczy). Każdy klucz jest reprezentowany przez jeden lub więcej znaków, takich jak `a` znaku "," lub `{ENTER}` dla klawisza ENTER.  
  
 Aby połączyć klucza z SHIFT, poprzedzać kod klucza z `+` (znak plus). Aby połączyć klucza z klawiszem CTRL, poprzedzać kod klucza z `^` (daszek). Aby połączyć klucza z ALT, poprzedzać kod klucza z `%` (procent). Aby określić identycznych klucze, użyj formy `{` *klucza numer*`}`. Możesz umieścić odstęp między *klucza* i *numer*. Na przykład `{LEFT 42}` oznacza "naciśnij klawisz Strzałka w lewo razy 42"; `{h 10}` oznacza "naciśnij"h"10 razy."  
  
 Poniższa tabela zawiera listę kodów, które mogą służyć do określenia znaki, które nie są wyświetlane po naciśnięciu odpowiedniego klucza (na przykład ENTER lub TAB).  
  
|Key|Kod|  
|-|-|  
|BACKSPACE|{BACKSPACE} lub {BS}|  
|PODZIEL|{BREAK}|  
|CAPS LOCK|{CAPSLOCK}|  
|WYCZYŚĆ|{CLEAR}|  
|DELETE|{USUNĄĆ} lub {DEL}|  
|STRZAŁKA W DÓŁ|{DOWN}|  
|END|{ZAKOŃCZENIA}|  
|Wprowadź (numerycznej)|{WPROWADŹ}|  
|ENTER|~|  
|ESC|{ESCAPE} lub {ESC}|  
|HELP|{HELP}|  
|STRONA GŁÓWNA|{HOME}|  
|DODATKI|{WSTAWIĆ}|  
|STRZAŁKA W LEWO|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|STRONA W GÓRĘ|{PGUP}|  
|RETURN|{RETURN}|  
|STRZAŁKA W PRAWO|{PRAWO}|  
|BLOKADY PRZEWIJANIA|{SCROLLLOCK}|  
|TAB|{TAB}|  
|STRZAŁKA W GÓRĘ|{UP}|  
|F1 za pośrednictwem klawisz F15|{F1} do {klawisz F15}|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|-|-|  
|Aplikacja systemu Windows|**Tak**|  
|Biblioteka klas|**Tak**|  
|Aplikacja konsoli|**Tak**|  
|Biblioteka formantów systemu Windows|**Tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**Tak**|  
|Witryna sieci Web|Nie|  
  
   
  
## Examples  
 W tym przykładzie użyto `My.Computer.Keyboard.SendKeys` do wysyłania naciśnięcia klawiszy do aplikacji zewnętrznych aplikacji Kalkulator uruchomione przez `Shell` funkcji.  
  
 [!code-vb[VbVbalrMyComputer#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#25)]  
  
 A <xref:System.ArgumentException> wyjątek jest zgłaszany, jeśli nie można odnaleźć aplikacji przy użyciu identyfikatora procesu żądanej.  
  
 Wywołanie `Shell` funkcja wymaga pełnego zaufania (<xref:System.Security.SecurityException> klasy).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Sytuacja częściowego zaufania istnieje, w którym użytkownik nie ma wystarczających uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Określa uprawnienia związane z interfejsów użytkownika i Schowka. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
        <altmember cref="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ShiftKeyDown">
      <MemberSignature Language="C#" Value="public bool ShiftKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShiftKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShiftKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShiftKeyDown { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see langword="Boolean" /> wskazująca, czy klawisz SHIFT nie działa.</summary>
        <value>A <see langword="Boolean" /> wartość. <see langword="True" /> Jeśli klawisz SHIFT jest wyłączony; w przeciwnym razie <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.ShiftKeyDown` Właściwości zapewnia funkcje podobne do <xref:System.Windows.Forms.Control.ModifierKeys%2A> właściwości.  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|-|-|  
|Aplikacja systemu Windows|**Tak**|  
|Biblioteka klas|**Tak**|  
|Aplikacja konsoli|**Tak**|  
|Biblioteka formantów systemu Windows|**Tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**Tak**|  
|Witryna sieci Web|Nie|  
  
   
  
## Examples  
 W tym przykładzie użyto `My.Computer.Keyboard.ShiftKeyDown` właściwości w celu określenia, jeśli jeden z klawiszy SHIFT komputera nie działa.  
  
 [!code-vb[VbVbalrMyComputer#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#47)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
  </Members>
</Type>