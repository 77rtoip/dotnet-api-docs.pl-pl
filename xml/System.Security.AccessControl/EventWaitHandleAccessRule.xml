<Type Name="EventWaitHandleAccessRule" FullName="System.Security.AccessControl.EventWaitHandleAccessRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8f9b17a084af70636af63ec9df06b2f24148e87e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30567535" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EventWaitHandleAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventWaitHandleAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.EventWaitHandleAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventWaitHandleAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventWaitHandleAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje zestaw praw dostępu dozwolony lub niedozwolony dla użytkownika lub grupy. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> Klasa jest jeden zestaw klas, które umożliwiają zarządzanie Windows kontrolę dostępu na zdarzenia o nazwie systemu .NET Framework. Omówienie tych klas i ich związek z podstawowej struktury kontroli dostępu do systemu Windows, temacie <xref:System.Security.AccessControl.EventWaitHandleSecurity>.  
  
> [!NOTE]
>  Kontrolę dostępu systemu Windows jest znaczący tylko w przypadku systemu o nazwie zdarzenia. Jeśli <xref:System.Threading.EventWaitHandle> obiekt reprezentuje lokalnym zdarzeniem, kontroli dostępu nie ma znaczenia.  
  
 Aby uzyskać listę reguł obecnie stosowane do nazwanego zdarzenia, użyj <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> metodę, aby pobrać <xref:System.Security.AccessControl.EventWaitHandleSecurity> obiekt, a następnie użyć jego <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> metodę, aby uzyskać kolekcję <xref:System.Security.AccessControl.EventWaitHandleAccessRule> obiektów.  
  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> obiekty nie mapowanie jeden do jednego z wpisów kontroli dostępu w podstawowej poufnej listy kontroli dostępu (DACL). Po otrzymaniu zbiór wszystkich reguł dostępu dla zdarzenia zestaw zawiera minimalną liczbę reguł obecnie wymaganych do wyrażenia wszystkich wpisów kontroli dostępu.  
  
> [!NOTE]
>  Podstawowej wpisów kontroli dostępu zmieniać, jak dodać i usunąć reguły. Informacje w regułach są scalane, jeśli to możliwe, aby utrzymać najmniejszą liczbę wpisów kontroli dostępu. W związku z tym należy uzyskać bieżącą listę reguł, może nie wygląda tak samo jak lista wszystkich reguł, które zostały dodane.  
  
 Użyj <xref:System.Security.AccessControl.EventWaitHandleAccessRule> obiektów, aby określić, aby zezwolić lub odmówić użytkownikowi lub grupie prawa dostępu. <xref:System.Security.AccessControl.EventWaitHandleAccessRule> Zawsze obiekt reprezentuje zezwolenie na dostęp lub odmowa dostępu, nigdy nie oba.  
  
 Aby zastosować regułę do zdarzenia o nazwie system, należy użyć <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> metodę, aby pobrać <xref:System.Security.AccessControl.EventWaitHandleSecurity> obiektu. Modyfikowanie <xref:System.Security.AccessControl.EventWaitHandleSecurity> obiektu za pomocą jej metod dodać regułę, a następnie użyć <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> metody ponownie dołączyć obiektu zabezpieczeń.  
  
> [!IMPORTANT]
>  Zmiany wprowadzane do <xref:System.Security.AccessControl.EventWaitHandleSecurity> obiekt nie ma wpływu na poziomy dostępu o nazwie zdarzenia do czasu wywołania <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> metody można przypisać obiektu zmieniony zabezpieczeń do nazwanego zdarzenia.  
  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> obiekty są niezmienne. Zabezpieczenia dla zdarzenia jest zmodyfikowany za pomocą metody <xref:System.Security.AccessControl.EventWaitHandleSecurity> klasy można dodać ani usunąć reguły; zgodnie z tym podstawowej wpisów kontroli dostępu są modyfikowane.  
  
> [!NOTE]
>  Zabezpieczenia obiektów synchronizacji nie jest obsługiwane dla systemu Windows 98 lub Windows Millennium Edition.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano tworzenie i używanie <xref:System.Security.AccessControl.EventWaitHandleAccessRule> obiektów. W przykładzie jest tworzony <xref:System.Security.AccessControl.EventWaitHandleSecurity> obiektu, dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika i wyświetla wynikowy pary reguł. W przykładzie następnie umożliwia nowe prawa dla bieżącego użytkownika oraz wyświetla wynik, pokazujący, że nowe uprawnienia zostaną scalone z istniejącym <xref:System.Security.AccessControl.AccessControlType.Allow> reguły.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:System.Threading.EventWaitHandle> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> i <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.EventWaitHandleSecurity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.EventWaitHandleRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, eventRights As EventWaitHandleRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::EventWaitHandleRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Użytkownik lub grupa, którego będzie stosowana ta reguła. Musi być typu <see cref="T:System.Security.Principal.SecurityIdentifier" /> lub typu, takich jak <see cref="T:System.Security.Principal.NTAccount" /> którego można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="eventRights">Bitowe połączenie <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> wartości określających prawa dozwolony lub niedozwolony.</param>
        <param name="type">Jeden z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości określający, czy prawa zezwolono na dostęp lub odmowa dostępu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> klasy Określanie użytkownika lub grupy, ta reguła ma zastosowanie do prawa dostępu i określa, czy prawa dostępu określonego zezwolono na dostęp lub odmowa dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oczekiwanie <xref:System.Threading.EventWaitHandle> (przez wywołanie metody <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> lub <xref:System.Threading.WaitHandle.WaitAll%2A> metodę), użytkownik musi mieć <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> dostępu. Sygnalizowania zdarzenia przez wywołanie metody <xref:System.Threading.EventWaitHandle.Set%2A> metody, lub zresetować go do stanu unsignaled przez wywołanie metody <xref:System.Threading.EventWaitHandle.Reset%2A> metody, użytkownik musi mieć <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> dostępu. Sygnalizują <xref:System.Threading.EventWaitHandle> obiekt, a następnie poczekaj na jej przez wywołanie metody <xref:System.Threading.WaitHandle.SignalAndWait%2A> metody, użytkownik musi mieć <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> i <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> dostępu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> Określa nieprawidłową wartość.  
  
 —lub—  
  
 <paramref name="type" /> Określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="eventRights" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> nie jest ani typu <see cref="T:System.Security.Principal.SecurityIdentifier" /> ani typu, takich jak <see cref="T:System.Security.Principal.NTAccount" /> którego można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleAccessRule (string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.EventWaitHandleRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, eventRights As EventWaitHandleRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleAccessRule(System::String ^ identity, System::Security::AccessControl::EventWaitHandleRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Nazwa użytkownika lub grupy, będzie stosowana ta reguła.</param>
        <param name="eventRights">Bitowe połączenie <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> wartości określających prawa dozwolony lub niedozwolony.</param>
        <param name="type">Jeden z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości określający, czy prawa zezwolono na dostęp lub odmowa dostępu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> klasy, określając nazwę użytkownika lub grupy, ta reguła ma zastosowanie do prawa dostępu i określa, czy prawa dostępu określonego zezwolono na dostęp lub odmowa dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oczekiwanie <xref:System.Threading.EventWaitHandle> (przez wywołanie metody <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> lub <xref:System.Threading.WaitHandle.WaitAll%2A> metodę), użytkownik musi mieć <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> dostępu. Sygnalizowania zdarzenia przez wywołanie metody <xref:System.Threading.EventWaitHandle.Set%2A> metody, lub zresetować go do stanu unsignaled przez wywołanie metody <xref:System.Threading.EventWaitHandle.Reset%2A> metody, użytkownik musi mieć <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> dostępu. Sygnalizują <xref:System.Threading.EventWaitHandle> obiekt, a następnie poczekaj na jej przez wywołanie metody <xref:System.Threading.WaitHandle.SignalAndWait%2A> metody, użytkownik musi mieć <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> i <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> dostępu.  
  
 Ten konstruktor jest odpowiednikiem tworzenie <xref:System.Security.Principal.NTAccount> obiektu, przekazując `identity` do <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> Konstruktor i przekazywanie nowo utworzony <xref:System.Security.Principal.NTAccount> do obiektu <xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie tego konstruktora w celu utworzenia <xref:System.Security.AccessControl.EventWaitHandleAccessRule> obiektów. W przykładzie jest tworzony <xref:System.Security.AccessControl.EventWaitHandleSecurity> obiektu, dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika i wyświetla wynikowy pary reguł. W przykładzie następnie umożliwia nowe prawa dla bieżącego użytkownika oraz wyświetla wynik, pokazujący, że nowe uprawnienia zostaną scalone z istniejącym <xref:System.Security.AccessControl.AccessControlType.Allow> reguły.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:System.Threading.EventWaitHandle> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> i <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> Określa nieprawidłową wartość.  
  
 —lub—  
  
 <paramref name="type" /> Określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventRights" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="identity" /> jest ciągiem o zerowej długości.  
  
 —lub—  
  
 <paramref name="identity" /> jest więcej niż 512 znaków.</exception>
      </Docs>
    </Member>
    <Member MemberName="EventWaitHandleRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventWaitHandleRights As EventWaitHandleRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::EventWaitHandleRights EventWaitHandleRights { System::Security::AccessControl::EventWaitHandleRights get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.EventWaitHandleRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prawa dozwolony lub odrzucany przez regułę dostępu.</summary>
        <value>Bitowe połączenie <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> wartości, wskazując praw dozwolony lub odrzucany przez regułę dostępu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> obiekty są niezmienne. Można utworzyć nową regułę dostępu reprezentujący inny użytkownik, inne prawa lub innej <xref:System.Security.AccessControl.AccessControlType>, ale nie można zmodyfikować istniejącą regułę dostępu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights%2A> właściwość, aby wyświetlić praw w zestawie reguł zawartych w <xref:System.Security.AccessControl.EventWaitHandleSecurity> obiektu. W przykładzie jest tworzony <xref:System.Security.AccessControl.EventWaitHandleSecurity> obiektu, dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika i wyświetla wynikowy pary reguł. W przykładzie następnie umożliwia nowe prawa dla bieżącego użytkownika oraz wyświetla wynik, pokazujący, że nowe uprawnienia zostaną scalone z istniejącym <xref:System.Security.AccessControl.AccessControlType.Allow> reguły.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:System.Threading.EventWaitHandle> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> i <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>