<Type Name="EventWaitHandleAccessRule" FullName="System.Security.AccessControl.EventWaitHandleAccessRule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d33580845f9a7cff72933e3bd1ad93b97bc8a989" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69265067" /></Metadata><TypeSignature Language="C#" Value="public sealed class EventWaitHandleAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventWaitHandleAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.EventWaitHandleAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventWaitHandleAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventWaitHandleAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type EventWaitHandleAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje zestaw praw dostępu dozwolonych lub zabronionych dla użytkownika lub grupy. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> Klasa jest jednym z zestawów klas, które .NET Framework zapewnia do zarządzania zabezpieczeniami kontroli dostępu systemu Windows dla nazwanych zdarzeń systemowych. Aby zapoznać się z omówieniem tych klas i ich relacji z podstawową strukturą kontroli dostępu systemu Windows, <xref:System.Security.AccessControl.EventWaitHandleSecurity>Zobacz.  
  
> [!NOTE]
>  Zabezpieczenia kontroli dostępu systemu Windows są zrozumiałe tylko dla nazwanych zdarzeń systemowych. <xref:System.Threading.EventWaitHandle> Jeśli obiekt reprezentuje zdarzenie lokalne, kontrola dostępu jest istotna.  
  
 Aby uzyskać listę reguł, które są aktualnie stosowane do <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> nazwanego zdarzenia, użyj metody w celu <xref:System.Security.AccessControl.EventWaitHandleSecurity> uzyskania obiektu, a następnie użyj jego <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> metody w celu uzyskania kolekcji <xref:System.Security.AccessControl.EventWaitHandleAccessRule> obiektów.  
  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule>obiekty nie mapują jeden do jednego z wpisami kontroli dostępu na poufnej liście kontroli dostępu (DACL). Po otrzymaniu zestawu wszystkich reguł dostępu dla zdarzenia zestaw zawiera minimalną liczbę reguł, które są obecnie wymagane do wyznaczania wszystkich wpisów kontroli dostępu.  
  
> [!NOTE]
>  Powiązane wpisy kontroli dostępu zmieniają się w miarę stosowania i usuwania reguł. Informacje w regułach są scalane, jeśli jest to możliwe, w celu utrzymania najmniejszej liczby wpisów kontroli dostępu. Z tego względu, gdy pobierasz bieżącą listę reguł, może to nie wyglądać dokładnie tak, jak lista wszystkich dodanych reguł.  
  
 Użyj <xref:System.Security.AccessControl.EventWaitHandleAccessRule> obiektów, aby określić prawa dostępu do zezwalania lub odmowy użytkownikowi lub grupie. <xref:System.Security.AccessControl.EventWaitHandleAccessRule> Obiekt zawsze reprezentuje dozwolony lub zabroniony dostęp, nigdy nie obu.  
  
 Aby zastosować regułę do nazwanego zdarzenia systemowego, należy użyć <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> metody do <xref:System.Security.AccessControl.EventWaitHandleSecurity> pobrania obiektu. Zmodyfikuj obiekt za pomocą jego metod, aby dodać regułę, a następnie <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> Użyj metody, aby ponownie dołączyć obiekt zabezpieczeń. <xref:System.Security.AccessControl.EventWaitHandleSecurity>  
  
> [!IMPORTANT]
>  Zmiany wprowadzane w <xref:System.Security.AccessControl.EventWaitHandleSecurity> obiekcie nie wpływają na poziomy dostępu nazwanego zdarzenia do momentu <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> wywołania metody przypisania zmienionego obiektu zabezpieczeń do nazwanego zdarzenia.  
  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule>obiekty są niezmienne. Zabezpieczenia dla zdarzenia są modyfikowane przy użyciu metod <xref:System.Security.AccessControl.EventWaitHandleSecurity> klasy w celu dodawania lub usuwania reguł. w takim przypadku odpowiednie wpisy kontroli dostępu są modyfikowane.  
  
> [!NOTE]
>  Zabezpieczenia dotyczące obiektów synchronizacji nie są obsługiwane w systemie Windows 98 lub Windows Millennium Edition.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje tworzenie i używanie <xref:System.Security.AccessControl.EventWaitHandleAccessRule> obiektów. Przykład tworzy <xref:System.Security.AccessControl.EventWaitHandleSecurity> obiekt, dodaje reguły zezwalające i odmawiające różnych praw dla bieżącego użytkownika, a następnie wyświetla uzyskaną parę reguł. W tym przykładzie można następnie uzyskać nowe prawa dla bieżącego użytkownika i wyświetlić wynik, wskazując, że nowe prawa są scalone z istniejącą <xref:System.Security.AccessControl.AccessControlType.Allow> regułą.  
  
> [!NOTE]
>  Ten przykład nie dołącza obiektu zabezpieczeń do <xref:System.Threading.EventWaitHandle> obiektu. Przykłady służące do dołączania obiektów zabezpieczeń <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> znajdują się w i <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.EventWaitHandleSecurity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.EventWaitHandleRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, eventRights As EventWaitHandleRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::EventWaitHandleRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.EventWaitHandleAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.EventWaitHandleRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.EventWaitHandleAccessRule" Usage="new System.Security.AccessControl.EventWaitHandleAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Użytkownik lub Grupa, której dotyczy reguła. Musi być typu <see cref="T:System.Security.Principal.SecurityIdentifier" /> lub typu, takiego jak <see cref="T:System.Security.Principal.NTAccount" /> , który można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="eventRights">Bitowa kombinacja <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> wartości określających prawa dozwolone lub odrzucane.</param>
        <param name="type">Jedna z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości określająca, czy prawa są dozwolone czy odrzucane.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> klasy, określając użytkownika lub grupę, do której odnosi się reguła, uprawnienia dostępu oraz tego, czy określone prawa dostępu są dozwolone czy odrzucane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby poczekać na <xref:System.Threading.EventWaitHandle> (przez <xref:System.Threading.WaitHandle.WaitOne%2A>wywołanie <xref:System.Threading.WaitHandle.WaitAny%2A> metody lub <xref:System.Threading.WaitHandle.WaitAll%2A> ), użytkownik musi mieć <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> dostęp. Aby sygnalizować zdarzenie przez wywołanie <xref:System.Threading.EventWaitHandle.Set%2A> metody lub zresetowanie go do stanu Niesygnalizowane przez <xref:System.Threading.EventWaitHandle.Reset%2A> wywołanie metody, użytkownik musi mieć <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> dostęp. Aby sygnalizować <xref:System.Threading.EventWaitHandle> obiekt, a następnie zaczekaj na niego, <xref:System.Threading.WaitHandle.SignalAndWait%2A> wywołując metodę, użytkownik musi mieć <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> dostęp.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights" />określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="type" />określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="eventRights" />ma wartość zero.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" />nie jest typem <see cref="T:System.Security.Principal.SecurityIdentifier" /> ani typu, takiego jak <see cref="T:System.Security.Principal.NTAccount" /> , który można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleAccessRule (string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.EventWaitHandleRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, eventRights As EventWaitHandleRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleAccessRule(System::String ^ identity, System::Security::AccessControl::EventWaitHandleRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.EventWaitHandleAccessRule : string * System.Security.AccessControl.EventWaitHandleRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.EventWaitHandleAccessRule" Usage="new System.Security.AccessControl.EventWaitHandleAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Nazwa użytkownika lub grupy, do której odnosi się reguła.</param>
        <param name="eventRights">Bitowa kombinacja <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> wartości określających prawa dozwolone lub odrzucane.</param>
        <param name="type">Jedna z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości określająca, czy prawa są dozwolone czy odrzucane.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> klasy, określając nazwę użytkownika lub grupy, do której odnosi się reguła, uprawnienia dostępu oraz tego, czy określone prawa dostępu są dozwolone czy odrzucane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby poczekać na <xref:System.Threading.EventWaitHandle> (przez <xref:System.Threading.WaitHandle.WaitOne%2A>wywołanie <xref:System.Threading.WaitHandle.WaitAny%2A> metody lub <xref:System.Threading.WaitHandle.WaitAll%2A> ), użytkownik musi mieć <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> dostęp. Aby sygnalizować zdarzenie przez wywołanie <xref:System.Threading.EventWaitHandle.Set%2A> metody lub zresetowanie go do stanu Niesygnalizowane przez <xref:System.Threading.EventWaitHandle.Reset%2A> wywołanie metody, użytkownik musi mieć <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> dostęp. Aby sygnalizować <xref:System.Threading.EventWaitHandle> obiekt, a następnie zaczekaj na niego, <xref:System.Threading.WaitHandle.SignalAndWait%2A> wywołując metodę, użytkownik musi mieć <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> dostęp.  
  
 Ten konstruktor jest równoznaczny z tworzeniem <xref:System.Security.Principal.NTAccount> obiektu, przekazaniem `identity` do <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> konstruktora <xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29> i przekazaniem nowo utworzonego <xref:System.Security.Principal.NTAccount> obiektu do konstruktora.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego konstruktora do tworzenia <xref:System.Security.AccessControl.EventWaitHandleAccessRule> obiektów. Przykład tworzy <xref:System.Security.AccessControl.EventWaitHandleSecurity> obiekt, dodaje reguły zezwalające i odmawiające różnych praw dla bieżącego użytkownika, a następnie wyświetla uzyskaną parę reguł. W tym przykładzie można następnie uzyskać nowe prawa dla bieżącego użytkownika i wyświetlić wynik, wskazując, że nowe prawa są scalone z istniejącą <xref:System.Security.AccessControl.AccessControlType.Allow> regułą.  
  
> [!NOTE]
>  Ten przykład nie dołącza obiektu zabezpieczeń do <xref:System.Threading.EventWaitHandle> obiektu. Przykłady służące do dołączania obiektów zabezpieczeń <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> znajdują się w i <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights" />określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="type" />określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="eventRights" />ma wartość zero.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="identity" />jest ciągiem o zerowej długości.  
  
—lub— 
 <paramref name="identity" />jest dłuższa niż 512 znaków.</exception>
      </Docs>
    </Member>
    <Member MemberName="EventWaitHandleRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventWaitHandleRights As EventWaitHandleRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::EventWaitHandleRights EventWaitHandleRights { System::Security::AccessControl::EventWaitHandleRights get(); };" />
      <MemberSignature Language="F#" Value="member this.EventWaitHandleRights : System.Security.AccessControl.EventWaitHandleRights" Usage="System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.EventWaitHandleRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prawa dozwolone lub odrzucane przez regułę dostępu.</summary>
        <value>Bitowa kombinacja <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> wartości wskazujących prawa dozwolone lub odrzucane przez regułę dostępu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule>obiekty są niezmienne. Można utworzyć nową regułę dostępu reprezentującą innego użytkownika, inne prawa lub inną <xref:System.Security.AccessControl.AccessControlType>, ale nie można modyfikować istniejącej reguły dostępu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights%2A> właściwości do wyświetlania praw w zestawie reguł zawartych <xref:System.Security.AccessControl.EventWaitHandleSecurity> w obiekcie. Przykład tworzy <xref:System.Security.AccessControl.EventWaitHandleSecurity> obiekt, dodaje reguły zezwalające i odmawiające różnych praw dla bieżącego użytkownika, a następnie wyświetla uzyskaną parę reguł. W tym przykładzie można następnie uzyskać nowe prawa dla bieżącego użytkownika i wyświetlić wynik, wskazując, że nowe prawa są scalone z istniejącą <xref:System.Security.AccessControl.AccessControlType.Allow> regułą.  
  
> [!NOTE]
>  Ten przykład nie dołącza obiektu zabezpieczeń do <xref:System.Threading.EventWaitHandle> obiektu. Przykłady służące do dołączania obiektów zabezpieczeń <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> znajdują się w i <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
