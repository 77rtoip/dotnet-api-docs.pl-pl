<Type Name="MutexAccessRule" FullName="System.Security.AccessControl.MutexAccessRule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d6162c48d3b0b450b42dadedc22aedd8237baa69" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56774666" /></Metadata><TypeSignature Language="C#" Value="public sealed class MutexAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MutexAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.MutexAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MutexAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class MutexAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type MutexAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje zestaw praw dostępu, dozwolony lub blokowany dla użytkownika lub grupy. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.MutexAccessRule> Klasa jest jeden zestaw klas .NET Framework zawiera Windows kontrolę dostępu na muteksy nazwane systemu zarządzania. Omówienie tych klas i ich związek z podstawowej struktury kontroli dostępu Windows, zobacz <xref:System.Security.AccessControl.MutexSecurity>.  
  
> [!NOTE]
>  Zabezpieczenia kontroli dostępu Windows ma znaczenie tylko w przypadku systemu o nazwie muteksy. Jeśli <xref:System.Threading.Mutex> obiekt reprezentuje lokalnego obiektu mutex, kontroli dostępu jest bez znaczenia.  
  
 Aby uzyskać listę reguł obecnie stosowaną do nazwanego obiektu mutex, użyj <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> metodę, aby uzyskać <xref:System.Security.AccessControl.MutexSecurity> obiektu, a następnie użyć jej <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> metodę, aby uzyskać kolekcję <xref:System.Security.AccessControl.MutexAccessRule> obiektów.  
  
 <xref:System.Security.AccessControl.MutexAccessRule> obiekty nie są mapowane jeden do jednego z wpisów kontroli dostępu w podstawowej poufnej listy kontroli dostępu (DACL). Gdy otrzymasz zestaw wszystkich reguł dostępu dla elementu mutex zestaw zawiera minimalną liczbę reguł obecnie wymaganych do wyrażenia wszystkich wpisów kontroli dostępu.  
  
> [!NOTE]
>  Zmienić podstawowej wpisów kontroli dostępu Zastosuj i Usuń reguły. Informacje w regułach są scalane, jeśli jest to możliwe, aby zachować najmniejszą liczbę wpisów kontroli dostępu. W związku z tym podczas odczytywania bieżącą listę reguł to może nie wyglądać dokładnie listę wszystkich reguł, które zostały dodane.  
  
 Użyj <xref:System.Security.AccessControl.MutexAccessRule> obiektów, aby określić prawa dostępu, aby udzielić lub odmówić użytkownikowi lub grupie. A <xref:System.Security.AccessControl.MutexAccessRule> obiekt zawsze, reprezentuje zezwolenie na dostęp lub odmowa dostępu, nigdy nie oba.  
  
 Aby zastosować regułę do elementu mutex systemu o nazwie, należy użyć <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> metodę, aby uzyskać <xref:System.Security.AccessControl.MutexSecurity> obiektu. Modyfikowanie <xref:System.Security.AccessControl.MutexSecurity> obiektu za pomocą jej metod Dodaj regułę, a następnie użyć <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType> metoda ponownie dołączyć obiektu zabezpieczeń.  
  
> [!IMPORTANT]
>  Zmiany wprowadzone do <xref:System.Security.AccessControl.MutexSecurity> obiektu nie wpływają na poziomy dostępu do nazwanego obiektu mutex dopóki nie zostanie wywołana <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType> metodę, aby przypisać obiekt zmienionego zabezpieczeń do nazwanego obiektu mutex.  
  
 <xref:System.Security.AccessControl.MutexAccessRule> obiekty są niezmienne. Zabezpieczenia dla elementu mutex jest modyfikowana przy użyciu metody <xref:System.Security.AccessControl.MutexSecurity> reguł klasy, aby dodać lub usunąć; jak to podstawowy wpisów kontroli dostępu są modyfikowane.  
  
> [!NOTE]
>  Zabezpieczenia dla obiektów synchronizacji nie są obsługiwane dla Windows 98 lub Windows Millennium Edition.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje stworzeniem i używaniem <xref:System.Security.AccessControl.MutexAccessRule> obiektów. W przykładzie jest tworzony <xref:System.Security.AccessControl.MutexSecurity> obiekt, dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika i wyświetla wynikowy pary reguł. Przykład następnie umożliwia nowych uprawnień dla bieżącego użytkownika i wyświetla wynik, pokazujący, że nowe prawa są scalane z istniejącym <xref:System.Security.AccessControl.AccessControlType.Allow> reguły.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:System.Threading.Mutex> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> i <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.MutexSecurity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.MutexAccessRule" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MutexAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.MutexRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.MutexRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, eventRights As MutexRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MutexAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::MutexRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.MutexAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.MutexRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.MutexAccessRule" Usage="new System.Security.AccessControl.MutexAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.MutexRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Użytkownicy lub grupy, których dotyczy reguła. Musi być typu <see cref="T:System.Security.Principal.SecurityIdentifier" /> lub typu, takie jak <see cref="T:System.Security.Principal.NTAccount" /> , można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="eventRights">Bitowa kombinacja <see cref="T:System.Security.AccessControl.MutexRights" /> wartości określających prawa dozwolony lub blokowany.</param>
        <param name="type">Jedną z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości określających, czy uprawnienia są dozwolone lub odrzucane.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.MutexAccessRule" /> klasy, określając użytkownika lub grupy, ta reguła ma zastosowanie do prawa dostępu i tego, czy prawa dostępu określonego zezwolono na dostęp lub odmowa dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby czekać na <xref:System.Threading.Mutex> (przez wywołanie metody <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> lub <xref:System.Threading.WaitHandle.WaitAll%2A> metoda), użytkownik musi mieć <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> dostępu. Aby zwolnić mutex, wywołując <xref:System.Threading.Mutex.ReleaseMutex%2A> metody, użytkownik musi mieć <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> dostępu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights" /> Określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="type" /> Określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="eventRights" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> nie jest ani typu <see cref="T:System.Security.Principal.SecurityIdentifier" /> ani nie ma typu, takie jak <see cref="T:System.Security.Principal.NTAccount" /> , można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MutexAccessRule (string identity, System.Security.AccessControl.MutexRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.MutexRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexAccessRule.#ctor(System.String,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, eventRights As MutexRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MutexAccessRule(System::String ^ identity, System::Security::AccessControl::MutexRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.MutexAccessRule : string * System.Security.AccessControl.MutexRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.MutexAccessRule" Usage="new System.Security.AccessControl.MutexAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.MutexRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Nazwa użytkownika lub grupy dotyczy reguła.</param>
        <param name="eventRights">Bitowa kombinacja <see cref="T:System.Security.AccessControl.MutexRights" /> wartości określających prawa dozwolony lub blokowany.</param>
        <param name="type">Jedną z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości określających, czy uprawnienia są dozwolone lub odrzucane.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.MutexAccessRule" /> klasy, określając nazwę użytkownika lub grupy, ta reguła ma zastosowanie do prawa dostępu i tego, czy prawa dostępu określonego zezwolono na dostęp lub odmowa dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby czekać na <xref:System.Threading.Mutex> (przez wywołanie metody <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> lub <xref:System.Threading.WaitHandle.WaitAll%2A> metoda), użytkownik musi mieć <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> dostępu. Aby zwolnić mutex, wywołując <xref:System.Threading.Mutex.ReleaseMutex%2A> metod, użytkownik musi mieć <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> dostępu.  
  
 Ten konstruktor jest odpowiednikiem tworzenie <xref:System.Security.Principal.NTAccount> obiektu, przekazując `identity` do <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> Konstruktor i przekazanie nowo utworzony <xref:System.Security.Principal.NTAccount> obiekt <xref:System.Security.AccessControl.MutexAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.MutexRights%2CSystem.Security.AccessControl.AccessControlType%29> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego konstruktora, aby utworzyć <xref:System.Security.AccessControl.MutexAccessRule> obiektów. W przykładzie jest tworzony <xref:System.Security.AccessControl.MutexSecurity> obiekt, dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika i wyświetla wynikowy pary reguł. Przykład następnie umożliwia nowych uprawnień dla bieżącego użytkownika i wyświetla wynik, pokazujący, że nowe prawa są scalane z istniejącym <xref:System.Security.AccessControl.AccessControlType.Allow> reguły.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:System.Threading.Mutex> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> i <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights" /> Określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="type" /> Określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="eventRights" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="identity" /> jest ciągiem o zerowej długości.  
  
—lub— 
 <paramref name="identity" /> ma więcej niż 512 znaków.</exception>
      </Docs>
    </Member>
    <Member MemberName="MutexRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.MutexRights MutexRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.MutexRights MutexRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.MutexAccessRule.MutexRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MutexRights As MutexRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::MutexRights MutexRights { System::Security::AccessControl::MutexRights get(); };" />
      <MemberSignature Language="F#" Value="member this.MutexRights : System.Security.AccessControl.MutexRights" Usage="System.Security.AccessControl.MutexAccessRule.MutexRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.MutexRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera praw dozwolony lub odrzucany przez regułę dostępu.</summary>
        <value>Bitowa kombinacja <see cref="T:System.Security.AccessControl.MutexRights" /> wartości oznaczają prawa dozwolony lub odrzucany przez regułę dostępu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.MutexAccessRule> obiekty są niezmienne. Można utworzyć nową regułę dostępu, reprezentujący innego użytkownika, inne prawa lub innego <xref:System.Security.AccessControl.AccessControlType>, ale nie można zmodyfikować istniejącą regułę dostępu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Security.AccessControl.MutexAccessRule.MutexRights%2A> właściwość, aby wyświetlić uprawnienia w zestawie reguł zawartych w <xref:System.Security.AccessControl.MutexSecurity> obiektu. W przykładzie jest tworzony <xref:System.Security.AccessControl.MutexSecurity> obiekt, dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika i wyświetla wynikowy pary reguł. Przykład następnie umożliwia nowych uprawnień dla bieżącego użytkownika i wyświetla wynik, pokazujący, że nowe prawa są scalane z istniejącym <xref:System.Security.AccessControl.AccessControlType.Allow> reguły.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:System.Threading.Mutex> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> i <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>