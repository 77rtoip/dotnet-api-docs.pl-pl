<Type Name="RegistrySecurity" FullName="System.Security.AccessControl.RegistrySecurity">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="84f41f468e014b74e8d8a648742d9005ce09ace4" />
    <Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="10/12/2018" />
    <Meta Name="ms.locfileid" Value="49142395" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RegistrySecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistrySecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistrySecurity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistrySecurity&#xA;Inherits NativeObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistrySecurity sealed : System::Security::AccessControl::NativeObjectSecurity" />
  <TypeSignature Language="F#" Value="type RegistrySecurity = class&#xA;    inherit NativeObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje Windows kontrolę dostępu dla klucza rejestru. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Element <xref:System.Security.AccessControl.RegistrySecurity> obiektu określa prawa dostępu do klucza rejestru i określa również, jak są poddawane inspekcji prób dostępu. Prawa dostępu do klucza rejestru są wyrażane jako zasady z każdej reguły dostępu, reprezentowane przez <xref:System.Security.AccessControl.RegistryAccessRule> obiektu. Każda reguła inspekcji jest reprezentowany przez <xref:System.Security.AccessControl.RegistryAuditRule> obiektu.  
  
 Odzwierciedla to Windows system zabezpieczeń, w którym każdy obiekt zabezpieczany ma co najwyżej jeden poufnej listy kontroli dostępu (DACL), które kontroluje dostęp do bezpiecznego obiektu i co najwyżej jeden system listy kontroli dostępu (SACL) określająca, do których dostęp próby są poddawane inspekcji. Listy DACL i SACL są uporządkowane listy wpisów kontroli dostępu (ACE), które określają dostępu i inspekcji dla użytkowników i grup. A <xref:System.Security.AccessControl.RegistryAccessRule> lub <xref:System.Security.AccessControl.RegistryAuditRule> object może reprezentować więcej niż jednego wpisu ACE.  
  
> [!NOTE]
>  Zabezpieczenia kontroli dostępu Windows będzie stosowany tylko do kluczy rejestru. Nie można zastosować do poszczególnych klucz/wartość pary, przechowywane w kluczu.  
  
 <xref:System.Security.AccessControl.RegistrySecurity>, <xref:System.Security.AccessControl.RegistryAccessRule>, I <xref:System.Security.AccessControl.RegistryAuditRule> klasy ukryć szczegóły implementacji list ACL i wpisy kontroli dostępu. Umożliwiają one ignoruje siedemnastu różnych typów wpisu kontroli dostępu i złożoność poprawnie obsługi dziedziczenia i propagację praw dostępu. Te obiekty są również stworzony w celu zapobiegania następujące typowe błędy kontroli dostępu:  
  
-   Tworzenia deskryptora zabezpieczeń przy użyciu DACL o wartości null. Odwołanie o wartości null do listy DACL zezwala każdemu użytkownikowi dodać reguły dostępu do obiektu, potencjalnie tworzenia ataku typu "odmowa usługi". Nowy <xref:System.Security.AccessControl.RegistrySecurity> obiekt zawsze rozpoczyna się od pusta lista DACL, która nie zezwala na dostęp dla wszystkich użytkowników.  
  
-   Naruszenie canonical porządkowanie wpisy kontroli dostępu. Jeśli lista ACE w listy DACL nie mieści się w kolejności canonical, użytkownicy mogą przypadkowo mieć dostępu do zabezpieczonego obiektu. Na przykład prawa dostępu odmowy zawsze musi występować przed dozwolone uprawnienia. <xref:System.Security.AccessControl.RegistrySecurity> obiekty, które wewnętrznie Obsługa odpowiedniej kolejności.  
  
-   Manipulowanie flagi deskryptora zabezpieczeń, które powinny znajdować się w tylko formant w Menedżerze zasobów.  
  
-   Tworzenia nieprawidłowe kombinacje flagi ACE.  
  
-   Manipulowanie ACE dziedziczone. Dziedziczenie i propagację są obsługiwane przez Menedżera zasobów, w odpowiedzi na zmiany wprowadzone do reguł dostępu i inspekcji.  
  
-   Wstawianie znaczenia wpisy kontroli dostępu do listy kontroli dostępu.  
  
 Tylko funkcje, które nie są obsługiwane przez obiekty zabezpieczeń .NET jest niebezpieczne działań, które należy unikać przez większość deweloperów aplikacji, takie jak następujące:  
  
-   Zadania niskiego poziomu, które są zazwyczaj wykonywane przez Menedżera zasobów.  
  
-   Dodawanie lub usuwanie wpisów kontroli dostępu w sposób, który nie zachowują kolejność canonical.  
  
 Aby zmodyfikować Windows kontrolę dostępu dla klucza rejestru, użyj <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metodę, aby uzyskać <xref:System.Security.AccessControl.RegistrySecurity> obiektu. Zmodyfikuj obiekt zabezpieczeń przez dodawanie i usuwanie reguł, a następnie użyj <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metodę, aby dołączyć go ponownie.  
  
> [!IMPORTANT]
>  Zmiany wprowadzone do <xref:System.Security.AccessControl.RegistrySecurity> obiektu nie wpływają na poziomy dostępu do klucza rejestru do czasu wywołania <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metodę, aby przypisać obiekt zmienionego zabezpieczeń do klucza rejestru.  
  
 Aby skopiować kontrolę dostępu z jednego klucza do innego, należy użyć <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metodę, aby uzyskać <xref:System.Security.AccessControl.RegistrySecurity> obiekt reprezentujący reguł dostępu i inspekcji dla pierwszego klucza rejestru, a następnie użyj <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metodę, aby przypisać te reguły Drugi klucz rejestru. Można także przypisać zasady do drugiego klucza rejestru ze <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=nameWithType> lub <xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=nameWithType> metody, która przyjmuje <xref:System.Security.AccessControl.RegistrySecurity> obiektu parametru.  
  
 Użytkownicy z inwestycji w języka (SDDL) definicji deskryptora zabezpieczeń mogą używać <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> metodę, aby ustawić zasady dostępu do klucza rejestru i <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> metodę, aby uzyskać ciąg reprezentujący w formacie SDDL reguły dostępu. Nie jest to zalecane w przypadku nowych wdrożeń.  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. Pierwszy przykład pokazuje jak zgodne scalania reguł podczas dodawania i usuwania, a drugi pokazuje jak dziedziczenie i propagację flagi wpływają na dodawanie i usuwanie reguł.  
  
 Przykład 1  
  
 Poniższy kod przedstawia przykład sposób, w jaki <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> metoda usuwa praw niezgodne reguły oraz sposób, w jaki <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> metoda scala prawa z reguły zgodne.  
  
 W przykładzie jest tworzony <xref:System.Security.AccessControl.RegistrySecurity> obiektu i dodaje regułę, która umożliwia użytkownikowi <xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType> praw. Przykład tworzy następnie regułę, która udziela użytkownikowi <xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>z tego samego dziedziczenia i prawa propagacji jako pierwszą regułę, a następnie używa <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> metodę, aby usunąć z tej nowej reguły z <xref:System.Security.AccessControl.RegistrySecurity> obiektu. <xref:System.Security.AccessControl.RegistryRights.SetValue> jest składnikiem <xref:System.Security.AccessControl.RegistryRights.ReadKey>, więc zostanie ono usunięte z reguły zgodne. Reguły w <xref:System.Security.AccessControl.RegistrySecurity> obiektu są wyświetlane, przedstawiający pozostałych składników <xref:System.Security.AccessControl.RegistryRights.ReadKey>.  
  
 Przykładowy kod wywołuje <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> metodę, aby scalić <xref:System.Security.AccessControl.RegistryRights.SetValue> kliknij prawym przyciskiem myszy, wróć do reguły w <xref:System.Security.AccessControl.RegistrySecurity> obiektu.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:Microsoft.Win32.RegistryKey> obiektu. Drugi przykład w tej sekcji dołącza obiektu zabezpieczeń, dzięki czemu przykłady <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> i <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 Przykład 2  
  
 Poniższy przykład kodu demonstruje reguły dostępu za pomocą dziedziczenia i propagacji. W przykładzie jest tworzony <xref:System.Security.AccessControl.RegistrySecurity> obiektu, a następnie tworzy i dodaje dwie reguły, które mają <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flagi. Pierwsza reguła ma nie flagi propagacji, natomiast druga <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> i <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.  
  
 Ten program wyświetla reguł w <xref:System.Security.AccessControl.RegistrySecurity> obiektu, a następnie używa <xref:System.Security.AccessControl.RegistrySecurity> obiekt, aby utworzyć podklucz. Program tworzy element podrzędny podklucz i podwójnym podklucz, a następnie wyświetla zabezpieczeń każdy. Na koniec usunie klucze testu.  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistrySecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistrySecurity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.RegistrySecurity" /> klasy przy użyciu wartości domyślnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nowy <xref:System.Security.AccessControl.RegistrySecurity> obiekt zawsze rozpoczyna się od pustego poufnej listy dostępu (DACL), który nie zezwala na dostęp dla wszystkich użytkowników.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AccessRightType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRightType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRightType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRightType : Type" Usage="System.Security.AccessControl.RegistrySecurity.AccessRightType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ wyliczeniowy, który <see cref="T:System.Security.AccessControl.RegistrySecurity" /> klasa używana do reprezentowania praw dostępu.</summary>
        <value>A <see cref="T:System.Type" /> obiekt reprezentujący <see cref="T:System.Security.AccessControl.RegistryRights" /> wyliczenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy, które wynikają z <xref:System.Security.AccessControl.ObjectSecurity> klasy zastąpienie <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> właściwość i zwracany typ używają do reprezentowania praw dostępu. Podczas pracy z tablicami lub kolekcje zawierające wiele typów obiektów zabezpieczeń, należy użyć tej właściwości można określić typu wyliczenia poprawne za pomocą każdego obiektu zabezpieczeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AccessRule ^ AccessRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="override this.AccessRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.AccessRule" Usage="registrySecurity.AccessRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference">
          <see cref="T:System.Security.Principal.IdentityReference" /> , Które identyfikują użytkownika lub grupy reguła ma zastosowanie do.</param>
        <param name="accessMask">Bitowa kombinacja <see cref="T:System.Security.AccessControl.RegistryRights" /> prawa dostępu, aby udzielić lub odmówić, określając wartości rzutowany na liczbę całkowitą.</param>
        <param name="isInherited">Wartość logiczna określająca, czy zasada jest dziedziczona.</param>
        <param name="inheritanceFlags">Bitowa kombinacja <see cref="T:System.Security.AccessControl.InheritanceFlags" /> wartości określające, jak reguły jest dziedziczone przez podkluczy.</param>
        <param name="propagationFlags">Bitowa kombinacja <see cref="T:System.Security.AccessControl.PropagationFlags" /> wartości umożliwiające modyfikowanie sposobu, w regule jest dziedziczona przez podkluczy. Znaczenia, jeśli wartość <c>inheritanceFlags</c> jest <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
        <param name="type">Jedną z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości określających, czy uprawnienia są dozwolone lub odrzucane.</param>
        <summary>Tworzy nowe reguły kontroli dostępu dla określonego użytkownika z prawa dostępu określonego, access control i flagi.</summary>
        <returns>A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> obiekt reprezentujący określonego uprawnienia dla określonego użytkownika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zalecany sposób, aby utworzyć zasady kontroli dostępu jest użycie konstruktorów z <xref:System.Security.AccessControl.RegistryAccessRule> klasy.  
  
> [!NOTE]
>  Chociaż można określić <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> Flaga, brak punktu, w tym zakresie. Na potrzeby kontroli dostępu pary nazwa/wartość w podkluczu nie są oddzielne obiekty. Prawa dostępu do par nazwa/wartość są kontrolowane przez prawa podklucza. Ponadto ponieważ wszystkich jego podkluczy są kontenerami (czyli zawierają inne podklucze), nie są narażone na <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flagi. Na koniec, określając <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flagi niepotrzebnie komplikuje konserwacji zasad, ponieważ zakłócać normalne kombinacji reguły zgodne.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, lub <paramref name="type" /> określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="accessMask" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" /> nie jest ani typu <see cref="T:System.Security.Principal.SecurityIdentifier" />, ani nie ma typu, takie jak <see cref="T:System.Security.Principal.NTAccount" /> , można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRuleType : Type" Usage="System.Security.AccessControl.RegistrySecurity.AccessRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ <see cref="T:System.Security.AccessControl.RegistrySecurity" /> klasa używana do reprezentowania reguły dostępu.</summary>
        <value>A <see cref="T:System.Type" /> obiekt reprezentujący <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> klasy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy, które wynikają z <xref:System.Security.AccessControl.ObjectSecurity> klasy zastąpienie <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> właściwość i zwracany typ używają do reprezentowania reguły dostępu. Podczas pracy z tablicami lub kolekcje zawierające wiele typów obiektów zabezpieczeń, należy użyć tej właściwości można określić typu reguły prawidłowy dostęp do użycia z każdego obiektu zabezpieczeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.AddAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">Reguły kontroli dostępu do dodania.</param>
        <summary>Wyszukuje dopasowania kontroli dostępu za pomocą którego można scalić nową regułę. Jeśli nie zostaną znalezione, dodaje nową regułę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> Metoda wyszukuje reguły za pomocą tego samego użytkownika lub grupy i tym samym <xref:System.Security.AccessControl.AccessControlType> jako `rule`. Jeśli nie zostaną znalezione, `rule` zostanie dodany. Jeśli regułę dopasowania zostanie znaleziony, prawa w `rule` są scalane z istniejącą regułę.  
  
 Nie można scalić reguły, jeśli mają one flag różnych dziedziczenia. Na przykład, jeśli użytkownik jest dozwolony dostęp do odczytu bez flag dziedziczenia i <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> służy do dodawania reguły, zapewniając dostęp do zapisu użytkownika za pomocą dziedziczenia dla podkluczy (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>), nie można scalić dwie reguły.  
  
 Zasady z różnymi <xref:System.Security.AccessControl.AccessControlType> wartości nie są scalane.  
  
 Podczas tworzenia reguł ekspresowych praw w najbardziej ekonomiczne rozwiązanie. Na przykład, jeśli użytkownik ma <xref:System.Security.AccessControl.RegistryRights.QueryValues>, <xref:System.Security.AccessControl.RegistryRights.Notify> i <xref:System.Security.AccessControl.RegistryRights.ReadPermissions> praw, a dodać, dzięki czemu reguły <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> praw, użytkownik ma wszystkie części składowe <xref:System.Security.AccessControl.RegistryRights.ReadKey> praw. Po wykonaniu zapytania praw użytkownika, zostanie wyświetlony nadrzędnym reguły <xref:System.Security.AccessControl.RegistryRights.ReadKey> praw. Podobnie jeśli usuniesz <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> praw innych składników <xref:System.Security.AccessControl.RegistryRights.ReadKey> praw pojawi się ponownie.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy reguły dostępu do rejestru i doda je do <xref:System.Security.AccessControl.RegistrySecurity> obiektu, przedstawiający sposób reguły zezwalania i odmowy uprawnień, które pozostaną oddzielne, podczas reguły zgodne z tego samego rodzaju są scalane.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:Microsoft.Win32.RegistryKey> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> i <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 Przykładu kodu, który demonstruje flagi dziedziczenia i propagację znajdują się w <xref:System.Security.AccessControl.RegistryAccessRule> klasy.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAuditRule (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAuditRule : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.AddAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">Zasady inspekcji do dodania. Użytkownik określony przez tę regułę określa wyszukiwania.</param>
        <summary>Wyszukuje zasady inspekcji za pomocą którego można scalić nową regułę. Jeśli nie zostaną znalezione, dodaje nową regułę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> Metoda wyszukiwania dla reguły za pomocą tego samego użytkownika lub grupy jako `rule`. Jeśli nie zostaną znalezione, `rule` zostanie dodany. Jeśli regułę dopasowania zostanie znaleziony, flagi w `rule` są scalane w istniejącą regułę.  
  
 Nie można scalić reguły, jeśli mają one flag różnych dziedziczenia. Na przykład, jeśli nieudanych prób, aby zapisać klucz są poddawane inspekcji dla określonego użytkownika, bez flag dziedziczenia i <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> służy do dodawania reguły, określając, że nieudanych prób, aby zmienić uprawnienia są poddawane inspekcji dla tego samego użytkownika, ale z dziedziczenia dla podklucze (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>), nie można scalić dwie reguły.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AuditRule ^ AuditRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="override this.AuditRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.AuditRule" Usage="registrySecurity.AuditRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference">
          <see cref="T:System.Security.Principal.IdentityReference" /> , Które identyfikują użytkownika lub grupy reguła ma zastosowanie do.</param>
        <param name="accessMask">Bitowa kombinacja <see cref="T:System.Security.AccessControl.RegistryRights" /> prawa dostępu do inspekcji, określając wartości rzutowany na liczbę całkowitą.</param>
        <param name="isInherited">Wartość logiczna określająca, czy zasada jest dziedziczona.</param>
        <param name="inheritanceFlags">Bitowa kombinacja <see cref="T:System.Security.AccessControl.InheritanceFlags" /> wartości określające, jak reguły jest dziedziczone przez podkluczy.</param>
        <param name="propagationFlags">Bitowa kombinacja <see cref="T:System.Security.AccessControl.PropagationFlags" /> wartości umożliwiające modyfikowanie sposobu, w regule jest dziedziczona przez podkluczy. Znaczenia, jeśli wartość <c>inheritanceFlags</c> jest <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
        <param name="flags">Bitowa kombinacja <see cref="T:System.Security.AccessControl.AuditFlags" /> wartości określająca, czy inspekcja dostępu pomyślnych i/lub dostępu nie powiodło się.</param>
        <summary>Tworzy nową regułę inspekcji, określając użytkownika, którego dotyczy reguła, prawa dostępu do inspekcji, dziedziczenie i propagację reguły, a wynik, który wywołuje regułę.</summary>
        <returns>A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> obiekt reprezentujący reguła określonego inspekcji dla określonego użytkownika, przy użyciu określonych flag. Zwracany typ metody jest klasą bazową, <see cref="T:System.Security.AccessControl.AuditRule" />, ale zwracana wartość może być bezpiecznie umieszczona do klasy pochodnej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zalecany sposób tworzenia zasad inspekcji jest użycie konstruktorów z <xref:System.Security.AccessControl.RegistryAuditRule> klasy.  
  
> [!NOTE]
>  Chociaż można określić <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> Flaga, brak punktu, w tym zakresie. Do celów inspekcji kontrola pary nazwa/wartość w podkluczu nie są oddzielne obiekty. Prawa inspekcji do par nazwa/wartość są kontrolowane przez prawa podklucza. Ponadto ponieważ wszystkich jego podkluczy są kontenerami (czyli zawierają inne podklucze), nie są narażone na <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flagi. Na koniec, określając <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flagi niepotrzebnie komplikuje konserwacji zasad, ponieważ zakłócać normalne kombinacji reguły zgodne.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, lub <paramref name="flags" /> określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="accessMask" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" /> nie jest ani typu <see cref="T:System.Security.Principal.SecurityIdentifier" />, ani nie ma typu, takie jak <see cref="T:System.Security.Principal.NTAccount" /> , można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AuditRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AuditRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuditRuleType : Type" Usage="System.Security.AccessControl.RegistrySecurity.AuditRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ <see cref="T:System.Security.AccessControl.RegistrySecurity" /> klasa używana do reprezentowania zasady inspekcji.</summary>
        <value>A <see cref="T:System.Type" /> obiekt reprezentujący <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> klasy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy, które wynikają z <xref:System.Security.AccessControl.ObjectSecurity> klasy zastąpienie <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> właściwość i zwracany typ używają do reprezentowania uprawnień inspekcji. Podczas pracy z tablicami lub kolekcje zawierające wiele typów obiektów zabezpieczeń, użyj tej właściwości, aby określić typ reguły poprawne inspekcji za pomocą każdego obiektu zabezpieczeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAccessRule (rule As RegistryAccessRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; bool" Usage="registrySecurity.RemoveAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> użytkownika, który określa i <see cref="T:System.Security.AccessControl.AccessControlType" /> wyszukiwanie i zestaw dziedziczenia i propagację flag, które pasującej reguły, jeśli znaleziono, musi być zgodny z. Określa, że prawa do usunięcia z niezgodne reguły, jeśli znaleziono.</param>
        <summary>Wyszukuje reguły kontroli dostępu przy użyciu tego samego użytkownika i <see cref="T:System.Security.AccessControl.AccessControlType" /> (Zezwalaj lub Odmów) jako reguła dostępu określonego oraz zgodne dziedziczenia i flagi propagacji; Jeśli zostanie znaleziona taka reguła, prawa zawarte w tej regule określonego dostępu z niego usuwane .</summary>
        <returns>
          <see langword="true" /> Jeśli zostanie znaleziona zgodna reguła; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżący <xref:System.Security.AccessControl.RegistrySecurity> połączenie jest wyszukiwane na regułę, która ma ten sam użytkownik i tym samym <xref:System.Security.AccessControl.AccessControlType> wartość jako `rule`. Jeśli takie reguła nie zostanie znaleziony, nie podjęto żadnej akcji, a następnie zwraca metoda `false`. Jeśli zostaną znalezione dopasowania zasad, ich flagi dziedziczenia i zgodności są sprawdzane pod kątem zgodności z flag określonych we `rule`. Jeśli żadna zgodna reguła zostanie znaleziony, nie podjęto żadnej akcji i metoda zwraca `false`. Jeśli zostanie znaleziony regułę za pomocą flagi zgodne, prawa określone w `rule` są usuwane z niezgodne reguły, a metoda zwraca `true`. Jeśli `rule` określa prawa, nie jest zawarta w regule zgodne, zostanie podjęta żadna akcja w odniesieniu do tych praw. Jeśli wszelkie prawa, które zostaną usunięte z niezgodne reguły, cały reguła jest usuwana z bieżącego <xref:System.Security.AccessControl.RegistrySecurity> obiektu.  
  
   
  
## Examples  
 Poniższy kod przedstawia przykład sposób, w jaki <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> metoda usuwa praw niezgodne reguły oraz sposób, w jaki <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> metoda scala prawa z reguły zgodne.  
  
 W przykładzie jest tworzony <xref:System.Security.AccessControl.RegistrySecurity> obiektu i dodaje regułę, która umożliwia użytkownikowi <xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType> praw. Przykład tworzy następnie regułę, która udziela użytkownikowi <xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>z tego samego dziedziczenia i prawa propagacji jako pierwszą regułę, a następnie używa <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> metodę, aby usunąć z tej nowej reguły z <xref:System.Security.AccessControl.RegistrySecurity> obiektu. <xref:System.Security.AccessControl.RegistryRights.SetValue> jest składnikiem <xref:System.Security.AccessControl.RegistryRights.ReadKey>, więc zostanie ono usunięte z reguły zgodne. Reguły w <xref:System.Security.AccessControl.RegistrySecurity> obiektu są wyświetlane, przedstawiający pozostałych składników <xref:System.Security.AccessControl.RegistryRights.ReadKey>.  
  
 Przykładowy kod wywołuje <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> metodę, aby scalić <xref:System.Security.AccessControl.RegistryRights.SetValue> kliknij prawym przyciskiem myszy, wróć do reguły w <xref:System.Security.AccessControl.RegistrySecurity> obiektu.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:Microsoft.Win32.RegistryKey> obiektu. Drugi przykład w tej sekcji dołącza obiektu zabezpieczeń, dzięki czemu przykłady <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleAll (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleAll(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleAll : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.RemoveAccessRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> użytkownika, który określa i <see cref="T:System.Security.AccessControl.AccessControlType" /> do wyszukania. Wszelkie prawa, flagi dziedziczenia lub flagi propagacji określone przez tę regułę są ignorowane.</param>
        <summary>Wyszukuje wszystkie dostępu zasady kontroli przy użyciu tego samego użytkownika i <see cref="T:System.Security.AccessControl.AccessControlType" /> (Zezwalaj lub Odmów) jako określonej reguły i, jeśli znaleziono usuwa je.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżący <xref:System.Security.AccessControl.RegistrySecurity> połączenie jest wyszukiwane na reguły, które mają ten sam użytkownik i tym samym <xref:System.Security.AccessControl.AccessControlType> wartość jako `rule`. Wszelkie prawa, flagi dziedziczenia lub flagi propagacji określony przez `rule` są ignorowane, podczas wykonywania tego wyszukiwania. Jeśli nie zostaną znalezione nie reguł dopasowania, nie podjęto żadnej akcji.  
  
 Na przykład, jeśli użytkownik ma wiele reguł zezwalających na różne prawa z różnych dziedziczenia i flagi propagacji, możesz usunąć te reguły, tworząc <xref:System.Security.AccessControl.RegistryAccessRule> obiekt, który określa użytkownika i <xref:System.Security.AccessControl.AccessControlType.Allow?displayProperty=nameWithType>z dowolnego praw i flag i przekazanie tej reguły, aby <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, że <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> metoda spowoduje usunięcie wszystkich reguł, które odpowiadają użytkownika i <xref:System.Security.AccessControl.AccessControlType>, ignorowanie praw i flagi.  
  
 W przykładzie jest tworzony <xref:System.Security.AccessControl.RegistrySecurity> obiektu i dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika, przy użyciu różnych flag dziedziczenia i propagacji. Przykład tworzy następnie nową regułę, która umożliwia użytkownikowi, przejęcie na własność i przekazuje tej reguły, aby <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> metodę, aby usunąć dwie reguły, które umożliwiają dostęp.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:Microsoft.Win32.RegistryKey> obiektu. Zobacz <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metody i <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleSpecific (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleSpecific(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleSpecific : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.RemoveAccessRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> Do usunięcia.</param>
        <summary>Wyszukuje reguły kontroli dostępu, który dokładnie pasuje do określonej reguły i, jeśli znaleziono i usuwa go.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reguła zostanie usunięta tylko wtedy, gdy jest to dokładnie odpowiada `rule` wszystkie szczegółowe informacje, w tym flag. Inne zasady przy użyciu tego samego użytkownika i <xref:System.Security.AccessControl.AccessControlType> nie ulegają zmianom.  
  
> [!IMPORTANT]
>  Reguła reprezentuje jeden lub więcej podstawowych wpisów kontroli dostępu (ACE), a te wpisy są dzielenia lub łączone zgodnie z potrzebami, podczas modyfikowania zasad bezpieczeństwa dostępu dla użytkownika. W związku z tym, reguła może już nie istnieć w określonej formy był wykorzystywany podczas dodawania go, a w tym przypadku <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> metody nie można go usunąć.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, że <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> metoda usuwa regułę tylko wtedy, gdy jest on zgodny dokładnie.  
  
 Ten przykład tworzy dwie reguły, które umożliwiają inne prawa. Reguły jest zgodny dziedziczenia i propagację, dlatego po dodaniu drugiej reguły łączy się z pierwszym. Przykład wywołuje <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> metody, określając pierwszej reguły, ale ponieważ reguły są łączone ze sobą nie istnieje żadna reguła, która jest zgodna. Przykład następnie wywołuje <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> metody do usuwania drugiej reguły z scalonych reguły, a na koniec wywołania <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> metodę, aby usunąć pierwszą regułę.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:Microsoft.Win32.RegistryKey> obiektu. Zobacz <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metody i <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAuditRule (rule As RegistryAuditRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRule : System.Security.AccessControl.RegistryAuditRule -&gt; bool" Usage="registrySecurity.RemoveAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> określający użytkownika, aby wyszukać i zestaw dziedziczenia i propagację flagi, które pasującej reguły, jeśli znaleziono, musi być zgodny z. Określa, że prawa do usunięcia z niezgodne reguły, jeśli znaleziono.</param>
        <summary>Wyszukuje reguły kontroli inspekcji przy użyciu tego samego użytkownika określoną regułą oraz zgodne dziedziczenia i flagi propagacji; Jeśli zostanie znaleziona zgodna reguła, prawa zawarte w określonej reguły są usuwane z niego.</summary>
        <returns>
          <see langword="true" /> Jeśli zostanie znaleziona zgodna reguła; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżący <xref:System.Security.AccessControl.RegistrySecurity> połączenie jest wyszukiwane na regułę inspekcji, który ma tego samego użytkownika `rule`. Jeśli takie reguła nie zostanie znaleziony, nie podjęto żadnej akcji, a następnie zwraca metoda `false`. Jeśli zostaną znalezione dopasowania zasad, ich flagi dziedziczenia i zgodności są sprawdzane pod kątem zgodności z flag określonych we `rule`. Jeśli żadna zgodna reguła zostanie znaleziony, nie podjęto żadnej akcji i metoda zwraca `false`. Jeśli zostanie znaleziony regułę za pomocą flagi zgodne, prawa określone w `rule` są usuwane z niezgodne reguły, a metoda zwraca `true`. Jeśli `rule` określa prawa, nie jest zawarta w regule zgodne, zostanie podjęta żadna akcja w odniesieniu do tych praw. Jeśli wszelkie prawa, które zostaną usunięte z niezgodne reguły, cały reguła jest usuwana z bieżącego <xref:System.Security.AccessControl.RegistrySecurity> obiektu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleAll (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleAll(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleAll : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.RemoveAuditRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> określający użytkownika do wyszukania. Wszelkie prawa, flagi dziedziczenia lub flagi propagacji określone przez tę regułę są ignorowane.</param>
        <summary>Przeszukuje wszystkie inspekcji reguły za pomocą tego samego użytkownika określoną regułą i, jeśli znaleziono, usuwa je.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżący <xref:System.Security.AccessControl.RegistrySecurity> połączenie jest wyszukiwane na reguły inspekcji, które mają tego samego użytkownika `rule`. Wszelkie prawa, flagi dziedziczenia lub flagi propagacji określony przez `rule` są ignorowane, podczas wykonywania tego wyszukiwania. Jeśli nie zostaną znalezione nie reguł dopasowania, nie podjęto żadnej akcji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleSpecific (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleSpecific(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleSpecific : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.RemoveAuditRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> Do usunięcia.</param>
        <summary>Wyszukuje zasady inspekcji, który dokładnie pasuje do określonej reguły i, jeśli znaleziono i usuwa go.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reguła zostanie usunięta tylko wtedy, gdy jest to dokładnie odpowiada `rule` wszystkie szczegółowe informacje, w tym flag. Nie wpływa na inne zasady inspekcji dla tego użytkownika.  
  
> [!IMPORTANT]
>  Reguła reprezentuje jeden lub więcej podstawowych wpisów kontroli dostępu (ACE), a te wpisy są dzielenia lub łączone zgodnie z potrzebami, podczas modyfikowania zasad zabezpieczeń inspekcji dla użytkownika. W związku z tym, reguła może już nie istnieć w określonej formy był wykorzystywany podczas dodawania go, a w tym przypadku <xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A> metody nie można go usunąć.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.ResetAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.ResetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> Do dodania. Użytkownik określony przez tę regułę określa reguły Aby usunąć przed dodaniem tej reguły.</param>
        <summary>Usuwa wszystkie zasady kontroli dostępu przy użyciu tego samego użytkownika określoną regułą, niezależnie od tego <see cref="T:System.Security.AccessControl.AccessControlType" />, a następnie dodaje określoną regułą.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli brak reguł dostępu użytkownika, którego pasuje do określonej reguły `rule` zostanie dodany.  
  
   
  
## Examples  
 Poniższy kod przedstawia przykładowy sposób, w jaki <xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> metoda zastępuje wszystkie reguły dla zgodnego użytkownika przy użyciu reguły określone dla dopasowania.  
  
 W przykładzie jest tworzony <xref:System.Security.AccessControl.RegistrySecurity> obiektu i dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika, przy użyciu różnych flag dziedziczenia i propagacji. Przykład tworzy następnie nową regułę, która zezwala na bieżący użytkownik tylko do odczytu klucza i wykorzystuje <xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> metodę, aby usunąć wszystkie reguły dla użytkownika i zastąp je nową regułę.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:Microsoft.Win32.RegistryKey> obiektu. Zobacz <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metody i <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.SetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> Do dodania. Użytkownik i <see cref="T:System.Security.AccessControl.AccessControlType" /> tej reguły można określić reguły Aby usunąć przed dodaniem tej reguły.</param>
        <summary>Z tego samego użytkownika spowoduje usunięcie wszystkich reguł kontroli dostępu i <see cref="T:System.Security.AccessControl.AccessControlType" /> (Zezwalaj lub Odmów) jako określoną regułę, a następnie dodaje określoną regułą.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ma określoną regułą <xref:System.Security.AccessControl.AccessControlType.Allow>, ta metoda powoduje usunięcie wszystkich <xref:System.Security.AccessControl.AccessControlType.Allow> reguły dla określonego użytkownika, zastępując je z określoną regułą. Jeśli ma określoną regułą <xref:System.Security.AccessControl.AccessControlType.Deny>, wszystkie <xref:System.Security.AccessControl.AccessControlType.Deny> reguły dla określonego użytkownika są zastępowane określoną regułą.  
  
 Jeśli brak reguł użytkownika, którego i <xref:System.Security.AccessControl.AccessControlType> zgodna z określoną regułą `rule` zostanie dodany.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, że <xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> metoda spowoduje usunięcie wszystkich reguł, które odpowiadają zarówno wobec użytkownika i <xref:System.Security.AccessControl.AccessControlType> z `rule`, ignorowanie praw i flag i zastępuje je za pomocą `rule`.  
  
 W przykładzie jest tworzony <xref:System.Security.AccessControl.RegistrySecurity> obiektu i dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika, przy użyciu różnych flag dziedziczenia i propagacji. Przykład tworzy następnie nową regułę, która zezwala na bieżący użytkownik tylko do odczytu klucza i wykorzystuje <xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> metody, aby usunąć dwie reguły, które umożliwiają dostęp i zastąp je nową regułę. Nie dotyczy reguła, która nie zezwala na dostęp.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:Microsoft.Win32.RegistryKey> obiektu. Zobacz <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metody i <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAuditRule (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAuditRule : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.SetAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> Do dodania. Użytkownik określony przez tę regułę określa reguły Aby usunąć przed dodaniem tej reguły.</param>
        <summary>Usuwa wszystkie reguły za pomocą tego samego użytkownika określoną regułą inspekcji, niezależnie od wartości <see cref="T:System.Security.AccessControl.AuditFlags" /> wartości, a następnie dodaje określoną regułą.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie zasady inspekcji użytkownika, którego pasuje do określonej reguły `rule` zostanie dodany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>