<Type Name="RegistrySecurity" FullName="System.Security.AccessControl.RegistrySecurity">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e52f3b248c05ba047d59c24d923733a12bfa7839" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30567757" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RegistrySecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistrySecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistrySecurity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistrySecurity&#xA;Inherits NativeObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistrySecurity sealed : System::Security::AccessControl::NativeObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje zabezpieczenia kontroli dostępu do systemu Windows dla klucza rejestru. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Security.AccessControl.RegistrySecurity> obiektu określa prawa dostępu do klucza rejestru oraz określa, jak są poddawane inspekcji prób dostępu. Prawa dostępu do klucza rejestru są wyrażane jako reguł, z dostępu reprezentowany przez <xref:System.Security.AccessControl.RegistryAccessRule> obiektu. Każda reguła inspekcji jest reprezentowana przez <xref:System.Security.AccessControl.RegistryAuditRule> obiektu.  
  
 Odzwierciedla to podstawowy system zabezpieczeń systemu Windows, w którym każdy zabezpieczanego obiektu ma co najwyżej jeden poufnej listy kontroli dostępu (DACL), że kontroluje dostęp do bezpiecznego obiektu i co najwyżej jeden system listy kontroli dostępu (SACL) określająca, do których dostęp prób są poddawane inspekcji. Listy DACL i SACL są uporządkowane listy wpisów kontroli dostępu (ACE), które określają dostępu i inspekcji dla użytkowników i grup. A <xref:System.Security.AccessControl.RegistryAccessRule> lub <xref:System.Security.AccessControl.RegistryAuditRule> object może reprezentować więcej niż jednego wpisu kontroli dostępu.  
  
> [!NOTE]
>  Kontrolę dostępu systemu Windows można zastosować tylko do kluczy rejestru. Nie można zastosować do pary poszczególnych klucz/wartość przechowywanych w kluczu.  
  
 <xref:System.Security.AccessControl.RegistrySecurity>, <xref:System.Security.AccessControl.RegistryAccessRule>, I <xref:System.Security.AccessControl.RegistryAuditRule> klasy Ukryj szczegóły implementacji wpisów ACE i listy kontroli dostępu. Umożliwiają one Ignoruj siedemnaście różne typy ACE i złożoność poprawnie obsługi dziedziczenia i propagacji praw dostępu. Te obiekty są również zaprojektowana tak, aby zapobiec następujące typowe błędy kontroli dostępu:  
  
-   Tworzenie deskryptora zabezpieczeń z listy DACL wartości null. Odwołanie o wartości null do listy DACL umożliwia dowolnym użytkownikom dodawanie reguły dostępu do obiektu, potencjalnie tworzenie ataku typu "odmowa usługi". Nowy <xref:System.Security.AccessControl.RegistrySecurity> obiektu zawsze rozpoczyna się od pusty listy DACL, która nie zezwala na dostęp dla wszystkich użytkowników.  
  
-   Naruszenie canonical kolejność ACE. Lista ACE w listy DACL nie jest przechowywany w Porządek kanoniczny, użytkownicy mogą przypadkowo uzyskać dostęp do zabezpieczonego obiektu. Na przykład prawa dostępu odmowy zawsze musi występować przed dozwolone uprawnienia. <xref:System.Security.AccessControl.RegistrySecurity> obiekty wewnętrznie Obsługa właściwej kolejności.  
  
-   Manipulowanie flagi deskryptora zabezpieczeń, które powinny być pod kontrolą Menedżera zasobów tylko.  
  
-   Tworzenie nieprawidłową kombinację flag ACE.  
  
-   Manipulowanie ACE dziedziczone. Dziedziczenie i propagacji są obsługiwane przez Menedżera zasobów w odpowiedzi na zmiany wprowadzone do reguł dostępu i inspekcji.  
  
-   Wstawianie znaczenia wpisy kontroli dostępu do listy kontroli dostępu.  
  
 Tylko funkcje nie są obsługiwane przez obiekty zabezpieczeń .NET są niebezpieczne działania, które należy unikać przez większość deweloperów aplikacji, takie jak następujące:  
  
-   Zadania niskiego poziomu, które są wykonywane zwykle przez Menedżera zasobów.  
  
-   Dodawanie lub usuwanie wpisów kontroli dostępu w sposób, w którym nie obsługują canonical porządkowania.  
  
 Aby zmodyfikować Windows kontrolę dostępu do klucza rejestru, użyj <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metodę, aby pobrać <xref:System.Security.AccessControl.RegistrySecurity> obiektu. Zmodyfikuj obiekt zabezpieczeń przez dodawanie i usuwanie reguł, a następnie użyć <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metodę, aby dołączyć go ponownie.  
  
> [!IMPORTANT]
>  Zmiany wprowadzane do <xref:System.Security.AccessControl.RegistrySecurity> obiektu nie wpływają na poziomy dostępu do klucza rejestru do czasu wywołania <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metody można przypisać obiektu zmieniony zabezpieczeń do klucza rejestru.  
  
 Aby skopiować kontrolę dostępu z jednego klucza do innego, należy użyć <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metodę, aby pobrać <xref:System.Security.AccessControl.RegistrySecurity> obiekt reprezentujący reguł dostępu i inspekcji dla pierwszego klucza rejestru, a następnie użyj <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metodę przypisania tych reguł Drugi klucz rejestru. Można także przypisać zasady do drugiego klucza rejestru o <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=nameWithType> lub <xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=nameWithType> metody pobierającej <xref:System.Security.AccessControl.RegistrySecurity> obiekt parametru.  
  
 Użytkownicy z inwestycji w definicji deskryptora zabezpieczeń w języku (SDDL) można używać <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> metodę, aby ustawić klucz rejestru, zasady dostępu i <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> metodę, aby uzyskać ciąg reprezentujący format SDDL reguły dostępu. Nie jest to zalecane w przypadku nowych wdrożeń.  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. W pierwszym przykładzie jak zgodne scalania reguł podczas dodawane i usuwane, a drugi przedstawia wpływ flagi dziedziczenia i propagacji dodawania i usuwania reguł.  
  
 Przykład 1  
  
 Poniższy kod przedstawia przykład sposób <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> metoda usuwa prawa niezgodne reguły i jak <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> metody scala praw przy użyciu reguł zgodne.  
  
 W przykładzie jest tworzony <xref:System.Security.AccessControl.RegistrySecurity> obiektu i dodaje regułę, która umożliwia użytkownikowi <xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType> praw. Przykład następnie tworzy regułę, która udziela użytkownikowi <xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>, z tego samego dziedziczenia i prawa propagacji jako pierwsza reguła i używa <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> metody, aby usunąć tę regułę nowego z <xref:System.Security.AccessControl.RegistrySecurity> obiektu. <xref:System.Security.AccessControl.RegistryRights.SetValue> składnik jest <xref:System.Security.AccessControl.RegistryRights.ReadKey>, więc zostanie ono usunięte z niezgodne reguły. Reguły w <xref:System.Security.AccessControl.RegistrySecurity> obiektu są wyświetlone pozostałych składników <xref:System.Security.AccessControl.RegistryRights.ReadKey>.  
  
 Przykładowy kod wywołuje <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> sposób scalania <xref:System.Security.AccessControl.RegistryRights.SetValue> prawo do reguły w <xref:System.Security.AccessControl.RegistrySecurity> obiektu.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:Microsoft.Win32.RegistryKey> obiektu. Drugi przykład w tej sekcji dołącza obiektu zabezpieczeń, dzięki czemu przykładów <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> i <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 Przykład 2  
  
 Poniższy przykład kodu pokazuje reguły dostępu z dziedziczenia i propagacji. W przykładzie jest tworzony <xref:System.Security.AccessControl.RegistrySecurity> obiekt, tworzy i dodaje dwie reguły, które mają <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flagi. Pierwsza reguła ma żadnych flag propagacji, podczas gdy druga <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> i <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.  
  
 Program wyświetla reguły w <xref:System.Security.AccessControl.RegistrySecurity> obiektu, a następnie używa <xref:System.Security.AccessControl.RegistrySecurity> obiekt, aby utworzyć podklucz. Program tworzy element podrzędny podklucz i podklucz podwójnym, a następnie wyświetla każdy zabezpieczeń. Ponadto program usuwa klucze testu.  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistrySecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistrySecurity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.RegistrySecurity" /> z domyślnymi wartościami.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nowy <xref:System.Security.AccessControl.RegistrySecurity> obiektu zawsze rozpoczyna się od listy pusty dostępu (DACL), która nie zezwala na dostęp dla wszystkich użytkowników.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AccessRightType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRightType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRightType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ wyliczenia, które <see cref="T:System.Security.AccessControl.RegistrySecurity" /> klasa używana do reprezentowania praw dostępu.</summary>
        <value>A <see cref="T:System.Type" /> reprezentujący obiekt <see cref="T:System.Security.AccessControl.RegistryRights" /> wyliczenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy, które pochodzą z <xref:System.Security.AccessControl.ObjectSecurity> klasy zastąpienie <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> właściwości i zwracany typ przejdą do reprezentowania praw dostępu. Podczas pracy z tablicą lub kolekcje zawierające wiele typów obiektów zabezpieczeń, używają tej właściwości można określić typu wyliczenia poprawne korzystać z każdego obiektu zabezpieczeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AccessRule ^ AccessRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference">
          <see cref="T:System.Security.Principal.IdentityReference" /> , Które identyfikują użytkownik lub grupa reguła dotyczy.</param>
        <param name="accessMask">Bitowe połączenie <see cref="T:System.Security.AccessControl.RegistryRights" /> wartości określających prawa dostępu do dozwolonych lub zablokowanych, rzutowania na liczbę całkowitą.</param>
        <param name="isInherited">Określanie, czy reguła jest dziedziczona wartość logiczna.</param>
        <param name="inheritanceFlags">Bitowe połączenie <see cref="T:System.Security.AccessControl.InheritanceFlags" /> wartości określające, jak reguły są dziedziczone przez podkluczy.</param>
        <param name="propagationFlags">Bitowe połączenie <see cref="T:System.Security.AccessControl.PropagationFlags" /> wartości modyfikujące sposób reguła jest dziedziczona przez podkluczy. Jeśli ta nie ma znaczenia wartości <c>inheritanceFlags</c> jest <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
        <param name="type">Jeden z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości określający, czy prawa zezwolono na dostęp lub odmowa dostępu.</param>
        <summary>Tworzy nową regułę kontroli dostępu dla określonego użytkownika z określonego uprawnienia kontroli dostępu i flagi.</summary>
        <returns>A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> obiekt reprezentujący określonego uprawnienia dla określonego użytkownika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zalecanym sposobem tworzenia zasad kontroli dostępu jest użycie konstruktorów <xref:System.Security.AccessControl.RegistryAccessRule> klasy.  
  
> [!NOTE]
>  Mimo że można określić <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> Flaga, nie ma żadnych punktu w ten sposób. Na potrzeby kontroli dostępu pary nazwa/wartość w podkluczu, nie są oddzielnych obiektów. Prawa dostępu do par nazwa/wartość są kontrolowane przez prawa podklucza. Ponadto ponieważ wszystkich jego podkluczy są kontenerami (to znaczy zawierają inne podklucze), nie jest narażony na <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flagi. Na koniec, określając <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flagi niepotrzebnie komplikuje konserwacji zasad, ponieważ zakłócać normalnej kombinację niezgodne reguły.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, lub <paramref name="type" /> określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="accessMask" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" /> nie jest ani typu <see cref="T:System.Security.Principal.SecurityIdentifier" />, ani typu, takich jak <see cref="T:System.Security.Principal.NTAccount" /> którego można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRuleType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ, który <see cref="T:System.Security.AccessControl.RegistrySecurity" /> klasa używana do reprezentowania zasad dostępu.</summary>
        <value>A <see cref="T:System.Type" /> reprezentujący obiekt <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> klasy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy, które pochodzą z <xref:System.Security.AccessControl.ObjectSecurity> klasy zastąpienie <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> właściwości i zwracany typ przejdą do reprezentowania zasad dostępu. Podczas pracy z tablicą lub kolekcje zawierające wiele typów obiektów zabezpieczeń, używają tej właściwości można określić typu reguły dostępu do użycia z każdego obiektu zabezpieczeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">Reguła kontroli dostępu do dodania.</param>
        <summary>Wyszukiwanie zgodnych kontroli dostępu, z którego można by scalić nowej reguły. Jeśli żaden nie zostaną znalezione, dodaje nową regułę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> Metoda szuka reguły z tego samego użytkownika lub grupy i tym samym <xref:System.Security.AccessControl.AccessControlType> jako `rule`. Jeśli żaden nie zostaną znalezione, `rule` został dodany. Jeśli reguła dopasowywania zostanie znaleziony, prawa w `rule` są łączone z istniejącą regułą.  
  
 Nie można scalić reguły, jeśli mają flagi dziedziczenia różnych. Na przykład, jeśli użytkownik jest dozwolony dostęp do odczytu bez flag dziedziczenia i <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> służy do dodawania reguła określająca zapisu użytkownika z dziedziczenia dla podkluczy (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>), nie można scalić dwóch reguł.  
  
 Zasady z różnymi <xref:System.Security.AccessControl.AccessControlType> wartości nie są scalane.  
  
 Reguły express praw w najbardziej ekonomiczne rozwiązanie. Na przykład, jeśli użytkownik ma <xref:System.Security.AccessControl.RegistryRights.QueryValues>, <xref:System.Security.AccessControl.RegistryRights.Notify> i <xref:System.Security.AccessControl.RegistryRights.ReadPermissions> prawa i Dodaj reguły, umożliwiając <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> praw, użytkownik ma wszystkie elementy składowe <xref:System.Security.AccessControl.RegistryRights.ReadKey> praw. Po wykonaniu zapytania praw użytkownika, pojawi się reguły zawierający <xref:System.Security.AccessControl.RegistryRights.ReadKey> praw. Podobnie jeśli usuniesz <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> praw innych składników <xref:System.Security.AccessControl.RegistryRights.ReadKey> praw pojawi się ponownie.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy reguły dostępu do rejestru i dodaje je do <xref:System.Security.AccessControl.RegistrySecurity> są scalane obiektu przedstawiający sposób reguły zezwalania i odmowy uprawnień oddzielana, podczas reguły zgodne z tego samego rodzaju.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:Microsoft.Win32.RegistryKey> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> i <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 Przykładowy kod, który demonstruje flagi dziedziczenia i propagacji znajdują się w <xref:System.Security.AccessControl.RegistryAccessRule> klasy.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAuditRule (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">Reguła inspekcji, aby dodać. Użytkownik określony przez tę regułę określa wyszukiwania.</param>
        <summary>Wyszukuje reguła inspekcji, z którego można by scalić nowej reguły. Jeśli żaden nie zostaną znalezione, dodaje nową regułę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> Metody wyszukuje reguły z tego samego użytkownika lub grupy jako `rule`. Jeśli żaden nie zostaną znalezione, `rule` został dodany. Jeśli reguła dopasowywania zostanie znaleziony, flagi w `rule` są scalane w istniejącą regułę.  
  
 Nie można scalić reguły, jeśli mają flagi dziedziczenia różnych. Na przykład, jeśli nieudanych prób do zapisu klucza są poddawane inspekcji dla danego użytkownika, bez flag dziedziczenia i <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> służy do dodawania reguły określenie, czy nieudanych prób, aby zmienić uprawnienia są określane przez jednego użytkownika, ale z dziedziczenia dla podklucze (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>), nie można scalić dwóch reguł.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AuditRule ^ AuditRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference">
          <see cref="T:System.Security.Principal.IdentityReference" /> , Które identyfikują użytkownik lub grupa reguła dotyczy.</param>
        <param name="accessMask">Bitowe połączenie <see cref="T:System.Security.AccessControl.RegistryRights" /> wartości określających prawa dostępu do inspekcji, rzutowania na liczbę całkowitą.</param>
        <param name="isInherited">Określanie, czy reguła jest dziedziczona wartość logiczna.</param>
        <param name="inheritanceFlags">Bitowe połączenie <see cref="T:System.Security.AccessControl.InheritanceFlags" /> wartości określające, jak reguły są dziedziczone przez podkluczy.</param>
        <param name="propagationFlags">Bitowe połączenie <see cref="T:System.Security.AccessControl.PropagationFlags" /> wartości modyfikujące sposób reguła jest dziedziczona przez podkluczy. Jeśli ta nie ma znaczenia wartości <c>inheritanceFlags</c> jest <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
        <param name="flags">Bitowe połączenie <see cref="T:System.Security.AccessControl.AuditFlags" /> wartości określająca, czy inspekcji pomyślnego dostępu i dostępu nie powiodło się.</param>
        <summary>Tworzy nową regułę inspekcji, określając użytkownika, którego dotyczy reguła, prawa dostępu do inspekcji, dziedziczenia i propagacji reguły i wynik, które wyzwala reguły.</summary>
        <returns>A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> obiekt reprezentujący reguła określonego inspekcji dla określonego użytkownika przy użyciu określonych flag. Klasa podstawowa jest zwracany typ metody <see cref="T:System.Security.AccessControl.AuditRule" />, ale wartość zwracaną mogą bezpiecznie rzutowane do klasy pochodnej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zalecanym sposobem tworzenia zasady inspekcji jest użycie konstruktorów <xref:System.Security.AccessControl.RegistryAuditRule> klasy.  
  
> [!NOTE]
>  Mimo że można określić <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> Flaga, nie ma żadnych punktu w ten sposób. Na potrzeby kontroli inspekcji pary nazwa/wartość w podkluczu, nie są oddzielnych obiektów. Prawa inspekcji do par nazwa/wartość są kontrolowane przez prawa podklucza. Ponadto ponieważ wszystkich jego podkluczy są kontenerami (to znaczy zawierają inne podklucze), nie jest narażony na <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flagi. Na koniec, określając <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flagi niepotrzebnie komplikuje konserwacji zasad, ponieważ zakłócać normalnej kombinację niezgodne reguły.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, lub <paramref name="flags" /> określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" /> jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="accessMask" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" /> nie jest ani typu <see cref="T:System.Security.Principal.SecurityIdentifier" />, ani typu, takich jak <see cref="T:System.Security.Principal.NTAccount" /> którego można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AuditRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AuditRuleType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ, który <see cref="T:System.Security.AccessControl.RegistrySecurity" /> klasa używana do reprezentowania zasad inspekcji.</summary>
        <value>A <see cref="T:System.Type" /> reprezentujący obiekt <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> klasy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy, które pochodzą z <xref:System.Security.AccessControl.ObjectSecurity> klasy zastąpienie <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> właściwości i zwracany typ przejdą do reprezentowania prawa inspekcji. Podczas pracy z tablicą lub kolekcje zawierające wiele typów obiektów zabezpieczeń, używają tej właściwości można określić typu reguły poprawne inspekcji do użycia z każdego obiektu zabezpieczeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAccessRule (rule As RegistryAccessRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> użytkownik, który określa i <see cref="T:System.Security.AccessControl.AccessControlType" /> do wyszukiwania i zestaw dziedziczenia i propagacji flag, które pasujący do reguły, jeśli znaleziono, musi być zgodny z. Określa, że uprawnienia do usunięcia z niezgodne reguły, jeśli znaleziono.</param>
        <summary>Wyszukuje reguły kontroli dostępu z tego samego użytkownika i <see cref="T:System.Security.AccessControl.AccessControlType" /> (zezwalania lub odmowy) jako reguła dostępu określonego oraz zgodne dziedziczenia i flagi propagacji; jeśli taka reguła zostanie znaleziony, prawa zawarte w tej regule dostępu określonego są usuwane z jego .</summary>
        <returns>
          <see langword="true" /> Jeśli zostanie znaleziony zgodne reguły; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżący <xref:System.Security.AccessControl.RegistrySecurity> jest wyszukiwany regułę, która ma ten sam użytkownik i tym samym <xref:System.Security.AccessControl.AccessControlType> wartość jako `rule`. Jeśli takie reguła nie zostanie znaleziony, nie podjęto żadnej akcji i metoda zwraca `false`. W przypadku znalezienia pasujących reguł ich flagi dziedziczenia i zgodności są sprawdzane pod kątem zgodności z flag określonych we `rule`. Jeśli zostanie znaleziony nie niezgodne reguły, nie podjęto żadnej akcji, a metoda zwraca `false`. Jeśli znaleziono reguły z flagami zgodne, prawa określone w `rule` są usuwane z niezgodne reguły, a metoda zwraca `true`. Jeśli `rule` określa prawa nie zawiera niezgodne reguły, nie podjęto żadnej akcji w odniesieniu do tych praw. Jeśli wszystkie prawa są usuwane z niezgodne reguły, cały reguła jest usuwana z bieżącego <xref:System.Security.AccessControl.RegistrySecurity> obiektu.  
  
   
  
## Examples  
 Poniższy kod przedstawia przykład sposób <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> metoda usuwa prawa niezgodne reguły i jak <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> metody scala praw przy użyciu reguł zgodne.  
  
 W przykładzie jest tworzony <xref:System.Security.AccessControl.RegistrySecurity> obiektu i dodaje regułę, która umożliwia użytkownikowi <xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType> praw. Przykład następnie tworzy regułę, która udziela użytkownikowi <xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>, z tego samego dziedziczenia i prawa propagacji jako pierwsza reguła i używa <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> metody, aby usunąć tę regułę nowego z <xref:System.Security.AccessControl.RegistrySecurity> obiektu. <xref:System.Security.AccessControl.RegistryRights.SetValue> składnik jest <xref:System.Security.AccessControl.RegistryRights.ReadKey>, więc zostanie ono usunięte z niezgodne reguły. Reguły w <xref:System.Security.AccessControl.RegistrySecurity> obiektu są wyświetlone pozostałych składników <xref:System.Security.AccessControl.RegistryRights.ReadKey>.  
  
 Przykładowy kod wywołuje <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> sposób scalania <xref:System.Security.AccessControl.RegistryRights.SetValue> prawo do reguły w <xref:System.Security.AccessControl.RegistrySecurity> obiektu.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:Microsoft.Win32.RegistryKey> obiektu. Drugi przykład w tej sekcji dołącza obiektu zabezpieczeń, dzięki czemu przykładów <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleAll (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleAll(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> użytkownik, który określa i <see cref="T:System.Security.AccessControl.AccessControlType" /> do wyszukania. Wszelkie prawa, flagi dziedziczenia lub flagi propagacji określone przez tę regułę są ignorowane.</param>
        <summary>Wyszukuje wszystkie reguły kontroli z tego samego użytkownika dostępu i <see cref="T:System.Security.AccessControl.AccessControlType" /> (zezwalania lub odmowy) jako określona reguła oraz, jeśli znaleziono usuwa je.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżący <xref:System.Security.AccessControl.RegistrySecurity> jest wyszukiwany reguły, które mają ten sam użytkownik i tym samym <xref:System.Security.AccessControl.AccessControlType> wartość jako `rule`. Wszelkie prawa, flagi dziedziczenia lub flagi propagacji określony przez `rule` są ignorowane, podczas wykonywania tego wyszukiwania. Jeśli nie zostaną znalezione żadne reguły dopasowywania, nie podjęto żadnej akcji.  
  
 Na przykład, jeśli użytkownik ma wiele reguł zezwalających na różne prawa z różnych dziedziczenia i flagi propagacji, można usunąć te reguły, tworząc <xref:System.Security.AccessControl.RegistryAccessRule> obiekt, który określa użytkownika i <xref:System.Security.AccessControl.AccessControlType.Allow?displayProperty=nameWithType>, z dowolnego praw i flag, i przekazywanie tej reguły, aby <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> metody.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, że <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> metoda usuwa wszystkie reguły zgodnych użytkowników i <xref:System.Security.AccessControl.AccessControlType>, ignorowanie flagi i praw.  
  
 W przykładzie jest tworzony <xref:System.Security.AccessControl.RegistrySecurity> obiektu i dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika z różnych flagi dziedziczenia i propagacji. Przykład utworzy nową regułę, która umożliwia użytkownikowi przejęcie na własność i przekazuje tej reguły, aby <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> metodę, aby usunąć dwie reguły zezwalające na dostęp.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:Microsoft.Win32.RegistryKey> obiektu. Zobacz <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> — metoda i <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleSpecific (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleSpecific(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> Do usunięcia.</param>
        <summary>Wyszukuje reguły kontroli dostępu, która dokładnie odpowiada określonym reguły oraz, jeśli znaleziono i usuwa go.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reguła zostanie usunięta tylko wtedy, gdy dokładnie odpowiada `rule` wszystkie szczegóły, w tym flag. Inne zasady z tego samego użytkownika i <xref:System.Security.AccessControl.AccessControlType> pozostają niezmienione.  
  
> [!IMPORTANT]
>  Reguła reprezentuje jeden lub więcej podstawowych wpisów kontroli dostępu (ACE), a te wpisy są podzielić lub łączyć w razie potrzeby zmodyfikować zasady zabezpieczeń dostępu dla użytkownika. W związku z tym reguły może już nie istnieje w określonej formy znajdował się, gdy ten element został dodany, w tym przypadku <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> metody nie można go usunąć.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, że <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> metoda usuwa regułę tylko wtedy, gdy jest on zgodny dokładnie.  
  
 W przykładzie jest tworzony dwie reguły zezwalające na inne prawa. Reguły mają niezgodne flagi dziedziczenia i propagacji, po dodaniu drugiej reguły pokrywa się ona z pierwszego. Przykład wywołania <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> metoda określania pierwszej reguły, ale ponieważ reguły są łączone nie nie regułę, która jest zgodna. Przykład wywołuje <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> metody do usunięcia drugą regułę z scalonych reguły, a na koniec wywołania <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> metodę, aby usunąć pierwszej reguły.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:Microsoft.Win32.RegistryKey> obiektu. Zobacz <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> — metoda i <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAuditRule (rule As RegistryAuditRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> , który określa użytkownika, aby wyszukać i zestaw flagi dziedziczenia i propagacji, które pasujący reguły, jeśli znaleziono, musi być zgodny z. Określa, że uprawnienia do usunięcia z niezgodne reguły, jeśli znaleziono.</param>
        <summary>Wyszukuje reguły inspekcji z tego samego użytkownika określoną regułą oraz zgodne dziedziczenia i flagi propagacji; Jeśli znaleziono niezgodne reguły, prawa zawarte w określonej reguły są usuwane z niej.</summary>
        <returns>
          <see langword="true" /> Jeśli zostanie znaleziony zgodne reguły; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżący <xref:System.Security.AccessControl.RegistrySecurity> jest wyszukiwany zasady inspekcji, który ma tego samego użytkownika `rule`. Jeśli takie reguła nie zostanie znaleziony, nie podjęto żadnej akcji i metoda zwraca `false`. W przypadku znalezienia pasujących reguł ich flagi dziedziczenia i zgodności są sprawdzane pod kątem zgodności z flag określonych we `rule`. Jeśli zostanie znaleziony nie niezgodne reguły, nie podjęto żadnej akcji, a metoda zwraca `false`. Jeśli znaleziono reguły z flagami zgodne, prawa określone w `rule` są usuwane z niezgodne reguły, a metoda zwraca `true`. Jeśli `rule` określa prawa nie zawiera niezgodne reguły, nie podjęto żadnej akcji w odniesieniu do tych praw. Jeśli wszystkie prawa są usuwane z niezgodne reguły, cały reguła jest usuwana z bieżącego <xref:System.Security.AccessControl.RegistrySecurity> obiektu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleAll (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleAll(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> , który określa użytkownika do wyszukania. Wszelkie prawa, flagi dziedziczenia lub flagi propagacji określone przez tę regułę są ignorowane.</param>
        <summary>Przeszukuje wszystkie inspekcji reguły z określoną regułą tego samego użytkownika i, jeśli znaleziono, usuwa je.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżący <xref:System.Security.AccessControl.RegistrySecurity> jest wyszukiwany zasady inspekcji, które mają tego samego użytkownika `rule`. Wszelkie prawa, flagi dziedziczenia lub flagi propagacji określony przez `rule` są ignorowane, podczas wykonywania tego wyszukiwania. Jeśli nie zostaną znalezione żadne reguły dopasowywania, nie podjęto żadnej akcji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleSpecific (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleSpecific(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> Do usunięcia.</param>
        <summary>Wyszukuje zasady inspekcji, która dokładnie odpowiada określonym reguły oraz, jeśli znaleziono i usuwa go.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reguła zostanie usunięta tylko wtedy, gdy dokładnie odpowiada `rule` wszystkie szczegóły, w tym flag. Nie wpływa na inne zasady inspekcji dla tego użytkownika.  
  
> [!IMPORTANT]
>  Reguła reprezentuje jeden lub więcej podstawowych wpisów kontroli dostępu (ACE), a te wpisy są podzielić lub łączyć w razie potrzeby zmodyfikować zasady zabezpieczeń inspekcji dla użytkownika. W związku z tym reguły może już nie istnieje w określonej formy znajdował się, gdy ten element został dodany, w tym przypadku <xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A> metody nie można go usunąć.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> Do dodania. Użytkownik określony przez tę regułę określa reguły, aby usunąć przed dodaniem tej reguły.</param>
        <summary>Usuwa wszystkie zasady kontroli dostępu z tego samego użytkownika określoną regułą, niezależnie od tego <see cref="T:System.Security.AccessControl.AccessControlType" />, a następnie dodaje określoną regułą.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli brak reguł dostępu do których użytkownik odpowiada określonej reguły `rule` został dodany.  
  
   
  
## Examples  
 Poniższy kod przedstawia przykład sposobu <xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> metoda zastępuje wszystkie reguły dla zgodnego użytkownika podana reguła dopasowania.  
  
 W przykładzie jest tworzony <xref:System.Security.AccessControl.RegistrySecurity> obiektu i dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika z różnych flagi dziedziczenia i propagacji. Przykład utworzy nową regułę, która umożliwia użytkownikowi tylko do odczytu klucza i używa <xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> metodę, aby usunąć wszystkie reguły dla użytkownika i zastąp je z nowej reguły.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:Microsoft.Win32.RegistryKey> obiektu. Zobacz <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> — metoda i <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> Do dodania. Użytkownik i <see cref="T:System.Security.AccessControl.AccessControlType" /> tej zasady określają zasady można usunąć przed dodaniem tej reguły.</param>
        <summary>Usuwa wszystkie zasady kontroli dostępu z tego samego użytkownika i <see cref="T:System.Security.AccessControl.AccessControlType" /> (zezwalania lub odmowy) jako określonej reguły, a następnie dodaje określoną regułą.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli dla określonej reguły <xref:System.Security.AccessControl.AccessControlType.Allow>, ta metoda powoduje usunięcie wszystkich <xref:System.Security.AccessControl.AccessControlType.Allow> reguły dla określonego użytkownika, zastępując je z określoną regułą. Jeśli dla określonej reguły <xref:System.Security.AccessControl.AccessControlType.Deny>, wszystkie <xref:System.Security.AccessControl.AccessControlType.Deny> zastępuje reguły dla określonego użytkownika z określoną regułą.  
  
 Jeśli brak reguł której użytkownika i <xref:System.Security.AccessControl.AccessControlType> zgodne z określoną regułą `rule` został dodany.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, że <xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> metoda usuwa wszystkie reguły, które odpowiadają zarówno wobec użytkownika i <xref:System.Security.AccessControl.AccessControlType> z `rule`, ignorowanie flagi i praw i zastępuje je za pomocą `rule`.  
  
 W przykładzie jest tworzony <xref:System.Security.AccessControl.RegistrySecurity> obiektu i dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika z różnych flagi dziedziczenia i propagacji. Przykład utworzy nową regułę, która umożliwia użytkownikowi tylko do odczytu klucza i używa <xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> metody, aby usunąć dwie reguły, które umożliwiają dostęp i zastąp je z nowej reguły. Nie dotyczy reguła, która nie zezwala na dostęp.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:Microsoft.Win32.RegistryKey> obiektu. Zobacz <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> — metoda i <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAuditRule (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> Do dodania. Użytkownik określony przez tę regułę określa reguły, aby usunąć przed dodaniem tej reguły.</param>
        <summary>Usuwa wszystkie reguły z tego samego użytkownika określoną regułą inspekcji, niezależnie od tego <see cref="T:System.Security.AccessControl.AuditFlags" /> wartość, a następnie dodaje określoną regułą.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli brak reguł inspekcji, w których użytkownik odpowiada określonej reguły `rule` został dodany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>