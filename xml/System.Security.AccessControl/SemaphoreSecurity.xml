<Type Name="SemaphoreSecurity" FullName="System.Security.AccessControl.SemaphoreSecurity">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e6fcf47dcbc21e65bce3729b38ebcc579a40d7e0" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37632950" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SemaphoreSecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SemaphoreSecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.SemaphoreSecurity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SemaphoreSecurity&#xA;Inherits NativeObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemaphoreSecurity sealed : System::Security::AccessControl::NativeObjectSecurity" />
  <TypeSignature Language="F#" Value="type SemaphoreSecurity = class&#xA;    inherit NativeObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje zabezpieczenia kontroli dostępu Windows o nazwie semafora. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Element <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu określa prawa dostępu do semafora systemu o nazwie i określa również, jak są poddawane inspekcji prób dostępu. Prawa dostępu do semafora są wyrażane jako zasady z każdej reguły dostępu, reprezentowane przez <xref:System.Security.AccessControl.SemaphoreAccessRule> obiektu. Każda reguła inspekcji jest reprezentowany przez <xref:System.Security.AccessControl.SemaphoreAuditRule> obiektu.  
  
 Odzwierciedla to Windows system zabezpieczeń, w którym każdy obiekt zabezpieczany ma co najwyżej jeden poufnej listy kontroli dostępu (DACL), które kontroluje dostęp do bezpiecznego obiektu i co najwyżej jeden system listy kontroli dostępu (SACL) określająca, do których dostęp próby są poddawane inspekcji. Listy DACL i SACL są uporządkowane listy wpisów kontroli dostępu (ACE), które określają dostępu i inspekcji dla użytkowników i grup. A <xref:System.Security.AccessControl.SemaphoreAccessRule> lub <xref:System.Security.AccessControl.SemaphoreAuditRule> object może reprezentować więcej niż jednego wpisu ACE.  
  
> [!NOTE]
>  Element <xref:System.Threading.Semaphore> obiektu może reprezentować semafora lokalnych lub semafor systemu o nazwie. Zabezpieczenia kontroli dostępu Windows ma znaczenie tylko w przypadku systemu o nazwie semaforów.  
  
 <xref:System.Security.AccessControl.SemaphoreSecurity>, <xref:System.Security.AccessControl.SemaphoreAccessRule>, I <xref:System.Security.AccessControl.SemaphoreAuditRule> klasy ukryć szczegóły implementacji list ACL i wpisy kontroli dostępu. Umożliwiają one ignoruje siedemnastu różnych typów wpisu kontroli dostępu i złożoność poprawnie obsługi dziedziczenia i propagację praw dostępu. Te obiekty są również stworzony w celu zapobiegania następujące typowe błędy kontroli dostępu:  
  
-   Tworzenia deskryptora zabezpieczeń przy użyciu DACL o wartości null. Odwołanie o wartości null do listy DACL zezwala każdemu użytkownikowi dodać reguły dostępu do obiektu, potencjalnie tworzenia ataku typu "odmowa usługi". Nowy <xref:System.Security.AccessControl.SemaphoreSecurity> obiekt zawsze rozpoczyna się od pusta lista DACL, która nie zezwala na dostęp dla wszystkich użytkowników.  
  
-   Naruszenie canonical porządkowanie wpisy kontroli dostępu. Jeśli lista ACE w listy DACL nie mieści się w kolejności canonical, użytkownicy mogą przypadkowo mieć dostępu do zabezpieczonego obiektu. Na przykład prawa dostępu odmowy zawsze musi występować przed dozwolone uprawnienia. <xref:System.Security.AccessControl.SemaphoreSecurity> obiekty, które wewnętrznie Obsługa odpowiedniej kolejności.  
  
-   Manipulowanie flagi deskryptora zabezpieczeń, które powinny znajdować się w tylko formant w Menedżerze zasobów.  
  
-   Tworzenia nieprawidłowe kombinacje flagi ACE.  
  
-   Manipulowanie ACE dziedziczone. Dziedziczenie i propagację są obsługiwane przez Menedżera zasobów, w odpowiedzi na zmiany wprowadzone do reguł dostępu i inspekcji.  
  
-   Wstawianie znaczenia wpisy kontroli dostępu do listy kontroli dostępu.  
  
 Tylko funkcje, które nie są obsługiwane przez obiekty zabezpieczeń .NET jest niebezpieczne działań, które należy unikać przez większość deweloperów aplikacji, takie jak następujące:  
  
-   Zadania niskiego poziomu, które są zazwyczaj wykonywane przez Menedżera zasobów.  
  
-   Dodawanie lub usuwanie wpisów kontroli dostępu w sposób, który nie zachowują kolejność canonical.  
  
 Aby zmodyfikować Windows kontrolę dostępu dla nazwanego semafor, użyj <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> metodę, aby uzyskać <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu. Zmodyfikuj obiekt zabezpieczeń przez dodawanie i usuwanie reguł, a następnie użyj <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType> metodę, aby dołączyć go ponownie.  
  
> [!IMPORTANT]
>  Zmiany wprowadzone do <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu nie wpływają na poziomy dostępu o nazwie semafora dopóki nie zostanie wywołana <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType> metodę, aby przypisać obiekt zmienionego zabezpieczeń do nazwanych semafora.  
  
 Aby skopiować kontrolę dostępu z jednego semafor, należy użyć <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> metodę, aby uzyskać <xref:System.Security.AccessControl.SemaphoreSecurity> obiekt reprezentujący reguł dostępu i inspekcji dla pierwszego semafor, a następnie użyj <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType> metoda lub Konstruktor, który akceptuje <xref:System.Security.AccessControl.SemaphoreSecurity> obiekt można przypisać te zasady do drugiego semafora.  
  
 Użytkownicy z inwestycji w języka (SDDL) definicji deskryptora zabezpieczeń mogą używać <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> metodę, aby ustawić zasady dostępu o nazwie semafor i <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> metodę, aby uzyskać ciąg reprezentujący w formacie SDDL reguły dostępu. Nie jest to zalecane w przypadku nowych wdrożeń.  
  
> [!NOTE]
>  Zabezpieczenia dla obiektów synchronizacji nie są obsługiwane dla Windows 98 lub Windows Millennium Edition.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje separacji między <xref:System.Security.AccessControl.AccessControlType.Allow> reguł i <xref:System.Security.AccessControl.AccessControlType.Deny> reguł i zawiera kombinację praw w reguły zgodne. W przykładzie jest tworzony <xref:System.Security.AccessControl.SemaphoreSecurity> obiekt, dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika i wyświetla wynikowy pary reguł. Przykład następnie umożliwia nowych uprawnień dla bieżącego użytkownika i wyświetla wynik, pokazujący, że nowe prawa są scalane z istniejącym <xref:System.Security.AccessControl.AccessControlType.Allow> reguły.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:System.Threading.Semaphore> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> i <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.SemaphoreAccessRule" />
    <altmember cref="T:System.Security.AccessControl.SemaphoreAuditRule" />
    <altmember cref="T:System.Security.AccessControl.SemaphoreRights" />
    <altmember cref="M:System.Threading.Semaphore.GetAccessControl" />
    <altmember cref="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSecurity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> klasy przy użyciu wartości domyślnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nowy <xref:System.Security.AccessControl.SemaphoreSecurity> obiekt zawsze rozpoczyna się od pustego poufnej listy dostępu (DACL), który nie zezwala na dostęp dla wszystkich użytkowników.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Ta klasa nie jest obsługiwana na Windows 98 lub Windows Millennium Edition.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, includeSections As AccessControlSections)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSecurity(System::String ^ name, System::Security::AccessControl::AccessControlSections includeSections);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.SemaphoreSecurity : string * System.Security.AccessControl.AccessControlSections -&gt; System.Security.AccessControl.SemaphoreSecurity" Usage="new System.Security.AccessControl.SemaphoreSecurity (name, includeSections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa semafora systemu, w której reguły zabezpieczeń kontroli dostępu, które mają być pobierane.</param>
        <param name="includeSections">Kombinacji <see cref="T:System.Security.AccessControl.AccessControlSections" /> flagi określające, w sekcjach do pobrania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> klasy z określonym sekcjami reguł zabezpieczeń kontroli dostępu z semafora systemu o określonej nazwie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor pozwala uzyskać kontrolę dostępu dla semafora systemu o nazwie bez tworzenia <xref:System.Threading.Semaphore> obiektu.  
  
 Ostrzeżenie muszą być wykonywane podczas pracy z obiektów o nazwie systemu. Jeśli jest obiektem systemowym o nazwie `name` , który nie jest semafor, jego zabezpieczenia dostępu do kontroli może zostać pobrane.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Ta klasa nie jest obsługiwana na Windows 98 lub Windows Millennium Edition.</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreSecurity.AccessRightType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRightType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRightType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRightType : Type" Usage="System.Security.AccessControl.SemaphoreSecurity.AccessRightType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wyliczenie, które <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> klasa używana do reprezentowania praw dostępu.</summary>
        <value>A <see cref="T:System.Type" /> obiekt reprezentujący <see cref="T:System.Security.AccessControl.SemaphoreRights" /> wyliczenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy, które wynikają z <xref:System.Security.AccessControl.ObjectSecurity> klasy zastąpienie <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> właściwość i zwracany typ używają do reprezentowania praw dostępu. Podczas pracy z tablicami lub kolekcje zawierające wiele typów obiektów zabezpieczeń, należy użyć tej właściwości można określić typu wyliczenia poprawne za pomocą każdego obiektu zabezpieczeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AccessRule ^ AccessRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="abstract member AccessRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.AccessRule&#xA;override this.AccessRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.AccessRule" Usage="semaphoreSecurity.AccessRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference">
          <see cref="T:System.Security.Principal.IdentityReference" /> , Które identyfikują użytkownika lub grupy reguła ma zastosowanie do.</param>
        <param name="accessMask">Bitowa kombinacja <see cref="T:System.Security.AccessControl.SemaphoreRights" /> prawa dostępu, aby udzielić lub odmówić, określając wartości rzutowany na liczbę całkowitą.</param>
        <param name="isInherited">Bez znaczenia dla nazwanych semaforów, ponieważ mają one nie hierarchii.</param>
        <param name="inheritanceFlags">Bez znaczenia dla nazwanych semaforów, ponieważ mają one nie hierarchii.</param>
        <param name="propagationFlags">Bez znaczenia dla nazwanych semaforów, ponieważ mają one nie hierarchii.</param>
        <param name="type">Jedną z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości określających, czy uprawnienia są dozwolone lub odrzucane.</param>
        <summary>Tworzy nowe reguły kontroli dostępu dla określonego użytkownika z prawa dostępu określonego, access control i flagi.</summary>
        <returns>A <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> obiekt reprezentujący określonego uprawnienia dla określonego użytkownika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zalecany sposób, aby utworzyć zasady kontroli dostępu jest użycie konstruktorów z <xref:System.Security.AccessControl.SemaphoreAccessRule> klasy.  
  
> [!NOTE]
>  Mimo że dziedziczenia i propagację flagi są bez znaczenia dla nazwanego semaforów, jest nadal można określić, ich, który nie jest to zalecane, ponieważ niepotrzebnie utrudnia to konserwacji zasad, na przykład przez nie zakłócają kombinacji reguły w przeciwnym razie byłoby niezgodne.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, lub <paramref name="type" /> określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" /> jest <see langword="null" />.  - lub - <paramref name="accessMask" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" /> nie jest ani typu <see cref="T:System.Security.Principal.SecurityIdentifier" />, ani nie ma typu, takie jak <see cref="T:System.Security.Principal.NTAccount" /> , można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreSecurity.AccessRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRuleType : Type" Usage="System.Security.AccessControl.SemaphoreSecurity.AccessRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> klasa używana do reprezentowania reguły dostępu.</summary>
        <value>A <see cref="T:System.Type" /> obiekt reprezentujący <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> klasy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy, które wynikają z <xref:System.Security.AccessControl.ObjectSecurity> klasy zastąpienie <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> właściwość i zwracany typ używają do reprezentowania reguły dostępu. Podczas pracy z tablicami lub kolekcje zawierające wiele typów obiektów zabezpieczeń, należy użyć tej właściwości można określić typu reguły prawidłowy dostęp do użycia z każdego obiektu zabezpieczeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.AddAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAccessRule (rule As SemaphoreAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAccessRule(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="member this.AddAccessRule : System.Security.AccessControl.SemaphoreAccessRule -&gt; unit" Usage="semaphoreSecurity.AddAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">Reguły kontroli dostępu do dodania.</param>
        <summary>Wyszukuje zgodną regułę za pomocą którego można scalić nową regułę. Jeśli nie zostaną znalezione, dodaje nową regułę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.SemaphoreSecurity.AddAccessRule%2A> Metoda wyszukuje reguły za pomocą tego samego użytkownika lub grupy i tym samym <xref:System.Security.AccessControl.AccessControlType> jako `rule`. Jeśli nie zostaną znalezione, `rule` zostanie dodany. Jeśli regułę dopasowania zostanie znaleziony, prawa w `rule` są scalane z istniejącą regułę.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje separacji między <xref:System.Security.AccessControl.AccessControlType.Allow> reguł i <xref:System.Security.AccessControl.AccessControlType.Deny> reguł i zawiera kombinację praw w reguły zgodne. W przykładzie jest tworzony <xref:System.Security.AccessControl.SemaphoreSecurity> obiekt, dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika i wyświetla wynikowy pary reguł. Przykład następnie umożliwia nowych uprawnień dla bieżącego użytkownika i wyświetla wynik, pokazujący, że nowe prawa są scalane z istniejącym <xref:System.Security.AccessControl.AccessControlType.Allow> reguły.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:System.Threading.Semaphore> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> i <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.AddAuditRule(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAuditRule (rule As SemaphoreAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAuditRule(System::Security::AccessControl::SemaphoreAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="member this.AddAuditRule : System.Security.AccessControl.SemaphoreAuditRule -&gt; unit" Usage="semaphoreSecurity.AddAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">Zasady inspekcji do dodania. Użytkownik określony przez tę regułę określa wyszukiwania.</param>
        <summary>Wyszukuje zasady inspekcji za pomocą którego można scalić nową regułę. Jeśli nie zostaną znalezione, dodaje nową regułę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.SemaphoreSecurity.AddAuditRule%2A> Metoda wyszukiwania dla reguły za pomocą tego samego użytkownika lub grupy jako `rule`. Jeśli nie zostaną znalezione, `rule` zostanie dodany. Jeśli regułę dopasowania zostanie znaleziony, flagi w `rule` są scalane w istniejącą regułę.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AuditRule ^ AuditRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="abstract member AuditRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.AuditRule&#xA;override this.AuditRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.AuditRule" Usage="semaphoreSecurity.AuditRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference">
          <see cref="T:System.Security.Principal.IdentityReference" /> , Które identyfikują użytkownika lub grupy reguła ma zastosowanie do.</param>
        <param name="accessMask">Bitowa kombinacja <see cref="T:System.Security.AccessControl.SemaphoreRights" /> prawa dostępu do inspekcji, określając wartości rzutowany na liczbę całkowitą.</param>
        <param name="isInherited">Ta nie ma znaczenia dojść oczekiwania nazwanego, ponieważ mają one nie hierarchii.</param>
        <param name="inheritanceFlags">Ta nie ma znaczenia dojść oczekiwania nazwanego, ponieważ mają one nie hierarchii.</param>
        <param name="propagationFlags">Ta nie ma znaczenia dojść oczekiwania nazwanego, ponieważ mają one nie hierarchii.</param>
        <param name="flags">Bitowa kombinacja <see cref="T:System.Security.AccessControl.AuditFlags" /> wartości, które określają, czy do inspekcji dostępu pomyślnych i/lub dostępu nie powiodło się.</param>
        <summary>Tworzy nową regułę inspekcji, określając użytkownika, którego dotyczy reguła, prawa dostępu do inspekcji, a wynik, który wyzwala zasady inspekcji.</summary>
        <returns>A <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> obiekt reprezentujący reguła określonego inspekcji dla określonego użytkownika. Zwracany typ metody jest klasą bazową, <see cref="T:System.Security.AccessControl.AuditRule" />, ale zwracana wartość może być bezpiecznie umieszczona do klasy pochodnej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zalecany sposób tworzenia zasad inspekcji jest użycie konstruktorów z <xref:System.Security.AccessControl.SemaphoreAuditRule> klasy.  
  
> [!NOTE]
>  Mimo że dziedziczenia i propagację flagi są bez znaczenia dla nazwanego semaforów, jest nadal możliwe, podaj je. Nie jest to zalecane, ponieważ niepotrzebnie utrudnia to konserwacji zasad, na przykład przez nie zakłócają kombinacji reguł, które w przeciwnym razie będą zgodne.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, lub <paramref name="flags" /> określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" /> jest <see langword="null" />.  - lub - <paramref name="accessMask" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" /> nie jest ani typu <see cref="T:System.Security.Principal.SecurityIdentifier" />, ani nie ma typu, takie jak <see cref="T:System.Security.Principal.NTAccount" /> , można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreSecurity.AuditRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AuditRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AuditRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuditRuleType : Type" Usage="System.Security.AccessControl.SemaphoreSecurity.AuditRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> klasa używana do reprezentowania zasady inspekcji.</summary>
        <value>A <see cref="T:System.Type" /> obiekt reprezentujący <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> klasy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy, które wynikają z <xref:System.Security.AccessControl.ObjectSecurity> klasy zastąpienie <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> właściwość i zwracany typ używają do reprezentowania uprawnień inspekcji. Podczas pracy z tablicami lub kolekcje zawierające wiele typów obiektów zabezpieczeń, użyj tej właściwości, aby określić typ reguły poprawne inspekcji za pomocą każdego obiektu zabezpieczeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAccessRule (rule As SemaphoreAccessRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAccessRule(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="member this.RemoveAccessRule : System.Security.AccessControl.SemaphoreAccessRule -&gt; bool" Usage="semaphoreSecurity.RemoveAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> użytkownika, który określa i <see cref="T:System.Security.AccessControl.AccessControlType" /> wyszukiwanie i zestaw dziedziczenia i propagację flag, które pasującej reguły, jeśli znaleziono, musi być zgodny z. Określa, że prawa do usunięcia z niezgodne reguły, jeśli znaleziono.</param>
        <summary>Wyszukuje reguły kontroli dostępu przy użyciu tego samego użytkownika i <see cref="T:System.Security.AccessControl.AccessControlType" /> (Zezwalaj lub Odmów) jako określoną regułą oraz zgodne dziedziczenia i flagi propagacji; Jeśli zostanie znaleziona taka reguła, prawa zawarte w tej regule określonego dostępu z niego usuwane.</summary>
        <returns>
          <see langword="true" /> Jeśli zostanie znaleziona zgodna reguła; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżący <xref:System.Security.AccessControl.SemaphoreSecurity> połączenie jest wyszukiwane na regułę, która ma ten sam użytkownik i tym samym <xref:System.Security.AccessControl.AccessControlType> wartość jako `rule`. Jeśli takie reguła nie zostanie znaleziony, nie podjęto żadnej akcji, a następnie zwraca metoda `false`. Jeśli zostaną znalezione dopasowania zasad, ich flagi dziedziczenia i zgodności są sprawdzane pod kątem zgodności z flag określonych we `rule`. Jeśli żadna zgodna reguła zostanie znaleziony, nie podjęto żadnej akcji i metoda zwraca `false`. Jeśli zostanie znaleziony regułę za pomocą flagi zgodne, prawa określone w `rule` są usuwane z niezgodne reguły, a metoda zwraca `true`. Jeśli `rule` określa prawa, nie jest zawarta w regule zgodne, zostanie podjęta żadna akcja w odniesieniu do tych praw. Jeśli wszelkie prawa, które zostaną usunięte z niezgodne reguły, cały reguła jest usuwana z bieżącego <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu.  
  
> [!IMPORTANT]
>  Chociaż można określić dziedziczenia i propagację flagi dla reguły dostępu semafor, tworząc je za pomocą <xref:System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory%2A> metody, nie jest to zalecane. Dziedziczenie i propagację nie mają znaczenia dla nazwanego semaforów a konserwacji zasad dostępu umożliwiają bardziej skomplikowane.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule%2A> metodę, aby usunąć prawa z <xref:System.Security.AccessControl.AccessControlType.Allow> reguły w <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu. Pokazano także, że inne prawa w `rule` są ignorowane.  
  
 W przykładzie jest tworzony <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu i dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika. Prawa mogą obejmować <xref:System.Security.AccessControl.SemaphoreRights.Modify>, <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions>, i <xref:System.Security.AccessControl.SemaphoreRights.Synchronize>. Przykład tworzy następnie nową regułę dla bieżącego użytkownika, w tym <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions> i <xref:System.Security.AccessControl.SemaphoreRights.TakeOwnership> praw, a następnie używa tej reguły za pomocą <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule%2A> metodę, aby usunąć <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions> z <xref:System.Security.AccessControl.AccessControlType.Allow> reguły w <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu. Obce <xref:System.Security.AccessControl.SemaphoreRights.TakeOwnership> kliknij prawym przyciskiem myszy w `rule` jest ignorowana.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:System.Threading.Semaphore> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> i <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleAll (rule As SemaphoreAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleAll(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="member this.RemoveAccessRuleAll : System.Security.AccessControl.SemaphoreAccessRule -&gt; unit" Usage="semaphoreSecurity.RemoveAccessRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> użytkownika, który określa i <see cref="T:System.Security.AccessControl.AccessControlType" /> do wyszukania. Wszelkie prawa, określone przez tę regułę są ignorowane.</param>
        <summary>Wyszukuje wszystkie dostępu zasady kontroli przy użyciu tego samego użytkownika i <see cref="T:System.Security.AccessControl.AccessControlType" /> (Zezwalaj lub Odmów) jako określonej reguły i, jeśli znaleziono usuwa je.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżący <xref:System.Security.AccessControl.SemaphoreSecurity> dla reguł, które mają ten sam użytkownik i tym samym przeszukiwany jest obiekt <xref:System.Security.AccessControl.AccessControlType> wartość jako `rule`. Wszelkie prawa, określony przez `rule` są ignorowane, podczas wykonywania tego wyszukiwania. Jeśli nie zostaną znalezione nie reguł dopasowania, nie podjęto żadnej akcji.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, że <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll%2A> metoda spowoduje usunięcie wszystkich reguł, które odpowiadają użytkownika i <xref:System.Security.AccessControl.AccessControlType>, ignorowanie praw.  
  
 W przykładzie jest tworzony <xref:System.Security.AccessControl.SemaphoreSecurity> obiekt, dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika, a następnie scala dodatkowych praw do <xref:System.Security.AccessControl.AccessControlType.Allow> reguły. Przykład tworzy następnie nową regułę, która umożliwia użytkownikowi, przejęcie na własność i używa tej reguły, aby usunąć <xref:System.Security.AccessControl.AccessControlType.Allow> reguły z <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:System.Threading.Semaphore> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> i <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleSpecific (rule As SemaphoreAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleSpecific(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="member this.RemoveAccessRuleSpecific : System.Security.AccessControl.SemaphoreAccessRule -&gt; unit" Usage="semaphoreSecurity.RemoveAccessRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> Do usunięcia.</param>
        <summary>Wyszukuje reguły kontroli dostępu, który dokładnie pasuje do określonej reguły i, jeśli znaleziono i usuwa go.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reguła zostanie usunięta tylko wtedy, gdy jest to dokładnie odpowiada `rule` wszystkie szczegółowe informacje, w tym flag. Inne zasady przy użyciu tego samego użytkownika i <xref:System.Security.AccessControl.AccessControlType> nie ulegają zmianom.  
  
> [!IMPORTANT]
>  Reguła reprezentuje jeden lub więcej podstawowych wpisów kontroli dostępu (ACE), a te wpisy są dzielenia lub łączone zgodnie z potrzebami, podczas modyfikowania zasad bezpieczeństwa dostępu dla użytkownika. W związku z tym, reguła może już nie istnieć w określonej formy był wykorzystywany podczas dodawania go, a w tym przypadku <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A> metody nie można go usunąć.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, że <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A> metoda wymaga dokładnego dopasowania, aby można było usunąć regułę, a reguły zezwalania i odmowy uprawnień są niezależne od siebie nawzajem.  
  
 W przykładzie jest tworzony <xref:System.Security.AccessControl.SemaphoreSecurity> obiekt, dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika, a następnie scala dodatkowych praw do <xref:System.Security.AccessControl.AccessControlType.Allow> regułę dostępu. Przykład następnie przekazuje oryginalny <xref:System.Security.AccessControl.AccessControlType.Allow> regułę <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A> metody i wyświetla wyniki, pokazujący, że nic nie zostanie usunięta. Przykład następnie tworzy regułę, która odpowiada <xref:System.Security.AccessControl.AccessControlType.Allow> reguły w <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu i pomyślnie zastosowań <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A> metodę, aby usunąć regułę.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:System.Threading.Semaphore> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> i <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAuditRule (rule As SemaphoreAuditRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAuditRule(System::Security::AccessControl::SemaphoreAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="member this.RemoveAuditRule : System.Security.AccessControl.SemaphoreAuditRule -&gt; bool" Usage="semaphoreSecurity.RemoveAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> określający użytkownika, aby wyszukać i zestaw dziedziczenia i propagację flagi, które pasującej reguły, jeśli znaleziono, musi być zgodny z. Określa, że prawa do usunięcia z niezgodne reguły, jeśli znaleziono.</param>
        <summary>Wyszukuje reguły kontroli inspekcji przy użyciu tego samego użytkownika określoną regułą oraz zgodne dziedziczenia i flagi propagacji; Jeśli zostanie znaleziona zgodna reguła, prawa zawarte w określonej reguły są usuwane z niego.</summary>
        <returns>
          <see langword="true" /> Jeśli zostanie znaleziona zgodna reguła; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżący <xref:System.Security.AccessControl.SemaphoreSecurity> połączenie jest wyszukiwane na regułę inspekcji, który ma tego samego użytkownika `rule`. Jeśli takie reguła nie zostanie znaleziony, nie podjęto żadnej akcji, a następnie zwraca metoda `false`. Jeśli zostaną znalezione dopasowania zasad, ich flagi dziedziczenia i zgodności są sprawdzane pod kątem zgodności z flag określonych we `rule`. Jeśli żadna zgodna reguła zostanie znaleziony, nie podjęto żadnej akcji i metoda zwraca `false`. Jeśli zostanie znaleziony regułę za pomocą flagi zgodne, prawa określone w `rule` są usuwane z niezgodne reguły, a metoda zwraca `true`. Jeśli `rule` określa prawa, nie jest zawarta w regule zgodne, zostanie podjęta żadna akcja w odniesieniu do tych praw. Jeśli wszelkie prawa, które zostaną usunięte z niezgodne reguły, cały reguła jest usuwana z bieżącego <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu.  
  
> [!IMPORTANT]
>  Chociaż można określić dziedziczenia i propagację flagi dla zasady inspekcji semafor, tworząc je za pomocą <xref:System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory%2A> metody, nie jest to zalecane. Dziedziczenie i propagację nie mają znaczenia dla nazwanego semaforów a konserwacji zasad inspekcji umożliwiają bardziej skomplikowane.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleAll (rule As SemaphoreAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleAll(System::Security::AccessControl::SemaphoreAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="member this.RemoveAuditRuleAll : System.Security.AccessControl.SemaphoreAuditRule -&gt; unit" Usage="semaphoreSecurity.RemoveAuditRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> określający użytkownika do wyszukania. Wszelkie prawa, określone przez tę regułę są ignorowane.</param>
        <summary>Przeszukuje wszystkie inspekcji reguły za pomocą tego samego użytkownika określoną regułą i, jeśli znaleziono, usuwa je.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżący <xref:System.Security.AccessControl.SemaphoreSecurity> połączenie jest wyszukiwane na reguły inspekcji, które mają tego samego użytkownika `rule`. Wszelkie prawa, określony przez `rule` są ignorowane, podczas wykonywania tego wyszukiwania. Wszystkie pasujące reguły są usuwane. Jeśli nie zostaną znalezione nie reguł dopasowania, nie podjęto żadnej akcji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleSpecific (rule As SemaphoreAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleSpecific(System::Security::AccessControl::SemaphoreAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="member this.RemoveAuditRuleSpecific : System.Security.AccessControl.SemaphoreAuditRule -&gt; unit" Usage="semaphoreSecurity.RemoveAuditRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> Do usunięcia.</param>
        <summary>Wyszukuje zasady inspekcji, który dokładnie pasuje do określonej reguły i, jeśli znaleziono i usuwa go.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reguła zostanie usunięta tylko wtedy, gdy jest to dokładnie odpowiada `rule` wszystkie szczegółowe informacje, w tym flag. Nie wpływa na inne zasady inspekcji dla tego użytkownika.  
  
> [!IMPORTANT]
>  Reguła reprezentuje jeden lub więcej podstawowych wpisów kontroli dostępu (ACE), a te wpisy są dzielenia lub łączone zgodnie z potrzebami, podczas modyfikowania zasad zabezpieczeń inspekcji dla użytkownika. W związku z tym, reguła może już nie istnieć w określonej formy był wykorzystywany podczas dodawania go, a w tym przypadku <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific%2A> metody nie można go usunąć.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAccessRule (rule As SemaphoreAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetAccessRule(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="member this.ResetAccessRule : System.Security.AccessControl.SemaphoreAccessRule -&gt; unit" Usage="semaphoreSecurity.ResetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> Do dodania. Użytkownik określony przez tę regułę określa reguły Aby usunąć przed dodaniem tej reguły.</param>
        <summary>Usuwa wszystkie zasady kontroli dostępu przy użyciu tego samego użytkownika określoną regułą, niezależnie od tego <see cref="T:System.Security.AccessControl.AccessControlType" />, a następnie dodaje określoną regułą.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli brak reguł dostępu użytkownika, którego pasuje do określonej reguły `rule` zostanie dodany.  
  
   
  
## Examples  
 Poniższy kod przedstawia przykładowy sposób, w jaki <xref:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule%2A> metoda zastępuje wszystkie reguły dla zgodnego użytkownika przy użyciu reguły określone dla dopasowania.  
  
 W przykładzie jest tworzony <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu i dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika. Przykład tworzy następnie nową regułę, która zezwala na bieżącym Pełna kontrola użytkownika i wykorzystuje <xref:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule%2A> metodę, aby zastąpić oba istniejące reguły z nową regułą.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:System.Threading.Semaphore> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> i <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.ResetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.ResetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessRule (rule As SemaphoreAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessRule(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="member this.SetAccessRule : System.Security.AccessControl.SemaphoreAccessRule -&gt; unit" Usage="semaphoreSecurity.SetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> Do dodania. Użytkownik i <see cref="T:System.Security.AccessControl.AccessControlType" /> tej reguły można określić reguły Aby usunąć przed dodaniem tej reguły.</param>
        <summary>Z tego samego użytkownika spowoduje usunięcie wszystkich reguł kontroli dostępu i <see cref="T:System.Security.AccessControl.AccessControlType" /> (Zezwalaj lub Odmów) jako określoną regułę, a następnie dodaje określoną regułą.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ma określoną regułą <xref:System.Security.AccessControl.AccessControlType.Allow>, ta metoda powoduje usunięcie wszystkich <xref:System.Security.AccessControl.AccessControlType.Allow> reguły dla określonego użytkownika, zastępując je z określoną regułą. Jeśli ma określoną regułą <xref:System.Security.AccessControl.AccessControlType.Deny>, wszystkie <xref:System.Security.AccessControl.AccessControlType.Deny> reguły dla określonego użytkownika są zastępowane określoną regułą.  
  
 Jeśli brak reguł użytkownika, którego i <xref:System.Security.AccessControl.AccessControlType> zgodna z określoną regułą `rule` zostanie dodany.  
  
   
  
## Examples  
 Poniższy kod przedstawia przykład sposób, w jaki <xref:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule%2A> metoda spowoduje usunięcie wszystkich reguł, które odpowiadają zarówno wobec użytkownika i <xref:System.Security.AccessControl.AccessControlType> z `rule`, zastępując je za pomocą `rule`.  
  
 W przykładzie jest tworzony <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu i dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika. Przykład tworzy następnie nową regułę, która zezwala na bieżącym Pełna kontrola użytkownika i wykorzystuje <xref:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule%2A> metodę, aby zamienić istniejący Zezwalaj na regułę z nową regułę. Nie dotyczy reguła, która nie zezwala na dostęp.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:System.Threading.Semaphore> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> i <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.SetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.SetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.SetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.SetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.SetAuditRule(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAuditRule (rule As SemaphoreAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAuditRule(System::Security::AccessControl::SemaphoreAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="member this.SetAuditRule : System.Security.AccessControl.SemaphoreAuditRule -&gt; unit" Usage="semaphoreSecurity.SetAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> Do dodania. Użytkownik określony przez tę regułę określa reguły Aby usunąć przed dodaniem tej reguły.</param>
        <summary>Usuwa wszystkie reguły za pomocą tego samego użytkownika określoną regułą inspekcji, niezależnie od wartości <see cref="T:System.Security.AccessControl.AuditFlags" /> wartości, a następnie dodaje określoną regułą.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie zasady inspekcji użytkownika, którego pasuje do określonej reguły `rule` zostanie dodany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>