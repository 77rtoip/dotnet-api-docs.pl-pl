<Type Name="SemaphoreAccessRule" FullName="System.Security.AccessControl.SemaphoreAccessRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f67fa043ffb0f46a4bb100dbb1f2ec2ced875e46" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36627580" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SemaphoreAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SemaphoreAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.SemaphoreAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SemaphoreAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemaphoreAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type SemaphoreAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje zestaw praw dostępu dozwolony lub niedozwolony dla użytkownika lub grupy. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> Klasa jest jeden zestaw klas, które umożliwiają zarządzanie Windows kontrolę dostępu na semaforów nazwanego systemu .NET Framework. Omówienie tych klas i ich związek z podstawowej struktury kontroli dostępu do systemu Windows, temacie <xref:System.Security.AccessControl.SemaphoreSecurity>.  
  
> [!NOTE]
>  Kontrolę dostępu systemu Windows jest znaczący tylko w przypadku systemu o nazwie semaforów. Jeśli <xref:System.Threading.Semaphore> obiekt reprezentuje semafora lokalnego, kontroli dostępu nie ma znaczenia.  
  
 Aby uzyskać listę reguł zastosowanym do semafora o nazwie, użyj <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> metody, aby uzyskać <xref:System.Security.AccessControl.SemaphoreSecurity> obiekt, a następnie użyć jego <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> metodę, aby uzyskać kolekcję <xref:System.Security.AccessControl.SemaphoreAccessRule> obiektów.  
  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> obiekty nie mapowanie jeden do jednego z wpisów kontroli dostępu w podstawowej poufnej listy kontroli dostępu (DACL). Po otrzymaniu zbiór wszystkich reguł dostępu do semafora zestaw zawiera minimalną liczbę reguł obecnie wymaganych do wyrażenia wszystkich wpisów kontroli dostępu.  
  
> [!NOTE]
>  Podstawowej wpisów kontroli dostępu zmieniać, jak dodać i usunąć reguły. Informacje w regułach są scalane, jeśli to możliwe, aby utrzymać najmniejszą liczbę wpisów kontroli dostępu. W związku z tym odczytu bieżącą listę reguł, może nie wygląda tak samo jak lista wszystkich reguł, które zostały dodane.  
  
 Użyj <xref:System.Security.AccessControl.SemaphoreAccessRule> obiektów, aby określić prawa dostępu, aby zezwolić lub odmówić użytkownikowi lub grupie. A <xref:System.Security.AccessControl.SemaphoreAccessRule> zawsze obiekt reprezentuje zezwolenie na dostęp lub odmowa dostępu, nigdy nie oba.  
  
 Aby zastosować regułę do semafora systemu o nazwie, użyj <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> metodę, aby pobrać <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu. Modyfikowanie <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu za pomocą jej metod dodać regułę, a następnie użyć <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType> metody ponownie dołączyć obiektu zabezpieczeń.  
  
> [!IMPORTANT]
>  Zmiany wprowadzane do <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu nie wpływają na poziomów dostępu o nazwie semafora czasu wywołania <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType> metodę przypisania do semafora nazwanego obiektu zmieniony zabezpieczeń.  
  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> obiekty są niezmienne. Zabezpieczenia semafora jest zmodyfikowany za pomocą metody <xref:System.Security.AccessControl.SemaphoreSecurity> klasy można dodać ani usunąć reguły; zgodnie z tym podstawowej wpisów kontroli dostępu są modyfikowane.  
  
> [!NOTE]
>  Zabezpieczenia obiektów synchronizacji nie jest obsługiwane dla systemu Windows 98 lub Windows Millennium Edition.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje oddzielenie <xref:System.Security.AccessControl.AccessControlType.Allow> reguł i <xref:System.Security.AccessControl.AccessControlType.Deny> reguł i zawiera kombinację praw w niezgodne reguły. W przykładzie jest tworzony <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu, dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika i wyświetla wynikowy pary reguł. W przykładzie następnie umożliwia nowe prawa dla bieżącego użytkownika oraz wyświetla wynik, pokazujący, że nowe uprawnienia zostaną scalone z istniejącym <xref:System.Security.AccessControl.AccessControlType.Allow> reguły.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:System.Threading.Semaphore> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> i <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.SemaphoreSecurity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.SemaphoreRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, eventRights As SemaphoreRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::SemaphoreRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.SemaphoreAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.SemaphoreRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.SemaphoreAccessRule" Usage="new System.Security.AccessControl.SemaphoreAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Użytkownik lub grupa, którego będzie stosowana ta reguła. Musi być typu <see cref="T:System.Security.Principal.SecurityIdentifier" /> lub typu, takich jak <see cref="T:System.Security.Principal.NTAccount" /> którego można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="eventRights">Bitowe połączenie <see cref="T:System.Security.AccessControl.SemaphoreRights" /> wartości określających prawa dozwolony lub niedozwolony.</param>
        <param name="type">Jeden z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości określający, czy prawa zezwolono na dostęp lub odmowa dostępu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> klasy Określanie użytkownika lub grupy, ta reguła ma zastosowanie do prawa dostępu i określa, czy prawa dostępu określonego zezwolono na dostęp lub odmowa dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby wprowadzić <xref:System.Threading.Semaphore>, na przykład wywołując <xref:System.Threading.WaitHandle.WaitOne%2A> metody, użytkownik musi mieć <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> dostępu. Aby zakończyć semafora, wywołując <xref:System.Threading.Semaphore.Release%2A> metody, użytkownik musi mieć <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> dostępu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> Określa nieprawidłową wartość.  - lub - <paramref name="type" /> określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> jest <see langword="null" />.  - lub - <paramref name="eventRights" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> nie jest ani typu <see cref="T:System.Security.Principal.SecurityIdentifier" /> ani typu, takich jak <see cref="T:System.Security.Principal.NTAccount" /> którego można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreAccessRule (string identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.SemaphoreRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, eventRights As SemaphoreRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreAccessRule(System::String ^ identity, System::Security::AccessControl::SemaphoreRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.SemaphoreAccessRule : string * System.Security.AccessControl.SemaphoreRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.SemaphoreAccessRule" Usage="new System.Security.AccessControl.SemaphoreAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Nazwa użytkownika lub grupy, będzie stosowana ta reguła.</param>
        <param name="eventRights">Bitowe połączenie <see cref="T:System.Security.AccessControl.SemaphoreRights" /> wartości określających prawa dozwolony lub niedozwolony.</param>
        <param name="type">Jeden z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości określający, czy prawa zezwolono na dostęp lub odmowa dostępu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> klasy, określając nazwę użytkownika lub grupy, ta reguła ma zastosowanie do prawa dostępu i określa, czy prawa dostępu określonego zezwolono na dostęp lub odmowa dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby wprowadzić <xref:System.Threading.Semaphore>, na przykład wywołując <xref:System.Threading.WaitHandle.WaitOne%2A> metody, użytkownik musi mieć <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> dostępu. Aby zakończyć semafora, wywołując <xref:System.Threading.Semaphore.Release%2A> metody, użytkownik musi mieć <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> dostępu.  
  
 Ten konstruktor jest odpowiednikiem tworzenie <xref:System.Security.Principal.NTAccount> obiektu, przekazując `identity` do <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> Konstruktor i przekazywanie nowo utworzony <xref:System.Security.Principal.NTAccount> do obiektu <xref:System.Security.AccessControl.SemaphoreAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.SemaphoreRights%2CSystem.Security.AccessControl.AccessControlType%29> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie tego konstruktora w celu utworzenia <xref:System.Security.AccessControl.SemaphoreAccessRule> obiektów. W przykładzie jest tworzony <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu, dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika i wyświetla wynikowy pary reguł. W przykładzie następnie umożliwia nowe prawa dla bieżącego użytkownika oraz wyświetla wynik, pokazujący, że nowe uprawnienia zostaną scalone z istniejącym <xref:System.Security.AccessControl.AccessControlType.Allow> reguły.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:System.Threading.Semaphore> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> i <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> Określa nieprawidłową wartość.  - lub - <paramref name="type" /> określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventRights" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> jest <see langword="null" />.  - lub - <paramref name="identity" /> jest ciągiem o zerowej długości.  - lub - <paramref name="identity" /> ma więcej niż 512 znaków.</exception>
      </Docs>
    </Member>
    <Member MemberName="SemaphoreRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.SemaphoreRights SemaphoreRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.SemaphoreRights SemaphoreRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SemaphoreRights As SemaphoreRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::SemaphoreRights SemaphoreRights { System::Security::AccessControl::SemaphoreRights get(); };" />
      <MemberSignature Language="F#" Value="member this.SemaphoreRights : System.Security.AccessControl.SemaphoreRights" Usage="System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prawa dozwolony lub odrzucany przez regułę dostępu.</summary>
        <value>Bitowe połączenie <see cref="T:System.Security.AccessControl.SemaphoreRights" /> wartości, wskazując praw dozwolony lub odrzucany przez regułę dostępu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> obiekty są niezmienne. Można utworzyć nową regułę dostępu reprezentujący inny użytkownik, inne prawa lub innej <xref:System.Security.AccessControl.AccessControlType>, ale nie można zmodyfikować istniejącą regułę dostępu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights%2A> właściwość, aby wyświetlić praw w zestawie reguł zawartych w <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu. W przykładzie jest tworzony <xref:System.Security.AccessControl.SemaphoreSecurity> obiektu, dodaje reguły zezwalania i odmowy różne uprawnienia dla bieżącego użytkownika i wyświetla wynikowy pary reguł. W przykładzie następnie umożliwia nowe prawa dla bieżącego użytkownika oraz wyświetla wynik, pokazujący, że nowe uprawnienia zostaną scalone z istniejącym <xref:System.Security.AccessControl.AccessControlType.Allow> reguły.  
  
> [!NOTE]
>  W tym przykładzie nie dołączy do obiektu zabezpieczeń <xref:System.Threading.Semaphore> obiektu. Przykłady, które załączyć obiekty zabezpieczeń można znaleźć w <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> i <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>