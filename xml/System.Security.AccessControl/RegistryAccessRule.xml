<Type Name="RegistryAccessRule" FullName="System.Security.AccessControl.RegistryAccessRule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c14b64139b95a8eb6db3de16a64ace8d9f2529db" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69264489" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistryAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistryAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistryAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type RegistryAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje zestaw praw dostępu dozwolonych lub zabronionych dla użytkownika lub grupy. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAccessRule> Klasa jest jednym z zestawów klas, które .NET Framework zapewnia do zarządzania zabezpieczeniami kontroli dostępu systemu Windows w kluczach rejestru. Aby zapoznać się z omówieniem tych klas i ich relacji z podstawową strukturą kontroli dostępu systemu Windows, <xref:System.Security.AccessControl.RegistrySecurity>Zobacz.  
  
> [!NOTE]
>  Zabezpieczenia kontroli dostępu do systemu Windows można stosować tylko do kluczy rejestru. Nie można jej zastosować do poszczególnych par klucz/wartość przechowywanych w kluczu.  
  
 Aby uzyskać listę reguł, które są aktualnie stosowane do <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> klucza rejestru, użyj metody w celu <xref:System.Security.AccessControl.RegistrySecurity> uzyskania obiektu, a następnie użyj jego <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> metody w celu uzyskania kolekcji <xref:System.Security.AccessControl.RegistryAccessRule> obiektów.  
  
 <xref:System.Security.AccessControl.RegistryAccessRule>obiekty nie mapują jeden do jednego z wpisami kontroli dostępu na poufnej liście kontroli dostępu (DACL). Po otrzymaniu zestawu wszystkich reguł dostępu dla klucza rejestru zestaw zawiera minimalną liczbę reguł, które są obecnie wymagane do wyznaczania wszystkich wpisów kontroli dostępu.  
  
> [!NOTE]
>  Powiązane wpisy kontroli dostępu zmieniają się w miarę stosowania i usuwania reguł. Informacje w regułach są scalane, jeśli jest to możliwe, w celu utrzymania najmniejszej liczby wpisów kontroli dostępu. W ten sposób, podczas odczytywania bieżącej listy reguł, może nie wyglądać dokładnie tak jak lista wszystkich dodanych reguł.  
  
 Użyj <xref:System.Security.AccessControl.RegistryAccessRule> obiektów, aby określić prawa dostępu do zezwalania lub odmowy użytkownikowi lub grupie. <xref:System.Security.AccessControl.RegistryAccessRule> Obiekt zawsze reprezentuje dozwolony lub zabroniony dostęp, nigdy nie obu.  
  
 Aby zastosować regułę do klucza rejestru, użyj <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metody w celu <xref:System.Security.AccessControl.RegistrySecurity> pobrania obiektu. Zmodyfikuj obiekt za pomocą jego metod, aby dodać regułę, a następnie <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> Użyj metody, aby ponownie dołączyć obiekt zabezpieczeń. <xref:System.Security.AccessControl.RegistrySecurity>  
  
> [!IMPORTANT]
>  Zmiany wprowadzone w <xref:System.Security.AccessControl.RegistrySecurity> obiekcie nie wpływają na poziomy dostępu klucza rejestru do momentu <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> wywołania metody przypisania zmienionego obiektu zabezpieczeń do klucza rejestru.  
  
 <xref:System.Security.AccessControl.RegistryAccessRule>obiekty są niezmienne. Zabezpieczenia klucza rejestru są modyfikowane przy użyciu metod <xref:System.Security.AccessControl.RegistrySecurity> klasy w celu dodawania lub usuwania reguł. w takim przypadku odpowiednie wpisy kontroli dostępu są modyfikowane.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje reguły dostępu z dziedziczeniem i propagacją. Przykład tworzy <xref:System.Security.AccessControl.RegistrySecurity> obiekt, a następnie tworzy i dodaje dwie reguły, które <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> mają flagę. Pierwsza reguła nie ma flag propagacji, a drugi ma <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> i. <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>  
  
 Program wyświetla reguły w <xref:System.Security.AccessControl.RegistrySecurity> obiekcie, a następnie używa obiektu do utworzenia podklucza. Program tworzy podrzędny podklucz i podklucz grandchild, a następnie wyświetla zabezpieczenia dla każdego podklucza. Na koniec program usuwa klucze testowe.  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Użytkownik lub Grupa, której dotyczy reguła. Musi być typu <see cref="T:System.Security.Principal.SecurityIdentifier" /> lub typu, takiego jak <see cref="T:System.Security.Principal.NTAccount" /> , który można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="registryRights">Bitowa kombinacja <see cref="T:System.Security.AccessControl.RegistryRights" /> wartości wskazujących prawa dozwolone lub odrzucane.</param>
        <param name="type">Jedna z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości wskazujących, czy prawa są dozwolone czy odrzucane.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> klasy, określając użytkownika lub grupę, do której odnosi się reguła, uprawnienia dostępu oraz tego, czy określone prawa dostępu są dozwolone czy odrzucane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor określa domyślną propagację i dziedziczenie. Oznacza to, <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> i <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" />określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="type" />określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="eventRights" />ma wartość zero.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" />nie jest typem <see cref="T:System.Security.Principal.SecurityIdentifier" /> ani typu, takiego jak <see cref="T:System.Security.Principal.NTAccount" /> , który można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Nazwa użytkownika lub grupy, do której odnosi się reguła.</param>
        <param name="registryRights">Bitowa kombinacja <see cref="T:System.Security.AccessControl.RegistryRights" /> wartości wskazujących prawa dozwolone lub odrzucane.</param>
        <param name="type">Jedna z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości wskazujących, czy prawa są dozwolone czy odrzucane.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> klasy, określając nazwę użytkownika lub grupy, do której odnosi się reguła, uprawnienia dostępu oraz tego, czy określone prawa dostępu są dozwolone czy odrzucane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor określa domyślną propagację i dziedziczenie. Oznacza to, <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> i <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>.  
  
 Ten konstruktor jest równoznaczny z tworzeniem <xref:System.Security.Principal.NTAccount> obiektu, przekazaniem `identity` do <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> konstruktora <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> i przekazaniem nowo utworzonego <xref:System.Security.Principal.NTAccount> obiektu do konstruktora.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy reguły dostępu do rejestru i dodaje je do <xref:System.Security.AccessControl.RegistrySecurity> obiektu, pokazując, jak reguły zezwalające na prawa i Odmów pozostają oddzielone, chociaż scalane są zgodne reguły tego samego rodzaju.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" />określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="type" />określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="registryRights" />ma wartość zero.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="identity" />jest ciągiem o zerowej długości.  
  
—lub— 
 <paramref name="identity" />jest dłuższa niż 512 znaków.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Użytkownik lub Grupa, której dotyczy reguła. Musi być typu <see cref="T:System.Security.Principal.SecurityIdentifier" /> lub typu, takiego jak <see cref="T:System.Security.Principal.NTAccount" /> , który można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="registryRights">Bitowa kombinacja <see cref="T:System.Security.AccessControl.RegistryRights" /> wartości określających prawa dozwolone lub odrzucane.</param>
        <param name="inheritanceFlags">Bitowa kombinacja <see cref="T:System.Security.AccessControl.InheritanceFlags" /> flag określająca, jak prawa dostępu są dziedziczone z innych obiektów.</param>
        <param name="propagationFlags">Bitowa kombinacja <see cref="T:System.Security.AccessControl.PropagationFlags" /> flag określająca, jak prawa dostępu są propagowane do innych obiektów.</param>
        <param name="type">Jedna z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości określająca, czy prawa są dozwolone czy odrzucane.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> klasy, określając użytkownika lub grupę, do której odnosi się reguła, prawa dostępu, flagi dziedziczenia, flagi propagacji oraz określające, czy określone prawa dostępu są dozwolone czy odrzucane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie klucze rejestru są kontenerami, więc <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> flagą jest jedyną flagę dziedziczenia, która jest istotna dla kluczy rejestru. Jeśli ta flaga nie jest określona, flagi propagacji są ignorowane i dotyczy tylko klucza natychmiastowego. Jeśli flaga jest obecna, reguła jest propagowana, jak pokazano w poniższej tabeli. W tabeli założono, że istnieje podklucz S z podkluczem podrzędnym CS i grandchild podklucza GS. Oznacza to, że ścieżką dla podklucza grandchild jest S\CS\GS.  
  
|Flagi propagacji|S|REJESTR|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 Wzorzec podklucza grandchild zarządza wszystkimi podkluczami zawartymi w podkluczu grandchild.  
  
 Na przykład, <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> Jeśli flaga jest określona dla `inheritanceFlags` i <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> flaga Propagacja jest określona dla `propagationFlags`, ta reguła nie ma zastosowania do bezpośredniego podklucza, ale ma zastosowanie do wszystkich bezpośrednich podkluczy podrzędnych i wszystkich podkluczy zawierają one.  
  
> [!NOTE]
>  Chociaż można określić <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flagę dla `inheritanceFlags`, nie ma żadnego punktu. Na potrzeby kontroli dostępu pary nazwa/wartość w podkluczu nie są oddzielnymi obiektami. Prawa dostępu do par nazwa/wartość są kontrolowane przez prawa podklucza. Ponadto, ponieważ wszystkie podklucze są kontenerami (to oznacza, że mogą zawierać inne podklucze), nie ma to <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> wpływ na flagę. Na <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> koniec określenie flagi niepotrzebnie komplikuje konserwację reguł, ponieważ koliduje ona z kombinacją zgodnych reguł w inny sposób.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" />określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="type" />określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="inheritanceFlags" />określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="propagationFlags" />określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="registryRights" />ma wartość zero.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" />nie jest typem <see cref="T:System.Security.Principal.SecurityIdentifier" />ani typu, takiego jak <see cref="T:System.Security.Principal.NTAccount" /> , który można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Nazwa użytkownika lub grupy, do której odnosi się reguła.</param>
        <param name="registryRights">Bitowa kombinacja <see cref="T:System.Security.AccessControl.RegistryRights" /> wartości wskazujących prawa dozwolone lub odrzucane.</param>
        <param name="inheritanceFlags">Bitowa kombinacja <see cref="T:System.Security.AccessControl.InheritanceFlags" /> flag określająca, jak prawa dostępu są dziedziczone z innych obiektów.</param>
        <param name="propagationFlags">Bitowa kombinacja <see cref="T:System.Security.AccessControl.PropagationFlags" /> flag określająca, jak prawa dostępu są propagowane do innych obiektów.</param>
        <param name="type">Jedna z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości określająca, czy prawa są dozwolone czy odrzucane.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> klasy, określając nazwę użytkownika lub grupy, do której odnosi się reguła, prawa dostępu, flagi dziedziczenia, flagi propagacji oraz to, czy określone prawa dostępu są dozwolone czy odrzucane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie klucze rejestru są kontenerami, więc <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> flagą jest jedyną flagę dziedziczenia, która jest istotna dla kluczy rejestru. Jeśli ta flaga nie jest określona, flagi propagacji są ignorowane i dotyczy tylko klucza natychmiastowego. Jeśli flaga jest obecna, reguła jest propagowana, jak pokazano w poniższej tabeli. W tabeli założono, że istnieje podklucz S z podkluczem podrzędnym CS i grandchild podklucza GS. Oznacza to, że ścieżką dla podklucza grandchild jest S\CS\GS.  
  
|Flagi propagacji|S|REJESTR|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 Wzorzec podklucza grandchild zarządza wszystkimi podkluczami zawartymi w podkluczu grandchild.  
  
 Na przykład, <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> Jeśli flaga jest określona dla `inheritanceFlags` i <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> flaga Propagacja jest określona dla `propagationFlags`, ta reguła nie ma zastosowania do bezpośredniego podklucza, ale ma zastosowanie do wszystkich bezpośrednich podkluczy podrzędnych i wszystkich podkluczy zawierają one.  
  
> [!NOTE]
>  Chociaż można określić <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flagę dla `inheritanceFlags`, nie ma żadnego punktu. Na potrzeby kontroli dostępu pary nazwa/wartość w podkluczu nie są oddzielnymi obiektami. Prawa dostępu do par nazwa/wartość są kontrolowane przez prawa podklucza. Ponadto, ponieważ wszystkie podklucze są kontenerami (to oznacza, że mogą zawierać inne podklucze), nie ma to <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> wpływ na flagę. Na <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> koniec określenie flagi niepotrzebnie komplikuje konserwację reguł, ponieważ koliduje ona z kombinacją zgodnych reguł w inny sposób.  
  
 Ten konstruktor jest równoznaczny z tworzeniem <xref:System.Security.Principal.NTAccount> obiektu, przekazaniem `identity` do <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> konstruktora <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> i przekazaniem nowo utworzonego <xref:System.Security.Principal.NTAccount> obiektu do konstruktora.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje reguły dostępu z dziedziczeniem i propagacją. Przykład tworzy <xref:System.Security.AccessControl.RegistrySecurity> obiekt, a następnie tworzy i dodaje dwie reguły, które <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> mają flagę. Pierwsza reguła nie ma flag propagacji, a drugi ma <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> i. <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>  
  
 Program wyświetla reguły w <xref:System.Security.AccessControl.RegistrySecurity> obiekcie, a następnie <xref:System.Security.AccessControl.RegistrySecurity> używa obiektu do utworzenia podklucza. Program tworzy podrzędny podklucz i podklucz grandchild, a następnie wyświetla reguły dla każdego podklucza. Na koniec program usuwa klucze testowe.  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" />określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="type" />określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="inheritanceFlags" />określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="propagationFlags" />określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="eventRights" />ma wartość zero.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="identity" />jest ciągiem o zerowej długości.  
  
—lub— 
 <paramref name="identity" />jest dłuższa niż 512 znaków.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegistryRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.RegistryRights RegistryRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegistryRights As RegistryRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::RegistryRights RegistryRights { System::Security::AccessControl::RegistryRights get(); };" />
      <MemberSignature Language="F#" Value="member this.RegistryRights : System.Security.AccessControl.RegistryRights" Usage="System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.RegistryRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prawa dozwolone lub odrzucane przez regułę dostępu.</summary>
        <value>Bitowa kombinacja <see cref="T:System.Security.AccessControl.RegistryRights" /> wartości wskazujących prawa dozwolone lub odrzucane przez regułę dostępu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAccessRule>obiekty są niezmienne. Można utworzyć nową regułę dostępu reprezentującą innego użytkownika, inne prawa lub inną <xref:System.Security.AccessControl.AccessControlType>, ale nie można modyfikować istniejącej reguły dostępu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
