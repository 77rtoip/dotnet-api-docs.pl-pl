<Type Name="RegistryAccessRule" FullName="System.Security.AccessControl.RegistryAccessRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="38b1b85fe4be52cde503ca221369ec7e8192189a" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39756791" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistryAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistryAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistryAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type RegistryAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje zestaw praw dostępu, dozwolony lub blokowany dla użytkownika lub grupy. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAccessRule> Klasy jest jednym z zestawu klas, które program .NET Framework dostarcza do zarządzania Windows kontrolę dostępu dla kluczy rejestru. Omówienie tych klas i ich związek z podstawowej struktury kontroli dostępu Windows, zobacz <xref:System.Security.AccessControl.RegistrySecurity>.  
  
> [!NOTE]
>  Zabezpieczenia kontroli dostępu Windows będzie stosowany tylko do kluczy rejestru. Nie można zastosować do poszczególnych klucz/wartość pary, przechowywane w kluczu.  
  
 Aby uzyskać listę reguł obecnie stosowane do klucza rejestru, użyj <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metodę, aby uzyskać <xref:System.Security.AccessControl.RegistrySecurity> obiektu, a następnie użyć jej <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> metodę, aby uzyskać kolekcję <xref:System.Security.AccessControl.RegistryAccessRule> obiektów.  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> obiekty nie są mapowane jeden do jednego z wpisów kontroli dostępu na liście podstawowych arbitralnej kontroli dostępu (DACL). Gdy otrzymasz zestaw wszystkie reguły dostępu do klucza rejestru zestaw zawiera minimalną liczbę reguł obecnie wymaganych do wyrażenia wszystkich wpisów kontroli dostępu.  
  
> [!NOTE]
>  Zmienić podstawowej wpisów kontroli dostępu Zastosuj i Usuń reguły. Informacje w regułach są scalane, jeśli jest to możliwe, aby zachować najmniejszą liczbę wpisów kontroli dostępu. W związku z tym podczas odczytywania bieżącą listę reguł to może nie wyglądać dokładnie listę wszystkich reguł, które zostały dodane.  
  
 Użyj <xref:System.Security.AccessControl.RegistryAccessRule> obiektów, aby określić prawa dostępu, aby udzielić lub odmówić użytkownikowi lub grupie. A <xref:System.Security.AccessControl.RegistryAccessRule> obiekt zawsze, reprezentuje zezwolenie na dostęp lub odmowa dostępu, nigdy nie oba.  
  
 Aby zastosować regułę do klucza rejestru, użyj <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metodę, aby uzyskać <xref:System.Security.AccessControl.RegistrySecurity> obiektu. Modyfikowanie <xref:System.Security.AccessControl.RegistrySecurity> obiektu za pomocą jej metod Dodaj regułę, a następnie użyć <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metoda ponownie dołączyć obiektu zabezpieczeń.  
  
> [!IMPORTANT]
>  Zmiany wprowadzone do <xref:System.Security.AccessControl.RegistrySecurity> obiektu nie wpływają na poziomy dostępu do klucza rejestru do czasu wywołania <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metodę, aby przypisać obiekt zmienionego zabezpieczeń do klucza rejestru.  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> obiekty są niezmienne. Zabezpieczenia dla klucza rejestru jest modyfikowana przy użyciu metody <xref:System.Security.AccessControl.RegistrySecurity> reguł klasy, aby dodać lub usunąć; jak to podstawowy wpisów kontroli dostępu są modyfikowane.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje reguły dostępu za pomocą dziedziczenia i propagacji. W przykładzie jest tworzony <xref:System.Security.AccessControl.RegistrySecurity> obiektu, a następnie tworzy i dodaje dwie reguły, które mają <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flagi. Pierwsza reguła ma nie flagi propagacji, natomiast druga <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> i <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.  
  
 Ten program wyświetla reguł w <xref:System.Security.AccessControl.RegistrySecurity> obiektu, a następnie używa obiektu, aby utworzyć podklucz. Program tworzy element podrzędny podklucz i podwójnym podklucz, a następnie wyświetla zabezpieczeń dla każdego podklucza. Na koniec usunie klucze testu.  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Użytkownicy lub grupy, których dotyczy reguła. Musi być typu <see cref="T:System.Security.Principal.SecurityIdentifier" /> lub typu, takie jak <see cref="T:System.Security.Principal.NTAccount" /> , można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="registryRights">Bitowa kombinacja <see cref="T:System.Security.AccessControl.RegistryRights" /> wartości oznaczają prawa dozwolony lub blokowany.</param>
        <param name="type">Jedną z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartość wskazującą, czy uprawnienia są dozwolone lub odrzucane.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> klasy, określając użytkownika lub grupy, ta reguła ma zastosowanie do prawa dostępu i tego, czy prawa dostępu określonego zezwolono na dostęp lub odmowa dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor Określa domyślne propagacji i dziedziczenia. Oznacza to, że <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> i <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="registryRights" /> Określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="type" /> Określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="eventRights" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> nie jest ani typu <see cref="T:System.Security.Principal.SecurityIdentifier" /> ani nie ma typu, takie jak <see cref="T:System.Security.Principal.NTAccount" /> , można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Nazwa użytkownika lub grupy dotyczy reguła.</param>
        <param name="registryRights">Bitowa kombinacja <see cref="T:System.Security.AccessControl.RegistryRights" /> wartości oznaczają prawa dozwolony lub blokowany.</param>
        <param name="type">Jedną z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartość wskazującą, czy uprawnienia są dozwolone lub odrzucane.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> klasy, określając nazwę użytkownika lub grupy, ta reguła ma zastosowanie do prawa dostępu i tego, czy prawa dostępu określonego zezwolono na dostęp lub odmowa dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor Określa domyślne propagacji i dziedziczenia. Oznacza to, że <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> i <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>.  
  
 Ten konstruktor jest odpowiednikiem tworzenie <xref:System.Security.Principal.NTAccount> obiektu, przekazując `identity` do <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> Konstruktor i przekazanie nowo utworzony <xref:System.Security.Principal.NTAccount> obiekt <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy reguły dostępu do rejestru i doda je do <xref:System.Security.AccessControl.RegistrySecurity> obiektu, przedstawiający sposób reguły zezwalania i odmowy uprawnień, które pozostaną oddzielne, podczas reguły zgodne z tego samego rodzaju są scalane.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="registryRights" /> Określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="type" /> Określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="registryRights" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="identity" /> jest ciągiem o zerowej długości.  
  
—lub— 
 <paramref name="identity" /> ma więcej niż 512 znaków.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Użytkownicy lub grupy, których dotyczy reguła. Musi być typu <see cref="T:System.Security.Principal.SecurityIdentifier" /> lub typu, takie jak <see cref="T:System.Security.Principal.NTAccount" /> , można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="registryRights">Bitowa kombinacja <see cref="T:System.Security.AccessControl.RegistryRights" /> wartości określających prawa dozwolony lub blokowany.</param>
        <param name="inheritanceFlags">Bitowa kombinacja <see cref="T:System.Security.AccessControl.InheritanceFlags" /> flagi określające, jak prawa dostępu są dziedziczone z innych obiektów.</param>
        <param name="propagationFlags">Bitowa kombinacja <see cref="T:System.Security.AccessControl.PropagationFlags" /> flagi określające, jak prawa dostępu są propagowane do innych obiektów.</param>
        <param name="type">Jedną z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości określających, czy uprawnienia są dozwolone lub odrzucane.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> klasy flagi propagacji określenie użytkownika lub grupy, ta reguła ma zastosowanie do prawa dostępu flag dziedziczenia i czy prawa dostępu określonego zezwolono na dostęp lub odmowa dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie klucze rejestru są kontenerami, dzięki czemu jest tylko flagę dziedziczenia, która ma znaczenie dla kluczy rejestru <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> flagi. Jeśli ta flaga nie zostanie określony, flagi propagacji są ignorowane i dotyczy tylko bezpośredniego klucz. Jeśli flaga jest obecny, reguły są propagowane, jak pokazano w poniższej tabeli. Tabela zakłada, że istnieje podklucz S przy użyciu podrzędnych podklucz CS i podklucz podwójnym GS. Oznacza to, że ścieżka podklucza podwójnym jest S\CS\GS.  
  
|Flagi propagacji|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 Wzorzec podklucz podwójnym decyduje wszystkich jego podkluczy zawarty w podkluczu podwójnym.  
  
 Na przykład jeśli <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> określono flagę `inheritanceFlags` i <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> flagi propagacji jest określona dla `propagationFlags`, ta zasada nie ma zastosowania do natychmiastowego podklucza, ale dotyczą wszystkich jego podkluczy bezpośrednie podrzędne i wszystkich jego podkluczy zawierają one.  
  
> [!NOTE]
>  Chociaż można określić <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flaga `inheritanceFlags`, brak punktu, w tym zakresie. Na potrzeby kontroli dostępu pary nazwa/wartość w podkluczu nie są oddzielne obiekty. Prawa dostępu do par nazwa/wartość są kontrolowane przez prawa podklucza. Ponadto ponieważ wszystkich jego podkluczy są kontenerami (czyli zawierają inne podklucze), nie są narażone na <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flagi. Na koniec, określając <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flagi niepotrzebnie komplikuje konserwacji zasad, ponieważ zakłócać połączenie w przeciwnym razie niezgodne reguły.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="registryRights" /> Określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="type" /> Określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="inheritanceFlags" /> Określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="propagationFlags" /> Określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="registryRights" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> nie jest ani typu <see cref="T:System.Security.Principal.SecurityIdentifier" />, ani nie ma typu, takie jak <see cref="T:System.Security.Principal.NTAccount" /> , można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Nazwa użytkownika lub grupy dotyczy reguła.</param>
        <param name="registryRights">Bitowa kombinacja <see cref="T:System.Security.AccessControl.RegistryRights" /> wartości oznaczają prawa dozwolony lub blokowany.</param>
        <param name="inheritanceFlags">Bitowa kombinacja <see cref="T:System.Security.AccessControl.InheritanceFlags" /> flagi określające, jak prawa dostępu są dziedziczone z innych obiektów.</param>
        <param name="propagationFlags">Bitowa kombinacja <see cref="T:System.Security.AccessControl.PropagationFlags" /> flagi określające, jak prawa dostępu są propagowane do innych obiektów.</param>
        <param name="type">Jedną z <see cref="T:System.Security.AccessControl.AccessControlType" /> wartości określających, czy uprawnienia są dozwolone lub odrzucane.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> klasy, określając nazwę użytkownika lub grupy, ta reguła ma zastosowanie do prawa dostępu flag dziedziczenia flagi propagacji i tego, czy udzielić lub odmówić prawa dostępu określonego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie klucze rejestru są kontenerami, dzięki czemu jest tylko flagę dziedziczenia, która ma znaczenie dla kluczy rejestru <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> flagi. Jeśli ta flaga nie zostanie określony, flagi propagacji są ignorowane i dotyczy tylko bezpośredniego klucz. Jeśli flaga jest obecny, reguły są propagowane, jak pokazano w poniższej tabeli. Tabela zakłada, że istnieje podklucz S przy użyciu podrzędnych podklucz CS i podklucz podwójnym GS. Oznacza to, że ścieżka podklucza podwójnym jest S\CS\GS.  
  
|Flagi propagacji|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 Wzorzec podklucz podwójnym decyduje wszystkich jego podkluczy zawarty w podkluczu podwójnym.  
  
 Na przykład jeśli <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> określono flagę `inheritanceFlags` i <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> flagi propagacji jest określona dla `propagationFlags`, ta zasada nie ma zastosowania do natychmiastowego podklucza, ale dotyczą wszystkich jego podkluczy bezpośrednie podrzędne i wszystkich jego podkluczy zawierają one.  
  
> [!NOTE]
>  Chociaż można określić <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flaga `inheritanceFlags`, brak punktu, w tym zakresie. Na potrzeby kontroli dostępu pary nazwa/wartość w podkluczu nie są oddzielne obiekty. Prawa dostępu do par nazwa/wartość są kontrolowane przez prawa podklucza. Ponadto ponieważ wszystkich jego podkluczy są kontenerami (czyli zawierają inne podklucze), nie są narażone na <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flagi. Na koniec, określając <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flagi niepotrzebnie komplikuje konserwacji zasad, ponieważ zakłócać połączenie w przeciwnym razie niezgodne reguły.  
  
 Ten konstruktor jest odpowiednikiem tworzenie <xref:System.Security.Principal.NTAccount> obiektu, przekazując `identity` do <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> Konstruktor i przekazanie nowo utworzony <xref:System.Security.Principal.NTAccount> obiekt <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje reguły dostępu za pomocą dziedziczenia i propagacji. W przykładzie jest tworzony <xref:System.Security.AccessControl.RegistrySecurity> obiektu, a następnie tworzy i dodaje dwie reguły, które mają <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flagi. Pierwsza reguła ma nie flagi propagacji, natomiast druga <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> i <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.  
  
 Ten program wyświetla reguł w <xref:System.Security.AccessControl.RegistrySecurity> obiektu, a następnie używa <xref:System.Security.AccessControl.RegistrySecurity> obiekt, aby utworzyć podklucz. Program tworzy element podrzędny podklucz i podwójnym podklucz, a następnie wyświetla reguł dla każdego podklucza. Na koniec usunie klucze testu.  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="registryRights" /> Określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="type" /> Określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="inheritanceFlags" /> Określa nieprawidłową wartość.  
  
—lub— 
 <paramref name="propagationFlags" /> Określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventRights" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="identity" /> jest ciągiem o zerowej długości.  
  
—lub— 
 <paramref name="identity" /> ma więcej niż 512 znaków.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegistryRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.RegistryRights RegistryRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegistryRights As RegistryRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::RegistryRights RegistryRights { System::Security::AccessControl::RegistryRights get(); };" />
      <MemberSignature Language="F#" Value="member this.RegistryRights : System.Security.AccessControl.RegistryRights" Usage="System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.RegistryRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera praw dozwolony lub odrzucany przez regułę dostępu.</summary>
        <value>Bitowa kombinacja <see cref="T:System.Security.AccessControl.RegistryRights" /> wartości oznaczają prawa dozwolony lub odrzucany przez regułę dostępu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAccessRule> obiekty są niezmienne. Można utworzyć nową regułę dostępu, reprezentujący innego użytkownika, inne prawa lub innego <xref:System.Security.AccessControl.AccessControlType>, ale nie można zmodyfikować istniejącą regułę dostępu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>