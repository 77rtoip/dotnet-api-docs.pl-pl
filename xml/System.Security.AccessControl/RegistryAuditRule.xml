<Type Name="RegistryAuditRule" FullName="System.Security.AccessControl.RegistryAuditRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8f9a178fd0f55f115855c943b600490aac66f873" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36532326" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RegistryAuditRule : System.Security.AccessControl.AuditRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistryAuditRule extends System.Security.AccessControl.AuditRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistryAuditRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistryAuditRule&#xA;Inherits AuditRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryAuditRule sealed : System::Security::AccessControl::AuditRule" />
  <TypeSignature Language="F#" Value="type RegistryAuditRule = class&#xA;    inherit AuditRule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AuditRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje zestaw praw dostępu, które są poddawane inspekcji dla użytkownika lub grupy. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAuditRule> Klasa jest jeden zestaw klas, które umożliwiają zarządzanie Windows kontrolę dostępu dla kluczy rejestru programu .NET Framework. Omówienie tych klas i ich związek z podstawowej struktury kontroli dostępu do systemu Windows, temacie <xref:System.Security.AccessControl.RegistrySecurity>.  
  
> [!NOTE]
>  Kontrolę dostępu systemu Windows można zastosować tylko do kluczy rejestru. Nie można zastosować do pary poszczególnych klucz/wartość przechowywanych w kluczu.  
  
 Aby uzyskać listę reguł inspekcji, w obecnie stosowane do klucza rejestru, należy użyć <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metody, aby uzyskać <xref:System.Security.AccessControl.RegistrySecurity> obiekt, a następnie użyć jego <xref:System.Security.AccessControl.CommonObjectSecurity.GetAuditRules%2A> metodę, aby uzyskać kolekcję <xref:System.Security.AccessControl.RegistryAuditRule> obiektów.  
  
 <xref:System.Security.AccessControl.RegistryAuditRule> obiekty nie mapowanie jeden do jednego z wpisów kontroli dostępu w podstawowej poufnej listy kontroli dostępu (DACL). Gdy Pobierz zestaw wszystkich inspekcji reguły dla klucza rejestru, zestaw zawiera minimalną liczbę reguł obecnie wymaganych do wyrażenia wszystkich wpisów kontroli dostępu.  
  
> [!NOTE]
>  Podstawowej wpisów kontroli dostępu zmieniać, jak dodać i usunąć reguły. Informacje w regułach są scalane, jeśli to możliwe, aby utrzymać najmniejszą liczbę wpisów kontroli dostępu. W związku z tym odczytu bieżącą listę reguł, może nie wygląda tak samo jak lista wszystkich reguł, które zostały dodane.  
  
 Użyj <xref:System.Security.AccessControl.RegistryAuditRule> obiektów do Określ prawa dostępu, które są poddawane inspekcji dla użytkownika lub grupy. Aby zastosować regułę do klucza rejestru, użyj <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metodę, aby pobrać <xref:System.Security.AccessControl.RegistrySecurity> obiektu. Modyfikowanie <xref:System.Security.AccessControl.RegistrySecurity> obiektu za pomocą jej metod dodać regułę, a następnie użyć <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metody ponownie dołączyć obiektu zabezpieczeń.  
  
> [!IMPORTANT]
>  Zmiany wprowadzane do <xref:System.Security.AccessControl.RegistrySecurity> obiektu nie wpływają na poziomy dostępu do klucza rejestru do czasu wywołania <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metody można przypisać obiektu zmieniony zabezpieczeń do klucza rejestru.  
  
 <xref:System.Security.AccessControl.RegistryAuditRule> obiekty są niezmienne. Zabezpieczeń dla klucza rejestru jest modyfikowane za pomocą metody <xref:System.Security.AccessControl.RegistrySecurity> klasy można dodać ani usunąć reguły; zgodnie z tym podstawowej wpisów kontroli dostępu są modyfikowane.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAuditRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAuditRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAuditRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.RegistryAuditRule" Usage="new System.Security.AccessControl.RegistryAuditRule (identity, registryRights, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identity">Użytkownik lub grupa, którego będzie stosowana ta reguła. Musi być typu <see cref="T:System.Security.Principal.SecurityIdentifier" /> lub typu, takich jak <see cref="T:System.Security.Principal.NTAccount" /> którego można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="registryRights">Bitowe połączenie <see cref="T:System.Security.AccessControl.RegistryRights" /> wartości określających rodzaje dostęp do inspekcji.</param>
        <param name="inheritanceFlags">Bitowe połączenie <see cref="T:System.Security.AccessControl.InheritanceFlags" /> wartości określający, czy reguła inspekcji ma zastosowanie do podkluczy bieżącego klucza.</param>
        <param name="propagationFlags">Bitowe połączenie <see cref="T:System.Security.AccessControl.PropagationFlags" /> wartości, które mają wpływ na sposób reguły odziedziczone inspekcji jest propagowana do podkluczy bieżącego klucza.</param>
        <param name="flags">Bitowe połączenie <see cref="T:System.Security.AccessControl.AuditFlags" /> wartości określająca, czy inspekcji sukces i niepowodzenie.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> klasy Określanie użytkownika lub grupy do inspekcji, praw do inspekcji, czy przełączyć dziedziczenia pod uwagę i czy inspekcji sukces i niepowodzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie klucze rejestru są kontenerami, tak aby tylko flagi dziedziczenia zrozumiały dla kluczy rejestru <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> flagi. Jeśli ta flaga nie zostanie określony, flagi propagacji są ignorowane, a dotyczy tylko natychmiastowe klucza. Jeśli flaga jest obecny, reguły są propagowane, jak pokazano w poniższej tabeli. Tabela przyjęto założenie, że istnieje podklucz S podklucz podrzędnych CS i podklucz podwójnym GS. Ścieżka podklucza podwójnym jest S\CS\GS.  
  
|Flagi propagacji|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 Wzorzec podklucza podwójnym reguluje wszystkich jego podkluczy zawarty w podkluczu podwójnym.  
  
 Na przykład jeśli <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> określono flagę `inheritanceFlags` i <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> określono flagi propagacji `propagationFlags`, ta zasada nie ma zastosowania do natychmiastowego podklucza, ale dotyczą wszystkich jego podkluczy bezpośrednio podrzędne i wszystkich jego podkluczy zawierają one.  
  
> [!NOTE]
>  Mimo że można określić <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flagę dla `inheritanceFlags`, nie ma żadnych punktu w ten sposób. Na potrzeby kontroli dostępu pary nazwa/wartość w podkluczu, nie są oddzielnych obiektów. Prawa dostępu do par nazwa/wartość są kontrolowane przez prawa podklucza. Ponadto ponieważ wszystkich jego podkluczy są kontenerami (to znaczy zawierają inne podklucze), nie jest narażony na <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flagi. Na koniec, określając <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flagi niepotrzebnie komplikuje konserwacji zasad, ponieważ zakłócać normalnej kombinację niezgodne reguły.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> Określa nieprawidłową wartość.  - lub - <paramref name="flags" /> określa nieprawidłową wartość.  - lub - <paramref name="inheritanceFlags" /> określa nieprawidłową wartość.  - lub - <paramref name="propagationFlags" /> określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> jest <see langword="null" />.  - lub - <paramref name="registryRights" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> nie jest ani typu <see cref="T:System.Security.Principal.SecurityIdentifier" /> ani typu, takich jak <see cref="T:System.Security.Principal.NTAccount" /> którego można przekonwertować na typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAuditRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAuditRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAuditRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAuditRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.RegistryAuditRule" Usage="new System.Security.AccessControl.RegistryAuditRule (identity, registryRights, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identity">Nazwa użytkownika lub grupy, będzie stosowana ta reguła.</param>
        <param name="registryRights">Bitowe połączenie <see cref="T:System.Security.AccessControl.RegistryRights" /> wartości określających rodzaje dostęp do inspekcji.</param>
        <param name="inheritanceFlags">Kombinację <see cref="T:System.Security.AccessControl.InheritanceFlags" /> flagi, które określa, czy reguła inspekcji ma zastosowanie do podkluczy bieżącego klucza.</param>
        <param name="propagationFlags">Kombinację <see cref="T:System.Security.AccessControl.PropagationFlags" /> flagi, które mają wpływ na sposób reguły odziedziczone inspekcji jest propagowana do podkluczy bieżącego klucza.</param>
        <param name="flags">Bitowe połączenie <see cref="T:System.Security.AccessControl.AuditFlags" /> wartości określająca, czy inspekcji sukces i niepowodzenie.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> klasy, określając nazwę użytkownika lub grupy do inspekcji, praw do inspekcji, czy przełączyć dziedziczenia pod uwagę i czy inspekcji sukces i niepowodzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie klucze rejestru są kontenerami, tak aby tylko flagi dziedziczenia zrozumiały dla kluczy rejestru <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> flagi. Jeśli ta flaga nie zostanie określony, flagi propagacji są ignorowane, a dotyczy tylko natychmiastowe klucza. Jeśli flaga jest obecny, reguły są propagowane, jak pokazano w poniższej tabeli. Tabela przyjęto założenie, że istnieje podklucz S podklucz podrzędnych CS i podklucz podwójnym GS. Ścieżka podklucza podwójnym jest S\CS\GS.  
  
|Flagi propagacji|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 Wzorzec podklucza podwójnym reguluje wszystkich jego podkluczy zawarty w podkluczu podwójnym.  
  
 Na przykład jeśli <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> określono flagę `inheritanceFlags` i <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> określono flagi propagacji `propagationFlags`, ta zasada nie ma zastosowania do natychmiastowego podklucza, ale dotyczą wszystkich jego podkluczy bezpośrednio podrzędne i wszystkich jego podkluczy zawierają one.  
  
> [!NOTE]
>  Mimo że można określić <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flagę dla `inheritanceFlags`, nie ma żadnych punktu w ten sposób. Na potrzeby kontroli dostępu pary nazwa/wartość w podkluczu, nie są oddzielnych obiektów. Prawa dostępu do par nazwa/wartość są kontrolowane przez prawa podklucza. Ponadto ponieważ wszystkich jego podkluczy są kontenerami (to znaczy zawierają inne podklucze), nie jest narażony na <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flagi. Na koniec, określając <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flagi niepotrzebnie komplikuje konserwacji zasad, ponieważ zakłócać normalnej kombinację niezgodne reguły.  
  
 Ten konstruktor jest odpowiednikiem tworzenie <xref:System.Security.Principal.NTAccount> obiektu, przekazując `identity` do <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> Konstruktor i przekazywanie nowo utworzony <xref:System.Security.Principal.NTAccount> do obiektu <xref:System.Security.AccessControl.RegistryAuditRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AuditFlags%29> konstruktora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> Określa nieprawidłową wartość.  - lub - <paramref name="flags" /> określa nieprawidłową wartość.  - lub - <paramref name="inheritanceFlags" /> określa nieprawidłową wartość.  - lub - <paramref name="propagationFlags" /> określa nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="registryRights" /> wynosi zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> jest <see langword="null" />.  - lub - <paramref name="identity" /> jest ciągiem o zerowej długości.  - lub - <paramref name="identity" /> ma więcej niż 512 znaków.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegistryRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.RegistryRights RegistryRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistryAuditRule.RegistryRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegistryRights As RegistryRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::RegistryRights RegistryRights { System::Security::AccessControl::RegistryRights get(); };" />
      <MemberSignature Language="F#" Value="member this.RegistryRights : System.Security.AccessControl.RegistryRights" Usage="System.Security.AccessControl.RegistryAuditRule.RegistryRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.RegistryRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prawa dostępu dotyczy reguła inspekcji.</summary>
        <value>Bitowe połączenie <see cref="T:System.Security.AccessControl.RegistryRights" /> wartości, które wskazuje prawa dotyczy reguła inspekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAuditRule> obiekty są niezmienne. Można utworzyć nową regułę inspekcji reprezentujący inny użytkownik, inne prawa lub innej kombinacji <xref:System.Security.AccessControl.AuditFlags> flagi, ale nie można zmodyfikować istniejącą regułę inspekcji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>