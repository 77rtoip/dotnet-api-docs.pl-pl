<Type Name="AddInController" FullName="System.AddIn.Hosting.AddInController">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2b3f32bf19fb42d6ed9b44cc27fc1c1f11d60c99" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30437298" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AddInController" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AddInController extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Hosting.AddInController" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AddInController" />
  <TypeSignature Language="C++ CLI" Value="public ref class AddInController sealed" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia dodatek do różnych zadań.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa używana do wykonywania następujących zadań:  
  
-   Użyj <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> właściwości w celu uzyskania <xref:System.AddIn.Hosting.AddInEnvironment> obiektu dla dodatku. Aby aktywować innych dodatków w tej samej domenie aplikacji i procesu jako oryginalnego dodatek użyć obiektu.  
  
-   Użyj <xref:System.AddIn.Hosting.AddInController.AppDomain%2A> właściwości w celu uzyskania <xref:System.AppDomain> obiektu dla dodatku. Aby aktywować innych dodatków w tej samej domenie aplikacji, co oryginalna dodatek użyć obiektu. Należy pamiętać, że z powodu ograniczeń komunikacji między procesami w zdalnej, w tym scenariuszu nie będzie działać z dodatków, które są aktywowane w oddzielnych procesach.  
  
-   Użyj <xref:System.AddIn.Hosting.AddInController.Token%2A> właściwości w celu uzyskania <xref:System.AddIn.Hosting.AddInToken> obiekt, który reprezentuje dodatku.  
  
-   Zakończ pracę z dodatku <xref:System.AddIn.Hosting.AddInController.Shutdown%2A> metody.  
  
 Aby uzyskać kontrolera dodatku, należy wywołać <xref:System.AddIn.Hosting.AddInController.GetAddInController%2A> — metoda i przekaż wystąpienie jako jego parametr dodatku.  
  
   
  
## Examples  
 Poniższy przykład aktywuje dodatku w tym samym środowisku jako dodatek wcześniej aktywowana przy użyciu <xref:System.AddIn.Hosting.AddInController> obiektu.  
  
 [!code-csharp[AddInP3Host#8](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#8)]
 [!code-vb[AddInP3Host#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#8)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddInEnvironment">
      <MemberSignature Language="C#" Value="public System.AddIn.Hosting.AddInEnvironment AddInEnvironment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AddIn.Hosting.AddInEnvironment AddInEnvironment" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInController.AddInEnvironment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddInEnvironment As AddInEnvironment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::AddIn::Hosting::AddInEnvironment ^ AddInEnvironment { System::AddIn::Hosting::AddInEnvironment ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInEnvironment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.AddIn.Hosting.AddInEnvironment" /> obiektu.</summary>
        <value>Obiekt, który może służyć do aktywowania innych dodatków w tym samym środowisku jako oryginalnego dodatek.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość służy do pobrania <xref:System.AddIn.Hosting.AddInEnvironment> obiektu dla dodatku. Aby aktywować innych dodatków w tej samej domenie aplikacji i procesu jako oryginalnego dodatek użyć obiektu.  
  
   
  
## Examples  
 Poniższy przykład aktywuje drugi dodatku w tym samym środowisku jako pierwszego dodatku.  
  
 [!code-csharp[AddInP3Host#8](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#8)]
 [!code-vb[AddInP3Host#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppDomain">
      <MemberSignature Language="C#" Value="public AppDomain AppDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AppDomain AppDomain" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInController.AppDomain" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AppDomain As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AppDomain ^ AppDomain { AppDomain ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera domeny aplikacji, która zawiera dodatek.</summary>
        <value>Domena aplikacji dodatku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość służy do uzyskania dodatku <xref:System.AppDomain> obiektu oraz innych dodatków w tej samej domenie aplikacji.  
  
   
  
## Examples  
 Poniższy przykład aktywuje drugi dodatku w tej samej domenie aplikacji jako pierwszego dodatku.  
  
 [!code-csharp[AddInP3Host#9](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#9)]
 [!code-vb[AddInP3Host#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAddInController">
      <MemberSignature Language="C#" Value="public static System.AddIn.Hosting.AddInController GetAddInController (object addIn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Hosting.AddInController GetAddInController(object addIn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInController.GetAddInController(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAddInController (addIn As Object) As AddInController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::AddIn::Hosting::AddInController ^ GetAddInController(System::Object ^ addIn);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addIn" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="addIn">Widoku hosta dodatku.</param>
        <summary>Pobiera kontroler dla dodatku.</summary>
        <returns>Kontroler dla dodatku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.AddIn.Hosting.AddInToken.Activate%2A> Metody zwracają obiekt, który reprezentuje widok hosta dodatku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInController.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wyłączenie dodatku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda dzieli potok komunikacji między dodatek i jej hosta. Jeśli dodatek została aktywowana w domenie aplikacji automatycznie generowanych za pomocą <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%29> lub <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.Security.PermissionSet%29> metod <xref:System.AddIn.Hosting.AddInController.Shutdown%2A> metoda zwalnia także domeny aplikacji.  
  
 Jeśli dodatku został załadowany do własnej domeny aplikacji <xref:System.AddIn.Hosting.AddInController.Shutdown%2A> metoda zwalnia także domeny aplikacji.  
  
 Jeśli dodatku został załadowany do istniejącej domeny aplikacji, segmentów hosta i potoku nie będzie już mieć wszelkie odwołania do tego dodatku. W takim przypadku dodatek będzie kwalifikujących się można odzyskać przez wyrzucanie elementów bezużytecznych.  
  
 Ta klasa umożliwia również zamknąć dodatek została aktywowana w procesie zewnętrznym.  
  
   
  
## Examples  
 Poniższy przykład uzyskuje <xref:System.AddIn.Hosting.AddInController> obiektu w widoku hosta o nazwie `manager` , a następnie zamyka dodatku.  
  
 [!code-csharp[AddInCollectionPipelineHost#6](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHost/cs/Program.cs#6)]
 [!code-vb[AddInCollectionPipelineHost#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineHost/vb/Program.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public System.AddIn.Hosting.AddInToken Token { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AddIn.Hosting.AddInToken Token" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInController.Token" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Token As AddInToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::AddIn::Hosting::AddInToken ^ Token { System::AddIn::Hosting::AddInToken ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera token, który reprezentuje dodatku.</summary>
        <value>Obiekt, który reprezentuje dodatku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle ta właściwość służy do uzyskania tokenu, aby aktywować dodatku w późniejszym czasie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>