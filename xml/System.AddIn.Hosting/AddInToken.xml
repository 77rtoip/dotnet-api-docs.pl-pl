<Type Name="AddInToken" FullName="System.AddIn.Hosting.AddInToken">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="46ee175e1f4e3eb61f81989c2372469cb687b3dc" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36647742" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AddInToken : System.Collections.Generic.IEnumerable&lt;System.AddIn.Hosting.QualificationDataItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit AddInToken extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;valuetype System.AddIn.Hosting.QualificationDataItem&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Hosting.AddInToken" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AddInToken&#xA;Implements IEnumerable(Of QualificationDataItem)" />
  <TypeSignature Language="C++ CLI" Value="public ref class AddInToken sealed : System::Collections::Generic::IEnumerable&lt;System::AddIn::Hosting::QualificationDataItem&gt;" />
  <TypeSignature Language="F#" Value="type AddInToken = class&#xA;    interface seq&lt;QualificationDataItem&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.AddIn.Hosting.QualificationDataItem&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje dodatku, który może zostać uaktywniony.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.AddIn.Hosting.AddInToken> Obiekt reprezentuje dodatek, a następnie jego segmentów potoku skojarzony, które można aktywować. Token zawiera nazwę, nazwę zestawu, opis, Wydawca i wersja dodatku, który reprezentuje.  
  
 Użyj <xref:System.AddIn.Hosting.AddInStore.FindAddIns%2A?displayProperty=nameWithType> metodę, aby uzyskać kolekcję tokenów, które reprezentują dodatki którego potoki odpowiada widoku określonego hosta. Użyj <xref:System.AddIn.Hosting.AddInStore.FindAddIn%2A?displayProperty=nameWithType> metodę, aby uzyskać kolekcji tokenów reprezentujących wszystkie potoki określonego dodatku, zgodne widoku określonego hosta.  
  
 Aby aktywować dodatku, Przekaż token, który reprezentuje żądany dodatek do <xref:System.AddIn.Hosting.AddInToken.Activate%2A> metody. Ta metoda zwraca wystąpienia typu, który reprezentuje widoku hosta dodatku.  
  
 <xref:System.AddIn.Hosting.AddInToken.Activate%2A> Metoda ma kilka przeciążeń. Korzystając z przeciążeniem, które nie wymagają zgodności nazwy domeny aplikacji jako jeden z jego parametrów, jest tworzony automatycznie nowej domeny aplikacji dla dodatku.  
  
 Metody rozszerzenia język Language-Integrated zapytania (LINQ) służy do wykonywania zapytań na <xref:System.AddIn.Hosting.AddInToken>, traktując token jako kolekcja <xref:System.AddIn.Hosting.QualificationDataItem> struktury.  
  
   
  
## Examples  
 Ta sekcja zawiera dwa przykłady. Pierwszym przykładzie aktywuje dodatku, który został wybrany za pomocą `ChooseAddIn` metody, a w drugim przykładzie `ChooseAddIn` metody.  
  
 **Przykład 1**  
  
 Poniższy przykład pokazuje, jak można aktywować dodatek z tokenem.  
  
 [!code-csharp[AddInP3Host#5](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#5)]
 [!code-vb[AddInP3Host#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#5)]  
  
 **Przykład 2**  
  
 W poniższym przykładzie przedstawiono niestandardowego `ChooseAddIn` metodę, która wylicza <xref:System.AddIn.Hosting.AddInToken> kolekcji. Użytkownik wybiera tokenu z tej kolekcji, aby aktywować odpowiedni dodatek.  
  
 [!code-csharp[AddInP3Host#13](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#13)]
 [!code-vb[AddInP3Host#13](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Activate&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aktywuje dodatku.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.AddIn.Hosting.AddInEnvironment environment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(class System.AddIn.Hosting.AddInEnvironment environment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInEnvironment)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (environment As AddInEnvironment) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::AddIn::Hosting::AddInEnvironment ^ environment);" />
      <MemberSignature Language="F#" Value="member this.Activate : System.AddIn.Hosting.AddInEnvironment -&gt; 'T" Usage="addInToken.Activate environment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="environment" Type="System.AddIn.Hosting.AddInEnvironment" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interfejs lub abstrakcyjny podstawowy typ, który reprezentuje widoku hosta dodatku.</typeparam>
        <param name="environment">Domeny aplikacji i procesu, który zawiera oryginalnego dodatek.</param>
        <summary>Aktywuje dodatku w środowisku innym dodatków.</summary>
        <returns>Widoku hosta dodatku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie metody aktywuje dodatku w tej samej domenie aplikacji i procesu jako dodatek, z którego `environment` został uzyskany.  
  
   
  
## Examples  
 Poniższy przykład aktywuje dodatków w domenie aplikacji automatycznie generowanych z poziomem zabezpieczeń określony. Następnie aktywuje drugi dodatku w tej samej domenie aplikacji i procesu jako najpierw przy użyciu pierwszego dodatku na <xref:System.AddIn.Hosting.AddInEnvironment> obiektu.  
  
 [!code-csharp[AddInP3Host#8](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#8)]
 [!code-vb[AddInP3Host#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.AddIn.Hosting.AddInSecurityLevel trustLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(valuetype System.AddIn.Hosting.AddInSecurityLevel trustLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInSecurityLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (trustLevel As AddInSecurityLevel) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::AddIn::Hosting::AddInSecurityLevel trustLevel);" />
      <MemberSignature Language="F#" Value="member this.Activate : System.AddIn.Hosting.AddInSecurityLevel -&gt; 'T" Usage="addInToken.Activate trustLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="trustLevel" Type="System.AddIn.Hosting.AddInSecurityLevel" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interfejs lub abstrakcyjny podstawowy typ, który reprezentuje widoku hosta dodatku.</typeparam>
        <param name="trustLevel">Jedna z wartości wyliczenia, które określa poziom zaufania.</param>
        <summary>Aktywuje dodatku na poziomie określonego zaufania w nowej domenie aplikacji.</summary>
        <returns>Widoku hosta dodatku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przeciążenie metody ładuje dodatek do domeny aplikacji wygenerowanej automatycznie. Jeśli chcesz określić nazwę dla nowej domeny aplikacji, użyj <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%2CSystem.String%29> przeciążenia.  
  
 Ta metoda ustawia podstawowego katalogu dla domeny aplikacji do lokalizacji zestawu dodatku. Prawdopodobnie również.dll.config [addinassemblyname] plik konfiguracji i, jeśli znaleziono, ustawia go jako plik konfiguracji dla nowej domeny aplikacji.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób aktywowania dodatku, identyfikowane przez wybrany token, w domenie aplikacji automatycznie generowanych z poziomem zabezpieczeń określony.  
  
 [!code-csharp[AddInP3Host#5](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#5)]
 [!code-vb[AddInP3Host#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (AppDomain target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(class System.AppDomain target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AppDomain)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (target As AppDomain) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(AppDomain ^ target);" />
      <MemberSignature Language="F#" Value="member this.Activate : AppDomain -&gt; 'T" Usage="addInToken.Activate target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.AppDomain" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interfejs lub abstrakcyjny podstawowy typ, który reprezentuje widoku hosta dodatku.</typeparam>
        <param name="target">Domena aplikacji, która dodatek aktywowana w.</param>
        <summary>Aktywuje dodatku w istniejącej domenie aplikacji.</summary>
        <returns>Widoku hosta dodatku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aktywować dodatku w domenie aplikacji wygenerowanej automatycznie, przy użyciu <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%29> przeciążenia, aby wygenerować nową domenę aplikacji z poziomu zabezpieczeń określony lub <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%2CSystem.String%29> przeciążenia, aby uwzględnić przyjazną nazwę dla tej domeny aplikacji.  
  
   
  
## Examples  
 Poniższy przykład aktywuje dodatku w domenie aplikacji, który jest używany przez inny dodatku. Kod dla pierwszego dodatku jest dostarczany w <xref:System.AddIn.Hosting.AddInToken> klasy.  
  
 [!code-csharp[AddInP3Host#9](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#9)]
 [!code-vb[AddInP3Host#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Wymagane są uprawnienia pełnego zaufania. Obiekt wywołujący w łańcuchu wywołań nie ma wystarczających uprawnień.</exception>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.Security.PermissionSet permissions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(class System.Security.PermissionSet permissions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.Security.PermissionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (permissions As PermissionSet) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::Security::PermissionSet ^ permissions);" />
      <MemberSignature Language="F#" Value="member this.Activate : System.Security.PermissionSet -&gt; 'T" Usage="addInToken.Activate permissions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="permissions" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interfejs lub abstrakcyjny podstawowy typ, który reprezentuje widoku hosta dodatku.</typeparam>
        <param name="permissions">Uprawnienia przyznane dla dodatku.</param>
        <summary>Aktywuje dodatek z określonego zestawu w nowej domenie aplikacji uprawnień.</summary>
        <returns>Widoku hosta dodatku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przeciążenie metody ładuje dodatek do domeny aplikacji wygenerowanej automatycznie. Ustawia podstawowego katalogu dla domeny aplikacji do lokalizacji zestawu dodatku. Również szuka pliku konfiguracji `[addinassemblyname].dll.config` oraz, jeśli znaleziono i ustawia go jako plik konfiguracji dla nowej domeny aplikacji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="permissions" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.AddIn.Hosting.AddInProcess process, System.AddIn.Hosting.AddInSecurityLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(class System.AddIn.Hosting.AddInProcess process, valuetype System.AddIn.Hosting.AddInSecurityLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInProcess,System.AddIn.Hosting.AddInSecurityLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (process As AddInProcess, level As AddInSecurityLevel) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::AddIn::Hosting::AddInProcess ^ process, System::AddIn::Hosting::AddInSecurityLevel level);" />
      <MemberSignature Language="F#" Value="member this.Activate : System.AddIn.Hosting.AddInProcess * System.AddIn.Hosting.AddInSecurityLevel -&gt; 'T" Usage="addInToken.Activate (process, level)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="process" Type="System.AddIn.Hosting.AddInProcess" />
        <Parameter Name="level" Type="System.AddIn.Hosting.AddInSecurityLevel" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interfejs lub abstrakcyjny podstawowy typ, który reprezentuje widoku hosta dodatku.</typeparam>
        <param name="process">Proces zewnętrzny na uaktywnienie dodatku.</param>
        <param name="level">Jedna z wartości wyliczenia, które określa poziom zaufania.</param>
        <summary>Aktywuje dodatku w procesie zewnętrznym, w nowej domenie aplikacji, a także z poziomu określonego zaufania.</summary>
        <returns>Widoku hosta dodatku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ustawia podstawowego katalogu dla domeny aplikacji do lokalizacji zestawu dodatku. Również szuka pliku konfiguracji `[addinassemblyname].dll.config` oraz, jeśli znaleziono i ustawia go jako plik konfiguracji dla nowej domeny aplikacji.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowy proces i aktywuje dodatku w ten proces z poziomu zabezpieczeń pełnego zaufania.  
  
 [!code-csharp[AddInP3Host#10](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#10)]
 [!code-vb[AddInP3Host#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#10)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">Pełne zaufanie do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez kod częściowo zaufany.</permission>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.AddIn.Hosting.AddInProcess process, System.Security.PermissionSet permissionSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(class System.AddIn.Hosting.AddInProcess process, class System.Security.PermissionSet permissionSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInProcess,System.Security.PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::AddIn::Hosting::AddInProcess ^ process, System::Security::PermissionSet ^ permissionSet);" />
      <MemberSignature Language="F#" Value="member this.Activate : System.AddIn.Hosting.AddInProcess * System.Security.PermissionSet -&gt; 'T" Usage="addInToken.Activate (process, permissionSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="process" Type="System.AddIn.Hosting.AddInProcess" />
        <Parameter Name="permissionSet" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interfejs lub abstrakcyjny podstawowy typ, który reprezentuje widoku hosta dodatku.</typeparam>
        <param name="process">Proces zewnętrzny na uaktywnienie dodatku.</param>
        <param name="permissionSet">Wymagane zestawu uprawnień przyznanych dla dodatku.</param>
        <summary>Aktywuje dodatku w procesie zewnętrznym, w nowej domenie aplikacji oraz z zestawem określonego uprawnienia.</summary>
        <returns>Widoku hosta dodatku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ustawia podstawowego katalogu dla domeny aplikacji do lokalizacji zestawu dodatku. Również szuka pliku konfiguracji `[addinassemblyname].dll.config` oraz, jeśli znaleziono i ustawia go jako plik konfiguracji dla nowej domeny aplikacji.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">Pełne zaufanie do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez kod częściowo zaufany.</permission>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.AddIn.Hosting.AddInSecurityLevel trustLevel, string appDomainName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(valuetype System.AddIn.Hosting.AddInSecurityLevel trustLevel, string appDomainName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInSecurityLevel,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (trustLevel As AddInSecurityLevel, appDomainName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::AddIn::Hosting::AddInSecurityLevel trustLevel, System::String ^ appDomainName);" />
      <MemberSignature Language="F#" Value="member this.Activate : System.AddIn.Hosting.AddInSecurityLevel * string -&gt; 'T" Usage="addInToken.Activate (trustLevel, appDomainName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="trustLevel" Type="System.AddIn.Hosting.AddInSecurityLevel" />
        <Parameter Name="appDomainName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interfejs lub abstrakcyjny podstawowy typ, który reprezentuje widoku hosta dodatku.</typeparam>
        <param name="trustLevel">Jedna z wartości wyliczenia, które określa poziom zaufania.</param>
        <param name="appDomainName">Przyjazna nazwa można przypisać do nowej domeny aplikacji.</param>
        <summary>Aktywuje dodatku w nowej domenie aplikacji z określonym poziomem nazwy i zaufania.</summary>
        <returns>Widoku hosta dodatku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie trzeba określić nazwę domeny aplikacji, użyj <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%29> przeciążenia.  
  
 Ta metoda ustawia podstawowego katalogu dla domeny aplikacji do lokalizacji zestawu dodatku. Również szuka pliku konfiguracji `[addinassemblyname].dll.config` oraz, jeśli znaleziono i ustawia go jako plik konfiguracji dla nowej domeny aplikacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInFullName">
      <MemberSignature Language="C#" Value="public string AddInFullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AddInFullName" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.AddInFullName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddInFullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AddInFullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AddInFullName : string" Usage="System.AddIn.Hosting.AddInToken.AddInFullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obszar nazw i typ dodatku.</summary>
        <value>Typ dodatku, w pełni kwalifikowana przez jego przestrzeni nazw.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość uzyskuje Pełna nazwa dodatku, może zostać zwrócony przez <xref:System.Type.FullName%2A?displayProperty=nameWithType> właściwości. Ta wartość jest zawsze dostępny w wystąpieniu <xref:System.AddIn.Hosting.AddInToken> obiektu.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono wartości <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, i <xref:System.AddIn.Hosting.AddInToken.Version%2A> właściwości do konsoli. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.AddIn.Hosting.AddInToken> klasy.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.AssemblyName AssemblyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.AssemblyName AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.AssemblyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyName As AssemblyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::AssemblyName ^ AssemblyName { System::Reflection::AssemblyName ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyName : System.Reflection.AssemblyName" Usage="System.AddIn.Hosting.AddInToken.AssemblyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.AssemblyName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę zestawu, który zawiera dodatek.</summary>
        <value>Nazwa zestawu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość uzyskuje nazwę wyświetlaną zestawu, który zawiera dodatek, może zostać zwrócony przez <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> właściwości. Ta wartość jest zawsze dostępny w wystąpieniu <xref:System.AddIn.Hosting.AddInToken> obiektu.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono wartości <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, i <xref:System.AddIn.Hosting.AddInToken.Version%2A> właściwości do konsoli. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.AddIn.Hosting.AddInToken> klasy.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.Description" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Description : string" Usage="System.AddIn.Hosting.AddInToken.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera opis dodatku.</summary>
        <value>Opis dodatku lub <see langword="null" /> Jeśli opis nie została określona w <see cref="T:System.AddIn.AddInAttribute" /> atrybutu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość uzyskuje opis określonych w dodatku <xref:System.AddIn.AddInAttribute> atrybutu.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono wartości <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, i <xref:System.AddIn.Hosting.AddInToken.Version%2A> właściwości do konsoli. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.AddIn.Hosting.AddInToken> klasy.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDirectConnect">
      <MemberSignature Language="C#" Value="public static bool EnableDirectConnect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnableDirectConnect" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.EnableDirectConnect" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property EnableDirectConnect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnableDirectConnect { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableDirectConnect : bool with get, set" Usage="System.AddIn.Hosting.AddInToken.EnableDirectConnect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera i ustawia wartość wskazującą, czy dodatki powinny być bezpośrednio podłączone do ich hostów gdy zezwolenie na warunkach.</summary>
        <value>
          <see langword="true" /> Jeśli dodatek powinien być bezpośrednio połączony z hostem; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniższe warunki musi istnieć bezpośrednie połączenia występuje:  
  
-   Ta właściwość musi mieć ustawioną `true`.  
  
-   Dodatek musi być w tej samej domenie aplikacji hosta.  
  
-   Widok dodatku i widoku hosta dodatek muszą być tego samego typu.  
  
-   Wszystkie segmenty potoku muszą być dostępne.  
  
 Po nawiązaniu połączenia bezpośredniego, Dodaj w stronie karty i karty po stronie hosta nie są wystąpienia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="addInToken.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do porównania z bieżącym wystąpieniem.</param>
        <summary>Określa, czy określony obiekt jest taki sam, jak bieżące wystąpienie.</summary>
        <returns>
          <see langword="true" /> Jeśli określony obiekt i bieżącego wystąpienia są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.AddIn.Hosting.QualificationDataItem&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.AddIn.Hosting.QualificationDataItem&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of QualificationDataItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::AddIn::Hosting::QualificationDataItem&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.AddIn.Hosting.QualificationDataItem&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.AddIn.Hosting.QualificationDataItem&gt;" Usage="addInToken.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.AddIn.Hosting.QualificationDataItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający dla danych kwalifikacji segmentów potoku, które są skojarzone z tym tokenem.</summary>
        <returns>Moduł wyliczający, który może służyć do iterowania po danych kwalifikacji segmentów potoku, które są skojarzone z tokenu bieżącego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia Traktuj token, tak jakby był on zbiór elementów danych kwalifikacji, na przykład w `foreach` instrukcji (`For Each` w języku Visual Basic `for each` w programie Visual C++).  
  
 Użyj modułu wyliczającego zwracane przez tę metodę do iteracji elementów danych kwalifikacji segmentów potoku skojarzone z tokenu bieżącego. Każdy element danych kwalifikacja jest <xref:System.AddIn.Hosting.QualificationDataItem> struktury określa segment potok, który zawiera pary nazwa/wartość, z <xref:System.AddIn.Pipeline.QualificationDataAttribute> atrybut zastosowany do tego segmentu.  
  
> [!NOTE]
>  Model dodatku nie korzysta z danych kwalifikacja jest stosowany do widoku hosta dodatku. W związku z tym podczas wyliczania kwantyfikacja danych nie można znaleźć żadnego elementy którego <xref:System.AddIn.Hosting.QualificationDataItem.Segment%2A> jest właściwość <xref:System.AddIn.Hosting.AddInSegmentType.HostViewOfAddIn?displayProperty=nameWithType>.  
  
 Alternatywnie można użyć <xref:System.AddIn.Hosting.AddInToken.QualificationData%2A> właściwości do pobrania zagnieżdżony zbiór słowniki zawierające dane kwalifikacji segmentów potoku.  
  
   
  
## Examples  
 Poniższy przykład zawiera dane kwalifikacji segmentów potoku skojarzone z każdym <xref:System.AddIn.Hosting.AddInToken> w kolekcji tokenów.  
  
 [!code-csharp[AddInP3Host#12](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#12)]
 [!code-vb[AddInP3Host#12](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="addInToken.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pełni rolę funkcji skrótu dla tokenu.</summary>
        <returns>Wartość skrótu dla bieżącego tokenu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.AddIn.Hosting.AddInToken.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę dodatku.</summary>
        <value>Nazwa dodatku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość uzyskuje nazwę określonych w dodatku <xref:System.AddIn.AddInAttribute> atrybutu. Ta wartość jest zawsze dostępny w wystąpieniu <xref:System.AddIn.Hosting.AddInToken> obiektu.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono wartości <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, i <xref:System.AddIn.Hosting.AddInToken.Version%2A> właściwości do konsoli. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.AddIn.Hosting.AddInToken> klasy.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Publisher">
      <MemberSignature Language="C#" Value="public string Publisher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Publisher" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.Publisher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Publisher As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Publisher { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Publisher : string" Usage="System.AddIn.Hosting.AddInToken.Publisher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wydawcy dodatku.</summary>
        <value>Wydawca dodatku, lub <see langword="null" /> Jeśli wydawca nie jest określony w <see cref="T:System.AddIn.AddInAttribute" /> atrybutu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość uzyskuje wydawcy określoną w dodatku <xref:System.AddIn.AddInAttribute> atrybutu.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono wartości <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, i <xref:System.AddIn.Hosting.AddInToken.Version%2A> właściwości do konsoli. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.AddIn.Hosting.AddInToken> klasy.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QualificationData">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;System.AddIn.Hosting.AddInSegmentType,System.Collections.Generic.IDictionary&lt;string,string&gt;&gt; QualificationData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;valuetype System.AddIn.Hosting.AddInSegmentType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt;&gt; QualificationData" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.QualificationData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QualificationData As IDictionary(Of AddInSegmentType, IDictionary(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::AddIn::Hosting::AddInSegmentType, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^&gt; ^ QualificationData { System::Collections::Generic::IDictionary&lt;System::AddIn::Hosting::AddInSegmentType, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.QualificationData : System.Collections.Generic.IDictionary&lt;System.AddIn.Hosting.AddInSegmentType, System.Collections.Generic.IDictionary&lt;string, string&gt;&gt;" Usage="System.AddIn.Hosting.AddInToken.QualificationData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.AddIn.Hosting.AddInSegmentType,System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera Słownik danych dotyczących segmentów w potoku skojarzone z bieżącym tokenu.</summary>
        <value>Słownik, w której klucze są segmentów potoku i których wartości są słowniki nazwa/wartość pary danych reprezentują kwalifikacji dla każdego segmentu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość służy do uzyskania danych, która została zastosowana do potoku segmentów z <xref:System.AddIn.Pipeline.QualificationDataAttribute> atrybutu. Te dane służy do identyfikowania i pracować z typami tworzące Twoje potoków.  
  
 Ta właściwość zwraca słownik słowników. Górny słownika zawsze ma sześć kluczy. Każdy klucz jest <xref:System.AddIn.Hosting.AddInSegmentType> wartość segmentu w potoku. Każda wartość jest rodzajowy <xref:System.Collections.Generic.IDictionary%602> ciągów kluczy będących ciągami, zawierających dane kwalifikacji segmentu.  
  
 Klucze i wartości wewnętrzny słowników są nazwy i wartości określone w <xref:System.AddIn.Pipeline.QualificationDataAttribute> atrybuty dla segmentów. Jeśli żadne dane kwalifikacji została zastosowana do segmentu, jego słownik jest pusty.  
  
> [!NOTE]
>  Model dodatku nie korzysta z danych kwalifikacja jest stosowany do widoku hosta dodatku. Dzięki temu słownik <xref:System.AddIn.Hosting.AddInSegmentType.HostViewOfAddIn?displayProperty=nameWithType> zawsze jest pusta.  
  
 Alternatywnie można uzyskać danych kwalifikacji wyliczając <xref:System.AddIn.Hosting.AddInToken> tak, jakby był on kolekcją <xref:System.AddIn.Hosting.QualificationDataItem> struktury, za pomocą `foreach` instrukcji (`For Each` w języku Visual Basic `for each` w programie Visual C++). Zapoznaj się z przykładem przewidzianych <xref:System.AddIn.Hosting.QualificationDataItem> struktury.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak zbadać dodatku danych kwalifikacji.  
  
 [!code-csharp[AddInP3Host#11](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#11)]
 [!code-vb[AddInP3Host#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający dla danych kwalifikacji segmentów potoku, które są skojarzone z tym tokenem.</summary>
        <returns>Moduł wyliczający, który może służyć do iterowania po danych kwalifikacji segmentów potoku, które są skojarzone z tokenu bieżącego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia token należy traktować jak zbiór elementów danych kwalifikacji, na przykład w `foreach` instrukcji (`For Each` w języku Visual Basic `for each` w programie Visual C++).  
  
 Użyj modułu wyliczającego zwracane przez tę metodę do iteracji elementów danych kwalifikacji segmentów potoku skojarzone z tokenu bieżącego. Każdy element danych kwalifikacja jest <xref:System.AddIn.Hosting.QualificationDataItem> struktury określa segment potok, który zawiera pary nazwa/wartość z <xref:System.AddIn.Pipeline.QualificationDataAttribute> atrybut zastosowany do tego segmentu.  
  
> [!NOTE]
>  Model dodatku nie korzysta z danych kwalifikacja jest stosowany do widoku hosta dodatku. W związku z tym podczas wyliczania kwantyfikacja danych nie można znaleźć żadnego elementy którego <xref:System.AddIn.Hosting.QualificationDataItem.Segment%2A> jest właściwość <xref:System.AddIn.Hosting.AddInSegmentType.HostViewOfAddIn?displayProperty=nameWithType>.  
  
 Alternatywnie można użyć <xref:System.AddIn.Hosting.AddInToken.QualificationData%2A> właściwości do pobrania zagnieżdżony zbiór słowniki zawierający dane kwalifikacji segmentów potoku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="addInToken.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg reprezentujący tokenu.</summary>
        <returns>Ciąg, który reprezentuje token.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public string Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Version" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Version { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Version : string" Usage="System.AddIn.Hosting.AddInToken.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wersję dodatku, jak określono w <see cref="T:System.AddIn.AddInAttribute" /> atrybutu.</summary>
        <value>Wersja dodatku, lub <see langword="null" /> Jeśli numer wersji nie została określona w <see cref="T:System.AddIn.AddInAttribute" /> atrybutu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Numer wersji jest ciągiem.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono wartości <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, i <xref:System.AddIn.Hosting.AddInToken.Version%2A> właściwości do konsoli. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.AddIn.Hosting.AddInToken> klasy.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>