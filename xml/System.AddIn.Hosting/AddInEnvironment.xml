<Type Name="AddInEnvironment" FullName="System.AddIn.Hosting.AddInEnvironment">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4688c8e82a11080413e75e3d7ed499957e509e53" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69342737" /></Metadata><TypeSignature Language="C#" Value="public sealed class AddInEnvironment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AddInEnvironment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Hosting.AddInEnvironment" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AddInEnvironment" />
  <TypeSignature Language="C++ CLI" Value="public ref class AddInEnvironment sealed" />
  <TypeSignature Language="F#" Value="type AddInEnvironment = class" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia dostęp do domeny aplikacji i procesu dodatku.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej klasy, aby załadować Dodatki do żądanego środowiska, które może być jedną z następujących:  
  
-   Istniejąca domena aplikacji, dla której masz <xref:System.AppDomain> obiekt.  
  
-   Domena aplikacji, która została wygenerowana automatycznie w celu aktywowania dodatku.  
  
-   Istniejący proces zewnętrzny.  
  
 Aby uzyskać <xref:System.AddIn.Hosting.AddInEnvironment> obiekt dla dodatku, Przekaż domenę aplikacji dodatku <xref:System.AddIn.Hosting.AddInEnvironment> do konstruktora klasy. Alternatywnie można użyć <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> właściwości <xref:System.AddIn.Hosting.AddInController> klasy, aby uzyskać <xref:System.AddIn.Hosting.AddInEnvironment> obiekt dodatku.  
  
 Po uzyskaniu <xref:System.AddIn.Hosting.AddInEnvironment> obiektu można wykonać następujące czynności:  
  
-   Przekaż ten <xref:System.AddIn.Hosting.AddInEnvironment> obiekt do odpowiedniego <xref:System.AddIn.Hosting.AddInToken.Activate%2A> przeciążenia metody. Dodatek zostanie aktywowany w domenie aplikacji i procesie, który jest reprezentowany przez <xref:System.AddIn.Hosting.AddInEnvironment> obiekt.  
  
-   Użyj właściwości <xref:System.AddIn.Hosting.AddInEnvironment.Process%2A> , aby <xref:System.AddIn.Hosting.AddInProcess> uzyskać obiekt. Następnie Przekaż ten obiekt do odpowiedniego <xref:System.AddIn.Hosting.AddInToken.Activate%2A> przeciążenia metody. Dodatek zostanie aktywowany w procesie, który jest reprezentowany przez <xref:System.AddIn.Hosting.AddInProcess> obiekt, ale w nowej domenie aplikacji.  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/8dd45b02-7218-40f9-857d-40d7b98b850b">Dodatki i rozszerzalność</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AddInEnvironment (AppDomain appDomain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.AppDomain appDomain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInEnvironment.#ctor(System.AppDomain)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AddInEnvironment(AppDomain ^ appDomain);" />
      <MemberSignature Language="F#" Value="new System.AddIn.Hosting.AddInEnvironment : AppDomain -&gt; System.AddIn.Hosting.AddInEnvironment" Usage="new System.AddIn.Hosting.AddInEnvironment appDomain" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="appDomain" Type="System.AppDomain" />
      </Parameters>
      <Docs>
        <param name="appDomain">Domena aplikacji, która zawiera dodatek.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.AddIn.Hosting.AddInEnvironment" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli masz dostęp do domeny aplikacji zawierającej wymagany dodatek, możesz użyć tego konstruktora, aby uzyskać <xref:System.AddIn.Hosting.AddInEnvironment> obiekt dodatku. W przeciwnym razie można użyć <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> właściwości <xref:System.AddIn.Hosting.AddInController> klasy w celu uzyskania <xref:System.AddIn.Hosting.AddInEnvironment> obiektu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="appDomain" />jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Żądanie pełnego zaufania jest żądane. Obiekt wywołujący w łańcuchu wywołań nie ma wystarczających uprawnień.</exception>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature Language="C#" Value="public System.AddIn.Hosting.AddInProcess Process { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AddIn.Hosting.AddInProcess Process" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInEnvironment.Process" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Process As AddInProcess" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::AddIn::Hosting::AddInProcess ^ Process { System::AddIn::Hosting::AddInProcess ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Process : System.AddIn.Hosting.AddInProcess" Usage="System.AddIn.Hosting.AddInEnvironment.Process" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInProcess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.AddIn.Hosting.AddInProcess" /> Pobiera obiekt, który reprezentuje proces, w którym jest uruchomiony dodatek.</summary>
        <value>Proces, w którym działa dodatek.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Za pomocą tej właściwości można aktywować wiele dodatków w tym samym procesie, ale w różnych domenach.  
  
 Przekaż obiekt uzyskany z tą właściwością do odpowiedniego <xref:System.AddIn.Hosting.AddInToken.Activate%2A> przeciążenia metody. <xref:System.AddIn.Hosting.AddInProcess>  
  
 Jeśli chcesz aktywować je w tej samej domenie w procesie zewnętrznym, należy przekazać <xref:System.AddIn.Hosting.AddInEnvironment> obiekt bezpośrednio <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInEnvironment%29?displayProperty=nameWithType> do przeciążenia metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
