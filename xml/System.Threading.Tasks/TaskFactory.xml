<Type Name="TaskFactory" FullName="System.Threading.Tasks.TaskFactory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9098e4d02a13797d5e7e75781d3dab43b4e226f4" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58716335" /></Metadata><TypeSignature Language="C#" Value="public class TaskFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TaskFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class TaskFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class TaskFactory" />
  <TypeSignature Language="F#" Value="type TaskFactory = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="74216-101">Zapewnia obsługę tworzenia i planowania <see cref="T:System.Threading.Tasks.Task" /> obiektów.</span><span class="sxs-lookup"><span data-stu-id="74216-101">Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task" /> objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-102">Program .NET Framework zawiera dwa fabryk dla tworzenia i planowania zadań:</span><span class="sxs-lookup"><span data-stu-id="74216-102">The .NET Framework provides two factories for creating and scheduling tasks:</span></span>  
  
-   <span data-ttu-id="74216-103"><xref:System.Threading.Tasks.TaskFactory> Klasy, która tworzy <xref:System.Threading.Tasks.Task> i <xref:System.Threading.Tasks.Task%601> obiektów.</span><span class="sxs-lookup"><span data-stu-id="74216-103">The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects.</span></span> <span data-ttu-id="74216-104">Można wywoływać przeciążenia tej metody, aby utworzyć i wykonać zadanie, które wymaga argumentów niż domyślne.</span><span class="sxs-lookup"><span data-stu-id="74216-104">You can call the overloads of this method to create and execute a task that requires non-default arguments.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="74216-105">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> metoda zapewnia Najprostszym sposobem utworzenia zadania przy użyciu domyślnej wartości konfiguracji i natychmiast rozpocząć.</span><span class="sxs-lookup"><span data-stu-id="74216-105">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a task with default configuration values and start it immediately.</span></span>  
  
-   <span data-ttu-id="74216-106"><xref:System.Threading.Tasks.TaskFactory%601> Klasy, która tworzy <xref:System.Threading.Tasks.Task%601> obiektów.</span><span class="sxs-lookup"><span data-stu-id="74216-106">The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.</span></span>  
  
 <span data-ttu-id="74216-107"><xref:System.Threading.Tasks.TaskFactory> Klasa umożliwia wykonaj następujące czynności:</span><span class="sxs-lookup"><span data-stu-id="74216-107">The <xref:System.Threading.Tasks.TaskFactory> class allows you to do the following:</span></span>  
  
-   <span data-ttu-id="74216-108">Utwórz zadanie i natychmiast rozpocząć przez wywołanie metody <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="74216-108">Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="74216-109">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> metoda zapewnia Najprostszym sposobem utworzenia zadania przy użyciu domyślnej wartości konfiguracji i natychmiast rozpocząć.</span><span class="sxs-lookup"><span data-stu-id="74216-109">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a task with default configuration values and start it immediately.</span></span>  
  
-   <span data-ttu-id="74216-110">Utwórz zadanie, który rozpoczyna się po zakończeniu dowolnego spośród zadań w tablicy, wywołując <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="74216-110">Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.</span></span>  
  
-   <span data-ttu-id="74216-111">Utwórz zadanie, który rozpoczyna się po zakończeniu wszystkich zadań w tablicy, wywołując <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="74216-111">Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.</span></span>  
  
 <span data-ttu-id="74216-112">Statyczne <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> właściwość zwraca domyślną <xref:System.Threading.Tasks.TaskFactory%601> obiektu.</span><span class="sxs-lookup"><span data-stu-id="74216-112">The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object.</span></span> <span data-ttu-id="74216-113">Można też wywołać jedną z <xref:System.Threading.Tasks.TaskFactory> klasy konstruktorów, aby skonfigurować <xref:System.Threading.Tasks.Task> obiekty, które <xref:System.Threading.Tasks.TaskFactory> tworzy klasę.</span><span class="sxs-lookup"><span data-stu-id="74216-113">You can also call one of the <xref:System.Threading.Tasks.TaskFactory> class constructors to configure the <xref:System.Threading.Tasks.Task> objects that  the <xref:System.Threading.Tasks.TaskFactory> class creates.</span></span> <span data-ttu-id="74216-114">Poniższy przykład umożliwia skonfigurowanie nowego <xref:System.Threading.Tasks.TaskFactory> obiektu do utworzenia zadania, które mają token anulowania określonego, opcje tworzenia zadań, opcje kontynuacji i harmonogramu zadań dostosowane.</span><span class="sxs-lookup"><span data-stu-id="74216-114">The following example configures a new <xref:System.Threading.Tasks.TaskFactory> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.</span></span>  
  
 [!code-csharp[TPL_Factories#1](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/program.cs#1)]
 [!code-vb[TPL_Factories#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factories_vb.vb#1)]  
  
 <span data-ttu-id="74216-115">W większości przypadków nie trzeba utworzyć <xref:System.Threading.Tasks.TaskFactory> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="74216-115">In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory> instance.</span></span> <span data-ttu-id="74216-116">Zamiast tego można użyć <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> właściwość, która zwraca obiekt fabryki, który używa domyślnych wartości.</span><span class="sxs-lookup"><span data-stu-id="74216-116">Instead, you can use the <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> property, which returns a factory object that uses default values.</span></span> <span data-ttu-id="74216-117">Następnie możesz wywołać jego metody, aby uruchomić nowe zadania lub zdefiniować kontynuacji zadań.</span><span class="sxs-lookup"><span data-stu-id="74216-117">You can then call its methods to start new tasks or define task continuations.</span></span> <span data-ttu-id="74216-118">Ilustracja znajduje się w tym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="74216-118">For an illustration, see the example.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74216-119">W poniższym przykładzie użyto statycznego <xref:System.Threading.Tasks.Task.Factory%2A> właściwość, aby wykonywać wywołania dwóch <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="74216-119">The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="74216-120">Pierwszy wypełnia tablicę z nazwami plików w katalogu Moje dokumenty użytkownika, podczas gdy drugi wypełnia tablicę z nazwami podkatalogi katalogu Moje dokumenty użytkownika.</span><span class="sxs-lookup"><span data-stu-id="74216-120">The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory.</span></span> <span data-ttu-id="74216-121">Następnie wywołuje <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> metody, która wyświetla informacje o liczbie plików i katalogów w dwóch tablicach, po pierwsze dwa zadania zostaną ukończone.</span><span class="sxs-lookup"><span data-stu-id="74216-121">It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="74216-122">Wszystkie publiczne i chronione elementy członkowskie <see cref="T:System.Threading.Tasks.TaskFactory" /> są odporne na wątki i mogą być używane jednocześnie z wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="74216-122">All public and protected members of <see cref="T:System.Threading.Tasks.TaskFactory" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-123">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-123">Task Parallel Library (TPL)</span></span></related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="74216-124">Przykłady dotyczące programowania równoległego za pomocą programu .NET Framework</span><span class="sxs-lookup"><span data-stu-id="74216-124">Samples for Parallel Programming with the .NET Framework</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="74216-125">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.Tasks.TaskFactory" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="74216-125">Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskFactory" /> class.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-126">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-126">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="74216-127">Inicjuje <see cref="T:System.Threading.Tasks.TaskFactory" /> wystąpienie z konfiguracji domyślnej.</span><span class="sxs-lookup"><span data-stu-id="74216-127">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the default configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-128">Ten konstruktor tworzy <xref:System.Threading.Tasks.TaskFactory> wystąpienia z domyślną konfiguracją.</span><span class="sxs-lookup"><span data-stu-id="74216-128">This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration.</span></span> <span data-ttu-id="74216-129"><xref:System.Threading.Tasks.TaskCreationOptions> Właściwość jest inicjowana do <xref:System.Threading.Tasks.TaskCreationOptions.None>, <xref:System.Threading.Tasks.TaskContinuationOptions> właściwość jest inicjowana do <xref:System.Threading.Tasks.TaskContinuationOptions.None>i <xref:System.Threading.Tasks.TaskScheduler> właściwość jest inicjowana do bieżącego harmonogramu (zobacz <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="74216-129">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-130">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-130">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.CancellationToken -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory cancellationToken" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="74216-131"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> Która zostanie przypisana do zadania utworzone przez to <see cref="T:System.Threading.Tasks.TaskFactory" /> chyba, że inny token anulowania jest jawnie określona podczas wywoływania metod fabryki.</span><span class="sxs-lookup"><span data-stu-id="74216-131">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</span></span></param>
        <summary><span data-ttu-id="74216-132">Inicjuje <see cref="T:System.Threading.Tasks.TaskFactory" /> wystąpienia z określoną konfiguracją.</span><span class="sxs-lookup"><span data-stu-id="74216-132">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-133">Ten konstruktor tworzy <xref:System.Threading.Tasks.TaskFactory> wystąpienia z domyślną konfiguracją.</span><span class="sxs-lookup"><span data-stu-id="74216-133">This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration.</span></span> <span data-ttu-id="74216-134"><xref:System.Threading.Tasks.TaskCreationOptions> Właściwość jest inicjowana do <xref:System.Threading.Tasks.TaskCreationOptions.None>, <xref:System.Threading.Tasks.TaskContinuationOptions> właściwość jest inicjowana do <xref:System.Threading.Tasks.TaskContinuationOptions.None>i <xref:System.Threading.Tasks.TaskScheduler> właściwość jest inicjowana do bieżącego harmonogramu (zobacz <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="74216-134">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-135">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-135">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="74216-136">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="74216-136">Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory scheduler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler"><span data-ttu-id="74216-137"><see cref="T:System.Threading.Tasks.TaskScheduler" /> Na potrzeby zaplanować wszystkie zadania utworzone za pomocą tego TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="74216-137">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any tasks created with this TaskFactory.</span></span> <span data-ttu-id="74216-138">Wartość zerowa wskazuje, że bieżący TaskScheduler powinien być używany.</span><span class="sxs-lookup"><span data-stu-id="74216-138">A null value indicates that the current TaskScheduler should be used.</span></span></param>
        <summary><span data-ttu-id="74216-139">Inicjuje <see cref="T:System.Threading.Tasks.TaskFactory" /> wystąpienia z określoną konfiguracją.</span><span class="sxs-lookup"><span data-stu-id="74216-139">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-140">Za pomocą tego konstruktora <xref:System.Threading.Tasks.TaskCreationOptions> właściwość jest inicjowana do <xref:System.Threading.Tasks.TaskCreationOptions.None>, <xref:System.Threading.Tasks.TaskContinuationOptions> właściwość jest inicjowana do <xref:System.Threading.Tasks.TaskContinuationOptions.None>i <xref:System.Threading.Tasks.TaskScheduler> właściwość jest inicjowana do `scheduler`, chyba że ma on wartość null, w którym to przypadku Właściwość jest inicjowana do bieżącego harmonogramu (zobacz <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="74216-140">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-141">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-141">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-142">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-142">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory (creationOptions, continuationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="creationOptions"><span data-ttu-id="74216-143">Wartość domyślna <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> do użycia podczas tworzenia zadania przy użyciu tego TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="74216-143">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-144">Wartość domyślna <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> do użycia podczas tworzenia zadań kontynuacji z tego TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="74216-144">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory.</span></span></param>
        <summary><span data-ttu-id="74216-145">Inicjuje <see cref="T:System.Threading.Tasks.TaskFactory" /> wystąpienia z określoną konfiguracją.</span><span class="sxs-lookup"><span data-stu-id="74216-145">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-146">Za pomocą tego konstruktora <xref:System.Threading.Tasks.TaskCreationOptions> właściwość jest inicjowana do `creationOptions`, <xref:System.Threading.Tasks.TaskContinuationOptions> właściwość jest inicjowana do `continuationOptions`i <xref:System.Threading.Tasks.TaskScheduler> właściwość jest inicjowana do bieżącego harmonogramu (zobacz <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="74216-146">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-147"><paramref name="creationOptions" /> Argument określa nieprawidłowy <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="74216-147">The <paramref name="creationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value.</span></span> <span data-ttu-id="74216-148">Aby uzyskać więcej informacji, zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="74216-148">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span></span>  
  
<span data-ttu-id="74216-149">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-149">-or-</span></span> 
<span data-ttu-id="74216-150"><paramref name="continuationOptions" /> Argument określa nieprawidłową wartość.</span><span class="sxs-lookup"><span data-stu-id="74216-150">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-151">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-151">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-152">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-152">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory (cancellationToken, creationOptions, continuationOptions, scheduler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="74216-153">Wartość domyślna <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> która zostanie przypisana do zadania utworzone przez to <see cref="T:System.Threading.Tasks.TaskFactory" /> chyba, że inny token anulowania jest jawnie określona podczas wywoływania metod fabryki.</span><span class="sxs-lookup"><span data-stu-id="74216-153">The default <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-154">Wartość domyślna <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> do użycia podczas tworzenia zadania przy użyciu tego TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="74216-154">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-155">Wartość domyślna <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> do użycia podczas tworzenia zadań kontynuacji z tego TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="74216-155">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory.</span></span></param>
        <param name="scheduler"><span data-ttu-id="74216-156">Wartość domyślna <see cref="T:System.Threading.Tasks.TaskScheduler" /> na potrzeby zaplanować wszystkie zadania utworzone za pomocą tego TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="74216-156">The default <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any Tasks created with this TaskFactory.</span></span> <span data-ttu-id="74216-157">Wartość zerowa wskazuje, że TaskScheduler.Current powinien być używany.</span><span class="sxs-lookup"><span data-stu-id="74216-157">A null value indicates that TaskScheduler.Current should be used.</span></span></param>
        <summary><span data-ttu-id="74216-158">Inicjuje <see cref="T:System.Threading.Tasks.TaskFactory" /> wystąpienia z określoną konfiguracją.</span><span class="sxs-lookup"><span data-stu-id="74216-158">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-159">Za pomocą tego konstruktora <xref:System.Threading.Tasks.TaskCreationOptions> właściwość jest inicjowana do `creationOptions`, <xref:System.Threading.Tasks.TaskContinuationOptions> właściwość jest inicjowana do `continuationOptions`i <xref:System.Threading.Tasks.TaskScheduler> właściwość jest inicjowana do `scheduler`, chyba że ma on wartość null, w którym to przypadku Właściwość jest inicjowana do bieżącego harmonogramu (zobacz <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="74216-159">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-160"><paramref name="creationOptions" /> Argument określa nieprawidłowy <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="74216-160">The <paramref name="creationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value.</span></span> <span data-ttu-id="74216-161">Aby uzyskać więcej informacji, zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="74216-161">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span></span>  
  
<span data-ttu-id="74216-162">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-162">-or-</span></span> 
<span data-ttu-id="74216-163"><paramref name="continuationOptions" /> Argument określa nieprawidłową wartość.</span><span class="sxs-lookup"><span data-stu-id="74216-163">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-164">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-164">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-165">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-165">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken CancellationToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken CancellationToken" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.CancellationToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationToken As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::CancellationToken CancellationToken { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.CancellationToken : System.Threading.CancellationToken" Usage="System.Threading.Tasks.TaskFactory.CancellationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="74216-166">Pobiera token anulowania domyślny dla tej fabryki zadań.</span><span class="sxs-lookup"><span data-stu-id="74216-166">Gets the default cancellation token for this task factory.</span></span></summary>
        <value><span data-ttu-id="74216-167">Domyślny token anulowania zadań dla tej fabryki zadań.</span><span class="sxs-lookup"><span data-stu-id="74216-167">The default task cancellation token for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-168">Ta właściwość zwraca wartość domyślna <xref:System.Threading.CancellationToken> którzy zostaną przypisani do wszystkich zadań utworzonych przez tej fabryce, chyba że innego <xref:System.Threading.CancellationToken> jest jawnie określona podczas wywołania do metod fabryki.</span><span class="sxs-lookup"><span data-stu-id="74216-168">This property returns the default <xref:System.Threading.CancellationToken> that will be assigned to all tasks created by this factory, unless another <xref:System.Threading.CancellationToken> value is explicitly specified during the call to the factory methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-169">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-169">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-170">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-170">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-171">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-171">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinuationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskContinuationOptions ContinuationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.ContinuationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContinuationOptions As TaskContinuationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskContinuationOptions ContinuationOptions { System::Threading::Tasks::TaskContinuationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.ContinuationOptions : System.Threading.Tasks.TaskContinuationOptions" Usage="System.Threading.Tasks.TaskFactory.ContinuationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskContinuationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="74216-172">Pobiera domyślne opcje kontynuacji zadań dla tej fabryki zadań.</span><span class="sxs-lookup"><span data-stu-id="74216-172">Gets the default task continuation options for this task factory.</span></span></summary>
        <value><span data-ttu-id="74216-173">Domyślne opcje kontynuacji zadań dla tej fabryki zadań.</span><span class="sxs-lookup"><span data-stu-id="74216-173">The default task continuation options for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-174">Wartość właściwości służy do tworzenia wszystkich zadań kontynuacji, chyba że inne opcje są jawnie określone podczas wywołania metody tej fabryki.</span><span class="sxs-lookup"><span data-stu-id="74216-174">The property value is used to create all continuation tasks, unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-175">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-175">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-176">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-176">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="74216-177">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-177">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="74216-178">Przykłady dotyczące programowania równoległego za pomocą programu .NET Framework</span><span class="sxs-lookup"><span data-stu-id="74216-178">Samples for Parallel Programming with the .NET Framework</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationAction As Action(Of Task())) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="74216-179">Tablica zadań, z którego można kontynuować.</span><span class="sxs-lookup"><span data-stu-id="74216-179">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="74216-180">Delegat akcji do wykonania, gdy wszystkie zadania w <paramref name="tasks" /> tablicy została ukończona.</span><span class="sxs-lookup"><span data-stu-id="74216-180">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="74216-181">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-181">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="74216-182">Nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-182">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-183"><xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> Metoda jest wykonywana `continuationAction` delegata, gdy wszystkie zadania w programie `tasks` tablicy została ukończona, niezależnie od ich stany ukończenia.</span><span class="sxs-lookup"><span data-stu-id="74216-183">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.</span></span>  
  
 <span data-ttu-id="74216-184">Wyjątki generowane przez zadania w `tasks` tablicy nie są dostępne dla zadania kontynuacji, za pomocą strukturalna Obsługa wyjątków.</span><span class="sxs-lookup"><span data-stu-id="74216-184">Exceptions thrown by tasks in the `tasks` array are not available to the continuation task through structured exception handling.</span></span> <span data-ttu-id="74216-185">Można określić, wyjątki, które zostały zgłoszone, sprawdzając <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType> właściwości każdego zadania w `tasks` tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-185">You can determine which exceptions were thrown by examining the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType> property of each task in the `tasks` array.</span></span> <span data-ttu-id="74216-186">Aby użyć obsługi wyjątków strukturalnych do obsługi wyjątków zgłaszanych przez zadania w `tasks` tablicy, wywołania <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="74216-186">To use structured exception handling to handle exceptions thrown by tasks in the `tasks` array, call the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74216-187">Poniższy przykład powoduje uruchomienie poszczególnych zadań korzystających z wyrażeń regularnych do zliczania wyrazów w zestawie plików tekstowych.</span><span class="sxs-lookup"><span data-stu-id="74216-187">The following example launches separate tasks that use a regular expression to count the number of words in a set of text files.</span></span> <span data-ttu-id="74216-188"><xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> Metoda jest używana do uruchomienia zadania, które wyświetla liczbę całkowita słowa, po zakończeniu zadania poprzedzającego.</span><span class="sxs-lookup"><span data-stu-id="74216-188">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method is used to launch a task that displays the total word count when all the antecedent tasks have completed.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWhenAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/cs/continuewhenall1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWhenAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/vb/continuewhenall1.vb#1)]  
  
 <span data-ttu-id="74216-189">Wywołanie zadania kontynuacji <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> nie zezwala na to obsłużyć wyjątki wyrzucane przez zadania poprzedzającego, więc przykład sprawdza, czy metoda <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> właściwości każdego zadania poprzedzającego w celu ustalenia, czy zadanie zakończyło się pomyślnie.</span><span class="sxs-lookup"><span data-stu-id="74216-189">The call to the continuation task's <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method does not allow it to handle exceptions thrown by the antecedent tasks, so the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property of each antecedent task to determine whether the task succeeded.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-190">Element <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-190">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-191"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-191">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-192">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-192">-or-</span></span> 
<span data-ttu-id="74216-193"><paramref name="continuationAction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-193">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-194"><paramref name="tasks" /> Tablica jest pusta lub zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-194">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-195">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-195">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-196">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-196">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="74216-197">Tablica zadań, z którego można kontynuować.</span><span class="sxs-lookup"><span data-stu-id="74216-197">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="74216-198">Delegat akcji do wykonania, gdy wszystkie zadania w <paramref name="tasks" /> tablicy została ukończona.</span><span class="sxs-lookup"><span data-stu-id="74216-198">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-199">Token anulowania, który można przypisać do nowego zadania kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-199">The cancellation token to assign to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="74216-200">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-200">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="74216-201">Nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-201">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-202">The [\], Action(Task\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%2CSystem.Threading.CancellationToken%29> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.</span><span class="sxs-lookup"><span data-stu-id="74216-202">The [\], Action(Task\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%2CSystem.Threading.CancellationToken%29> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74216-203">Poniższy przykład tworzy token anulowania, który przejdzie do rozdzielania zadań wykonywanych za pomocą wyrażeń regularnych do zliczania wyrazów w zestawie plików tekstowych.</span><span class="sxs-lookup"><span data-stu-id="74216-203">The following example creates a cancellation token, which it passes to separate tasks that use a regular expression to count the number of words in a set of text files.</span></span> <span data-ttu-id="74216-204">Token anulowania jest ustawiona, jeśli nie można odnaleźć pliku.</span><span class="sxs-lookup"><span data-stu-id="74216-204">The cancellation token is set if a file cannot be found.</span></span> <span data-ttu-id="74216-205">[\], Akcji (zadanie\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A > Metoda jest używana do uruchomienia zadania, które wyświetla liczbę całkowita słowa, po zakończeniu zadania poprzedzającego.</span><span class="sxs-lookup"><span data-stu-id="74216-205">The [\], Action(Task\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method is used to launch a task that displays the total word count when all the antecedent tasks have completed.</span></span> <span data-ttu-id="74216-206">Jeśli ustawiono token anulowania, co oznacza, że co najmniej jedno zadanie zostało anulowane, obsługuje on <xref:System.AggregateException> wyjątek i wyświetla komunikat o błędzie.</span><span class="sxs-lookup"><span data-stu-id="74216-206">If the cancellation token is set, which indicates that one or more tasks have been cancelled, it handles the <xref:System.AggregateException> exception and displays an error message.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWhenAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/cs/continuewhenall2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWhenAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/vb/continuewhenall2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-207">Element <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-207">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="74216-208">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-208">-or-</span></span> 
<span data-ttu-id="74216-209"><see cref="T:System.Threading.CancellationTokenSource" /> Utworzonego <paramref name="cancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-209">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-210"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-210">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-211">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-211">-or-</span></span> 
<span data-ttu-id="74216-212"><paramref name="continuationAction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-212">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-213"><paramref name="tasks" /> Tablica jest pusta lub zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-213">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-214">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-214">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-215">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-215">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationAction As Action(Of Task()), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="74216-216">Tablica zadań, z którego można kontynuować.</span><span class="sxs-lookup"><span data-stu-id="74216-216">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="74216-217">Delegat akcji do wykonania, gdy wszystkie zadania w <paramref name="tasks" /> tablicy została ukończona.</span><span class="sxs-lookup"><span data-stu-id="74216-217">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-218">Bitowa kombinacja wartości wyliczenia, które kontrolują zachowanie nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-218">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="74216-219">NotOn \* i \* zadziała tylko elementy członkowskie nie są obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="74216-219">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <summary><span data-ttu-id="74216-220">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-220">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="74216-221">Nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-221">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-222">Element <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-222">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-223"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-223">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-224">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-224">-or-</span></span> 
<span data-ttu-id="74216-225"><paramref name="continuationAction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-225">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-226"><paramref name="continuationOptions" /> Argument określa nieprawidłową wartość.</span><span class="sxs-lookup"><span data-stu-id="74216-226">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-227"><paramref name="tasks" /> Tablica jest pusta lub zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-227">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-228">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-228">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-229">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-229">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="74216-230">Tablica zadań, z którego można kontynuować.</span><span class="sxs-lookup"><span data-stu-id="74216-230">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="74216-231">Delegat akcji do wykonania, gdy wszystkie zadania w <paramref name="tasks" /> tablicy została ukończona.</span><span class="sxs-lookup"><span data-stu-id="74216-231">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-232">Token anulowania, który można przypisać do nowego zadania kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-232">The cancellation token to assign to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-233">Bitowa kombinacja wartości wyliczenia, które kontrolują zachowanie nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-233">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span></param>
        <param name="scheduler"><span data-ttu-id="74216-234">Obiekt, który jest używany do planowania nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-234">The object that is used to schedule the new continuation task.</span></span></param>
        <summary><span data-ttu-id="74216-235">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-235">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="74216-236">Nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-236">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-237"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-237">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-238">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-238">-or-</span></span> 
<span data-ttu-id="74216-239"><paramref name="continuationAction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-239">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-240">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-240">-or-</span></span> 
<span data-ttu-id="74216-241"><paramref name="scheduler" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-241">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-242"><paramref name="tasks" /> Tablica jest pusta lub zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-242">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-243">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-243">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-244">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-244">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)())) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="74216-245">Typ wyniku zadania poprzedzającego <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="74216-245">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-246">Tablica zadań, z którego można kontynuować.</span><span class="sxs-lookup"><span data-stu-id="74216-246">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="74216-247">Delegat akcji do wykonania, gdy wszystkie zadania w <paramref name="tasks" /> tablicy została ukończona.</span><span class="sxs-lookup"><span data-stu-id="74216-247">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="74216-248">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-248">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="74216-249">Nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-249">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-250">Element <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-250">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-251"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-251">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-252">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-252">-or-</span></span> 
<span data-ttu-id="74216-253"><paramref name="continuationAction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-253">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-254"><paramref name="tasks" /> Tablica jest pusta lub zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-254">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-255">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-255">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-256">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-256">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-257">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-257">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="74216-258">Typ wyniku zadania poprzedzającego <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="74216-258">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-259">Tablica zadań, z którego można kontynuować.</span><span class="sxs-lookup"><span data-stu-id="74216-259">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="74216-260">Delegat akcji do wykonania, gdy wszystkie zadania w <paramref name="tasks" /> tablicy została ukończona.</span><span class="sxs-lookup"><span data-stu-id="74216-260">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-261">Token anulowania, który można przypisać do nowego zadania kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-261">The cancellation token to assign to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="74216-262">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-262">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="74216-263">Nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-263">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-264">Element <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-264">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="74216-265">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-265">-or-</span></span> 
<span data-ttu-id="74216-266"><see cref="T:System.Threading.CancellationTokenSource" /> Utworzonego <paramref name="cancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-266">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-267"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-267">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-268">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-268">-or-</span></span> 
<span data-ttu-id="74216-269"><paramref name="continuationAction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-269">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-270"><paramref name="tasks" /> Tablica jest pusta lub zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-270">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-271">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-271">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-272">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-272">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-273">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-273">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="74216-274">Typ wyniku zadania poprzedzającego <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="74216-274">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-275">Tablica zadań, z którego można kontynuować.</span><span class="sxs-lookup"><span data-stu-id="74216-275">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="74216-276">Delegat akcji do wykonania, gdy wszystkie zadania w <paramref name="tasks" /> tablicy została ukończona.</span><span class="sxs-lookup"><span data-stu-id="74216-276">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-277">Bitowa kombinacja wartości wyliczenia, które kontrolują zachowanie nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-277">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="74216-278">NotOn \* i \* zadziała tylko elementy członkowskie nie są obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="74216-278">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <summary><span data-ttu-id="74216-279">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-279">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="74216-280">Nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-280">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-281">Element <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-281">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-282"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-282">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-283">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-283">-or-</span></span> 
<span data-ttu-id="74216-284"><paramref name="continuationAction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-284">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-285"><paramref name="continuationOptions" /> Argument określa nieprawidłową wartość.</span><span class="sxs-lookup"><span data-stu-id="74216-285">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-286"><paramref name="tasks" /> Tablica jest pusta lub zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-286">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-287">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-287">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-288">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-288">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-289">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-289">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="74216-290">Typ wyniku zadania poprzedzającego <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="74216-290">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-291">Tablica zadań, z którego można kontynuować.</span><span class="sxs-lookup"><span data-stu-id="74216-291">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="74216-292">Delegat akcji do wykonania, gdy wszystkie zadania w <paramref name="tasks" /> tablicy została ukończona.</span><span class="sxs-lookup"><span data-stu-id="74216-292">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-293">Token anulowania, który można przypisać do nowego zadania kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-293">The cancellation token to assign to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-294">Bitowa kombinacja wartości wyliczenia, które kontrolują zachowanie nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-294">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="74216-295">NotOn \* i \* zadziała tylko elementy członkowskie nie są obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="74216-295">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <param name="scheduler"><span data-ttu-id="74216-296">Obiekt, który jest używany do planowania nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-296">The object that is used to schedule the new continuation task.</span></span></param>
        <summary><span data-ttu-id="74216-297">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-297">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="74216-298">Nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-298">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-299"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-299">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-300">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-300">-or-</span></span> 
<span data-ttu-id="74216-301"><paramref name="continuationAction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-301">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-302">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-302">-or-</span></span> 
<span data-ttu-id="74216-303"><paramref name="scheduler" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-303">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-304"><paramref name="tasks" /> Tablica jest pusta lub zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-304">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-305">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-305">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-306">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-306">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-307">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-307">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-308">Typ wyniku, który jest zwracany przez <paramref name="continuationFunction" /> delegować i skojarzonych z utworzonego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-308">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-309">Tablica zadań, z którego można kontynuować.</span><span class="sxs-lookup"><span data-stu-id="74216-309">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="74216-310">Delegat funkcji asynchroniczne wykonywanie, gdy wszystkie zadania w programie <paramref name="tasks" /> tablicy została ukończona.</span><span class="sxs-lookup"><span data-stu-id="74216-310">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="74216-311">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-311">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="74216-312">Nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-312">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-313">Element <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-313">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-314"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-314">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-315">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-315">-or-</span></span> 
<span data-ttu-id="74216-316"><paramref name="continuationFunction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-316">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-317"><paramref name="tasks" /> Tablica jest pusta lub zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-317">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-318">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-318">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-319">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-319">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-320">Typ wyniku, który jest zwracany przez <paramref name="continuationFunction" /> delegować i skojarzonych z utworzonego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-320">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-321">Tablica zadań, z którego można kontynuować.</span><span class="sxs-lookup"><span data-stu-id="74216-321">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="74216-322">Delegat funkcji asynchroniczne wykonywanie, gdy wszystkie zadania w programie <paramref name="tasks" /> tablicy została ukończona.</span><span class="sxs-lookup"><span data-stu-id="74216-322">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-323">Token anulowania, który można przypisać do nowego zadania kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-323">The cancellation token to assign to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="74216-324">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-324">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="74216-325">Nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-325">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-326">Element <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-326">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="74216-327">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-327">-or-</span></span> 
<span data-ttu-id="74216-328"><see cref="T:System.Threading.CancellationTokenSource" /> Utworzonego <paramref name="cancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-328">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-329"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-329">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-330">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-330">-or-</span></span> 
<span data-ttu-id="74216-331"><paramref name="continuationFunction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-331">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-332"><paramref name="tasks" /> Tablica jest pusta lub zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-332">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-333">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-333">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-334">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-334">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-335">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-335">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-336">Typ wyniku, który jest zwracany przez <paramref name="continuationFunction" /> delegować i skojarzonych z utworzonego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-336">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-337">Tablica zadań, z którego można kontynuować.</span><span class="sxs-lookup"><span data-stu-id="74216-337">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="74216-338">Delegat funkcji asynchroniczne wykonywanie, gdy wszystkie zadania w programie <paramref name="tasks" /> tablicy została ukończona.</span><span class="sxs-lookup"><span data-stu-id="74216-338">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-339">Bitowa kombinacja wartości wyliczenia, które kontrolują zachowanie nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-339">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="74216-340">NotOn \* i \* zadziała tylko elementy członkowskie nie są obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="74216-340">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <summary><span data-ttu-id="74216-341">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-341">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="74216-342">Nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-342">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-343">Element <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-343">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-344"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-344">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-345">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-345">-or-</span></span> 
<span data-ttu-id="74216-346"><paramref name="continuationFunction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-346">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-347"><paramref name="continuationOptions" /> Argument określa nieprawidłową wartość.</span><span class="sxs-lookup"><span data-stu-id="74216-347">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-348"><paramref name="tasks" /> Tablica jest pusta lub zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-348">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-349">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-349">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-350">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-350">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-351">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-351">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-352">Typ wyniku, który jest zwracany przez <paramref name="continuationFunction" /> delegować i skojarzonych z utworzonego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-352">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-353">Tablica zadań, z którego można kontynuować.</span><span class="sxs-lookup"><span data-stu-id="74216-353">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="74216-354">Delegat funkcji asynchroniczne wykonywanie, gdy wszystkie zadania w programie <paramref name="tasks" /> tablicy została ukończona.</span><span class="sxs-lookup"><span data-stu-id="74216-354">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-355">Token anulowania, który można przypisać do nowego zadania kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-355">The cancellation token to assign to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-356">Bitowa kombinacja wartości wyliczenia, które kontrolują zachowanie nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-356">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="74216-357">NotOn \* i \* zadziała tylko elementy członkowskie nie są obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="74216-357">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <param name="scheduler"><span data-ttu-id="74216-358">Obiekt, który jest używany do planowania nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-358">The object that is used to schedule the new continuation task.</span></span></param>
        <summary><span data-ttu-id="74216-359">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-359">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="74216-360">Nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-360">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-361"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-361">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-362">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-362">-or-</span></span> 
<span data-ttu-id="74216-363"><paramref name="continuationFunction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-363">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-364">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-364">-or-</span></span> 
<span data-ttu-id="74216-365"><paramref name="scheduler" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-365">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-366"><paramref name="tasks" /> Tablica jest pusta lub zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-366">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-367">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-367">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-368">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-368">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-369">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-369">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="74216-370">Typ wyniku zadania poprzedzającego <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="74216-370">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="74216-371">Typ wyniku, który jest zwracany przez <paramref name="continuationFunction" /> delegować i skojarzonych z utworzonego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-371">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-372">Tablica zadań, z którego można kontynuować.</span><span class="sxs-lookup"><span data-stu-id="74216-372">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="74216-373">Delegat funkcji asynchroniczne wykonywanie, gdy wszystkie zadania w programie <paramref name="tasks" /> tablicy została ukończona.</span><span class="sxs-lookup"><span data-stu-id="74216-373">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="74216-374">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-374">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="74216-375">Nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-375">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-376">Element <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-376">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-377"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-377">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-378">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-378">-or-</span></span> 
<span data-ttu-id="74216-379"><paramref name="continuationFunction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-379">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-380"><paramref name="tasks" /> Tablica jest pusta lub zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-380">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-381">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-381">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-382">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-382">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-383">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-383">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="74216-384">Typ wyniku zadania poprzedzającego <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="74216-384">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="74216-385">Typ wyniku, który jest zwracany przez <paramref name="continuationFunction" /> delegować i skojarzonych z utworzonego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-385">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-386">Tablica zadań, z którego można kontynuować.</span><span class="sxs-lookup"><span data-stu-id="74216-386">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="74216-387">Delegat funkcji asynchroniczne wykonywanie, gdy wszystkie zadania w programie <paramref name="tasks" /> tablicy została ukończona.</span><span class="sxs-lookup"><span data-stu-id="74216-387">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-388">Token anulowania, który można przypisać do nowego zadania kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-388">The cancellation token to assign to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="74216-389">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-389">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="74216-390">Nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-390">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-391">Element <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-391">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="74216-392">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-392">-or-</span></span> 
<span data-ttu-id="74216-393"><see cref="T:System.Threading.CancellationTokenSource" /> Utworzonego <paramref name="cancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-393">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-394"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-394">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-395">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-395">-or-</span></span> 
<span data-ttu-id="74216-396"><paramref name="continuationFunction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-396">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-397"><paramref name="tasks" /> Tablica jest pusta lub zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-397">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-398">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-398">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-399">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-399">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-400">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-400">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="74216-401">Typ wyniku zadania poprzedzającego <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="74216-401">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="74216-402">Typ wyniku, który jest zwracany przez <paramref name="continuationFunction" /> delegować i skojarzonych z utworzonego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-402">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-403">Tablica zadań, z którego można kontynuować.</span><span class="sxs-lookup"><span data-stu-id="74216-403">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="74216-404">Delegat funkcji asynchroniczne wykonywanie, gdy wszystkie zadania w programie <paramref name="tasks" /> tablicy została ukończona.</span><span class="sxs-lookup"><span data-stu-id="74216-404">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-405">Bitowa kombinacja wartości wyliczenia, które kontrolują zachowanie nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-405">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="74216-406">NotOn \* i \* zadziała tylko elementy członkowskie nie są obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="74216-406">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <summary><span data-ttu-id="74216-407">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-407">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="74216-408">Nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-408">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-409">Element <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-409">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-410"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-410">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-411">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-411">-or-</span></span> 
<span data-ttu-id="74216-412"><paramref name="continuationFunction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-412">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-413"><paramref name="continuationOptions" /> Argument określa nieprawidłową wartość.</span><span class="sxs-lookup"><span data-stu-id="74216-413">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-414"><paramref name="tasks" /> Tablica jest pusta lub zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-414">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-415">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-415">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-416">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-416">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-417">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-417">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="74216-418">Typ wyniku zadania poprzedzającego <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="74216-418">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="74216-419">Typ wyniku, który jest zwracany przez <paramref name="continuationFunction" /> delegować i skojarzonych z utworzonego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-419">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-420">Tablica zadań, z którego można kontynuować.</span><span class="sxs-lookup"><span data-stu-id="74216-420">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="74216-421">Delegat funkcji asynchroniczne wykonywanie, gdy wszystkie zadania w programie <paramref name="tasks" /> tablicy została ukończona.</span><span class="sxs-lookup"><span data-stu-id="74216-421">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-422">Token anulowania, który można przypisać do nowego zadania kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-422">The cancellation token to assign to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-423">Bitowa kombinacja wartości wyliczenia, które kontrolują zachowanie nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-423">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="74216-424">NotOn \* i \* zadziała tylko elementy członkowskie nie są obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="74216-424">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <param name="scheduler"><span data-ttu-id="74216-425">Obiekt, który jest używany do planowania nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-425">The object that is used to schedule the new continuation task.</span></span></param>
        <summary><span data-ttu-id="74216-426">Tworzy zadanie kontynuacji, który rozpoczyna się po zakończeniu zestawu zadań określony.</span><span class="sxs-lookup"><span data-stu-id="74216-426">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="74216-427">Nowe zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-427">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-428"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-428">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-429">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-429">-or-</span></span> 
<span data-ttu-id="74216-430"><paramref name="continuationFunction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-430">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-431">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-431">-or-</span></span> 
<span data-ttu-id="74216-432"><paramref name="scheduler" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-432">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-433"><paramref name="tasks" /> Tablica jest pusta lub zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-433">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-434"><paramref name="continuationOptions" /> Argument określa nieprawidłową wartość.</span><span class="sxs-lookup"><span data-stu-id="74216-434">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-435">Element <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-435">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="74216-436">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-436">-or-</span></span> 
<span data-ttu-id="74216-437"><see cref="T:System.Threading.CancellationTokenSource" /> Utworzonego <paramref name="cancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-437">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-438">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-438">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-439">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-439">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-440">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-440">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="74216-441">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-441">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-442">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-442">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-443">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-443">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-444">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-444">Task Cancellation</span></span></related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="74216-445">Przykłady dotyczące programowania równoległego za pomocą programu .NET Framework</span><span class="sxs-lookup"><span data-stu-id="74216-445">Samples for Parallel Programming with the .NET Framework</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationAction As Action(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="74216-446">Tablica zadań, z którego można kontynuować po zakończeniu jednego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-446">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="74216-447">Delegat akcji do wykonania, gdy jedno zadanie w <paramref name="tasks" /> kończy tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-447">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="74216-448">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-448">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="74216-449">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-449">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="74216-450">Poniższy przykład pokazuje, jak używać `ContinueWhenAny` i `ContinueWhenAll`:</span><span class="sxs-lookup"><span data-stu-id="74216-450">The following example shows how to use `ContinueWhenAny` and `ContinueWhenAll`:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuewhenmulti.cs#05)]
 [!code-vb[System.Threading.Tasks.Task#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuewhenmulti.vb#05)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-451">Jeden z elementów w <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-451">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-452"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-452">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-453">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-453">-or-</span></span> 
<span data-ttu-id="74216-454"><paramref name="continuationAction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-454">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-455"><paramref name="tasks" /> Tablica zawiera <see langword="null" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="74216-455">The <paramref name="tasks" /> array contains a <see langword="null" /> value.</span></span>  
  
<span data-ttu-id="74216-456">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-456">-or-</span></span> 
<span data-ttu-id="74216-457"><paramref name="tasks" /> Tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="74216-457">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-458">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-458">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-459">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-459">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-460">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-460">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="74216-461">Tablica zadań, z którego można kontynuować po zakończeniu jednego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-461">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="74216-462">Delegat akcji do wykonania, gdy jedno zadanie w <paramref name="tasks" /> kończy tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-462">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-463"><see cref="T:System.Threading.CancellationToken" /> , Zostanie przypisany do nowego zadania kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-463">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="74216-464">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-464">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="74216-465">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-465">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-466">Jeden z elementów w <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-466">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="74216-467">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-467">-or-</span></span> 
 <span data-ttu-id="74216-468"><paramref name="cancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-468"><paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-469"><paramref name="tasks" /> Tablica jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-469">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="74216-470">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-470">-or-</span></span> 
<span data-ttu-id="74216-471"><paramref name="continuationAction" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-471">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-472"><paramref name="tasks" /> Tablica zawiera <see langword="null" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="74216-472">The <paramref name="tasks" /> array contains a <see langword="null" /> value.</span></span>  
  
<span data-ttu-id="74216-473">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-473">-or-</span></span> 
<span data-ttu-id="74216-474"><paramref name="tasks" /> Tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="74216-474">The <paramref name="tasks" /> array is empty .</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-475">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-475">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-476">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-476">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-477">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-477">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="74216-478">Tablica zadań, z którego można kontynuować po zakończeniu jednego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-478">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="74216-479">Delegat akcji do wykonania, gdy jedno zadanie w <paramref name="tasks" /> kończy tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-479">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-480"><see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> Wartość, która steruje zachowaniem utworzony kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-480">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="74216-481">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-481">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="74216-482">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-482">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-483">NotOn \* i \* zadziała tylko <xref:System.Threading.Tasks.TaskContinuationOptions>, który ograniczenia, dla którego <xref:System.Threading.Tasks.TaskStatus> stany kontynuacja zostanie wykonana, są niedozwolone przy użyciu ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="74216-483">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-484">Wyjątek, który jest generowany, gdy jeden z elementów w <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-484">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-485">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica ma wartość zerową.</span><span class="sxs-lookup"><span data-stu-id="74216-485">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="74216-486">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-486">-or-</span></span> 
<span data-ttu-id="74216-487">Wyjątek, który jest generowany, gdy <paramref name="continuationAction" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-487">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-488">Wyjątek, który jest generowany, gdy <paramref name="continuationOptions" /> argument określa nieprawidłową wartość TaskContinuationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-488">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-489">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-489">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="74216-490">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-490">-or-</span></span> 
<span data-ttu-id="74216-491">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="74216-491">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-492">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-492">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-493">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-493">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-494">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-494">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="74216-495">Tablica zadań, z którego można kontynuować po zakończeniu jednego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-495">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="74216-496">Delegat akcji do wykonania, gdy jedno zadanie w <paramref name="tasks" /> kończy tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-496">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-497"><see cref="T:System.Threading.CancellationToken" /> , Zostanie przypisany do nowego zadania kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-497">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-498"><see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> Wartość, która steruje zachowaniem utworzony kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-498">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="74216-499"><see cref="T:System.Threading.Tasks.TaskScheduler" /> Służący do zaplanowania utworzony kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-499">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="74216-500">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-500">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="74216-501">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-501">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-502">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica ma wartość zerową.</span><span class="sxs-lookup"><span data-stu-id="74216-502">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="74216-503">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-503">-or-</span></span> 
<span data-ttu-id="74216-504">Wyjątek, który jest generowany, gdy <paramref name="continuationAction" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-504">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-505">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-505">-or-</span></span> 
<span data-ttu-id="74216-506">Wyjątek, który jest generowany, gdy <paramref name="scheduler" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-506">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-507">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-507">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="74216-508">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-508">-or-</span></span> 
<span data-ttu-id="74216-509">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="74216-509">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-510">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-510">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-511">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-511">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-512">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-512">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult))) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="74216-513">Typ wyniku zadania poprzedzającego <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="74216-513">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-514">Tablica zadań, z którego można kontynuować po zakończeniu jednego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-514">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="74216-515">Delegat akcji do wykonania, gdy jedno zadanie w <paramref name="tasks" /> kończy tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-515">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="74216-516">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-516">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="74216-517">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-517">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-518">Wyjątek, który jest generowany, gdy jeden z elementów w <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-518">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-519">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica ma wartość zerową.</span><span class="sxs-lookup"><span data-stu-id="74216-519">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="74216-520">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-520">-or-</span></span> 
<span data-ttu-id="74216-521">Wyjątek, który jest generowany, gdy <paramref name="continuationAction" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-521">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-522">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-522">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="74216-523">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-523">-or-</span></span> 
<span data-ttu-id="74216-524">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="74216-524">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-525">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-525">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-526">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-526">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-527">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-527">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="74216-528">Typ wyniku zadania poprzedzającego <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="74216-528">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-529">Tablica zadań, z którego można kontynuować po zakończeniu jednego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-529">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="74216-530">Delegat akcji do wykonania, gdy jedno zadanie w <paramref name="tasks" /> kończy tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-530">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-531"><see cref="T:System.Threading.CancellationToken" /> , Zostanie przypisany do nowego zadania kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-531">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="74216-532">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-532">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="74216-533">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-533">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-534">Wyjątek, który jest generowany, gdy jeden z elementów w <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-534">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="74216-535">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-535">-or-</span></span> 
<span data-ttu-id="74216-536">Podany <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-536">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-537">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica ma wartość zerową.</span><span class="sxs-lookup"><span data-stu-id="74216-537">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="74216-538">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-538">-or-</span></span> 
<span data-ttu-id="74216-539">Wyjątek, który jest generowany, gdy <paramref name="continuationAction" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-539">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-540">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-540">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="74216-541">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-541">-or-</span></span> 
<span data-ttu-id="74216-542">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="74216-542">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-543">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-543">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-544">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-544">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-545">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-545">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="74216-546">Typ wyniku zadania poprzedzającego <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="74216-546">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-547">Tablica zadań, z którego można kontynuować po zakończeniu jednego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-547">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="74216-548">Delegat akcji do wykonania, gdy jedno zadanie w <paramref name="tasks" /> kończy tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-548">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-549"><see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> Wartość, która steruje zachowaniem utworzony kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-549">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="74216-550">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-550">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="74216-551">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-551">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-552">NotOn \* i \* zadziała tylko <xref:System.Threading.Tasks.TaskContinuationOptions>, który ograniczenia, dla którego <xref:System.Threading.Tasks.TaskStatus> stany kontynuacja zostanie wykonana, są niedozwolone przy użyciu ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="74216-552">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-553">Wyjątek, który jest generowany, gdy jeden z elementów w <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-553">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-554">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica ma wartość zerową.</span><span class="sxs-lookup"><span data-stu-id="74216-554">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="74216-555">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-555">-or-</span></span> 
<span data-ttu-id="74216-556">Wyjątek, który jest generowany, gdy <paramref name="continuationAction" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-556">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-557">Wyjątek, który jest generowany, gdy <paramref name="continuationOptions" /> argument określa nieprawidłową wartość TaskContinuationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-557">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-558">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-558">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="74216-559">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-559">-or-</span></span> 
<span data-ttu-id="74216-560">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="74216-560">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-561">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-561">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-562">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-562">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-563">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-563">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="74216-564">Typ wyniku zadania poprzedzającego <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="74216-564">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-565">Tablica zadań, z którego można kontynuować po zakończeniu jednego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-565">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="74216-566">Delegat akcji do wykonania, gdy jedno zadanie w <paramref name="tasks" /> kończy tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-566">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-567"><see cref="T:System.Threading.CancellationToken" /> , Zostanie przypisany do nowego zadania kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-567">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-568"><see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> Wartość, która steruje zachowaniem utworzony kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-568">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="74216-569"><see cref="T:System.Threading.Tasks.TaskScheduler" /> Służący do zaplanowania utworzony kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-569">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="74216-570">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-570">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="74216-571">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-571">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-572">NotOn \* i \* zadziała tylko <xref:System.Threading.Tasks.TaskContinuationOptions>, który ograniczenia, dla którego <xref:System.Threading.Tasks.TaskStatus> stany kontynuacja zostanie wykonana, są niedozwolone przy użyciu ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="74216-572">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-573">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica ma wartość zerową.</span><span class="sxs-lookup"><span data-stu-id="74216-573">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="74216-574">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-574">-or-</span></span> 
<span data-ttu-id="74216-575">Wyjątek, który jest generowany, gdy <paramref name="continuationAction" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-575">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-576">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-576">-or-</span></span> 
<span data-ttu-id="74216-577">Wyjątek, który jest generowany, gdy <paramref name="scheduler" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-577">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-578">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-578">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="74216-579">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-579">-or-</span></span> 
<span data-ttu-id="74216-580">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="74216-580">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-581">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-581">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-582">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-582">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-583">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-583">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-584">Typ wyniku, który jest zwracany przez <paramref name="continuationFunction" /> delegować i skojarzone z utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-584">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-585">Tablica zadań, z którego można kontynuować po zakończeniu jednego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-585">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="74216-586">Delegat funkcji asynchroniczne wykonywanie, gdy jeden zadań w <paramref name="tasks" /> kończy tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-586">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="74216-587">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task`1" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-587">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="74216-588">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-588">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-589">Wyjątek, który jest generowany, gdy jeden z elementów w <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-589">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-590">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica ma wartość zerową.</span><span class="sxs-lookup"><span data-stu-id="74216-590">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="74216-591">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-591">-or-</span></span> 
<span data-ttu-id="74216-592">Wyjątek, który jest generowany, gdy <paramref name="continuationFunction" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-592">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-593">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-593">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="74216-594">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-594">-or-</span></span> 
<span data-ttu-id="74216-595">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="74216-595">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-596">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-596">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-597">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-597">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-598">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-598">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-599">Typ wyniku, który jest zwracany przez <paramref name="continuationFunction" /> delegować i skojarzone z utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-599">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-600">Tablica zadań, z którego można kontynuować po zakończeniu jednego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-600">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="74216-601">Delegat funkcji asynchroniczne wykonywanie, gdy jeden zadań w <paramref name="tasks" /> kończy tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-601">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-602"><see cref="T:System.Threading.CancellationToken" /> , Zostanie przypisany do nowego zadania kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-602">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="74216-603">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task`1" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-603">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="74216-604">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-604">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-605">Wyjątek, który jest generowany, gdy jeden z elementów w <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-605">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="74216-606">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-606">-or-</span></span> 
<span data-ttu-id="74216-607">Podany <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-607">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-608">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica ma wartość zerową.</span><span class="sxs-lookup"><span data-stu-id="74216-608">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="74216-609">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-609">-or-</span></span> 
<span data-ttu-id="74216-610">Wyjątek, który jest generowany, gdy <paramref name="continuationFunction" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-610">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-611">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-611">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="74216-612">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-612">-or-</span></span> 
<span data-ttu-id="74216-613">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="74216-613">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-614">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-614">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-615">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-615">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-616">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-616">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-617">Typ wyniku, który jest zwracany przez <paramref name="continuationFunction" /> delegować i skojarzone z utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-617">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-618">Tablica zadań, z którego można kontynuować po zakończeniu jednego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-618">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="74216-619">Delegat funkcji asynchroniczne wykonywanie, gdy jeden zadań w <paramref name="tasks" /> kończy tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-619">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-620"><see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> Wartość, która steruje zachowaniem utworzony kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-620">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="74216-621">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task`1" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-621">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="74216-622">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-622">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-623">NotOn \* i \* zadziała tylko <xref:System.Threading.Tasks.TaskContinuationOptions>, który ograniczenia, dla którego <xref:System.Threading.Tasks.TaskStatus> stany kontynuacja zostanie wykonana, są niedozwolone przy użyciu ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="74216-623">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-624">Wyjątek, który jest generowany, gdy jeden z elementów w <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-624">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-625">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica ma wartość zerową.</span><span class="sxs-lookup"><span data-stu-id="74216-625">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="74216-626">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-626">-or-</span></span> 
<span data-ttu-id="74216-627">Wyjątek, który jest generowany, gdy <paramref name="continuationFunction" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-627">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-628">Wyjątek, który jest generowany, gdy <paramref name="continuationOptions" /> argument określa nieprawidłową wartość TaskContinuationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-628">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-629">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-629">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="74216-630">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-630">-or-</span></span> 
<span data-ttu-id="74216-631">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="74216-631">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-632">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-632">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-633">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-633">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-634">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-634">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-635">Typ wyniku, który jest zwracany przez <paramref name="continuationFunction" /> delegować i skojarzone z utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-635">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-636">Tablica zadań, z którego można kontynuować po zakończeniu jednego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-636">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="74216-637">Delegat funkcji asynchroniczne wykonywanie, gdy jeden zadań w <paramref name="tasks" /> kończy tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-637">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-638"><see cref="T:System.Threading.CancellationToken" /> , Zostanie przypisany do nowego zadania kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-638">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-639"><see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> Wartość, która steruje zachowaniem utworzony kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-639">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="74216-640"><see cref="T:System.Threading.Tasks.TaskScheduler" /> Służący do zaplanowania utworzony kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-640">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="74216-641">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task`1" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-641">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="74216-642">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-642">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-643">NotOn \* i \* zadziała tylko <xref:System.Threading.Tasks.TaskContinuationOptions>, który ograniczenia, dla którego <xref:System.Threading.Tasks.TaskStatus> stany kontynuacja zostanie wykonana, są niedozwolone przy użyciu ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="74216-643">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-644">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica ma wartość zerową.</span><span class="sxs-lookup"><span data-stu-id="74216-644">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="74216-645">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-645">-or-</span></span> 
<span data-ttu-id="74216-646">Wyjątek, który jest generowany, gdy <paramref name="continuationFunction" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-646">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-647">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-647">-or-</span></span> 
<span data-ttu-id="74216-648">Wyjątek, który jest generowany, gdy <paramref name="scheduler" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-648">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-649">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-649">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="74216-650">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-650">-or-</span></span> 
<span data-ttu-id="74216-651">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="74216-651">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-652">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-652">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-653">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-653">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-654">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-654">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="74216-655">Typ wyniku zadania poprzedzającego <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="74216-655">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="74216-656">Typ wyniku, który jest zwracany przez <paramref name="continuationFunction" /> delegować i skojarzone z utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-656">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-657">Tablica zadań, z którego można kontynuować po zakończeniu jednego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-657">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="74216-658">Delegat funkcji asynchroniczne wykonywanie, gdy jeden zadań w <paramref name="tasks" /> kończy tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-658">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="74216-659">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task`1" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-659">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="74216-660">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-660">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-661">Wyjątek, który jest generowany, gdy jeden z elementów w <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-661">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-662">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica ma wartość zerową.</span><span class="sxs-lookup"><span data-stu-id="74216-662">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="74216-663">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-663">-or-</span></span> 
<span data-ttu-id="74216-664">Wyjątek, który jest generowany, gdy <paramref name="continuationFunction" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-664">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-665">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-665">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="74216-666">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-666">-or-</span></span> 
<span data-ttu-id="74216-667">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="74216-667">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-668">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-668">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-669">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-669">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-670">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-670">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="74216-671">Typ wyniku zadania poprzedzającego <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="74216-671">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="74216-672">Typ wyniku, który jest zwracany przez <paramref name="continuationFunction" /> delegować i skojarzone z utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-672">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-673">Tablica zadań, z którego można kontynuować po zakończeniu jednego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-673">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="74216-674">Delegat funkcji asynchroniczne wykonywanie, gdy jeden zadań w <paramref name="tasks" /> kończy tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-674">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-675"><see cref="T:System.Threading.CancellationToken" /> , Zostanie przypisany do nowego zadania kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-675">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="74216-676">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task`1" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-676">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="74216-677">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-677">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-678">Wyjątek, który jest generowany, gdy jeden z elementów w <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-678">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="74216-679">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-679">-or-</span></span> 
<span data-ttu-id="74216-680">Podany <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-680">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-681">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica ma wartość zerową.</span><span class="sxs-lookup"><span data-stu-id="74216-681">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="74216-682">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-682">-or-</span></span> 
<span data-ttu-id="74216-683">Wyjątek, który jest generowany, gdy <paramref name="continuationFunction" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-683">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-684">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-684">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="74216-685">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-685">-or-</span></span> 
<span data-ttu-id="74216-686">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="74216-686">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-687">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-687">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-688">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-688">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-689">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-689">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="74216-690">Typ wyniku zadania poprzedzającego <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="74216-690">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="74216-691">Typ wyniku, który jest zwracany przez <paramref name="continuationFunction" /> delegować i skojarzone z utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-691">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-692">Tablica zadań, z którego można kontynuować po zakończeniu jednego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-692">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="74216-693">Delegat funkcji asynchroniczne wykonywanie, gdy jeden zadań w <paramref name="tasks" /> kończy tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-693">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-694"><see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> Wartość, która steruje zachowaniem utworzony kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-694">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="74216-695">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task`1" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-695">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="74216-696">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-696">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-697">NotOn \* i \* zadziała tylko <xref:System.Threading.Tasks.TaskContinuationOptions>, który ograniczenia, dla którego <xref:System.Threading.Tasks.TaskStatus> stany kontynuacja zostanie wykonana, są niedozwolone przy użyciu ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="74216-697">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-698">Wyjątek, który jest generowany, gdy jeden z elementów w <paramref name="tasks" /> tablicy został usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-698">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-699">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica ma wartość zerową.</span><span class="sxs-lookup"><span data-stu-id="74216-699">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="74216-700">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-700">-or-</span></span> 
<span data-ttu-id="74216-701">Wyjątek, który jest generowany, gdy <paramref name="continuationFunction" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-701">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-702">Wyjątek, który jest generowany, gdy <paramref name="continuationOptions" /> argument określa nieprawidłową wartość TaskContinuationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-702">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-703">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-703">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="74216-704">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-704">-or-</span></span> 
<span data-ttu-id="74216-705">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="74216-705">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-706">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-706">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-707">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-707">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-708">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-708">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="74216-709">Typ wyniku zadania poprzedzającego <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="74216-709">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="74216-710">Typ wyniku, który jest zwracany przez <paramref name="continuationFunction" /> delegować i skojarzone z utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-710">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="74216-711">Tablica zadań, z którego można kontynuować po zakończeniu jednego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-711">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="74216-712">Delegat funkcji asynchroniczne wykonywanie, gdy jeden zadań w <paramref name="tasks" /> kończy tablicy.</span><span class="sxs-lookup"><span data-stu-id="74216-712">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-713"><see cref="T:System.Threading.CancellationToken" /> , Zostanie przypisany do nowego zadania kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="74216-713">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="74216-714"><see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> Wartość, która steruje zachowaniem utworzony kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-714">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="74216-715"><see cref="T:System.Threading.Tasks.TaskScheduler" /> Służący do zaplanowania utworzony kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-715">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="74216-716">Tworzy kontynuację <see cref="T:System.Threading.Tasks.Task`1" /> , zostanie uruchomiony po zakończeniu każdego zadania w podanym zestawie.</span><span class="sxs-lookup"><span data-stu-id="74216-716">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="74216-717">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-717">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-718">NotOn \* i \* zadziała tylko <xref:System.Threading.Tasks.TaskContinuationOptions>, który ograniczenia, dla którego <xref:System.Threading.Tasks.TaskStatus> stany kontynuacja zostanie wykonana, są niedozwolone przy użyciu ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="74216-718">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-719">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica ma wartość zerową.</span><span class="sxs-lookup"><span data-stu-id="74216-719">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="74216-720">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-720">-or-</span></span> 
<span data-ttu-id="74216-721">Wyjątek, który jest generowany, gdy <paramref name="continuationFunction" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-721">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-722">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-722">-or-</span></span> 
<span data-ttu-id="74216-723">Wyjątek, który jest generowany, gdy <paramref name="scheduler" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-723">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="74216-724">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica zawiera wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-724">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="74216-725">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-725">-or-</span></span> 
<span data-ttu-id="74216-726">Wyjątek, który jest generowany, gdy <paramref name="tasks" /> tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="74216-726">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-727">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-727">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-728">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-728">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-729">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-729">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.CreationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreationOptions As TaskCreationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskCreationOptions CreationOptions { System::Threading::Tasks::TaskCreationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.CreationOptions : System.Threading.Tasks.TaskCreationOptions" Usage="System.Threading.Tasks.TaskFactory.CreationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="74216-730">Pobiera domyślne opcje tworzenia zadań dla tej fabryki zadań.</span><span class="sxs-lookup"><span data-stu-id="74216-730">Gets the default task creation options for this task factory.</span></span></summary>
        <value><span data-ttu-id="74216-731">Domyślne opcje tworzenia zadań dla tej fabryki zadań.</span><span class="sxs-lookup"><span data-stu-id="74216-731">The default task creation options for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-732">Wartość właściwości służy do tworzenia wszystkich zadań, chyba że inne opcje są jawnie określone podczas wywołania metody tej fabryki.</span><span class="sxs-lookup"><span data-stu-id="74216-732">The property value is used to create all tasks, unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-733">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-733">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="74216-734">Tworzy <see cref="T:System.Threading.Tasks.Task" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-734">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-735">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-735">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-736">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-736">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(IAsyncResult ^ asyncResult, Action&lt;IAsyncResult ^&gt; ^ endMethod);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Action&lt;IAsyncResult&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (asyncResult, endMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="74216-737">IAsyncResult, którego ukończenie wyzwalanych przetwarzania <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="74216-737">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-738">Delegat akcji, która przetwarza ukończoną <paramref name="asyncResult" />.</span><span class="sxs-lookup"><span data-stu-id="74216-738">The action delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <summary><span data-ttu-id="74216-739">Tworzy <see cref="T:System.Threading.Tasks.Task" /> który wykonuje akcję metoda end po określonym <see cref="T:System.IAsyncResult" /> kończy.</span><span class="sxs-lookup"><span data-stu-id="74216-739">Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="74216-740">A <see cref="T:System.Threading.Tasks.Task" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-740">A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="74216-741"><xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> Przeciążeń przybierają tego `asyncResult` nie są wydajne niż przeciążenia, które przyjmują parametr `beginMethod` parametru.</span><span class="sxs-lookup"><span data-stu-id="74216-741">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="74216-742">Jeśli wydajność jest to problem, użyj przeciążenia, które zapewniają `beginMethod` / `endMethod` wzorca.</span><span class="sxs-lookup"><span data-stu-id="74216-742">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-743">Wyjątek, który jest generowany, gdy <paramref name="asyncResult" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-743">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-744">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-744">-or-</span></span> 
<span data-ttu-id="74216-745">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-745">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-746">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-746">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-747">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-747">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginMethod"><span data-ttu-id="74216-748">Delegat, który rozpoczyna operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-748">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-749">Delegat, który kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-749">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="74216-750">Obiekt zawierający dane do użycia przez <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-750">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="74216-751">Tworzy <see cref="T:System.Threading.Tasks.Task" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-751">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="74216-752">Utworzony <see cref="T:System.Threading.Tasks.Task" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-752">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-753">`beginMethod` Delegata jest uruchomiona w wątku, który <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> systemem.</span><span class="sxs-lookup"><span data-stu-id="74216-753">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span>  <span data-ttu-id="74216-754">Ta metoda wyrzuca wyjątki zgłaszane przez `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="74216-754">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-755">Wyjątek, który jest generowany, gdy <paramref name="beginMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-755">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-756">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-756">-or-</span></span> 
<span data-ttu-id="74216-757">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-757">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-758">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-758">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-759">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-759">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(IAsyncResult ^ asyncResult, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Action&lt;IAsyncResult&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="74216-760">IAsyncResult, którego ukończenie wyzwalanych przetwarzania <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="74216-760">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-761">Delegat akcji, która przetwarza ukończoną <paramref name="asyncResult" />.</span><span class="sxs-lookup"><span data-stu-id="74216-761">The action delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-762">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-762">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="74216-763">Tworzy <see cref="T:System.Threading.Tasks.Task" /> który wykonuje akcję metoda end po określonym <see cref="T:System.IAsyncResult" /> kończy.</span><span class="sxs-lookup"><span data-stu-id="74216-763">Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="74216-764">A <see cref="T:System.Threading.Tasks.Task" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-764">A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="74216-765"><xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> Przeciążeń przybierają tego `asyncResult` nie są wydajne niż przeciążenia, które przyjmują parametr `beginMethod` parametru.</span><span class="sxs-lookup"><span data-stu-id="74216-765">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="74216-766">Jeśli wydajność jest to problem, użyj przeciążenia, które zapewniają `beginMethod` / `endMethod` wzorca.</span><span class="sxs-lookup"><span data-stu-id="74216-766">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-767">Wyjątek, który jest generowany, gdy <paramref name="asyncResult" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-767">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-768">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-768">-or-</span></span> 
<span data-ttu-id="74216-769">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-769">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-770">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-770">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-771">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-771">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-772">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-772">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-773">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-773">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="beginMethod"><span data-ttu-id="74216-774">Delegat, który rozpoczyna operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-774">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-775">Delegat, który kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-775">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="74216-776">Obiekt zawierający dane do użycia przez <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-776">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-777">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-777">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="74216-778">Tworzy <see cref="T:System.Threading.Tasks.Task" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-778">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="74216-779">Utworzony <see cref="T:System.Threading.Tasks.Task" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-779">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-780">`beginMethod` Delegata jest uruchomiona w wątku, który <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> systemem.</span><span class="sxs-lookup"><span data-stu-id="74216-780">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="74216-781">Ta metoda wyrzuca wyjątki zgłaszane przez `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="74216-781">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="74216-782"><xref:System.Threading.Tasks.TaskCreationOptions> Wartości <xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness>, <xref:System.Threading.Tasks.TaskCreationOptions.LongRunning> i <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent> wyświetlane są wszystkie wzajemnie się wykluczają.</span><span class="sxs-lookup"><span data-stu-id="74216-782">The <xref:System.Threading.Tasks.TaskCreationOptions> values <xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness>, <xref:System.Threading.Tasks.TaskCreationOptions.LongRunning> and <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent> are all mutually exclusive.</span></span> <span data-ttu-id="74216-783">W metodach FromAsync albo `LongRunning` lub `AttachedToParent` samodzielnie spowoduje, że <xref:System.ArgumentOutOfRangeException> zostanie wygenerowany.</span><span class="sxs-lookup"><span data-stu-id="74216-783">In the FromAsync methods, either `LongRunning` or `AttachedToParent` by themselves will cause an <xref:System.ArgumentOutOfRangeException> to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-784">Wyjątek, który jest generowany, gdy <paramref name="beginMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-784">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-785">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-785">-or-</span></span> 
<span data-ttu-id="74216-786">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-786">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-787">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-787">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-788">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-788">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-789">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-789">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(IAsyncResult ^ asyncResult, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Action&lt;IAsyncResult&gt; * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="74216-790">IAsyncResult, którego ukończenie wyzwalanych przetwarzania <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="74216-790">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-791">Delegat akcji, która przetwarza ukończoną <paramref name="asyncResult" />.</span><span class="sxs-lookup"><span data-stu-id="74216-791">The action delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-792">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-792">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="74216-793"><see cref="T:System.Threading.Tasks.TaskScheduler" /> Służący do zaplanowania zadania, który wykonuje metodę end.</span><span class="sxs-lookup"><span data-stu-id="74216-793">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</span></span></param>
        <summary><span data-ttu-id="74216-794">Tworzy <see cref="T:System.Threading.Tasks.Task" /> który wykonuje akcję metoda end po określonym <see cref="T:System.IAsyncResult" /> kończy.</span><span class="sxs-lookup"><span data-stu-id="74216-794">Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="74216-795">Utworzony <see cref="T:System.Threading.Tasks.Task" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-795">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="74216-796"><xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> Przeciążeń przybierają tego `asyncResult` nie są wydajne niż przeciążenia, które przyjmują parametr `beginMethod` parametru.</span><span class="sxs-lookup"><span data-stu-id="74216-796">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="74216-797">Jeśli wydajność jest to problem, użyj przeciążenia, które zapewniają `beginMethod` / `endMethod` wzorca.</span><span class="sxs-lookup"><span data-stu-id="74216-797">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-798">Wyjątek, który jest generowany, gdy <paramref name="asyncResult" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-798">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-799">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-799">-or-</span></span> 
<span data-ttu-id="74216-800">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-800">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-801">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-801">-or-</span></span> 
<span data-ttu-id="74216-802">Wyjątek, który jest generowany, gdy <paramref name="scheduler" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-802">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-803">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-803">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-804">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-804">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-805">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-805">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-806">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-806">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-807">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-807">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="74216-808">Typ pierwszego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-808">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="74216-809">Delegat, który rozpoczyna operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-809">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-810">Delegat, który kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-810">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="74216-811">Pierwszy argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-811">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="74216-812">Obiekt zawierający dane do użycia przez <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-812">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="74216-813">Tworzy <see cref="T:System.Threading.Tasks.Task" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-813">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="74216-814">Utworzony <see cref="T:System.Threading.Tasks.Task" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-814">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-815">`beginMethod` Delegata jest uruchomiona w wątku, który <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> systemem.</span><span class="sxs-lookup"><span data-stu-id="74216-815">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="74216-816">Ta metoda wyrzuca wyjątki zgłaszane przez `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="74216-816">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-817">Wyjątek, który jest generowany, gdy <paramref name="beginMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-817">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-818">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-818">-or-</span></span> 
<span data-ttu-id="74216-819">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-819">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-820">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-820">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-821">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-821">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="74216-822">Typ pierwszego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-822">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="74216-823">Delegat, który rozpoczyna operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-823">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-824">Delegat, który kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-824">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="74216-825">Pierwszy argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-825">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="74216-826">Obiekt zawierający dane do użycia przez <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-826">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-827">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-827">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="74216-828">Tworzy <see cref="T:System.Threading.Tasks.Task" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-828">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="74216-829">Utworzony <see cref="T:System.Threading.Tasks.Task" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-829">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-830">`beginMethod` Delegata jest uruchomiona w wątku, który <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> systemem.</span><span class="sxs-lookup"><span data-stu-id="74216-830">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="74216-831">Ta metoda wyrzuca wyjątki zgłaszane przez `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="74216-831">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-832">Wyjątek, który jest generowany, gdy <paramref name="beginMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-832">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-833">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-833">-or-</span></span> 
<span data-ttu-id="74216-834">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-834">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-835">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-835">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-836">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-836">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-837">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-837">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-838">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-838">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-839">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-839">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-840">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-840">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="asyncResult"><span data-ttu-id="74216-841">IAsyncResult, którego ukończenie wyzwalanych przetwarzania <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="74216-841">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-842">Delegat funkcji, która przetwarza ukończoną <paramref name="asyncResult" />.</span><span class="sxs-lookup"><span data-stu-id="74216-842">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <summary><span data-ttu-id="74216-843">Tworzy <see cref="T:System.Threading.Tasks.Task`1" /> , który jest wykonywany funkcja kończąca metoda po określonym <see cref="T:System.IAsyncResult" /> kończy.</span><span class="sxs-lookup"><span data-stu-id="74216-843">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="74216-844">A <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-844">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="74216-845"><xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> Przeciążeń przybierają tego `asyncResult` nie są wydajne niż przeciążenia, które przyjmują parametr `beginMethod` parametru.</span><span class="sxs-lookup"><span data-stu-id="74216-845">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="74216-846">Jeśli wydajność jest to problem, użyj przeciążenia, które zapewniają `beginMethod` / `endMethod` wzorca.</span><span class="sxs-lookup"><span data-stu-id="74216-846">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-847">Wyjątek, który jest generowany, gdy <paramref name="asyncResult" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-847">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-848">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-848">-or-</span></span> 
<span data-ttu-id="74216-849">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-849">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-850">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-850">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-851">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-851">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-852">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-852">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-853">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-853">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="74216-854">Delegat, który rozpoczyna operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-854">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-855">Delegat, który kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-855">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="74216-856">Obiekt zawierający dane do użycia przez <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-856">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="74216-857">Tworzy <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-857">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="74216-858">Utworzony <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-858">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-859">Ta metoda wyrzuca wyjątki zgłaszane przez `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="74216-859">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-860">Wyjątek, który jest generowany, gdy <paramref name="beginMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-860">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-861">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-861">-or-</span></span> 
<span data-ttu-id="74216-862">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-862">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-863">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-863">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-864">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-864">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-865">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-865">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="asyncResult"><span data-ttu-id="74216-866">IAsyncResult, którego ukończenie wyzwalanych przetwarzania <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="74216-866">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-867">Delegat funkcji, która przetwarza ukończoną <paramref name="asyncResult" />.</span><span class="sxs-lookup"><span data-stu-id="74216-867">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-868">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-868">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="74216-869">Tworzy <see cref="T:System.Threading.Tasks.Task`1" /> , który jest wykonywany funkcja kończąca metoda po określonym <see cref="T:System.IAsyncResult" /> kończy.</span><span class="sxs-lookup"><span data-stu-id="74216-869">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="74216-870">A <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-870">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="74216-871"><xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> Przeciążeń przybierają tego `asyncResult` nie są wydajne niż przeciążenia, które przyjmują parametr `beginMethod` parametru.</span><span class="sxs-lookup"><span data-stu-id="74216-871">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="74216-872">Jeśli wydajność jest to problem, użyj przeciążenia, które zapewniają `beginMethod` / `endMethod` wzorca.</span><span class="sxs-lookup"><span data-stu-id="74216-872">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-873">Wyjątek, który jest generowany, gdy <paramref name="asyncResult" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-873">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-874">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-874">-or-</span></span> 
<span data-ttu-id="74216-875">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-875">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-876">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-876">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-877">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-877">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-878">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-878">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-879">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-879">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-880">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-880">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-881">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-881">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="74216-882">Delegat, który rozpoczyna operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-882">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-883">Delegat, który kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-883">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="74216-884">Obiekt zawierający dane do użycia przez <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-884">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-885">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-885">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="74216-886">Tworzy <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-886">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="74216-887">Utworzony <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-887">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-888">Ta metoda wyrzuca wyjątki zgłaszane przez `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="74216-888">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-889">Wyjątek, który jest generowany, gdy <paramref name="beginMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-889">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-890">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-890">-or-</span></span> 
<span data-ttu-id="74216-891">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-891">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-892">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-892">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-893">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-893">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-894">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-894">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-895">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-895">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-896">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-896">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-897">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-897">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="asyncResult"><span data-ttu-id="74216-898">IAsyncResult, którego ukończenie wyzwalanych przetwarzania <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="74216-898">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-899">Delegat funkcji, która przetwarza ukończoną <paramref name="asyncResult" />.</span><span class="sxs-lookup"><span data-stu-id="74216-899">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-900">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-900">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="74216-901"><see cref="T:System.Threading.Tasks.TaskScheduler" /> Służący do zaplanowania zadania, który wykonuje metodę end.</span><span class="sxs-lookup"><span data-stu-id="74216-901">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</span></span></param>
        <summary><span data-ttu-id="74216-902">Tworzy <see cref="T:System.Threading.Tasks.Task`1" /> , który jest wykonywany funkcja kończąca metoda po określonym <see cref="T:System.IAsyncResult" /> kończy.</span><span class="sxs-lookup"><span data-stu-id="74216-902">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="74216-903">A <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-903">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="74216-904"><xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> Przeciążeń przybierają tego `asyncResult` nie są wydajne niż przeciążenia, które przyjmują parametr `beginMethod` parametru.</span><span class="sxs-lookup"><span data-stu-id="74216-904">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="74216-905">Jeśli wydajność jest to problem, użyj przeciążenia, które zapewniają `beginMethod` / `endMethod` wzorca.</span><span class="sxs-lookup"><span data-stu-id="74216-905">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-906">Wyjątek, który jest generowany, gdy <paramref name="asyncResult" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-906">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-907">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-907">-or-</span></span> 
<span data-ttu-id="74216-908">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-908">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-909">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-909">-or-</span></span> 
<span data-ttu-id="74216-910">Wyjątek, który jest generowany, gdy <paramref name="scheduler" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-910">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-911">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-911">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-912">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-912">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-913">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-913">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-914">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-914">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-915">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-915">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="74216-916">Typ drugiego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-916">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="74216-917">Typ pierwszego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-917">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="74216-918">Delegat, który rozpoczyna operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-918">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-919">Delegat, który kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-919">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="74216-920">Pierwszy argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-920">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="74216-921">Drugi argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-921">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="74216-922">Obiekt zawierający dane do użycia przez <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-922">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="74216-923">Tworzy <see cref="T:System.Threading.Tasks.Task" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-923">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="74216-924">Utworzony <see cref="T:System.Threading.Tasks.Task" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-924">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-925">`beginMethod` Delegata jest uruchomiona w wątku, który <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> systemem.</span><span class="sxs-lookup"><span data-stu-id="74216-925">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="74216-926">Ta metoda wyrzuca wyjątki zgłaszane przez `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="74216-926">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-927">Wyjątek, który jest generowany, gdy <paramref name="beginMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-927">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-928">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-928">-or-</span></span> 
<span data-ttu-id="74216-929">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-929">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-930">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-930">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-931">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-931">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="74216-932">Typ drugiego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-932">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="74216-933">Typ pierwszego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-933">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="74216-934">Delegat, który rozpoczyna operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-934">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-935">Delegat, który kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-935">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="74216-936">Pierwszy argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-936">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="74216-937">Drugi argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-937">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="74216-938">Obiekt zawierający dane do użycia przez <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-938">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-939">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-939">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="74216-940">Tworzy <see cref="T:System.Threading.Tasks.Task" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-940">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="74216-941">Utworzony <see cref="T:System.Threading.Tasks.Task" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-941">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-942">`beginMethod` Delegata jest uruchomiona w wątku, który <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> systemem.</span><span class="sxs-lookup"><span data-stu-id="74216-942">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="74216-943">Ta metoda wyrzuca wyjątki zgłaszane przez `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="74216-943">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-944">Wyjątek, który jest generowany, gdy <paramref name="beginMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-944">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-945">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-945">-or-</span></span> 
<span data-ttu-id="74216-946">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-946">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-947">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-947">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-948">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-948">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-949">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-949">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-950">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-950">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-951">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-951">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TResult&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TResult&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TResult) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="74216-952">Typ pierwszego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-952">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="74216-953">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-953">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="74216-954">Delegat, który rozpoczyna operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-954">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-955">Delegat, który kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-955">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="74216-956">Pierwszy argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-956">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="74216-957">Obiekt zawierający dane do użycia przez <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-957">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="74216-958">Tworzy <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-958">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="74216-959">Utworzony <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-959">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-960">`beginMethod` Delegata jest uruchomiona w wątku, który <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> systemem.</span><span class="sxs-lookup"><span data-stu-id="74216-960">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="74216-961">Ta metoda wyrzuca wyjątki zgłaszane przez `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="74216-961">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-962">Wyjątek, który jest generowany, gdy <paramref name="beginMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-962">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-963">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-963">-or-</span></span> 
<span data-ttu-id="74216-964">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-964">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-965">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-965">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-966">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-966">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TResult&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TResult&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TResult) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="74216-967">Typ pierwszego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-967">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="74216-968">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-968">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="74216-969">Delegat, który rozpoczyna operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-969">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-970">Delegat, który kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-970">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="74216-971">Pierwszy argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-971">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="74216-972">Obiekt zawierający dane do użycia przez <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-972">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-973">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-973">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="74216-974">Tworzy <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-974">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="74216-975">Utworzony <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-975">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-976">`beginMethod` Delegata jest uruchomiona w wątku, który <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> systemem.</span><span class="sxs-lookup"><span data-stu-id="74216-976">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="74216-977">Ta metoda wyrzuca wyjątki zgłaszane przez `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="74216-977">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-978">Wyjątek, który jest generowany, gdy <paramref name="beginMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-978">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-979">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-979">-or-</span></span> 
<span data-ttu-id="74216-980">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-980">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-981">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-981">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-982">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-982">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-983">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-983">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-984">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-984">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-985">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-985">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="74216-986">Typ drugiego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-986">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="74216-987">Typ trzeci argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-987">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="74216-988">Typ pierwszego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-988">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="74216-989">Delegat, który rozpoczyna operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-989">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-990">Delegat, który kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-990">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="74216-991">Pierwszy argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-991">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="74216-992">Drugi argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-992">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="74216-993">Trzeci argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-993">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="74216-994">Obiekt zawierający dane do użycia przez <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-994">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="74216-995">Tworzy <see cref="T:System.Threading.Tasks.Task" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-995">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="74216-996">Utworzony <see cref="T:System.Threading.Tasks.Task" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-996">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-997">`beginMethod` Delegata jest uruchomiona w wątku, który <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> systemem.</span><span class="sxs-lookup"><span data-stu-id="74216-997">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="74216-998">Ta metoda wyrzuca wyjątki zgłaszane przez `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="74216-998">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-999">Wyjątek, który jest generowany, gdy <paramref name="beginMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-999">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-1000">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-1000">-or-</span></span> 
<span data-ttu-id="74216-1001">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1001">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1002">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1002">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-1003">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-1003">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="74216-1004">Typ drugiego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1004">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="74216-1005">Typ trzeci argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1005">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="74216-1006">Typ pierwszego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1006">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="74216-1007">Delegat, który rozpoczyna operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-1007">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-1008">Delegat, który kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-1008">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="74216-1009">Pierwszy argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1009">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="74216-1010">Drugi argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1010">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="74216-1011">Trzeci argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1011">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="74216-1012">Obiekt zawierający dane do użycia przez <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1012">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-1013">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1013">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="74216-1014">Tworzy <see cref="T:System.Threading.Tasks.Task" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-1014">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="74216-1015">Utworzony <see cref="T:System.Threading.Tasks.Task" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-1015">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1016">`beginMethod` Delegata jest uruchomiona w wątku, który <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> systemem.</span><span class="sxs-lookup"><span data-stu-id="74216-1016">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="74216-1017">Ta metoda wyrzuca wyjątki zgłaszane przez `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="74216-1017">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1018">Wyjątek, który jest generowany, gdy <paramref name="beginMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1018">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-1019">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-1019">-or-</span></span> 
<span data-ttu-id="74216-1020">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1020">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-1021">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1021">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1022">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1022">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1023">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-1023">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1024">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1024">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-1025">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-1025">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TResult&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TResult&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TResult) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="74216-1026">Typ drugiego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1026">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="74216-1027">Typ pierwszego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1027">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="74216-1028">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1028">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="74216-1029">Delegat, który rozpoczyna operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-1029">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-1030">Delegat, który kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-1030">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="74216-1031">Pierwszy argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1031">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="74216-1032">Drugi argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1032">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="74216-1033">Obiekt zawierający dane do użycia przez <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1033">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="74216-1034">Tworzy <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-1034">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="74216-1035">Utworzony <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-1035">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1036">`beginMethod` Delegata jest uruchomiona w wątku, który <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> systemem.</span><span class="sxs-lookup"><span data-stu-id="74216-1036">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="74216-1037">Ta metoda wyrzuca wyjątki zgłaszane przez `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="74216-1037">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1038">Wyjątek, który jest generowany, gdy <paramref name="beginMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1038">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-1039">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-1039">-or-</span></span> 
<span data-ttu-id="74216-1040">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1040">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1041">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1041">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-1042">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-1042">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TResult&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TResult&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TResult) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="74216-1043">Typ drugiego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1043">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="74216-1044">Typ pierwszego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1044">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="74216-1045">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1045">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="74216-1046">Delegat, który rozpoczyna operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-1046">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-1047">Delegat, który kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-1047">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="74216-1048">Pierwszy argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1048">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="74216-1049">Drugi argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1049">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="74216-1050">Obiekt zawierający dane do użycia przez <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1050">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-1051">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1051">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="74216-1052">Tworzy <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-1052">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="74216-1053">Utworzony <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-1053">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1054">`beginMethod` Delegata jest uruchomiona w wątku, który <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> systemem.</span><span class="sxs-lookup"><span data-stu-id="74216-1054">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="74216-1055">Ta metoda wyrzuca wyjątki zgłaszane przez `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="74216-1055">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1056">Wyjątek, który jest generowany, gdy <paramref name="beginMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1056">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-1057">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-1057">-or-</span></span> 
<span data-ttu-id="74216-1058">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1058">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-1059">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1059">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1060">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1060">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1061">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-1061">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1062">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1062">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-1063">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-1063">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3, TResult&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="74216-1064">Typ drugiego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1064">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="74216-1065">Typ trzeci argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1065">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="74216-1066">Typ pierwszego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1066">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="74216-1067">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1067">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="74216-1068">Delegat, który rozpoczyna operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-1068">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-1069">Delegat, który kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-1069">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="74216-1070">Pierwszy argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1070">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="74216-1071">Drugi argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1071">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="74216-1072">Trzeci argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1072">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="74216-1073">Obiekt zawierający dane do użycia przez <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1073">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="74216-1074">Tworzy <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-1074">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="74216-1075">Utworzony <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-1075">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1076">`beginMethod` Delegata jest uruchomiona w wątku, który <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> systemem.</span><span class="sxs-lookup"><span data-stu-id="74216-1076">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="74216-1077">Ta metoda wyrzuca wyjątki zgłaszane przez `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="74216-1077">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1078">Wyjątek, który jest generowany, gdy <paramref name="beginMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1078">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-1079">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-1079">-or-</span></span> 
<span data-ttu-id="74216-1080">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1080">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1081">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1081">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-1082">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-1082">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3, TResult&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="74216-1083">Typ drugiego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1083">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="74216-1084">Typ trzeci argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1084">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="74216-1085">Typ pierwszego argumentu przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1085">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="74216-1086">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1086">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="74216-1087">Delegat, który rozpoczyna operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-1087">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="74216-1088">Delegat, który kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-1088">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="74216-1089">Pierwszy argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1089">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="74216-1090">Drugi argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1090">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="74216-1091">Trzeci argument przekazany do <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1091">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="74216-1092">Obiekt zawierający dane do użycia przez <paramref name="beginMethod" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1092">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-1093">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1093">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="74216-1094">Tworzy <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący pary metod begin i end, które są zgodne z wzorcem modelu programowania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="74216-1094">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="74216-1095">Utworzony <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="74216-1095">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1096">`beginMethod` Delegata jest uruchomiona w wątku, który <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> systemem.</span><span class="sxs-lookup"><span data-stu-id="74216-1096">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="74216-1097">Ta metoda wyrzuca wyjątki zgłaszane przez `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="74216-1097">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1098">Wyjątek, który jest generowany, gdy <paramref name="beginMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1098">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-1099">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-1099">-or-</span></span> 
<span data-ttu-id="74216-1100">Wyjątek, który jest generowany, gdy <paramref name="endMethod" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1100">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-1101">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1101">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1102">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1102">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1103">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-1103">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1104">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1104">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="74216-1105">Korzystanie z modelu TPL z innymi wzorami asynchronicznymi</span><span class="sxs-lookup"><span data-stu-id="74216-1105">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Scheduler">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskScheduler Scheduler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.TaskScheduler Scheduler" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.Scheduler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scheduler As TaskScheduler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskScheduler ^ Scheduler { System::Threading::Tasks::TaskScheduler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scheduler : System.Threading.Tasks.TaskScheduler" Usage="System.Threading.Tasks.TaskFactory.Scheduler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="74216-1106">Pobiera domyślny harmonogram zadań dla tej fabryki zadań.</span><span class="sxs-lookup"><span data-stu-id="74216-1106">Gets the default task scheduler for this task factory.</span></span></summary>
        <value><span data-ttu-id="74216-1107">Domyślny harmonogram zadań dla tej fabryki zadań.</span><span class="sxs-lookup"><span data-stu-id="74216-1107">The default task scheduler for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1108">Wartość właściwości służy można zaplanować wszystkie zadania, chyba że inny harmonogram jest jawnie określona podczas wywołania metody tej fabryki.</span><span class="sxs-lookup"><span data-stu-id="74216-1108">The property value is used to schedule all tasks, unless another scheduler is explicitly specified during calls to this factory's methods.</span></span>  
  
 <span data-ttu-id="74216-1109">Jeśli wartość tej właściwości jest `null`, wartość <xref:System.Threading.Tasks.TaskScheduler.Current%2A> właściwość jest używana.</span><span class="sxs-lookup"><span data-stu-id="74216-1109">If this property value is `null`, the value of the <xref:System.Threading.Tasks.TaskScheduler.Current%2A> property is used.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1110">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1110">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartNew">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="74216-1111">Tworzy i uruchamia <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1111">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1112">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> metoda jest zalecaną metodą Uruchom zadanie powiązany obliczeniowych.</span><span class="sxs-lookup"><span data-stu-id="74216-1112">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method is the recommended way to launch a compute-bound task.</span></span> <span data-ttu-id="74216-1113">Użyj <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> metody tylko wtedy, gdy potrzebujesz szczegółową kontrolę dla zadań długotrwałych, powiązany obliczeniowych.</span><span class="sxs-lookup"><span data-stu-id="74216-1113">Use the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method only when you require fine-grained control for a long-running, compute-bound task.</span></span> <span data-ttu-id="74216-1114">W tym scenariuszy, w których chcesz kontrolować następujące czynności:</span><span class="sxs-lookup"><span data-stu-id="74216-1114">This includes scenarios in which you want to control the following:</span></span>  
  
-   <span data-ttu-id="74216-1115">Opcje tworzenia zadań.</span><span class="sxs-lookup"><span data-stu-id="74216-1115">Task creation options.</span></span> <span data-ttu-id="74216-1116">Zadania utworzone przez <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> metody, które domyślnie są tworzone za pomocą <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType> opcji.</span><span class="sxs-lookup"><span data-stu-id="74216-1116">Tasks created by the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method by default are created with the <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType> option.</span></span> <span data-ttu-id="74216-1117">Zastąpienia tego zachowania lub innych <xref:System.Threading.Tasks.TaskCreationOptions> wywołania opcji <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="74216-1117">To override this behavior, or to provide other <xref:System.Threading.Tasks.TaskCreationOptions> options, call a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overload.</span></span>  
  
-   <span data-ttu-id="74216-1118">Przekazywanie parametru.</span><span class="sxs-lookup"><span data-stu-id="74216-1118">Parameter passing.</span></span> <span data-ttu-id="74216-1119">Przeciążenia <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> metody nie pozwalają przekazać parametr do delegata zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-1119">The overloads of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method do not allow you to pass a parameter to the task delegate.</span></span> <span data-ttu-id="74216-1120">Przeciążenia <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> Wykonaj metodę.</span><span class="sxs-lookup"><span data-stu-id="74216-1120">Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method do.</span></span>  
  
-   <span data-ttu-id="74216-1121">Harmonogram zadań.</span><span class="sxs-lookup"><span data-stu-id="74216-1121">The task scheduler.</span></span> <span data-ttu-id="74216-1122">Przeciążenia <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> metody używają domyślnego harmonogramu zadań.</span><span class="sxs-lookup"><span data-stu-id="74216-1122">The overloads of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method use the default task scheduler.</span></span> <span data-ttu-id="74216-1123">Aby kontrolować harmonogram zadań, należy wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> przeciążenia z `scheduler` parametru.</span><span class="sxs-lookup"><span data-stu-id="74216-1123">To control the task scheduler, call a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overload with a `scheduler` parameter.</span></span> <span data-ttu-id="74216-1124">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Tasks.TaskScheduler>.</span><span class="sxs-lookup"><span data-stu-id="74216-1124">For more information, see <xref:System.Threading.Tasks.TaskScheduler>.</span></span>
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="74216-1125">Przykłady dotyczące programowania równoległego za pomocą programu .NET Framework</span><span class="sxs-lookup"><span data-stu-id="74216-1125">Samples for Parallel Programming with the .NET Framework</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="74216-1126">Delegat akcji do wykonania asynchronicznie.</span><span class="sxs-lookup"><span data-stu-id="74216-1126">The action delegate to execute asynchronously.</span></span></param>
        <summary><span data-ttu-id="74216-1127">Tworzy i uruchamia zadanie.</span><span class="sxs-lookup"><span data-stu-id="74216-1127">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="74216-1128">Uruchomiono zadanie.</span><span class="sxs-lookup"><span data-stu-id="74216-1128">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1129">Wywoływanie <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> jest funkcjonalnym odpowiednikiem Tworzenie zadania za pomocą jednego z jego konstruktorów, a następnie wywołując <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> metodę, aby zaplanować zadanie do wykonania.</span><span class="sxs-lookup"><span data-stu-id="74216-1129">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a task by using one of its constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> method to schedule the task for execution.</span></span>  
  
 <span data-ttu-id="74216-1130">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], możesz użyć <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> metody w prosty sposób, aby wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> przy użyciu parametrów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="74216-1130">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> with default parameters.</span></span> <span data-ttu-id="74216-1131">Należy jednak pamiętać, że występuje różnica w zachowaniu między obiema metodami dotyczące: <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> domyślnie nie zezwala na podrzędne zadania wprowadzenie <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> opcję dołączenia do bieżącego <xref:System.Threading.Tasks.Task> wystąpienia, natomiast <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> jest.</span><span class="sxs-lookup"><span data-stu-id="74216-1131">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> does.</span></span> <span data-ttu-id="74216-1132">Aby uzyskać więcej informacji i przykłady kodu, zobacz [Task.Run vs Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) w Programowanie równoległe z bloga platformy .NET.</span><span class="sxs-lookup"><span data-stu-id="74216-1132">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74216-1133">W poniższym przykładzie użyto <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> metodę do wywołania, wielokrotnie <xref:System.Action> delegata, która generuje losową liczbę zinterpretuje ją jako punkt kodu Unicode, konwertuje go na jednostek kodu zakodowane w formacie UTF16 i wyświetla informacje o wartość wynikowa znak lub znaki.</span><span class="sxs-lookup"><span data-stu-id="74216-1133">The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> method to repeatedly invoke an <xref:System.Action> delegate that generates a random number, interprets it as a Unicode code point, converts it to a UTF16-encoded code unit, and displays information about the resulting character or characters.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew1.cs#1)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1134"><paramref name="action" /> Argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1134">The <paramref name="action" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1135">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1135">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-1136">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-1136">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-1137">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-1137">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="74216-1138">Delegat akcji do wykonania asynchronicznie.</span><span class="sxs-lookup"><span data-stu-id="74216-1138">The action delegate to execute asynchronously.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-1139"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> , Zostanie przypisany do nowego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-1139">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span></span></param>
        <summary><span data-ttu-id="74216-1140">Tworzy i uruchamia <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1140">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="74216-1141">Rozpoczęto <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1141">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1142">Wywoływanie `StartNew` jest funkcjonalnym odpowiednikiem Tworzenie zadania przy użyciu jednej z jego konstruktorów i następnie wywoływania <xref:System.Threading.Tasks.Task.Start%2A> można zaplanować jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="74216-1142">Calling `StartNew` is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="74216-1143">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], możesz użyć <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> metody w prosty sposób, aby wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> przy użyciu parametrów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="74216-1143">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> with default parameters.</span></span> <span data-ttu-id="74216-1144">Należy jednak pamiętać, że występuje różnica w zachowaniu między obiema metodami dotyczące: <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> domyślnie nie zezwala na podrzędne zadania wprowadzenie <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> opcję dołączenia do bieżącego <xref:System.Threading.Tasks.Task> wystąpienia, natomiast <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> jest.</span><span class="sxs-lookup"><span data-stu-id="74216-1144">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> does.</span></span> <span data-ttu-id="74216-1145">Aby uzyskać więcej informacji i przykłady kodu, zobacz [Task.Run vs Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) w Programowanie równoległe z bloga platformy .NET.</span><span class="sxs-lookup"><span data-stu-id="74216-1145">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74216-1146">Poniższy przykład wywołuje <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> metodę, aby utworzyć zadanie, który iteruje po plików w katalogu C:\Windows\System32.</span><span class="sxs-lookup"><span data-stu-id="74216-1146">The following example calls the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> method to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="74216-1147">Wywołań wyrażeń lambda <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> metody w celu dodania informacji o każdym z plików do <xref:System.Collections.Generic.List%601> obiektu.</span><span class="sxs-lookup"><span data-stu-id="74216-1147">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="74216-1148">Każdy odłączone zadanie zagnieżdżone, wywoływany przez <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> pętli służy do sprawdzania stanu token anulowania i czy zażądano anulowania wywołuje <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="74216-1148">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="74216-1149"><xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> Metoda zgłasza wyjątek <xref:System.OperationCanceledException> wyjątku, który jest obsługiwany w `catch` zablokować, jeśli wątek wywołujący wywołuje <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="74216-1149">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew2.cs#2)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-1150">Podany <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-1150">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1151">Wyjątek, który jest generowany, gdy <paramref name="action" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1151">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1152">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1152">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-1153">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-1153">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-1154">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-1154">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="74216-1155">Delegat akcji do wykonania asynchronicznie.</span><span class="sxs-lookup"><span data-stu-id="74216-1155">The action delegate to execute asynchronously.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-1156">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task" /></span><span class="sxs-lookup"><span data-stu-id="74216-1156">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="74216-1157">Tworzy i uruchamia <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1157">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="74216-1158">Rozpoczęto <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1158">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1159">Wywoływanie StartNew jest funkcjonalnym odpowiednikiem Tworzenie zadania przy użyciu jednej z jego konstruktorów i następnie wywoływania <xref:System.Threading.Tasks.Task.Start%2A> można zaplanować jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="74216-1159">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="74216-1160">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], możesz użyć <xref:System.Threading.Tasks.Task.Run%2A> metody z <xref:System.Action> obiektu w prosty sposób, aby wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> przy użyciu parametrów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="74216-1160">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="74216-1161">Aby uzyskać więcej informacji i przykłady kodu, zobacz [Task.Run vs Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) w Programowanie równoległe z bloga platformy .NET.</span><span class="sxs-lookup"><span data-stu-id="74216-1161">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1162">Wyjątek, który jest generowany, gdy <paramref name="action" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1162">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-1163">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1163">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1164">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1164">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-1165">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-1165">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-1166">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-1166">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (action As Action(Of Object), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="74216-1167">Delegat akcji do wykonania asynchronicznie.</span><span class="sxs-lookup"><span data-stu-id="74216-1167">The action delegate to execute asynchronously.</span></span></param>
        <param name="state"><span data-ttu-id="74216-1168">Obiekt zawierający dane do użycia przez <paramref name="action" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1168">An object containing data to be used by the <paramref name="action" /> delegate.</span></span></param>
        <summary><span data-ttu-id="74216-1169">Tworzy i uruchamia <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1169">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="74216-1170">Rozpoczęto <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1170">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1171">Wywoływanie <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> jest funkcjonalnym odpowiednikiem tworzenie <xref:System.Threading.Tasks.Task> przy użyciu jednej z jego konstruktorów, a następnie wywołując <xref:System.Threading.Tasks.Task.Start%2A> metodę, aby zaplanować jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="74216-1171">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task> using one of its constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="74216-1172">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], możesz użyć <xref:System.Threading.Tasks.Task.Run%2A> metody z <xref:System.Action> obiektu w prosty sposób, aby wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> przy użyciu parametrów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="74216-1172">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="74216-1173">Aby uzyskać więcej informacji i przykłady kodu, zobacz [Task.Run vs Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) w Programowanie równoległe z bloga platformy .NET.</span><span class="sxs-lookup"><span data-stu-id="74216-1173">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74216-1174">W poniższym przykładzie zdefiniowano tablicę wyrazów 6.</span><span class="sxs-lookup"><span data-stu-id="74216-1174">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="74216-1175">Poszczególnych wyrazów jest następnie przekazywany do <xref:System.Action%601> delegata, która zaszyfrowanie słowa i wyświetla słowo oryginalnego i jego wersja zaszyfrowane.</span><span class="sxs-lookup"><span data-stu-id="74216-1175">Each word is then passed to an <xref:System.Action%601> delegate, which scrambles the word and displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew3.cs#3)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew3.vb#3)]  
  
 <span data-ttu-id="74216-1176">Należy zauważyć, że przykład inicjuje pojedynczy generator liczb losowych, który jest chroniony przez blokadę.</span><span class="sxs-lookup"><span data-stu-id="74216-1176">Note that the example initializes a single random number generator, which is protected by a lock.</span></span> <span data-ttu-id="74216-1177">Dla potrzeb blokady, zobacz "System.Random klasy i wątku bezpieczeństwa" w <xref:System.Random> temat poświęcony klasie.</span><span class="sxs-lookup"><span data-stu-id="74216-1177">For the need of a lock, see "The System.Random class and thread safety" in the <xref:System.Random> class topic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1178"><paramref name="action" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1178">The <paramref name="action" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1179">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1179">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-1180">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-1180">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-1181">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-1181">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="74216-1182">Delegat akcji do wykonania asynchronicznie.</span><span class="sxs-lookup"><span data-stu-id="74216-1182">The action delegate to execute asynchronously.</span></span></param>
        <param name="state"><span data-ttu-id="74216-1183">Obiekt zawierający dane do użycia przez <paramref name="action" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1183">An object containing data to be used by the <paramref name="action" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-1184"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> Które zostanie przypisane do nowego <see cref="T:System.Threading.Tasks.Task" /></span><span class="sxs-lookup"><span data-stu-id="74216-1184">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="74216-1185">Tworzy i uruchamia <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1185">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="74216-1186">Rozpoczęto <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1186">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1187">Wywoływanie StartNew jest funkcjonalnym odpowiednikiem Tworzenie zadania przy użyciu jednej z jego konstruktorów i następnie wywoływania <xref:System.Threading.Tasks.Task.Start%2A> można zaplanować jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="74216-1187">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="74216-1188">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], możesz użyć <xref:System.Threading.Tasks.Task.Run%2A> metody z <xref:System.Action> obiektu w prosty sposób, aby wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> przy użyciu parametrów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="74216-1188">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="74216-1189">Aby uzyskać więcej informacji i przykłady kodu, zobacz [Task.Run vs Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) w Programowanie równoległe z bloga platformy .NET.</span><span class="sxs-lookup"><span data-stu-id="74216-1189">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74216-1190">W poniższym przykładzie zdefiniowano tablicę wyrazów 6.</span><span class="sxs-lookup"><span data-stu-id="74216-1190">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="74216-1191">Poszczególnych wyrazów jest następnie przekazywany do <xref:System.Action%601> delegata, która zaszyfrowanie słowa i wyświetla słowo oryginalnego i jego wersja zaszyfrowane.</span><span class="sxs-lookup"><span data-stu-id="74216-1191">Each word is then passed to an <xref:System.Action%601> delegate, which scrambles the word and displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew4.cs#4)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew4.vb#4)]  
  
 <span data-ttu-id="74216-1192">Należy zauważyć, że przykład inicjuje pojedynczy generator liczb losowych, który jest chroniony przez blokadę.</span><span class="sxs-lookup"><span data-stu-id="74216-1192">Note that the example initializes a single random number generator, which is protected by a lock.</span></span> <span data-ttu-id="74216-1193">Dla potrzeb blokady, zobacz "System.Random klasy i wątku bezpieczeństwa" w <xref:System.Random> temat poświęcony klasie.</span><span class="sxs-lookup"><span data-stu-id="74216-1193">For the need of a lock, see "The System.Random class and thread safety" in the <xref:System.Random> class topic.</span></span> <span data-ttu-id="74216-1194">Aby obsłużyć możliwość uszkodzenia generator liczb losowych, token anulowania jest przekazywany do zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-1194">To handle the possibility of corruption of the random number generator, a cancellation token is passed to task.</span></span> <span data-ttu-id="74216-1195">Jeśli dwie liczby losowe równa zero, metoda zakłada, że generator liczb losowych jest uszkodzony i ustawia token anulowania.</span><span class="sxs-lookup"><span data-stu-id="74216-1195">If two random numbers equal zero, the method assumes that the random number generator is corrupted and sets the cancellation token.</span></span> <span data-ttu-id="74216-1196">Przed rozpoczęciem sortowania `chars` tablicę, która zawiera sześć znaków w słowie wywołania metody <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> metodę, aby zgłosić <xref:System.OperationCanceledException> Jeśli token został anulowany.</span><span class="sxs-lookup"><span data-stu-id="74216-1196">Before sorting the `chars` array that contains the six characters in a word, the method calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method to throw an <xref:System.OperationCanceledException> if the token has been canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-1197">Podany <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-1197">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1198">Wyjątek, który jest generowany, gdy <paramref name="action" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1198">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1199">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1199">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-1200">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-1200">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-1201">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-1201">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="74216-1202">Delegat akcji do wykonania asynchronicznie.</span><span class="sxs-lookup"><span data-stu-id="74216-1202">The action delegate to execute asynchronously.</span></span></param>
        <param name="state"><span data-ttu-id="74216-1203">Obiekt zawierający dane do użycia przez <paramref name="action" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1203">An object containing data to be used by the <paramref name="action" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-1204">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task" /></span><span class="sxs-lookup"><span data-stu-id="74216-1204">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="74216-1205">Tworzy i uruchamia <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1205">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="74216-1206">Rozpoczęto <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1206">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1207">Wywoływanie StartNew jest funkcjonalnym odpowiednikiem Tworzenie zadania przy użyciu jednej z jego konstruktorów i następnie wywoływania <xref:System.Threading.Tasks.Task.Start%2A> można zaplanować jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="74216-1207">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="74216-1208">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], możesz użyć <xref:System.Threading.Tasks.Task.Run%2A> metody z <xref:System.Action> obiektu w prosty sposób, aby wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> przy użyciu parametrów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="74216-1208">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="74216-1209">Aby uzyskać więcej informacji i przykłady kodu, zobacz [Task.Run vs Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) w Programowanie równoległe z bloga platformy .NET.</span><span class="sxs-lookup"><span data-stu-id="74216-1209">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1210">Wyjątek, który jest generowany, gdy <paramref name="action" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1210">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-1211">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1211">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1212">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1212">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-1213">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-1213">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-1214">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-1214">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="74216-1215">Delegat akcji do wykonania asynchronicznie.</span><span class="sxs-lookup"><span data-stu-id="74216-1215">The action delegate to execute asynchronously.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-1216"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> Które zostanie przypisane do nowego <see cref="T:System.Threading.Tasks.Task" /></span><span class="sxs-lookup"><span data-stu-id="74216-1216">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-1217">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task" /></span><span class="sxs-lookup"><span data-stu-id="74216-1217">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <param name="scheduler"><span data-ttu-id="74216-1218"><see cref="T:System.Threading.Tasks.TaskScheduler" /> Służący do zaplanowania utworzony <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1218">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="74216-1219">Tworzy i uruchamia <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1219">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="74216-1220">Rozpoczęto <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1220">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1221">Wywoływanie StartNew jest funkcjonalnym odpowiednikiem Tworzenie zadania przy użyciu jednej z jego konstruktorów i następnie wywoływania <xref:System.Threading.Tasks.Task.Start%2A> można zaplanować jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="74216-1221">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="74216-1222">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], możesz użyć <xref:System.Threading.Tasks.Task.Run%2A> metody z <xref:System.Action> obiektu w prosty sposób, aby wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> przy użyciu parametrów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="74216-1222">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="74216-1223">Aby uzyskać więcej informacji i przykłady kodu, zobacz [Task.Run vs Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) w Programowanie równoległe z bloga platformy .NET.</span><span class="sxs-lookup"><span data-stu-id="74216-1223">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-1224">Podany <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-1224">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1225">Wyjątek, który jest generowany, gdy <paramref name="action" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1225">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-1226">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-1226">-or-</span></span> 
<span data-ttu-id="74216-1227">Wyjątek, który jest generowany, gdy <paramref name="scheduler" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1227">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-1228">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1228">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1229">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1229">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1230">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-1230">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1231">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1231">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-1232">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-1232">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-1233">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-1233">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="74216-1234">Delegat akcji do wykonania asynchronicznie.</span><span class="sxs-lookup"><span data-stu-id="74216-1234">The action delegate to execute asynchronously.</span></span></param>
        <param name="state"><span data-ttu-id="74216-1235">Obiekt zawierający dane do użycia przez <paramref name="action" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1235">An object containing data to be used by the <paramref name="action" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-1236"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> , Zostanie przypisany do nowego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-1236">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-1237">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task" /></span><span class="sxs-lookup"><span data-stu-id="74216-1237">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <param name="scheduler"><span data-ttu-id="74216-1238"><see cref="T:System.Threading.Tasks.TaskScheduler" /> Służący do zaplanowania utworzony <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1238">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="74216-1239">Tworzy i uruchamia <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1239">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="74216-1240">Rozpoczęto <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1240">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1241">Wywoływanie StartNew jest funkcjonalnym odpowiednikiem Tworzenie zadania przy użyciu jednej z jego konstruktorów i następnie wywoływania <xref:System.Threading.Tasks.Task.Start%2A> można zaplanować jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="74216-1241">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="74216-1242">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], możesz użyć <xref:System.Threading.Tasks.Task.Run%2A> metody z <xref:System.Action> obiektu w prosty sposób, aby wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> przy użyciu parametrów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="74216-1242">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="74216-1243">Aby uzyskać więcej informacji i przykłady kodu, zobacz [Task.Run vs Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) w Programowanie równoległe z bloga platformy .NET.</span><span class="sxs-lookup"><span data-stu-id="74216-1243">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-1244">Podany <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-1244">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1245">Wyjątek, który jest generowany, gdy <paramref name="action" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1245">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-1246">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-1246">-or-</span></span> 
<span data-ttu-id="74216-1247">Wyjątek, który jest generowany, gdy <paramref name="scheduler" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1247">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-1248">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1248">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1249">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1249">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1250">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-1250">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1251">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1251">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-1252">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-1252">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-1253">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-1253">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-1254">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1254">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="74216-1255">Delegat funkcji, który zwraca wynik przyszłych, który ma być dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1255">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="74216-1256">Tworzy i uruchamia <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1256">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="74216-1257">Rozpoczęto <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1257">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1258">Wywoływanie <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> jest funkcjonalnym odpowiednikiem tworzenie <xref:System.Threading.Tasks.Task%601> przy użyciu jednej z jego konstruktorów, a następnie wywołując <xref:System.Threading.Tasks.Task.Start%2A> można zaplanować jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="74216-1258">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="74216-1259">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], można wywołać <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> metody w prosty sposób, aby wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> przy użyciu parametrów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="74216-1259">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can call the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="74216-1260">Należy jednak pamiętać, że występuje różnica w zachowaniu między obiema metodami dotyczące: <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> domyślnie nie zezwala na podrzędne zadania wprowadzenie <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> opcję dołączenia do bieżącego <xref:System.Threading.Tasks.Task%601> wystąpienia, natomiast <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29> jest.</span><span class="sxs-lookup"><span data-stu-id="74216-1260">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29> does.</span></span> <span data-ttu-id="74216-1261">Aby uzyskać więcej informacji i przykłady kodu, zobacz wpis [Task.Run programu vs. Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) w Programowanie równoległe z bloga platformy .NET.</span><span class="sxs-lookup"><span data-stu-id="74216-1261">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74216-1262">Poniższy przykład jest aplikacją proste dodanie, która generuje dwie liczby losowe, a następnie monituje użytkownika o podanie ich suma.</span><span class="sxs-lookup"><span data-stu-id="74216-1262">The following example is a simple addition app that generates two random numbers and prompts the user to enter their sum.</span></span> <span data-ttu-id="74216-1263">Następnie informuje, czy odpowiedź jest poprawna, lub jeśli odpowiedzi użytkownika nie jest prawidłową liczbą monituje użytkownika o ponowne Wprowadź prawidłową liczbę.</span><span class="sxs-lookup"><span data-stu-id="74216-1263">It then indicates whether the answer is correct or, if the user's response is not a valid number, prompts the user to re-enter a valid number.</span></span> <span data-ttu-id="74216-1264"><xref:System.Threading.Tasks.TaskFactory.StartNew%2A> Służy do tworzenia <xref:System.Threading.Tasks.Task%601> obiekty, które zwracają liczby losowe, aby dodać.</span><span class="sxs-lookup"><span data-stu-id="74216-1264">The <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is used to create the <xref:System.Threading.Tasks.Task%601> objects that return the random numbers to add.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run5.cs#5)]
 [!code-vb[System.Threading.Tasks.Task.Run#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1265"><paramref name="function" /> Argument jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1265">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1266">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1266">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-1267">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-1267">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-1268">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-1268">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of Object, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-1269">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1269">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="74216-1270">Delegat funkcji, który zwraca wynik przyszłych, który ma być dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1270">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="state"><span data-ttu-id="74216-1271">Obiekt zawierający dane do użycia przez <paramref name="function" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1271">An object containing data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <summary><span data-ttu-id="74216-1272">Tworzy i uruchamia <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1272">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="74216-1273">Rozpoczęto <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1273">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1274">Wywoływanie StartNew jest funkcjonalnym odpowiednikiem tworzenie <xref:System.Threading.Tasks.Task%601> przy użyciu jednej z jego konstruktorów, a następnie wywołując <xref:System.Threading.Tasks.Task.Start%2A> można zaplanować jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="74216-1274">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="74216-1275">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], możesz użyć <xref:System.Threading.Tasks.Task.Run%2A> metody z <xref:System.Action> obiektu w prosty sposób, aby wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> przy użyciu parametrów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="74216-1275">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="74216-1276">Aby uzyskać więcej informacji i przykłady kodu, zobacz wpis [Task.Run programu vs. Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) w Programowanie równoległe z bloga platformy .NET.</span><span class="sxs-lookup"><span data-stu-id="74216-1276">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1277">Wyjątek, który jest generowany, gdy <paramref name="function" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1277">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1278">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1278">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-1279">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-1279">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-1280">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-1280">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-1281">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1281">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="74216-1282">Delegat funkcji, który zwraca wynik przyszłych, który ma być dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1282">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-1283"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> Które zostanie przypisane do nowego <see cref="T:System.Threading.Tasks.Task" /></span><span class="sxs-lookup"><span data-stu-id="74216-1283">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="74216-1284">Tworzy i uruchamia <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1284">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="74216-1285">Rozpoczęto <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1285">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1286">Wywoływanie <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> jest funkcjonalnym odpowiednikiem tworzenie <xref:System.Threading.Tasks.Task%601> przy użyciu jednej z jego konstruktorów, a następnie wywołując <xref:System.Threading.Tasks.Task.Start%2A> można zaplanować jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="74216-1286">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="74216-1287">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], możesz użyć <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> metody w prosty sposób, aby wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> przy użyciu parametrów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="74216-1287">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> with default parameters.</span></span> <span data-ttu-id="74216-1288">Należy jednak pamiętać, że występuje różnica w zachowaniu między obiema metodami dotyczące: <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> domyślnie nie zezwala na podrzędne zadania wprowadzenie <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> opcję dołączenia do bieżącego <xref:System.Threading.Tasks.Task%601> wystąpienia, natomiast <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> jest.</span><span class="sxs-lookup"><span data-stu-id="74216-1288">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> does.</span></span> <span data-ttu-id="74216-1289">Aby uzyskać więcej informacji i przykłady kodu, zobacz wpis [Task.Run programu vs. Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) w Programowanie równoległe z bloga platformy .NET.</span><span class="sxs-lookup"><span data-stu-id="74216-1289">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74216-1290">W poniższym przykładzie użyto dwa zadania do obliczenia sekwencji Fibonacci końcówce F100 = F100 1 + F100 2 z wartościami inicjującymi F1 = 1, F2 = 1 i F1 = 0, F2 = 1.</span><span class="sxs-lookup"><span data-stu-id="74216-1290">The following example uses two tasks to compute the Fibonacci sequence ending in F100 = F100-1 + F100-2 with seed values F1= 1, F2 = 1 and F1 = 0, F2= 1.</span></span> <span data-ttu-id="74216-1291">Około połowę czasu, token anulowania zostanie ustawione jako wykonania operacji.</span><span class="sxs-lookup"><span data-stu-id="74216-1291">Approximately half of the time, a cancellation token is set as the operations execute.</span></span> <span data-ttu-id="74216-1292">Dane wyjściowe z przykładu przedstawia wynik, jeśli dwa zadania zakończy się pomyślnie, a Jeśli token zostanie anulowane.</span><span class="sxs-lookup"><span data-stu-id="74216-1292">The output from the example shows the result if the two tasks complete successfully and if the token is cancelled.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run9.cs#9)]
 [!code-vb[System.Threading.Tasks.Task.Run#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-1293">Podany <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-1293">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1294">Wyjątek, który jest generowany, gdy <paramref name="function" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1294">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1295">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1295">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-1296">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-1296">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-1297">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-1297">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-1298">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1298">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="74216-1299">Delegat funkcji, który zwraca wynik przyszłych, który ma być dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1299">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-1300">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1300">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="74216-1301">Tworzy i uruchamia <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1301">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="74216-1302">Rozpoczęto <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1302">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1303">Wywoływanie StartNew jest funkcjonalnym odpowiednikiem tworzenie <xref:System.Threading.Tasks.Task%601> przy użyciu jednej z jego konstruktorów, a następnie wywołując <xref:System.Threading.Tasks.Task.Start%2A> można zaplanować jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="74216-1303">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="74216-1304">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], możesz użyć <xref:System.Threading.Tasks.Task.Run%2A> metody z <xref:System.Action> obiektu w prosty sposób, aby wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> przy użyciu parametrów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="74216-1304">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="74216-1305">Aby uzyskać więcej informacji i przykłady kodu, zobacz wpis [Task.Run programu vs. Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) w Programowanie równoległe z bloga platformy .NET.</span><span class="sxs-lookup"><span data-stu-id="74216-1305">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1306">Wyjątek, który jest generowany, gdy <paramref name="function" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1306">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-1307">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1307">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1308">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1308">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1309">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-1309">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1310">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1310">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-1311">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-1311">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-1312">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-1312">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-1313">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1313">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="74216-1314">Delegat funkcji, który zwraca wynik przyszłych, który ma być dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1314">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="state"><span data-ttu-id="74216-1315">Obiekt zawierający dane do użycia przez <paramref name="function" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1315">An object containing data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-1316"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> Które zostanie przypisane do nowego <see cref="T:System.Threading.Tasks.Task" /></span><span class="sxs-lookup"><span data-stu-id="74216-1316">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="74216-1317">Tworzy i uruchamia <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1317">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="74216-1318">Rozpoczęto <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1318">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1319">Wywoływanie StartNew jest funkcjonalnym odpowiednikiem tworzenie <xref:System.Threading.Tasks.Task%601> przy użyciu jednej z jego konstruktorów, a następnie wywołując <xref:System.Threading.Tasks.Task.Start%2A> można zaplanować jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="74216-1319">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="74216-1320">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], możesz użyć <xref:System.Threading.Tasks.Task.Run%2A> metody z <xref:System.Action> obiektu w prosty sposób, aby wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> przy użyciu parametrów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="74216-1320">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="74216-1321">Aby uzyskać więcej informacji i przykłady kodu, zobacz wpis [Task.Run programu vs. Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) w Programowanie równoległe z bloga platformy .NET.</span><span class="sxs-lookup"><span data-stu-id="74216-1321">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-1322">Podany <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-1322">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1323">Wyjątek, który jest generowany, gdy <paramref name="function" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1323">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1324">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1324">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-1325">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-1325">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-1326">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-1326">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-1327">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1327">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="74216-1328">Delegat funkcji, który zwraca wynik przyszłych, który ma być dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1328">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="state"><span data-ttu-id="74216-1329">Obiekt zawierający dane do użycia przez <paramref name="function" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1329">An object containing data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-1330">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1330">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="74216-1331">Tworzy i uruchamia <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1331">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="74216-1332">Rozpoczęto <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1332">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1333">Wywoływanie StartNew jest funkcjonalnym odpowiednikiem tworzenie <xref:System.Threading.Tasks.Task%601> przy użyciu jednej z jego konstruktorów, a następnie wywołując <xref:System.Threading.Tasks.Task.Start%2A> można zaplanować jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="74216-1333">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="74216-1334">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], możesz użyć <xref:System.Threading.Tasks.Task.Run%2A> metody z <xref:System.Action> obiektu w prosty sposób, aby wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> przy użyciu parametrów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="74216-1334">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="74216-1335">Aby uzyskać więcej informacji i przykłady kodu, zobacz wpis [Task.Run programu vs. Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) w Programowanie równoległe z bloga platformy .NET.</span><span class="sxs-lookup"><span data-stu-id="74216-1335">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1336">Wyjątek, który jest generowany, gdy <paramref name="function" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1336">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-1337">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1337">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1338">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1338">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1339">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-1339">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1340">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1340">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-1341">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-1341">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-1342">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-1342">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-1343">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1343">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="74216-1344">Delegat funkcji, który zwraca wynik przyszłych, który ma być dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1344">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-1345"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> , Zostanie przypisany do nowego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-1345">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-1346">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1346">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="74216-1347"><see cref="T:System.Threading.Tasks.TaskScheduler" /> Służący do zaplanowania utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1347">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="74216-1348">Tworzy i uruchamia <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1348">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="74216-1349">Rozpoczęto <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1349">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1350">Wywoływanie StartNew jest funkcjonalnym odpowiednikiem tworzenie <xref:System.Threading.Tasks.Task%601> przy użyciu jednej z jego konstruktorów, a następnie wywołując <xref:System.Threading.Tasks.Task.Start%2A> można zaplanować jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="74216-1350">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="74216-1351">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], możesz użyć <xref:System.Threading.Tasks.Task.Run%2A> metody z <xref:System.Action> obiektu w prosty sposób, aby wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> przy użyciu parametrów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="74216-1351">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="74216-1352">Aby uzyskać więcej informacji i przykłady kodu, zobacz wpis [Task.Run programu vs. Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) w Programowanie równoległe z bloga platformy .NET.</span><span class="sxs-lookup"><span data-stu-id="74216-1352">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-1353">Podany <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-1353">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1354">Wyjątek, który jest generowany, gdy <paramref name="function" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1354">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-1355">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-1355">-or-</span></span> 
<span data-ttu-id="74216-1356">Wyjątek, który jest generowany, gdy <paramref name="scheduler" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1356">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-1357">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1357">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1358">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1358">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1359">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-1359">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1360">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1360">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-1361">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-1361">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-1362">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-1362">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="74216-1363">Typ wyniku, które są dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1363">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="74216-1364">Delegat funkcji, który zwraca wynik przyszłych, który ma być dostępne za pośrednictwem <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1364">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="state"><span data-ttu-id="74216-1365">Obiekt zawierający dane do użycia przez <paramref name="function" /> delegować.</span><span class="sxs-lookup"><span data-stu-id="74216-1365">An object containing data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="74216-1366"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> , Zostanie przypisany do nowego zadania.</span><span class="sxs-lookup"><span data-stu-id="74216-1366">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="74216-1367">Wartość TaskCreationOptions, która steruje zachowaniem utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1367">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="74216-1368"><see cref="T:System.Threading.Tasks.TaskScheduler" /> Służący do zaplanowania utworzony <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1368">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="74216-1369">Tworzy i uruchamia <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1369">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="74216-1370">Rozpoczęto <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="74216-1370">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74216-1371">Wywoływanie StartNew jest funkcjonalnym odpowiednikiem tworzenie <xref:System.Threading.Tasks.Task%601> przy użyciu jednej z jego konstruktorów, a następnie wywołując <xref:System.Threading.Tasks.Task.Start%2A> można zaplanować jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="74216-1371">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="74216-1372">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], możesz użyć <xref:System.Threading.Tasks.Task.Run%2A> metody z <xref:System.Action> obiektu w prosty sposób, aby wywołać <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> przy użyciu parametrów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="74216-1372">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="74216-1373">Aby uzyskać więcej informacji i przykłady kodu, zobacz wpis [Task.Run programu vs. Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) w Programowanie równoległe z bloga platformy .NET.</span><span class="sxs-lookup"><span data-stu-id="74216-1373">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="74216-1374">Podany <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span><span class="sxs-lookup"><span data-stu-id="74216-1374">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74216-1375">Wyjątek, który jest generowany, gdy <paramref name="function" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1375">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span>  
  
<span data-ttu-id="74216-1376">—lub—</span><span class="sxs-lookup"><span data-stu-id="74216-1376">-or-</span></span> 
<span data-ttu-id="74216-1377">Wyjątek, który jest generowany, gdy <paramref name="scheduler" /> argument ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="74216-1377">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74216-1378">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1378">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1379">Wyjątek, który jest generowany, gdy <paramref name="creationOptions" /> argument określa nieprawidłową wartość TaskCreationOptions.</span><span class="sxs-lookup"><span data-stu-id="74216-1379">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="74216-1380">Aby uzyskać więcej informacji zobacz uwagi dla <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span><span class="sxs-lookup"><span data-stu-id="74216-1380">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="74216-1381">Biblioteka zadań równoległych (TPL)</span><span class="sxs-lookup"><span data-stu-id="74216-1381">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="74216-1382">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span><span class="sxs-lookup"><span data-stu-id="74216-1382">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="74216-1383">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="74216-1383">Task Cancellation</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>