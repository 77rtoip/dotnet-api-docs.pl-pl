<Type Name="Task" FullName="System.Threading.Tasks.Task">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d920b17ab80db20fab0e3101b745858eade81dd1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30580045" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Task : IAsyncResult, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Task extends System.Object implements class System.IAsyncResult, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Task" />
  <TypeSignature Language="VB.NET" Value="Public Class Task&#xA;Implements IAsyncResult, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Task : IAsyncResult, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.SystemThreadingTasks_TaskDebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="3636f-101">Reprezentuje operację asynchroniczną.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3636f-101">Represents an asynchronous operation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
   
## Remarks  
 <span data-ttu-id="3636f-102"><xref:System.Threading.Tasks.Task> Klasy reprezentuje jednej operacji, która nie zwraca wartość i która zazwyczaj wykonuje asynchronicznie.</span><span class="sxs-lookup"><span data-stu-id="3636f-102">The <xref:System.Threading.Tasks.Task> class represents a single operation that does not return a value and that usually executes asynchronously.</span></span> <span data-ttu-id="3636f-103"><xref:System.Threading.Tasks.Task> obiekty są jednym z centralnej składników [wzorca asynchronicznego opartego na zadaniach](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) najpierw wprowadzone w programie .NET Framework 4.</span><span class="sxs-lookup"><span data-stu-id="3636f-103"><xref:System.Threading.Tasks.Task> objects are one of the central components of the  [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) first introduced in the .NET Framework 4.</span></span> <span data-ttu-id="3636f-104">Ponieważ praca jest wykonywana przez <xref:System.Threading.Tasks.Task> obiektu zazwyczaj wykonuje asynchronicznie w wątku puli wątków zamiast synchronicznie na wątku głównego aplikacji, można użyć <xref:System.Threading.Tasks.Task.Status%2A> właściwości, oraz z <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, i <xref:System.Threading.Tasks.Task.IsFaulted%2A> właściwości, aby określić stan zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-104">Because the work performed by a <xref:System.Threading.Tasks.Task> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task.</span></span> <span data-ttu-id="3636f-105">Najczęściej wyrażenia lambda jest używany do określenia pracę zadania do wykonania.</span><span class="sxs-lookup"><span data-stu-id="3636f-105">Most commonly, a lambda expression is used to specify the work that the task is to perform.</span></span>  
  
 <span data-ttu-id="3636f-106">Dla operacji, które zwracają wartości, możesz użyć <xref:System.Threading.Tasks.Task%601> klasy.</span><span class="sxs-lookup"><span data-stu-id="3636f-106">For operations that return values, you use the <xref:System.Threading.Tasks.Task%601> class.</span></span>  
  
 <span data-ttu-id="3636f-107">W tej sekcji:</span><span class="sxs-lookup"><span data-stu-id="3636f-107">In this section:</span></span>  
  
 <span data-ttu-id="3636f-108">[Przykłady wystąpienia zadania](#Instant) </span><span class="sxs-lookup"><span data-stu-id="3636f-108">[Task instantiation examples](#Instant) </span></span>  
 <span data-ttu-id="3636f-109">[Tworzenie i wykonywanie zadania](#Creating) </span><span class="sxs-lookup"><span data-stu-id="3636f-109">[Creating and executing a task](#Creating) </span></span>  
 <span data-ttu-id="3636f-110">[Oddzielanie zadań tworzenia i wykonywania](#Separating) </span><span class="sxs-lookup"><span data-stu-id="3636f-110">[Separating task creation and execution](#Separating) </span></span>  
 <span data-ttu-id="3636f-111">[Oczekiwanie na ukończenie zadań jednego lub więcej](#WaitingForOne) </span><span class="sxs-lookup"><span data-stu-id="3636f-111">[Waiting for one or more tasks to complete](#WaitingForOne) </span></span>  
 <span data-ttu-id="3636f-112">[Zadania i kultury.](#Culture) </span><span class="sxs-lookup"><span data-stu-id="3636f-112">[Tasks and culture](#Culture) </span></span>  
 [<span data-ttu-id="3636f-113">Dla deweloperów debugera</span><span class="sxs-lookup"><span data-stu-id="3636f-113">For debugger developers</span></span>](#Debugger)  

 <a name="Instant"></a>     
## <a name="task-instantiation"></a><span data-ttu-id="3636f-114">Podczas tworzenia wystąpienia zadania</span><span class="sxs-lookup"><span data-stu-id="3636f-114">Task instantiation</span></span>  
 <span data-ttu-id="3636f-115">Poniższy przykład tworzy i wykonuje cztery zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-115">The following example creates and executes four tasks.</span></span> <span data-ttu-id="3636f-116">Wykonanie zadania trzy <xref:System.Action%601> delegata o nazwie `action`, która akceptuje argument typu <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="3636f-116">Three tasks execute an <xref:System.Action%601> delegate named `action`, which accepts an argument of type <xref:System.Object>.</span></span> <span data-ttu-id="3636f-117">Czwarty zadania wykonuje wyrażenia lambda ( <xref:System.Action> delegować) czyli zdefiniowano w tekście w wywołaniu metody tworzenia zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-117">A fourth task executes a lambda expression (an <xref:System.Action> delegate) that is defined inline in the call to the task creation method.</span></span> <span data-ttu-id="3636f-118">Każde zadanie jest tworzone i uruchom w inny sposób:</span><span class="sxs-lookup"><span data-stu-id="3636f-118">Each task is instantiated and run in a different way:</span></span>  
  
-   <span data-ttu-id="3636f-119">Zadanie `t1` zostanie uruchomiony przez wywołanie konstruktora klasy zadania, ale jest uruchamiana przez wywołanie jego <xref:System.Threading.Tasks.Task.Start> metody tylko po zadań `t2` została uruchomiona.</span><span class="sxs-lookup"><span data-stu-id="3636f-119">Task `t1` is instantiated by calling a Task class constructor, but is started by calling its <xref:System.Threading.Tasks.Task.Start> method only after task `t2` has started.</span></span>  
  
-   <span data-ttu-id="3636f-120">Zadanie `t2` to wystąpienie zostało utworzone i uruchomione w wywołaniu metody pojedynczego przez wywołanie metody <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-120">Task `t2` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="3636f-121">Zadanie `t3` to wystąpienie zostało utworzone i uruchomione w wywołaniu metody pojedynczego przez wywołanie metody <xref:System.Threading.Tasks.Task.Run%28System.Action%29> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-121">Task `t3` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span>  
  
-   <span data-ttu-id="3636f-122">Zadanie `t4` jest wykonywana synchronicznie w głównym wątku przez wywołanie <xref:System.Threading.Tasks.Task.RunSynchronously> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-122">Task `t4` is executed synchronously on the main thread by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method.</span></span>  
  
 <span data-ttu-id="3636f-123">Ponieważ zadania `t4` synchronicznie, wykonuje on wykonuje na wątku głównego aplikacji.</span><span class="sxs-lookup"><span data-stu-id="3636f-123">Because task `t4` executes synchronously, it executes on the main application thread.</span></span> <span data-ttu-id="3636f-124">Asynchronicznie zwykle wykonać kolejnych zadań na jeden lub więcej wątków z puli wątków.</span><span class="sxs-lookup"><span data-stu-id="3636f-124">The remaining tasks execute asynchronously typically on one or more thread pool threads.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew.cs#01)]
 [!code-vb[System.Threading.Tasks.Task#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew.vb#01)] 
    
<a name="Creating"></a>   
## <a name="creating-and-executing-a-task"></a><span data-ttu-id="3636f-125">Tworzenie i wykonywanie zadania</span><span class="sxs-lookup"><span data-stu-id="3636f-125">Creating and executing a task</span></span>  
 <span data-ttu-id="3636f-126"><xref:System.Threading.Tasks.Task> można tworzyć wystąpień różne sposoby.</span><span class="sxs-lookup"><span data-stu-id="3636f-126"><xref:System.Threading.Tasks.Task> instances may be created in a variety of ways.</span></span> <span data-ttu-id="3636f-127">Najbardziej typowe podejście, które jest dostępne począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], jest wywołanie statycznych <xref:System.Threading.Tasks.Task.Run%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-127">The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%2A> method.</span></span> <span data-ttu-id="3636f-128"><xref:System.Threading.Tasks.Task.Run%2A> Metoda zapewnia prosty sposób, aby uruchomić zadanie przy użyciu wartości domyślnych i bez konieczności dodatkowe parametry.</span><span class="sxs-lookup"><span data-stu-id="3636f-128">The <xref:System.Threading.Tasks.Task.Run%2A> method provides a simple way to start a task using default values and without requiring additional parameters.</span></span> <span data-ttu-id="3636f-129">W poniższym przykładzie użyto <xref:System.Threading.Tasks.Task.Run%28System.Action%29> metodę, aby uruchomić zadanie, które wykonuje pętlę, a następnie wyświetla liczby iteracji pętli:</span><span class="sxs-lookup"><span data-stu-id="3636f-129">The following example uses the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to start a task that loops and then displays the number of loop iterations:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/run1.cs#6)]
 [!code-vb[System.Threading.Tasks.Task#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/run1.vb#6)]  
  
 <span data-ttu-id="3636f-130">Zamiast i najbardziej typowa metoda, aby uruchomić zadanie [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], jest statycznych <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-130">An alternative, and the most common method to start a task in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3636f-131"><xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> Zwraca właściwość <xref:System.Threading.Tasks.TaskFactory> obiektu.</span><span class="sxs-lookup"><span data-stu-id="3636f-131">The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> property returns a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="3636f-132">Overloads z <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> metody pozwalają określić parametry do przekazania do opcje tworzenia zadania i harmonogramu zadań.</span><span class="sxs-lookup"><span data-stu-id="3636f-132">Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method let you specify parameters to pass to the task creation options and a task scheduler.</span></span> <span data-ttu-id="3636f-133">W poniższym przykładzie użyto <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> metody, aby uruchomić zadanie.</span><span class="sxs-lookup"><span data-stu-id="3636f-133">The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method to start a task.</span></span> <span data-ttu-id="3636f-134">Jest funkcjonalnym odpowiednikiem kodu w poprzednim przykładzie.</span><span class="sxs-lookup"><span data-stu-id="3636f-134">It is functionally equivalent to the code in the previous example.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew1.cs#7)]
 [!code-vb[System.Threading.Tasks.Task#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew1.vb#7)]  
  
 <span data-ttu-id="3636f-135">Aby uzyskać bardziej szczegółowy przykłady, zobacz [opartego na zadaniach asynchronicznej programowania](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-135">For more complete examples, see [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).</span></span>  
  
<a name="Separating"></a>   
## <a name="separating-task-creation-and-execution"></a><span data-ttu-id="3636f-136">Oddzielanie zadań tworzenia i wykonywania</span><span class="sxs-lookup"><span data-stu-id="3636f-136">Separating task creation and execution</span></span>  
 <span data-ttu-id="3636f-137"><xref:System.Threading.Tasks.Task> Klasa udostępnia także konstruktorów, który zainicjować zadanie, ale który nie należy planować go do wykonania.</span><span class="sxs-lookup"><span data-stu-id="3636f-137">The <xref:System.Threading.Tasks.Task> class also provides constructors that initialize the task but that do not schedule it for execution.</span></span> <span data-ttu-id="3636f-138">Ze względu na wydajność <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> lub <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> metoda jest to preferowany sposób tworzenia i planowania zadań obliczeniową, ale w scenariuszach, w których muszą być oddzielone tworzenie i planowanie, można użyć konstruktorów, a następnie wywołać <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> metodę, aby zaplanować zadanie do wykonania w późniejszym czasie.</span><span class="sxs-lookup"><span data-stu-id="3636f-138">For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method is the preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation and scheduling must be separated, you can use the constructors and then call the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> method to schedule the task for execution at a later time.</span></span>  
  
<a name="WaitingForOne"></a>   
## <a name="waiting-for-one-or-more-tasks-to-complete"></a><span data-ttu-id="3636f-139">Oczekiwanie na ukończenie zadań jednego lub więcej</span><span class="sxs-lookup"><span data-stu-id="3636f-139">Waiting for one or more tasks to complete</span></span>  
 <span data-ttu-id="3636f-140">Ponieważ zadania są zazwyczaj uruchamiane asynchronicznie w wątku puli wątków, wątku, który tworzy i uruchamia zadanie kontynuuje wykonywanie, jak utworzyć wystąpienia zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-140">Because tasks typically run asynchronously on a thread pool thread, the thread that creates and starts the task continues execution as soon as the task has been instantiated.</span></span> <span data-ttu-id="3636f-141">W niektórych przypadkach, gdy wątek wywołujący jest wątku głównego aplikacji, aplikacja może zakończyć przed każdą zadania faktycznie rozpoczyna się wykonanie.</span><span class="sxs-lookup"><span data-stu-id="3636f-141">In some cases, when the calling thread is the main application thread, the app may terminate before any the task actually begins execution.</span></span> <span data-ttu-id="3636f-142">W innych logiki aplikacji może wymagać wątek wywołujący kontynuować wykonywania, tylko wtedy, gdy co najmniej jedno zadanie zakończy działanie.</span><span class="sxs-lookup"><span data-stu-id="3636f-142">In others,   your application's logic may require that the calling thread continue execution only when one or more tasks has completed execution.</span></span> <span data-ttu-id="3636f-143">Możesz zsynchronizować wykonanie wątku i asynchroniczną zadań on uruchomiony przez wywołanie metody `Wait` metody oczekiwania na ukończenie zadań co najmniej jeden.</span><span class="sxs-lookup"><span data-stu-id="3636f-143">You can synchronize the execution of the calling thread and the asynchronous tasks it launches by calling a `Wait` method to wait for one or more tasks to complete.</span></span>  
  
 <span data-ttu-id="3636f-144">Oczekiwania dla pojedynczego zadania do wykonania, można wywołać jej <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-144">To wait for a single task to complete, you can call its <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3636f-145">Wywołanie <xref:System.Threading.Tasks.Task.Wait%2A> metody blokuje wątek wywołujący, aż do zakończenia wykonywania jedno wystąpienie klasy.</span><span class="sxs-lookup"><span data-stu-id="3636f-145">A call to the  <xref:System.Threading.Tasks.Task.Wait%2A> method blocks the calling thread until the single class instance has completed execution.</span></span>  
  
 <span data-ttu-id="3636f-146">Poniższy przykład wywołuje bez parametrów <xref:System.Threading.Tasks.Task.Wait> metody bezwarunkowo czekać do momentu ukończenia zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-146">The following example calls the parameterless <xref:System.Threading.Tasks.Task.Wait> method to wait unconditionally until a task completes.</span></span> <span data-ttu-id="3636f-147">Zadanie symuluje pracy przez wywołanie metody <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> metody w stan uśpienia przez dwie sekundy.</span><span class="sxs-lookup"><span data-stu-id="3636f-147">The task simulates work by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to sleep for two seconds.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait1.cs#8)]
 [!code-vb[System.Threading.Tasks.Task#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait1.vb#8)]  
  
 <span data-ttu-id="3636f-148">Można również warunkowo poczekać na ukończenie zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-148">You can also conditionally wait for a task to complete.</span></span> <span data-ttu-id="3636f-149"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> i <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> metody zablokować wątek wywołujący zakończenie zadania lub upłynie limit czasu, zależnie od zostanie osiągnięty jako pierwszy.</span><span class="sxs-lookup"><span data-stu-id="3636f-149">The  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> and <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> methods block the calling thread until the task finishes or a timeout interval elapses, whichever comes first.</span></span> <span data-ttu-id="3636f-150">Ponieważ w poniższym przykładzie uruchamia zadanie, które zostanie uśpiony na dwóch sekund, ale definiuje wartość limitu czasu sekundę, wywołujący bloki wątku do chwili osiągnięcia limitu czasu i przed ukończyć wykonywania zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-150">Since the following example launches a task that sleeps for two seconds but defines a one-second timeout value, the calling thread blocks until the timeout expires and before the task has completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait2.cs#9)]
 [!code-vb[System.Threading.Tasks.Task#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait2.vb#9)]  
  
 <span data-ttu-id="3636f-151">Token anulowania może też podawać, wywołując <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> i <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-151">You can also supply a cancellation token by calling the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> and  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> methods.</span></span> <span data-ttu-id="3636f-152">Jeśli token <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> właściwość jest `true`, czas oczekiwania zostało anulowane; jeśli prawda podczas staje się <xref:System.Threading.Tasks.Task.Wait%2A> metoda kończy.</span><span class="sxs-lookup"><span data-stu-id="3636f-152">If the  token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`, the wait is cancelled; if it becomes true while the <xref:System.Threading.Tasks.Task.Wait%2A> method terminates.</span></span>  
  
 <span data-ttu-id="3636f-153">W niektórych przypadkach można oczekiwać w pierwszym serii wykonywanych zadań do wykonania, ale nie jest szczególną uwagę, który go zadań.</span><span class="sxs-lookup"><span data-stu-id="3636f-153">In some cases, you may want to wait for the first of a series of executing tasks to complete, but don't care which task it is.</span></span>  <span data-ttu-id="3636f-154">W tym celu należy wywołać jednego z przeciążeń <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-154">For this purpose, you can call one of the overloads of the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="3636f-155">Poniższy przykład tworzy trzech zadań, z których każdy jest w stanie uśpienia Określ interwał przez generator liczb losowych.</span><span class="sxs-lookup"><span data-stu-id="3636f-155">The following example creates three tasks, each of which sleeps for an interval determine by a random number generator.</span></span> <span data-ttu-id="3636f-156"><xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> — Metoda oczekuje na zakończenie pierwszej zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-156">The <xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> method waits for the first task to complete.</span></span> <span data-ttu-id="3636f-157">W przykładzie następnie przedstawiono informacje o stanie wszystkich trzech zadań.</span><span class="sxs-lookup"><span data-stu-id="3636f-157">The example then displays information about the status of all three tasks.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WhenAny1.cs#10)]
 [!code-vb[System.Threading.Tasks.Task#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAny1.vb#10)]  
  
 <span data-ttu-id="3636f-158">Można również poczekać, aż wszystkie serię zadań do wykonania przez wywołanie metody <xref:System.Threading.Tasks.Task.WaitAll%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-158">You can also wait for all of a series of tasks to complete by calling the <xref:System.Threading.Tasks.Task.WaitAll%2A> method.</span></span> <span data-ttu-id="3636f-159">Poniższy przykład tworzy dziesięciu zadań, czeka na dziesięć wszystkie zakończyć, a następnie wyświetla jego stan.</span><span class="sxs-lookup"><span data-stu-id="3636f-159">The following example creates ten tasks, waits for all ten to complete, and then displays their status.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll1.cs#11)]
 [!code-vb[System.Threading.Tasks.Task#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll1.vb#11)]  
  
 <span data-ttu-id="3636f-160">Należy pamiętać, że podczas oczekiwania na ukończenie zadań co najmniej jeden wszelkie wyjątki zgłaszane w uruchomione zadania są przenoszone w wątku, który wywołuje `Wait` metody, jak przedstawiono na poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="3636f-160">Note that when you wait for one or more tasks to complete, any exceptions thrown in the running tasks are propagated on the thread that calls the `Wait` method, as the following example shows.</span></span> <span data-ttu-id="3636f-161">Uruchamia go 12 zadań, z których trzy zakończone normalnie i trzy które Zgłoś wyjątek, który występuje.</span><span class="sxs-lookup"><span data-stu-id="3636f-161">It launches 12 tasks, three of which complete normally and three of which throw an exception.</span></span> <span data-ttu-id="3636f-162">Pozostałe sześć zadań trzy są anulowane przed rozpoczęciem i trzy są anulowane podczas ich wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3636f-162">Of the remaining six tasks, three are cancelled before the start, and three are cancelled while they executing.</span></span> <span data-ttu-id="3636f-163">Wyjątki zostaną zgłoszone w <xref:System.Threading.Tasks.Task.WaitAll%2A> wywołanie metody i są obsługiwane przez `try` / `catch` bloku.</span><span class="sxs-lookup"><span data-stu-id="3636f-163">Exceptions are thrown in the <xref:System.Threading.Tasks.Task.WaitAll%2A> method call and are handled by a `try`/`catch` block.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll2.cs#12)]
 [!code-vb[System.Threading.Tasks.Task#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll2.vb#12)]  
  
 <span data-ttu-id="3636f-164">Aby uzyskać więcej informacji dotyczących obsługi wyjątków w operacji asynchronicznych opartego na zadaniach, zobacz [obsługi wyjątków](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-164">For more information on exception handling in task-based asynchronous operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
<a name="Culture"></a>   
## <a name="tasks-and-culture"></a><span data-ttu-id="3636f-165">Zadania i kultury.</span><span class="sxs-lookup"><span data-stu-id="3636f-165">Tasks and culture</span></span>  
 <span data-ttu-id="3636f-166">Począwszy od aplikacji klasycznych kierowanych [!INCLUDE[net_v46](~/includes/net-v46-md.md)], kultury wątku, które tworzy i wywołuje zadania staje się częścią kontekst wątku.</span><span class="sxs-lookup"><span data-stu-id="3636f-166">Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context.</span></span> <span data-ttu-id="3636f-167">Niezależnie od bieżącej kultury wątku, w której wykonuje zadanie, bieżącej kultury zadania jest kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="3636f-167">That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread.</span></span> <span data-ttu-id="3636f-168">Dla aplikacji, które odnoszą się do wersji programu .NET Framework, przed [!INCLUDE[net_v46](~/includes/net-v46-md.md)], kultura zadania jest kultura wątku, w której wykonuje zadanie.</span><span class="sxs-lookup"><span data-stu-id="3636f-168">For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes.</span></span> <span data-ttu-id="3636f-169">Aby uzyskać więcej informacji, zobacz sekcję "Kultury i oparty na zadaniach asynchronicznej operacji" w <xref:System.Globalization.CultureInfo> tematu.</span><span class="sxs-lookup"><span data-stu-id="3636f-169">For more information, see the "Culture and task-based asynchronous operations" section in the <xref:System.Globalization.CultureInfo> topic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3636f-170">Aplikacje ze sklepu wykonaj środowiska uruchomieniowego systemu Windows, ustawienia i uzyskiwanie domyślną kulturę.</span><span class="sxs-lookup"><span data-stu-id="3636f-170">Store apps follow the Windows Runtime in setting and getting the default culture.</span></span>  
  
<a name="Debugger"></a>   
## <a name="for-debugger-developers"></a><span data-ttu-id="3636f-171">Dla deweloperów debugera</span><span class="sxs-lookup"><span data-stu-id="3636f-171">For debugger developers</span></span>  
 <span data-ttu-id="3636f-172">Dla deweloperów Implementowanie niestandardowych debugery kilka elementów członkowskich wewnętrzne i prywatne zadania mogą być użyteczne, (one ulec zmianie wersji release).</span><span class="sxs-lookup"><span data-stu-id="3636f-172">For developers implementing custom debuggers, several internal and private members of task may be useful (these may change from release to release).</span></span> <span data-ttu-id="3636f-173">`m_taskId` Pola służy jako magazynu zapasowego dla <xref:System.Threading.Tasks.Task.Id%2A> właściwości, jednak podczas uzyskiwania dostępu do tego pola bezpośrednio z debuger może być skuteczniejsza niż dostęp do tej samej wartości za pośrednictwem metody pobierającej właściwości ( `s_taskIdCounter` licznik używane do pobierania następnego dostępnego Identyfikatora zadania).</span><span class="sxs-lookup"><span data-stu-id="3636f-173">The `m_taskId` field serves as the backing store for the <xref:System.Threading.Tasks.Task.Id%2A> property, however accessing this field directly from a debugger may be more efficient than accessing the same value through the property's getter method (the `s_taskIdCounter` counter is used to retrieve the next available ID for a task).</span></span> <span data-ttu-id="3636f-174">Podobnie `m_stateFlags` pola są przechowywane informacje o bieżący etap cyklu życia zadania, również dostępne za pośrednictwem informacji <xref:System.Threading.Tasks.Task.Status%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="3636f-174">Similarly, the `m_stateFlags` field stores information about the current lifecycle stage of the task, information also accessible through the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span> <span data-ttu-id="3636f-175">`m_action` Pole zawiera odwołanie do delegata zadania i `m_stateObject` pola przechowuje stan async przekazany do zadania przez dewelopera.</span><span class="sxs-lookup"><span data-stu-id="3636f-175">The `m_action` field stores a reference to the task's delegate, and the `m_stateObject` field stores the async state passed to the task by the developer.</span></span> <span data-ttu-id="3636f-176">Ponadto dla debugery, które analizy ramek stosu `InternalWait` metody służy potencjalnych znacznika, gdy zadanie jest wprowadzania operacji oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="3636f-176">Finally, for debuggers that parse stack frames, the `InternalWait` method serves a potential marker for when a task is entering a wait operation.</span></span>   
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="3636f-177">Wszystkie elementy członkowskie <see cref="T:System.Threading.Tasks.Task" />, z wyjątkiem <see cref="M:System.Threading.Tasks.Task.Dispose" />, są wątkowo i mogą być używane przez wiele wątków jednocześnie.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3636f-177">All members of <see cref="T:System.Threading.Tasks.Task" />, except for <see cref="M:System.Threading.Tasks.Task.Dispose" />, are thread-safe and may be used from multiple threads concurrently.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Tasks.Task`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-178">Inicjuje nowy <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-178">Initializes a new <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="3636f-179">Delegat, który reprezentuje kod do wykonania w zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-179">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-180">Inicjuje nowy <see cref="T:System.Threading.Tasks.Task" /> z określonej akcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-180">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-181">Zamiast wywoływania najczęściej ten konstruktor do tworzenia wystąpienia <xref:System.Threading.Tasks.Task> obiektu, a następnie uruchom zadanie jest wywołując statycznych <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> lub <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-181">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3636f-182">Zaletą tylko oferowane przez ten konstruktor jest możliwość tworzenia wystąpienia obiektu od wywołanie zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-182">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-183">W poniższym przykładzie użyto <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> Konstruktor do tworzenia zadań, które służą do pobierania nazwy plików w określonych katalogach.</span><span class="sxs-lookup"><span data-stu-id="3636f-183">The following example uses the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to create tasks that retrieve the filenames in specified directories.</span></span> <span data-ttu-id="3636f-184">Wszystkie zadania zapisu nazwy plików do pojedynczego <xref:System.Collections.Concurrent.ConcurrentBag%601> obiektu.</span><span class="sxs-lookup"><span data-stu-id="3636f-184">All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span> <span data-ttu-id="3636f-185">Przykład wywołuje <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> metody, aby upewnić się, że wszystkie zadania zostały wykonane, a następnie wyświetla liczba całkowita liczba zapisywane w nazwach plików <xref:System.Collections.Concurrent.ConcurrentBag%601> obiektu.</span><span class="sxs-lookup"><span data-stu-id="3636f-185">The example then calls the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/ctor1.vb#1)]  
  
 <span data-ttu-id="3636f-186">Poniższy przykład jest taki sam, z wyjątkiem tego, aby używać <xref:System.Threading.Tasks.Task.Run%28System.Action%29> metody w celu utworzenia wystąpienia i uruchom zadanie w ramach jednej operacji.</span><span class="sxs-lookup"><span data-stu-id="3636f-186">The following example is identical, except that it used the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to instantiate and run the task in a single operation.</span></span> <span data-ttu-id="3636f-187">Metoda zwraca <xref:System.Threading.Tasks.Task> obiekt, który reprezentuje zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-187">The method returns the <xref:System.Threading.Tasks.Task> object that represents the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run2.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-188">
            <paramref name="action" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-188">The <paramref name="action" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Threading.Tasks.Task.Run(System.Action)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="3636f-189">Delegat, który reprezentuje kod do wykonania w zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-189">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-190">
            <see cref="T:System.Threading.CancellationToken" /> Który odbywa się nowe zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-190">The <see cref="T:System.Threading.CancellationToken" /> that the new  task will observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-191">Inicjuje nowy <see cref="T:System.Threading.Tasks.Task" /> z określoną akcję i <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-191">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-192">Zamiast wywoływania najczęściej ten konstruktor do tworzenia wystąpienia <xref:System.Threading.Tasks.Task> obiektu, a następnie uruchom zadanie jest wywołując statycznych <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> i <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-192">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> and <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="3636f-193">Zaletą tylko oferowane przez ten konstruktor jest możliwość tworzenia wystąpienia obiektu od wywołanie zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-193">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 <span data-ttu-id="3636f-194">Aby uzyskać więcej informacji, zobacz [równoległość zadań (Biblioteka zadań równoległych)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) i [anulowanie w zarządzanych wątkach](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-194">For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-195">Następujące przykładowe wywołania <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29> konstruktora, aby utworzyć zadanie, który iteruje po plików w katalogu C:\Windows\System32.</span><span class="sxs-lookup"><span data-stu-id="3636f-195">The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29> constructor to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="3636f-196">Wywołania wyrażenia lambda <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> metody w celu dodania informacji o poszczególnych plików do <xref:System.Collections.Generic.List%601> obiektu.</span><span class="sxs-lookup"><span data-stu-id="3636f-196">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="3636f-197">Odłączyć każdego zadania zagnieżdżonego wywoływane przez <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> pętli sprawdza stan token anulowania i, jeśli żądanie anulowania wywołuje <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-197">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3636f-198"><xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> Metoda zgłasza <xref:System.OperationCanceledException> wyjątek, który jest obsługiwany w `catch` zablokować, jeśli wątek wywołujący wywołuje <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-198">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="3636f-199"><xref:System.Threading.Tasks.Task.Start%2A> Wywoływana jest metoda następnie uruchomić zadanie.</span><span class="sxs-lookup"><span data-stu-id="3636f-199">The <xref:System.Threading.Tasks.Task.Start%2A> method is then called to start the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/run4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/run4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-200">Podana <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-200">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-201">
            <paramref name="action" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-201">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="3636f-202">Delegat, który reprezentuje kod do wykonania w zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-202">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="3636f-203">
            <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> Pozwala dostosować zachowanie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-203">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-204">Inicjuje nowy <see cref="T:System.Threading.Tasks.Task" /> z podanych opcji działania i tworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-204">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-205">Zamiast wywoływania najczęściej ten konstruktor do tworzenia wystąpienia <xref:System.Threading.Tasks.Task> obiektu, a następnie uruchom zadanie jest wywołując statycznych <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-205">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3636f-206">Zaletą tylko oferowane przez ten konstruktor jest możliwość tworzenia wystąpienia obiektu od wywołanie zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-206">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-207">
            <paramref name="action" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-207">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-208">
            <paramref name="creationOptions" /> Argument określa nieprawidłową wartość <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-208">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Action(Of Object), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="3636f-209">Delegat, który reprezentuje kod do wykonania w zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-209">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3636f-210">Obiekt reprezentujący dane mają być używane przez akcję.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-210">An object representing data to be used by the action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-211">Inicjuje nowy <see cref="T:System.Threading.Tasks.Task" /> z określonej wartości atrybutu akcji i stanu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-211">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-212">Zamiast wywoływania najczęściej ten konstruktor do tworzenia wystąpienia <xref:System.Threading.Tasks.Task> obiektu, a następnie uruchom zadanie jest wywołując statycznych <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-212">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3636f-213">Zaletą tylko oferowane przez ten konstruktor jest możliwość tworzenia wystąpienia obiektu od wywołanie zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-213">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-214">W poniższym przykładzie zdefiniowano tablicę wyrazów 6.</span><span class="sxs-lookup"><span data-stu-id="3636f-214">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="3636f-215">Każdego wyrazu są następnie przekazywane jako argument <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29> konstruktora, których <xref:System.Action%601> delegata zaszyfrowanie znaki w wyrazie, a następnie wyświetla oryginalnego programu word i jego wersja zaszyfrowany.</span><span class="sxs-lookup"><span data-stu-id="3636f-215">Each word is then passed as an argument to the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29> constructor, whose <xref:System.Action%601> delegate scrambles the characters in the word, then displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/startnew3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/startnew3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-216">
            <paramref name="action" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-216">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <altmember cref="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="3636f-217">Delegat, który reprezentuje kod do wykonania w zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-217">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-218">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> Który odbywa się nowe zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-218">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that the new task will observe.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="3636f-219">
            <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> Pozwala dostosować zachowanie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-219">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-220">Inicjuje nowy <see cref="T:System.Threading.Tasks.Task" /> z podanych opcji działania i tworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-220">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-221">Zamiast wywoływania najczęściej ten konstruktor do tworzenia wystąpienia <xref:System.Threading.Tasks.Task> obiektu, a następnie uruchom zadanie jest wywołując statycznych <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-221">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3636f-222">Zaletą tylko oferowane przez ten konstruktor jest możliwość tworzenia wystąpienia obiektu od wywołanie zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-222">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 <span data-ttu-id="3636f-223">Aby uzyskać więcej informacji, zobacz [równoległość zadań (Biblioteka zadań równoległych)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) i [anulowanie zadania](~/docs/standard/parallel-programming/task-cancellation.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-223">For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Task Cancellation](~/docs/standard/parallel-programming/task-cancellation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-224">
            <see cref="T:System.Threading.CancellationTokenSource" /> Utworzony <paramref name="cancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-224">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-225">
            <paramref name="action" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-225">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-226">
            <paramref name="creationOptions" /> Argument określa nieprawidłową wartość <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-226">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="3636f-227">Delegat, który reprezentuje kod do wykonania w zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-227">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3636f-228">Obiekt reprezentujący dane mają być używane przez akcję.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-228">An object representing data to be used by the action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-229">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> Czy odbywa się nowe zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-229">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that that the new task will observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-230">Inicjuje nowy <see cref="T:System.Threading.Tasks.Task" /> z określonej akcji, stanu i opcje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-230">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-231">Zamiast wywoływania najczęściej ten konstruktor do tworzenia wystąpienia <xref:System.Threading.Tasks.Task> obiektu, a następnie uruchom zadanie jest wywołując statycznych <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-231">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3636f-232">Zaletą tylko oferowane przez ten konstruktor jest możliwość tworzenia wystąpienia obiektu od wywołanie zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-232">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-233">
            <see cref="T:System.Threading.CancellationTokenSource" /> Utworzony <paramref name="cancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-233">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-234">
            <paramref name="action" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-234">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="3636f-235">Delegat, który reprezentuje kod do wykonania w zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-235">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3636f-236">Obiekt reprezentujący dane mają być używane przez akcję.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-236">An object representing data to be used by the action.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="3636f-237">
            <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> Pozwala dostosować zachowanie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-237">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-238">Inicjuje nowy <see cref="T:System.Threading.Tasks.Task" /> z określonej akcji, stanu i opcje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-238">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-239">Zamiast wywoływania najczęściej ten konstruktor do tworzenia wystąpienia <xref:System.Threading.Tasks.Task> obiektu, a następnie uruchom zadanie jest wywołując statycznych <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-239">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3636f-240">Zaletą tylko oferowane przez ten konstruktor jest możliwość tworzenia wystąpienia obiektu od wywołanie zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-240">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-241">
            <paramref name="action" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-241">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-242">
            <paramref name="creationOptions" /> Argument określa nieprawidłową wartość <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-242">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="3636f-243">Delegat, który reprezentuje kod do wykonania w zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-243">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3636f-244">Obiekt reprezentujący dane mają być używane przez akcję.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-244">An object representing data to be used by the action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-245">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> Czy odbywa się nowe zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-245">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that that the new task will observe..</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="3636f-246">
            <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> Pozwala dostosować zachowanie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-246">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-247">Inicjuje nowy <see cref="T:System.Threading.Tasks.Task" /> z określonej akcji, stanu i opcje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-247">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-248">Zamiast wywoływania najczęściej ten konstruktor do tworzenia wystąpienia <xref:System.Threading.Tasks.Task> obiektu, a następnie uruchom zadanie jest wywołując statycznych <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-248">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3636f-249">Zaletą tylko oferowane przez ten konstruktor jest możliwość tworzenia wystąpienia obiektu od wywołanie zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-249">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-250">
            <see cref="T:System.Threading.CancellationTokenSource" /> Utworzony <paramref name="cancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-250">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-251">
            <paramref name="action" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-251">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-252">
            <paramref name="creationOptions" /> Argument określa nieprawidłową wartość <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-252">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-253">Pobiera obiekt stanu podane podczas <see cref="T:System.Threading.Tasks.Task" /> został utworzony, lub wartość null, jeśli nie została podana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-253">Gets the state object supplied when the <see cref="T:System.Threading.Tasks.Task" /> was created, or null if none was supplied.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3636f-254">
            <see cref="T:System.Object" /> Reprezentujący dane o stanie został przekazany do zadania podczas jej tworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-254">An <see cref="T:System.Object" /> that represents the state data that was passed in to the task when it was created.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-255">Rzutowanie tego obiektu do oryginalnego typu można pobrać danych.</span><span class="sxs-lookup"><span data-stu-id="3636f-255">Cast the object back to the original type to retrieve its data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletedTask">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CompletedTask { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.Task CompletedTask" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CompletedTask" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CompletedTask As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::Task ^ CompletedTask { System::Threading::Tasks::Task ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-256">Pobiera zadanie, które zostało już zakończone pomyślnie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-256">Gets a task that has already completed successfully.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3636f-257">Pomyślnie zakończono zadanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-257">The successfully completed task.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-258">Ta właściwość zwraca klasę task, których <xref:System.Threading.Tasks.Task.Status%2A> właściwość jest ustawiona na <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span><span class="sxs-lookup"><span data-stu-id="3636f-258">This property returns a task whose <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span></span> <span data-ttu-id="3636f-259">Aby utworzyć zadanie, które zwraca wartość i jest uruchamiane w celu ukończenia, należy wywołać <xref:System.Threading.Tasks.Task.FromResult%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-259">To create task that returns a value and runs to completion, call the <xref:System.Threading.Tasks.Task.FromResult%2A> method.</span></span>  
  
 <span data-ttu-id="3636f-260">Zawsze powtarzane próbuje pobrać wartość tej właściwości nie może zwracać tego samego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="3636f-260">Repeated attempts to retrieve this property value may not always return the same instance.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
      </Docs>
    </Member>
    <Member MemberName="ConfigureAwait">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait (bool continueOnCapturedContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConfigureAwait (continueOnCapturedContext As Boolean) As ConfiguredTaskAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredTaskAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continueOnCapturedContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="continueOnCapturedContext">
          <span data-ttu-id="3636f-261">
            <see langword="true" /> próba zorganizowania kontynuacji z powrotem do oryginalnego kontekście przechwycone; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-261">
              <see langword="true" /> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-262">Konfiguruje awaiter umożliwia to await <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-262">Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-263">Obiekt używany do await to zadanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-263">An object used to await this task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWith">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-264">Tworzy kontynuacji, która wykonuje asynchronicznie podczas docelowy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-264">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="3636f-265">Akcje, kiedy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-265">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-266">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-266">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-267">Tworzy kontynuacji, która wykonuje asynchronicznie podczas docelowy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-267">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-268">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-268">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-269">Zwrócona <xref:System.Threading.Tasks.Task> nie są planowane do wykonania dopiero po ukończeniu bieżącego zadania, czy jego zakończenie z powodu pomyślnie wykonywane ukończenia, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykanie się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="3636f-269">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-270">W poniższym przykładzie zdefiniowano klasę task, która wypełnia tablicy o 100 losowych wartości daty i godziny.</span><span class="sxs-lookup"><span data-stu-id="3636f-270">The following example defines a task that populates an array with 100 random date and time values.</span></span> <span data-ttu-id="3636f-271">Używa <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29> metodę, aby wybrać wcześniej niż i najnowszej wartości daty, gdy tablica jest całkowicie wypełnione.</span><span class="sxs-lookup"><span data-stu-id="3636f-271">It uses the <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29> method to select the earliest and the latest date values once the array is fully populated.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewith/cs/continuewith1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewith/vb/continuewith1.vb#1)]  
  
 <span data-ttu-id="3636f-272">Ponieważ aplikacji konsoli może zakończyć się przed wykonaniem zadania kontynuacji, <xref:System.Threading.Tasks.Task.Wait> metoda jest wywoływana, aby upewnić się, że kontynuowanie kończy wykonywanie przed zakończeniem przykład.</span><span class="sxs-lookup"><span data-stu-id="3636f-272">Because a console application may terminate before the continuation task executes, the <xref:System.Threading.Tasks.Task.Wait> method is called to ensure that the continuation finishes executing before the example ends.</span></span>  
  
 <span data-ttu-id="3636f-273">Na przykład dodatkowe zobacz [tworzenie łańcuchów zadań przy użyciu zadań kontynuacji](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-273">For an additional example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-274">
            <paramref name="continuationAction" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-274">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="3636f-275">Akcja do uruchomienia po zakończeniu zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-275">An action to run when the task completes.</span>
          </span>
          <span data-ttu-id="3636f-276">Podczas uruchamiania, delegat jest przekazywany jako argumenty ukończonego zadania i obiektu stanu dostarczony przez obiekt wywołujący.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-276">When run, the delegate is passed the completed task and a caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3636f-277">Obiekt reprezentujący dane mają być używane przez akcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-277">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-278">Tworzy utrzymania otrzymuje informacje o stanie dostarczony przez obiekt wywołujący, który wykonuje, gdy element docelowy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-278">Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-279">Utworzenie nowego zadania kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-279">A new continuation task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-280">Zwrócona <xref:System.Threading.Tasks.Task> nie są planowane do wykonania dopiero po ukończeniu bieżącego zadania, czy jego zakończenie z powodu pomyślnie wykonywane ukończenia, powodujący błąd z powodu nieobsługiwanego wyjątku lub wcześniej został zakończony z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="3636f-280">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to cancellation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-281">
            <paramref name="continuationAction" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-281">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="3636f-282">Akcje, kiedy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-282">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-283">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-283">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-284">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> Który zostanie przypisany do nowego zadania kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-284">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-285">Tworzy kontynuacji, który odbiera token anulowania i wykonuje asynchronicznie podczas docelowy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-285">Creates a continuation that receives a cancellation token and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-286">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-286">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-287">Zwrócona <xref:System.Threading.Tasks.Task> nie są planowane do wykonania dopiero po ukończeniu bieżącego zadania, czy jego zakończenie z powodu pomyślnie wykonywane ukończenia, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykanie się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="3636f-287">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-288">
            <see cref="T:System.Threading.CancellationTokenSource" /> Utworzony token został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-288">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-289">
            <paramref name="continuationAction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-289">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="3636f-290">Akcję w celu uruchomienia zgodnie z określonym <c>continuationOptions</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-290">An action to run according to the specified <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="3636f-291">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-291">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="3636f-292">Opcje kiedy zaplanowano kontynuacji i jak działa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-292">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="3636f-293">Obejmuje to kryteria, takich jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, a także opcje wykonywania, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-293">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-294">Tworzy utrzymania wykonywany po zakończeniu zadania docelowej zgodnie z określonym <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-294">Creates a continuation that executes when the target task completes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-295">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-295">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-296">Zwrócona <xref:System.Threading.Tasks.Task> nie zostanie zaplanowane do uruchomienia, dopiero po ukończeniu bieżącego zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-296">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="3636f-297">Jeśli określone kryteria kontynuacji za pośrednictwem `continuationOptions` parametru nie są spełnione, zostanie anulowane zadania kontynuacji zamiast zaplanowane.</span><span class="sxs-lookup"><span data-stu-id="3636f-297">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-298">W poniższym przykładzie pokazano, za pomocą <xref:System.Threading.Tasks.TaskContinuationOptions> do określenia, czy zadania kontynuacji powinny być wykonywane synchronicznie po zakończeniu poprzedzających zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-298">The following example demonstrates using <xref:System.Threading.Tasks.TaskContinuationOptions> to specify that a continuation task should run synchronously when the antecedent task completes.</span></span> <span data-ttu-id="3636f-299">(Jeśli określonego zadania została już zakończona w czasie <xref:System.Threading.Tasks.Task.ContinueWith%2A> po wywołaniu synchroniczne kontynuacji będzie uruchamiany na wywołania wątku <xref:System.Threading.Tasks.Task.ContinueWith%2A>.)</span><span class="sxs-lookup"><span data-stu-id="3636f-299">(If the specified task has already completed by the time <xref:System.Threading.Tasks.Task.ContinueWith%2A> is called, the synchronous continuation will run on the thread calling <xref:System.Threading.Tasks.Task.ContinueWith%2A>.)</span></span>  
  
```csharp  
  
public class TaskCounter  
{  
   private volatile int _count;  
  
   public void Track(Task t)  
   {  
      if (t == null) throw new ArgumentNullException("t");  
      Interlocked.Increment(ref _count);  
      t.ContinueWith(ct => Interlocked.Decrement(ref _count), TaskContinuationOptions.ExecuteSynchronously);  
   }  
  
   public int NumberOfActiveTasks { get { return _count; } }  
}  
  
```  
  
```vb  
  
Public Class TaskCounter  
   Private _count as Integer  
  
   Public Sub Track(ByVal t as Task)  
      If t is Nothing Then Throw New ArgumentNullException("t")  
      Interlocked.Increment(_count)  
      t.ContinueWith(Sub(ct)  
                        Interlocked.Decrement(_count)  
                     End Sub,  
                     TaskContinuationOptions.ExecuteSynchronously)  
   End Sub  
  
   Public ReadOnly Property NumberOfActiveTasks As Integer  
      Get  
         Return _count  
      End Get  
   End Property  
End Class  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-300">
            <paramref name="continuationAction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-300">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-301">
            <paramref name="continuationOptions" /> Argument określa nieprawidłową wartość <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-301">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task), scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="3636f-302">Akcje, kiedy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-302">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-303">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-303">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="3636f-304">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Do skojarzenia z zadania kontynuacji i do użycia podczas jego wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-304">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-305">Tworzy kontynuacji, która wykonuje asynchronicznie podczas docelowy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-305">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-306">Kontynuacja używa określonego harmonogramu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-306">The continuation uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-307">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-307">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-308">Zwrócona <xref:System.Threading.Tasks.Task> nie są planowane do wykonania dopiero po ukończeniu bieżącego zadania, czy jego zakończenie z powodu pomyślnie wykonywane ukończenia, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykanie się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="3636f-308">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-309">
            <see cref="T:System.Threading.Tasks.Task" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-309">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-310">
            <paramref name="continuationAction" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-310">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="3636f-311">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-311">-or-</span>
          </span>
          <span data-ttu-id="3636f-312">
            <paramref name="scheduler" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-312">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="3636f-313">Akcje, kiedy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-313">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-314">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania i obiektu stanu dostarczony przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-314">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3636f-315">Obiekt reprezentujący dane mają być używane przez akcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-315">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-316">
            <see cref="T:System.Threading.CancellationToken" /> Który zostanie przypisany do nowego zadania kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-316">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-317">Tworzy kontynuacji, który odbiera informacje o stanie dostarczony przez obiekt wywołujący i token anulowania i który wykonuje asynchronicznie podczas docelowy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-317">Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-318">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-318">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-319">Zwrócona <xref:System.Threading.Tasks.Task> nie są planowane do wykonania dopiero po ukończeniu bieżącego zadania, czy jego zakończenie z powodu pomyślnie wykonywane ukończenia, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykanie się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="3636f-319">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-320">
            <paramref name="continuationAction" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-320">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-321">Podana <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-321">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object, continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="3636f-322">Akcje, kiedy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-322">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-323">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania i obiektu stanu dostarczony przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-323">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3636f-324">Obiekt reprezentujący dane mają być używane przez akcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-324">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="3636f-325">Opcje kiedy zaplanowano kontynuacji i jak działa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-325">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="3636f-326">Obejmuje to kryteria, takich jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, a także opcje wykonywania, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-326">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-327">Tworzy utrzymania otrzymuje informacje o stanie dostarczony przez obiekt wywołujący, który wykonuje, gdy element docelowy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-327">Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-328">Wykonuje kontynuacji na podstawie zestawu określonego warunku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-328">The continuation executes based on a set of specified conditions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-329">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-329">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-330">Zwrócona <xref:System.Threading.Tasks.Task> nie zostanie zaplanowane do uruchomienia, dopiero po ukończeniu bieżącego zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-330">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="3636f-331">Jeśli określone kryteria kontynuacji za pośrednictwem `continuationOptions` parametru nie są spełnione, zostanie anulowane zadania kontynuacji zamiast zaplanowane.</span><span class="sxs-lookup"><span data-stu-id="3636f-331">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-332">
            <paramref name="continuationAction" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-332">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-333">
            <paramref name="continuationOptions" /> Argument określa nieprawidłową wartość <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-333">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object, scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="3636f-334">Akcje, kiedy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-334">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-335">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania i obiektu stanu dostarczony przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-335">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3636f-336">Obiekt reprezentujący dane mają być używane przez akcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-336">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="3636f-337">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Do skojarzenia z zadania kontynuacji i do użycia podczas jego wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-337">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-338">Tworzy utrzymania otrzymuje informacje o stanie dostarczony przez obiekt wywołujący, który wykonuje asynchronicznie podczas docelowy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-338">Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-339">Kontynuacja używa określonego harmonogramu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-339">The continuation uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-340">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-340">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-341">Zwrócona <xref:System.Threading.Tasks.Task> nie są planowane do wykonania dopiero po ukończeniu bieżącego zadania, czy jego zakończenie z powodu pomyślnie wykonywane ukończenia, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykanie się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="3636f-341">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-342">
            <paramref name="scheduler" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-342">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="3636f-343">Akcję w celu uruchomienia zgodnie z określonym <c>continuationOptions</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-343">An action to run according to the specified <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="3636f-344">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-344">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-345">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> Który zostanie przypisany do nowego zadania kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-345">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="3636f-346">Opcje kiedy zaplanowano kontynuacji i jak działa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-346">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="3636f-347">Obejmuje to kryteria, takich jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, a także opcje wykonywania, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-347">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="3636f-348">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Do skojarzenia z zadania kontynuacji i do użycia podczas jego wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-348">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-349">Tworzy kontynuacji, który wykonuje się, gdy zadanie docelowe konkuruje zgodnie z określonym <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-349">Creates a continuation that executes when the target task competes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
          <span data-ttu-id="3636f-350">Utrzymanie odbiera token anulowania i używa określonego harmonogramu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-350">The continuation receives a cancellation token and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-351">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-351">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-352">Zwrócona <xref:System.Threading.Tasks.Task> nie zostanie zaplanowane do uruchomienia, dopiero po ukończeniu bieżącego zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-352">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="3636f-353">Jeśli kryteria określone przez `continuationOptions` parametru nie są spełnione, zostanie anulowane zadania kontynuacji zamiast zaplanowane.</span><span class="sxs-lookup"><span data-stu-id="3636f-353">If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-354">Oto przykład za pomocą polecenia ContinueWith uruchomienia pracy zarówno w tle, jak i użytkownik wątków interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3636f-354">The following is an example of using ContinueWith to run work both in the background and on the user interface threads.</span></span>  
  
```csharp  
  
private void Button1_Click(object sender, EventArgs e)  
{  
   var backgroundScheduler = TaskScheduler.Default;  
   var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();  
   Task.Factory.StartNew(delegate { DoBackgroundComputation(); },  
                         backgroundScheduler).  
   ContinueWith(delegate { UpdateUI(); }, uiScheduler).  
                ContinueWith(delegate { DoAnotherBackgroundComputation(); },  
                             backgroundScheduler).  
                ContinueWith(delegate { UpdateUIAgain(); }, uiScheduler);  
}  
  
```  
  
```vb  
  
Private Sub Button1_Click(ByVal sender As System.Object,   
                          ByVal e As System.EventArgs) Handles Button1.Click  
   Dim backgroundScheduler = TaskScheduler.Default  
   Dim uiScheduler = TaskScheduler.FromCurrentSynchronizationContext()  
  
   Task.Factory.StartNew(Sub()  
                           DoBackgroundComputation()  
                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  
                            UpdateUI()  
                         End Sub, uiScheduler).ContinueWith(Sub(t)  
                            DoAnotherBackgroundComputation()  
                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  
                            UpdateUIAgain()  
                         End Sub, uiScheduler)  
End Sub  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-355">
            <see cref="T:System.Threading.CancellationTokenSource" /> Utworzony token został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-355">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-356">
            <paramref name="continuationAction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-356">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
          <span data-ttu-id="3636f-357">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-357">-or-</span>
          </span>
          <span data-ttu-id="3636f-358">
            <paramref name="scheduler" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-358">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-359">
            <paramref name="continuationOptions" /> Argument określa nieprawidłową wartość <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-359">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="3636f-360">Akcje, kiedy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-360">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-361">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania i obiektu stanu dostarczony przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-361">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3636f-362">Obiekt reprezentujący dane mają być używane przez akcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-362">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-363">
            <see cref="T:System.Threading.CancellationToken" /> Który zostanie przypisany do nowego zadania kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-363">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="3636f-364">Opcje kiedy zaplanowano kontynuacji i jak działa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-364">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="3636f-365">Obejmuje to kryteria, takich jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, a także opcje wykonywania, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-365">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="3636f-366">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Do skojarzenia z zadania kontynuacji i do użycia podczas jego wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-366">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-367">Tworzy kontynuacji, który odbiera informacje o stanie dostarczony przez obiekt wywołujący i token anulowania i, który jest wykonywany kiedy element docelowy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-367">Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-368">Wykonuje kontynuacji na podstawie zestawu określone warunki i używa określonego harmonogramu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-368">The continuation executes based on a set of specified conditions and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-369">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-369">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-370">Zwrócona <xref:System.Threading.Tasks.Task> nie zostanie zaplanowane do uruchomienia, dopiero po ukończeniu bieżącego zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-370">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed.</span></span> <span data-ttu-id="3636f-371">Jeśli kryteria określone przez `continuationOptions` parametru nie są spełnione, zostanie anulowane zadania kontynuacji zamiast zaplanowane.</span><span class="sxs-lookup"><span data-stu-id="3636f-371">If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-372">
            <paramref name="scheduler" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-372">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-373">
            <paramref name="continuationOptions" /> Argument określa nieprawidłową wartość <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-373">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-374">Podana <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-374">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-375">Typ wyniku utworzonego przez kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-375">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="3636f-376">Funkcja uruchomiony, jeśli <see cref="T:System.Threading.Tasks.Task`1" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-376">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-377">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-377">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-378">Tworzy kontynuacji, która wykonuje asynchronicznie podczas docelowy <see cref="T:System.Threading.Tasks.Task`1" /> kończy i zwraca wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-378">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes and returns a value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-379">Utworzenie nowego zadania kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-379">A new continuation task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-380">Zwrócona <xref:System.Threading.Tasks.Task%601> nie są planowane do wykonania dopiero po ukończeniu bieżącego zadania, czy jego zakończenie z powodu pomyślnie wykonywane ukończenia, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykanie się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="3636f-380">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-381">Poniższy przykład przedstawia użycie metody ContinueWith:</span><span class="sxs-lookup"><span data-stu-id="3636f-381">The following example shows how to use the ContinueWith method:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuationsimple.cs#03)]
 [!code-vb[System.Threading.Tasks.Task#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuationsimple.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-382">
            <see cref="T:System.Threading.Tasks.Task" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-382">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-383">
            <paramref name="continuationFunction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-383">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-384">Typ wyniku utworzonego przez kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-384">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="3636f-385">Funkcja uruchomiony, jeśli <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-385">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-386">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania i obiektu stanu dostarczony przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-386">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3636f-387">Obiekt reprezentujący dane mają być używane przez funkcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-387">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-388">Kontynuacja otrzymuje informacje o stanie dostarczony przez obiekt wywołujący, który wykonuje asynchronicznie tworzy gdy element docelowy <see cref="T:System.Threading.Tasks.Task" /> kończy i zwraca wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-388">Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-389">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-389">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-390">Zwrócona <xref:System.Threading.Tasks.Task%601> nie są planowane do wykonania dopiero po ukończeniu bieżącego zadania, czy jego zakończenie z powodu pomyślnie wykonywane ukończenia, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykanie się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="3636f-390">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-391">
            <paramref name="continuationFunction" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-391">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-392">Typ wyniku utworzonego przez kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-392">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="3636f-393">Funkcja uruchomiony, jeśli <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-393">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-394">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-394">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-395">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> Który zostanie przypisany do nowego zadania kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-395">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-396">Tworzy kontynuacji, która wykonuje asynchronicznie podczas docelowy <see cref="T:System.Threading.Tasks.Task" /> kończy i zwraca wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-396">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="3636f-397">Kontynuacja odbiera token anulowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-397">The continuation receives a cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-398">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-398">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-399">Zwrócona <xref:System.Threading.Tasks.Task%601> nie są planowane do wykonania dopiero po ukończeniu bieżącego zadania, czy jego zakończenie z powodu pomyślnie wykonywane ukończenia, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykanie się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="3636f-399">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-400">
            <see cref="T:System.Threading.Tasks.Task" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-400">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
          <span data-ttu-id="3636f-401">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-401">-or-</span>
          </span>
          <span data-ttu-id="3636f-402">
            <see cref="T:System.Threading.CancellationTokenSource" /> Utworzony token został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-402">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-403">
            <paramref name="continuationFunction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-403">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-404">Typ wyniku utworzonego przez kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-404">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="3636f-405">Funkcja Uruchamianie zgodnie z warunek określony w <c>continuationOptions</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-405">A function to run according to the condition specified in <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="3636f-406">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-406">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="3636f-407">Opcje kiedy zaplanowano kontynuacji i jak działa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-407">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="3636f-408">Obejmuje to kryteria, takich jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, a także opcje wykonywania, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-408">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-409">Tworzy kontynuacji, który wykonuje zgodnie z opcjami określonego kontynuacji i zwraca wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-409">Creates a continuation that executes according to the specified continuation options and returns a value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-410">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-410">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-411">Zwrócona <xref:System.Threading.Tasks.Task%601> nie zostanie zaplanowane do uruchomienia, dopiero po ukończeniu bieżącego zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-411">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="3636f-412">Jeśli określone kryteria kontynuacji za pośrednictwem `continuationOptions` parametru nie są spełnione, zostanie anulowane zadania kontynuacji zamiast zaplanowane.</span><span class="sxs-lookup"><span data-stu-id="3636f-412">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-413">
            <see cref="T:System.Threading.Tasks.Task" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-413">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-414">
            <paramref name="continuationFunction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-414">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-415">
            <paramref name="continuationOptions" /> Argument określa nieprawidłową wartość <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-415">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult), scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-416">Typ wyniku utworzonego przez kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-416">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="3636f-417">Funkcja uruchomiony, jeśli <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-417">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-418">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-418">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="3636f-419">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Do skojarzenia z zadania kontynuacji i do użycia podczas jego wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-419">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-420">Tworzy kontynuacji, która wykonuje asynchronicznie podczas docelowy <see cref="T:System.Threading.Tasks.Task" /> kończy i zwraca wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-420">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="3636f-421">Kontynuacja używa określonego harmonogramu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-421">The continuation uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-422">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-422">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-423">Zwrócona <xref:System.Threading.Tasks.Task%601> nie są planowane do wykonania dopiero po ukończeniu bieżącego zadania, czy jego zakończenie z powodu pomyślnie wykonywane ukończenia, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykanie się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="3636f-423">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-424">
            <see cref="T:System.Threading.Tasks.Task" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-424">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-425">
            <paramref name="continuationFunction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-425">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
          <span data-ttu-id="3636f-426">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-426">-or-</span>
          </span>
          <span data-ttu-id="3636f-427">
            <paramref name="scheduler" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-427">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-428">Typ wyniku utworzonego przez kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-428">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="3636f-429">Funkcja uruchomiony, jeśli <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-429">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-430">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania i obiektu stanu dostarczony przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-430">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3636f-431">Obiekt reprezentujący dane mają być używane przez funkcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-431">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-432">
            <see cref="T:System.Threading.CancellationToken" /> Który zostanie przypisany do nowego zadania kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-432">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-433">Tworzy kontynuacji, która wykonuje asynchronicznie podczas docelowy <see cref="T:System.Threading.Tasks.Task" /> kończy i zwraca wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-433">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="3636f-434">Kontynuacja otrzymuje informacje o stanie dostarczony przez obiekt wywołujący i token anulowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-434">The continuation receives caller-supplied state information and a cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-435">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-435">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-436">Zwrócona <xref:System.Threading.Tasks.Task%601> nie są planowane do wykonania dopiero po ukończeniu bieżącego zadania, czy jego zakończenie z powodu pomyślnie wykonywane ukończenia, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykanie się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="3636f-436">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-437">
            <paramref name="continuationFunction" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-437">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-438">Podana <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-438">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object, continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-439">Typ wyniku utworzonego przez kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-439">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="3636f-440">Funkcja uruchomiony, jeśli <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-440">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-441">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania i obiektu stanu dostarczony przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-441">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3636f-442">Obiekt reprezentujący dane mają być używane przez funkcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-442">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="3636f-443">Opcje kiedy zaplanowano kontynuacji i jak działa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-443">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="3636f-444">Obejmuje to kryteria, takich jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, a także opcje wykonywania, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-444">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-445">Tworzy kontynuacji wykonuje w oparciu o określonym zadań kontynuacji opcji, gdy element docelowy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-445">Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-446">Kontynuacja otrzymuje informacje o stanie dostarczony przez obiekt wywołujący.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-446">The continuation receives caller-supplied state information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-447">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-447">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-448">Zwrócona <xref:System.Threading.Tasks.Task%601> nie zostanie zaplanowane do uruchomienia, dopiero po ukończeniu bieżącego zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-448">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="3636f-449">Jeśli określone kryteria kontynuacji za pośrednictwem `continuationOptions` parametru nie są spełnione, zostanie anulowane zadania kontynuacji zamiast zaplanowane.</span><span class="sxs-lookup"><span data-stu-id="3636f-449">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-450">
            <paramref name="continuationFunction" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-450">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-451">
            <paramref name="continuationOptions" /> Argument określa nieprawidłową wartość <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-451">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object, scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-452">Typ wyniku utworzonego przez kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-452">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="3636f-453">Funkcja uruchomiony, jeśli <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-453">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-454">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania i obiektu stanu dostarczony przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-454">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3636f-455">Obiekt reprezentujący dane mają być używane przez funkcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-455">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="3636f-456">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Do skojarzenia z zadania kontynuacji i do użycia podczas jego wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-456">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-457">Tworzy kontynuacji, która wykonuje asynchronicznie podczas docelowy <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-457">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-458">Kontynuacja odbiera informacje o stanie dostarczony przez obiekt wywołujący i używa określonego harmonogramu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-458">The continuation receives caller-supplied state information and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-459">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-459">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-460">Zwrócona <xref:System.Threading.Tasks.Task%601> nie są planowane do wykonania dopiero po ukończeniu bieżącego zadania, czy jego zakończenie z powodu pomyślnie wykonywane ukończenia, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykanie się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="3636f-460">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-461">
            <paramref name="scheduler" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-461">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-462">Typ wyniku utworzonego przez kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-462">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="3636f-463">Funkcja Uruchamianie zgodnie z określonym <c>continuationOptions.</c></span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-463">A function to run according to the specified <c>continuationOptions.</c></span>
          </span>
          <span data-ttu-id="3636f-464">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-464">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-465">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> Który zostanie przypisany do nowego zadania kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-465">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="3636f-466">Opcje kiedy zaplanowano kontynuacji i jak działa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-466">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="3636f-467">Obejmuje to kryteria, takich jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, a także opcje wykonywania, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-467">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="3636f-468">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Do skojarzenia z zadania kontynuacji i do użycia podczas jego wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-468">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-469">Tworzy kontynuacji, który wykonuje zgodnie z opcjami określonego kontynuacji i zwraca wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-469">Creates a continuation that executes according to the specified continuation options and returns a value.</span>
          </span>
          <span data-ttu-id="3636f-470">Kontynuacja jest przekazany token anulowania i używa określonego harmonogramu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-470">The continuation is passed a cancellation token and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-471">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-471">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-472">Zwrócona <xref:System.Threading.Tasks.Task%601> nie zostanie zaplanowane do uruchomienia, dopiero po ukończeniu bieżącego zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-472">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="3636f-473">Jeśli kryteria określone przez `continuationOptions` parametru nie są spełnione, zostanie anulowane zadania kontynuacji zamiast zaplanowane.</span><span class="sxs-lookup"><span data-stu-id="3636f-473">If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-474">Poniższy przykład przedstawia użycie metody ContinueWith z opcjami kontynuacji:</span><span class="sxs-lookup"><span data-stu-id="3636f-474">The following example shows how to use the ContinueWith method with continuation options:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuationoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Task#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuationoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-475">
            <see cref="T:System.Threading.Tasks.Task" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-475">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
          <span data-ttu-id="3636f-476">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-476">-or-</span>
          </span>
          <span data-ttu-id="3636f-477">
            <see cref="T:System.Threading.CancellationTokenSource" /> Utworzony token został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-477">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-478">
            <paramref name="continuationFunction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-478">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
          <span data-ttu-id="3636f-479">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-479">-or-</span>
          </span>
          <span data-ttu-id="3636f-480">
            <paramref name="scheduler" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-480">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-481">
            <paramref name="continuationOptions" /> Argument określa nieprawidłową wartość <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-481">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-482">Typ wyniku utworzonego przez kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-482">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="3636f-483">Funkcja uruchomiony, jeśli <see cref="T:System.Threading.Tasks.Task" /> zakończeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-483">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="3636f-484">Podczas uruchamiania, delegat zostaną przekazane ukończonego zadania i obiektu stanu dostarczony przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-484">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3636f-485">Obiekt reprezentujący dane mają być używane przez funkcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-485">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-486">
            <see cref="T:System.Threading.CancellationToken" /> Który zostanie przypisany do nowego zadania kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-486">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="3636f-487">Opcje kiedy zaplanowano kontynuacji i jak działa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-487">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="3636f-488">Obejmuje to kryteria, takich jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, a także opcje wykonywania, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-488">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="3636f-489">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Do skojarzenia z zadania kontynuacji i do użycia podczas jego wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-489">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-490">Tworzy kontynuacji wykonuje w oparciu o określonym zadań kontynuacji opcji, gdy element docelowy <see cref="T:System.Threading.Tasks.Task" /> kończy i zwraca wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-490">Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="3636f-491">Kontynuacja odbiera informacje o stanie dostarczony przez obiekt wywołujący i token anulowania i używa określonego harmonogramu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-491">The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-492">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-492">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-493">Zwrócona <xref:System.Threading.Tasks.Task%601> nie zostanie zaplanowane do uruchomienia, dopiero po ukończeniu bieżącego zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-493">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed.</span></span> <span data-ttu-id="3636f-494">Jeśli kryteria określone przez `continuationOptions` parametru nie są spełnione, zostanie anulowane zadania kontynuacji zamiast zaplanowane.</span><span class="sxs-lookup"><span data-stu-id="3636f-494">If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-495">
            <paramref name="scheduler" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-495">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-496">
            <paramref name="continuationOptions" /> Argument określa nieprawidłową wartość <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-496">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-497">Podana <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-497">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CreationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreationOptions As TaskCreationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskCreationOptions CreationOptions { System::Threading::Tasks::TaskCreationOptions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-498">Pobiera <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> umożliwia utworzenie tego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-498">Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3636f-499">
            <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> Umożliwia utworzenie tego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-499">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentId">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; CurrentId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Nullable`1&lt;int32&gt; CurrentId" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CurrentId" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentId As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Nullable&lt;int&gt; CurrentId { Nullable&lt;int&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-500">Zwraca identyfikator aktualnie wykonywanych <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-500">Returns the ID of the currently executing <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3636f-501">Liczba całkowita, która została przypisana przez system do aktualnie wykonywanych zadań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-501">An integer that was assigned by the system to the currently-executing task.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-502"><xref:System.Threading.Tasks.Task.CurrentId%2A> jest `static` (`Shared` w języku Visual Basic) właściwość, która jest używany do pobierania identyfikator aktualnie wykonywanego zadania z kodu, który wykonuje zadanie.</span><span class="sxs-lookup"><span data-stu-id="3636f-502"><xref:System.Threading.Tasks.Task.CurrentId%2A> is a `static` (`Shared` in Visual Basic) property that is used to get the identifier of the currently executing task from the code that the task is executing.</span></span> <span data-ttu-id="3636f-503">Różni się od <xref:System.Threading.Tasks.Task.Id%2A> właściwość, która zwraca identyfikator określonego <xref:System.Threading.Tasks.Task> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="3636f-503">It differs from the <xref:System.Threading.Tasks.Task.Id%2A> property, which returns the identifier of a particular <xref:System.Threading.Tasks.Task> instance.</span></span> <span data-ttu-id="3636f-504">Jeśli próba pobrania <xref:System.Threading.Tasks.Task.CurrentId%2A> wartości z poza kod, który wykonuje zadanie, właściwość ta zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="3636f-504">If you attempt to retrieve the <xref:System.Threading.Tasks.Task.CurrentId%2A> value from outside the code that a task is executing, the property returns `null`.</span></span>  
  
 <span data-ttu-id="3636f-505">Należy pamiętać, że chociaż kolizji są bardzo rzadko, identyfikatory zadań są nie musi być unikatowy.</span><span class="sxs-lookup"><span data-stu-id="3636f-505">Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.Id" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Delay">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-506">Tworzy zadanie, które zostanie zakończony z pewnym opóźnieniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-506">Creates a task that will complete after a time delay.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (int millisecondsDelay);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(int32 millisecondsDelay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Delay (millisecondsDelay As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(int millisecondsDelay);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay">
          <span data-ttu-id="3636f-507">Liczba milisekund oczekiwania przed wykonaniem zadań zwróconych, lub wartość -1 będzie czekać w nieskończoność.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-507">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-508">Tworzy zadanie kończące się pewnym opóźnieniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-508">Creates a task that completes after a time delay.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-509">Zadanie reprezentujące opóźnienie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-509">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-510"><xref:System.Threading.Tasks.Task.Delay%2A> Metoda jest zwykle używana opóźnienia operacji wszystkich lub części zadania dla określonych odstępach czasu.</span><span class="sxs-lookup"><span data-stu-id="3636f-510">The <xref:System.Threading.Tasks.Task.Delay%2A> method is typically used to delay the operation of all or part of a task for a specified time interval.</span></span> <span data-ttu-id="3636f-511">Najczęściej wprowadza się czas opóźnienia:</span><span class="sxs-lookup"><span data-stu-id="3636f-511">Most commonly, the time delay is introduced:</span></span>  
  
-   <span data-ttu-id="3636f-512">Na początku zadania, jak w poniższym przykładzie przedstawiono.</span><span class="sxs-lookup"><span data-stu-id="3636f-512">At the beginning of the task, as the following example shows.</span></span>  
  
     [!code-csharp[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#5)]
     [!code-vb[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#5)]  
  
-   <span data-ttu-id="3636f-513">Pewnym czasie, gdy zadanie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="3636f-513">Sometime while the task is executing.</span></span> <span data-ttu-id="3636f-514">W tym przypadku wywołanie <xref:System.Threading.Tasks.Task.Delay%2A> — metoda wykonuje jako zadania podrzędne zadania, jak przedstawiono na poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="3636f-514">In this case, the call to the <xref:System.Threading.Tasks.Task.Delay%2A> method executes as a child task within a task, as the following example shows.</span></span> <span data-ttu-id="3636f-515">Należy pamiętać, że od czasu zadania, który odwołuje się <xref:System.Threading.Tasks.Task.Delay%2A> metoda wykonuje asynchronicznie, zadaniem nadrzędnym należy poczekać na jego ukończenie przy użyciu `await` — słowo kluczowe.</span><span class="sxs-lookup"><span data-stu-id="3636f-515">Note that since the task that calls the <xref:System.Threading.Tasks.Task.Delay%2A> method executes asynchronously, the parent task must wait for it to complete by using the `await` keyword.</span></span>  
  
     [!code-csharp[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#7)]
     [!code-vb[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#7)]  
  
 <span data-ttu-id="3636f-516">Po upływie określonego czasu opóźnienia, zadanie zostanie ukończone w <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-516">After the specified time delay, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="3636f-517">Ta metoda jest zależna od zegara systemowego.</span><span class="sxs-lookup"><span data-stu-id="3636f-517">This method depends on the system clock.</span></span> <span data-ttu-id="3636f-518">Oznacza to, że czas opóźnienia około będzie równa rozpoznanie zegar systemowy, jeśli `millisecondsDelay` argument jest mniejsza niż rozdzielczość zegar systemowy, czyli około 15 milisekund w systemie Windows.</span><span class="sxs-lookup"><span data-stu-id="3636f-518">This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-519">W poniższym przykładzie przedstawiono użycie prostego <xref:System.Threading.Tasks.Task.Delay%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-519">The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Delay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-520">
            <paramref name="millisecondsDelay" /> Argument jest mniejsza niż -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-520">The <paramref name="millisecondsDelay" /> argument is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (TimeSpan delay);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(valuetype System.TimeSpan delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Delay (delay As TimeSpan) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(TimeSpan delay);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="delay">
          <span data-ttu-id="3636f-521">Przedział czasu oczekiwania przed ukończeniem zadania zwrócone, lub <see langword="TimeSpan.FromMilliseconds(-1)" /> będzie czekać w nieskończoność.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-521">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-522">Tworzy zadanie kończące się po upływie czasu określonego czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-522">Creates a task that completes after a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-523">Zadanie reprezentujące opóźnienie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-523">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-524">Po upływie określonego czasu opóźnienia, zadanie zostanie ukończone w <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-524">After the specified time delay, the task is completed in <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="3636f-525">Scenariusze użycia i dodatkowe przykłady, zobacz dokumentację <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="3636f-525">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="3636f-526">Ta metoda jest zależna od zegara systemowego.</span><span class="sxs-lookup"><span data-stu-id="3636f-526">This method depends on the system clock.</span></span> <span data-ttu-id="3636f-527">Oznacza to, że czas opóźnienia około będzie równa rozpoznanie zegar systemowy, jeśli `delay` argument jest mniejsza niż rozdzielczość zegar systemowy, czyli około 15 milisekund w systemie Windows.</span><span class="sxs-lookup"><span data-stu-id="3636f-527">This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-528">W poniższym przykładzie przedstawiono użycie prostego <xref:System.Threading.Tasks.Task.Delay%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-528">The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Delay#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-529">
            <paramref name="delay" /> reprezentuje innych niż przedział czasu ujemna <see langword="TimeSpan.FromMillseconds(-1)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-529">
              <paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMillseconds(-1)" />.</span>
          </span>
          <span data-ttu-id="3636f-530">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-530">-or-</span>
          </span>
          <span data-ttu-id="3636f-531">
            <paramref name="delay" /> Argumentu <see cref="P:System.TimeSpan.TotalMilliseconds" /> właściwości jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-531">The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (int millisecondsDelay, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(int32 millisecondsDelay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(int millisecondsDelay, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay">
          <span data-ttu-id="3636f-532">Liczba milisekund oczekiwania przed wykonaniem zadań zwróconych, lub wartość -1 będzie czekać w nieskończoność.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-532">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-533">Token anulowania, który będzie sprawdzany przed ukończeniem zwrócone zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-533">The cancellation token that will be checked prior to completing the returned task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-534">Tworzy anulowanie zadań, kończące się pewnym opóźnieniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-534">Creates a cancellable task that completes after a time delay.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-535">Zadanie reprezentujące opóźnienie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-535">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-536">Jeśli token anulowania jest sygnalizowane przed określony czas opóźnienia, <xref:System.Threading.Tasks.TaskCanceledException> wyjątek wyniki, a zadanie jest wykonywane za <xref:System.Threading.Tasks.TaskStatus.Canceled> stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-536">If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  <span data-ttu-id="3636f-537">W przeciwnym razie zadanie zostało ukończone w <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stanu po upływie określonego czasu opóźnienia.</span><span class="sxs-lookup"><span data-stu-id="3636f-537">Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state once the specified time delay has elapsed.</span></span>  
  
 <span data-ttu-id="3636f-538">Scenariusze użycia i dodatkowe przykłady, zobacz dokumentację <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="3636f-538">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="3636f-539">Ta metoda jest zależna od zegara systemowego.</span><span class="sxs-lookup"><span data-stu-id="3636f-539">This method depends on the system clock.</span></span> <span data-ttu-id="3636f-540">Oznacza to, że czas opóźnienia około będzie równa rozpoznanie zegar systemowy, jeśli `millisecondsDelay` argument jest mniejsza niż rozdzielczość zegar systemowy, czyli około 15 milisekund w systemie Windows.</span><span class="sxs-lookup"><span data-stu-id="3636f-540">This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-541">Poniższy przykład uruchamia zadanie, które zawiera wywołanie <xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29> metody z opóźnieniem jednej drugiego.</span><span class="sxs-lookup"><span data-stu-id="3636f-541">The following example launches a task that includes a call to the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29> method with a one second delay.</span></span> <span data-ttu-id="3636f-542">Token zostało anulowane, zanim czasu opóźnienia.</span><span class="sxs-lookup"><span data-stu-id="3636f-542">Before the delay interval elapses, the token is cancelled.</span></span> <span data-ttu-id="3636f-543">Dane wyjściowe w przykładzie pokazano, że, w związku z tym, <xref:System.Threading.Tasks.TaskCanceledException> jest zgłaszany i zadań <xref:System.Threading.Tasks.Task.Status%2A> właściwość jest ustawiona na <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span><span class="sxs-lookup"><span data-stu-id="3636f-543">The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Delay#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-544">
            <paramref name="millisecondsDelay" /> Argument jest mniejsza niż -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-544">The <paramref name="millisecondsDelay" /> argument is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="3636f-545">Zadanie zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-545">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-546">Podana <paramref name="cancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-546">The provided <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (TimeSpan delay, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(valuetype System.TimeSpan delay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(TimeSpan delay, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="delay">
          <span data-ttu-id="3636f-547">Przedział czasu oczekiwania przed ukończeniem zadania zwrócone, lub <see langword="TimeSpan.FromMilliseconds(-1)" /> będzie czekać w nieskończoność.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-547">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-548">Token anulowania, który będzie sprawdzany przed ukończeniem zwrócone zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-548">The cancellation token that will be checked prior to completing the returned task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-549">Tworzy anulowanie zadania kończonego po określonym przedziale czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-549">Creates a cancellable task that completes after a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-550">Zadanie reprezentujące opóźnienie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-550">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-551">Jeśli token anulowania jest sygnalizowane przed określony czas opóźnienia, <xref:System.Threading.Tasks.TaskCanceledException> wyjątek wyniki, a zadanie jest wykonywane za <xref:System.Threading.Tasks.TaskStatus.Canceled> stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-551">If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  <span data-ttu-id="3636f-552">W przeciwnym razie zadanie zostało ukończone w <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stanu po upływie określonego czasu opóźnienia.</span><span class="sxs-lookup"><span data-stu-id="3636f-552">Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state once the specified time delay has elapsed.</span></span>  
  
 <span data-ttu-id="3636f-553">Scenariusze użycia i dodatkowe przykłady, zobacz dokumentację <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="3636f-553">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="3636f-554">Ta metoda jest zależna od zegara systemowego.</span><span class="sxs-lookup"><span data-stu-id="3636f-554">This method depends on the system clock.</span></span> <span data-ttu-id="3636f-555">Oznacza to, że czas opóźnienia około będzie równa rozpoznanie zegar systemowy, jeśli `delay` argument jest mniejsza niż rozdzielczość zegar systemowy, czyli około 15 milisekund w systemie Windows.</span><span class="sxs-lookup"><span data-stu-id="3636f-555">This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-556">Poniższy przykład uruchamia zadanie, które zawiera wywołanie <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> metody z opóźnieniem jednej i pół drugiego.</span><span class="sxs-lookup"><span data-stu-id="3636f-556">The following example launches a task that includes a call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method with a one-and-a-half second delay.</span></span> <span data-ttu-id="3636f-557">Token zostało anulowane, zanim czasu opóźnienia.</span><span class="sxs-lookup"><span data-stu-id="3636f-557">Before the delay interval elapses, the token is cancelled.</span></span> <span data-ttu-id="3636f-558">Dane wyjściowe w przykładzie pokazano, że, w związku z tym, <xref:System.Threading.Tasks.TaskCanceledException> jest zgłaszany i zadań <xref:System.Threading.Tasks.Task.Status%2A> właściwość jest ustawiona na <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span><span class="sxs-lookup"><span data-stu-id="3636f-558">The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Delay#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay4.vb#4)]  
  
 <span data-ttu-id="3636f-559">Należy pamiętać, że w tym przykładzie zawiera potencjalnych sytuacji wyścigu: zależy od zadania wykonywania opóźnienie asynchronicznie, gdy token jest anulowane.</span><span class="sxs-lookup"><span data-stu-id="3636f-559">Note that this example includes a potential race condition: it depends on the task asynchronously executing the delay when the token is cancelled.</span></span> <span data-ttu-id="3636f-560">Mimo że 1,5 sekund opóźnienia z wywołania <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> metody założeń tego prawdopodobnie, niemniej jednak możliwe jest który wywołanie <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> metody może zwrócić przed token zostało anulowane.</span><span class="sxs-lookup"><span data-stu-id="3636f-560">Although the 1.5 second delay from the call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method makes that assumption likely, it is nevertheless possible that the call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method could return before the token is cancelled.</span></span> <span data-ttu-id="3636f-561">W takim przypadku przykładzie tworzy następujące dane wyjściowe:</span><span class="sxs-lookup"><span data-stu-id="3636f-561">In that case, the example produces the following output:</span></span>  
  
```  
Task t Status: RanToCompletion, Result: 42  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-562">
            <paramref name="delay" /> reprezentuje innych niż przedział czasu ujemna <see langword="TimeSpan.FromMillseconds(-1)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-562">
              <paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMillseconds(-1)" />.</span>
          </span>
          <span data-ttu-id="3636f-563">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-563">-or-</span>
          </span>
          <span data-ttu-id="3636f-564">
            <paramref name="delay" /> Argumentu <see cref="P:System.TimeSpan.TotalMilliseconds" /> właściwości jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-564">The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="3636f-565">Zadanie zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-565">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-566">Podana <paramref name="cancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-566">The provided <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-567">Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <see cref="T:System.Threading.Tasks.Task" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-567">Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3636f-568">Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <see cref="T:System.Threading.Tasks.Task" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-568">Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-569"><xref:System.Threading.Tasks.Task> Klasa implementuje <xref:System.IDisposable> interfejsu, ponieważ wewnętrznie używa zasobów, które również implementują <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="3636f-569">The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>.</span></span> <span data-ttu-id="3636f-570">Jednak zwłaszcza w wypadku celów aplikacji [!INCLUDE[net_v45](~/includes/net-v45-md.md)] lub później, nie jest konieczne do wywołania <xref:System.Threading.Tasks.Task.Dispose%2A> , chyba że wydajności i skalowalności testowania wskazuje, że, oparte na Twoich wzorców użycia, aplikacji może poprawić wydajność przez usuwanie zadań.</span><span class="sxs-lookup"><span data-stu-id="3636f-570">However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.</span></span> <span data-ttu-id="3636f-571">Aby uzyskać więcej informacji, zobacz [należy dysponować zadań?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) w programowania równoległego z blogu .NET.</span><span class="sxs-lookup"><span data-stu-id="3636f-571">For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3636f-572">Zadanie nie jest w jednym ze stanów końcowego: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, lub <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-572">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="3636f-573">Wartość logiczna, która wskazuje, czy ta metoda jest wywoływana z powodu wywołania <see cref="M:System.Threading.Tasks.Task.Dispose" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-573">A Boolean value that indicates whether this method is being called due to a call to <see cref="M:System.Threading.Tasks.Task.Dispose" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-574">Usuwa <see cref="T:System.Threading.Tasks.Task" />, zwolnienie wszystkich jej zasobów niezarządzanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-574">Disposes the <see cref="T:System.Threading.Tasks.Task" />, releasing all of its unmanaged resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-575"><xref:System.Threading.Tasks.Task> Klasa implementuje <xref:System.IDisposable> interfejsu, ponieważ wewnętrznie używa zasobów, które również implementują <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="3636f-575">The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>.</span></span> <span data-ttu-id="3636f-576">Jednak zwłaszcza w wypadku celów aplikacji [!INCLUDE[net_v45](~/includes/net-v45-md.md)] lub później, nie jest konieczne do wywołania <xref:System.Threading.Tasks.Task.Dispose%2A> , chyba że wydajności i skalowalności testowania wskazuje, że, oparte na Twoich wzorców użycia, aplikacji może poprawić wydajność przez usuwanie zadań.</span><span class="sxs-lookup"><span data-stu-id="3636f-576">However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.</span></span> <span data-ttu-id="3636f-577">Aby uzyskać więcej informacji, zobacz [należy dysponować zadań?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) w programowania równoległego z blogu .NET.</span><span class="sxs-lookup"><span data-stu-id="3636f-577">For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3636f-578">Zadanie nie jest w jednym ze stanów końcowego: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, lub <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-578">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span>
          </span>
        </exception>
        <threadsafe>
          <span data-ttu-id="3636f-579">W przeciwieństwie do większości członków <see cref="T:System.Threading.Tasks.Task" /> klasy, ta metoda nie jest bezpieczne wątkowo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-579">Unlike most of the members of the <see cref="T:System.Threading.Tasks.Task" /> class, this method is not thread-safe.</span>
          </span>
        </threadsafe>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public AggregateException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AggregateException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As AggregateException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AggregateException ^ Exception { AggregateException ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AggregateException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-580">Pobiera <see cref="T:System.AggregateException" /> powodujący <see cref="T:System.Threading.Tasks.Task" /> przedwczesne zakończenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-580">Gets the <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</span>
          </span>
          <span data-ttu-id="3636f-581">Jeśli <see cref="T:System.Threading.Tasks.Task" /> zakończyła się pomyślnie lub nie jeszcze zgłosił wyjątki, to zwróci <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-581">If the <see cref="T:System.Threading.Tasks.Task" /> completed successfully or has not yet thrown any exceptions, this will return <see langword="null" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3636f-582">
            <see cref="T:System.AggregateException" /> Powodujący <see cref="T:System.Threading.Tasks.Task" /> przedwczesne zakończenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-582">The <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-583">Zadania, które zgłasza nieobsługiwanych wyjątków przechowywania wynikowy wyjątku i Propaguj go w <xref:System.AggregateException> w wywołaniach <xref:System.Threading.Tasks.Task.Wait%2A> lub w dostępie do <xref:System.Threading.Tasks.Task.Exception%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="3636f-583">Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a <xref:System.AggregateException> in calls to <xref:System.Threading.Tasks.Task.Wait%2A> or in accesses to the <xref:System.Threading.Tasks.Task.Exception%2A> property.</span></span> <span data-ttu-id="3636f-584">Wszelkie wyjątki nie przestrzega razem, gdy wystąpienie zadania jest bezużytecznych będzie propagowane na wątku finalizatora.</span><span class="sxs-lookup"><span data-stu-id="3636f-584">Any exceptions not observed by the time the task instance is garbage collected will be propagated on the finalizer thread.</span></span> <span data-ttu-id="3636f-585">Aby uzyskać więcej informacji i przykład zobacz [obsługi wyjątków (Biblioteka zadań równoległych)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-585">For more information and an example, see [Exception Handling (Task Parallel Library)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Factory">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.TaskFactory Factory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.TaskFactory Factory" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Factory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Factory As TaskFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::TaskFactory ^ Factory { System::Threading::Tasks::TaskFactory ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-586">Zapewnia dostęp do metody fabrykę do tworzenia i konfigurowania <see cref="T:System.Threading.Tasks.Task" /> i <see cref="T:System.Threading.Tasks.Task`1" /> wystąpień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-586">Provides access to factory methods for creating and configuring <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> instances.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3636f-587">Obiekt fabryki, który może tworzyć różnych <see cref="T:System.Threading.Tasks.Task" /> i <see cref="T:System.Threading.Tasks.Task`1" /> obiektów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-587">A factory object that can create a variety of <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> objects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-588">Ta właściwość zwraca domyślnego wystąpienia programu <xref:System.Threading.Tasks.TaskFactory> klasy, która jest taka sama jak utworzony przez wywołanie metody bez parametrów <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=nameWithType> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="3636f-588">This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="3636f-589">Ma ona wartości następujących właściwości:</span><span class="sxs-lookup"><span data-stu-id="3636f-589">It has the following property values:</span></span>  
  
|<span data-ttu-id="3636f-590">Właściwość</span><span class="sxs-lookup"><span data-stu-id="3636f-590">Property</span></span>|<span data-ttu-id="3636f-591">Wartość</span><span class="sxs-lookup"><span data-stu-id="3636f-591">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A?displayProperty=nameWithType>|<xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.ContinuationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskContinuationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.CreationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskCreationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.Scheduler%2A?displayProperty=nameWithType>|<span data-ttu-id="3636f-592">`null`, lub <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="3636f-592">`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span></span>|  
  
 <span data-ttu-id="3636f-593">Najbardziej typowe użycie tej właściwości jest utworzenie i uruchomić nowe zadanie w jednym wywołaniu <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-593">The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3636f-594">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> metoda zapewnia Najprostszym sposobem tworzenia <xref:System.Threading.Tasks.Task> obiekt o wartości konfiguracji domyślnej.</span><span class="sxs-lookup"><span data-stu-id="3636f-594">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a <xref:System.Threading.Tasks.Task> object with default configuration values.</span></span>  
  
 <span data-ttu-id="3636f-595">W poniższym przykładzie użyto statycznych <xref:System.Threading.Tasks.Task.Factory%2A> właściwości do łączenia dwóch się <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-595">The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3636f-596">Pierwszy wypełnia tablicy z nazwami plików w katalogu Moje dokumenty użytkownika, podczas gdy druga wypełnia tablicę nazw podkatalogi katalogu Moje dokumenty użytkownika.</span><span class="sxs-lookup"><span data-stu-id="3636f-596">The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory.</span></span> <span data-ttu-id="3636f-597">Następnie wywołuje <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> metodę, która wyświetla informacje o liczbę plików i katalogów w dwóch tablic, po wykonaniu pierwsze dwa zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-597">It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskFactory" />
      </Docs>
    </Member>
    <Member MemberName="FromCanceled">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task FromCanceled (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task FromCanceled(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ FromCanceled(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-598">Token anulowania, z którym do ukończenia tego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-598">The cancellation token with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-599">Tworzy <see cref="T:System.Threading.Tasks.Task" /> ten zostanie zakończony z powodu anulowania z tokenem anulowania określony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-599">Creates a <see cref="T:System.Threading.Tasks.Task" /> that's completed due to cancellation with a specified cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-600">Zadanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-600">The canceled task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-601">Nie zażądano anulowania dla <paramref name="cancellationToken" />; <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> jest właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-601">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FromCanceled&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromCanceled&lt;TResult&gt; (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromCanceled&lt;TResult&gt;(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromCanceled(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-602">Typ wyniku zwracanego przez zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-602">The type of the result returned by the task.</span>
          </span>
        </typeparam>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-603">Token anulowania, z którym do ukończenia tego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-603">The cancellation token with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-604">Tworzy <see cref="T:System.Threading.Tasks.Task`1" /> ten zostanie zakończony z powodu anulowania z tokenem anulowania określony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-604">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed due to cancellation with a specified cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-605">Zadanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-605">The canceled task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-606">Nie zażądano anulowania dla <paramref name="cancellationToken" />; <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> jest właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-606">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FromException">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task FromException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task FromException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ FromException(Exception ^ exception);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">
          <span data-ttu-id="3636f-607">Wyjątek, z którym do ukończenia tego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-607">The exception with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-608">Tworzy <see cref="T:System.Threading.Tasks.Task" /> który zostało ukończone z określonym wyjątkiem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-608">Creates a <see cref="T:System.Threading.Tasks.Task" /> that has completed with a specified exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-609">Błędnej zadanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-609">The faulted task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-610">Ta metoda tworzy <xref:System.Threading.Tasks.Task> którego <xref:System.Threading.Tasks.Task.Status%2A> właściwość jest <xref:System.Threading.Tasks.TaskStatus.Faulted> i których <xref:System.Threading.Tasks.Task.Exception%2A> zawiera właściwość `exception`.</span><span class="sxs-lookup"><span data-stu-id="3636f-610">This method creates a <xref:System.Threading.Tasks.Task> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.Faulted> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`.</span></span> <span data-ttu-id="3636f-611">Metoda to powszechnie używane, gdy natychmiast wiesz, że pracy, który wykonuje zadania spowoduje zgłoszenie wyjątku przed wykonaniem dłuższe ścieżki kodu.</span><span class="sxs-lookup"><span data-stu-id="3636f-611">The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.</span></span> <span data-ttu-id="3636f-612">Na przykład zobacz <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="3636f-612">For an example, see the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromException&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromException&lt;TResult&gt; (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromException&lt;TResult&gt;(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromException``1(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromException(Exception ^ exception);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-613">Typ wyniku zwracanego przez zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-613">The type of the result returned by the task.</span>
          </span>
        </typeparam>
        <param name="exception">
          <span data-ttu-id="3636f-614">Wyjątek, z którym do ukończenia tego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-614">The exception with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-615">Tworzy <see cref="T:System.Threading.Tasks.Task`1" /> który zostało zakończone z określonym wyjątkiem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-615">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed with a specified exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-616">Błędnej zadanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-616">The faulted task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-617">Ta metoda tworzy <xref:System.Threading.Tasks.Task%601> którego <xref:System.Threading.Tasks.Task.Status%2A> właściwość jest <xref:System.Threading.Tasks.TaskStatus.Faulted> i których <xref:System.Threading.Tasks.Task.Exception%2A> zawiera właściwość `exception`.</span><span class="sxs-lookup"><span data-stu-id="3636f-617">This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.Faulted> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`.</span></span> <span data-ttu-id="3636f-618">Metoda to powszechnie używane, gdy natychmiast wiesz, że pracy, który wykonuje zadania spowoduje zgłoszenie wyjątku przed wykonaniem dłuższe ścieżki kodu.</span><span class="sxs-lookup"><span data-stu-id="3636f-618">The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.</span></span> <span data-ttu-id="3636f-619">Przykład stanowi ilustrację.</span><span class="sxs-lookup"><span data-stu-id="3636f-619">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-620">Poniższy przykład jest narzędziem wiersza polecenia, który oblicza liczbę bajtów w plikach w każdym katalogu, którego nazwa jest przekazywany jako argument wiersza polecenia.</span><span class="sxs-lookup"><span data-stu-id="3636f-620">The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</span></span> <span data-ttu-id="3636f-621">Zamiast wykonywania dłużej ścieżka kodu, który tworzy <xref:System.IO.FileInfo> obiektu i pobiera wartość jego <xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType> właściwości dla każdego pliku w katalogu, przykładzie po prostu wywołuje <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> metodę w celu utworzenia błędnej zadania, jeśli określonego podkatalog nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="3636f-621">Rather than executing a longer code path that instantiates a <xref:System.IO.FileInfo> object and retrieves the value of its <xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType> property for each file in the directory, the example simply calls the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> method to create a faulted task if a particular subdirectory does not exist.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromResult&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromResult&lt;TResult&gt; (TResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromResult&lt;TResult&gt;(!!TResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromResult(Of TResult) (result As TResult) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromResult(TResult result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="result" Type="TResult" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-622">Typ wyniku zwracanego przez zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-622">The type of the result returned by the task.</span>
          </span>
        </typeparam>
        <param name="result">
          <span data-ttu-id="3636f-623">Wynik do przechowywania do ukończonego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-623">The result to store into the completed task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-624">Tworzy <see cref="T:System.Threading.Tasks.Task`1" /> pomyślnie ukończono z wynikiem określonej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-624">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed successfully with the specified result.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-625">Pomyślnie zakończono zadanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-625">The successfully completed task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-626">Ta metoda tworzy <xref:System.Threading.Tasks.Task%601> którego <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> właściwość jest `result` i których <xref:System.Threading.Tasks.Task.Status%2A> jest właściwość <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span><span class="sxs-lookup"><span data-stu-id="3636f-626">This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property is `result` and whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span></span> <span data-ttu-id="3636f-627">Metoda to powszechnie używane, gdy natychmiast znany jest zwracana wartość zadania bez wykonywania dłuższe ścieżki kodu.</span><span class="sxs-lookup"><span data-stu-id="3636f-627">The method is commonly used when the return value of a task is immediately known without executing a longer code path.</span></span> <span data-ttu-id="3636f-628">Przykład stanowi ilustrację.</span><span class="sxs-lookup"><span data-stu-id="3636f-628">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="3636f-629">Aby utworzyć obiekt zadania, która nie zwraca wartości, Pobierz obiekt zadania z <xref:System.Threading.Tasks.Task.CompletedTask%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="3636f-629">To create a Task object that does not return a value, retrieve the Task object from the <xref:System.Threading.Tasks.Task.CompletedTask%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-630">Poniższy przykład jest narzędziem wiersza polecenia, który oblicza liczbę bajtów w plikach w każdym katalogu, którego nazwa jest przekazywany jako argument wiersza polecenia.</span><span class="sxs-lookup"><span data-stu-id="3636f-630">The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</span></span> <span data-ttu-id="3636f-631">Zamiast wykonywania dłużej ścieżka kodu, który tworzy <xref:System.IO.FileStream> obiektu i pobiera wartość jego <xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType> właściwości dla każdego pliku w katalogu, przykładzie po prostu wywołuje <xref:System.Threading.Tasks.Task.FromResult%2A> metody, aby utworzyć zadanie, którego <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> Właściwość jest zero (0), jeśli w katalogu nie ma plików.</span><span class="sxs-lookup"><span data-stu-id="3636f-631">Rather than executing a longer code path that instantiates a <xref:System.IO.FileStream> object and retrieves the value of its <xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType> property for each file in the directory, the example simply calls the <xref:System.Threading.Tasks.Task.FromResult%2A> method to create a task whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property is zero (0) if a directory has no files.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.CompletedTask" />
      </Docs>
    </Member>
    <Member MemberName="GetAwaiter">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.TaskAwaiter GetAwaiter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.GetAwaiter" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAwaiter () As TaskAwaiter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::TaskAwaiter GetAwaiter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.TaskAwaiter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3636f-632">Pobiera awaiter umożliwia to await <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-632">Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-633">Wystąpienie awaiter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-633">An awaiter instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-634">Ta metoda jest przeznaczona do użytku w kompilatorze, a nie do użytku w kodzie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="3636f-634">This method is intended for compiler use rather than for use in application code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-635">Pobiera identyfikator dla tego <see cref="T:System.Threading.Tasks.Task" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-635">Gets an ID for this <see cref="T:System.Threading.Tasks.Task" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3636f-636">Identyfikator, który jest przypisywany przez system do tego <see cref="T:System.Threading.Tasks.Task" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-636">The identifier that is assigned by the system to this <see cref="T:System.Threading.Tasks.Task" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-637">Identyfikatory zadań są przypisane na żądanie i niekoniecznie nie reprezentują kolejności zadań tworzenia wystąpień.</span><span class="sxs-lookup"><span data-stu-id="3636f-637">Task IDs are assigned on-demand and do not necessarily represent the order in which task instances are created.</span></span> <span data-ttu-id="3636f-638">Należy pamiętać, że chociaż kolizji są bardzo rzadko, identyfikatory zadań są nie musi być unikatowy.</span><span class="sxs-lookup"><span data-stu-id="3636f-638">Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</span></span>  
  
 <span data-ttu-id="3636f-639">Aby uzyskać identyfikator zadania aktualnie wykonywanego zadania z kodem, które wykonuje to zadanie, należy użyć <xref:System.Threading.Tasks.Task.CurrentId%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="3636f-639">To get the task ID of the currently executing task from within code that that task is executing, use the <xref:System.Threading.Tasks.Task.CurrentId%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.CurrentId" />
      </Docs>
    </Member>
    <Member MemberName="IsCanceled">
      <MemberSignature Language="C#" Value="public bool IsCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCanceled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-640">Pobiera czy to <see cref="T:System.Threading.Tasks.Task" /> wystąpienia zakończyła wykonywanie z powodu anulowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-640">Gets whether this <see cref="T:System.Threading.Tasks.Task" /> instance has completed execution due to being canceled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3636f-641">
            <see langword="true" /> Jeśli zadanie zostało ukończone z powodu anulowania; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-641">
              <see langword="true" /> if the task has completed due to being canceled; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-642">A <xref:System.Threading.Tasks.Task> potrwa <xref:System.Threading.Tasks.TaskStatus.Canceled> stanu we wszystkich następujących warunków:</span><span class="sxs-lookup"><span data-stu-id="3636f-642">A <xref:System.Threading.Tasks.Task> will complete in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="3636f-643">Jego <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> została oznaczona do anulowania, przed uruchomieniem zadania wykonywania</span><span class="sxs-lookup"><span data-stu-id="3636f-643">Its <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> was marked for cancellation before the task started executing,</span></span>  
  
-   <span data-ttu-id="3636f-644">Zadanie potwierdzone żądanie anulowania na jego już sygnałowego <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> przez zgłaszanie <xref:System.OperationCanceledException> który posiada taki sam <xref:System.Threading.CancellationToken>.</span><span class="sxs-lookup"><span data-stu-id="3636f-644">The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by throwing an <xref:System.OperationCanceledException> that bears the same <xref:System.Threading.CancellationToken>.</span></span>  
  
-   <span data-ttu-id="3636f-645">Zadanie potwierdzone żądanie anulowania na jego już sygnałowego <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> przez wywołanie metody <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> metoda <xref:System.Threading.CancellationToken>.</span><span class="sxs-lookup"><span data-stu-id="3636f-645">The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by calling the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> method on the <xref:System.Threading.CancellationToken>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3636f-646">Pobieranie wartości <xref:System.Threading.Tasks.Task.IsCanceled%2A> właściwości nie są blokowane w wątku wywołującym dopiero po ukończeniu zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-646">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCanceled%2A> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.IsCompleted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-647">Pobiera czy to <see cref="T:System.Threading.Tasks.Task" /> zostało ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-647">Gets whether this <see cref="T:System.Threading.Tasks.Task" /> has completed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3636f-648">
            <see langword="true" /> Jeśli zadanie zostało ukończone; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-648">
              <see langword="true" /> if the task has completed; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-649"><xref:System.Threading.Tasks.Task.IsCompleted%2A> Zwraca `true` gdy zadanie jest jeden z trzech stanów końcowe: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, lub <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span><span class="sxs-lookup"><span data-stu-id="3636f-649"><xref:System.Threading.Tasks.Task.IsCompleted%2A> will return `true` when the task is in one of the three final states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3636f-650">Pobieranie wartości <xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=nameWithType> właściwości nie są blokowane w wątku wywołującym dopiero po ukończeniu zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-650">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompletedSuccessfully">
      <MemberSignature Language="C#" Value="public bool IsCompletedSuccessfully { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompletedSuccessfully" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCompletedSuccessfully" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompletedSuccessfully As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompletedSuccessfully { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFaulted">
      <MemberSignature Language="C#" Value="public bool IsFaulted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFaulted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsFaulted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFaulted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFaulted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-651">Pobiera czy <see cref="T:System.Threading.Tasks.Task" /> zakończona z powodu nieobsługiwanego wyjątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-651">Gets whether the <see cref="T:System.Threading.Tasks.Task" /> completed due to an unhandled exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3636f-652">
            <see langword="true" /> Jeśli zadanie ma zgłoszono nieobsługiwany wyjątek; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-652">
              <see langword="true" /> if the task has thrown an unhandled exception; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-653">Jeśli <xref:System.Threading.Tasks.Task.IsFaulted%2A> jest `true`, zadania <xref:System.Threading.Tasks.Task.Status%2A> jest równa <xref:System.Threading.Tasks.TaskStatus.Faulted>, a jego <xref:System.Threading.Tasks.Task.Exception%2A> właściwość będzie mieć wartości null.</span><span class="sxs-lookup"><span data-stu-id="3636f-653">If <xref:System.Threading.Tasks.Task.IsFaulted%2A> is `true`, the task's <xref:System.Threading.Tasks.Task.Status%2A> is equal to <xref:System.Threading.Tasks.TaskStatus.Faulted>, and its <xref:System.Threading.Tasks.Task.Exception%2A> property will be non-null.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3636f-654">Pobieranie wartości <xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=nameWithType> właściwości nie są blokowane w wątku wywołującym dopiero po ukończeniu zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-654">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-655">Kolejkuje określona pracy do uruchomienia na obiekcie ThreadPool, a następnie zwraca klasę task, lub <see cref="T:System.Threading.Tasks.Task`1" /> dojścia do pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-655">Queues the specified work to run on the ThreadPool and returns a task or <see cref="T:System.Threading.Tasks.Task`1" /> handle for that work.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-656"><xref:System.Threading.Tasks.Task.Run%2A> Metoda zapewnia zbiór przeciążeń, które ułatwiają uruchamiania zadania przy użyciu wartości domyślnych.</span><span class="sxs-lookup"><span data-stu-id="3636f-656">The <xref:System.Threading.Tasks.Task.Run%2A> method provides a set of overloads that make it easy to start a task by using default values.</span></span> <span data-ttu-id="3636f-657">Jest lekki zamiast <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="3636f-657">It is a lightweight alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overloads.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Action ^ action);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="3636f-658">Pracy można wykonać w sposób asynchroniczny</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-658">The work to execute asynchronously</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-659">Kolejkuje określona pracy do uruchomienia w puli wątków i zwraca <see cref="T:System.Threading.Tasks.Task" /> obiekt, który reprezentuje tę pracę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-659">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-660">Zadanie reprezentujące pracy w kolejce do wykonania w puli wątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-660">A task that represents the work queued to execute in the ThreadPool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-661"><xref:System.Threading.Tasks.Task.Run%2A> Metoda pozwala na tworzenie i wykonywanie zadania w wywołaniu pojedynczej metody i jest prostsze alternatywą do <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-661">The <xref:System.Threading.Tasks.Task.Run%2A> method allows you to create and execute a task in a single method call and is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="3636f-662">Tworzy zadanie z następujących wartości domyślne:</span><span class="sxs-lookup"><span data-stu-id="3636f-662">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="3636f-663">Jest jego token anulowania <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="3636f-663">Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="3636f-664">Jego <xref:System.Threading.Tasks.Task.CreationOptions%2A> wartość właściwości jest <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="3636f-664">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="3636f-665">Użyto domyślnego harmonogramu zadań.</span><span class="sxs-lookup"><span data-stu-id="3636f-665">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="3636f-666">Informacje dotyczące obsługi wyjątków zgłaszanych przez operacje zadań znajdują się w temacie [obsługi wyjątków](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-666">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-667">W poniższym przykładzie zdefiniowano `ShowThreadInfo` metodę, która wyświetla <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> bieżącego wątku.</span><span class="sxs-lookup"><span data-stu-id="3636f-667">The following example defines a `ShowThreadInfo` method  that displays the <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> of the current thread.</span></span> <span data-ttu-id="3636f-668">Jest wywoływana bezpośrednio z wątku aplikacji i jest wywoływana z <xref:System.Action> delegata przekazany do <xref:System.Threading.Tasks.Task.Run%28System.Action%29> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-668">It is called directly from the application thread, and is called from the <xref:System.Action> delegate passed to the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run11.cs#11)]
 [!code-vb[System.Threading.Tasks.Task.Run#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run11.vb#11)]  
  
 <span data-ttu-id="3636f-669">Poniższy przykład jest podobny do poprzedniego, z wyjątkiem tego, że używa wyrażenia lambda w celu zdefiniowania kod do wykonania zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-669">The following example is similar to the previous one, except that it uses a lambda expression to define the code that the task is to execute.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run6.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Run#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run6.vb#3)]  
  
 <span data-ttu-id="3636f-670">W przykładach pokazano, że zadanie asynchroniczne wykonuje się w innym wątku niż wątku głównego aplikacji.</span><span class="sxs-lookup"><span data-stu-id="3636f-670">The examples show that the asynchronous task executes on a different thread than the main application thread.</span></span>  
  
 <span data-ttu-id="3636f-671">Wywołanie <xref:System.Threading.Tasks.Task.Wait%2A> metoda gwarantuje, że zadanie zakończeniu i wyświetla dane wyjściowe przed zakończeniem aplikacji.</span><span class="sxs-lookup"><span data-stu-id="3636f-671">The call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that the task completes and displays its output before the application ends.</span></span> <span data-ttu-id="3636f-672">W przeciwnym razie jest możliwe że `Main` metody zostanie zakończony przed zakończeniem zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-672">Otherwise, it is possible that the `Main` method will complete before the task finishes.</span></span>  
  
 <span data-ttu-id="3636f-673">Poniższy przykład przedstawia <xref:System.Threading.Tasks.Task.Run%28System.Action%29> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-673">The following example illustrates the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span> <span data-ttu-id="3636f-674">Określa tablicę nazw katalogów, a uruchamia osobne zadanie, można pobrać nazwy pliku w każdym katalogu.</span><span class="sxs-lookup"><span data-stu-id="3636f-674">It defines an array of directory names and starts a separate task to retrieve the file names in each directory.</span></span> <span data-ttu-id="3636f-675">Wszystkie zadania zapisu nazwy plików do pojedynczego <xref:System.Collections.Concurrent.ConcurrentBag%601> obiektu.</span><span class="sxs-lookup"><span data-stu-id="3636f-675">All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span> <span data-ttu-id="3636f-676">Przykład wywołuje <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> metody, aby upewnić się, że wszystkie zadania zostały wykonane, a następnie wyświetla liczba całkowita liczba zapisywane w nazwach plików <xref:System.Collections.Concurrent.ConcurrentBag%601> obiektu.</span><span class="sxs-lookup"><span data-stu-id="3636f-676">The example then calls the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run2.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-677">
            <paramref name="action" /> Parametru <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-677">The <paramref name="action" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Func&lt;System.Threading.Tasks.Task&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run (function As Func(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Func&lt;System::Threading::Tasks::Task ^&gt; ^ function);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="3636f-678">Pracy można wykonać w sposób asynchroniczny</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-678">The work to execute asynchronously</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-679">Kolejkuje określona pracy do uruchomienia w puli wątków i zwraca serwera proxy dla zadanie zwrócone przez <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-679">Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-680">Zadanie reprezentujące serwera proxy dla zadanie zwrócone przez <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-680">A task that represents a proxy for the task returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-681">Informacje dotyczące obsługi wyjątków zgłaszanych przez operacje zadań znajdują się w temacie [obsługi wyjątków](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-681">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-682">
            <paramref name="function" /> Parametru <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-682">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="3636f-683">Pracy można wykonać w sposób asynchroniczny</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-683">The work to execute asynchronously</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-684">Token anulowania, który może służyć do anulowania pracy</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-684">A cancellation token that can be used to cancel the work</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-685">Kolejkuje określona pracy do uruchomienia w puli wątków i zwraca <see cref="T:System.Threading.Tasks.Task" /> obiekt, który reprezentuje tę pracę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-685">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</span>
          </span>
          <span data-ttu-id="3636f-686">Token anulowania umożliwia pracy anulowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-686">A cancellation token allows the work to be cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-687">Zadanie reprezentujące pracy w kolejce do wykonania w puli wątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-687">A task that represents the work queued to execute in the thread pool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-688">Jeśli żądanie anulowania przed rozpoczęciem wykonywania zadania, nie wykonuje zadanie.</span><span class="sxs-lookup"><span data-stu-id="3636f-688">If cancellation is requested before the task begins execution, the task does not execute.</span></span> <span data-ttu-id="3636f-689">Zamiast tego jest równa <xref:System.Threading.Tasks.TaskStatus.Canceled> stanu i zgłasza <xref:System.Threading.Tasks.TaskCanceledException> wyjątku.</span><span class="sxs-lookup"><span data-stu-id="3636f-689">Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.</span></span>  
  
 <span data-ttu-id="3636f-690"><xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> Metoda jest prostsza zamiast <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-690">The <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3636f-691">Tworzy zadanie z następujących wartości domyślne:</span><span class="sxs-lookup"><span data-stu-id="3636f-691">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="3636f-692">Jego <xref:System.Threading.Tasks.Task.CreationOptions%2A> wartość właściwości jest <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="3636f-692">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="3636f-693">Użyto domyślnego harmonogramu zadań.</span><span class="sxs-lookup"><span data-stu-id="3636f-693">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="3636f-694">Informacje dotyczące obsługi wyjątków zgłaszanych przez operacje zadań znajdują się w temacie [obsługi wyjątków](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-694">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-695">Następujące przykładowe wywołania <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> metodę, aby utworzyć zadanie, który iteruje po plików w katalogu C:\Windows\System32.</span><span class="sxs-lookup"><span data-stu-id="3636f-695">The following example calls the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="3636f-696">Wywołania wyrażenia lambda <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> metody w celu dodania informacji o poszczególnych plików do <xref:System.Collections.Generic.List%601> obiektu.</span><span class="sxs-lookup"><span data-stu-id="3636f-696">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="3636f-697">Odłączyć każdego zadania zagnieżdżonego wywoływane przez <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> pętli sprawdza stan token anulowania i, jeśli żądanie anulowania wywołuje <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-697">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3636f-698"><xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> Metoda zgłasza <xref:System.OperationCanceledException> wyjątek, który jest obsługiwany w `catch` zablokować, jeśli wątek wywołujący wywołuje <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-698">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Run#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-699">
            <paramref name="action" /> Parametru <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-699">The <paramref name="action" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="3636f-700">Zadanie zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-700">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-701">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <paramref name="cancellationToken" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-701">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Func&lt;System.Threading.Tasks.Task&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Func&lt;System::Threading::Tasks::Task ^&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="3636f-702">Praca do wykonywania asynchronicznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-702">The work to execute asynchronously.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-703">Token anulowania, które mają być używane do anulowania pracy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-703">A cancellation token that should be used to cancel the work.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-704">Kolejkuje określona pracy do uruchomienia w puli wątków i zwraca serwera proxy dla zadanie zwrócone przez <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-704">Queues the specified work to run on the thread pool and returns a proxy for the task returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-705">Zadanie reprezentujące serwera proxy dla zadanie zwrócone przez <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-705">A task that represents a proxy for the task returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-706">Informacje dotyczące obsługi wyjątków zgłaszanych przez operacje zadań znajdują się w temacie [obsługi wyjątków](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-706">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-707">
            <paramref name="function" /> Parametru <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-707">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="3636f-708">Zadanie zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-708">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-709">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <paramref name="cancellationToken" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-709">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run(Of TResult) (function As Func(Of Task(Of TResult))) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ function);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-710">Typ wynik zwracany przez zadanie serwera proxy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-710">The type of the result returned by the proxy task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="3636f-711">Pracy można wykonać w sposób asynchroniczny</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-711">The work to execute asynchronously</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-712">Kolejkuje określona pracy do uruchomienia w puli wątków i zwraca serwera proxy dla <see langword="Task(TResult)" /> zwrócony przez <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-712">Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-713">A <see langword="Task(TResult)" /> reprezentujący serwera proxy dla <see langword="Task(TResult)" /> zwrócony przez <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-713">A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-714">Informacje dotyczące obsługi wyjątków zgłaszanych przez operacje zadań znajdują się w temacie [obsługi wyjątków](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-714">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-715">
            <paramref name="function" /> Parametru <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-715">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run(Of TResult) (function As Func(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;TResult&gt; ^ function);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-716">Typ zwracany tego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-716">The return type of the task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="3636f-717">Praca do wykonywania asynchronicznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-717">The work to execute asynchronously.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-718">Kolejkuje określona pracy do uruchomienia w puli wątków i zwraca <see cref="T:System.Threading.Tasks.Task`1" /> obiekt, który reprezentuje tę pracę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-718">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task`1" /> object that represents that work.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-719">Obiekt zadania reprezentujący pracy w kolejce do wykonania w puli wątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-719">A task object that represents the work queued to execute in the thread pool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-720"><xref:System.Threading.Tasks.Task.Run%2A> Metoda jest prostsza zamiast <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-720">The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3636f-721">Tworzy zadanie z następujących wartości domyślne:</span><span class="sxs-lookup"><span data-stu-id="3636f-721">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="3636f-722">Jest jego token anulowania <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="3636f-722">Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="3636f-723">Jego <xref:System.Threading.Tasks.Task.CreationOptions%2A> wartość właściwości jest <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="3636f-723">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="3636f-724">Użyto domyślnego harmonogramu zadań.</span><span class="sxs-lookup"><span data-stu-id="3636f-724">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="3636f-725">Informacje dotyczące obsługi wyjątków zgłaszanych przez operacje zadań znajdują się w temacie [obsługi wyjątków](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-725">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-726">Poniższy przykład oblicza przybliżoną liczbę słów w pliki tekstowe, które reprezentują książek opublikowanych.</span><span class="sxs-lookup"><span data-stu-id="3636f-726">The following example counts the approximate number of words in text files that represent published books.</span></span> <span data-ttu-id="3636f-727">Każde zadanie jest odpowiedzialny za otwarcie pliku asynchronicznego odczytywania jego całą zawartość i obliczanie słów przy użyciu wyrażenia regularnego.</span><span class="sxs-lookup"><span data-stu-id="3636f-727">Each task is responsible for opening a file, reading its entire contents asynchronously, and calculating the word count by using a regular expression.</span></span> <span data-ttu-id="3636f-728"><xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> Metoda jest wywoływana, aby upewnić się, że wszystkie zadania zostały ukończone przed wyświetleniem wyrazów każdego książki do konsoli.</span><span class="sxs-lookup"><span data-stu-id="3636f-728">The <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method is called to ensure that all tasks have completed before  displaying the word count of each book to the console.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run3.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Run#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run3.vb#2)]  
  
 <span data-ttu-id="3636f-729">Wyrażenie regularne `\p{P}*\s+` dopasowuje zero, jeden lub więcej znaków interpunkcyjnych następuje co najmniej jeden znak odstępu.</span><span class="sxs-lookup"><span data-stu-id="3636f-729">The regular expression `\p{P}*\s+` matches zero, one, or more punctuation characters followed by one or more whitespace characters.</span></span> <span data-ttu-id="3636f-730">Zakłada się, czy łączna liczba dopasowań jest równe przybliżonej słów.</span><span class="sxs-lookup"><span data-stu-id="3636f-730">It assumes that the total number of matches equals the approximate word count.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-731">
            <paramref name="function" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-731">The <paramref name="function" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-732">Typ wynik zwracany przez zadanie serwera proxy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-732">The type of the result returned by the proxy task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="3636f-733">Pracy można wykonać w sposób asynchroniczny</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-733">The work to execute asynchronously</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-734">Token anulowania, które mają być używane do anulowania pracy</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-734">A cancellation token that should be used to cancel the work</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-735">Kolejkuje określona pracy do uruchomienia w puli wątków i zwraca serwera proxy dla <see langword="Task(TResult)" /> zwrócony przez <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-735">Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-736">A <see langword="Task(TResult)" /> reprezentujący serwera proxy dla <see langword="Task(TResult)" /> zwrócony przez <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-736">A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-737">Informacje dotyczące obsługi wyjątków zgłaszanych przez operacje zadań znajdują się w temacie [obsługi wyjątków](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-737">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-738">
            <paramref name="function" /> Parametru <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-738">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="3636f-739">Zadanie zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-739">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-740">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <paramref name="cancellationToken" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-740">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-741">Typ wyniku zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-741">The result type of the task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="3636f-742">Pracy można wykonać w sposób asynchroniczny</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-742">The work to execute asynchronously</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-743">Token anulowania, które mają być używane do anulowania pracy</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-743">A cancellation token that should be used to cancel the work</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-744">Kolejkuje określona pracy do uruchomienia w puli wątków i zwraca <see langword="Task(TResult)" /> obiekt, który reprezentuje tę pracę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-744">Queues the specified work to run on the thread pool and returns a <see langword="Task(TResult)" /> object that represents that work.</span>
          </span>
          <span data-ttu-id="3636f-745">Token anulowania umożliwia pracy anulowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-745">A cancellation token allows the work to be cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-746">A <see langword="Task(TResult)" /> reprezentująca pracy w kolejce do wykonania w puli wątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-746">A <see langword="Task(TResult)" /> that represents the work queued to execute in the thread pool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-747">Jeśli żądanie anulowania przed rozpoczęciem wykonywania zadania, nie wykonuje zadanie.</span><span class="sxs-lookup"><span data-stu-id="3636f-747">If cancellation is requested before the task begins execution, the task does not execute.</span></span> <span data-ttu-id="3636f-748">Zamiast tego jest równa <xref:System.Threading.Tasks.TaskStatus.Canceled> stanu i zgłasza <xref:System.Threading.Tasks.TaskCanceledException> wyjątku.</span><span class="sxs-lookup"><span data-stu-id="3636f-748">Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.</span></span>  
  
 <span data-ttu-id="3636f-749"><xref:System.Threading.Tasks.Task.Run%2A> Metoda jest prostsza zamiast <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-749">The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="3636f-750">Tworzy zadanie z następujących wartości domyślne:</span><span class="sxs-lookup"><span data-stu-id="3636f-750">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="3636f-751">Jego <xref:System.Threading.Tasks.Task.CreationOptions%2A> wartość właściwości jest <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="3636f-751">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="3636f-752">Użyto domyślnego harmonogramu zadań.</span><span class="sxs-lookup"><span data-stu-id="3636f-752">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="3636f-753">Informacje dotyczące obsługi wyjątków zgłaszanych przez operacje zadań znajdują się w temacie [obsługi wyjątków](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-753">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-754">Poniższy przykład tworzy 20 zadań, które będą pętli do licznik jest zwiększany wartość 2 milionów.</span><span class="sxs-lookup"><span data-stu-id="3636f-754">The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</span></span> <span data-ttu-id="3636f-755">Gdy zadania pierwszych 10 milionów 2, zostało anulowane, token anulowania, a są anulowane wszystkie zadania, których liczników nie osiągnęły milionów 2.</span><span class="sxs-lookup"><span data-stu-id="3636f-755">When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</span></span> <span data-ttu-id="3636f-756">W przykładzie danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="3636f-756">The example shows possible output.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run7.cs#7)]
 [!code-vb[System.Threading.Tasks.Task.Run#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run7.vb#7)]  
  
 <span data-ttu-id="3636f-757">Zamiast <xref:System.AggregateException.InnerExceptions%2A> właściwość do sprawdzenia wyjątki, przykładzie iteruje po wszystkich zadań w celu określenia, które zostały ukończone pomyślnie i zostały anulowane.</span><span class="sxs-lookup"><span data-stu-id="3636f-757">Instead of using the <xref:System.AggregateException.InnerExceptions%2A> property to   examine exceptions, the example iterates all tasks to determine which have completed successfully and which have been cancelled.</span></span> <span data-ttu-id="3636f-758">Dla tych, które zostały wykonane wyświetlana jest wartość zwrócona przez zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-758">For those that have completed, it displays the value returned by the task.</span></span>  
  
 <span data-ttu-id="3636f-759">Ponieważ anulowania współpracy, każde zadanie można zdecydować, jak reagować na anulowanie.</span><span class="sxs-lookup"><span data-stu-id="3636f-759">Because cancellation is cooperative, each task can decide how to respond to cancellation.</span></span> <span data-ttu-id="3636f-760">Poniższy przykład przypomina pierwsza strona, z wyjątkiem tego, po token zostało anulowane, zadania powrócić liczby iteracji one Zakończono zamiast zgłoszenie wyjątku przez.</span><span class="sxs-lookup"><span data-stu-id="3636f-760">The following example is like the first, except that, once the token is cancelled, tasks return the number of iterations they've completed rather than throw an exception.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run28.cs#28)]
 [!code-vb[System.Threading.Tasks.Task.Run#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run28.vb#28)]  
  
 <span data-ttu-id="3636f-761">Przykład musi obsługiwać <xref:System.AggregateException> wyjątku, ponieważ wszystkie zadania, które nie rozpoczęły zleconą anulowania nadal zgłosić wyjątek.</span><span class="sxs-lookup"><span data-stu-id="3636f-761">The example still must handle the <xref:System.AggregateException> exception,   since any tasks that have not started when cancellation is requested still throw an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-762">
            <paramref name="function" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-762">The <paramref name="function" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="3636f-763">Zadanie zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-763">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-764">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <paramref name="cancellationToken" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-764">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RunSynchronously">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-765">Uruchamia <see cref="T:System.Threading.Tasks.Task" /> synchronicznie na bieżącej <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-765">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RunSynchronously">
      <MemberSignature Language="C#" Value="public void RunSynchronously ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunSynchronously() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.RunSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunSynchronously ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunSynchronously();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3636f-766">Uruchamia <see cref="T:System.Threading.Tasks.Task" /> synchronicznie na bieżącej <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-766">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-767">Zwykle zadania są wykonywane asynchronicznie w wątku puli wątków i nie blokują wątek wywołujący.</span><span class="sxs-lookup"><span data-stu-id="3636f-767">Ordinarily, tasks are executed asynchronously on a thread pool thread and do not block the calling thread.</span></span> <span data-ttu-id="3636f-768">Zadania wykonywane przez wywołanie metody <xref:System.Threading.Tasks.Task.RunSynchronously> metody są skojarzone z bieżącym <xref:System.Threading.Tasks.TaskScheduler> i są uruchamiane w wątku wywołującym.</span><span class="sxs-lookup"><span data-stu-id="3636f-768">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method are associated with the current <xref:System.Threading.Tasks.TaskScheduler> and are run on the calling thread.</span></span> <span data-ttu-id="3636f-769">Jeśli harmonogram docelowy nie obsługuje wykonywania tego zadania w wątku wywołującym, zadanie zostanie zaplanowane do wykonania w ramach harmonogramu zadań i Wątek wywołujący zablokuje aż do zakończenia wykonywania zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-769">If the target scheduler does not support running this task on the calling thread, the task will be scheduled for execution on the scheduler, and the calling thread will block until the task has completed execution.</span></span> <span data-ttu-id="3636f-770">Mimo że to zadanie jest uruchamiane synchronicznie, nadal powinny wywoływać wątek wywołujący <xref:System.Threading.Tasks.Task.Wait%2A> do obsługi wszelkie wyjątki, które może zgłosić zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-770">Even though the task runs synchronously, the calling thread should still call <xref:System.Threading.Tasks.Task.Wait%2A> to handle any exceptions that the task might throw.</span></span>  <span data-ttu-id="3636f-771">Aby uzyskać więcej informacji dotyczących obsługi wyjątków, zobacz [obsługi wyjątków](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-771">For more information on exception handling, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 <span data-ttu-id="3636f-772">Zadania wykonywane przez wywołanie metody <xref:System.Threading.Tasks.Task.RunSynchronously%2A> wystąpienia są tworzone przez wywołanie metody <xref:System.Threading.Tasks.Task> lub <xref:System.Threading.Tasks.Task%601> konstruktora klasy.</span><span class="sxs-lookup"><span data-stu-id="3636f-772">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor.</span></span> <span data-ttu-id="3636f-773">Zadania są uruchamiane synchronicznie musi być w <xref:System.Threading.Tasks.TaskStatus.Created> stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-773">The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus.Created> state.</span></span> <span data-ttu-id="3636f-774">Zadania mogą być uruchomione i uruchomić tylko raz.</span><span class="sxs-lookup"><span data-stu-id="3636f-774">A task may be started and run only once.</span></span> <span data-ttu-id="3636f-775">Próbuje zaplanować zadanie drugi wyniki czasu wyjątku.</span><span class="sxs-lookup"><span data-stu-id="3636f-775">Any attempts to schedule a task a second time results in an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-776">Poniższy przykład porównuje zadania wykonywane przez wywołanie metody <xref:System.Threading.Tasks.Task.RunSynchronously%2A> metody z jednym wykonywane asynchronicznie.</span><span class="sxs-lookup"><span data-stu-id="3636f-776">The following example compares a task executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method with one executed asynchronously.</span></span> <span data-ttu-id="3636f-777">W obu przypadkach zadania wykonywania wyrażenia lambda identyczne, zawierające identyfikator zadania i identyfikator wątku, w którym zadanie jest uruchomione.</span><span class="sxs-lookup"><span data-stu-id="3636f-777">In both cases, the tasks execute identical lambda expressions that display the task ID and the ID of the thread on which the task is running.</span></span> <span data-ttu-id="3636f-778">Zadanie oblicza sumę liczb całkowitych od 1 do 1 000 000.</span><span class="sxs-lookup"><span data-stu-id="3636f-778">The task calculates the sum of the integers between 1 and 1,000,000.</span></span> <span data-ttu-id="3636f-779">Jak pokazano na dane wyjściowe z przykładu, wywołując wykonać zadania <xref:System.Threading.Tasks.Task.RunSynchronously%2A> — metoda będzie działać w wątku aplikacji nie obsługuje zadanie asynchroniczne.</span><span class="sxs-lookup"><span data-stu-id="3636f-779">As the output from the example shows, the task executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method runs on the application thread, while the asynchronous task does not.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.RunSynchronously#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.runsynchronously/cs/runsynchronously1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.RunSynchronously#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.runsynchronously/vb/runsynchronously1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-780">
            <see cref="T:System.Threading.Tasks.Task" /> Wystąpienia został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-780">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3636f-781">
            <see cref="T:System.Threading.Tasks.Task" /> Nie jest w prawidłowym stanie do uruchomienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-781">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="3636f-782">Mógł już została uruchomiona, wykonywane lub anulowane lub został utworzony w taki sposób, który nie obsługuje bezpośredniego planowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-782">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RunSynchronously">
      <MemberSignature Language="C#" Value="public void RunSynchronously (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunSynchronously(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunSynchronously (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunSynchronously(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler">
          <span data-ttu-id="3636f-783">Harmonogram, na którym ma być próba uruchomienia tego zadania wbudowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-783">The scheduler on which to attempt to run this task inline.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-784">Uruchamia <see cref="T:System.Threading.Tasks.Task" /> synchronicznie na <see cref="T:System.Threading.Tasks.TaskScheduler" /> podane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-784">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the <see cref="T:System.Threading.Tasks.TaskScheduler" /> provided.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-785">Zadania wykonywane przez wywołanie metody <xref:System.Threading.Tasks.Task.RunSynchronously%2A> wystąpienia są tworzone przez wywołanie metody <xref:System.Threading.Tasks.Task> lub <xref:System.Threading.Tasks.Task%601> konstruktora klasy.</span><span class="sxs-lookup"><span data-stu-id="3636f-785">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor.</span></span> <span data-ttu-id="3636f-786">Zadania są uruchamiane synchronicznie musi być w <xref:System.Threading.Tasks.TaskStatus.Created> stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-786">The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus.Created> state.</span></span> <span data-ttu-id="3636f-787">Zadania mogą być uruchomione i uruchomić tylko raz.</span><span class="sxs-lookup"><span data-stu-id="3636f-787">A task may be started and run only once.</span></span> <span data-ttu-id="3636f-788">Próbuje zaplanować zadanie drugi wyniki czasu wyjątku.</span><span class="sxs-lookup"><span data-stu-id="3636f-788">Any attempts to schedule a task a second time results in an exception.</span></span>  
  
 <span data-ttu-id="3636f-789">Jeśli harmonogram docelowy nie obsługuje wykonywania tego zadania w bieżącym wątku, zadanie zostanie zaplanowane do wykonania w ramach harmonogramu zadań i blokuje bieżącego wątku, dopóki nie zakończy się zadanie wykonania.</span><span class="sxs-lookup"><span data-stu-id="3636f-789">If the target scheduler does not support running this task on the current thread, the task will be scheduled for execution on the scheduler, and the current thread will block until the task has completed execution.</span></span> <span data-ttu-id="3636f-790">W związku z tym wątek wywołujący nie jest konieczne wywołania metody, takie jak <xref:System.Threading.Tasks.Task.Wait%2A> aby upewnić się, że zadanie zostało ukończone wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3636f-790">Because of this, the calling thread does not need to call a method such as <xref:System.Threading.Tasks.Task.Wait%2A> to ensure that the task has completed execution.</span></span> <span data-ttu-id="3636f-791">Aby uzyskać więcej informacji dotyczących obsługi wyjątków dla operacji zadań, zobacz [obsługi wyjątków](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-791">For more information on exception handling for task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-792">
            <see cref="T:System.Threading.Tasks.Task" /> Wystąpienia został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-792">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-793">
            <paramref name="scheduler" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-793">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3636f-794">
            <see cref="T:System.Threading.Tasks.Task" /> Nie jest w prawidłowym stanie do uruchomienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-794">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="3636f-795">Mógł już została uruchomiona, wykonywane lub anulowane lub został utworzony w taki sposób, który nie obsługuje bezpośredniego planowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-795">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-796">Uruchamia <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-796">Starts the <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3636f-797">Uruchamia <see cref="T:System.Threading.Tasks.Task" />, planowanie go na bieżącą wykonywania <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-797">Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-798">Zadania mogą być uruchomione i uruchomić tylko raz.</span><span class="sxs-lookup"><span data-stu-id="3636f-798">A task may be started and run only once.</span></span> <span data-ttu-id="3636f-799">Wystąpił wyjątek spowoduje próbuje zaplanować zadanie po raz drugi.</span><span class="sxs-lookup"><span data-stu-id="3636f-799">Any attempts to schedule a task a second time will result in an exception.</span></span>  
  
 <span data-ttu-id="3636f-800"><xref:System.Threading.Tasks.Task.Start%2A> Służy do wykonywania zadań, który został utworzony przez wywoływanie jednej z <xref:System.Threading.Tasks.Task> konstruktorów.</span><span class="sxs-lookup"><span data-stu-id="3636f-800">The <xref:System.Threading.Tasks.Task.Start%2A> is used to execute a task that has been created by calling one of the <xref:System.Threading.Tasks.Task> constructors.</span></span> <span data-ttu-id="3636f-801">Zwykle w tym przypadku trzeba rozdzielić Tworzenie zadania z działania, takie jak podczas warunkowo wykonywania zadań, które zostały utworzone.</span><span class="sxs-lookup"><span data-stu-id="3636f-801">Typically, you do this when you need to separate the task's creation from its execution, such as when you conditionally execute tasks that you've created.</span></span> <span data-ttu-id="3636f-802">W przypadku częściej, w którym nie trzeba rozdzielić wystąpienia zadania pochodzący z wykonania, firma Microsoft zaleca, aby wywoływać przeciążenia <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> lub <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-802">For the more common case in which you don't need to separate  task instantiation from execution, we recommend that you call an overload of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="3636f-803">Informacje dotyczące obsługi wyjątków zgłaszanych przez operacje zadań znajdują się w temacie [obsługi wyjątków](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-803">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-804">Następujące przykładowe wywołania <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> konstruktora, aby utworzyć obiekt klasy <xref:System.Threading.Tasks.Task> obiekt, który przedstawia zadania, jego identyfikator, identyfikator wątku zarządzanego, a następnie wykonuje pętlę.</span><span class="sxs-lookup"><span data-stu-id="3636f-804">The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to instantiate a new <xref:System.Threading.Tasks.Task> object that displays its task ID and managed thread ID and then executes a loop.</span></span> <span data-ttu-id="3636f-805">Następnie wywołuje <xref:System.Threading.Tasks.Task.Start%2A> metodę można wykonać zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-805">It then calls the <xref:System.Threading.Tasks.Task.Start%2A> method to execute the task.</span></span>  <span data-ttu-id="3636f-806">Ponieważ to jest aplikacja konsoli, wywołanie <xref:System.Threading.Tasks.Task.Wait%2A> — metoda jest konieczne zapobiec przerywanie przed zakończeniem zadania wykonywania aplikacji.</span><span class="sxs-lookup"><span data-stu-id="3636f-806">Since this is a console app, the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method is necessary to prevent the app from terminating before the task finishes execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Start#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.start/cs/Start1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Start#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.start/vb/Start1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-807">
            <see cref="T:System.Threading.Tasks.Task" /> Wystąpienia został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-807">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3636f-808">
            <see cref="T:System.Threading.Tasks.Task" /> Nie jest w prawidłowym stanie do uruchomienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-808">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="3636f-809">Mógł już została uruchomiona, wykonywane lub anulowane lub został utworzony w taki sposób, który nie obsługuje bezpośredniego planowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-809">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler">
          <span data-ttu-id="3636f-810">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Umożliwiające skojarzyć i wykonać to zadanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-810">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> with which to associate and execute this task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-811">Uruchamia <see cref="T:System.Threading.Tasks.Task" />, planowanie go na określony wykonywania <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-811">Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the specified <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-812">Zadania mogą być tylko uruchomione i uruchomić tylko raz.</span><span class="sxs-lookup"><span data-stu-id="3636f-812">A task may only be started and run only once.</span></span> <span data-ttu-id="3636f-813">Wystąpił wyjątek spowoduje próbuje zaplanować zadanie po raz drugi.</span><span class="sxs-lookup"><span data-stu-id="3636f-813">Any attempts to schedule a task a second time will result in an exception.</span></span>  
  
 <span data-ttu-id="3636f-814">Informacje dotyczące obsługi wyjątków zgłaszanych przez operacje zadań znajdują się w temacie [obsługi wyjątków](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-814">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-815">
            <paramref name="scheduler" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-815">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3636f-816">
            <see cref="T:System.Threading.Tasks.Task" /> Nie jest w prawidłowym stanie do uruchomienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-816">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="3636f-817">Mógł już została uruchomiona, wykonywane lub anulowane lub został utworzony w taki sposób, który nie obsługuje bezpośredniego planowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-817">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-818">
            <see cref="T:System.Threading.Tasks.Task" /> Wystąpienia został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-818">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskSchedulerException">
          <span data-ttu-id="3636f-819">Planista nie można umieścić w kolejce to zadanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-819">The scheduler was unable to queue this task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As TaskStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskStatus Status { System::Threading::Tasks::TaskStatus get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-820">Pobiera <see cref="T:System.Threading.Tasks.TaskStatus" /> tego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-820">Gets the <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3636f-821">Bieżący <see cref="T:System.Threading.Tasks.TaskStatus" /> tego wystąpienia zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-821">The current <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-822">Pobieranie wartości <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> właściwości nie są blokowane w wątku wywołującym dopiero po ukończeniu zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-822">Retrieving the value of the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 <span data-ttu-id="3636f-823">Na przykład i więcej informacji, zobacz [tworzenie łańcuchów zadań przy użyciu zadań kontynuacji](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md) i [porady: anulowanie zadania i jego elementy podrzędne](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-823">For more information and an example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md) and [How to: Cancel a Task and Its Children](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-824">Poniższy przykład tworzy 20 zadań, które będą pętli do licznik jest zwiększany wartość 2 milionów.</span><span class="sxs-lookup"><span data-stu-id="3636f-824">The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</span></span> <span data-ttu-id="3636f-825">Gdy zadania pierwszych 10 milionów 2, zostało anulowane, token anulowania, a są anulowane wszystkie zadania, których liczników nie osiągnęły milionów 2.</span><span class="sxs-lookup"><span data-stu-id="3636f-825">When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</span></span> <span data-ttu-id="3636f-826">Przykład następnie sprawdza <xref:System.Threading.Tasks.Task.Status%2A> właściwości każdego zadania, aby wskazać, czy zakończyła się pomyślnie, lub została anulowana.</span><span class="sxs-lookup"><span data-stu-id="3636f-826">The example then examines the <xref:System.Threading.Tasks.Task.Status%2A> property of each task to indicate whether it completed successfully or was cancelled.</span></span> <span data-ttu-id="3636f-827">Dla tych, które zakończone wyświetlana jest wartość zwrócona przez zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-827">For those that completed, it displays the value returned by the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run7.cs#7)]
 [!code-vb[System.Threading.Tasks.Task.Run#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run7.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.AsyncWaitHandle">
      <MemberSignature Language="C#" Value="System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property AsyncWaitHandle As WaitHandle Implements IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="property System::Threading::WaitHandle ^ System.IAsyncResult.AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncWaitHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-828">Pobiera <see cref="T:System.Threading.WaitHandle" /> można czekać na ukończenie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-828">Gets a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3636f-829">A <see cref="T:System.Threading.WaitHandle" /> można czekać na ukończenie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-829">A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-830">Przy użyciu funkcji oczekiwania udostępnianych przez usługę <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> zalecane jest stosowanie <xref:System.IAsyncResult.AsyncWaitHandle%2A> dla podobnych możliwościach.</span><span class="sxs-lookup"><span data-stu-id="3636f-830">Using the wait functionality provided by <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> is preferable to using <xref:System.IAsyncResult.AsyncWaitHandle%2A> for similar functionality.</span></span> <span data-ttu-id="3636f-831">Aby uzyskać więcej informacji, zobacz sekcję "Oczekiwanie na zadania" w [opartego na zadaniach asynchronicznej programowania](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) i [przy użyciu TPL z innych wzorami asynchronicznymi](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md).</span><span class="sxs-lookup"><span data-stu-id="3636f-831">For more information, see the "Waiting on Tasks" section in [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Using TPL with Other Asynchronous Patterns](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-832">
            <see cref="T:System.Threading.Tasks.Task" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-832">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.CompletedSynchronously">
      <MemberSignature Language="C#" Value="bool System.IAsyncResult.CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property CompletedSynchronously As Boolean Implements IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="C++ CLI" Value="property bool System.IAsyncResult.CompletedSynchronously { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.CompletedSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-833">Pobiera wskazanie czy zakończyć operacji synchronicznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-833">Gets an indication of whether the operation completed synchronously.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3636f-834">
            <see langword="true" /> Jeśli operacja wykonana synchronicznie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-834">
              <see langword="true" /> if the operation completed synchronously; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-835">Czeka na <see cref="T:System.Threading.Tasks.Task" /> do ukończenia wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-835">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3636f-836">Czeka na <see cref="T:System.Threading.Tasks.Task" /> do ukończenia wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-836">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-837"><xref:System.Threading.Tasks.Task.Wait%2A> to metoda synchronizacji, która powoduje, że wątek wywołujący oczekiwania dopiero po ukończeniu bieżącego zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-837"><xref:System.Threading.Tasks.Task.Wait%2A> is a synchronization method that causes the calling thread to wait until the current task has completed.</span></span> <span data-ttu-id="3636f-838">Jeśli bieżące zadanie nie zostało rozpoczęte wykonywania, metoda oczekiwania próbuje usunąć zadanie z harmonogramu i wykonaj go wbudowany w bieżącym wątku.</span><span class="sxs-lookup"><span data-stu-id="3636f-838">If the current task has not started execution, the Wait method attempts to remove the task from the scheduler and execute it inline on the current thread.</span></span> <span data-ttu-id="3636f-839">Jeśli nie jest w stanie, w tym, czy bieżące zadanie już się rozpoczął wykonywanie, blokuje wątek wywołujący do momentu ukończenia zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-839">If it is unable to do that, or if the current task has already started execution, it blocks the calling thread until the task completes.</span></span> <span data-ttu-id="3636f-840">Aby uzyskać więcej informacji, zobacz [Task.Wait i "Inlining"](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx) w programowania równoległego z blogu .NET.</span><span class="sxs-lookup"><span data-stu-id="3636f-840">For more information, see [Task.Wait and "Inlining"](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 <span data-ttu-id="3636f-841">Na przykład i więcej informacji, zobacz [porady: Oczekiwanie na jeden lub więcej zadań do wykonania](http://msdn.microsoft.com/library/79cb522b-9c93-46ed-b23a-c06908f3a374).</span><span class="sxs-lookup"><span data-stu-id="3636f-841">For more information and an example, see [How to: Wait on One or More Tasks to Complete](http://msdn.microsoft.com/library/79cb522b-9c93-46ed-b23a-c06908f3a374).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-842">Poniższy przykład uruchamia zadanie, które generuje milion losowych liczb całkowitych od 0 do 100 i oblicza średnią ich.</span><span class="sxs-lookup"><span data-stu-id="3636f-842">The following example starts a task that generates one million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="3636f-843">W przykładzie użyto <xref:System.Threading.Tasks.Task.Wait%2A> metody, aby upewnić się, że zadanie zostało ukończone przed kończy aplikacji.</span><span class="sxs-lookup"><span data-stu-id="3636f-843">The example uses the <xref:System.Threading.Tasks.Task.Wait%2A> method to ensure that the task completes before the application terminates.</span></span> <span data-ttu-id="3636f-844">W przeciwnym razie jest aplikacji konsoli, dlatego przykładzie spowoduje przerwanie przed zadania można obliczania i wyświetlania średniej.</span><span class="sxs-lookup"><span data-stu-id="3636f-844">Otherwise, because this is a console application, the example would terminate before the task can compute and display the mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Wait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-845">
            <see cref="T:System.Threading.Tasks.Task" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-845">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="3636f-846">Zadanie zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-846">The task was canceled.</span>
          </span>
          <span data-ttu-id="3636f-847">
            <see cref="P:System.AggregateException.InnerExceptions" /> Kolekcja zawiera <see cref="T:System.Threading.Tasks.TaskCanceledException" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-847">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="3636f-848">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-848">-or-</span>
          </span>
          <span data-ttu-id="3636f-849">Wystąpił wyjątek podczas wykonywania zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-849">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="3636f-850">
            <see cref="P:System.AggregateException.InnerExceptions" /> Kolekcja zawiera informacje o wyjątków i wyjątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-850">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="3636f-851">Wyrażony w milisekundach czas oczekiwania, lub <see cref="F:System.Threading.Timeout.Infinite" /> (-1) będzie czekać w nieskończoność.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-851">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-852">Czeka na <see cref="T:System.Threading.Tasks.Task" /> do ukończenia wykonywania w ciągu określonej liczby milisekund.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-852">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-853">
            <see langword="true" /> Jeśli <see cref="T:System.Threading.Tasks.Task" /> ukończył wykonywanie w wyznaczonym limicie czasu; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-853">
              <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-854"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> jest to metoda synchronizacji, która powoduje, że wątek wywołujący oczekiwania dla bieżącego wystąpienia zadania do wykonania, dopóki nie wystąpi jedno z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="3636f-854"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="3636f-855">Zadanie zostało ukończone pomyślnie.</span><span class="sxs-lookup"><span data-stu-id="3636f-855">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="3636f-856">Samo zadanie zostało anulowane lub zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="3636f-856">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="3636f-857">W takim przypadku obsługi <xref:System.AggregateException> wyjątku.</span><span class="sxs-lookup"><span data-stu-id="3636f-857">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="3636f-858"><xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> Właściwość zawiera szczegóły dotyczące wyjątków i wyjątków.</span><span class="sxs-lookup"><span data-stu-id="3636f-858">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="3636f-859">Odstępach czasu zdefiniowanych przez `millisecondsTimeout` upływa.</span><span class="sxs-lookup"><span data-stu-id="3636f-859">The interval defined by `millisecondsTimeout` elapses.</span></span> <span data-ttu-id="3636f-860">W takim przypadku bieżący wątek wznawia wykonywania i metoda zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="3636f-860">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-861">Poniższy przykład uruchamia zadanie, które generuje pięć milionów losowych liczb całkowitych od 0 do 100 i oblicza średnią ich.</span><span class="sxs-lookup"><span data-stu-id="3636f-861">The following example starts a task that generates five million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="3636f-862">W przykładzie użyto <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> metody oczekiwania aplikację, aby ukończyć w milisekundach 150.</span><span class="sxs-lookup"><span data-stu-id="3636f-862">The example uses the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> method to wait for the application to complete within 150 milliseconds.</span></span> <span data-ttu-id="3636f-863">Jeśli normalnie kończy działanie aplikacji, zadanie wyświetla sum i średniej liczby losowe, która go wygenerowała.</span><span class="sxs-lookup"><span data-stu-id="3636f-863">If the application completes normally, the task displays the sum and mean of the random numbers that it has generated.</span></span> <span data-ttu-id="3636f-864">Jeśli upłynie limit czasu, w przykładzie przedstawiono komunikat przed zostaje zakończone.</span><span class="sxs-lookup"><span data-stu-id="3636f-864">If the timeout interval has elapsed, the example displays a message before it terminates.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/Wait5.cs#5)]
 [!code-vb[System.Threading.Tasks.Task.Wait#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/Wait5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-865">
            <see cref="T:System.Threading.Tasks.Task" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-865">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-866">
            <paramref name="millisecondsTimeout" /> jest to liczba ujemna niż -1, która reprezentuje nieskończony limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-866">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="3636f-867">Zadanie zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-867">The task was canceled.</span>
          </span>
          <span data-ttu-id="3636f-868">
            <see cref="P:System.AggregateException.InnerExceptions" /> Kolekcja zawiera <see cref="T:System.Threading.Tasks.TaskCanceledException" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-868">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="3636f-869">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-869">-or-</span>
          </span>
          <span data-ttu-id="3636f-870">Wystąpił wyjątek podczas wykonywania zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-870">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="3636f-871">
            <see cref="P:System.AggregateException.InnerExceptions" /> Kolekcja zawiera informacje o wyjątków i wyjątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-871">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-872">Token anulowania, aby przyjrzeć się podczas oczekiwania na zakończenie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-872">A cancellation token to observe while waiting for the task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-873">Czeka na <see cref="T:System.Threading.Tasks.Task" /> do ukończenia wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-873">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
          <span data-ttu-id="3636f-874">Czas oczekiwania kończy się, jeśli token anulowania została anulowana przed ukończeniem zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-874">The wait terminates if a cancellation token is canceled before the task completes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-875"><xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> Metoda tworzy można anulować oczekiwania, oznacza to, powoduje bieżącego wątku oczekiwania, dopóki nie wystąpi jedno z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="3636f-875">The <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method creates a cancelable wait; that is, it causes the current thread to wait until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="3636f-876">Kończy zadanie.</span><span class="sxs-lookup"><span data-stu-id="3636f-876">The task completes.</span></span>  
  
-   <span data-ttu-id="3636f-877">Token anulowania zostało anulowane.</span><span class="sxs-lookup"><span data-stu-id="3636f-877">The cancellation token is canceled.</span></span> <span data-ttu-id="3636f-878">W tym przypadku wywołanie <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> metoda zgłasza <xref:System.OperationCanceledException>.</span><span class="sxs-lookup"><span data-stu-id="3636f-878">In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3636f-879">Anulowanie `cancellationToken` token anulowania nie ma wpływu na uruchomione zadanie chyba że również został przekazany token anulowania i jest gotowe do obsługi anulowania.</span><span class="sxs-lookup"><span data-stu-id="3636f-879">Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.</span></span> <span data-ttu-id="3636f-880">Przekazywanie `cancellationToken` obiekt do tej metody umożliwia po prostu czas oczekiwania do anulowania.</span><span class="sxs-lookup"><span data-stu-id="3636f-880">Passing the `cancellationToken` object to this method simply allows the wait to be canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-881">Poniższy przykład przedstawia użycie prostego token anulowania do anulowania oczekiwanie na ukończenie zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-881">The following example illustrates the simple use of a cancellation token to cancel waiting for a task's completion.</span></span> <span data-ttu-id="3636f-882">Zadanie jest uruchamiane, wywołuje <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> metodę, aby anulować żadnego tokenu źródłowego anulowanie tokenów, a następnie opóźnienia przez pięć sekund.</span><span class="sxs-lookup"><span data-stu-id="3636f-882">A task is launched, calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to cancel any of the token source's cancellation tokens, and then delays for five seconds.</span></span> <span data-ttu-id="3636f-883">Należy pamiętać, że samo zadanie nie został przekazany token anulowania, a nie można anulować.</span><span class="sxs-lookup"><span data-stu-id="3636f-883">Note that the task itself has not been passed the cancellation token and is not cancelable.</span></span> <span data-ttu-id="3636f-884">Wątek aplikacji wywołuje zadania <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> metody oczekiwania na zakończenie zadania, ale czas oczekiwania została anulowana po token anulowania zostało anulowane i <xref:System.OperationCanceledException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="3636f-884">The application thread calls the task's <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method to wait for the task to complete, but the wait is canceled once the cancellation token is cancelled and an <xref:System.OperationCanceledException> is thrown.</span></span> <span data-ttu-id="3636f-885">Obsługa wyjątków zgłasza wyjątek, a następnie zostanie uśpiony na sześć sekund.</span><span class="sxs-lookup"><span data-stu-id="3636f-885">The exception handler reports the exception and then sleeps for six seconds.</span></span> <span data-ttu-id="3636f-886">Jak dane wyjściowe w przykładzie pokazano, że opóźnienie pozwala zadań do wykonania w <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-886">As the output from the example shows, that delay allows the task to complete in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Wait#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="3636f-887">
            <paramref name="cancellationToken" /> Zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-887">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-888">Zadanie zostało usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-888">The task has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="3636f-889">Zadanie zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-889">The task was canceled.</span>
          </span>
          <span data-ttu-id="3636f-890">
            <see cref="P:System.AggregateException.InnerExceptions" /> Kolekcja zawiera <see cref="T:System.Threading.Tasks.TaskCanceledException" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-890">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="3636f-891">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-891">-or-</span>
          </span>
          <span data-ttu-id="3636f-892">Wystąpił wyjątek podczas wykonywania zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-892">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="3636f-893">
            <see cref="P:System.AggregateException.InnerExceptions" /> Kolekcja zawiera informacje o wyjątków i wyjątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-893">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="3636f-894">A <see cref="T:System.TimeSpan" /> reprezentujący wyrażony w milisekundach czas oczekiwania, lub <see cref="T:System.TimeSpan" /> reprezentujący wartość-1 milisekund oczekiwania przez czas nieokreślony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-894">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-895">Czeka na <see cref="T:System.Threading.Tasks.Task" /> aby zakończyć działanie w określonym przedziale czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-895">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-896">
            <see langword="true" /> Jeśli <see cref="T:System.Threading.Tasks.Task" /> ukończył wykonywanie w wyznaczonym limicie czasu; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-896">
              <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-897"><xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> jest to metoda synchronizacji, która powoduje, że wątek wywołujący oczekiwania dla bieżącego wystąpienia zadania do wykonania, dopóki nie wystąpi jedno z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="3636f-897"><xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="3636f-898">Zadanie zostało ukończone pomyślnie.</span><span class="sxs-lookup"><span data-stu-id="3636f-898">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="3636f-899">Samo zadanie zostało anulowane lub zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="3636f-899">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="3636f-900">W takim przypadku obsługi <xref:System.AggregateException> wyjątku.</span><span class="sxs-lookup"><span data-stu-id="3636f-900">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="3636f-901"><xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> Właściwość zawiera szczegóły dotyczące wyjątków i wyjątków.</span><span class="sxs-lookup"><span data-stu-id="3636f-901">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="3636f-902">Odstępach czasu zdefiniowanych przez `timeout` upływa.</span><span class="sxs-lookup"><span data-stu-id="3636f-902">The interval defined by `timeout` elapses.</span></span> <span data-ttu-id="3636f-903">W takim przypadku bieżący wątek wznawia wykonywania i metoda zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="3636f-903">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-904">Poniższy przykład uruchamia zadanie, które generuje pięć milionów losowych liczb całkowitych od 0 do 100 i oblicza średnią ich.</span><span class="sxs-lookup"><span data-stu-id="3636f-904">The following example starts a task that generates five million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="3636f-905">W przykładzie użyto <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> metody oczekiwania aplikację, aby ukończyć w milisekundach 150.</span><span class="sxs-lookup"><span data-stu-id="3636f-905">The example uses the <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> method to wait for the application to complete within 150 milliseconds.</span></span> <span data-ttu-id="3636f-906">Jeśli normalnie kończy działanie aplikacji, zadanie wyświetla sum i średniej liczby losowe, która go wygenerowała.</span><span class="sxs-lookup"><span data-stu-id="3636f-906">If the application completes normally, the task displays the sum and mean of the random numbers that it has generated.</span></span> <span data-ttu-id="3636f-907">Jeśli upłynie limit czasu, w przykładzie przedstawiono komunikat przed zostaje zakończone.</span><span class="sxs-lookup"><span data-stu-id="3636f-907">If the timeout interval has elapsed, the example displays a message before it terminates.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/Wait6.cs#6)]
 [!code-vb[System.Threading.Tasks.Task.Wait#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/Wait6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-908">
            <see cref="T:System.Threading.Tasks.Task" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-908">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-909">
            <paramref name="timeout" /> jest liczbą ujemną niż-1 milisekund, która reprezentuje nieskończony limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-909">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="3636f-910">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-910">-or-</span>
          </span>
          <span data-ttu-id="3636f-911">
            <paramref name="timeout" /> jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-911">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="3636f-912">Zadanie zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-912">The task was canceled.</span>
          </span>
          <span data-ttu-id="3636f-913">
            <see cref="P:System.AggregateException.InnerExceptions" /> Kolekcja zawiera <see cref="T:System.Threading.Tasks.TaskCanceledException" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-913">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="3636f-914">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-914">-or-</span>
          </span>
          <span data-ttu-id="3636f-915">Wystąpił wyjątek podczas wykonywania zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-915">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="3636f-916">
            <see cref="P:System.AggregateException.InnerExceptions" /> Kolekcja zawiera informacje o wyjątków i wyjątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-916">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="3636f-917">Wyrażony w milisekundach czas oczekiwania, lub <see cref="F:System.Threading.Timeout.Infinite" /> (-1) będzie czekać w nieskończoność.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-917">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-918">Token anulowania, aby przyjrzeć się podczas oczekiwania na zakończenie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-918">A cancellation token to observe while waiting for the task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-919">Czeka na <see cref="T:System.Threading.Tasks.Task" /> do ukończenia wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-919">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
          <span data-ttu-id="3636f-920">Czas oczekiwania kończy się, jeśli upłynie limit czasu lub token anulowania jest anulowany przed ukończeniem zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-920">The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-921">
            <see langword="true" /> Jeśli <see cref="T:System.Threading.Tasks.Task" /> ukończył wykonywanie w wyznaczonym limicie czasu; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-921">
              <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-922"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> jest to metoda synchronizacji, która powoduje, że wątek wywołujący oczekiwania dla bieżącego wystąpienia zadania do wykonania, dopóki nie wystąpi jedno z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="3636f-922"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="3636f-923">Zadanie zostało ukończone pomyślnie.</span><span class="sxs-lookup"><span data-stu-id="3636f-923">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="3636f-924">Samo zadanie zostało anulowane lub zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="3636f-924">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="3636f-925">W takim przypadku obsługi <xref:System.AggregateException> wyjątku.</span><span class="sxs-lookup"><span data-stu-id="3636f-925">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="3636f-926"><xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> Właściwość zawiera szczegóły dotyczące wyjątków i wyjątków.</span><span class="sxs-lookup"><span data-stu-id="3636f-926">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="3636f-927">`cancellationToken` Token anulowania zostało anulowane.</span><span class="sxs-lookup"><span data-stu-id="3636f-927">The `cancellationToken` cancellation token is canceled.</span></span> <span data-ttu-id="3636f-928">W tym przypadku wywołanie <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> metoda zgłasza <xref:System.OperationCanceledException>.</span><span class="sxs-lookup"><span data-stu-id="3636f-928">In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.</span></span>  
  
-   <span data-ttu-id="3636f-929">Odstępach czasu zdefiniowanych przez `millisecondsTimeout` upływa.</span><span class="sxs-lookup"><span data-stu-id="3636f-929">The interval defined by `millisecondsTimeout` elapses.</span></span> <span data-ttu-id="3636f-930">W takim przypadku bieżący wątek wznawia wykonywania i metoda zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="3636f-930">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3636f-931">Anulowanie `cancellationToken` token anulowania nie ma wpływu na uruchomione zadanie chyba że również został przekazany token anulowania i jest gotowe do obsługi anulowania.</span><span class="sxs-lookup"><span data-stu-id="3636f-931">Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.</span></span> <span data-ttu-id="3636f-932">Przekazywanie `cancellationToken` obiektu do tej metody po prostu umożliwia czas oczekiwania do anulowania oparte na spełnienia określonego warunku.</span><span class="sxs-lookup"><span data-stu-id="3636f-932">Passing the `cancellationToken` object to this method simply allows the wait to be canceled based on some condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-933">Następujące przykładowe wywołania <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> metodę w celu zapewnienia zarówno wartość limitu czasu i anulowania token, który może zakończyć oczekiwanie na ukończenie zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-933">The following example calls the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method to provide both a timeout value and a cancellation token that can end the wait for a task's completion.</span></span> <span data-ttu-id="3636f-934">Nowego wątku jest uruchomiona i wykonuje `CancelToken` metodę, która wstrzymuje działanie, a następnie wywołuje <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> metodę, aby anulować anulowanie tokenów.</span><span class="sxs-lookup"><span data-stu-id="3636f-934">A new thread is started and executes the `CancelToken` method, which pauses and then calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to cancel the cancellation tokens.</span></span> <span data-ttu-id="3636f-935">Zadanie to uruchomienia i wybrano opcję opóźnienia 5 sekund.</span><span class="sxs-lookup"><span data-stu-id="3636f-935">A task is then launched and delays for 5 seconds.</span></span> <span data-ttu-id="3636f-936"><xref:System.Threading.Tasks.Task.Wait%2A> Metoda jest następnie wywoływana czekać na zakończenie zadania i podano zarówno wartość limitu czasu krótkie, jak i token anulowania.</span><span class="sxs-lookup"><span data-stu-id="3636f-936">The <xref:System.Threading.Tasks.Task.Wait%2A> method is then called to wait for the task's completion and is provided both a brief timeout value and a cancellation token.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Wait#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait4.vb#4)]  
  
 <span data-ttu-id="3636f-937">Należy pamiętać, że dokładne dane wyjściowe z przykładu zależy, czy czas oczekiwania zostało anulowane z powodu token anulowania lub ponieważ upłynął limit czasu.</span><span class="sxs-lookup"><span data-stu-id="3636f-937">Note that the precise output from the example depends on whether the wait was canceled because of the cancellation token or because the timeout interval elapsed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="3636f-938">
            <paramref name="cancellationToken" /> Zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-938">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-939">
            <see cref="T:System.Threading.Tasks.Task" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-939">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-940">
            <paramref name="millisecondsTimeout" /> jest to liczba ujemna niż -1, która reprezentuje nieskończony limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-940">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="3636f-941">Zadanie zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-941">The task was canceled.</span>
          </span>
          <span data-ttu-id="3636f-942">
            <see cref="P:System.AggregateException.InnerExceptions" /> Kolekcja zawiera <see cref="T:System.Threading.Tasks.TaskCanceledException" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-942">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="3636f-943">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-943">-or-</span>
          </span>
          <span data-ttu-id="3636f-944">Wystąpił wyjątek podczas wykonywania zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-944">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="3636f-945">
            <see cref="P:System.AggregateException.InnerExceptions" /> Kolekcja zawiera informacje o wyjątków i wyjątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-945">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-946">Czeka na wszystkich udostępnionych <see cref="T:System.Threading.Tasks.Task" /> obiekty do ukończenia wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-946">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static void WaitAll (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitAll(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WaitAll (ParamArray tasks As Task())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitAll(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="3636f-947">Tablica <see cref="T:System.Threading.Tasks.Task" /> wystąpienia, na którym oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-947">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-948">Czeka na wszystkich udostępnionych <see cref="T:System.Threading.Tasks.Task" /> obiekty do ukończenia wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-948">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3636f-949">Poniższy przykład rozpoczyna się 10 zadań, z których każdy jest przekazywany indeks jako obiekt stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-949">The following example starts 10 tasks, each of which is passed an index as a state object.</span></span> <span data-ttu-id="3636f-950">Zadania z indeksem od dwóch do pięciu zgłaszają wyjątki.</span><span class="sxs-lookup"><span data-stu-id="3636f-950">Tasks with an index from two to five throw exceptions.</span></span> <span data-ttu-id="3636f-951">Wywołanie <xref:System.Threading.Tasks.Task.WaitAll%2A> metoda opakowuje wszystkie wyjątki w <xref:System.AggregateException> obiektu i propaguje go do wywołania wątku.</span><span class="sxs-lookup"><span data-stu-id="3636f-951">The call to the <xref:System.Threading.Tasks.Task.WaitAll%2A> method wraps all exceptions in an <xref:System.AggregateException> object and propagates it to the calling thread.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/waitall.cs#02)]
 [!code-vb[System.Threading.Tasks.Task#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/waitall.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-952">Co najmniej jednego <see cref="T:System.Threading.Tasks.Task" /> obiekty w <paramref name="tasks" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-952">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-953">
            <paramref name="tasks" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-953">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-954">
            <paramref name="tasks" /> Argument zawiera element o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-954">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="3636f-955">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-955">-or-</span>
          </span>
          <span data-ttu-id="3636f-956">
            <paramref name="tasks" /> Argument ma być pustą tablicą.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-956">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="3636f-957">Co najmniej jeden z <see cref="T:System.Threading.Tasks.Task" /> wystąpień zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-957">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="3636f-958">Jeśli zadanie zostało anulowane, <see cref="T:System.AggregateException" /> wyjątek zawiera <see cref="T:System.OperationCanceledException" /> wyjątek w jego <see cref="P:System.AggregateException.InnerExceptions" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-958">If a task was canceled, the <see cref="T:System.AggregateException" /> exception contains an <see cref="T:System.OperationCanceledException" /> exception in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="3636f-959">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-959">-or-</span>
          </span>
          <span data-ttu-id="3636f-960">Wystąpił wyjątek podczas wykonywania co najmniej jeden z <see cref="T:System.Threading.Tasks.Task" /> wystąpień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-960">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (tasks As Task(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="3636f-961">Tablica <see cref="T:System.Threading.Tasks.Task" /> wystąpienia, na którym oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-961">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="3636f-962">Wyrażony w milisekundach czas oczekiwania, lub <see cref="F:System.Threading.Timeout.Infinite" /> (-1) będzie czekać w nieskończoność.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-962">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-963">Czeka na wszystkich udostępnionych <see cref="T:System.Threading.Tasks.Task" /> obiektów do wykonany w ciągu określonej liczby milisekund.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-963">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-964">
            <see langword="true" /> Jeśli wszystkie z <see cref="T:System.Threading.Tasks.Task" /> wykonywania wystąpień zakończona w przydzielonym limicie czasu; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-964">
              <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-965">Co najmniej jednego <see cref="T:System.Threading.Tasks.Task" /> obiekty w <paramref name="tasks" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-965">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-966">
            <paramref name="tasks" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-966">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="3636f-967">Co najmniej jeden z <see cref="T:System.Threading.Tasks.Task" /> wystąpień zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-967">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="3636f-968">Jeśli zadanie zostało anulowane, <see cref="T:System.AggregateException" /> zawiera <see cref="T:System.OperationCanceledException" /> w jego <see cref="P:System.AggregateException.InnerExceptions" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-968">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="3636f-969">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-969">-or-</span>
          </span>
          <span data-ttu-id="3636f-970">Wystąpił wyjątek podczas wykonywania co najmniej jeden z <see cref="T:System.Threading.Tasks.Task" /> wystąpień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-970">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-971">
            <paramref name="millisecondsTimeout" /> jest to liczba ujemna niż -1, która reprezentuje nieskończony limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-971">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-972">
            <paramref name="tasks" /> Argument zawiera element o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-972">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="3636f-973">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-973">-or-</span>
          </span>
          <span data-ttu-id="3636f-974">
            <paramref name="tasks" /> Argument ma być pustą tablicą.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-974">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static void WaitAll (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitAll(class System.Threading.Tasks.Task[] tasks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="3636f-975">Tablica <see cref="T:System.Threading.Tasks.Task" /> wystąpienia, na którym oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-975">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-976">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> aby przyjrzeć się podczas oczekiwania na ukończenie zadań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-976">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-977">Czeka na wszystkich udostępnionych <see cref="T:System.Threading.Tasks.Task" /> obiekty do ukończenia wykonywania, o ile nie zostało anulowane, czas oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-977">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-978">`cancellationToken` Argument jest używany do anulowania operacji oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="3636f-978">The `cancellationToken` argument is used to cancel the wait operation.</span></span> <span data-ttu-id="3636f-979">Anulowanie zadań jest operacją distinct i zostanie zasygnalizowane przez <xref:System.AggregateException> wspomnianego powyżej.</span><span class="sxs-lookup"><span data-stu-id="3636f-979">Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> as noted above.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="3636f-980">
            <paramref name="cancellationToken" /> Zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-980">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-981">
            <paramref name="tasks" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-981">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="3636f-982">Co najmniej jeden z <see cref="T:System.Threading.Tasks.Task" /> wystąpień zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-982">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="3636f-983">Jeśli zadanie zostało anulowane, <see cref="T:System.AggregateException" /> zawiera <see cref="T:System.OperationCanceledException" /> w jego <see cref="P:System.AggregateException.InnerExceptions" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-983">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="3636f-984">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-984">-or-</span>
          </span>
          <span data-ttu-id="3636f-985">Wystąpił wyjątek podczas wykonywania co najmniej jeden z <see cref="T:System.Threading.Tasks.Task" /> wystąpień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-985">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-986">
            <paramref name="tasks" /> Argument zawiera element o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-986">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="3636f-987">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-987">-or-</span>
          </span>
          <span data-ttu-id="3636f-988">
            <paramref name="tasks" /> Argument ma być pustą tablicą.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-988">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-989">Co najmniej jednego <see cref="T:System.Threading.Tasks.Task" /> obiekty w <paramref name="tasks" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-989">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (tasks As Task(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="3636f-990">Tablica <see cref="T:System.Threading.Tasks.Task" /> wystąpienia, na którym oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-990">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="3636f-991">A <see cref="T:System.TimeSpan" /> reprezentujący wyrażony w milisekundach czas oczekiwania, lub <see cref="T:System.TimeSpan" /> reprezentujący wartość-1 milisekund oczekiwania przez czas nieokreślony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-991">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-992">Czeka na wszystkich udostępnionych możliwe <see cref="T:System.Threading.Tasks.Task" /> obiektów, aby zakończyć działanie w określonym przedziale czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-992">Waits for all of the provided cancellable <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-993">
            <see langword="true" /> Jeśli wszystkie z <see cref="T:System.Threading.Tasks.Task" /> wykonywania wystąpień zakończona w przydzielonym limicie czasu; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-993">
              <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-994">Co najmniej jednego <see cref="T:System.Threading.Tasks.Task" /> obiekty w <paramref name="tasks" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-994">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-995">
            <paramref name="tasks" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-995">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="3636f-996">Co najmniej jeden z <see cref="T:System.Threading.Tasks.Task" /> wystąpień zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-996">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="3636f-997">Jeśli zadanie zostało anulowane, <see cref="T:System.AggregateException" /> zawiera <see cref="T:System.OperationCanceledException" /> w jego <see cref="P:System.AggregateException.InnerExceptions" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-997">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="3636f-998">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-998">-or-</span>
          </span>
          <span data-ttu-id="3636f-999">Wystąpił wyjątek podczas wykonywania co najmniej jeden z <see cref="T:System.Threading.Tasks.Task" /> wystąpień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-999">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-1000">
            <paramref name="timeout" /> jest liczbą ujemną niż-1 milisekund, która reprezentuje nieskończony limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1000">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="3636f-1001">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1001">-or-</span>
          </span>
          <span data-ttu-id="3636f-1002">
            <paramref name="timeout" /> jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1002">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-1003">
            <paramref name="tasks" /> Argument zawiera element o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1003">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="3636f-1004">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1004">-or-</span>
          </span>
          <span data-ttu-id="3636f-1005">
            <paramref name="tasks" /> Argument ma być pustą tablicą.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1005">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="3636f-1006">Tablica <see cref="T:System.Threading.Tasks.Task" /> wystąpienia, na którym oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1006">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="3636f-1007">Wyrażony w milisekundach czas oczekiwania, lub <see cref="F:System.Threading.Timeout.Infinite" /> (-1) będzie czekać w nieskończoność.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1007">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-1008">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> aby przyjrzeć się podczas oczekiwania na ukończenie zadań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1008">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-1009">Czeka na wszystkich udostępnionych <see cref="T:System.Threading.Tasks.Task" /> obiektów do wykonany w ciągu określonej liczby milisekund lub zostało anulowane, czas oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1009">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-1010">
            <see langword="true" /> Jeśli wszystkie z <see cref="T:System.Threading.Tasks.Task" /> wykonywania wystąpień zakończona w przydzielonym limicie czasu; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1010">
              <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-1011">`cancellationToken` Argument jest używany do anulowania operacji oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="3636f-1011">The `cancellationToken` argument is used to cancel the wait operation.</span></span> <span data-ttu-id="3636f-1012">Anulowanie zadań jest operacją distinct i zostanie zasygnalizowane przez <xref:System.AggregateException> wymienionych powyżej.</span><span class="sxs-lookup"><span data-stu-id="3636f-1012">Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> noted above.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-1013">Co najmniej jednego <see cref="T:System.Threading.Tasks.Task" /> obiekty w <paramref name="tasks" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1013">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-1014">
            <paramref name="tasks" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1014">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="3636f-1015">Co najmniej jeden z <see cref="T:System.Threading.Tasks.Task" /> wystąpień zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1015">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="3636f-1016">Jeśli zadanie zostało anulowane, <see cref="T:System.AggregateException" /> zawiera <see cref="T:System.OperationCanceledException" /> w jego <see cref="P:System.AggregateException.InnerExceptions" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1016">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="3636f-1017">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1017">-or-</span>
          </span>
          <span data-ttu-id="3636f-1018">Wystąpił wyjątek podczas wykonywania co najmniej jeden z <see cref="T:System.Threading.Tasks.Task" /> wystąpień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1018">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-1019">
            <paramref name="millisecondsTimeout" /> jest to liczba ujemna niż -1, która reprezentuje nieskończony limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1019">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-1020">
            <paramref name="tasks" /> Argument zawiera element o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1020">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="3636f-1021">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1021">-or-</span>
          </span>
          <span data-ttu-id="3636f-1022">
            <paramref name="tasks" /> Argument ma być pustą tablicą.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1022">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="3636f-1023">
            <paramref name="cancellationToken" /> Zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1023">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-1024">Czeka na dowolne z dostarczonych <see cref="T:System.Threading.Tasks.Task" /> obiekty do ukończenia wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1024">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (ParamArray tasks As Task()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="3636f-1025">Tablica <see cref="T:System.Threading.Tasks.Task" /> wystąpienia, na którym oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1025">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-1026">Czeka na dowolne z dostarczonych <see cref="T:System.Threading.Tasks.Task" /> obiekty do ukończenia wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1026">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-1027">Indeks ukończonej <see cref="T:System.Threading.Tasks.Task" /> obiektu w <paramref name="tasks" /> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1027">The index of the completed <see cref="T:System.Threading.Tasks.Task" /> object in the <paramref name="tasks" /> array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3636f-1028">Poniższy przykład powoduje uruchomienie pięć zadań, z których każdy zostanie uśpiony na co najmniej 50 milisekund lub maksymalnie 1,050 milisekund.</span><span class="sxs-lookup"><span data-stu-id="3636f-1028">The following example launches five tasks, each of which sleeps for a minimum of 50 milliseconds or a maximum of 1,050 milliseconds.</span></span> <span data-ttu-id="3636f-1029"><xref:System.Threading.Tasks.Task.WaitAny%2A> Metody następnie czeka na zadań do wykonania.</span><span class="sxs-lookup"><span data-stu-id="3636f-1029">The <xref:System.Threading.Tasks.Task.WaitAny%2A> method then waits for any of the tasks to complete.</span></span> <span data-ttu-id="3636f-1030">W przykładzie przedstawiono zadania, który upłynął czas oczekiwania identyfikator zadania, jak bieżący stan wszystkich zadań.</span><span class="sxs-lookup"><span data-stu-id="3636f-1030">The example displays the task ID of the task that ended the wait, as well as the current status of all the tasks.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WaitAny#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny/cs/WaitAny1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.WaitAny#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny/vb/WaitAny1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-1031">
            <see cref="T:System.Threading.Tasks.Task" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1031">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-1032">
            <paramref name="tasks" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1032">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-1033">
            <paramref name="tasks" /> Argument zawiera element o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1033">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (tasks As Task(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="3636f-1034">Tablica <see cref="T:System.Threading.Tasks.Task" /> wystąpienia, na którym oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1034">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="3636f-1035">Wyrażony w milisekundach czas oczekiwania, lub <see cref="F:System.Threading.Timeout.Infinite" /> (-1) będzie czekać w nieskończoność.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1035">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-1036">Czeka na dowolne z dostarczonych <see cref="T:System.Threading.Tasks.Task" /> obiektów do wykonany w ciągu określonej liczby milisekund.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1036">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-1037">Indeks ukończonego zadania w <paramref name="tasks" /> tablicy argument lub wartość -1, jeśli upłynął limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1037">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-1038">
            <see cref="T:System.Threading.Tasks.Task" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1038">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-1039">
            <paramref name="tasks" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1039">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-1040">
            <paramref name="millisecondsTimeout" /> jest to liczba ujemna niż -1, która reprezentuje nieskończony limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1040">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-1041">
            <paramref name="tasks" /> Argument zawiera element o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1041">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="3636f-1042">Tablica <see cref="T:System.Threading.Tasks.Task" /> wystąpienia, na którym oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1042">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-1043">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> aby przyjrzeć się podczas oczekiwania na ukończenie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1043">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-1044">Czeka na dowolne z dostarczonych <see cref="T:System.Threading.Tasks.Task" /> obiekty do ukończenia wykonywania, o ile nie zostało anulowane, czas oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1044">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-1045">Indeks ukończonego zadania w <paramref name="tasks" /> tablicy argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1045">The index of the completed task in the <paramref name="tasks" /> array argument.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-1046">
            <see cref="T:System.Threading.Tasks.Task" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1046">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-1047">
            <paramref name="tasks" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1047">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-1048">
            <paramref name="tasks" /> Argument zawiera element o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1048">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="3636f-1049">
            <paramref name="cancellationToken" /> Zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1049">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (tasks As Task(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="3636f-1050">Tablica <see cref="T:System.Threading.Tasks.Task" /> wystąpienia, na którym oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1050">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="3636f-1051">A <see cref="T:System.TimeSpan" /> reprezentujący wyrażony w milisekundach czas oczekiwania, lub <see cref="T:System.TimeSpan" /> reprezentujący wartość-1 milisekund oczekiwania przez czas nieokreślony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1051">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-1052">Czeka na dowolne z dostarczonych <see cref="T:System.Threading.Tasks.Task" /> obiektów, aby zakończyć działanie w określonym przedziale czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1052">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-1053">Indeks ukończonego zadania w <paramref name="tasks" /> tablicy argument lub wartość -1, jeśli upłynął limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1053">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-1054">
            <see cref="T:System.Threading.Tasks.Task" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1054">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-1055">
            <paramref name="tasks" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1055">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-1056">
            <paramref name="timeout" /> jest liczbą ujemną niż-1 milisekund, która reprezentuje nieskończony limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1056">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="3636f-1057">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1057">-or-</span>
          </span>
          <span data-ttu-id="3636f-1058">
            <paramref name="timeout" /> jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1058">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-1059">
            <paramref name="tasks" /> Argument zawiera element o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1059">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="3636f-1060">Tablica <see cref="T:System.Threading.Tasks.Task" /> wystąpienia, na którym oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1060">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="3636f-1061">Wyrażony w milisekundach czas oczekiwania, lub <see cref="F:System.Threading.Timeout.Infinite" /> (-1) będzie czekać w nieskończoność.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1061">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="3636f-1062">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> aby przyjrzeć się podczas oczekiwania na ukończenie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1062">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-1063">Czeka na dowolne z dostarczonych <see cref="T:System.Threading.Tasks.Task" /> obiektów do wykonany w ciągu określonej liczby milisekund lub do chwili token anulowania zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1063">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-1064">Indeks ukończonego zadania w <paramref name="tasks" /> tablicy argument lub wartość -1, jeśli upłynął limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1064">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3636f-1065">
            <see cref="T:System.Threading.Tasks.Task" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1065">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-1066">
            <paramref name="tasks" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1066">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3636f-1067">
            <paramref name="millisecondsTimeout" /> jest to liczba ujemna niż -1, która reprezentuje nieskończony limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1067">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-1068">
            <paramref name="tasks" /> Argument zawiera element o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1068">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="3636f-1069">
            <paramref name="cancellationToken" /> Zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1069">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WhenAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-1070">Tworzy zadanie, które zostanie zakończony, po zakończeniu wszystkich zadań dostarczony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1070">Creates a task that will complete when all of the supplied tasks have completed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WhenAll">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WhenAll (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WhenAll(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll (tasks As IEnumerable(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ WhenAll(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="3636f-1071">Zaczekać ukończenie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1071">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-1072">Tworzy zadanie, które zostanie zakończony, kiedy wszystkie <see cref="T:System.Threading.Tasks.Task" /> obiektów z kolekcji wyliczalny została ukończona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1072">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an enumerable collection have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-1073">Zadanie reprezentujące zakończenie wszystkich zadań dostarczony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1073">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-1074">Przeciążeń <xref:System.Threading.Tasks.Task.WhenAll%2A> metody, która zwraca <xref:System.Threading.Tasks.Task> obiektu są zwykle nazywane Jeśli interesuje Cię w stan zestawu zadań lub wyjątki wyrzucane przez zestaw zadań.</span><span class="sxs-lookup"><span data-stu-id="3636f-1074">The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3636f-1075">Wywołanie <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> — metoda nie blokuje wątek wywołujący.</span><span class="sxs-lookup"><span data-stu-id="3636f-1075">The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method does not block the calling thread.</span></span>  
  
 <span data-ttu-id="3636f-1076">Podany zadań wykona stan, zwrócony zadań zakończy się również w <xref:System.Threading.Tasks.TaskStatus.Faulted> stanu, gdy jego wyjątki będzie zawierać agregacji zestawu bez otoki wyjątki od poszczególnych zadań podany.</span><span class="sxs-lookup"><span data-stu-id="3636f-1076">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state,  where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="3636f-1077">Jeśli żadne zadanie dostarczony komunikacji niezawodnej, ale co najmniej jeden z nich została anulowana, zadanie zwrócone skończy się za <xref:System.Threading.Tasks.TaskStatus.Canceled> stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-1077">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="3636f-1078">Jeśli żadne zadanie komunikacji niezawodnej żadnych zadań zostały anulowane, zadaniu wynikowym skończy się za <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-1078">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="3636f-1079">Jeśli podany tablicy/wyliczenia nie zawiera żadnych zadań, zwracane zadań będzie natychmiast przejście do <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stanu przed zwróceniem do obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="3636f-1079">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-1080">Poniższy przykład tworzy zbiór zadań, które polecenie ping adresy URL w tablicy.</span><span class="sxs-lookup"><span data-stu-id="3636f-1080">The following example creates a set of tasks that ping the URLs in an array.</span></span> <span data-ttu-id="3636f-1081">Zadania są przechowywane w `List<Task>` kolekcji, który jest przekazywany do <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-1081">The tasks are stored in a `List<Task>` collection that is passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method.</span></span> <span data-ttu-id="3636f-1082">Po wywołaniu <xref:System.Threading.Tasks.Task.Wait%2A> metoda gwarantuje, że zostały wykonane wszystkie wątki, sprawdza przykładzie <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> właściwości w celu określenia, czy ma błędny żadnych zadań.</span><span class="sxs-lookup"><span data-stu-id="3636f-1082">After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property to determine whether any tasks have faulted.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/WhenAll4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/WhenAll4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-1083">
            <paramref name="tasks" /> Argument był <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1083">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-1084">
            <paramref name="tasks" /> Kolekcji znajdującej się <see langword="null" /> zadań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1084">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WhenAll (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WhenAll(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll (ParamArray tasks As Task()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ WhenAll(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="3636f-1085">Zaczekać ukończenie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1085">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-1086">Tworzy zadanie, które zostanie zakończony, kiedy wszystkie <see cref="T:System.Threading.Tasks.Task" /> obiektów w tablicy została ukończona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1086">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an array have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-1087">Zadanie reprezentujące zakończenie wszystkich zadań dostarczony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1087">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-1088">Przeciążeń <xref:System.Threading.Tasks.Task.WhenAll%2A> metody, która zwraca <xref:System.Threading.Tasks.Task> obiektu są zwykle nazywane Jeśli interesuje Cię w stan zestawu zadań lub wyjątki wyrzucane przez zestaw zadań.</span><span class="sxs-lookup"><span data-stu-id="3636f-1088">The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3636f-1089">Wywołanie <xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29> — metoda nie blokuje wątek wywołujący.</span><span class="sxs-lookup"><span data-stu-id="3636f-1089">The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29> method does not block the calling thread.</span></span>  
  
 <span data-ttu-id="3636f-1090">Podany zadań wykona stan, zwrócony zadań zakończy się również w <xref:System.Threading.Tasks.TaskStatus.Faulted> stanu, gdy jego wyjątki będzie zawierać agregacji zestawu bez otoki wyjątki od poszczególnych zadań podany.</span><span class="sxs-lookup"><span data-stu-id="3636f-1090">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="3636f-1091">Jeśli żadne zadanie dostarczony komunikacji niezawodnej, ale co najmniej jeden z nich została anulowana, zadanie zwrócone skończy się za <xref:System.Threading.Tasks.TaskStatus.Canceled> stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-1091">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="3636f-1092">Jeśli żadne zadanie komunikacji niezawodnej żadnych zadań zostały anulowane, zadaniu wynikowym skończy się za <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-1092">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="3636f-1093">Jeśli podany tablicy/wyliczenia nie zawiera żadnych zadań, zwracane zadań będzie natychmiast przejście do <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stanu przed zwróceniem do obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="3636f-1093">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-1094">Poniższy przykład tworzy zbiór zadań, które polecenie ping adresy URL w tablicy.</span><span class="sxs-lookup"><span data-stu-id="3636f-1094">The following example creates a set of tasks that ping the URLs in an array.</span></span> <span data-ttu-id="3636f-1095">Zadania są przechowywane w `List<Task>` kolekcji, która jest konwertowana na tablicę i przekazywane do <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> metody.</span><span class="sxs-lookup"><span data-stu-id="3636f-1095">The tasks are stored in a `List<Task>` collection that is converted to an array and passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method.</span></span> <span data-ttu-id="3636f-1096">Po wywołaniu <xref:System.Threading.Tasks.Task.Wait%2A> metoda gwarantuje, że zostały wykonane wszystkie wątki, sprawdza przykładzie <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> właściwości w celu określenia, czy ma błędny żadnych zadań.</span><span class="sxs-lookup"><span data-stu-id="3636f-1096">After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property to determine whether any tasks have faulted.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/WhenAll3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/WhenAll3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-1097">
            <paramref name="tasks" /> Argument był <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1097">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-1098">
            <paramref name="tasks" /> Tablica <see langword="null" /> zadań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1098">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult[]&gt; WhenAll&lt;TResult&gt; (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult[]&gt; WhenAll&lt;TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll(Of TResult) (tasks As IEnumerable(Of Task(Of TResult))) As Task(Of TResult())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;TResult&gt; ^&gt; ^ WhenAll(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-1099">Typ ukończonego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1099">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="3636f-1100">Zaczekać ukończenie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1100">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-1101">Tworzy zadanie, które zostanie zakończony, kiedy wszystkie <see cref="T:System.Threading.Tasks.Task`1" /> obiektów z kolekcji wyliczalny została ukończona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1101">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an enumerable collection have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-1102">Zadanie reprezentujące zakończenie wszystkich zadań dostarczony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1102">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-1103">Wywołanie <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> — metoda nie blokuje wątek wywołujący.</span><span class="sxs-lookup"><span data-stu-id="3636f-1103">The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> method does not block the calling thread.</span></span> <span data-ttu-id="3636f-1104">Jednak wywołaniu zwracana <xref:System.Threading.Tasks.Task%601.Result%2A> właściwości zablokować wywołania wątku.</span><span class="sxs-lookup"><span data-stu-id="3636f-1104">However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.</span></span>  
  
 <span data-ttu-id="3636f-1105">Podany zadań wykona stan, zwrócony zadań zakończy się również w <xref:System.Threading.Tasks.TaskStatus.Faulted> stanu, gdy jego wyjątki będzie zawierać agregacji zestawu bez otoki wyjątki od poszczególnych zadań podany.</span><span class="sxs-lookup"><span data-stu-id="3636f-1105">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="3636f-1106">Jeśli żadne zadanie dostarczony komunikacji niezawodnej, ale co najmniej jeden z nich została anulowana, zadanie zwrócone skończy się za <xref:System.Threading.Tasks.TaskStatus.Canceled> stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-1106">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="3636f-1107">Jeśli żadne zadanie komunikacji niezawodnej żadnych zadań zostały anulowane, zadaniu wynikowym skończy się za <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-1107">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  <span data-ttu-id="3636f-1108"><xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> Właściwość zwrócone zadania zostanie ustawiona na tablicę zawierającą wszystkie wyniki zadań podane w tej samej kolejności, ponieważ zostały one udostępniane (np. Jeśli dane wejściowe zadania tablica t1, t2, t3, dane wyjściowe zadania <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> zwróci właściwości `TResult[]` gdzie `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span><span class="sxs-lookup"><span data-stu-id="3636f-1108">The <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output task's <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span></span>  
  
 <span data-ttu-id="3636f-1109">Jeśli `tasks` argument nie zawiera żadnych zadań, zadanie zwrócone natychmiast spowoduje przejście do <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stanu przed zwróceniem do obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="3636f-1109">If the `tasks` argument contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span> <span data-ttu-id="3636f-1110">Zwrócona `TResult[]` będzie tablicę elementów 0.</span><span class="sxs-lookup"><span data-stu-id="3636f-1110">The returned `TResult[]` will be an array of 0 elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-1111">Poniższy przykład tworzy dziesięciu zadań, z których każdy tworzy generator liczb losowych, które tworzy 1000 losowych liczb od 1 do 1000 i oblicza średnią ich.</span><span class="sxs-lookup"><span data-stu-id="3636f-1111">The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean.</span></span> <span data-ttu-id="3636f-1112"><xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> Metoda jest używana do opóźnienia wystąpienia losowych liczb generatory tak, aby nie są tworzone z wartościami identyczne inicjatora.</span><span class="sxs-lookup"><span data-stu-id="3636f-1112">The <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> method is used to delay instantiation of the random number generators so that they are not created with identical seed values.</span></span> <span data-ttu-id="3636f-1113">Wywołanie <xref:System.Threading.Tasks.Task.WhenAll%2A> następnie metoda zwraca <xref:System.Int64> tablica zawierająca wartości średniej obliczone przez każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-1113">The call to the <xref:System.Threading.Tasks.Task.WhenAll%2A> method then returns an <xref:System.Int64> array that contains the mean computed by each task.</span></span> <span data-ttu-id="3636f-1114">Następnie są one używane do obliczania średniej ogólnej.</span><span class="sxs-lookup"><span data-stu-id="3636f-1114">These are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/whenall1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/whenall1.vb#1)]  
  
 <span data-ttu-id="3636f-1115">W takim przypadku dziesięć poszczególne zadania są przechowywane w <xref:System.Collections.Generic.List%601> obiektu.</span><span class="sxs-lookup"><span data-stu-id="3636f-1115">In this case, the ten individual tasks are stored in a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="3636f-1116"><xref:System.Collections.Generic.List%601> implementuje <xref:System.Collections.Generic.IEnumerable%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="3636f-1116"><xref:System.Collections.Generic.List%601> implements the <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-1117">
            <paramref name="tasks" /> Argument był <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1117">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-1118">
            <paramref name="tasks" /> Kolekcji znajdującej się <see langword="null" /> zadań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1118">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult[]&gt; WhenAll&lt;TResult&gt; (params System.Threading.Tasks.Task&lt;TResult&gt;[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult[]&gt; WhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TResult&gt;[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll(Of TResult) (ParamArray tasks As Task(Of TResult)()) As Task(Of TResult())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;TResult&gt; ^&gt; ^ WhenAll(... cli::array &lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TResult&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-1119">Typ ukończonego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1119">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="3636f-1120">Zaczekać ukończenie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1120">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-1121">Tworzy zadanie, które zostanie zakończony, kiedy wszystkie <see cref="T:System.Threading.Tasks.Task`1" /> obiektów w tablicy została ukończona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1121">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an array have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-1122">Zadanie reprezentujące zakończenie wszystkich zadań dostarczony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1122">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-1123">Wywołanie <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> — metoda nie blokuje wątek wywołujący.</span><span class="sxs-lookup"><span data-stu-id="3636f-1123">The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> method does not block the calling thread.</span></span> <span data-ttu-id="3636f-1124">Jednak wywołaniu zwracana <xref:System.Threading.Tasks.Task%601.Result%2A> właściwości zablokować wywołania wątku.</span><span class="sxs-lookup"><span data-stu-id="3636f-1124">However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.</span></span>  
  
 <span data-ttu-id="3636f-1125">Podany zadań wykona stan, zwrócony zadań zakończy się również w <xref:System.Threading.Tasks.TaskStatus.Faulted> stanu, gdy jego wyjątki będzie zawierać agregacji zestawu bez otoki wyjątki od poszczególnych zadań podany.</span><span class="sxs-lookup"><span data-stu-id="3636f-1125">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="3636f-1126">Jeśli żadne zadanie dostarczony komunikacji niezawodnej, ale co najmniej jeden z nich została anulowana, zadanie zwrócone skończy się za <xref:System.Threading.Tasks.TaskStatus.Canceled> stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-1126">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="3636f-1127">Jeśli żadne zadanie komunikacji niezawodnej żadnych zadań zostały anulowane, zadaniu wynikowym skończy się za <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-1127">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  <span data-ttu-id="3636f-1128"><xref:System.Threading.Tasks.Task%601.Result%2A> Zwrócone zadania zostaną ustawione na tablicę zawierającą wszystkie wyniki zadań podane w tej samej kolejności, ponieważ zostały one udostępniane (np. Jeśli dane wejściowe zadania tablica t1, t2, t3, dane wyjściowe zadania <xref:System.Threading.Tasks.Task%601.Result%2A> zwróci `TResult[]` gdzie `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span><span class="sxs-lookup"><span data-stu-id="3636f-1128">The <xref:System.Threading.Tasks.Task%601.Result%2A> of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output   task's <xref:System.Threading.Tasks.Task%601.Result%2A> will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span></span>  
  
 <span data-ttu-id="3636f-1129">Jeśli podany tablicy/wyliczenia nie zawiera żadnych zadań, zwracane zadań będzie natychmiast przejście do <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stanu przed zwróceniem do obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="3636f-1129">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  <span data-ttu-id="3636f-1130">Zwrócona `TResult[]` będzie tablicę elementów 0.</span><span class="sxs-lookup"><span data-stu-id="3636f-1130">The returned `TResult[]` will be an array of 0 elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3636f-1131">Poniższy przykład tworzy dziesięciu zadań, z których każdy tworzy generator liczb losowych, które tworzy 1000 losowych liczb od 1 do 1000 i oblicza średnią ich.</span><span class="sxs-lookup"><span data-stu-id="3636f-1131">The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean.</span></span> <span data-ttu-id="3636f-1132">W takim przypadku dziesięć poszczególne zadania są przechowywane w `Task<Int64>` tablicy.</span><span class="sxs-lookup"><span data-stu-id="3636f-1132">In this case, the ten individual tasks are stored in a `Task<Int64>` array.</span></span>  <span data-ttu-id="3636f-1133"><xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> Metoda jest używana do opóźnienia wystąpienia losowych liczb generatory tak, aby nie są tworzone z wartościami identyczne inicjatora.</span><span class="sxs-lookup"><span data-stu-id="3636f-1133">The <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> method is used to delay instantiation of the random number generators so that they are not created with identical seed values.</span></span> <span data-ttu-id="3636f-1134">Wywołanie <xref:System.Threading.Tasks.Task.WhenAll%2A> następnie metoda zwraca <xref:System.Int64> tablica zawierająca wartości średniej obliczone przez każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="3636f-1134">The call to the <xref:System.Threading.Tasks.Task.WhenAll%2A> method then returns an <xref:System.Int64> array that contains the mean computed by each task.</span></span> <span data-ttu-id="3636f-1135">Następnie są one używane do obliczania średniej ogólnej.</span><span class="sxs-lookup"><span data-stu-id="3636f-1135">These are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/whenall2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/whenall2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-1136">
            <paramref name="tasks" /> Argument był <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1136">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-1137">
            <paramref name="tasks" /> Tablica <see langword="null" /> zadań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1137">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WhenAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3636f-1138">Tworzy zadanie, które ukończy po zakończeniu dostarczony zadań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1138">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WhenAny">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; WhenAny (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; WhenAny(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny (tasks As IEnumerable(Of Task)) As Task(Of Task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ WhenAny(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="3636f-1139">Zaczekać ukończenie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1139">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-1140">Tworzy zadanie, które ukończy po zakończeniu dostarczony zadań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1140">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-1141">Zadanie reprezentujące zakończenia jeden z dostarczonego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1141">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="3636f-1142">Zwracany wynik zadania jest zadania, które wykonane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1142">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-1143">Zadanie zwrócone ukończy, kiedy dostarczony zadań została ukończona.</span><span class="sxs-lookup"><span data-stu-id="3636f-1143">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="3636f-1144">Zawsze kończy zadanie zwracane w `RanToCompletion` stanu z jej zestaw wyników do pierwszego zadania do wykonania.</span><span class="sxs-lookup"><span data-stu-id="3636f-1144">The returned task will always end in the `RanToCompletion` state  with its Result set to the first task to complete.</span></span>  <span data-ttu-id="3636f-1145">Dotyczy to nawet wtedy, gdy pierwszy na zakończenie zadania zakończone w `Canceled` lub `Faulted` stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-1145">This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-1146">
            <paramref name="tasks" /> Argument był <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1146">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-1147">
            <paramref name="tasks" /> Tablicy zawierał zadanie wartości null lub jest pusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1147">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; WhenAny (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; WhenAny(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny (ParamArray tasks As Task()) As Task(Of Task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ WhenAny(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="3636f-1148">Zaczekać ukończenie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1148">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-1149">Tworzy zadanie, które ukończy po zakończeniu dostarczony zadań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1149">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-1150">Zadanie reprezentujące zakończenia jeden z dostarczonego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1150">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="3636f-1151">Zwracany wynik zadania jest zadania, które wykonane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1151">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-1152">Zadanie zwrócone ukończy, kiedy dostarczony zadań została ukończona.</span><span class="sxs-lookup"><span data-stu-id="3636f-1152">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="3636f-1153">Zawsze kończy zadanie zwracane w `RanToCompletion` stanu z jego `Result` ustawioną pierwszego zadania do wykonania.</span><span class="sxs-lookup"><span data-stu-id="3636f-1153">The returned task will always end in the `RanToCompletion` state   with its `Result` set to the first task to complete.</span></span>  <span data-ttu-id="3636f-1154">Dotyczy to nawet wtedy, gdy pierwszy na zakończenie zadania zakończone w `Canceled` lub `Faulted` stanu.</span><span class="sxs-lookup"><span data-stu-id="3636f-1154">This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-1155">
            <paramref name="tasks" /> Argument miał wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1155">The <paramref name="tasks" /> argument was null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-1156">
            <paramref name="tasks" /> Tablicy zawierał zadanie wartości null lub jest pusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1156">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; WhenAny&lt;TResult&gt; (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; WhenAny&lt;TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny(Of TResult) (tasks As IEnumerable(Of Task(Of TResult))) As Task(Of Task(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ WhenAny(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-1157">Typ ukończonego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1157">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="3636f-1158">Zaczekać ukończenie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1158">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-1159">Tworzy zadanie, które ukończy po zakończeniu dostarczony zadań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1159">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-1160">Zadanie reprezentujące zakończenia jeden z dostarczonego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1160">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="3636f-1161">Zwracany wynik zadania jest zadania, które wykonane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1161">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-1162">Zadanie zwrócone ukończy, kiedy dostarczony zadań została ukończona.</span><span class="sxs-lookup"><span data-stu-id="3636f-1162">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="3636f-1163">Zadanie zwrócone zawsze kończy w stanie RanToCompletion z jej zestaw wyników do pierwszego zadania do wykonania.</span><span class="sxs-lookup"><span data-stu-id="3636f-1163">The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.</span></span> <span data-ttu-id="3636f-1164">Dotyczy to nawet wtedy, gdy pierwszy na zakończenie zadania zakończone w stanie anulowane lub Faulted.</span><span class="sxs-lookup"><span data-stu-id="3636f-1164">This is true even if the first task to complete ended in the Canceled or Faulted state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-1165">
            <paramref name="tasks" /> Argument był <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1165">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-1166">
            <paramref name="tasks" /> Tablicy zawierał zadanie wartości null lub jest pusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1166">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; WhenAny&lt;TResult&gt; (params System.Threading.Tasks.Task&lt;TResult&gt;[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; WhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TResult&gt;[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny(Of TResult) (ParamArray tasks As Task(Of TResult)()) As Task(Of Task(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ WhenAny(... cli::array &lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TResult&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3636f-1167">Typ ukończonego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1167">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="3636f-1168">Zaczekać ukończenie zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1168">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3636f-1169">Tworzy zadanie, które ukończy po zakończeniu dostarczony zadań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1169">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-1170">Zadanie reprezentujące zakończenia jeden z dostarczonego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1170">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="3636f-1171">Zwracany wynik zadania jest zadania, które wykonane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1171">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-1172">Zadanie zwrócone ukończy, kiedy dostarczony zadań została ukończona.</span><span class="sxs-lookup"><span data-stu-id="3636f-1172">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="3636f-1173">Zadanie zwrócone zawsze kończy w stanie RanToCompletion z jej zestaw wyników do pierwszego zadania do wykonania.</span><span class="sxs-lookup"><span data-stu-id="3636f-1173">The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.</span></span> <span data-ttu-id="3636f-1174">Dotyczy to nawet wtedy, gdy pierwszy na zakończenie zadania zakończone w stanie anulowane lub Faulted.</span><span class="sxs-lookup"><span data-stu-id="3636f-1174">This is true even if the first task to complete ended in the Canceled or Faulted state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3636f-1175">
            <paramref name="tasks" /> Argument miał wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1175">The <paramref name="tasks" /> argument was null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3636f-1176">
            <paramref name="tasks" /> Tablicy zawierał zadanie wartości null lub jest pusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1176">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.YieldAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.YieldAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As YieldAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::CompilerServices::YieldAwaitable Yield();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.YieldAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3636f-1177">Tworzy zadanie oczekujący, które asynchronicznie daje do bieżącego kontekstu, gdy oczekiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1177">Creates an awaitable task that asynchronously yields back to the current context when awaited.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3636f-1178">Kontekst, gdy oczekiwane, asynchronicznie spowoduje przejście do bieżącego kontekstu w czasie await.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1178">A context that, when awaited, will asynchronously transition back into the current context at the time of the await.</span>
          </span>
          <span data-ttu-id="3636f-1179">Jeśli bieżący <see cref="T:System.Threading.SynchronizationContext" /> jest różna od null, jest ona traktowana jako bieżący kontekst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1179">If the current <see cref="T:System.Threading.SynchronizationContext" /> is non-null, it is treated as the current context.</span>
          </span>
          <span data-ttu-id="3636f-1180">W przeciwnym razie Harmonogram zadań, który jest skojarzony z aktualnie wykonywanego zadania są traktowane jako bieżący kontekst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3636f-1180">Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3636f-1181">Można użyć `await Task.Yield();` w metodę asynchroniczną, aby wymusić metodę, aby ukończyć asynchronicznie.</span><span class="sxs-lookup"><span data-stu-id="3636f-1181">You can use `await Task.Yield();` in an asynchronous method to force the method to complete asynchronously.</span></span> <span data-ttu-id="3636f-1182">Jeśli bieżący kontekst synchronizacji (<xref:System.Threading.SynchronizationContext> obiektu), to zostanie wysłany w pozostałej części wykonanie metody do tego kontekstu.</span><span class="sxs-lookup"><span data-stu-id="3636f-1182">If there is a current synchronization context (<xref:System.Threading.SynchronizationContext> object), this will post the remainder of the method’s execution back to that context.</span></span> <span data-ttu-id="3636f-1183">Jednak kontekście podejmie decyzję, jak priorytety tę pracę względem innych prac, które mogą być oczekujące.</span><span class="sxs-lookup"><span data-stu-id="3636f-1183">However, the context will decide how to prioritize this work relative to other work that may be pending.</span></span> <span data-ttu-id="3636f-1184">Kontekst synchronizacji, który znajduje się w wątku interfejsu użytkownika w większości środowisk interfejsu użytkownika często priorytetów pracy publikowane w kontekście wyższym niż dane wejściowe i renderowania pracy.</span><span class="sxs-lookup"><span data-stu-id="3636f-1184">The synchronization context that is present on a UI thread in most UI environments will often prioritize work posted to the context higher than input and rendering work.</span></span> <span data-ttu-id="3636f-1185">Z tego powodu nie należy polegać na `await Task.Yield();` do zachowania reakcji interfejsu użytkownika.</span><span class="sxs-lookup"><span data-stu-id="3636f-1185">For this reason, do not rely on `await Task.Yield();` to keep a UI responsive.</span></span>  <span data-ttu-id="3636f-1186">Aby uzyskać więcej informacji, zobacz wpis [przydatne abstrakcje z włączoną ContinueWith](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx) w programowania równoległego z blogu .NET.</span><span class="sxs-lookup"><span data-stu-id="3636f-1186">For more information, see the entry [Useful Abstractions Enabled with ContinueWith](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>