<Type Name="Task&lt;TResult&gt;" FullName="System.Threading.Tasks.Task&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="45373ee4dcebcddee1d766d0390eef269ce7e2f2" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48641312" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Task&lt;TResult&gt; : System.Threading.Tasks.Task" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Task`1&lt;TResult&gt; extends System.Threading.Tasks.Task" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Task`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Task(Of TResult)&#xA;Inherits Task" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public ref class Task : System::Threading::Tasks::Task" />
  <TypeSignature Language="F#" Value="type Task&lt;'Result&gt; = class&#xA;    inherit Task" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Threading.Tasks.Task</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}, Result = {DebuggerDisplayResultDescription}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.SystemThreadingTasks_FutureDebugView`1))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TResult">
      <span data-ttu-id="67fe9-101">Typ wyniku generowane przez to <see cref="T:System.Threading.Tasks.Task`1" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="67fe9-101">The type of the result produced by this <see cref="T:System.Threading.Tasks.Task`1" />.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="67fe9-102">Reprezentuje operację asynchroniczną, która może zwracać wartość.</span>
      <span class="sxs-lookup">
        <span data-stu-id="67fe9-102">Represents an asynchronous operation that can return a value.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-103"><xref:System.Threading.Tasks.Task%601> Klasy reprezentuje pojedynczej operacji, która zwykle zwraca wartość oraz czy działa w sposób asynchroniczny.</span><span class="sxs-lookup"><span data-stu-id="67fe9-103">The <xref:System.Threading.Tasks.Task%601> class represents a single operation that returns a value and that usually executes asynchronously.</span></span> <span data-ttu-id="67fe9-104"><xref:System.Threading.Tasks.Task%601> obiekty są jednymi z centralne składniki [wzorca asynchronicznego opartego na zadaniach](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) po raz pierwszy wprowadzone w programie .NET Framework 4.</span><span class="sxs-lookup"><span data-stu-id="67fe9-104"><xref:System.Threading.Tasks.Task%601> objects are one of the central components of the [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) first introduced in the .NET Framework 4.</span></span> <span data-ttu-id="67fe9-105">Ponieważ praca wykonana przez <xref:System.Threading.Tasks.Task%601> obiektu zwykle wykonuje asynchronicznie na wątku z puli wątków, a nie synchronicznie w wątku głównego aplikacji, można użyć <xref:System.Threading.Tasks.Task.Status%2A> właściwości, jak również <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, i <xref:System.Threading.Tasks.Task.IsFaulted%2A> właściwości w celu określenia stanu zadania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-105">Because the work performed by a <xref:System.Threading.Tasks.Task%601> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task.</span></span> <span data-ttu-id="67fe9-106">Najczęściej Wyrażenie lambda jest używany do określenia pracy, która ma wykonać zadanie.</span><span class="sxs-lookup"><span data-stu-id="67fe9-106">Most commonly, a lambda expression is used to specify the work that the task is to perform.</span></span>  
  
 <span data-ttu-id="67fe9-107"><xref:System.Threading.Tasks.Task%601> wystąpienia można tworzyć różne sposoby.</span><span class="sxs-lookup"><span data-stu-id="67fe9-107"><xref:System.Threading.Tasks.Task%601> instances may be created in a variety of ways.</span></span> <span data-ttu-id="67fe9-108">Najbardziej typowym podejściem, która jest dostępna, począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], wywołaj statyczną jest <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> lub <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="67fe9-108">The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="67fe9-109">Metody te zapewniają prosty sposób, aby uruchomić zadanie przy użyciu wartości domyślnych i bez uzyskiwania dodatkowych parametrów.</span><span class="sxs-lookup"><span data-stu-id="67fe9-109">These methods provide a simple way to start a task by using default values and without acquiring additional parameters.</span></span> <span data-ttu-id="67fe9-110">W poniższym przykładzie użyto <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> metodę, aby uruchomić zadanie, które w pętli, a następnie wyświetla liczbę iteracji pętli:</span><span class="sxs-lookup"><span data-stu-id="67fe9-110">The following example uses the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> method to start a task that loops and then displays the number of loop iterations:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task\`1#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1/cs/run1.cs#6)]
 [!code-vb[System.Threading.Tasks.Task\`1#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1/vb/run1.vb#6)]  
  
 <span data-ttu-id="67fe9-111">Zamiast i najbardziej popularny sposób, aby uruchomić zadanie w ramach [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], jest wywołanie statycznej <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> lub <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="67fe9-111">An alternative, and the most common way to start a task in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is to call the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="67fe9-112"><xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> Właściwość zwraca <xref:System.Threading.Tasks.TaskFactory> obiektu, a <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> właściwość zwraca <xref:System.Threading.Tasks.TaskFactory%601> obiektu.</span><span class="sxs-lookup"><span data-stu-id="67fe9-112">The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> property returns a <xref:System.Threading.Tasks.TaskFactory> object, and the <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> property returns a <xref:System.Threading.Tasks.TaskFactory%601> object.</span></span> <span data-ttu-id="67fe9-113">Przeciążenia ich `StartNew` metody pozwalają przekazać argumenty, Zdefiniuj opcje tworzenia zadań i określanie harmonogramu zadań.</span><span class="sxs-lookup"><span data-stu-id="67fe9-113">Overloads of their `StartNew` method let you pass arguments, define task creation options, and specify a task scheduler.</span></span> <span data-ttu-id="67fe9-114">W poniższym przykładzie użyto <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=nameWithType> metodę, aby uruchomić zadanie.</span><span class="sxs-lookup"><span data-stu-id="67fe9-114">The following example uses the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=nameWithType> method to start a task.</span></span> <span data-ttu-id="67fe9-115">Jest funkcjonalnym odpowiednikiem kodu w poprzednim przykładzie.</span><span class="sxs-lookup"><span data-stu-id="67fe9-115">It is functionally equivalent to the code in the previous example.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task\`1#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1/cs/startnew1.cs#7)]
 [!code-vb[System.Threading.Tasks.Task\`1#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1/vb/startnew1.vb#7)]  
  
 <span data-ttu-id="67fe9-116">Aby uzyskać bardziej kompletne przykłady, zobacz [opartego na zadaniach Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).</span><span class="sxs-lookup"><span data-stu-id="67fe9-116">For more complete examples, see [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).</span></span>  
  
 <span data-ttu-id="67fe9-117"><xref:System.Threading.Tasks.Task%601> Również udostępnia konstruktorów, zainicjować zadanie, ale który nie należy planować go do wykonania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-117">The <xref:System.Threading.Tasks.Task%601> class also provides constructors that initialize the task but that do not schedule it for execution.</span></span> <span data-ttu-id="67fe9-118">Ze względu na wydajność <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> i `Task.Factory.StartNew` metody są preferowane mechanizmy służące do tworzenia i planowania zadań obliczeniowych, ale w przypadku scenariuszy, w której muszą być oddzielone zadania tworzeniem i planowaniem Konstruktory mogą być używane i zadania podrzędnego <xref:System.Threading.Tasks.Task.Start%2A> metoda mogą następnie służyć do zaplanowania zadania do wykonania w późniejszym czasie.</span><span class="sxs-lookup"><span data-stu-id="67fe9-118">For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> and `Task.Factory.StartNew` methods are the preferred mechanisms for creating and scheduling computational tasks, but for scenarios where task creation and scheduling must be separated, the constructors may be used, and the task's <xref:System.Threading.Tasks.Task.Start%2A> method may then be used to schedule the task for execution at a later time.</span></span>  
  
 <span data-ttu-id="67fe9-119">Począwszy od aplikacji komputerowych, których platformą docelową [!INCLUDE[net_v46](~/includes/net-v46-md.md)], kultury wątku, który tworzy, a następnie wywołuje zadanie staje się częścią kontekst wątku.</span><span class="sxs-lookup"><span data-stu-id="67fe9-119">Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context.</span></span> <span data-ttu-id="67fe9-120">Niezależnie od bieżącej kultury wątku, na którym zadanie podrzędne jest wykonywane, bieżącej kultury zadania jest kultura wątku wywołującego.</span><span class="sxs-lookup"><span data-stu-id="67fe9-120">That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread.</span></span> <span data-ttu-id="67fe9-121">W przypadku aplikacji przeznaczonych dla wersji programu .NET Framework w wersjach wcześniejszych niż [!INCLUDE[net_v46](~/includes/net-v46-md.md)], kultury zadania jest kulturą wątku, na którym zadanie podrzędne jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="67fe9-121">For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes.</span></span> <span data-ttu-id="67fe9-122">Aby uzyskać więcej informacji, zobacz sekcję "Kultury i opartego na zadaniach asynchronicznej operacji" w <xref:System.Globalization.CultureInfo> tematu.</span><span class="sxs-lookup"><span data-stu-id="67fe9-122">For more information, see the "Culture and task-based asynchronous operations" section in the <xref:System.Globalization.CultureInfo> topic.</span></span> <span data-ttu-id="67fe9-123">Należy zwrócić uwagę na to, czy Store apps wykonaj środowiska wykonawczego Windows w ustawiania i pobierania domyślnej kultury.</span><span class="sxs-lookup"><span data-stu-id="67fe9-123">Note that Store apps follow the Windows Runtime in setting and getting the default culture.</span></span>  
  
<span data-ttu-id="67fe9-124">Dla operacji, które nie zwracają wartości, możesz użyć <xref:System.Threading.Tasks.Task> klasy.</span><span class="sxs-lookup"><span data-stu-id="67fe9-124">For operations that do not return a value, you use the <xref:System.Threading.Tasks.Task> class.</span></span> <span data-ttu-id="67fe9-125">Jeśli tworzysz oprogramowanie przy użyciu języka C# 7, uproszczone zadanie, które jest typem wartości, a nie typu odwołania, użyj <xref:System.Threading.Tasks.ValueTask%601?displayProperty=nameWithType> struktury; jest obsługiwana, począwszy od C# 7.</span><span class="sxs-lookup"><span data-stu-id="67fe9-125">If you're developing with C# 7, for a more lightweight task that is a value type rather than a reference type, use the <xref:System.Threading.Tasks.ValueTask%601?displayProperty=nameWithType> structure; it is supported starting with C# 7.</span></span> 
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="67fe9-126">Wszystkie elementy członkowskie <see cref="T:System.Threading.Tasks.Task`1" />, z wyjątkiem <see cref="M:System.Threading.Tasks.Task.Dispose" />, są odporne na wątki i mogą być używane jednocześnie z wielu wątków.</span>
      <span class="sxs-lookup">
        <span data-stu-id="67fe9-126">All members of <see cref="T:System.Threading.Tasks.Task`1" />, except for <see cref="M:System.Threading.Tasks.Task.Dispose" />, are thread-safe and may be used from multiple threads concurrently.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Tasks.Task" />
    <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
      <span data-ttu-id="67fe9-127">Biblioteka zadań równoległych (TPL)</span>
      <span class="sxs-lookup">
        <span data-stu-id="67fe9-127">Task Parallel Library (TPL)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
      <span data-ttu-id="67fe9-128">Programowanie asynchroniczne oparte na zadanie</span>
      <span class="sxs-lookup">
        <span data-stu-id="67fe9-128">Task-based Asynchronous Programming</span>
      </span>
    </related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364">
      <span data-ttu-id="67fe9-129">Przykłady dotyczące programowania równoległego za pomocą programu .NET Framework</span>
      <span class="sxs-lookup">
        <span data-stu-id="67fe9-129">Samples for Parallel Programming with the .NET Framework</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="67fe9-130">Inicjuje nowe wystąpienie <see cref="T:System.Threading.Tasks.Task`1" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-130">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (function As Func(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Func&lt;TResult&gt; ^ function);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task&lt;'Result&gt; : Func&lt;'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="new System.Threading.Tasks.Task&lt;'Result&gt; function" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="67fe9-131">Delegat, który reprezentuje kod do wykonania w zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-131">The delegate that represents the code to execute in the task.</span>
          </span>
          <span data-ttu-id="67fe9-132">Gdy funkcja została ukończona, zadanie <see cref="P:System.Threading.Tasks.Task`1.Result" /> będzie można ustawić właściwości zwracają wartość wyniku funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-132">When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-133">Inicjuje nowe wystąpienie <see cref="T:System.Threading.Tasks.Task`1" /> przy użyciu określonej funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-133">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-134">Zamiast wywoływania tego konstruktora najbardziej popularny sposób do utworzenia wystąpienia <xref:System.Threading.Tasks.Task%601> obiektu, a następnie uruchom zadanie to przez wywołanie statycznego <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> i <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="67fe9-134">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> and <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="67fe9-135">Tylko korzyści oferowane przez ten konstruktor jest możliwość tworzenia wystąpienia obiektu oddzielić od wywołania zadania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-135">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67fe9-136">Poniższy przykład oblicza przybliżoną liczbę słów w pliki tekstowe, które reprezentuje opublikowane książki.</span><span class="sxs-lookup"><span data-stu-id="67fe9-136">The following example counts the approximate number of words in text files that represent published books.</span></span> <span data-ttu-id="67fe9-137">Każde zadanie jest odpowiedzialna za otwarcie pliku, asynchronicznego odczytywania jego całą zawartość i oblicza liczbę wyrazów za pomocą wyrażenia regularnego.</span><span class="sxs-lookup"><span data-stu-id="67fe9-137">Each task is responsible for opening a file, reading its entire contents asynchronously, and calculating the word count by using a regular expression.</span></span> <span data-ttu-id="67fe9-138"><xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType> Metoda jest wywoływana, aby upewnić się, że wszystkie zadania zostały ukończone przed wyświetleniem wyrazów każdej książki do konsoli.</span><span class="sxs-lookup"><span data-stu-id="67fe9-138">The <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType> method is called to ensure that all tasks have completed before displaying the word count of each book to the console.</span></span>  
  
 <span data-ttu-id="67fe9-139">Podczas tworzenia wystąpienia obiektu jest oddzielony od wykonania obiektu, w tym przykładzie, tak, aby przykład można upewnij się, że każdy plik istnieje.</span><span class="sxs-lookup"><span data-stu-id="67fe9-139">Object instantiation is separated from object execution in this example so that the example can ensure that each file exists.</span></span> <span data-ttu-id="67fe9-140">Jeśli tak się nie stanie, wyświetla nazwę brakujący plik.</span><span class="sxs-lookup"><span data-stu-id="67fe9-140">If they do not,  it displays the name of the missing file.</span></span> <span data-ttu-id="67fe9-141">W przeciwnym razie wywoływanych przez nią <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> metodę do uruchomienia poszczególnych zadań.</span><span class="sxs-lookup"><span data-stu-id="67fe9-141">Otherwise, it calls the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> method to launch each task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/run3.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/run3.vb#2)]  
  
 <span data-ttu-id="67fe9-142">Definicję wzorca wyrażenia regularnego `\p{P}*\s+` dopasowuje zero, jeden lub więcej znaków interpunkcyjnych, w którym następuje co najmniej jeden znak odstępu.</span><span class="sxs-lookup"><span data-stu-id="67fe9-142">The regular expression pattern `\p{P}*\s+` matches zero, one, or more punctuation characters followed by one or more white-space characters.</span></span> <span data-ttu-id="67fe9-143">Przyjęto założenie, że łączna liczba dopasowań jest równe przybliżony wyrazów.</span><span class="sxs-lookup"><span data-stu-id="67fe9-143">It assumes that the total number of matches equals the approximate word count.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-144">
            <paramref name="function" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-144">The <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-145">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-145">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-146">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-146">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Func&lt;object,TResult&gt; function, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;object, !TResult&gt; function, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (function As Func(Of Object, TResult), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task&lt;'Result&gt; : Func&lt;obj, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="new System.Threading.Tasks.Task&lt;'Result&gt; (function, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="67fe9-147">Delegat, który reprezentuje kod do wykonania w zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-147">The delegate that represents the code to execute in the task.</span>
          </span>
          <span data-ttu-id="67fe9-148">Gdy funkcja została ukończona, zadanie <see cref="P:System.Threading.Tasks.Task`1.Result" /> będzie można ustawić właściwości zwracają wartość wyniku funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-148">When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="67fe9-149">Obiekt reprezentujący dane do użycia przez akcję.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-149">An object representing data to be used by the action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-150">Inicjuje nowe wystąpienie <see cref="T:System.Threading.Tasks.Task`1" /> przy użyciu określonej funkcji i stanu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-150">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function and state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-151">Zamiast wywoływania tego konstruktora najbardziej popularny sposób do utworzenia wystąpienia <xref:System.Threading.Tasks.Task%601> obiektu, a następnie uruchom zadanie to przez wywołanie statycznego <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="67fe9-151">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="67fe9-152">Tylko korzyści oferowane przez ten konstruktor jest możliwość tworzenia wystąpienia obiektu oddzielić od wywołania zadania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-152">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-153">
            <paramref name="function" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-153">The <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-154">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-154">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-155">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-155">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task&lt;'Result&gt; : Func&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="new System.Threading.Tasks.Task&lt;'Result&gt; (function, cancellationToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="67fe9-156">Delegat, który reprezentuje kod do wykonania w zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-156">The delegate that represents the code to execute in the task.</span>
          </span>
          <span data-ttu-id="67fe9-157">Gdy funkcja została ukończona, zadanie <see cref="P:System.Threading.Tasks.Task`1.Result" /> będzie można ustawić właściwości zwracają wartość wyniku funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-157">When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="67fe9-158">
            <see cref="T:System.Threading.CancellationToken" /> Ma być przypisane do tego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-158">The <see cref="T:System.Threading.CancellationToken" /> to be assigned to this task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-159">Inicjuje nowe wystąpienie <see cref="T:System.Threading.Tasks.Task`1" /> przy użyciu określonej funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-159">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-160">Zamiast wywoływania tego konstruktora najbardziej popularny sposób do utworzenia wystąpienia <xref:System.Threading.Tasks.Task%601> obiektu, a następnie uruchom zadanie to przez wywołanie statycznego <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> i <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="67fe9-160">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> and <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="67fe9-161">Tylko korzyści oferowane przez ten konstruktor jest możliwość tworzenia wystąpienia obiektu oddzielić od wywołania zadania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-161">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-162">
            <see cref="T:System.Threading.CancellationTokenSource" /> Utworzonego <paramref name="cancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-162">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-163">
            <paramref name="function" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-163">The <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-164">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-164">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-165">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-165">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Func&lt;TResult&gt; function, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (function As Func(Of TResult), creationOptions As TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Func&lt;TResult&gt; ^ function, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task&lt;'Result&gt; : Func&lt;'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="new System.Threading.Tasks.Task&lt;'Result&gt; (function, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="67fe9-166">Delegat, który reprezentuje kod do wykonania w zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-166">The delegate that represents the code to execute in the task.</span>
          </span>
          <span data-ttu-id="67fe9-167">Gdy funkcja została ukończona, zadanie <see cref="P:System.Threading.Tasks.Task`1.Result" /> będzie można ustawić właściwości zwracają wartość wyniku funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-167">When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="67fe9-168">
            <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> Służące do dostosowywania zachowania zadania podrzędnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-168">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-169">Inicjuje nowe wystąpienie <see cref="T:System.Threading.Tasks.Task`1" /> z określonymi opcjami funkcji i tworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-169">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function and creation options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-170">Zamiast wywoływania tego konstruktora najbardziej popularny sposób do utworzenia wystąpienia <xref:System.Threading.Tasks.Task%601> obiektu, a następnie uruchom zadanie to przez wywołanie statycznego <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="67fe9-170">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="67fe9-171">Tylko korzyści oferowane przez ten konstruktor jest możliwość tworzenia wystąpienia obiektu oddzielić od wywołania zadania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-171">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="67fe9-172">
            <paramref name="creationOptions" /> Argument określa nieprawidłową wartość dla <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-172">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-173">
            <paramref name="function" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-173">The <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-174">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-174">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-175">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-175">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task&lt;'Result&gt; : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="new System.Threading.Tasks.Task&lt;'Result&gt; (function, state, cancellationToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="67fe9-176">Delegat, który reprezentuje kod do wykonania w zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-176">The delegate that represents the code to execute in the task.</span>
          </span>
          <span data-ttu-id="67fe9-177">Gdy funkcja została ukończona, zadanie <see cref="P:System.Threading.Tasks.Task`1.Result" /> będzie można ustawić właściwości zwracają wartość wyniku funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-177">When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="67fe9-178">Obiekt reprezentujący dane do użycia przez funkcję.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-178">An object representing data to be used by the function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="67fe9-179">
            <see cref="T:System.Threading.CancellationToken" /> Ma być przypisane do nowego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-179">The <see cref="T:System.Threading.CancellationToken" /> to be assigned to the new task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-180">Inicjuje nowe wystąpienie <see cref="T:System.Threading.Tasks.Task`1" /> przy użyciu określonej akcji, stanu i opcje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-180">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-181">Zamiast wywoływania tego konstruktora najbardziej popularny sposób do utworzenia wystąpienia <xref:System.Threading.Tasks.Task%601> obiektu, a następnie uruchom zadanie to przez wywołanie statycznego <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="67fe9-181">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="67fe9-182">Tylko korzyści oferowane przez ten konstruktor jest możliwość tworzenia wystąpienia obiektu oddzielić od wywołania zadania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-182">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-183">
            <see cref="T:System.Threading.CancellationTokenSource" /> Utworzonego <paramref name="cancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-183">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-184">
            <paramref name="function" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-184">The <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-185">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-185">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-186">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-186">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Func&lt;object,TResult&gt; function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task&lt;'Result&gt; : Func&lt;obj, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="new System.Threading.Tasks.Task&lt;'Result&gt; (function, state, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="67fe9-187">Delegat, który reprezentuje kod do wykonania w zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-187">The delegate that represents the code to execute in the task.</span>
          </span>
          <span data-ttu-id="67fe9-188">Gdy funkcja została ukończona, zadanie <see cref="P:System.Threading.Tasks.Task`1.Result" /> będzie można ustawić właściwości zwracają wartość wyniku funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-188">When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="67fe9-189">Obiekt reprezentujący dane do użycia przez funkcję.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-189">An object representing data to be used by the function.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="67fe9-190">
            <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> Służące do dostosowywania zachowania zadania podrzędnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-190">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-191">Inicjuje nowe wystąpienie <see cref="T:System.Threading.Tasks.Task`1" /> przy użyciu określonej akcji, stanu i opcje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-191">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-192">Zamiast wywoływania tego konstruktora najbardziej popularny sposób do utworzenia wystąpienia <xref:System.Threading.Tasks.Task%601> obiektu, a następnie uruchom zadanie to przez wywołanie statycznego <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="67fe9-192">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="67fe9-193">Tylko korzyści oferowane przez ten konstruktor jest możliwość tworzenia wystąpienia obiektu oddzielić od wywołania zadania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-193">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="67fe9-194">
            <paramref name="creationOptions" /> Argument określa nieprawidłową wartość dla <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-194">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-195">
            <paramref name="function" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-195">The <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-196">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-196">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-197">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-197">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task&lt;'Result&gt; : Func&lt;'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="new System.Threading.Tasks.Task&lt;'Result&gt; (function, cancellationToken, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="67fe9-198">Delegat, który reprezentuje kod do wykonania w zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-198">The delegate that represents the code to execute in the task.</span>
          </span>
          <span data-ttu-id="67fe9-199">Gdy funkcja została ukończona, zadanie <see cref="P:System.Threading.Tasks.Task`1.Result" /> będzie można ustawić właściwości zwracają wartość wyniku funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-199">When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="67fe9-200">
            <see cref="T:System.Threading.CancellationToken" /> , Zostanie przypisany do nowego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-200">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="67fe9-201">
            <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> Służące do dostosowywania zachowania zadania podrzędnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-201">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-202">Inicjuje nowe wystąpienie <see cref="T:System.Threading.Tasks.Task`1" /> z określonymi opcjami funkcji i tworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-202">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function and creation options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-203">Zamiast wywoływania tego konstruktora najbardziej popularny sposób do utworzenia wystąpienia <xref:System.Threading.Tasks.Task%601> obiektu, a następnie uruchom zadanie to przez wywołanie statycznego <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="67fe9-203">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="67fe9-204">Tylko korzyści oferowane przez ten konstruktor jest możliwość tworzenia wystąpienia obiektu oddzielić od wywołania zadania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-204">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-205">
            <see cref="T:System.Threading.CancellationTokenSource" /> Utworzonego <paramref name="cancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-205">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="67fe9-206">
            <paramref name="creationOptions" /> Argument określa nieprawidłową wartość dla <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-206">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-207">
            <paramref name="function" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-207">The <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-208">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-208">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-209">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-209">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task&lt;'Result&gt; : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="new System.Threading.Tasks.Task&lt;'Result&gt; (function, state, cancellationToken, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="67fe9-210">Delegat, który reprezentuje kod do wykonania w zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-210">The delegate that represents the code to execute in the task.</span>
          </span>
          <span data-ttu-id="67fe9-211">Gdy funkcja została ukończona, zadanie <see cref="P:System.Threading.Tasks.Task`1.Result" /> będzie można ustawić właściwości zwracają wartość wyniku funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-211">When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="67fe9-212">Obiekt reprezentujący dane do użycia przez funkcję.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-212">An object representing data to be used by the function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="67fe9-213">
            <see cref="T:System.Threading.CancellationToken" /> Ma być przypisane do nowego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-213">The <see cref="T:System.Threading.CancellationToken" /> to be assigned to the new task.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="67fe9-214">
            <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> Służące do dostosowywania zachowania zadania podrzędnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-214">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-215">Inicjuje nowe wystąpienie <see cref="T:System.Threading.Tasks.Task`1" /> przy użyciu określonej akcji, stanu i opcje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-215">Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-216">Zamiast wywoływania tego konstruktora najbardziej popularny sposób do utworzenia wystąpienia <xref:System.Threading.Tasks.Task%601> obiektu, a następnie uruchom zadanie to przez wywołanie statycznego <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="67fe9-216">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="67fe9-217">Tylko korzyści oferowane przez ten konstruktor jest możliwość tworzenia wystąpienia obiektu oddzielić od wywołania zadania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-217">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-218">
            <see cref="T:System.Threading.CancellationTokenSource" /> Utworzonego <paramref name="cancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-218">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="67fe9-219">
            <paramref name="creationOptions" /> Argument określa nieprawidłową wartość dla <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-219">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-220">
            <paramref name="function" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-220">The <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-221">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-221">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-222">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-222">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ConfigureAwait">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.ConfiguredTaskAwaitable&lt;TResult&gt; ConfigureAwait (bool continueOnCapturedContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1&lt;!TResult&gt; ConfigureAwait(bool continueOnCapturedContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConfigureAwait (continueOnCapturedContext As Boolean) As ConfiguredTaskAwaitable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::ConfiguredTaskAwaitable&lt;TResult&gt; ConfigureAwait(bool continueOnCapturedContext);" />
      <MemberSignature Language="F#" Value="override this.ConfigureAwait : bool -&gt; System.Runtime.CompilerServices.ConfiguredTaskAwaitable&lt;'Result&gt;" Usage="task.ConfigureAwait continueOnCapturedContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredTaskAwaitable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continueOnCapturedContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="continueOnCapturedContext">
          <span data-ttu-id="67fe9-223">wartość true, aby kierować kontynuacji powrót do oryginalnego kontekstu, które są przechwytywane; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-223">true to attempt to marshal the continuation back to the original context captured; otherwise, false.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-224">Konfiguruje awaiter umożliwia to await <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-224">Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-225">Obiekt, który umożliwia await tego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-225">An object used to await this task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWith">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="67fe9-226">Tworzy zadanie kontynuacji, który jest wykonywany po zakończeniu innego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-226">Creates a continuation task that executes when another task completes.</span>
          </span>
        </summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-227">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-227">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-228">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-228">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-229">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-229">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task(Of TResult))) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith continuationAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="67fe9-230">Działanie, aby uruchamiać, gdy zadanie poprzedzające <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-230">An action to run when the antecedent <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="67fe9-231">Po uruchomieniu delegata zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-231">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-232">Tworzy kontynuację, która wykonuje asynchronicznie, po zakończeniu zadania docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-232">Creates a continuation that executes asynchronously when the target task completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-233">Nowe zadanie kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-233">A new continuation task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-234">Zwrócony <xref:System.Threading.Tasks.Task> będzie nie być zaplanowane do wykonania, dopóki nie zakończy się bieżące zadanie, czy zostanie zakończona z powodu uruchomionych ukończone pomyślnie, powodujący błąd z powodu nieobsługiwanego wyjątku lub wcześnie zakończone z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-234">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67fe9-235">Poniższy przykład tworzy zadanie poprzedzające używa nazwanego sitem Eratostenesa do obliczania liczb pierwszych między 1 a wartością wprowadzonej przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="67fe9-235">The following example creates an antecedent task that uses the Sieve of Eratosthenes to calculate the prime numbers between 1 and a value entered by the user.</span></span> <span data-ttu-id="67fe9-236">Tablica jest używana do przechowywania informacji na temat liczby pierwsze.</span><span class="sxs-lookup"><span data-stu-id="67fe9-236">An array is used to hold information about the prime numbers.</span></span> <span data-ttu-id="67fe9-237">Indeks tablicy reprezentuje liczbę, a wartość elementu wskazuje, czy ta liczba jest złożony (jego wartość wynosi `true`) lub zainicjowanie (jego wartość wynosi `false`).</span><span class="sxs-lookup"><span data-stu-id="67fe9-237">The array index represents the number, and the element's value indicates whether that number is composite (its value is `true`) or prime (its value is `false`).</span></span> <span data-ttu-id="67fe9-238">To zadanie jest następnie przekazywany do kontynuacji zadania, który jest odpowiedzialny za wyodrębnianie liczby pierwsze z tablicy liczb całkowitych i wyświetlania ich.</span><span class="sxs-lookup"><span data-stu-id="67fe9-238">This task is then passed to a continuation task, which is responsible for extracting the prime numbers from the integer array and displaying them.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task\`1.ContinueWith#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/cs/continue2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task\`1.ContinueWith#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/vb/continue2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-239">
            <see cref="T:System.Threading.Tasks.Task`1" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-239">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-240">
            <paramref name="continuationAction" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-240">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-241">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-241">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-242">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-242">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-243">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-243">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object&gt; continuationAction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object&gt; continuationAction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task(Of TResult), Object), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="67fe9-244">Działanie, aby uruchamiać, gdy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-244">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="67fe9-245">Po uruchomieniu delegata jest przekazywane jako argumenty ukończonego zadania i obiektu stanu dostarczonych przez obiekt wywołujący.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-245">When run, the delegate is   passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="67fe9-246">Obiekt reprezentujący dane do użycia przez akcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-246">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-247">Tworzy kontynuację, że informacje o stanie sukces, który jest wykonywany podczas docelowy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-247">Creates a continuation that that is passed state information and that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-248">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-248">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-249">Zwrócony <xref:System.Threading.Tasks.Task> będzie nie być zaplanowane do wykonania, dopóki nie zakończy się bieżące zadanie, czy zostanie zakończona z powodu uruchomionych ukończone pomyślnie, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykania się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-249">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67fe9-250">Poniższy przykład tworzy zadanie, które jest przekazywany całkowitą od 2 do 20 i zwraca tablicę zawierającą wykładniki pierwszych dziesięciu (od n<sup>1</sup> n<sup>10</sup>) tego numeru.</span><span class="sxs-lookup"><span data-stu-id="67fe9-250">The following example creates a task that is passed an integer between 2 and 20 and returns an array that contains the first ten exponents (from n<sup>1</sup> to n<sup>10</sup>) of that number.</span></span> <span data-ttu-id="67fe9-251">Zadanie kontynuacji jest odpowiedzialny za wyświetlanie wykładników.</span><span class="sxs-lookup"><span data-stu-id="67fe9-251">A continuation task is then responsible for displaying the exponents.</span></span> <span data-ttu-id="67fe9-252">Jest przekazywana zadania poprzedzającego i oryginalny numer którego wykładniki generuje zadania poprzedzającego.</span><span class="sxs-lookup"><span data-stu-id="67fe9-252">It is passed both the antecedent and the original number whose exponents the antecedent generates.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task\`1.ContinueWith#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/cs/continuewith3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task\`1.ContinueWith#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/vb/continuewith3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-253">
            <paramref name="continuationAction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-253">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-254">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-254">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="67fe9-255">Działanie, aby uruchamiać, gdy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-255">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="67fe9-256">Po uruchomieniu delegata jest przekazywany ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-256">When run, the delegate is passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="67fe9-257">Token anulowania, który jest przekazywany do nowego zadania kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-257">The cancellation token that is passed to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-258">Tworzy cancelable kontynuacja, która wykonuje asynchronicznie po docelowej <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-258">Creates a cancelable continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-259">Nowe zadanie kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-259">A new continuation task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-260">Zwrócony <xref:System.Threading.Tasks.Task> będzie nie być zaplanowane do wykonania, dopóki nie zakończy się bieżące zadanie, czy zostanie zakończona z powodu uruchomionych ukończone pomyślnie, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykania się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-260">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67fe9-261">Poniższy przykład tworzy zadanie poprzedzające używa nazwanego sitem Eratostenesa do obliczania liczb pierwszych między 1 a wartością wprowadzonej przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="67fe9-261">The following example creates an antecedent task that uses the Sieve of Eratosthenes to calculate the prime numbers between 1 and a value entered by the user.</span></span> <span data-ttu-id="67fe9-262">Tablica jest używana do przechowywania informacji na temat liczby pierwsze.</span><span class="sxs-lookup"><span data-stu-id="67fe9-262">An array is used to hold information about the prime numbers.</span></span> <span data-ttu-id="67fe9-263">Indeks tablicy reprezentuje liczbę, a wartość elementu wskazuje, czy ta liczba jest złożony (jego wartość wynosi `true`) lub zainicjowanie (jego wartość wynosi `false`).</span><span class="sxs-lookup"><span data-stu-id="67fe9-263">The array index represents the number, and the element's value indicates whether that number is composite (its value is `true`) or prime (its value is `false`).</span></span> <span data-ttu-id="67fe9-264">To zadanie jest następnie przekazywany do kontynuacji zadania, który jest odpowiedzialny za wyodrębnianie liczby pierwsze z tablicy liczb całkowitych i wyświetlania ich.</span><span class="sxs-lookup"><span data-stu-id="67fe9-264">This task is then passed to a continuation task, which is responsible for extracting the prime numbers from the integer array and displaying them.</span></span>  
  
 <span data-ttu-id="67fe9-265">Token anulowania jest przekazywany do zadania poprzedzającego i zadanie kontynuacji.</span><span class="sxs-lookup"><span data-stu-id="67fe9-265">A cancellation token is passed to both the antecedent and the continuation task.</span></span> <span data-ttu-id="67fe9-266">A <xref:System.Timers.Timer?displayProperty=nameWithType> obiekt jest używany do definiowania limit czasu wynoszący 100 milisekund.</span><span class="sxs-lookup"><span data-stu-id="67fe9-266">A <xref:System.Timers.Timer?displayProperty=nameWithType> object is used to define a timeout value of 100 milliseconds.</span></span> <span data-ttu-id="67fe9-267">Jeśli zdarzenie jest generowane, <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> metoda jest wywoływana, a token anulowania jest używany do żądania anulowania zadań.</span><span class="sxs-lookup"><span data-stu-id="67fe9-267">If the event fires, the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method is called, and the cancellation token is used to request cancellation of the tasks.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task\`1.ContinueWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/cs/continue1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task\`1.ContinueWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/vb/continue1.vb#1)]  
  
 <span data-ttu-id="67fe9-268">Zazwyczaj podanie wartości około 100 000 powoduje, że interwał limitu czasu wygaśnięcia i <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> wyzwolenie zdarzenia i żądania anulowania, należy ustawić.</span><span class="sxs-lookup"><span data-stu-id="67fe9-268">Typically, supplying a value of about 100,000 causes the timeout interval to expire and the <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event to fire, and the cancellation request to be set.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-269">
            <see cref="T:System.Threading.Tasks.Task`1" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-269">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
          <span data-ttu-id="67fe9-270">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-270">-or-</span>
          </span>
          <span data-ttu-id="67fe9-271">
            <see cref="T:System.Threading.CancellationTokenSource" /> Utworzonego <paramref name="cancellationToken" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-271">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-272">
            <paramref name="continuationAction" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-272">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-273">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-273">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-274">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-274">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-275">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-275">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task(Of TResult)), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="67fe9-276">Zgodnie z warunek określony w akcji <c>continuationOptions</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-276">An action to according the condition specified in <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="67fe9-277">Po uruchomieniu delegata zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-277">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="67fe9-278">Opcje kiedy kontynuacja jest zaplanowana i jak działa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-278">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="67fe9-279">Obejmuje to kryteria, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, a także opcje wykonywania, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-279">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-280">Tworzy kontynuację, która jest wykonywana zgodnie z warunek określony w <paramref name="continuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-280">Creates a continuation that executes according the condition specified in <paramref name="continuationOptions" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-281">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-281">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-282">Zwrócony <xref:System.Threading.Tasks.Task> nie zostaną zaplanowane do wykonania, dopóki nie zakończy się bieżącego zadania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-282">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="67fe9-283">Jeśli określone kryteria kontynuacji za pośrednictwem `continuationOptions` parametru nie są spełnione, zostaną anulowane zadanie kontynuacji zamiast zaplanowane.</span><span class="sxs-lookup"><span data-stu-id="67fe9-283">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 <span data-ttu-id="67fe9-284">Aby uzyskać więcej informacji, zobacz [tworzenie łańcuchów zadań przy użyciu zadań kontynuacji](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span><span class="sxs-lookup"><span data-stu-id="67fe9-284">For more information, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-285">
            <see cref="T:System.Threading.Tasks.Task`1" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-285">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-286">
            <paramref name="continuationAction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-286">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="67fe9-287">
            <paramref name="continuationOptions" /> Argument określa nieprawidłową wartość dla <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-287">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-288">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-288">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-289">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-289">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-290">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-290">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; continuationAction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;&gt; continuationAction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task(Of TResult)), scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="67fe9-291">Działanie, aby uruchamiać, gdy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-291">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="67fe9-292">Po uruchomieniu delegata zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-292">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="67fe9-293">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Do skojarzenia z zadaniem kontynuacji i wykorzystać do jego realizacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-293">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-294">Tworzy kontynuację, która wykonuje asynchronicznie po docelowej <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-294">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-295">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-295">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-296">Zwrócony <xref:System.Threading.Tasks.Task> będzie nie być zaplanowane do wykonania, dopóki nie zakończy się bieżące zadanie, czy zostanie zakończona z powodu uruchomionych ukończone pomyślnie, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykania się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-296">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-297">
            <see cref="T:System.Threading.Tasks.Task`1" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-297">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-298">
            <paramref name="continuationAction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-298">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
          <span data-ttu-id="67fe9-299">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-299">-or-</span>
          </span>
          <span data-ttu-id="67fe9-300">
            <paramref name="scheduler" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-300">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-301">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-301">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-302">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-302">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-303">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-303">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="67fe9-304">Działanie, aby uruchamiać, gdy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-304">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="67fe9-305">Po uruchomieniu delegata zostaną przekazane ukończonego zadania i obiektu stanu dostarczonych przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-305">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="67fe9-306">Obiekt reprezentujący dane do użycia przez akcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-306">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="67fe9-307">
            <see cref="T:System.Threading.CancellationToken" /> , Zostanie przypisany do nowego zadania kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-307">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-308">Tworzy kontynuację, który jest wykonywany, gdy element docelowy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-308">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-309">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-309">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-310">Zwrócony <xref:System.Threading.Tasks.Task> będzie nie być zaplanowane do wykonania, dopóki nie zakończy się bieżące zadanie, czy zostanie zakończona z powodu uruchomionych ukończone pomyślnie, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykania się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-310">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-311">
            <paramref name="continuationAction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-311">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-312">Podany <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-312">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-313">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-313">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object&gt; continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object&gt; continuationAction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task(Of TResult), Object), state As Object, continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj&gt; * obj * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="67fe9-314">Działanie, aby uruchamiać, gdy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-314">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="67fe9-315">Po uruchomieniu delegata zostaną przekazane ukończonego zadania i obiektu stanu dostarczonych przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-315">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="67fe9-316">Obiekt reprezentujący dane do użycia przez akcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-316">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="67fe9-317">Opcje kiedy kontynuacja jest zaplanowana i jak działa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-317">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="67fe9-318">Obejmuje to kryteria, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, a także opcje wykonywania, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-318">This includes criteria, such  as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-319">Tworzy kontynuację, który jest wykonywany, gdy element docelowy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-319">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-320">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-320">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-321">Zwrócony <xref:System.Threading.Tasks.Task> nie zostaną zaplanowane do wykonania, dopóki nie zakończy się bieżącego zadania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-321">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="67fe9-322">Jeśli określone kryteria kontynuacji za pośrednictwem `continuationOptions` parametru nie są spełnione, zostaną anulowane zadanie kontynuacji zamiast zaplanowane.</span><span class="sxs-lookup"><span data-stu-id="67fe9-322">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-323">
            <paramref name="continuationAction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-323">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="67fe9-324">
            <paramref name="continuationOptions" /> Argument określa nieprawidłową wartość dla <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-324">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-325">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-325">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object&gt; continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object&gt; continuationAction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task(Of TResult), Object), state As Object, scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj&gt; * obj * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="67fe9-326">Działanie, aby uruchamiać, gdy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-326">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="67fe9-327">Po uruchomieniu delegata zostaną przekazane ukończonego zadania i obiektu stanu dostarczonych przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-327">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="67fe9-328">Obiekt reprezentujący dane do użycia przez akcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-328">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="67fe9-329">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Do skojarzenia z zadaniem kontynuacji i wykorzystać do jego realizacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-329">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-330">Tworzy kontynuację, który jest wykonywany, gdy element docelowy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-330">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-331">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-331">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-332">Zwrócony <xref:System.Threading.Tasks.Task> będzie nie być zaplanowane do wykonania, dopóki nie zakończy się bieżące zadanie, czy zostanie zakończona z powodu uruchomionych ukończone pomyślnie, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykania się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-332">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-333">
            <paramref name="scheduler" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-333">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-334">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-334">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="67fe9-335">Akcje, zgodnie z warunek określony w <c>continuationOptions</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-335">An action to run according the condition specified in <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="67fe9-336">Po uruchomieniu delegata zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-336">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="67fe9-337">
            <see cref="T:System.Threading.CancellationToken" /> , Zostanie przypisany do nowego zadania kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-337">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="67fe9-338">Opcje kiedy kontynuacja jest zaplanowana i jak działa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-338">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="67fe9-339">Obejmuje to kryteria, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, a także opcje wykonywania, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-339">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="67fe9-340">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Do skojarzenia z zadaniem kontynuacji i wykorzystać do jego realizacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-340">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-341">Tworzy kontynuację, która jest wykonywana zgodnie z warunek określony w <paramref name="continuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-341">Creates a continuation that executes according the condition specified in <paramref name="continuationOptions" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-342">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-342">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-343">Zwrócony <xref:System.Threading.Tasks.Task> nie zostaną zaplanowane do wykonania, dopóki nie zakończy się bieżącego zadania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-343">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="67fe9-344">Jeśli kryteria określone przez `continuationOptions` parametru nie są spełnione, zostaną anulowane zadanie kontynuacji zamiast zaplanowane.</span><span class="sxs-lookup"><span data-stu-id="67fe9-344">If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span> <span data-ttu-id="67fe9-345">Aby uzyskać więcej informacji, zobacz [tworzenie łańcuchów zadań przy użyciu zadań kontynuacji](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span><span class="sxs-lookup"><span data-stu-id="67fe9-345">For more information, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-346">
            <see cref="T:System.Threading.Tasks.Task`1" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-346">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
          <span data-ttu-id="67fe9-347">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-347">-or-</span>
          </span>
          <span data-ttu-id="67fe9-348">
            <see cref="T:System.Threading.CancellationTokenSource" /> Utworzonego <paramref name="cancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-348">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-349">
            <paramref name="continuationAction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-349">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
          <span data-ttu-id="67fe9-350">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-350">-or-</span>
          </span>
          <span data-ttu-id="67fe9-351">
            <paramref name="scheduler" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-351">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="67fe9-352">
            <paramref name="continuationOptions" /> Argument określa nieprawidłową wartość dla <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-352">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-353">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-353">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-354">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-354">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-355">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-355">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Action&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="67fe9-356">Działanie, aby uruchamiać, gdy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-356">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="67fe9-357">Po uruchomieniu delegata zostaną przekazane ukończonego zadania i obiektu stanu dostarczonych przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-357">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="67fe9-358">Obiekt reprezentujący dane do użycia przez akcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-358">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="67fe9-359">
            <see cref="T:System.Threading.CancellationToken" /> , Zostanie przypisany do nowego zadania kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-359">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="67fe9-360">Opcje kiedy kontynuacja jest zaplanowana i jak działa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-360">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="67fe9-361">Obejmuje to kryteria, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, a także opcje wykonywania, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-361">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as  well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="67fe9-362">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Do skojarzenia z zadaniem kontynuacji i wykorzystać do jego realizacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-362">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-363">Tworzy kontynuację, który jest wykonywany, gdy element docelowy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-363">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-364">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-364">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-365">Zwrócony <xref:System.Threading.Tasks.Task> nie zostaną zaplanowane do wykonania, dopóki nie zakończy się bieżącego zadania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-365">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed.</span></span> <span data-ttu-id="67fe9-366">Jeśli kryteria określone przez `continuationOptions` parametru nie są spełnione, zostaną anulowane zadanie kontynuacji zamiast zaplanowane.</span><span class="sxs-lookup"><span data-stu-id="67fe9-366">If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-367">
            <paramref name="scheduler" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-367">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="67fe9-368">
            <paramref name="continuationOptions" /> Argument określa nieprawidłową wartość dla <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-368">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-369">Podany <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-369">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-370">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-370">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, !!TNewResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TNewResult) (continuationFunction As Func(Of Task(Of TResult), TNewResult)) As Task(Of TNewResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, TNewResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, 'NewResult&gt; -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith continuationFunction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="67fe9-371">Typ wyniku, generowane przez kontynuacja.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-371">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="67fe9-372">Funkcję, aby uruchamiać, gdy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-372">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="67fe9-373">Po uruchomieniu delegata zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-373">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-374">Tworzy kontynuację, która wykonuje asynchronicznie po docelowej <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-374">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-375">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-375">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-376">Zwrócony <xref:System.Threading.Tasks.Task%601> będzie nie być zaplanowane do wykonania, dopóki nie zakończy się bieżące zadanie, czy zostanie zakończona z powodu uruchomionych ukończone pomyślnie, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykania się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-376">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-377">
            <see cref="T:System.Threading.Tasks.Task`1" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-377">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-378">
            <paramref name="continuationFunction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-378">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-379">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-379">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-380">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-380">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-381">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-381">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object,TNewResult&gt; continuationFunction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object, !!TNewResult&gt; continuationFunction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TNewResult) (continuationFunction As Func(Of Task(Of TResult), Object, TNewResult), state As Object) As Task(Of TNewResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^, TNewResult&gt; ^ continuationFunction, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj, 'NewResult&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object,TNewResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="67fe9-382">Typ wyniku, generowane przez kontynuacja.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-382">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="67fe9-383">Funkcję, aby uruchamiać, gdy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-383">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="67fe9-384">Po uruchomieniu delegata zostaną przekazane ukończonego zadania i obiektu stanu dostarczonych przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-384">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="67fe9-385">Obiekt reprezentujący dane do użycia przez funkcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-385">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-386">Tworzy kontynuację, który jest wykonywany, gdy element docelowy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-386">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-387">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-387">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-388">Zwrócony <xref:System.Threading.Tasks.Task%601> będzie nie być zaplanowane do wykonania, dopóki nie zakończy się bieżące zadanie, czy zostanie zakończona z powodu uruchomionych ukończone pomyślnie, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykania się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-388">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67fe9-389">Poniższy przykład tworzy łańcuch połączonych zadań.</span><span class="sxs-lookup"><span data-stu-id="67fe9-389">The following example creates a chain of continuation tasks.</span></span> <span data-ttu-id="67fe9-390">Każde zadanie zawiera bieżącą godzinę <xref:System.DateTime> obiektu dla argumentu stanu <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%2CSystem.Object%7D%2CSystem.Object%29> metody.</span><span class="sxs-lookup"><span data-stu-id="67fe9-390">Each task provides the current time, a <xref:System.DateTime> object, for the state argument of the <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%2CSystem.Object%7D%2CSystem.Object%29> method.</span></span> <span data-ttu-id="67fe9-391">Każdy <xref:System.DateTime> wartość reprezentuje czas, w którym utworzono zadanie Kontynuuj.</span><span class="sxs-lookup"><span data-stu-id="67fe9-391">Each <xref:System.DateTime> value represents the time at which the continue task is created.</span></span> <span data-ttu-id="67fe9-392">Każde zadanie tworzy jako wynik drugi <xref:System.DateTime> wartość, która reprezentuje czas, w którym zadanie się nie zakończy.</span><span class="sxs-lookup"><span data-stu-id="67fe9-392">Each task produces as its result a second <xref:System.DateTime> value that represents the time at which the task finishes.</span></span> <span data-ttu-id="67fe9-393">Po zakończeniu wszystkich zadań w przykładzie są wyświetlane daty i godziny w których każde zadanie kontynuacji rozpoczyna się i kończy.</span><span class="sxs-lookup"><span data-stu-id="67fe9-393">After all tasks finish, the example displays the date and times at which each continuation task starts and finishes.</span></span>  
  
 [!code-csharp[TPL_ContinuationState#1](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_continuationstate/cs/continuationstate.cs#1)]
 [!code-vb[TPL_ContinuationState#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_continuationstate/vb/continuationstate.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-394">
            <paramref name="continuationFunction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-394">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-395">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-395">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, !!TNewResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, TNewResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, 'NewResult&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="67fe9-396">Typ wyniku, generowane przez kontynuacja.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-396">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="67fe9-397">Funkcję, aby uruchamiać, gdy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-397">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="67fe9-398">Po uruchomieniu delegata zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-398">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="67fe9-399">
            <see cref="T:System.Threading.CancellationToken" /> , Zostanie przypisany do nowego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-399">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-400">Tworzy kontynuację, która wykonuje asynchronicznie po docelowej <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-400">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-401">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-401">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-402">Zwrócony <xref:System.Threading.Tasks.Task%601> będzie nie być zaplanowane do wykonania, dopóki nie zakończy się bieżące zadanie, czy zostanie zakończona z powodu uruchomionych ukończone pomyślnie, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykania się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-402">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-403">
            <see cref="T:System.Threading.Tasks.Task`1" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-403">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
          <span data-ttu-id="67fe9-404">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-404">-or-</span>
          </span>
          <span data-ttu-id="67fe9-405">
            <see cref="T:System.Threading.CancellationTokenSource" /> Utworzonego <paramref name="cancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-405">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-406">
            <paramref name="continuationFunction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-406">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-407">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-407">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-408">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-408">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-409">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-409">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, !!TNewResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TNewResult) (continuationFunction As Func(Of Task(Of TResult), TNewResult), continuationOptions As TaskContinuationOptions) As Task(Of TNewResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, TNewResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, 'NewResult&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="67fe9-410">Typ wyniku, generowane przez kontynuacja.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-410">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="67fe9-411">Funkcja do uruchomienia, zgodnie z warunek określony w <c>continuationOptions</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-411">A function to run according the condition specified in <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="67fe9-412">Po uruchomieniu delegata zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-412">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="67fe9-413">Opcje kiedy kontynuacja jest zaplanowana i jak działa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-413">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="67fe9-414">Obejmuje to kryteria, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, a także opcje wykonywania, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-414">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-415">Tworzy kontynuację, która jest wykonywana zgodnie z warunek określony w <paramref name="continuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-415">Creates a continuation that executes according the condition specified in <paramref name="continuationOptions" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-416">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-416">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-417">Zwrócony <xref:System.Threading.Tasks.Task%601> będzie nie być zaplanowane do wykonania, dopóki nie zakończy się bieżące zadanie, czy zostanie zakończona z powodu uruchomionych ukończone pomyślnie, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykania się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-417">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 <span data-ttu-id="67fe9-418">`continuationFunction`, Po wykonaniu, powinna zwrócić <xref:System.Threading.Tasks.Task%601>...</span><span class="sxs-lookup"><span data-stu-id="67fe9-418">The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>..</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-419">
            <see cref="T:System.Threading.Tasks.Task`1" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-419">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-420">
            <paramref name="continuationFunction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-420">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="67fe9-421">
            <paramref name="continuationOptions" /> Argument określa nieprawidłową wartość dla <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-421">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-422">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-422">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-423">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-423">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-424">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-424">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt; continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, !!TNewResult&gt; continuationFunction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TNewResult) (continuationFunction As Func(Of Task(Of TResult), TNewResult), scheduler As TaskScheduler) As Task(Of TNewResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, TNewResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, 'NewResult&gt; * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="67fe9-425">Typ wyniku, generowane przez kontynuacja.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-425">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="67fe9-426">Funkcję, aby uruchamiać, gdy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-426">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="67fe9-427">Po uruchomieniu delegata zostaną przekazane ukończonego zadania jako argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-427">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="67fe9-428">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Do skojarzenia z zadaniem kontynuacji i wykorzystać do jego realizacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-428">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-429">Tworzy kontynuację, która wykonuje asynchronicznie po docelowej <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-429">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-430">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-430">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-431">Zwrócony <xref:System.Threading.Tasks.Task%601> będzie nie być zaplanowane do wykonania, dopóki nie zakończy się bieżące zadanie, czy zostanie zakończona z powodu uruchomionych ukończone pomyślnie, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykania się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-431">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-432">
            <see cref="T:System.Threading.Tasks.Task`1" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-432">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-433">
            <paramref name="continuationFunction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-433">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
          <span data-ttu-id="67fe9-434">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-434">-or-</span>
          </span>
          <span data-ttu-id="67fe9-435">
            <paramref name="scheduler" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-435">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-436">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-436">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-437">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-437">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-438">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-438">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object,TNewResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object, !!TNewResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^, TNewResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj, 'NewResult&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object,TNewResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="67fe9-439">Typ wyniku, generowane przez kontynuacja.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-439">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="67fe9-440">Funkcję, aby uruchamiać, gdy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-440">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="67fe9-441">Po uruchomieniu delegata zostaną przekazane ukończonego zadania i obiektu stanu dostarczonych przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-441">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="67fe9-442">Obiekt reprezentujący dane do użycia przez funkcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-442">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="67fe9-443">
            <see cref="T:System.Threading.CancellationToken" /> , Zostanie przypisany do nowego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-443">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-444">Tworzy kontynuację, który jest wykonywany, gdy element docelowy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-444">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-445">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-445">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-446">Zwrócony <xref:System.Threading.Tasks.Task%601> będzie nie być zaplanowane do wykonania, dopóki nie zakończy się bieżące zadanie, czy zostanie zakończona z powodu uruchomionych ukończone pomyślnie, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykania się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-446">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-447">
            <paramref name="continuationFunction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-447">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-448">Podany <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-448">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-449">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-449">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object,TNewResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object, !!TNewResult&gt; continuationFunction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TNewResult) (continuationFunction As Func(Of Task(Of TResult), Object, TNewResult), state As Object, continuationOptions As TaskContinuationOptions) As Task(Of TNewResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^, TNewResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj, 'NewResult&gt; * obj * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, state, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object,TNewResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="67fe9-450">Typ wyniku, generowane przez kontynuacja.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-450">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="67fe9-451">Funkcję, aby uruchamiać, gdy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-451">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="67fe9-452">Po uruchomieniu delegata zostaną przekazane ukończonego zadania i obiektu stanu dostarczonych przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-452">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="67fe9-453">Obiekt reprezentujący dane do użycia przez funkcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-453">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="67fe9-454">Opcje kiedy kontynuacja jest zaplanowana i jak działa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-454">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="67fe9-455">Obejmuje to kryteria, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, a także opcje wykonywania, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-455">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-456">Tworzy kontynuację, który jest wykonywany, gdy element docelowy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-456">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-457">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-457">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-458">Zwrócony <xref:System.Threading.Tasks.Task%601> będzie nie być zaplanowane do wykonania, dopóki nie zakończy się bieżące zadanie, czy zostanie zakończona z powodu uruchomionych ukończone pomyślnie, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykania się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-458">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 <span data-ttu-id="67fe9-459">`continuationFunction`, Po wykonaniu, powinna zwrócić <xref:System.Threading.Tasks.Task%601>.</span><span class="sxs-lookup"><span data-stu-id="67fe9-459">The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>.</span></span> <span data-ttu-id="67fe9-460">Stan wykonania tego zadania zostanie przeniesiona do zadania zwracany z wywołania ContinueWith.</span><span class="sxs-lookup"><span data-stu-id="67fe9-460">This task's completion state will be transferred to the task returned from the ContinueWith call.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-461">
            <paramref name="continuationFunction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-461">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="67fe9-462">
            <paramref name="continuationOptions" /> Argument określa nieprawidłową wartość dla <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-462">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-463">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-463">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object,TNewResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object, !!TNewResult&gt; continuationFunction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TNewResult) (continuationFunction As Func(Of Task(Of TResult), Object, TNewResult), state As Object, scheduler As TaskScheduler) As Task(Of TNewResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^, TNewResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj, 'NewResult&gt; * obj * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, state, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object,TNewResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="67fe9-464">Typ wyniku, generowane przez kontynuacja.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-464">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="67fe9-465">Funkcję, aby uruchamiać, gdy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-465">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="67fe9-466">Po uruchomieniu delegata zostaną przekazane ukończonego zadania i obiektu stanu dostarczonych przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-466">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="67fe9-467">Obiekt reprezentujący dane do użycia przez funkcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-467">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="67fe9-468">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Do skojarzenia z zadaniem kontynuacji i wykorzystać do jego realizacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-468">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-469">Tworzy kontynuację, który jest wykonywany, gdy element docelowy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-469">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-470">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-470">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-471">Zwrócony <xref:System.Threading.Tasks.Task%601> będzie nie być zaplanowane do wykonania, dopóki nie zakończy się bieżące zadanie, czy zostanie zakończona z powodu uruchomionych ukończone pomyślnie, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykania się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-471">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-472">
            <paramref name="scheduler" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-472">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-473">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-473">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, !!TNewResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, TNewResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, 'NewResult&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="67fe9-474">Typ wyniku, generowane przez kontynuacja.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-474">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="67fe9-475">Funkcja do uruchomienia, zgodnie z warunek określony w <c>continuationOptions</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-475">A function to run according the condition specified in <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="67fe9-476">Po uruchomieniu delegata zostaną przekazane jako argument, to ukończone zadanie podrzędne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-476">When run, the delegate will be passed as an argument this completed task.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="67fe9-477">
            <see cref="T:System.Threading.CancellationToken" /> , Zostanie przypisany do nowego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-477">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="67fe9-478">Opcje kiedy kontynuacja jest zaplanowana i jak działa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-478">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="67fe9-479">Obejmuje to kryteria, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, a także opcje wykonywania, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-479">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="67fe9-480">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Do skojarzenia z zadaniem kontynuacji i wykorzystać do jego realizacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-480">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-481">Tworzy kontynuację, która jest wykonywana zgodnie z warunek określony w <paramref name="continuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-481">Creates a continuation that executes according the condition specified in <paramref name="continuationOptions" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-482">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-482">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-483">Zwrócony <xref:System.Threading.Tasks.Task%601> będzie nie być zaplanowane do wykonania, dopóki nie zakończy się bieżące zadanie, czy zostanie zakończona z powodu uruchomionych ukończone pomyślnie, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykania się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-483">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 <span data-ttu-id="67fe9-484">`continuationFunction`, Po wykonaniu, powinna zwrócić <xref:System.Threading.Tasks.Task%601>.</span><span class="sxs-lookup"><span data-stu-id="67fe9-484">The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-485">
            <see cref="T:System.Threading.Tasks.Task`1" /> Został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-485">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</span>
          </span>
          <span data-ttu-id="67fe9-486">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-486">-or-</span>
          </span>
          <span data-ttu-id="67fe9-487">
            <see cref="T:System.Threading.CancellationTokenSource" /> Utworzonego <paramref name="cancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-487">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-488">
            <paramref name="continuationFunction" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-488">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
          <span data-ttu-id="67fe9-489">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-489">-or-</span>
          </span>
          <span data-ttu-id="67fe9-490">
            <paramref name="scheduler" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-490">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="67fe9-491">
            <paramref name="continuationOptions" /> Argument określa nieprawidłową wartość dla <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-491">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-492">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-492">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-493">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-493">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-494">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-494">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TNewResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object,TNewResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TNewResult&gt; ContinueWith&lt;TNewResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task`1&lt;!TResult&gt;, object, !!TNewResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNewResult&gt;&#xA; System::Threading::Tasks::Task&lt;TNewResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^, System::Object ^, TNewResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="override this.ContinueWith : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;, obj, 'NewResult&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'NewResult&gt;" Usage="task.ContinueWith (continuationFunction, state, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TNewResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,System.Object,TNewResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TNewResult">
          <span data-ttu-id="67fe9-495">Typ wyniku, generowane przez kontynuacja.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-495">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="67fe9-496">Funkcję, aby uruchamiać, gdy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-496">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="67fe9-497">Po uruchomieniu delegata zostaną przekazane ukończonego zadania i obiektu stanu dostarczonych przez obiekt wywołujący, jako argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-497">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="67fe9-498">Obiekt reprezentujący dane do użycia przez funkcję kontynuacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-498">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="67fe9-499">
            <see cref="T:System.Threading.CancellationToken" /> , Zostanie przypisany do nowego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-499">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="67fe9-500">Opcje kiedy kontynuacja jest zaplanowana i jak działa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-500">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="67fe9-501">Obejmuje to kryteria, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, a także opcje wykonywania, takie jak <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-501">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="67fe9-502">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> Do skojarzenia z zadaniem kontynuacji i wykorzystać do jego realizacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-502">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67fe9-503">Tworzy kontynuację, który jest wykonywany, gdy element docelowy <see cref="T:System.Threading.Tasks.Task`1" /> kończy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-503">Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-504">Nowe kontynuacji <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-504">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-505">Zwrócony <xref:System.Threading.Tasks.Task%601> będzie nie być zaplanowane do wykonania, dopóki nie zakończy się bieżące zadanie, czy zostanie zakończona z powodu uruchomionych ukończone pomyślnie, powodujący błąd z powodu nieobsługiwanego wyjątku lub zamykania się wcześniej z powodu anulowania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-505">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 <span data-ttu-id="67fe9-506">`continuationFunction`, Po wykonaniu, powinna zwrócić <xref:System.Threading.Tasks.Task%601>.</span><span class="sxs-lookup"><span data-stu-id="67fe9-506">The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>.</span></span> <span data-ttu-id="67fe9-507">Stan wykonania tego zadania zostanie przeniesiona na zadanie zwrócone przez <xref:System.Threading.Tasks.Task%601.ContinueWith%2A?displayProperty=nameWithType> wywołania.</span><span class="sxs-lookup"><span data-stu-id="67fe9-507">This task's completion state will be transferred to the task returned from the <xref:System.Threading.Tasks.Task%601.ContinueWith%2A?displayProperty=nameWithType> call.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67fe9-508">
            <paramref name="scheduler" /> Argument ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-508">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="67fe9-509">
            <paramref name="continuationOptions" /> Argument określa nieprawidłową wartość dla <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-509">The  <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="67fe9-510">Podany <see cref="T:System.Threading.CancellationToken" /> został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-510">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="67fe9-511">Tworzenie łańcuchów zadań przy użyciu zadań kontynuacji</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-511">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Factory">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.TaskFactory&lt;TResult&gt; Factory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.TaskFactory`1&lt;!TResult&gt; Factory" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task`1.Factory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Factory As TaskFactory(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::TaskFactory&lt;TResult&gt; ^ Factory { System::Threading::Tasks::TaskFactory&lt;TResult&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Factory : System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="System.Threading.Tasks.Task&lt;'Result&gt;.Factory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskFactory&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67fe9-512">Zapewnia dostęp do metod fabryki dla tworzenia i konfigurowania <see cref="T:System.Threading.Tasks.Task`1" /> wystąpień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-512">Provides access to factory methods for creating and configuring <see cref="T:System.Threading.Tasks.Task`1" /> instances.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67fe9-513">Obiekt fabryki, które można tworzyć różne <see cref="T:System.Threading.Tasks.Task`1" /> obiektów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-513">A factory object that can create a variety of <see cref="T:System.Threading.Tasks.Task`1" /> objects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-514">Ta właściwość zwraca domyślne wystąpienie <xref:System.Threading.Tasks.TaskFactory%601> klasę, która jest taka sama jak utworzonym przez wywołanie metody bez parametrów <xref:System.Threading.Tasks.TaskFactory%601.%23ctor?displayProperty=nameWithType> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="67fe9-514">This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory%601> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory%601.%23ctor?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="67fe9-515">Obowiązują następujące wartości właściwości:</span><span class="sxs-lookup"><span data-stu-id="67fe9-515">It has the following property values:</span></span>  
  
|<span data-ttu-id="67fe9-516">Właściwość</span><span class="sxs-lookup"><span data-stu-id="67fe9-516">Property</span></span>|<span data-ttu-id="67fe9-517">Wartość</span><span class="sxs-lookup"><span data-stu-id="67fe9-517">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Threading.Tasks.TaskFactory%601.CancellationToken%2A?displayProperty=nameWithType>|<xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory%601.ContinuationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskContinuationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory%601.CreationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskCreationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory%601.Scheduler%2A?displayProperty=nameWithType>|<span data-ttu-id="67fe9-518">`null`, lub <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="67fe9-518">`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span></span>|  
  
 <span data-ttu-id="67fe9-519">Najczęściej używane w tej właściwości jest tworzenie i uruchamianie nowego zadania w jednym wywołaniu <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="67fe9-519">The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67fe9-520">Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> metoda zapewnia Najprostszym sposobem utworzenia <xref:System.Threading.Tasks.Task%601> obiektu z domyślnych wartości konfiguracji.</span><span class="sxs-lookup"><span data-stu-id="67fe9-520">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a <xref:System.Threading.Tasks.Task%601> object with default configuration values.</span></span>  
  
 <span data-ttu-id="67fe9-521">W poniższym przykładzie użyto statycznego <xref:System.Threading.Tasks.Task%601.Factory%2A> właściwość się z trzech wywołań <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="67fe9-521">The following example uses the static <xref:System.Threading.Tasks.Task%601.Factory%2A> property to make three calls to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="67fe9-522">Pierwszym uruchomieniu `Task<Int32>` obiektu, który wykonuje wyrażenie lambda, która zwraca wartość 1.</span><span class="sxs-lookup"><span data-stu-id="67fe9-522">The first starts a `Task<Int32>` object, which executes a lambda expression that returns 1.</span></span> <span data-ttu-id="67fe9-523">Drugi rozpoczyna się `Task<Test>` obiektu, który wykonuje wyrażenie lambda, które tworzy nową `Test` wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="67fe9-523">The second starts a `Task<Test>` object, which executes a lambda expression that instantiates a new `Test` instance.</span></span> <span data-ttu-id="67fe9-524">Trzeci Start "zadanie < ciąg</span><span class="sxs-lookup"><span data-stu-id="67fe9-524">The third starts a \`Task<String</span></span>]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-525">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-525">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-526">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-526">Task-based Asynchronous Programming</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetAwaiter">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.TaskAwaiter&lt;TResult&gt; GetAwaiter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.TaskAwaiter`1&lt;!TResult&gt; GetAwaiter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task`1.GetAwaiter" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAwaiter () As TaskAwaiter(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::TaskAwaiter&lt;TResult&gt; GetAwaiter();" />
      <MemberSignature Language="F#" Value="override this.GetAwaiter : unit -&gt; System.Runtime.CompilerServices.TaskAwaiter&lt;'Result&gt;" Usage="task.GetAwaiter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.TaskAwaiter&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67fe9-527">Pobiera awaiter umożliwia to await <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-527">Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67fe9-528">Wystąpienie awaiter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-528">An awaiter instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-529">Ta metoda jest przeznaczona dla kompilatora użytkownika, a nie do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="67fe9-529">This method is intended for compiler user rather than use directly in code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public TResult Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TResult Result" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task`1.Result" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Result As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TResult Result { TResult get(); };" />
      <MemberSignature Language="F#" Value="member this.Result : 'Result" Usage="System.Threading.Tasks.Task&lt;'Result&gt;.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67fe9-530">Pobiera wartość wyniku <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-530">Gets the result value of this <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67fe9-531">Wartość wyniku <see cref="T:System.Threading.Tasks.Task`1" />, który jest tego samego typu co parametr typu zadania podrzędnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-531">The result value of this <see cref="T:System.Threading.Tasks.Task`1" />, which is of the same type as the task's type parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67fe9-532">Uzyskiwanie dostępu do metody dostępu get właściwość blokuje wątek wywołujący, aż do zakończenia; asynchronicznych operacji jest to równoważne z wywoływaniem <xref:System.Threading.Tasks.Task.Wait%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="67fe9-532">Accessing the property's get accessor blocks the calling thread until the asynchronous operation is complete; it is equivalent to calling the <xref:System.Threading.Tasks.Task.Wait%2A> method.</span></span>  
  
 <span data-ttu-id="67fe9-533">Po udostępnieniu wynik operacji są przechowywane i zwracany jest od razu w kolejnych wywołaniach <xref:System.Threading.Tasks.Task%601.Result%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="67fe9-533">Once the result of an operation is available, it is stored and is returned immediately on subsequent calls to the <xref:System.Threading.Tasks.Task%601.Result%2A> property.</span></span> <span data-ttu-id="67fe9-534">Należy zauważyć, że jeśli wystąpił wyjątek podczas operacji zadanie lub zadanie zostało anulowane, <xref:System.Threading.Tasks.Task%601.Result%2A> właściwość nie zwraca wartości.</span><span class="sxs-lookup"><span data-stu-id="67fe9-534">Note that, if an exception occurred during the operation of the task, or if the task has been cancelled, the <xref:System.Threading.Tasks.Task%601.Result%2A> property does not return a value.</span></span> <span data-ttu-id="67fe9-535">Zamiast tego próbujących uzyskać dostęp właściwości do wartości zgłasza <xref:System.AggregateException> wyjątku.</span><span class="sxs-lookup"><span data-stu-id="67fe9-535">Instead, attempting to access the property value throws an <xref:System.AggregateException> exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67fe9-536">Poniższy przykład jest narzędziem wiersza polecenia, który oblicza liczbę bajtów w plikach w każdym katalogu, którego nazwa jest przekazywany jako argument wiersza polecenia.</span><span class="sxs-lookup"><span data-stu-id="67fe9-536">The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</span></span> <span data-ttu-id="67fe9-537">Jeśli katalog zawiera pliki, wykonuje wyrażenie lambda, która tworzy wystąpienie <xref:System.IO.FileStream> obiekt dla każdego pliku w katalogu i pobiera wartość jego <xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="67fe9-537">If the directory contains files, it executes a lambda expression that instantiates a <xref:System.IO.FileStream> object for each file in the directory and retrieves the value of its <xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="67fe9-538">Jeśli katalog nie zawiera plików, po prostu wywołuje <xref:System.Threading.Tasks.Task.FromResult%2A> metody, aby utworzyć zadanie, którego <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> właściwość ma wartość zero (0).</span><span class="sxs-lookup"><span data-stu-id="67fe9-538">If a directory contains no files, it simply calls the <xref:System.Threading.Tasks.Task.FromResult%2A> method to create a task whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property is zero (0).</span></span> <span data-ttu-id="67fe9-539">Po zakończeniu zadania, całkowita liczba bajtów wszystkich plików w tym katalogu jest dostępna z <xref:System.Threading.Tasks.Task%601.Result%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="67fe9-539">When the tasks finish, the total number of bytes in all a directory's files is available from the <xref:System.Threading.Tasks.Task%601.Result%2A> property.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="67fe9-540">Zadanie zostało anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-540">The task was canceled.</span>
          </span>
          <span data-ttu-id="67fe9-541">
            <see cref="P:System.AggregateException.InnerExceptions" /> Kolekcja zawiera <see cref="T:System.Threading.Tasks.TaskCanceledException" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-541">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="67fe9-542">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-542">-or-</span>
          </span>
          <span data-ttu-id="67fe9-543">Wystąpił wyjątek podczas wykonywania zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-543">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="67fe9-544">
            <see cref="P:System.AggregateException.InnerExceptions" /> Kolekcja zawiera informacje o wyjątku lub wyjątki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-544">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="67fe9-545">Biblioteka zadań równoległych (TPL)</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-545">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">
          <span data-ttu-id="67fe9-546">Programowanie asynchroniczne oparte na zadanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-546">Task-based Asynchronous Programming</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-return-a-value-from-a-task.md">
          <span data-ttu-id="67fe9-547">Porady: zwracanie wartości z zadania</span>
          <span class="sxs-lookup">
            <span data-stu-id="67fe9-547">How to: Return a Value from a Task</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>