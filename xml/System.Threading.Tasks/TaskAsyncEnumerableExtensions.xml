<Type Name="TaskAsyncEnumerableExtensions" FullName="System.Threading.Tasks.TaskAsyncEnumerableExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="09002cc2712b1f6a45260bf0308cf2c9aa0552a7" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69144590" /></Metadata><TypeSignature Language="C#" Value="public static class TaskAsyncEnumerableExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TaskAsyncEnumerableExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskAsyncEnumerableExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module TaskAsyncEnumerableExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class TaskAsyncEnumerableExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type TaskAsyncEnumerableExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="6f347-101">Zawiera zestaw metod statycznych do konfigurowania zachowań związanych z zadaniami w przypadku wyliczalnych asynchronicznie i wartości jednorazowych.</span><span class="sxs-lookup"><span data-stu-id="6f347-101">Provides a set of static methods for configuring task-related behaviors on asynchronous enumerables and disposables.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ConfigureAwait">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.ConfiguredAsyncDisposable ConfigureAwait (this IAsyncDisposable source, bool continueOnCapturedContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.ConfiguredAsyncDisposable ConfigureAwait(class System.IAsyncDisposable source, bool continueOnCapturedContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait(System.IAsyncDisposable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigureAwait (source As IAsyncDisposable, continueOnCapturedContext As Boolean) As ConfiguredAsyncDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Runtime::CompilerServices::ConfiguredAsyncDisposable ConfigureAwait(IAsyncDisposable ^ source, bool continueOnCapturedContext);" />
      <MemberSignature Language="F#" Value="static member ConfigureAwait : IAsyncDisposable * bool -&gt; System.Runtime.CompilerServices.ConfiguredAsyncDisposable" Usage="System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait (source, continueOnCapturedContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredAsyncDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IAsyncDisposable" RefType="this" />
        <Parameter Name="continueOnCapturedContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6f347-102">Źródło asynchronicznej operacji jednorazowej.</span><span class="sxs-lookup"><span data-stu-id="6f347-102">The source async disposable.</span></span></param>
        <param name="continueOnCapturedContext"><span data-ttu-id="6f347-103"><see langword="true" />Aby przechwycić i zorganizować z powrotem do bieżącego kontekstu; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="6f347-103"><see langword="true" /> to capture and marshal back to the current context; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6f347-104">Określa, jak oczekują oczekiwania na zadania zwracane z asynchronicznej operacji tworzenia.</span><span class="sxs-lookup"><span data-stu-id="6f347-104">Configures how awaits on the tasks returned from an async disposable are performed.</span></span></summary>
        <returns><span data-ttu-id="6f347-105">Skonfigurowany asynchroniczny sposób.</span><span class="sxs-lookup"><span data-stu-id="6f347-105">The configured async disposable.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureAwait&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;T&gt; ConfigureAwait&lt;T&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;T&gt; source, bool continueOnCapturedContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1&lt;!!T&gt; ConfigureAwait&lt;T&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!T&gt; source, bool continueOnCapturedContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigureAwait(Of T) (source As IAsyncEnumerable(Of T), continueOnCapturedContext As Boolean) As ConfiguredCancelableAsyncEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Runtime::CompilerServices::ConfiguredCancelableAsyncEnumerable&lt;T&gt; ConfigureAwait(System::Collections::Generic::IAsyncEnumerable&lt;T&gt; ^ source, bool continueOnCapturedContext);" />
      <MemberSignature Language="F#" Value="static member ConfigureAwait : System.Collections.Generic.IAsyncEnumerable&lt;'T&gt; * bool -&gt; System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;'T&gt;" Usage="System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait (source, continueOnCapturedContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="continueOnCapturedContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="6f347-106">Typ obiektów do iteracji.</span><span class="sxs-lookup"><span data-stu-id="6f347-106">The type of the objects to iterate.</span></span></typeparam>
        <param name="source"><span data-ttu-id="6f347-107">Źródło wyliczalne do iteracji.</span><span class="sxs-lookup"><span data-stu-id="6f347-107">The source enumerable to iterate.</span></span></param>
        <param name="continueOnCapturedContext"><span data-ttu-id="6f347-108"><see langword="true" />Aby przechwycić i zorganizować z powrotem do bieżącego kontekstu; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="6f347-108"><see langword="true" /> to capture and marshal back to the current context; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6f347-109">Określa, jak oczekują oczekiwania na zadania zwracane z iteracji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="6f347-109">Configures how awaits on the tasks returned from an async iteration are performed.</span></span></summary>
        <returns><span data-ttu-id="6f347-110">Skonfigurowany wyliczalny.</span><span class="sxs-lookup"><span data-stu-id="6f347-110">The configured enumerable.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithCancellation&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;T&gt; WithCancellation&lt;T&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;T&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1&lt;!!T&gt; WithCancellation&lt;T&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!T&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Runtime::CompilerServices::ConfiguredCancelableAsyncEnumerable&lt;T&gt; WithCancellation(System::Collections::Generic::IAsyncEnumerable&lt;T&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WithCancellation : System.Collections.Generic.IAsyncEnumerable&lt;'T&gt; * System.Threading.CancellationToken -&gt; System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;'T&gt;" Usage="System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="6f347-111">Typ obiektów do iteracji.</span><span class="sxs-lookup"><span data-stu-id="6f347-111">The type of the objects to iterate.</span></span></typeparam>
        <param name="source"><span data-ttu-id="6f347-112">Źródło wyliczalne do iteracji.</span><span class="sxs-lookup"><span data-stu-id="6f347-112">The source enumerable to iterate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="6f347-113">Token anulowania, który ma być używany.</span><span class="sxs-lookup"><span data-stu-id="6f347-113">The cancellation token to use.</span></span></param>
        <summary><span data-ttu-id="6f347-114">Ustawia do przekazanie do <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> podczas iteracji. <see cref="T:System.Threading.CancellationToken" /></span><span class="sxs-lookup"><span data-stu-id="6f347-114">Sets the <see cref="T:System.Threading.CancellationToken" /> to be passed to <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> when iterating.</span></span></summary>
        <returns><span data-ttu-id="6f347-115">Skonfigurowany wyliczalny.</span><span class="sxs-lookup"><span data-stu-id="6f347-115">The configured enumerable.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
