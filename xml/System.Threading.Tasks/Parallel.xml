<Type Name="Parallel" FullName="System.Threading.Tasks.Parallel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dd9293fa176d2a244959809dc1e6d56a21fc299c" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46616219" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Parallel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Parallel extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Parallel" />
  <TypeSignature Language="VB.NET" Value="Public Class Parallel" />
  <TypeSignature Language="C++ CLI" Value="public ref class Parallel abstract sealed" />
  <TypeSignature Language="F#" Value="type Parallel = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="ceaf1-101">Zapewnia obsługę równoległych pętli i regionach.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ceaf1-101">Provides support for parallel loops and regions.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-102"><xref:System.Threading.Tasks.Parallel> Klasa udostępnia danych oparty na bibliotece równoległych elementy zastępcze typowych operacji takich jak pętle, dla każdej pętli i wykonanie zestawu instrukcji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-102">The <xref:System.Threading.Tasks.Parallel> class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ceaf1-103">Ten przykład demonstruje różne podejścia do implementowania pętlę równoległą przy użyciu wielu konstrukcji językowych.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-103">This example demonstrates several approaches to implementing a parallel loop using multiple language constructs.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#07](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelintro.cs#07)]
 [!code-vb[System.Threading.Tasks.Parallel#07](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelintro.vb#07)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="ceaf1-104">Wszystkie publiczne i chronione elementy członkowskie <see cref="T:System.Threading.Tasks.Parallel" /> są odporne na wątki i mogą być używane jednocześnie z wielu wątków.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ceaf1-104">All public and protected members of <see cref="T:System.Threading.Tasks.Parallel" /> are thread-safe and may be used concurrently from multiple threads.</span>
      </span>
    </threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">
      <span data-ttu-id="ceaf1-105">Równoległość danych (Biblioteka zadań równoległych)</span>
      <span class="sxs-lookup">
        <span data-stu-id="ceaf1-105">Data Parallelism (Task Parallel Library)</span>
      </span>
    </related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364">
      <span data-ttu-id="ceaf1-106">Przykłady dotyczące programowania równoległego za pomocą programu .NET Framework</span>
      <span class="sxs-lookup">
        <span data-stu-id="ceaf1-106">Samples for Parallel Programming with the .NET Framework</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName="For">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ceaf1-107">Wykonuje <see langword="for" /> (<see langword="For" /> w języku Visual Basic) pętli, w którym iteracje mogą być wykonywane równolegle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-107">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="ceaf1-108">Indeks początkowy, włącznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-108">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="ceaf1-109">Końcowy indeks, wyłączności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-109">The end index, exclusive.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-110">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-110">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-111">Wykonuje <see langword="for" /> (<see langword="For" /> w języku Visual Basic) pętli, w którym iteracje mogą być wykonywane równolegle i stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-111">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-112">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-112">A  structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-113">`body` Obiekt delegowany jest wywoływany raz dla każdej wartości w zakresie iteracji (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-113">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="ceaf1-114">Znajduje się w przypadku dwóch argumentów:</span><span class="sxs-lookup"><span data-stu-id="ceaf1-114">It is provided with two arguments:</span></span>  
  
-   <span data-ttu-id="ceaf1-115"><xref:System.Int32> Wartość, która reprezentuje liczbę iteracji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-115">An <xref:System.Int32> value that represents the iteration count.</span></span>  
  
-   <span data-ttu-id="ceaf1-116">A <xref:System.Threading.Tasks.ParallelLoopState> wystąpienie, które można zerwać pętlę przedwcześnie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-116">A <xref:System.Threading.Tasks.ParallelLoopState> instance that can be used to break out of the loop prematurely.</span></span> <span data-ttu-id="ceaf1-117"><xref:System.Threading.Tasks.ParallelLoopState> Obiekt zostanie utworzony przez kompilator; nie można utworzyć wystąpienia w kodzie użytkownika.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-117">The <xref:System.Threading.Tasks.ParallelLoopState> object is created by the compiler; it cannot be instantiated in user code.</span></span>  
  
 <span data-ttu-id="ceaf1-118">Wywoływanie <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> informuje metoda `for` operacji, która iteracji po bieżącym nie trzeba wykonać.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-118">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to execute.</span></span> <span data-ttu-id="ceaf1-119">Wszystkie iteracje przed bieżącą jeden będzie nadal jednak do wykonania, jeśli jeszcze tego nie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-119">However, all iterations before the current one will still have to be executed if they haven't already.</span></span>  
  
 <span data-ttu-id="ceaf1-120">Dlatego wywołanie <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> jest podobne do operacji podziału, w ramach konwencjonalnej `for` , takich jak pętli w języku C#, ale nie jest doskonały zastępuje: na przykład, nie ma żadnej gwarancji, że iteracji po bieżącym zdecydowanie nie będzie wykonywanie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-120">Therefore, calling <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="ceaf1-121">Jeśli wykonanie wszystkich iteracji, przed bieżącym nie jest konieczne, należy użyć <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody zamiast <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-121">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="ceaf1-122">Wywoływanie <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informuje `for` pętli, może to porzucić wszystkie pozostałe iteracji, niezależnie od tego, czy są one przed lub po bieżącej iteracji, ponieważ wszystkie wymagane pracy będzie już zakończone.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-122">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="ceaf1-123">Jednak, tak jak przy użyciu <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, nie ma żadnej gwarancji odnośnie do których nie zostanie wykonany innych iteracji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-123">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="ceaf1-124">Jeśli pętla jest zakończona przedwcześnie, <xref:System.Threading.Tasks.ParallelLoopResult> strukturę, która jest zwracana będzie zawierać informacje dotyczące zakończenia pętli.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-124">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="ceaf1-125">Jeśli `fromInclusive` jest większa niż lub równa `toExclusive`, metoda zwraca natychmiast bez przeprowadzania żadnych iteracji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-125">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ceaf1-126">Poniższy przykład wykonuje maksymalnie 100 iteracji pętli równolegle.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-126">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="ceaf1-127">Każda iteracja zatrzymuje się na losowo wybranym interwałem z zakresu od 1 do 1000 milisekund.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-127">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="ceaf1-128">Określa losowo wygenerowaną wartość, na które iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-128">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="ceaf1-129">Jak wynika z przykładzie nie iteracji, w której indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> początek wartości właściwości po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-129">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="ceaf1-130">Ponieważ iteracje pętli będzie prawdopodobnie nadal wykonywać kiedy <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> metoda jest wywoływana, wywołania każdej iteracji <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType> właściwość do sprawdzenia, czy innej iteracji została wywołana <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-130">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="ceaf1-131">Jeśli wartość właściwości jest `true`, iteracji sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> właściwości i, jeśli jest większa niż wartość indeksu bieżącej iteracji, zwraca natychmiast.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-131">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-132">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-132">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-133">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-133">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Tasks.ParallelLoopState" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-134">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-134">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="ceaf1-135">Indeks początkowy, włącznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-135">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="ceaf1-136">Końcowy indeks, wyłączności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-136">The end index, exclusive.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-137">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-137">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-138">Wykonuje <see langword="for" /> (<see langword="For" /> w języku Visual Basic) pętli, w którym iteracje mogą być wykonywane równolegle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-138">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-139">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-139">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-140">`body` Obiekt delegowany jest wywoływany raz dla każdej wartości w zakresie iteracji (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-140">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="ceaf1-141">Jest ona udostępniana z liczbą iteracji (<xref:System.Int32>) jako parametr.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-141">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="ceaf1-142">Jeśli `fromInclusive` jest większa niż lub równa `toExclusive`, metoda zwraca natychmiast bez przeprowadzania żadnych iteracji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-142">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ceaf1-143">W poniższym przykładzie użyto <xref:System.Threading.Tasks.Parallel.For%2A> metodę 100 wywołania delegata, która generuje losowe bajt wartości i oblicza ich suma.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-143">The following example uses the <xref:System.Threading.Tasks.Parallel.For%2A> method for 100 invocations of a delegate that generates random byte values and computes their sum.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/cs/for1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/vb/for1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-144">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-144">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-145">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-145">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-146">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-146">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="ceaf1-147">Indeks początkowy, włącznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-147">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="ceaf1-148">Końcowy indeks, wyłączności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-148">The end index, exclusive.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-149">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-149">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-150">Wykonuje <see langword="for" /> (<see langword="For" /> w języku Visual Basic) pętli z indeksami 64-bitowe, w których iteracje mogą być wykonywane równolegle i stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-150">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-151">A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> strukturę, która zawiera informacje na temat jaka część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-151">A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-152">`body` Obiekt delegowany jest wywoływany raz dla każdej wartości w zakresie iteracji (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-152">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="ceaf1-153">Jest ona udostępniana z następującymi parametrami: liczba iteracji (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> wystąpienie, które mogą służyć do zerwać pętlę przedwcześnie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-153">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="ceaf1-154">Wywoływanie <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> informuje metoda `for` operacji, która iteracji po bieżącej nie muszą być wykonywane, ale czy wszystkich iteracji przed bieżącym.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-154">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don’t have to be executed, but all iterations before the current one do.</span></span>  
  
 <span data-ttu-id="ceaf1-155">W związku z tym, wywołanie przerwania jest podobne do operacji podziału, w ramach konwencjonalnej `for` , takich jak pętli w języku C#, ale nie jest doskonały zastępuje: na przykład, nie ma żadnej gwarancji tej iteracji po bieżącej nie zdecydowanie będą wykonywane.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-155">Therefore, calling Break is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="ceaf1-156">Jeśli wykonanie wszystkich iteracji, przed bieżącym nie jest konieczne, należy użyć <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody zamiast <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-156">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="ceaf1-157">Wywoływanie <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informuje `for` pętli, może to porzucić wszystkie pozostałe iteracji, niezależnie od tego, czy są one przed lub po bieżącej iteracji, ponieważ wszystkie wymagane pracy będzie już zakończone.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-157">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="ceaf1-158">Jednak, tak jak przy użyciu <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, nie ma żadnej gwarancji odnośnie do których nie zostanie wykonany innych iteracji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-158">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="ceaf1-159">Jeśli pętla jest zakończona przedwcześnie, <xref:System.Threading.Tasks.ParallelLoopResult> strukturę, która jest zwracana będzie zawierać informacje dotyczące zakończenia pętli.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-159">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="ceaf1-160">Jeśli `fromInclusive` jest większa niż lub równa `toExclusive`, a następnie metoda zwraca natychmiast bez przeprowadzania żadnych iteracji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-160">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-161">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-161">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-162">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-162">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-163">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-163">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="ceaf1-164">Indeks początkowy, włącznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-164">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="ceaf1-165">Końcowy indeks, wyłączności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-165">The end index, exclusive.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-166">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-166">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-167">Wykonuje <see langword="for" /> (<see langword="For" /> w języku Visual Basic) pętli z indeksami 64-bitowe, w których iteracje mogą być wykonywane równolegle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-167">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-168">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-168">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-169">`body` Obiekt delegowany jest wywoływany raz dla każdej wartości w zakresie iteracji (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-169">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="ceaf1-170">Jest ona udostępniana z liczbą iteracji (<xref:System.Int64>) jako parametr.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-170">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="ceaf1-171">Jeśli `fromInclusive` jest większa niż lub równa `toExclusive`, metoda zwraca natychmiast bez przeprowadzania żadnych iteracji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-171">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-172">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-172">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-173">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-173">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-174">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-174">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="ceaf1-175">Indeks początkowy, włącznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-175">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="ceaf1-176">Końcowy indeks, wyłączności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-176">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-177">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-177">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-178">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-178">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-179">Wykonuje <see langword="for" /> (<see langword="For" /> w języku Visual Basic) pętli w iteracji, które mogą być wykonywane równolegle, można skonfigurować opcje pętli i stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-179">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-180">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-180">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-181">`body` Obiekt delegowany jest wywoływany raz dla każdej wartości w zakresie iteracji (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-181">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="ceaf1-182">Jest ona udostępniana z następującymi parametrami: liczba iteracji (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> wystąpienie, które mogą służyć do zerwać pętlę przedwcześnie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-182">It is provided with the following parameters: the iteration count (<xref:System.Int32>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="ceaf1-183">Jeśli `fromInclusive` jest większa niż lub równa `toExclusive`, metoda zwraca natychmiast bez przeprowadzania żadnych iteracji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-183">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-184">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> argument zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-184">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-185">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-185">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-186">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-186">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-187">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-187">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-188">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-188">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-189">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-189">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-190">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-190">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="ceaf1-191">Indeks początkowy, włącznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-191">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="ceaf1-192">Końcowy indeks, wyłączności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-192">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-193">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-193">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-194">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-194">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-195">Wykonuje <see langword="for" /> (<see langword="For" /> w języku Visual Basic) pętli, w której iteracje mogą być wykonywane równolegle i można skonfigurować opcje pętli.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-195">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel and loop options can be configured.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-196">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-196">A  structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-197">`body` Obiekt delegowany jest wywoływany raz dla każdej wartości w zakresie iteracji (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-197">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="ceaf1-198">Jest ona udostępniana z liczbą iteracji (<xref:System.Int32>) jako parametr.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-198">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="ceaf1-199">Jeśli `fromInclusive` jest większa niż lub równa `toExclusive`, a następnie metoda zwraca natychmiast bez przeprowadzania żadnych iteracji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-199">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ceaf1-200">Poniższy przykład pokazuje, jak można anulować pętlę równoległą:</span><span class="sxs-lookup"><span data-stu-id="ceaf1-200">The following example shows how to cancel a parallel loop:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforcancel.cs#05)]
 [!code-vb[System.Threading.Tasks.Parallel#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforcancel.vb#05)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-201">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> argument zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-201">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-202">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-202">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-203">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-203">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-204">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-204">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-205">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-205">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-206">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-206">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-207">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-207">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="ceaf1-208">Indeks początkowy, włącznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-208">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="ceaf1-209">Końcowy indeks, wyłączności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-209">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-210">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-210">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-211">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-211">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-212">Wykonuje <see langword="for" /> (<see langword="For" /> w języku Visual Basic) pętli z indeksami 64-bitowych w iteracji, które mogą być wykonywane równolegle, można skonfigurować opcje pętli i stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-212">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-213">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-213">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-214">`body` Obiekt delegowany jest wywoływany raz dla każdej wartości w zakresie iteracji (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-214">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="ceaf1-215">Jest ona udostępniana z następującymi parametrami: liczba iteracji (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> wystąpienie, które mogą służyć do zerwać pętlę przedwcześnie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-215">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="ceaf1-216">Jeśli `fromInclusive` jest większa niż lub równa `toExclusive`, metoda zwraca natychmiast bez przeprowadzania żadnych iteracji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-216">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ceaf1-217">Poniższy przykład pokazuje, jak używać <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> metody <xref:System.Threading.Tasks.ParallelOptions> obiektu:</span><span class="sxs-lookup"><span data-stu-id="ceaf1-217">The following example shows how to use the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method with a <xref:System.Threading.Tasks.ParallelOptions> object:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelfor.cs#03)]
 [!code-vb[System.Threading.Tasks.Parallel#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelfor.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-218">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> argument zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-218">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-219">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-219">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-220">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-220">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-221">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-221">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-222">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-222">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-223">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-223">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-224">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-224">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="ceaf1-225">Indeks początkowy, włącznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-225">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="ceaf1-226">Końcowy indeks, wyłączności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-226">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-227">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-227">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-228">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-228">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-229">Wykonuje <see langword="for" /> (<see langword="For" /> w języku Visual Basic) pętli z indeksami 64-bitowe, w których iteracje mogą być wykonywane równolegle i można skonfigurować opcje pętli.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-229">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-230">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-230">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-231">Obsługuje 64-bitowych indeksów.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-231">Supports 64-bit indexes.</span></span> <span data-ttu-id="ceaf1-232">`body` Obiekt delegowany jest wywoływany raz dla każdej wartości w zakresie iteracji (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-232">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="ceaf1-233">Jest ona udostępniana z liczbą iteracji (<xref:System.Int64>) jako parametr.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-233">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="ceaf1-234">Jeśli `fromInclusive` jest większa niż lub równa `toExclusive`, a następnie metoda zwraca natychmiast bez przeprowadzania żadnych iteracji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-234">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ceaf1-235">Poniższy przykład pokazuje, jak używać <xref:System.Threading.Tasks.ParallelOptions> do określenia harmonogramu niestandardowego zadania:</span><span class="sxs-lookup"><span data-stu-id="ceaf1-235">The following example shows how to use <xref:System.Threading.Tasks.ParallelOptions> to specify a custom task scheduler:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#06](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforwithscheduler.cs#06)]
 [!code-vb[System.Threading.Tasks.Parallel#06](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforwithscheduler.vb#06)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-236">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> argument zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-236">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-237">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-237">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-238">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-238">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-239">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-239">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-240">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-240">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-241">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-241">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-242">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-242">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Integer, toExclusive As Integer, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">
          <span data-ttu-id="ceaf1-243">Typ danych lokalnej wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-243">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="fromInclusive">
          <span data-ttu-id="ceaf1-244">Indeks początkowy, włącznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-244">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="ceaf1-245">Końcowy indeks, wyłączności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-245">The end index, exclusive.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="ceaf1-246">Delegat funkcji, która zwraca stan początkowy danych lokalnych dla każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-246">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-247">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-247">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="ceaf1-248">Delegat, który wykonuje końcowe akcję dla lokalnych stan każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-248">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-249">Wykonuje <see langword="for" /> (<see langword="For" /> w języku Visual Basic) pętli za pomocą danych lokalnej wątku, w której iteracje mogą być wykonywane równolegle, a stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-249">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-250">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-250">A  structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-251">`body` Obiekt delegowany jest wywoływany raz dla każdej wartości w zakresie iteracji (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-251">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="ceaf1-252">Jest ona udostępniana z następującymi parametrami: liczba iteracji (<xref:System.Int32>), <xref:System.Threading.Tasks.ParallelLoopState> wystąpienie, które mogą służyć do zerwać pętlę przedwcześnie i niektóre stan lokalnego, który może być współużytkowany przez iteracje, które są wykonywane na tym samym wątku.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-252">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="ceaf1-253">`localInit` Obiekt delegowany jest wywoływany raz dla każdego zadania, które uczestniczy w wykonywanie pętli i zwraca początkowy stan lokalnego dla każdego z tych zadań.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-253">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="ceaf1-254">Te stany początkowej są przekazywane do pierwszego `body` wywołań dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-254">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="ceaf1-255">Każdego wywołania w treści kolejnych zwraca wartość stanu prawdopodobnie modyfikacji, który jest przekazywany do następnego wywołania treści.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-255">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="ceaf1-256">Na koniec ostatniego wywołania treści na każde zadanie podrzędne zwraca wartość stanu, który jest przekazywany do `localFinally` delegować.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-256">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="ceaf1-257">`localFinally` Obiekt delegowany jest wywoływany po poszczególnych zadań do wykonania akcji końcowego na stan lokalnego dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-257">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="ceaf1-258">Ten delegat może być wywoływany współbieżnie na wiele zadań; w związku z tym należy zsynchronizować dostępu do żadnych zmiennych udostępnionych.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-258">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="ceaf1-259"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> Metoda może używać większej liczby zadań niż wątki, w okresie istnienia działania jako istniejące zadania i są zastępowane przez nowe zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-259">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="ceaf1-260">Dzięki temu bazowego <xref:System.Threading.Tasks.TaskScheduler> obiektu szansę, aby dodać, zmienić lub usunąć wątki, które usługa pętli.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-260">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="ceaf1-261">Jeśli `fromInclusive` jest większa niż lub równa `toExclusive`, a następnie metoda zwraca natychmiast bez przeprowadzania żadnych iteracji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-261">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="ceaf1-262">Na przykład, który używa tej metody, zobacz [porady: zapisywanie pętli Parallel.For ze zmiennymi lokalnymi wątku](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-262">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-263">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-263">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-264">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-264">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-265">
            <paramref name="localInit" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-265">The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-266">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-266">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-267">
            <paramref name="localFinally" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-267">The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-268">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-268">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-269">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-269">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Long, toExclusive As Long, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">
          <span data-ttu-id="ceaf1-270">Typ danych lokalnej wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-270">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="fromInclusive">
          <span data-ttu-id="ceaf1-271">Indeks początkowy, włącznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-271">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="ceaf1-272">Końcowy indeks, wyłączności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-272">The end index, exclusive.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="ceaf1-273">Delegat funkcji, która zwraca stan początkowy danych lokalnych dla każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-273">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-274">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-274">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="ceaf1-275">Delegat, który wykonuje końcowe akcję dla lokalnych stan każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-275">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-276">Wykonuje <see langword="for" /> (<see langword="For" /> w języku Visual Basic) pętli za pomocą 64-bitowych, indeksy i wątków lokalnych danych, w której iteracje mogą być wykonywane równolegle, a stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-276">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic)  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-277">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-277">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-278">`body` Obiekt delegowany jest wywoływany raz dla każdej wartości w zakresie iteracji (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-278">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="ceaf1-279">Jest ona udostępniana z następującymi parametrami: liczba iteracji (<xref:System.Int64>), <xref:System.Threading.Tasks.ParallelLoopState> wystąpienie, które mogą służyć do zerwać pętlę przedwcześnie i niektóre stan lokalnego, który może być współużytkowany przez iteracje, które są wykonywane w tym samym zadaniu.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-279">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="ceaf1-280">`localInit` Obiekt delegowany jest wywoływany raz dla każdego zadania, które uczestniczy w wykonywanie pętli i zwraca początkowy stan lokalnego dla każdego z tych zadań.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-280">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="ceaf1-281">Te stany początkowej są przekazywane do pierwszego `body` wywołań dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-281">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="ceaf1-282">Każdego wywołania w treści kolejnych zwraca wartość stanu prawdopodobnie modyfikacji, który jest przekazywany do następnego wywołania treści.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-282">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="ceaf1-283">Na koniec ostatniego wywołania treści na każde zadanie podrzędne zwraca wartość stanu, który jest przekazywany do `localFinally` delegować.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-283">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="ceaf1-284">`localFinally` Obiekt delegowany jest wywoływany po poszczególnych zadań do wykonania akcji końcowego na stan lokalnego dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-284">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="ceaf1-285">Ten delegat może być wywoływany współbieżnie na wiele zadań; w związku z tym należy zsynchronizować dostępu do żadnych zmiennych udostępnionych.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-285">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="ceaf1-286"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> Metoda może używać większej liczby zadań niż wątki, w okresie istnienia działania jako istniejące zadania i są zastępowane przez nowe zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-286">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="ceaf1-287">Dzięki temu bazowego <xref:System.Threading.Tasks.TaskScheduler> obiektu szansę, aby dodać, zmienić lub usunąć wątki, które usługa pętli.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-287">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="ceaf1-288">Jeśli `fromInclusive` jest większa niż lub równa `toExclusive`, a następnie metoda zwraca natychmiast bez przeprowadzania żadnych iteracji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-288">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="ceaf1-289">Na przykład, który używa tej metody, zobacz [porady: zapisywanie pętli Parallel.For ze zmiennymi lokalnymi wątku](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-289">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-290">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-290">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-291">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-291">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-292">
            <paramref name="localInit" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-292">The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-293">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-293">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-294">
            <paramref name="localFinally" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-294">The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-295">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-295">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-296">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-296">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">
          <span data-ttu-id="ceaf1-297">Typ danych lokalnej wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-297">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="fromInclusive">
          <span data-ttu-id="ceaf1-298">Indeks początkowy, włącznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-298">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="ceaf1-299">Końcowy indeks, wyłączności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-299">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-300">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-300">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="ceaf1-301">Delegat funkcji, która zwraca stan początkowy danych lokalnych dla każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-301">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-302">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-302">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="ceaf1-303">Delegat, który wykonuje końcowe akcję dla lokalnych stan każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-303">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-304">Wykonuje <see langword="for" /> (<see langword="For" /> w języku Visual Basic) pętli za pomocą danych lokalnych wątków w iteracji, które mogą być wykonywane równolegle, można skonfigurować opcje pętli i stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-304">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic)  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-305">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-305">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-306">`body` Obiekt delegowany jest wywoływany raz dla każdej wartości w zakresie iteracji (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-306">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="ceaf1-307">Jest ona udostępniana z następującymi parametrami: liczba iteracji (<xref:System.Int32>), <xref:System.Threading.Tasks.ParallelLoopState> wystąpienie, które mogą służyć do zerwać pętlę przedwcześnie i niektóre stan lokalnego, który może być współużytkowany przez iteracje, które są wykonywane w tym samym zadaniu.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-307">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="ceaf1-308">`localInit` Obiekt delegowany jest wywoływany raz dla każdego zadania, które uczestniczy w wykonywanie pętli i zwraca początkowy stan lokalnego dla każdego z tych zadań.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-308">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="ceaf1-309">Te stany początkowej są przekazywane do pierwszego `body` wywołań dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-309">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="ceaf1-310">Każdego wywołania w treści kolejnych zwraca wartość stanu prawdopodobnie modyfikacji, który jest przekazywany do następnego wywołania treści.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-310">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="ceaf1-311">Na koniec ostatniego wywołania treści na każde zadanie podrzędne zwraca wartość stanu, który jest przekazywany do `localFinally` delegować.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-311">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="ceaf1-312">`localFinally` Obiekt delegowany jest wywoływany po poszczególnych zadań do wykonania akcji końcowego na stan lokalnego dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-312">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="ceaf1-313">Ten delegat może być wywoływany współbieżnie w wielu wątkach; w związku z tym należy zsynchronizować dostępu do żadnych zmiennych udostępnionych.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-313">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="ceaf1-314"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> Metoda może używać większej liczby zadań niż wątki, w okresie istnienia działania jako istniejące zadania i są zastępowane przez nowe zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-314">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="ceaf1-315">Dzięki temu bazowego <xref:System.Threading.Tasks.TaskScheduler> obiektu szansę, aby dodać, zmienić lub usunąć wątki, które usługa pętli.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-315">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="ceaf1-316">Jeśli `fromInclusive` jest większa niż lub równa `toExclusive`, a następnie metoda zwraca natychmiast bez przeprowadzania żadnych iteracji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-316">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ceaf1-317">W poniższym przykładzie użyto zmiennych thread-local, aby obliczyć sumę wyników wiele operacji długotrwałej.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-317">The following example uses thread-local variables to compute the sum of the results of many lengthy operations.</span></span> <span data-ttu-id="ceaf1-318">W tym przykładzie ogranicza stopień równoległości na cztery.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-318">This example limits the degree of parallelism to four.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/threadlocalforwithoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Parallel#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/threadlocalforwithoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-319">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-319">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-320">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-320">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-321">
            <paramref name="localInit" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-321">The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-322">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-322">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-323">
            <paramref name="localFinally" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-323">The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-324">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-324">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-325">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-325">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-326">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> argument zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-326">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-327">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-327">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-328">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-328">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-329">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-329">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">
          <span data-ttu-id="ceaf1-330">Typ danych lokalnej wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-330">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="fromInclusive">
          <span data-ttu-id="ceaf1-331">Indeks początkowy, włącznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-331">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="ceaf1-332">Końcowy indeks, wyłączności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-332">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-333">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-333">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="ceaf1-334">Delegat funkcji, która zwraca stan początkowy danych lokalnych dla każdego wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-334">The function delegate that returns the initial state of the local data for each thread.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-335">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-335">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="ceaf1-336">Delegat, który wykonuje końcowe akcję dla lokalnych stanu każdego wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-336">The delegate that performs a final action on the local state of each thread.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-337">Wykonuje <see langword="for" /> (<see langword="For" /> w języku Visual Basic) pętli z indeksami 64-bitowych i danych lokalnej wątku, w którym iteracje mogą być wykonywane równolegle, można skonfigurować opcje pętli, a stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-337">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-338">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-338">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-339">`body` Obiekt delegowany jest wywoływany raz dla każdej wartości w zakresie iteracji (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-339">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="ceaf1-340">Jest ona udostępniana z następującymi parametrami: liczba iteracji (<xref:System.Int64>), <xref:System.Threading.Tasks.ParallelLoopState> wystąpienie, które mogą służyć do zerwać pętlę przedwcześnie i niektóre stan lokalnego, który może być współużytkowany przez iteracje, które są wykonywane na tym samym wątku.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-340">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="ceaf1-341">`localInit` Obiekt delegowany jest wywoływany raz dla każdego wątku, który uczestniczy w wykonywanie pętli i zwraca początkowy stan lokalnego dla każdego z tych wątkach.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-341">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those threads.</span></span> <span data-ttu-id="ceaf1-342">Te stany początkowej są przekazywane do pierwszego `body` wywołań w każdym wątku.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-342">These initial states are passed to the first `body` invocations on each thread.</span></span> <span data-ttu-id="ceaf1-343">Każdego wywołania w treści kolejnych zwraca wartość stanu prawdopodobnie modyfikacji, który jest przekazywany do następnego wywołania treści.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-343">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="ceaf1-344">Na koniec, ostatni wywołania treści w każdym wątku zwraca wartość stanu, który jest przekazywany do `localFinally` delegować.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-344">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="ceaf1-345">`localFinally` Obiekt delegowany jest wywoływany raz na wątek do wykonania akcji końcowego na stan lokalnego dla każdego wątku.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-345">The `localFinally` delegate is invoked once per thread to perform a final action on each thread's local state.</span></span> <span data-ttu-id="ceaf1-346">Ten delegat może być wywoływany współbieżnie w wielu wątkach; w związku z tym należy zsynchronizować dostępu do żadnych zmiennych udostępnionych.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-346">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="ceaf1-347"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> Metoda może używać większej liczby zadań niż wątki, w okresie istnienia działania jako istniejące zadania i są zastępowane przez nowe zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-347">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="ceaf1-348">Dzięki temu bazowego <xref:System.Threading.Tasks.TaskScheduler> obiektu szansę, aby dodać, zmienić lub usunąć wątki, które usługa pętli.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-348">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="ceaf1-349">Jeśli `fromInclusive` jest większa niż lub równa `toExclusive`, a następnie metoda zwraca natychmiast bez przeprowadzania żadnych iteracji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-349">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-350">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-350">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-351">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-351">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-352">
            <paramref name="localInit" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-352">The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-353">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-353">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-354">
            <paramref name="localFinally" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-354">The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-355">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-355">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-356">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-356">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-357">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> argument zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-357">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-358">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-358">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-359">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-359">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-360">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-360">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ForEach&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ceaf1-361">Wykonuje <see langword="foreach" /> (<see langword="For Each " /> w języku Visual Basic) operacji, w którym iteracje mogą być wykonywane równolegle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-361">Executes a <see langword="foreach" /> (<see langword="For Each " /> in Visual Basic) operation in which iterations may run in parallel.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As OrderablePartitioner(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-362">Typ elementów w <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-362">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-363">Prędkości partycjonera, który zawiera oryginalnego źródła danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-363">The orderable partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-364">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-364">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-365">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) Operacja <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> w którym iteracje mogą być wykonywane równolegle i stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-365">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-366">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-366">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-367">To przeciążenie jest udostępniana dla scenariuszy, w której chcesz przesłonić domyślny schemat partycji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-367">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="ceaf1-368">Na przykład małych jednostek pętli mogą skorzystać z partycjonowania zakresu.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-368">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="ceaf1-369"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Metoda oczekuje niestandardowe partycjonery umożliwiają dynamiczne partycjonowanie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-369">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="ceaf1-370">Aby uzyskać więcej informacji, zobacz [niestandardowe Partycjonery dla PLINQ i TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) i [porady: Implementowanie partycji dynamicznych](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-370">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-371">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-371">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-372">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-372">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-373">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-373">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ceaf1-374">
            <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> Właściwość <paramref name="source" /> zwraca prędkości partycjonera <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-374">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ceaf1-375">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-375">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-376">
            <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> Zwraca wartość właściwości w partycjonera prędkości źródła <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-376">The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the source orderable partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ceaf1-377">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-377">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-378">Zwróć wszystkie metody w partycjonera prędkości źródła <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-378">Any methods in the source orderable partitioner return <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-379">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-379">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-380">Typ elementów w <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-380">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-381">Partycjonera, który zawiera oryginalnego źródła danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-381">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-382">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-382">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-383">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) Operacja <see cref="T:System.Collections.Concurrent.Partitioner" /> w której iteracje mogą być wykonywane równolegle, a stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-383">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-384">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-384">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-385">To przeciążenie jest udostępniana dla scenariuszy, w której chcesz przesłonić domyślny schemat partycji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-385">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="ceaf1-386">Na przykład małych jednostek pętli mogą skorzystać z partycjonowania zakresu.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-386">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="ceaf1-387"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Metoda oczekuje niestandardowe partycjonery umożliwiają dynamiczne partycjonowanie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-387">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="ceaf1-388">Aby uzyskać więcej informacji, zobacz [niestandardowe Partycjonery dla PLINQ i TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) i [porady: Implementowanie partycji dynamicznych](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-388">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-389">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-389">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-390">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-390">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-391">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-391">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ceaf1-392">
            <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> Właściwość <paramref name="source" /> zwraca partycjonera <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-392">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ceaf1-393">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-393">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-394">Metoda w <paramref name="source" /> zwraca partycjonera <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-394">A method in the <paramref name="source" /> partitioner returns <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-395">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-395">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-396">
            <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> Method in Class metoda <paramref name="source" /> partycjonera nie zwraca poprawną liczbę partycji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-396">The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-397">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-397">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-398">Typ elementów w <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-398">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-399">Partycjonera, który zawiera oryginalnego źródła danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-399">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-400">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-400">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-401">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) Operacja <see cref="T:System.Collections.Concurrent.Partitioner" /> w iteracji, które mogą być wykonywane równolegle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-401">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-402">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-402">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-403">To przeciążenie jest udostępniana dla scenariuszy, w której chcesz przesłonić domyślny schemat partycji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-403">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="ceaf1-404">Na przykład małych jednostek pętli mogą skorzystać z partycjonowania zakresu.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-404">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="ceaf1-405"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Metoda oczekuje niestandardowe partycjonery umożliwiają dynamiczne partycjonowanie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-405">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="ceaf1-406">Aby uzyskać więcej informacji, zobacz [niestandardowe Partycjonery dla PLINQ i TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) i [porady: Implementowanie partycji dynamicznych](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-406">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ceaf1-407">Poniższy przykład pokazuje, jak Implementowanie partycjonera zakresu do użytku z programem <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="ceaf1-407">The following example shows how to implement a range partitioner for use with <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/cs/rangepartitioner.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/vb/rangepart.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-408">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-408">The <paramref name="source" /> argument is  <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-409">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-409">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-410">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-410">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ceaf1-411">
            <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> Właściwość <paramref name="source" /> zwraca partycjonera <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-411">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ceaf1-412">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-412">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-413">Wyjątek, który jest generowany, gdy wszystkie metody w <paramref name="source" /> partycjonera zwracany <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-413">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-414">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-414">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-415">
            <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> Method in Class metoda <paramref name="source" /> partycjonera nie zwraca poprawną liczbę partycji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-415">The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-416">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-416">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-417">Typ danych w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-417">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-418">Źródło danych wyliczalny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-418">An enumerable data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-419">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-419">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-420">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) operację, używając 64-bitowych indeksów w <see cref="T:System.Collections.IEnumerable" /> w której iteracje mogą być wykonywane równolegle, a stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-420">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-421">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-421">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-422">`body` Obiekt delegowany jest wywoływany raz dla każdego elementu w `source` wyliczalny.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-422">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="ceaf1-423">Jest ona udostępniana z następującymi parametrami: bieżący element <xref:System.Threading.Tasks.ParallelLoopState> wystąpienie, które mogą służyć do zerwać pętlę przedwcześnie i indeks bieżącego elementu (<xref:System.Int64>).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-423">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-424">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-424">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-425">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-425">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-426">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-426">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-427">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-427">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-428">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-428">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-429">Typ danych w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-429">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-430">Źródło danych wyliczalny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-430">An enumerable data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-431">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-431">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-432">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) Operacja <see cref="T:System.Collections.IEnumerable" /> w której iteracje mogą być wykonywane równolegle, a stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-432">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-433">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-433">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-434">`body` Obiekt delegowany jest wywoływany raz dla każdego elementu w `source` wyliczalny.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-434">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="ceaf1-435">Jest ona udostępniana z następującymi parametrami: bieżącego elementu i <xref:System.Threading.Tasks.ParallelLoopState> wystąpienie, które mogą służyć do zerwać pętlę przedwcześnie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-435">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-436">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-436">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-437">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-437">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-438">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-438">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-439">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-439">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-440">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-440">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-441">Typ danych w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-441">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-442">Źródło danych wyliczalny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-442">An enumerable data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-443">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-443">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-444">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) Operacja <see cref="T:System.Collections.IEnumerable" /> w iteracji, które mogą być wykonywane równolegle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-444">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-445">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-445">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-446">`body` Obiekt delegowany jest wywoływany raz dla każdego elementu w `source` wyliczalny.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-446">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="ceaf1-447">Jest ona udostępniana z bieżącego elementu jako parametr.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-447">It is provided with the current element as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ceaf1-448">W poniższym przykładzie użyto <xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29> metodę, aby określić liczbę samogłosek i znaki inne niż odstępu w pliku tekstowym.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-448">The following example uses the <xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29> method to count the number of vowels and non-white-space characters in a text file.</span></span> <span data-ttu-id="ceaf1-449">W tym przypadku <xref:System.Threading.Tasks.ParallelLoopResult> wartości zwracanej przez metodę jest ignorowana.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-449">In this case, the <xref:System.Threading.Tasks.ParallelLoopResult> value returned by the method is ignored.</span></span> <span data-ttu-id="ceaf1-450">Należy zauważyć, że ponieważ operacje można uruchomić równolegle, upewnij się, że zmienne liczników przyrostu o wartości jest operacją niepodzielną i że wiele wątków nie należy próbować uzyskać dostęp do zmiennych licznik jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-450">Note that, because operations can run in parallel, you must ensure that incrementing the counter variables is an atomic operation, and that multiple threads do not attempt to access the counter variables simultaneously.</span></span> <span data-ttu-id="ceaf1-451">W tym celu w przykładzie użyto `lock` — instrukcja (w języku C#) i `SyncLock` — instrukcja (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-451">For this purpose, the example uses the `lock` statement (in C#) and the `SyncLock` statement (in Visual Basic).</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/cs/foreach1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/vb/foreach1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-452">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-452">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-453">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-453">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-454">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-454">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-455">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-455">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-456">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-456">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-457">Typ elementów w <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-457">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-458">Prędkości partycjonera, który zawiera oryginalnego źródła danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-458">The orderable partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-459">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-459">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-460">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-460">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-461">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) Operacja <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> w iteracji, które mogą być wykonywane równolegle, można skonfigurować opcje pętli, a stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-461">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-462">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-462">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-463">To przeciążenie jest udostępniana dla scenariuszy, w której chcesz przesłonić domyślny schemat partycji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-463">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="ceaf1-464">Na przykład małych jednostek pętli mogą skorzystać z partycjonowania zakresu.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-464">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="ceaf1-465"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Metoda oczekuje niestandardowe partycjonery umożliwiają dynamiczne partycjonowanie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-465">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="ceaf1-466">Aby uzyskać więcej informacji, zobacz [niestandardowe Partycjonery dla PLINQ i TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) i [porady: Implementowanie partycji dynamicznych](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-466">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-467">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> argument zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-467">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-468">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-468">The <paramref name="source" /> argument is  <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-469">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-469">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-470">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-470">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-471">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-471">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-472">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-472">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-473">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-473">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ceaf1-474">
            <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> Właściwość <paramref name="source" /> zwraca prędkości partycjonera <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-474">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ceaf1-475">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-475">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-476">
            <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> Właściwość <paramref name="source" /> zwraca prędkości partycjonera <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-476">The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ceaf1-477">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-477">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-478">Wyjątek, który jest generowany, gdy wszystkie metody w <paramref name="source" /> prędkości partycjonera zwracany <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-478">The exception that is thrown when any methods in the <paramref name="source" /> orderable partitioner return <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-479">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-479">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-480">Typ elementów w <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-480">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-481">Partycjonera, który zawiera oryginalnego źródła danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-481">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-482">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-482">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-483">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-483">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-484">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) Operacja <see cref="T:System.Collections.Concurrent.Partitioner" /> w iteracji, które mogą być wykonywane równolegle, można skonfigurować opcje pętli, a stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-484">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-485">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-485">A  structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-486">To przeciążenie jest udostępniana dla scenariuszy, w której chcesz przesłonić domyślny schemat partycji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-486">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="ceaf1-487">Na przykład małych jednostek pętli mogą skorzystać z partycjonowania zakresu.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-487">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="ceaf1-488"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Metoda oczekuje niestandardowe partycjonery umożliwiają dynamiczne partycjonowanie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-488">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="ceaf1-489">Aby uzyskać więcej informacji, zobacz [niestandardowe Partycjonery dla PLINQ i TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) i [porady: Implementowanie partycji dynamicznych](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-489">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-490">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> argument zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-490">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-491">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-491">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-492">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-492">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-493">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-493">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-494">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-494">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-495">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-495">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-496">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-496">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ceaf1-497">
            <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> Właściwość <paramref name="source" /> zwraca partycjonera <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-497">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ceaf1-498">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-498">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-499">Wyjątek, który jest generowany, gdy wszystkie metody w <paramref name="source" /> partycjonera zwracany <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-499">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-500">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-500">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-501">Typ elementów w <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-501">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-502">Partycjonera, który zawiera oryginalnego źródła danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-502">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-503">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-503">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-504">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-504">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-505">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) Operacja <see cref="T:System.Collections.Concurrent.Partitioner" /> w którym iteracje mogą być wykonywane równolegle i można skonfigurować opcje pętli.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-505">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and loop options can be configured.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-506">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-506">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-507">To przeciążenie jest udostępniana dla scenariuszy, w której chcesz przesłonić domyślny schemat partycji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-507">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="ceaf1-508">Na przykład małych jednostek pętli mogą skorzystać z partycjonowania zakresu.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-508">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="ceaf1-509"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Metoda oczekuje niestandardowe partycjonery umożliwiają dynamiczne partycjonowanie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-509">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="ceaf1-510">Aby uzyskać więcej informacji, zobacz [niestandardowe Partycjonery dla PLINQ i TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) i [porady: Implementowanie partycji dynamicznych](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-510">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-511">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> argument zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-511">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-512">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-512">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-513">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-513">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-514">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-514">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-515">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-515">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-516">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-516">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-517">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-517">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ceaf1-518">
            <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> Właściwość <paramref name="source" /> zwraca partycjonera <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-518">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ceaf1-519">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-519">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-520">Wyjątek, który jest generowany, gdy wszystkie metody w <paramref name="source" /> partycjonera zwracany <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-520">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-521">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-521">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-522">Typ danych w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-522">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-523">Źródło danych wyliczalny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-523">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-524">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-524">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-525">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-525">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-526">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) operację, używając 64-bitowych indeksów w <see cref="T:System.Collections.IEnumerable" /> w iteracji, które mogą być wykonywane równolegle, można skonfigurować opcje pętli, a stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-526">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-527">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-527">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-528">`body` Obiekt delegowany jest wywoływany raz dla każdego elementu w `source` wyliczalny.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-528">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="ceaf1-529">Jest ona udostępniana z następującymi parametrami: bieżący element <xref:System.Threading.Tasks.ParallelLoopState> wystąpienie, które mogą służyć do zerwać pętlę przedwcześnie i indeks bieżącego elementu (<xref:System.Int64>).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-529">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-530">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> argument zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-530">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-531">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-531">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-532">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-532">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-533">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-533">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-534">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-534">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-535">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-535">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-536">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-536">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-537">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-537">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-538">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-538">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-539">Typ danych w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-539">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-540">Źródło danych wyliczalny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-540">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-541">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-541">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-542">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-542">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-543">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) Operacja <see cref="T:System.Collections.IEnumerable" /> w iteracji, które mogą być wykonywane równolegle, można skonfigurować opcje pętli, a stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-543">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-544">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-544">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-545">`body` Obiekt delegowany jest wywoływany raz dla każdego elementu w `source` wyliczalny.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-545">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="ceaf1-546">Jest ona udostępniana z następującymi parametrami: bieżącego elementu i <xref:System.Threading.Tasks.ParallelLoopState> wystąpienie, które mogą służyć do zerwać pętlę przedwcześnie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-546">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-547">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> argument zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-547">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-548">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-548">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-549">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-549">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-550">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-550">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-551">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-551">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-552">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-552">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-553">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-553">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-554">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-554">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-555">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-555">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-556">Typ danych w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-556">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-557">Źródło danych wyliczalny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-557">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-558">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-558">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-559">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-559">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-560">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) Operacja <see cref="T:System.Collections.IEnumerable" /> w którym iteracje mogą być wykonywane równolegle i można skonfigurować opcje pętli.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-560">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and loop options can be configured.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-561">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-561">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-562">`body` Obiekt delegowany jest wywoływany raz dla każdego elementu w `source` wyliczalny.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-562">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="ceaf1-563">Jest ona udostępniana z bieżącego elementu jako parametr.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-563">It is provided with the current element as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-564">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> argument zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-564">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-565">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-565">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-566">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-566">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-567">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-567">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-568">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-568">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-569">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-569">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-570">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-570">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-571">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-571">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-572">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-572">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As OrderablePartitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-573">Typ elementów w <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-573">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="ceaf1-574">Typ danych lokalnej wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-574">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-575">Prędkości partycjonera, który zawiera oryginalnego źródła danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-575">The orderable partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="ceaf1-576">Delegat funkcji, która zwraca stan początkowy danych lokalnych dla każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-576">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-577">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-577">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="ceaf1-578">Delegat, który wykonuje końcowe akcję dla lokalnych stan każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-578">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-579">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) operacja z danymi lokalnymi wątku na <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> w iteracji, które mogą być wykonywane równolegle, można skonfigurować opcje pętli, a stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-579">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-580">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-580">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-581">To przeciążenie jest udostępniana dla scenariuszy, w której chcesz przesłonić domyślny schemat partycji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-581">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="ceaf1-582">Na przykład małych jednostek pętli mogą skorzystać z partycjonowania zakresu.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-582">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="ceaf1-583"><xref:System.Threading.Tasks.Parallel.ForEach%2A> Metoda oczekuje niestandardowe partycjonery umożliwiają dynamiczne partycjonowanie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-583">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="ceaf1-584">Aby uzyskać więcej informacji, zobacz [niestandardowe Partycjonery dla PLINQ i TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) i [porady: Implementowanie partycji dynamicznych](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-584">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="ceaf1-585">`localInit` Obiekt delegowany jest wywoływany raz dla każdego zadania, które uczestniczy w wykonywanie pętli i zwraca początkowy stan lokalnego dla każdego z tych zadań.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-585">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="ceaf1-586">Te stany początkowej są przekazywane do pierwszego `body` wywołań dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-586">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="ceaf1-587">Każdego wywołania w treści kolejnych zwraca wartość stanu prawdopodobnie modyfikacji, który jest przekazywany do następnego wywołania treści.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-587">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="ceaf1-588">Na koniec ostatniego wywołania treści na każde zadanie podrzędne zwraca wartość stanu, który jest przekazywany do `localFinally` delegować.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-588">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="ceaf1-589">`localFinally` Obiekt delegowany jest wywoływany po poszczególnych zadań do wykonania akcji końcowego na stan lokalnego dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-589">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="ceaf1-590">Ten delegat może być wywoływany współbieżnie na wiele zadań; w związku z tym należy zsynchronizować dostępu do żadnych zmiennych udostępnionych.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-590">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="ceaf1-591"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Metoda może używać większej liczby zadań niż wątki, w okresie istnienia działania jako istniejące zadania i są zastępowane przez nowe zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-591">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="ceaf1-592">Dzięki temu bazowego <xref:System.Threading.Tasks.TaskScheduler> obiektu szansę, aby dodać, zmienić lub usunąć wątki, które usługa pętli.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-592">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-593">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-593">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-594">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-594">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-595">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-595">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-596">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-596">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-597">
            <paramref name="localInit" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-597">The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-598">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-598">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-599">
            <paramref name="localFinally" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-599">The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ceaf1-600">
            <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> Właściwość <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> zwraca <see langword="false" /> lub zwraca partycjonera <see langword="null" /> partycji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-600">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-601">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-601">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-602">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-602">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As Partitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-603">Typ elementów w <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-603">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="ceaf1-604">Typ danych lokalnej wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-604">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-605">Partycjonera, który zawiera oryginalnego źródła danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-605">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="ceaf1-606">Delegat funkcji, która zwraca stan początkowy danych lokalnych dla każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-606">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-607">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-607">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="ceaf1-608">Delegat, który wykonuje końcowe akcję dla lokalnych stan każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-608">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-609">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) operacja z danymi lokalnymi wątku na <see cref="T:System.Collections.Concurrent.Partitioner" /> w którym iteracje mogą być wykonywane równolegle i stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-609">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-610">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-610">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-611">To przeciążenie jest udostępniana dla scenariuszy, w której chcesz przesłonić domyślny schemat partycji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-611">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="ceaf1-612">Na przykład małych jednostek pętli mogą skorzystać z partycjonowania zakresu.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-612">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="ceaf1-613"><xref:System.Threading.Tasks.Parallel.ForEach%2A> Metoda oczekuje niestandardowe partycjonery umożliwiają dynamiczne partycjonowanie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-613">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="ceaf1-614">Aby uzyskać więcej informacji, zobacz [niestandardowe Partycjonery dla PLINQ i TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) i [porady: Implementowanie partycji dynamicznych](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-614">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="ceaf1-615">`localInit` Obiekt delegowany jest wywoływany raz dla każdego wątku, który uczestniczy w wykonywanie pętli i zwraca początkowy stan lokalnego dla każdego z tych zadań.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-615">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="ceaf1-616">Te stany początkowej są przekazywane do pierwszego `body` wywołań dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-616">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="ceaf1-617">Każdego wywołania w treści kolejnych zwraca wartość stanu prawdopodobnie modyfikacji, który jest przekazywany do następnego wywołania treści.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-617">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="ceaf1-618">Na koniec ostatniego wywołania treści na każde zadanie podrzędne zwraca wartość stanu, który jest przekazywany do `localFinally` delegować.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-618">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="ceaf1-619">`localFinally` Obiekt delegowany jest wywoływany po poszczególnych zadań do wykonania akcji końcowego na stan lokalnego dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-619">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="ceaf1-620">Ten delegat może być wywoływany współbieżnie na wiele zadań; w związku z tym należy zsynchronizować dostępu do żadnych zmiennych udostępnionych.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-620">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="ceaf1-621"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Metoda może używać większej liczby zadań niż wątki, w okresie istnienia działania jako istniejące zadania i są zastępowane przez nowe zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-621">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="ceaf1-622">Dzięki temu bazowego <xref:System.Threading.Tasks.TaskScheduler> obiektu szansę, aby dodać, zmienić lub usunąć wątki, które usługa pętli.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-622">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-623">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-623">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-624">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-624">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-625">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-625">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-626">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-626">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-627">
            <paramref name="localInit" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-627">The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-628">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-628">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-629">
            <paramref name="localFinally" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-629">The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ceaf1-630">
            <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> Właściwość <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> zwraca <see langword="false" /> lub zwraca partycjonera <see langword="null" /> partycji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-630">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-631">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-631">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-632">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-632">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-633">Typ danych w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-633">The type of the data in the source.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="ceaf1-634">Typ danych lokalnej wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-634">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-635">Źródło danych wyliczalny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-635">An enumerable data source.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="ceaf1-636">Delegat funkcji, która zwraca stan początkowy danych lokalnych dla każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-636">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-637">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-637">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="ceaf1-638">Delegat, który wykonuje końcowe akcję dla lokalnych stan każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-638">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-639">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) operacja z danymi lokalnymi wątku na <see cref="T:System.Collections.IEnumerable" /> w którym iteracje mogą być wykonywane równolegle i stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-639">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-640">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-640">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-641">`body` Obiekt delegowany jest wywoływany raz dla każdego elementu w `source` wyliczalny.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-641">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="ceaf1-642">Znajduje się z następującymi parametrami: bieżący element <xref:System.Threading.Tasks.ParallelLoopState> wystąpienie, które mogą służyć do przedwcześnie zerwać pętlę, indeks bieżącego elementu (<xref:System.Int64>), a niektóre stan lokalnego, który może być współużytkowany przez iteracje, które są wykonywane w tym samym wątku.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-642">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="ceaf1-643">`localInit` Obiekt delegowany jest wywoływany raz dla każdego zadania, które uczestniczy w wykonywanie pętli i zwraca początkowy stan lokalnego dla każdego z tych zadań.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-643">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="ceaf1-644">Te stany początkowej są przekazywane do pierwszego `body` wywołań dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-644">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="ceaf1-645">Każdego wywołania w treści kolejnych zwraca wartość stanu prawdopodobnie modyfikacji, który jest przekazywany do następnego wywołania treści.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-645">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="ceaf1-646">Na koniec ostatniego wywołania treści na każde zadanie podrzędne zwraca wartość stanu, który jest przekazywany do `localFinally` delegować.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-646">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="ceaf1-647">`localFinally` Obiekt delegowany jest wywoływany po poszczególnych zadań do wykonania akcji końcowego na stan lokalnego dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-647">The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state.</span></span> <span data-ttu-id="ceaf1-648">Ten delegat może być wywoływany współbieżnie na wiele zadań; w związku z tym należy zsynchronizować dostępu do żadnych zmiennych udostępnionych.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-648">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="ceaf1-649"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Metoda może używać większej liczby zadań niż wątki, w okresie istnienia działania jako istniejące zadania i są zastępowane przez nowe zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-649">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="ceaf1-650">Dzięki temu bazowego <xref:System.Threading.Tasks.TaskScheduler> obiektu szansę, aby dodać, zmienić lub usunąć wątki, które usługa pętli.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-650">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-651">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-651">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-652">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-652">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-653">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-653">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-654">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-654">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-655">
            <paramref name="localInit" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-655">The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-656">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-656">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-657">
            <paramref name="localFinally" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-657">The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-658">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-658">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-659">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-659">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-660">Typ danych w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-660">The type of the data in the source.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="ceaf1-661">Typ danych lokalnej wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-661">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-662">Źródło danych wyliczalny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-662">An enumerable data source.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="ceaf1-663">Delegat funkcji, która zwraca stan początkowy danych lokalnych dla każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-663">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-664">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-664">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="ceaf1-665">Delegat, który wykonuje końcowe akcję dla lokalnych stan każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-665">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-666">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) operacja z danymi lokalnymi wątku na <see cref="T:System.Collections.IEnumerable" /> w której iteracje mogą być wykonywane równolegle, a stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-666">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-667">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-667">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-668">`body` Obiekt delegowany jest wywoływany raz dla każdego elementu w `source` wyliczalny.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-668">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="ceaf1-669">Jest ona udostępniana z następującymi parametrami: bieżący element <xref:System.Threading.Tasks.ParallelLoopState> wystąpienie, które mogą służyć do zerwać pętlę przedwcześnie i niektóre stan lokalnego, który może być współużytkowany przez iteracje, które są wykonywane na tym samym wątku.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-669">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="ceaf1-670">`localInit` Obiekt delegowany jest wywoływany raz dla każdego zadania, które uczestniczy w wykonywanie pętli i zwraca początkowy stan lokalnego dla każdego z tych zadań.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-670">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="ceaf1-671">Te stany początkowej są przekazywane do pierwszego `body` wywołań dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-671">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="ceaf1-672">Każdego wywołania w treści kolejnych zwraca wartość stanu prawdopodobnie modyfikacji, który jest przekazywany do następnego wywołania treści.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-672">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="ceaf1-673">Na koniec ostatniego wywołania treści na każde zadanie podrzędne zwraca wartość stanu, który jest przekazywany do `localFinally` delegować.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-673">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="ceaf1-674">`localFinally` Obiekt delegowany jest wywoływany raz na wątek do wykonania akcji końcowego na stan lokalnego dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-674">The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state.</span></span> <span data-ttu-id="ceaf1-675">Ten delegat może być wywoływany współbieżnie na wiele zadań; w związku z tym należy zsynchronizować dostępu do żadnych zmiennych udostępnionych.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-675">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="ceaf1-676"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Metoda może używać większej liczby zadań niż wątki, w okresie istnienia działania jako istniejące zadania i są zastępowane przez nowe zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-676">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="ceaf1-677">Dzięki temu bazowego <xref:System.Threading.Tasks.TaskScheduler> obiektu szansę, aby dodać, zmienić lub usunąć wątki, które usługa pętli.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-677">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ceaf1-678">Poniższy przykład pokazuje, jak używać <xref:System.Threading.Tasks.Parallel.ForEach%2A> metoda ze stanem lokalnego:</span><span class="sxs-lookup"><span data-stu-id="ceaf1-678">The following example shows how to use a <xref:System.Threading.Tasks.Parallel.ForEach%2A> method with local state:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforeach.cs#02)]
 [!code-vb[System.Threading.Tasks.Parallel#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforeach.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-679">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-679">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-680">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-680">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-681">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-681">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-682">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-682">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-683">
            <paramref name="localInit" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-683">The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-684">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-684">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-685">
            <paramref name="localFinally" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-685">The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-686">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-686">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-687">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-687">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-688">Typ elementów w <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-688">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="ceaf1-689">Typ danych lokalnej wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-689">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-690">Prędkości partycjonera, który zawiera oryginalnego źródła danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-690">The orderable partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-691">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-691">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="ceaf1-692">Delegat funkcji, która zwraca stan początkowy danych lokalnych dla każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-692">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-693">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-693">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="ceaf1-694">Delegat, który wykonuje końcowe akcję dla lokalnych stan każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-694">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-695">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) operacji z indeksami 64-bitowych, jak i z danymi lokalnymi wątku na <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> w iteracji, które mogą być wykonywane równolegle, można skonfigurować opcje pętli i można monitorować stan pętli i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-695">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-696">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-696">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-697">To przeciążenie jest udostępniana dla scenariuszy, w której chcesz przesłonić domyślny schemat partycji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-697">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="ceaf1-698">Na przykład małych jednostek pętli mogą skorzystać z partycjonowania zakresu.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-698">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="ceaf1-699"><xref:System.Threading.Tasks.Parallel.ForEach%2A> Metoda oczekuje niestandardowe partycjonery umożliwiają dynamiczne partycjonowanie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-699">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="ceaf1-700">Aby uzyskać więcej informacji, zobacz [niestandardowe Partycjonery dla PLINQ i TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) i [porady: Implementowanie partycji dynamicznych](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-700">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="ceaf1-701">`localInit` Obiekt delegowany jest wywoływany raz dla każdego zadania, które uczestniczy w wykonywanie pętli i zwraca początkowy stan lokalnego dla każdego z tych zadań.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-701">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="ceaf1-702">Te stany początkowej są przekazywane do pierwszego `body` wywołań dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-702">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="ceaf1-703">Każdego wywołania w treści kolejnych zwraca wartość stanu prawdopodobnie modyfikacji, który jest przekazywany do następnego wywołania treści.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-703">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="ceaf1-704">Na koniec, ostatni wywołania treści w każdym wątku zwraca wartość stanu, który jest przekazywany do `localFinally` delegować.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-704">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="ceaf1-705">`localFinally` Obiekt delegowany jest wywoływany po poszczególnych zadań do wykonania akcji końcowego na stan lokalnego dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-705">The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state.</span></span> <span data-ttu-id="ceaf1-706">Ten delegat może być wywoływany współbieżnie na wiele zadań; w związku z tym należy zsynchronizować dostępu do żadnych zmiennych udostępnionych.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-706">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="ceaf1-707"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Metoda może używać większej liczby zadań niż wątki, w okresie istnienia działania jako istniejące zadania i są zastępowane przez nowe zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-707">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="ceaf1-708">Dzięki temu bazowego <xref:System.Threading.Tasks.TaskScheduler> obiektu szansę, aby dodać, zmienić lub usunąć wątki, które usługa pętli.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-708">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-709">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-709">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-710">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-710">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-711">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-711">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-712">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-712">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-713">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-713">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-714">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-714">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-715">
            <paramref name="localInit" /> Lub <paramref name="localFinally" /> argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-715">The <paramref name="localInit" /> or <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ceaf1-716">
            <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> Właściwość <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> zwraca <see langword="false" /> lub zwraca partycjonera <see langword="null" /> partycji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-716">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-717">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-717">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-718">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> argument zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-718">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-719">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-719">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-720">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-720">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-721">Typ elementów w <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-721">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="ceaf1-722">Typ danych lokalnej wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-722">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-723">Partycjonera, który zawiera oryginalnego źródła danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-723">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-724">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-724">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="ceaf1-725">Delegat funkcji, która zwraca stan początkowy danych lokalnych dla każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-725">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-726">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-726">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="ceaf1-727">Delegat, który wykonuje końcowe akcję dla lokalnych stan każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-727">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-728">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) operacja z danymi lokalnymi wątku na <see cref="T:System.Collections.Concurrent.Partitioner" /> w iteracji, które mogą być wykonywane równolegle, można skonfigurować opcje pętli, a stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-728">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation  with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-729">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-729">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-730">To przeciążenie jest udostępniana dla scenariuszy, w której chcesz przesłonić domyślny schemat partycji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-730">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="ceaf1-731">Na przykład małych jednostek pętli mogą skorzystać z partycjonowania zakresu.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-731">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="ceaf1-732"><xref:System.Threading.Tasks.Parallel.ForEach%2A> Metoda oczekuje niestandardowe partycjonery umożliwiają dynamiczne partycjonowanie.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-732">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="ceaf1-733">To przeciążenie jest udostępniana dla scenariuszy z małych jednostek pętli, które mogą skorzystać z partycjonowania statycznego zakresu.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-733">This overload is provided for scenarios with small loop bodies that might benefit from static range partitioning.</span></span> <span data-ttu-id="ceaf1-734">Partycjonery musi obsługiwać partycji dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-734">Partitioners must support dynamic partitions.</span></span>  <span data-ttu-id="ceaf1-735">Aby uzyskać więcej informacji, zobacz [niestandardowe Partycjonery dla PLINQ i TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) i [porady: Implementowanie partycji dynamicznych](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-735">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="ceaf1-736">`localInit` Obiekt delegowany jest wywoływany raz dla każdego zadania, które uczestniczy w wykonywanie pętli i zwraca początkowy stan lokalnego dla każdego z tych zadań.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-736">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="ceaf1-737">Te stany początkowej są przekazywane do pierwszego `body` wywołań dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-737">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="ceaf1-738">Każdego wywołania w treści kolejnych zwraca wartość stanu prawdopodobnie modyfikacji, który jest przekazywany do następnego wywołania treści.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-738">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="ceaf1-739">Na koniec ostatniego wywołania treści na każde zadanie podrzędne zwraca wartość stanu, który jest przekazywany do `localFinally` delegować.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-739">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="ceaf1-740">`localFinally` Obiekt delegowany jest wywoływany po poszczególnych zadań do wykonania akcji końcowego na stan lokalnego dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-740">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="ceaf1-741">Ten delegat może być wywoływany współbieżnie na wiele zadań; w związku z tym należy zsynchronizować dostępu do żadnych zmiennych udostępnionych.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-741">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="ceaf1-742"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Metoda może używać większej liczby zadań niż wątki, w okresie istnienia działania jako istniejące zadania i są zastępowane przez nowe zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-742">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="ceaf1-743">Dzięki temu bazowego <xref:System.Threading.Tasks.TaskScheduler> obiektu szansę, aby dodać, zmienić lub usunąć wątki, które usługa pętli.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-743">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-744">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-744">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-745">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-745">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-746">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-746">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-747">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-747">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-748">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-748">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-749">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-749">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-750">
            <paramref name="localInit" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-750">The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-751">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-751">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-752">
            <paramref name="localFinally" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-752">The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ceaf1-753">
            <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> Właściwość <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> zwraca <see langword="false" /> lub zwraca partycjonera <see langword="null" /> partycji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-753">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-754">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-754">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-755">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> argument zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-755">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-756">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-756">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-757">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-757">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-758">Typ danych w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-758">The type of the data in the source.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="ceaf1-759">Typ danych lokalnej wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-759">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-760">Źródło danych wyliczalny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-760">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-761">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-761">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="ceaf1-762">Delegat funkcji, która zwraca stan początkowy danych lokalnych dla każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-762">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-763">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-763">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="ceaf1-764">Delegat, który wykonuje końcowe akcję dla lokalnych stan każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-764">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-765">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) operację, podając wątków lokalnych danych i indeksów 64-bitowych w <see cref="T:System.Collections.IEnumerable" /> w iteracji, które mogą być wykonywane równolegle, można skonfigurować opcje pętli, a stan pętli dało się monitorować i manipulować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-765">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data and 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-766">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-766">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-767">`body` Obiekt delegowany jest wywoływany raz dla każdego elementu w `source` wyliczalny.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-767">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="ceaf1-768">Znajduje się z następującymi parametrami: bieżący element <xref:System.Threading.Tasks.ParallelLoopState> wystąpienie, które mogą służyć do przedwcześnie zerwać pętlę, indeks bieżącego elementu (<xref:System.Int64>), a niektóre stan lokalnego, który może być współużytkowany przez iteracje, które są wykonywane w tym samym wątku.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-768">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="ceaf1-769">`localInit` Obiekt delegowany jest wywoływany raz dla każdego zadania, które uczestniczy w wykonywanie pętli i zwraca początkowy stan lokalnego dla każdego z tych zadań.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-769">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="ceaf1-770">Te stany początkowej są przekazywane do pierwszego `body` wywołań dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-770">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="ceaf1-771">Każdego wywołania w treści kolejnych zwraca wartość stanu prawdopodobnie modyfikacji, który jest przekazywany do następnego wywołania treści.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-771">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="ceaf1-772">Na koniec ostatniego wywołania treści na każde zadanie podrzędne zwraca wartość stanu, który jest przekazywany do `localFinally` delegować.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-772">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="ceaf1-773">`localFinally` Obiekt delegowany jest wywoływany raz na wątek do wykonania akcji końcowego na stan lokalnego dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-773">The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state.</span></span> <span data-ttu-id="ceaf1-774">Ten delegat może być wywoływany współbieżnie na wiele zadań; w związku z tym należy zsynchronizować dostępu do żadnych zmiennych udostępnionych.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-774">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="ceaf1-775"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Metoda może używać większej liczby zadań niż wątki, w okresie istnienia działania jako istniejące zadania i są zastępowane przez nowe zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-775">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="ceaf1-776">Dzięki temu bazowego <xref:System.Threading.Tasks.TaskScheduler> obiektu szansę, aby dodać, zmienić lub usunąć wątki, które usługa pętli.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-776">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-777">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-777">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-778">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-778">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-779">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-779">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-780">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-780">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-781">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-781">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-782">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-782">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-783">
            <paramref name="localInit" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-783">The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-784">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-784">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-785">
            <paramref name="localFinally" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-785">The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-786">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> argument zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-786">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-787">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-787">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-788">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-788">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-789">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-789">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="ceaf1-790">Typ danych w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-790">The type of the data in the source.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="ceaf1-791">Typ danych lokalnej wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-791">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="ceaf1-792">Źródło danych wyliczalny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-792">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-793">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-793">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="ceaf1-794">Delegat funkcji, która zwraca stan początkowy danych lokalnych dla każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-794">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="ceaf1-795">Delegat, który jest wywoływana jeden raz na iterację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-795">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="ceaf1-796">Delegat, który wykonuje końcowe akcję dla lokalnych stan każdego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-796">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-797">Wykonuje <see langword="foreach" /> (<see langword="For Each" /> w języku Visual Basic) operacja z danymi lokalnymi wątku na <see cref="T:System.Collections.IEnumerable" /> w iteracji, które mogą być wykonywane równolegle, można skonfigurować opcje pętli, a stan pętli dało się monitorować i manipulować...</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-797">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated..</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceaf1-798">Struktura, która zawiera informacje o część pętli ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-798">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-799">`body` Obiekt delegowany jest wywoływany raz dla każdego elementu w `source` wyliczalny.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-799">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="ceaf1-800">Jest ona udostępniana z następującymi parametrami: bieżący element <xref:System.Threading.Tasks.ParallelLoopState> wystąpienie, które mogą służyć do zerwać pętlę przedwcześnie i niektóre stan lokalnego, który może być współużytkowany przez iteracje, które są wykonywane na tym samym wątku.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-800">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="ceaf1-801">`localInit` Obiekt delegowany jest wywoływany raz dla każdego zadania, które uczestniczy w wykonywanie pętli i zwraca początkowy stan lokalnego dla każdego z tych zadań.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-801">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="ceaf1-802">Te stany początkowej są przekazywane do pierwszego `body` wywołań dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-802">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="ceaf1-803">Każdego wywołania w treści kolejnych zwraca wartość stanu prawdopodobnie modyfikacji, który jest przekazywany do następnego wywołania treści.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-803">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="ceaf1-804">Na koniec ostatniego wywołania treści na każde zadanie podrzędne zwraca wartość stanu, który jest przekazywany do `localFinally` delegować.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-804">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="ceaf1-805">`localFinally` Obiekt delegowany jest wywoływany raz na wątek do wykonania akcji końcowego na stan lokalnego dla każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-805">The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state.</span></span> <span data-ttu-id="ceaf1-806">Ten delegat może być wywoływany współbieżnie na wiele zadań; w związku z tym należy zsynchronizować dostępu do żadnych zmiennych udostępnionych.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-806">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="ceaf1-807"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Metoda może używać większej liczby zadań niż wątki, w okresie istnienia działania jako istniejące zadania i są zastępowane przez nowe zadania.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-807">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="ceaf1-808">Dzięki temu bazowego <xref:System.Threading.Tasks.TaskScheduler> obiektu szansę, aby dodać, zmienić lub usunąć wątki, które usługa pętli.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-808">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-809">
            <paramref name="source" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-809">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-810">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-810">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-811">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-811">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-812">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-812">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-813">
            <paramref name="body" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-813">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-814">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-814">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-815">
            <paramref name="localInit" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-815">The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-816">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-816">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-817">
            <paramref name="localFinally" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-817">The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-818">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> argument zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-818">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-819">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-819">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-820">Wyjątek, który zawiera wszystkie poszczególne wyjątki generowane we wszystkich wątkach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-820">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)">
          <span data-ttu-id="ceaf1-821">Pętle równoległe</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-821">Parallel Loops</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ceaf1-822">Wykonuje każdego z podanych akcji prawdopodobnie równolegle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-822">Executes each of the provided actions, possibly in parallel.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Action[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Invoke (ParamArray actions As Action())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke actions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actions">
          <span data-ttu-id="ceaf1-823">Tablica <see cref="T:System.Action" /> do wykonania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-823">An array of <see cref="T:System.Action" /> to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-824">Wykonuje każdego z podanych akcji prawdopodobnie równolegle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-824">Executes each of the provided actions, possibly in parallel.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-825">Ta metoda może służyć do wykonywania zestawu działań, potencjalnie równolegle.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-825">This method can be used to execute a set of operations, potentially in parallel.</span></span>  
  
 <span data-ttu-id="ceaf1-826">Nie gwarancji są wprowadzane dotyczące zamówienia, w którym wykonywanie operacji lub czy są wykonywane równolegle.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-826">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="ceaf1-827">Ta metoda nie zwraca dopóki nie zakończy się każdej z podanych operacji, niezależnie od tego, czy Zakończenie występuje ze względu na zakończenie normalnych i wyjątkowych.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-827">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="ceaf1-828">Aby uzyskać więcej informacji, zobacz [porady: użycie parallel_invoke podczas przeprowadzania do operacji równoległych](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-828">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ceaf1-829">W tym przykładzie przedstawiono sposób użycia <xref:System.Threading.Tasks.Parallel.Invoke%2A> metody za pomocą innych metod, anonimowe delegaci i wyrażenia lambda.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-829">This example demonstrates how to use the <xref:System.Threading.Tasks.Parallel.Invoke%2A> method with other methods, anonymous delegates, and lambda expressions.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelinvoke.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelinvoke.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-830">
            <paramref name="actions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-830">The <paramref name="actions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-831">Wyjątek, który jest generowany, gdy wszystkie działania w <paramref name="actions" /> tablicy zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-831">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ceaf1-832">
            <paramref name="actions" /> Tablica zawiera <see langword="null" /> elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-832">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (System.Threading.Tasks.ParallelOptions parallelOptions, params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(System::Threading::Tasks::ParallelOptions ^ parallelOptions, ... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Threading.Tasks.ParallelOptions * Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke (parallelOptions, actions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parallelOptions">
          <span data-ttu-id="ceaf1-833">Obiekt, który służy do konfigurowania zachowania tej operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-833">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="actions">
          <span data-ttu-id="ceaf1-834">Tablica akcje do wykonania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-834">An array of actions to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceaf1-835">Wykonuje każdego z podanych akcji, być może w sposób równoległy, chyba, że operacja została anulowana przez użytkownika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-835">Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceaf1-836">Ta metoda może służyć do wykonywania zestawu działań, potencjalnie równolegle.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-836">This method can be used to execute a set of operations, potentially in parallel.</span></span> <span data-ttu-id="ceaf1-837">Token anulowania przekazywany przy użyciu <xref:System.Threading.Tasks.ParallelOptions> struktura zapewnia obiekt wywołujący, aby anulować całej operacji.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-837">The cancellation token passed in with the <xref:System.Threading.Tasks.ParallelOptions> structure enables the caller to cancel the entire operation.</span></span> <span data-ttu-id="ceaf1-838">Aby uzyskać więcej informacji, zobacz [anulowanie w zarządzanych wątkach](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-838">For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
 <span data-ttu-id="ceaf1-839">Nie gwarancji są wprowadzane dotyczące zamówienia, w którym wykonywanie operacji lub czy są wykonywane równolegle.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-839">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="ceaf1-840">Ta metoda nie zwraca dopóki nie zakończy się każdej z podanych operacji, niezależnie od tego, czy Zakończenie występuje ze względu na zakończenie normalnych i wyjątkowych.</span><span class="sxs-lookup"><span data-stu-id="ceaf1-840">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="ceaf1-841">Aby uzyskać więcej informacji, zobacz [porady: użycie parallel_invoke podczas przeprowadzania do operacji równoległych](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span><span class="sxs-lookup"><span data-stu-id="ceaf1-841">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="ceaf1-842">
            <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> jest ustawiona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-842">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> is set.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceaf1-843">
            <paramref name="actions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-843">The <paramref name="actions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ceaf1-844">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-844">-or-</span>
          </span>
          <span data-ttu-id="ceaf1-845">
            <paramref name="parallelOptions" /> Argument jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-845">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ceaf1-846">Wyjątek, który jest generowany, gdy wszystkie działania w <paramref name="actions" /> tablicy zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-846">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ceaf1-847">
            <paramref name="actions" /> Tablica zawiera <see langword="null" /> elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-847">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ceaf1-848">
            <see cref="T:System.Threading.CancellationTokenSource" /> Skojarzone z <see cref="T:System.Threading.CancellationToken" /> w <paramref name="parallelOptions" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceaf1-848">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>