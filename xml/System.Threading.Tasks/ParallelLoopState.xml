<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="af16a98f705e63e2ba868d464648af2e365bcb9a" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48619333" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Umożliwia iteracji pętli równoległych do interakcji z innymi iteracji. Wystąpienie tej klasy są dostarczane przez <see cref="T:System.Threading.Tasks.Parallel" /> klasy do każdej pętli; nie można utworzyć wystąpienia w kodzie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy pamiętać, że nie można utworzyć wystąpienia wystąpienia tej klasy. Automatycznie jest generowany przez kompilator jako argument w wywołaniu <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> lub <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> metody. Przykład stanowi ilustrację.  
  
 Konstrukcje, takie jak `for` i `foreach` (w języku C#) i `For` i `For Each` (w języku Visual Basic) wykonywania sekwencyjnie od najniższego indeksu do najwyższego lub z pierwszego obiektu w zestawie do ostatniego. Z kolei <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> i <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> nie metody. Ponieważ poszczególne iteracje pętli są uruchamiane równolegle, mogą rozpocząć i zakończyć w dowolnej kolejności. <xref:System.Threading.Tasks.ParallelLoopState> Klasa umożliwia poszczególne iteracje pętli równoległych wchodzić w interakcje ze sobą. <xref:System.Threading.Tasks.ParallelLoopState> Klasa umożliwia:  
  
-   Zakończ bieżącą iterację i uniknąć wszelkich dodatkowych iteracji, uruchamianie, wywołując <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody. Nie ma to wpływu na iteracji, które rozpoczęły już wykonywania.  
  
-   Wszystkie iteracje z indeksem większy niż bieżący indeks uniemożliwić wykonywanie przez wywołanie metody <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody. Nie ma to wpływu na iteracji, które rozpoczęły już wykonywania.  
  
-   Określić, czy wystąpił wyjątek w dowolnym iteracji pętli poprzez pobranie wartości <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> właściwości.  
  
-   Określić, czy wywołał dowolną iterację pętli <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metoda poprzez pobranie wartości <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> właściwości. Ta właściwość służy do zwrócenia z iteracji pętli, który uruchamiany przed wywołaniem do <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody, ale są nadal wykonywane.  
  
-   Określić, czy wywołał dowolną iterację pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> lub <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody lub został zgłoszony wyjątek, poprzez pobranie wartości <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> właściwości.  
  
-   Wyjście z iteracji długotrwałych, której indeks jest większy niż indeks iteracji, w której wywołano podziału poprzez pobranie wartości <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład wykonuje maksymalnie 100 iteracji pętli równolegle. Każda iteracja zatrzymuje się na losowo wybranym interwałem z zakresu od 1 do 1000 milisekund. Określa losowo wygenerowaną wartość, na które iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metoda jest wywoływana. Jak wynika z przykładzie nie iteracji, w której indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> początek wartości właściwości po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Ponieważ iteracje pętli będzie prawdopodobnie nadal wykonywać kiedy <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metoda jest wywoływana, wywołania każdej iteracji <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> właściwość do sprawdzenia, czy innej iteracji została wywołana <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody. Jeśli wartość właściwości jest `true`, iteracji sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości i, jeśli jest większa niż wartość indeksu bieżącej iteracji, zwraca natychmiast.  
  
 ]]></format>
    </remarks>
    <threadsafe>A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> wystąpienia jest przeznaczona do użycia tylko w treści pętli, do której podano wystąpienia.  Nie jest bezpieczny w użyciu podana <see cref="T:System.Threading.Tasks.ParallelLoopState" /> wystąpienie po pętli skojarzone zostaje zakończona, ani bezpiecznie jawnie przekazują je dla innych wątków i mają te wątki do niego dostęp w dowolnym momencie.  Inną <see cref="T:System.Threading.Tasks.ParallelLoopState" /> wystąpienia zostanie udzielona każdego wątku, które są zaangażowane w pętli.</threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Równoległość danych (Biblioteka zadań równoległych)</related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Komunikuje się, że <see cref="T:System.Threading.Tasks.Parallel" /> pętla powinna zakończyć wykonywania iteracji poza bieżącą iterację na wzięcie systemu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Wskazuje nie iteracji po bieżącej iteracji powinna być uruchamiana. Skutecznie spowoduje anulowanie wszelkich dodatkowych iteracji pętli. Jednak nie zatrzymuje wszelkie iteracji, które rozpoczęły już wykonywania. Na przykład jeśli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> jest wywoływana z 100 iteracji pętli równoległej iteracja z zakresu od 0 do 1000, wszystkie iteracje mniej niż 100 powinny nadal być przebiegu, ale iteracji od 101 do 1000, które nie zostały uruchomione nie są wykonywane.  
  
 Dla iteracji długotrwałych, które mogą być już wykonywane <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> ustawia <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwość indeks bieżącej iteracji, jeśli bieżący indeks jest mniejsza niż bieżąca wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>. Aby zatrzymać iteracji, w której indeks jest większy niż najniższy iteracji przerwania wykonywania konkurencyjnych, należy wykonać następujące:  
  
1.  Sprawdź, czy <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> właściwość `true`.  
  
2.  Opuszczenie iteracji, jeśli jego indeks jest większa niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartości właściwości.  
  
 Przykład stanowi ilustrację.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Zazwyczaj jest zatrudniony na podstawie wyszukiwania algorytmów, w którym kolejność znajduje się w źródle danych.  
  
   
  
## Examples  
 Poniższy przykład wykonuje maksymalnie 100 iteracji pętli równolegle. Każda iteracja zatrzymuje się na losowo wybranym interwałem z zakresu od 1 do 1000 milisekund. Określa losowo wygenerowaną wartość, na które iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metoda jest wywoływana. Jak wynika z przykładzie nie iteracji, w której indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> początek wartości właściwości po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Ponieważ iteracje pętli będzie prawdopodobnie nadal wykonywać kiedy <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metoda jest wywoływana, wywołania każdej iteracji <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> właściwość do sprawdzenia, czy innej iteracji została wywołana <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody. Jeśli wartość właściwości jest `true`, iteracji sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości i, jeśli jest większa niż wartość indeksu bieżącej iteracji, zwraca natychmiast.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> Wcześniej wywołano metodę. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> i <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> nie mogą być używane w połączeniu przez iteracje tej samej pętli.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Równoległość danych (Biblioteka zadań równoległych)</related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje, czy wszystkie iteracji pętli został zgłoszony wyjątek, który wystąpił nieobsługiwany przez tej iteracji.</summary>
        <value><see langword="true" /> Jeśli wystąpił nieobsługiwany wyjątek; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Równoległość danych (Biblioteka zadań równoległych)</related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informację, czy wywołał dowolną iterację pętli <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> metody.</summary>
        <value><see langword="true" /> Jeśli dowolną iterację została zatrzymana pętli, wywołując <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> metoda; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla długotrwałych iteracji pętli, można pobrać wartość <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> właściwości w celu określenia, czy wszystkie iteracje pętli rozpoczęcia wykonywania przed wywołaniem do <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody są nadal wykonywane. Następnie można użyć wartości <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> właściwości w celu określenia, czy należy niezwłocznie zawrócone lub wykonać normalnie.  
  
   
  
## Examples  
 Poniższy przykład wykonuje maksymalnie 10 000 iteracji pętli równolegle. Każda iteracja zatrzymuje się na losowo wybranym interwałem z zakresu od 1 do 1000 milisekund. Określa losowo wygenerowaną wartość, na które iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metoda jest wywoływana. Ponieważ iteracje pętli będzie prawdopodobnie nadal wykonywać kiedy <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metoda jest wywoływana, wywołań wyrażeń lambda <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> metodę sprawdzania, czy innej iteracji została wywołana <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody. Jeśli zostanie zwrócona `true`, niezwłocznie iteracji.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Równoległość danych (Biblioteka zadań równoległych)</related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera najniższy iteracji pętli, z którego <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> została wywołana.</summary>
        <value>Najniższy iteracji, z którego <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> została wywołana. W przypadku właściwości <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> pętli, wartość jest oparty na indeks wygenerowane wewnętrznie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Istnieje możliwość, że wiele iteracji pętli równoległej, aby wywołać <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody. Jeśli tak, ta wartość jest najmniejszy indeks iteracji, która wywołała <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Jeśli nie iteracji pętli wywołuje <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, właściwość ta zwraca `null`. Należy pamiętać, że wartość właściwości jest niezależny od wywołania <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody.  
  
 W iteracji długotrwałych, w których wszystkich iteracji po iteracji, która wywołuje <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody nie muszą uruchamiać, <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwość jest używana do iteracji, które w chwili rozpoczęcia wykonywania przed wywołaniem do zakończenia <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody. Aby zatrzymać iteracji, w której indeks jest większy niż najniższy iteracji przerwania wykonywania konkurencyjnych, należy wykonać następujące:  
  
1.  Sprawdź, czy <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> właściwość `true`.  
  
2.  Opuszczenie iteracji, jeśli jego indeks jest większa niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartości właściwości.  
  
 Przykład stanowi ilustrację.  
  
   
  
## Examples  
 Poniższy przykład wykonuje maksymalnie 100 iteracji pętli równolegle. Każda iteracja zatrzymuje się na losowo wybranym interwałem z zakresu od 1 do 1000 milisekund. Określa losowo wygenerowaną wartość, na które iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metoda jest wywoływana. Zapobiega to iteracji, w której indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość właściwości uruchamianie po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody, ale nie ma wpływu na dowolnym iteracji, które rozpoczęły już wykonywania. Aby uniknąć tych ukończenie, wywołuje każdą iteracją <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> metodę sprawdzania, czy innej iteracji została wywołana <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody. Jeśli tak, iteracji sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości i, jeśli jest większa niż wartość indeksu bieżącej iteracji, zwraca natychmiast.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Należy zauważyć, że ponieważ <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość jest poza zakresem poza pętlę równoległą, musisz przypisać ją do zmiennej, która jest widoczne na zewnątrz pętli, jeśli chcesz zachować jego wartość.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Równoległość danych (Biblioteka zadań równoległych)</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informację, czy bieżąca iteracja pętli powinno powodować wyjście zależnie od żądań wysyłanych przez to lub inne iteracji.</summary>
        <value><see langword="true" /> Jeśli bieżąca iteracja powinno powodować wyjście; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Właściwość jest ustawiona na `true` w żadnej z następujących warunków:  
  
-   Iteracji pętli wywołań <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> lub <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.  
  
-   Iteracji pętli zgłasza wyjątek.  
  
-   Pętla została anulowana.  
  
 Gdy ta właściwość jest `true`, <xref:System.Threading.Tasks.Parallel> klasy aktywnie będzie podejmować próby uniemożliwiają uruchamianie wykonywania dodatkowych iteracji pętli. Jednak może być przypadki, w której nie jest w stanie uniknąć dodatkowych iteracji uruchamianie.  
  
 Może to być również przypadek iteracji długotrwałych rozpoczął już wykonywania. W takich przypadkach iteracji może jawnie sprawdziła <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> właściwości i zaprzestanie wykonywania, jeśli właściwość ta zwraca `true`.  
  
   
  
## Examples  
 Poniższy przykład wykonuje maksymalnie 100 iteracji pętli równolegle. Każda iteracja zatrzymuje się na losowo wybranym interwałem z zakresu od 1 do 1000 milisekund. Określa losowo wygenerowaną wartość, na które iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metoda jest wywoływana. Zapobiega to iteracji, w której indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość właściwości uruchamianie po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody, ale nie ma wpływu na dowolnym iteracji, które rozpoczęły już wykonywania. Aby uniknąć tych ukończenie, wywołuje każdą iteracją <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> metodę sprawdzania, czy innej iteracji została wywołana <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody. Jeśli tak, iteracji sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości i, jeśli jest większa niż wartość indeksu bieżącej iteracji, zwraca natychmiast.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Równoległość danych (Biblioteka zadań równoległych)</related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Komunikuje się, że <see cref="T:System.Threading.Tasks.Parallel" /> pętli należy przerwać wykonywanie w sposobności systemu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metoda wskazuje iteracji pętli, które nie zostały rozpoczęte nie muszą być uruchamiane. Skutecznie spowoduje anulowanie wszelkich dodatkowych iteracji pętli. Jednak nie zatrzymuje wszelkie iteracji, które rozpoczęły już wykonywania.  
  
 Wywoływanie <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> powoduje, że metoda <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> właściwości do zwrócenia `true` dla dowolnego iteracji pętli, która jest nadal wykonywane. Jest to szczególnie przydatne w przypadku długotrwałych iteracji, które można sprawdzić <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> właściwości i zamknąć wcześnie, gdy jego wartość jest `true`.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Zazwyczaj jest zatrudniony na podstawie wyszukiwania algorytmów, gdzie po wynik jest iteracji znaleziono, żadne inne muszą być wykonywane.  
  
   
  
## Examples  
 Poniższy przykład wykonuje maksymalnie 10 000 iteracji pętli równolegle. Każda iteracja zatrzymuje się na losowo wybranym interwałem z zakresu od 1 do 1000 milisekund. Określa losowo wygenerowaną wartość, na które iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metoda jest wywoływana. Dane wyjściowe z przykładu pokazują, nie iteracji wykonania po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 Ponieważ iteracje pętli będzie prawdopodobnie nadal wykonywać kiedy <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metoda jest wywoływana, wywołania każdej iteracji <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> metodę sprawdzania, czy innej iteracji została wywołana <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody. Jeśli zostanie zwrócona `true`, niezwłocznie iteracji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> Wcześniej wywołano metodę. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> i <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> nie mogą być używane w połączeniu przez iteracje tej samej pętli.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Równoległość danych (Biblioteka zadań równoległych)</related>
      </Docs>
    </Member>
  </Members>
</Type>