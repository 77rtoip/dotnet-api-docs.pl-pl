<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3e4244160069333f5d930b81c7b54173c2ad6d6a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1077d-101">Umożliwia iteracji pętli równoległej na interakcję z innych iteracji.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1077d-101">Enables iterations of parallel loops to interact with other iterations.</span>
      </span>
      <span data-ttu-id="1077d-102">Wystąpienie tej klasy są dostarczane przez <see cref="T:System.Threading.Tasks.Parallel" /> klasy do każdej pętli; nie można utworzyć wystąpienia w kodzie.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1077d-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1077d-103">Należy pamiętać, że nie można utworzyć wystąpienia wystąpienia tej klasy.</span><span class="sxs-lookup"><span data-stu-id="1077d-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="1077d-104">Jest ona generowana automatycznie przez kompilator jako argument w wywołaniu <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> lub <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="1077d-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="1077d-105">Przykład stanowi ilustrację.</span><span class="sxs-lookup"><span data-stu-id="1077d-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="1077d-106">Tworzy, takich jak `for` i `foreach` (w języku C#) i `For` i `For Each` (w języku Visual Basic) wykonaj kolejno z najniższym indeksie jako najwyższe lub z pierwszego obiektu w zestawie do ostatniego.</span><span class="sxs-lookup"><span data-stu-id="1077d-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="1077d-107">Z kolei <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> i <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> nie metody.</span><span class="sxs-lookup"><span data-stu-id="1077d-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="1077d-108">Ponieważ poszczególnych iteracji pętli są uruchamiane równolegle, mogą rozpocząć i zakończyć w dowolnej kolejności.</span><span class="sxs-lookup"><span data-stu-id="1077d-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="1077d-109"><xref:System.Threading.Tasks.ParallelLoopState> Klasa umożliwia poszczególnych iteracji pętli równoległej na interakcję ze sobą.</span><span class="sxs-lookup"><span data-stu-id="1077d-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="1077d-110"><xref:System.Threading.Tasks.ParallelLoopState> Klasa umożliwia:</span><span class="sxs-lookup"><span data-stu-id="1077d-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="1077d-111">Zakończ bieżącą iterację i zapobiec wszelkie dodatkowe iteracji uruchamianiu przez wywołanie metody <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1077d-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="1077d-112">Nie dotyczy to iteracji, które już zostały rozpoczęte wykonywania.</span><span class="sxs-lookup"><span data-stu-id="1077d-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="1077d-113">Wszystkie iteracje z indeksem większa niż bieżący indeks uniemożliwić wykonywania przez wywołanie metody <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1077d-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="1077d-114">Nie dotyczy to iteracji, które już zostały rozpoczęte wykonywania.</span><span class="sxs-lookup"><span data-stu-id="1077d-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="1077d-115">Określić, czy wystąpił wyjątek w dowolnym iteracji pętli pobierając zaletą <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="1077d-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="1077d-116">Określić, czy została wywołana żadnych iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody pobierając zaletą <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="1077d-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="1077d-117">Ta właściwość służy do zwrócenia z iteracji pętli, które uruchomiona przed wywołanie <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody, ale są nadal wykonywane.</span><span class="sxs-lookup"><span data-stu-id="1077d-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="1077d-118">Określić, czy wszystkie iteracji pętli została wywołana <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> lub <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody lub wywołało wyjątek pobierając zaletą <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="1077d-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="1077d-119">Wyjście z iteracji długotrwałe, którego indeks jest większy niż indeks iteracji, w którym Break została wywołana przez pobieranie wartości <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="1077d-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1077d-120">Poniższy przykład wykonuje maksymalnie 100 iteracji pętli równolegle.</span><span class="sxs-lookup"><span data-stu-id="1077d-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="1077d-121">Wstrzymuje każdej iteracji dla losowo wybranym interwałem z zakresu od 1 do 1000 milisekund.</span><span class="sxs-lookup"><span data-stu-id="1077d-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="1077d-122">Określa losowo generowanej wartości, na które iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="1077d-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="1077d-123">Jako dane wyjściowe w przykładzie pokazano, nie iteracji, którego indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> początek wartości właściwości po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1077d-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="1077d-124">Ponieważ iteracji pętli są nadal mogą być wykonywane podczas <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metoda jest wywoływana, wywołuje każdej iteracji <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> właściwość do sprawdzenia, czy inny iteracji została wywołana <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1077d-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="1077d-125">Jeśli wartość właściwości jest `true`, iteracji sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości i, jeśli jest większa niż wartość indeksu bieżącej iteracji, zwraca natychmiast.</span><span class="sxs-lookup"><span data-stu-id="1077d-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="1077d-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> wystąpienia jest przeznaczona do użycia tylko w treści pętli, do którego podano wystąpienia.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1077d-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span>
      </span>
      <span data-ttu-id="1077d-127">Nie jest bezpieczne użyć podanego <see cref="T:System.Threading.Tasks.ParallelLoopState" /> wystąpienia po pętli skojarzone zostaje zakończona, ani bezpiecznie jawnie oddaniem do innych wątków i mają te wątków do niego dostęp w dowolnym momencie.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1077d-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span>
      </span>
      <span data-ttu-id="1077d-128">Inną <see cref="T:System.Threading.Tasks.ParallelLoopState" /> wystąpienia, które zostaną dostarczone do każdego wątku zaangażowane w pętli.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1077d-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1077d-129">Komunikuje się, że <see cref="T:System.Threading.Tasks.Parallel" /> pętla powinna zakończyć wykonywania iteracji poza bieżącą iterację wygodne najwcześniejszą systemu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1077d-129">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1077d-130"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Wskazuje nie iteracji po bieżącej iteracji powinna być uruchamiana.</span><span class="sxs-lookup"><span data-stu-id="1077d-130"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="1077d-131">Umożliwia anulowanie skutecznie wszelkie dodatkowe iteracji pętli.</span><span class="sxs-lookup"><span data-stu-id="1077d-131">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="1077d-132">Jednak nie zatrzymuje wszystkie iteracje już rozpoczęto wykonywanie.</span><span class="sxs-lookup"><span data-stu-id="1077d-132">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="1077d-133">Na przykład jeśli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> jest wywoływana z 100 iteracji pętli równoległej iteracja z zakresu od 0 do 1000, wszystkie iteracje mniej niż 100 powinien nadal wykonywania, ale iteracji od 101 do 1000, które nie zostały uruchomione nie są wykonywane.</span><span class="sxs-lookup"><span data-stu-id="1077d-133">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="1077d-134">Dla iteracji długotrwałe, które mogą być już wykonuje <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> ustawia <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> indeks bieżącej iteracji, jeśli bieżący indeks jest mniejszy niż bieżąca wartość dla właściwości <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span><span class="sxs-lookup"><span data-stu-id="1077d-134">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="1077d-135">Aby zatrzymać iteracji, którego indeks jest większy niż najniższy iteracji podziału pochodzący z wykonania na konkurencyjnych, należy wykonać następujące:</span><span class="sxs-lookup"><span data-stu-id="1077d-135">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="1077d-136">Sprawdź, czy <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> jest właściwość `true`.</span><span class="sxs-lookup"><span data-stu-id="1077d-136">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="1077d-137">Wyjść z iteracji, jeśli jego indeksu jest większa niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="1077d-137">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="1077d-138">Przykład stanowi ilustrację.</span><span class="sxs-lookup"><span data-stu-id="1077d-138">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="1077d-139"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Zazwyczaj jest stosowanych w algorytmów na podstawie wyszukiwania, których kolejność znajduje się w źródle danych.</span><span class="sxs-lookup"><span data-stu-id="1077d-139"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1077d-140">Poniższy przykład wykonuje maksymalnie 100 iteracji pętli równolegle.</span><span class="sxs-lookup"><span data-stu-id="1077d-140">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="1077d-141">Wstrzymuje każdej iteracji dla losowo wybranym interwałem z zakresu od 1 do 1000 milisekund.</span><span class="sxs-lookup"><span data-stu-id="1077d-141">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="1077d-142">Określa losowo generowanej wartości, na które iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="1077d-142">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="1077d-143">Jako dane wyjściowe w przykładzie pokazano, nie iteracji, którego indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> początek wartości właściwości po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1077d-143">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="1077d-144">Ponieważ iteracji pętli są nadal mogą być wykonywane podczas <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metoda jest wywoływana, wywołuje każdej iteracji <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> właściwość do sprawdzenia, czy inny iteracji została wywołana <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1077d-144">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="1077d-145">Jeśli wartość właściwości jest `true`, iteracji sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości i, jeśli jest większa niż wartość indeksu bieżącej iteracji, zwraca natychmiast.</span><span class="sxs-lookup"><span data-stu-id="1077d-145">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1077d-146">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> Wcześniej wywołano metodę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1077d-146">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span>
          </span>
          <span data-ttu-id="1077d-147">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> i <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> nie mogą być używane w połączeniu przez iteracji pętli tej samej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1077d-147">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1077d-148">Pobiera informacje, czy wszystkie iteracji pętli zgłosił wyjątek, który wystąpił nieobsługiwany przez ten iteracji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1077d-148">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1077d-149">
            <see langword="true" /> Jeśli wystąpił nieobsługiwany wyjątek; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1077d-149">
              <see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1077d-150">Pobiera informację, czy została wywołana żadnych iteracji pętli <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1077d-150">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1077d-151">
            <see langword="true" /> Jeśli dowolną iterację zatrzymał pętli poprzez wywołanie <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> metody; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1077d-151">
              <see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1077d-152">Dla długotrwałe iteracji pętli, można pobrać wartość <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> właściwości w celu określenia, czy wszystkie iteracji pętli rozpoczęcia wykonywania przed wywołaniem do <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody są nadal wykonywane.</span><span class="sxs-lookup"><span data-stu-id="1077d-152">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="1077d-153">Następnie można użyć wartości <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> właściwość, aby ustalić, czy powinien zwrócić natychmiast lub wykonać normalnie.</span><span class="sxs-lookup"><span data-stu-id="1077d-153">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1077d-154">Poniższy przykład wykonuje maksymalnie 10 000 iteracji pętli równolegle.</span><span class="sxs-lookup"><span data-stu-id="1077d-154">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="1077d-155">Wstrzymuje każdej iteracji dla losowo wybranym interwałem z zakresu od 1 do 1000 milisekund.</span><span class="sxs-lookup"><span data-stu-id="1077d-155">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="1077d-156">Określa losowo generowanej wartości, na które iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="1077d-156">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="1077d-157">Ponieważ iteracji pętli są nadal mogą być wykonywane podczas <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metoda jest wywoływana, wywołania wyrażenia lambda <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> , aby sprawdzić, czy inny iteracji została wywołana <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1077d-157">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="1077d-158">Jeśli zmienna zwraca `true`, iteracji zwraca natychmiast.</span><span class="sxs-lookup"><span data-stu-id="1077d-158">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1077d-159">Pobiera najniższy iteracji pętli, z którego <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> została wywołana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1077d-159">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1077d-160">Najniższa iteracji, z którego <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> została wywołana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1077d-160">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
          <span data-ttu-id="1077d-161">W przypadku liczby <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> pętli, wartość jest oparta na indeks wygenerowane wewnętrznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1077d-161">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1077d-162">Użytkownik może przejść przez wiele iteracji pętli równoległej do wywołania <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1077d-162">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="1077d-163">Jeśli nie, ta wartość jest najmniejszy indeks iteracji, który wywołał <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span><span class="sxs-lookup"><span data-stu-id="1077d-163">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="1077d-164">Jeśli nie iteracji pętli o nazwie <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, ta właściwość zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="1077d-164">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="1077d-165">Należy pamiętać, że wartość właściwości jest poza zasięgiem wywołania <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1077d-165">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="1077d-166">W iteracji długotrwałe, w których wszystkie iteracje po iteracji, który wywołuje <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> — metoda nie należy uruchomić, <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwość jest używana do zakończenia iteracji rozpoczęcia wykonywania przed wywołaniem do <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1077d-166">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="1077d-167">Aby zatrzymać iteracji, którego indeks jest większy niż najniższy iteracji podziału pochodzący z wykonania na konkurencyjnych, należy wykonać następujące:</span><span class="sxs-lookup"><span data-stu-id="1077d-167">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="1077d-168">Sprawdź, czy <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> jest właściwość `true`.</span><span class="sxs-lookup"><span data-stu-id="1077d-168">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="1077d-169">Wyjść z iteracji, jeśli jego indeksu jest większa niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="1077d-169">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="1077d-170">Przykład stanowi ilustrację.</span><span class="sxs-lookup"><span data-stu-id="1077d-170">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1077d-171">Poniższy przykład wykonuje maksymalnie 100 iteracji pętli równolegle.</span><span class="sxs-lookup"><span data-stu-id="1077d-171">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="1077d-172">Wstrzymuje każdej iteracji dla losowo wybranym interwałem z zakresu od 1 do 1000 milisekund.</span><span class="sxs-lookup"><span data-stu-id="1077d-172">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="1077d-173">Określa losowo generowanej wartości, na które iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="1077d-173">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="1077d-174">Zapobiega to iteracji, którego indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość właściwości uruchomienie po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody, ale nie wpływa na wszystkie iteracje już rozpoczęto wykonywanie.</span><span class="sxs-lookup"><span data-stu-id="1077d-174">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="1077d-175">Aby uniknąć tych ukończenie, wywołuje każdej iteracji <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> , aby sprawdzić, czy inny iteracji została wywołana <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1077d-175">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="1077d-176">Jeśli tak, iteracji sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości i, jeśli jest większa niż wartość indeksu bieżącej iteracji, zwraca natychmiast.</span><span class="sxs-lookup"><span data-stu-id="1077d-176">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="1077d-177">Należy zauważyć, że ponieważ <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość jest poza zakresem poza pętlą równoległe, należy go przypisać do zmiennej, która jest widoczne na zewnątrz pętli, jeśli chcesz zachować jego wartość.</span><span class="sxs-lookup"><span data-stu-id="1077d-177">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1077d-178">Pobiera informację, czy powinny być kończone bieżącej iteracji pętli oparciu żądań wysyłanych przez to lub inne iteracji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1077d-178">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1077d-179">
            <see langword="true" /> Jeśli bieżącą iterację powinny być kończone; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1077d-179">
              <see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1077d-180"><xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Właściwość jest ustawiona na `true` we wszystkich następujących warunków:</span><span class="sxs-lookup"><span data-stu-id="1077d-180">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="1077d-181">Iteracji pętli wywołań <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> lub <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span><span class="sxs-lookup"><span data-stu-id="1077d-181">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="1077d-182">Iteracji pętli zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="1077d-182">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="1077d-183">Pętla zostało anulowane.</span><span class="sxs-lookup"><span data-stu-id="1077d-183">The loop is canceled.</span></span>  
  
 <span data-ttu-id="1077d-184">Gdy ta właściwość jest `true`, <xref:System.Threading.Tasks.Parallel> klasy aktywnego podejmie próbę zabrania rozpoczęcie wykonywania dodatkowych iteracji pętli.</span><span class="sxs-lookup"><span data-stu-id="1077d-184">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="1077d-185">Jednak może być przypadkach, gdy jest nie można zapobiec dodatkowe iteracji uruchamianiu.</span><span class="sxs-lookup"><span data-stu-id="1077d-185">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="1077d-186">Może to być również przypadku iteracji długotrwałe rozpoczął już wykonywania.</span><span class="sxs-lookup"><span data-stu-id="1077d-186">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="1077d-187">W takich przypadkach iteracji może jawnie sprawdziła <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> właściwości i zaprzestanie wykonanie, jeśli właściwość zwraca `true`.</span><span class="sxs-lookup"><span data-stu-id="1077d-187">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1077d-188">Poniższy przykład wykonuje maksymalnie 100 iteracji pętli równolegle.</span><span class="sxs-lookup"><span data-stu-id="1077d-188">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="1077d-189">Wstrzymuje każdej iteracji dla losowo wybranym interwałem z zakresu od 1 do 1000 milisekund.</span><span class="sxs-lookup"><span data-stu-id="1077d-189">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="1077d-190">Określa losowo generowanej wartości, na które iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="1077d-190">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="1077d-191">Zapobiega to iteracji, którego indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość właściwości uruchomienie po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody, ale nie wpływa na wszystkie iteracje już rozpoczęto wykonywanie.</span><span class="sxs-lookup"><span data-stu-id="1077d-191">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="1077d-192">Aby uniknąć tych ukończenie, wywołuje każdej iteracji <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> , aby sprawdzić, czy inny iteracji została wywołana <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1077d-192">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="1077d-193">Jeśli tak, iteracji sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości i, jeśli jest większa niż wartość indeksu bieżącej iteracji, zwraca natychmiast.</span><span class="sxs-lookup"><span data-stu-id="1077d-193">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1077d-194">Komunikuje się, że <see cref="T:System.Threading.Tasks.Parallel" /> pętla powinna zakończyć wykonywania wygodne najwcześniejszą systemu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1077d-194">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1077d-195">Wywoływanie <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> — metoda oznacza, że iteracji pętli, które nie zostały jeszcze uruchomione nie muszą być uruchamiane.</span><span class="sxs-lookup"><span data-stu-id="1077d-195">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="1077d-196">Umożliwia anulowanie skutecznie wszelkie dodatkowe iteracji pętli.</span><span class="sxs-lookup"><span data-stu-id="1077d-196">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="1077d-197">Jednak nie zatrzymuje wszystkie iteracje już rozpoczęto wykonywanie.</span><span class="sxs-lookup"><span data-stu-id="1077d-197">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="1077d-198">Wywoływanie <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody powoduje, że <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> właściwości do zwrócenia `true` dla dowolnego iteracji pętli, które jest nadal wykonywane.</span><span class="sxs-lookup"><span data-stu-id="1077d-198">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="1077d-199">Jest to szczególnie przydatne podczas długotrwałych iteracji, które można sprawdzić <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> właściwości i Zakończ wcześniej, jeśli jego wartość wynosi `true`.</span><span class="sxs-lookup"><span data-stu-id="1077d-199">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="1077d-200"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Zazwyczaj jest stosowanych w algorytmy na podstawie wyszukiwania, gdzie po wynik znaleziono, żadnych innych iteracji muszą można wykonać.</span><span class="sxs-lookup"><span data-stu-id="1077d-200"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1077d-201">Poniższy przykład wykonuje maksymalnie 10 000 iteracji pętli równolegle.</span><span class="sxs-lookup"><span data-stu-id="1077d-201">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="1077d-202">Wstrzymuje każdej iteracji dla losowo wybranym interwałem z zakresu od 1 do 1000 milisekund.</span><span class="sxs-lookup"><span data-stu-id="1077d-202">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="1077d-203">Określa losowo generowanej wartości, na które iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="1077d-203">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="1077d-204">Jak pokazano na dane wyjściowe z przykładu, iteracji nie wykonać po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1077d-204">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="1077d-205">Ponieważ iteracji pętli są nadal mogą być wykonywane podczas <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metoda jest wywoływana, wywołuje każdej iteracji <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> , aby sprawdzić, czy inny iteracji została wywołana <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1077d-205">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="1077d-206">Jeśli zmienna zwraca `true`, iteracji zwraca natychmiast.</span><span class="sxs-lookup"><span data-stu-id="1077d-206">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1077d-207">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> Wcześniej wywołano metodę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1077d-207">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span>
          </span>
          <span data-ttu-id="1077d-208">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> i <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> nie mogą być używane w połączeniu przez iteracji pętli tej samej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1077d-208">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      </Docs>
    </Member>
  </Members>
</Type>