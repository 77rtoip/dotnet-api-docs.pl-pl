<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ff2f2535885d0110dfb688ef430d745c05b838fe" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69099128" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Umożliwia wykonywanie iteracji pętli równoległych w celu współpracy z innymi iteracjami. Wystąpienie tej klasy jest dostarczane przez <see cref="T:System.Threading.Tasks.Parallel" /> klasę do każdej pętli; nie można tworzyć wystąpień w kodzie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy zauważyć, że nie można utworzyć wystąpienia tej klasy. Jest automatycznie generowana przez kompilator jako argument w wywołaniu <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> metody lub. <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Przykład stanowi ilustrację.  
  
 Konstrukcje takie jak `for` i `foreach` (in C#) i `For` i `For Each` (w Visual Basic) wykonują sekwencyjnie od najniższego indeksu do najwyższego lub z pierwszego obiektu w zestawie do ostatniego. Z kolei <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> metody i <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> nie. Ze względu na to, że poszczególne iteracje pętli są uruchamiane równolegle, mogą zaczynać i kończyć się w dowolnej kolejności. <xref:System.Threading.Tasks.ParallelLoopState> Klasa pozwala indywidualnym iteracjom pętli równoległych współpracujących ze sobą. <xref:System.Threading.Tasks.ParallelLoopState> Klasa umożliwia:  
  
-   Wyjdź z bieżącej iteracji i Zapobiegaj uruchamianiu jakichkolwiek dodatkowych iteracji przez wywołanie <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody. Nie ma to wpływu na iteracje, które już rozpoczęły wykonywanie.  
  
-   Uniemożliwiaj wykonywanie jakichkolwiek iteracji z indeksem większym niż bieżący indeks, wywołując <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodę. Nie ma to wpływu na iteracje, które już rozpoczęły wykonywanie.  
  
-   Ustal, czy wystąpił wyjątek w iteracji pętli, pobierając wartość <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> właściwości.  
  
-   Ustal, czy jakakolwiek iteracja pętli nazywa <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metodę przez pobranie wartości <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> właściwości. Tej właściwości można użyć do zwrócenia z iteracji pętli, która rozpoczęła się przed wywołaniem <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody, ale nadal są wykonywane.  
  
-   Należy określić, czy jakakolwiek iteracja pętli nazywa się <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> lub <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Metoda lub zgłosiła wyjątek przez <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> pobranie wartości właściwości.  
  
-   Wyjdź z długotrwałej iteracji, której indeks jest większy niż indeks iteracji, który został wywołany przez pobranie wartości <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład wykonuje równolegle do 100 iteracji pętli. Każda iteracja wstrzymuje się dla losowego interwału od 1 do 1 000 milisekund. Generowana losowo wartość określa, na której iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wywoływana jest metoda. Dane wyjściowe z przykładu pokazują, że żadne iteracje, których indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość właściwości, rozpocznie się po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Ponieważ iteracje pętli nadal mogą być wykonywane, gdy <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wywoływana jest metoda, każda iteracja wywołuje właściwość, aby sprawdzić, <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> czy <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> inna iteracja nazywa metodę. Jeśli wartość właściwości jest `true`, iteracji sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości i, jeśli jest większa niż bieżąca wartość indeksu bieżącej iteracji, zwraca natychmiast.  
  
 ]]></format>
    </remarks>
    <threadsafe><see cref="T:System.Threading.Tasks.ParallelLoopState" /> Wystąpienie jest przeznaczone do użycia tylko w obrębie treści pętli, do której zostało dostarczone wystąpienie.  Korzystanie z podanego <see cref="T:System.Threading.Tasks.ParallelLoopState" /> wystąpienia po zakończeniu skojarzonej pętli nie jest bezpieczne, ani nie jest bezpieczne w sposób jawny dla innych wątków i czy te wątki mają do nich dostęp w dowolnym momencie.  Inne <see cref="T:System.Threading.Tasks.ParallelLoopState" /> wystąpienie zostanie dostarczone dla każdego wątku, w którym zajdzie pętla.</threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Równoległość danych (Biblioteka zadań równoległych)</related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Komunikuje się, <see cref="T:System.Threading.Tasks.Parallel" /> że pętla powinna zaprzestać wykonywania iteracji poza bieżącą iteracją w najwcześniejszym wygodie systemu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>wskazuje, że nie należy uruchamiać iteracji po bieżącej iteracji. Efektywnie anuluje wszelkie dodatkowe iteracje pętli. Nie zatrzymuje jednak żadnych iteracji, które już rozpoczęły wykonywanie. Na przykład jeśli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> jest wywoływana z ewentualna szczytowa iteracji pętli równoległej iteracji z 0 do 1 000, wszystkie iteracje mniejsze niż 100 powinny być nadal uruchamiane, ale iteracje z 101 do 1000, które nie zostały jeszcze uruchomione, nie są wykonywane.  
  
 W przypadku długotrwałych iteracji, które mogły być już wykonywane, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> ustawia właściwość na indeks bieżącej iteracji, jeśli bieżący indeks jest mniejszy <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>niż bieżąca wartość. Aby zatrzymać iteracje, których indeks jest większy niż najniższa iteracja przerwania od konkurującego wykonania, należy wykonać następujące czynności:  
  
1.  Sprawdź, <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> czy właściwość jest `true`.  
  
2.  Wyjdź z iteracji, jeśli jego indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość właściwości.  
  
 Przykład stanowi ilustrację.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>jest zazwyczaj używany w algorytmach opartych na wyszukiwaniach, w których kolejność jest obecna w źródle danych.  
  
   
  
## Examples  
 Poniższy przykład wykonuje równolegle do 100 iteracji pętli. Każda iteracja wstrzymuje się dla losowego interwału od 1 do 1 000 milisekund. Generowana losowo wartość określa, na której iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wywoływana jest metoda. Dane wyjściowe z przykładu pokazują, że żadne iteracje, których indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość właściwości, rozpocznie się po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Ponieważ iteracje pętli nadal mogą być wykonywane, gdy <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wywoływana jest metoda, każda iteracja wywołuje właściwość, aby sprawdzić, <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> czy <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> inna iteracja nazywa metodę. Jeśli wartość właściwości jest `true`, iteracji sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości i, jeśli jest większa niż bieżąca wartość indeksu bieżącej iteracji, zwraca natychmiast.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> Metoda została wcześniej wywołana. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />i <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> nie mogą być używane w połączeniu z iteracjami tej samej pętli.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Równoległość danych (Biblioteka zadań równoległych)</related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera czy jakakolwiek iteracja pętli zgłosiła wyjątek, który wystąpił nieobsłużony przez tę iterację.</summary>
        <value><see langword="true" />Jeśli wystąpił nieobsługiwany wyjątek; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Równoległość danych (Biblioteka zadań równoległych)</related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera czy iteracja pętli nazywa <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> metodę.</summary>
        <value><see langword="true" />Jeśli dowolna iteracja zatrzymała pętlę <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> przez wywołanie metody; <see langword="false" />w przeciwnym razie,.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku długotrwałych iteracji pętli można pobrać wartość <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> właściwości, aby określić, czy jakiekolwiek iteracje pętli, które rozpoczęły wykonywanie przed wywołaniem <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody nadal są wykonywane. Następnie można użyć wartości <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> właściwości, aby określić, czy mają być zwracane natychmiast, czy normalnie wykonywane.  
  
   
  
## Examples  
 Poniższy przykład wykonuje równolegle do 10 000 iteracji pętli. Każda iteracja wstrzymuje się dla losowego interwału od 1 do 1 000 milisekund. Generowana losowo wartość określa, na której iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> wywoływana jest metoda. Ponieważ iteracje pętli nadal mogą być wykonywane, gdy <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> wywoływana jest metoda, wyrażenie lambda <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> wywołuje metodę, aby sprawdzić, czy <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> inna iteracja nazywa metodę. Jeśli zwróci `true`, iteracja zwraca natychmiast.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Równoległość danych (Biblioteka zadań równoległych)</related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera najniższą iterację pętli, z której <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> została wywołana.</summary>
        <value>Najniższa iteracja, <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> z której została wywołana. W przypadku <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> pętli wartość jest oparta na wygenerowanym wewnętrznie indeksie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Istnieje możliwość wywołania <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody przez wiele iteracji pętli równoległej. Jeśli tak, ta wartość jest najmniejszym indeksem iteracji, która została <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>wywołana. Jeśli żadna iteracja pętli nie zostanie <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>wywołana, ta właściwość `null`zwraca. Należy zauważyć, że wywołania <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody nie wpływają na wartość właściwości.  
  
 W długotrwałych iteracjach <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> , w których wszystkie iteracje po iteracji wywołującej metodę nie muszą zostać uruchomione, właściwość służy do kończenia iteracji, które rozpoczęły wykonywanie <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> przed wywołaniem metody. Aby zatrzymać iteracje, których indeks jest większy niż najniższa iteracja przerwania od konkurującego wykonania, należy wykonać następujące czynności:  
  
1.  Sprawdź, <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> czy właściwość jest `true`.  
  
2.  Wyjdź z iteracji, jeśli jego indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość właściwości.  
  
 Przykład stanowi ilustrację.  
  
   
  
## Examples  
 Poniższy przykład wykonuje równolegle do 100 iteracji pętli. Każda iteracja wstrzymuje się dla losowego interwału od 1 do 1 000 milisekund. Generowana losowo wartość określa, na której iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wywoływana jest metoda. Pozwala to uniknąć iteracji, których indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość właściwości od momentu wywołania <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody, ale nie ma wpływu na iteracje, które już rozpoczęły wykonywanie. Aby zapobiec wykonywaniu tych kroków, każda iteracja <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> wywołuje metodę w celu sprawdzenia, czy inna iteracja <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> nazywa metodę. Jeśli tak, iteracja sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości i, jeśli jest większa niż bieżąca wartość indeksu bieżącej iteracji, zwraca natychmiast.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Należy zwrócić uwagę, że <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> ponieważ wartość znajduje się poza zakresem pętli równoległej, należy ją przypisać do zmiennej, która jest widoczna poza pętlą, jeśli chcesz zachować jej wartość.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Równoległość danych (Biblioteka zadań równoległych)</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera czy bieżąca iteracja pętli powinna zostać zakończona na podstawie żądań wykonywanych przez ten lub inne iteracje.</summary>
        <value><see langword="true" />Jeśli bieżąca iteracja powinna zakończyć działanie; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość jest ustawiana na `true` jeden z następujących warunków: <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>  
  
-   Iteracja wywołań <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> pętli lub <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.  
  
-   Iteracja pętli zgłasza wyjątek.  
  
-   Pętla została anulowana.  
  
 Gdy ta właściwość ma `true`wartość <xref:System.Threading.Tasks.Parallel> , Klasa będzie proaktywnie próbować zabronić wykonania dodatkowych iteracji pętli od uruchomienia. Mogą jednak wystąpić sytuacje, w których nie można zapobiec uruchomieniu dodatkowych iteracji.  
  
 Może również być przypadkiem, że długotrwała iteracja już rozpoczęła wykonywanie. W takich przypadkach iteracje mogą jawnie sprawdzić <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Właściwość i zaprzestanie wykonywania, jeśli właściwość zwraca. `true`  
  
   
  
## Examples  
 Poniższy przykład wykonuje równolegle do 100 iteracji pętli. Każda iteracja wstrzymuje się dla losowego interwału od 1 do 1 000 milisekund. Generowana losowo wartość określa, na której iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wywoływana jest metoda. Pozwala to uniknąć iteracji, których indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość właściwości od momentu wywołania <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody, ale nie ma wpływu na iteracje, które już rozpoczęły wykonywanie. Aby zapobiec wykonywaniu tych kroków, każda iteracja <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> wywołuje metodę w celu sprawdzenia, czy inna iteracja <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> nazywa metodę. Jeśli tak, iteracja sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości i, jeśli jest większa niż bieżąca wartość indeksu bieżącej iteracji, zwraca natychmiast.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Równoległość danych (Biblioteka zadań równoległych)</related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Komunikuje się, <see cref="T:System.Threading.Tasks.Parallel" /> że pętla powinna zaprzestać wykonywania na najwcześniejszym wygodie systemu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Wywołanie metody wskazuje, że nie trzeba uruchamiać wszystkich iteracji pętli, które nie zostały jeszcze uruchomione. Efektywnie anuluje wszelkie dodatkowe iteracje pętli. Nie zatrzymuje jednak żadnych iteracji, które już rozpoczęły wykonywanie.  
  
 Wywołanie metody powoduje, <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> że właściwość zwraca `true` dla każdej iteracji pętli, która jest nadal wykonywana. <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Jest to szczególnie przydatne w przypadku długotrwałych iteracji, które mogą sprawdzić <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> Właściwość i zakończyć wczesne, jeśli wartość jest. `true`  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>jest zazwyczaj stosowany w algorytmach opartych na wyszukiwaniu, gdzie po znalezieniu wyniku nie trzeba wykonywać żadnych innych iteracji.  
  
   
  
## Examples  
 Poniższy przykład wykonuje równolegle do 10 000 iteracji pętli. Każda iteracja wstrzymuje się dla losowego interwału od 1 do 1 000 milisekund. Generowana losowo wartość określa, na której iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> wywoływana jest metoda. Dane wyjściowe z przykładu pokazują, że żadne iteracje nie są wykonywane po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 Ponieważ iteracje pętli nadal mogą być wykonywane, gdy <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> wywoływana jest metoda, każda iteracja <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> wywołuje metodę, aby sprawdzić, czy <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> inna iteracja nazywa metodę. Jeśli zwróci `true`, iteracja zwraca natychmiast.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> Metoda została wcześniej wywołana. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />i <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> nie mogą być używane w połączeniu z iteracjami tej samej pętli.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Równoległość danych (Biblioteka zadań równoległych)</related>
      </Docs>
    </Member>
  </Members>
</Type>
