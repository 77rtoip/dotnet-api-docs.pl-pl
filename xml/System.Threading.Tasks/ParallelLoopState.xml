<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ParallelLoopState.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53e4244160069333f5d930b81c7b54173c2ad6d6a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e4244160069333f5d930b81c7b54173c2ad6d6a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Enables iterations of parallel loops to interact with other iterations.</source>
          <target state="translated">Umożliwia iteracji pętli równoległej na interakcję z innych iteracji.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>An instance of this class is provided by the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> class to each loop; you can not create instances in your code.</source>
          <target state="translated">Wystąpienie tej klasy są dostarczane przez <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> klasy do każdej pętli; nie można utworzyć wystąpienia w kodzie.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Note that you cannot instantiate an instance of this class.</source>
          <target state="translated">Należy pamiętać, że nie można utworzyć wystąpienia wystąpienia tej klasy.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>It is automatically generated by the compiler as an argument in a call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Jest ona generowana automatycznie przez kompilator jako argument w wywołaniu <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> lub <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>The example provides an illustration.</source>
          <target state="translated">Przykład stanowi ilustrację.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Constructs such as <ph id="ph1">`for`</ph> and <ph id="ph2">`foreach`</ph> (in C#) and <ph id="ph3">`For`</ph> and <ph id="ph4">`For Each`</ph> (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</source>
          <target state="translated">Tworzy, takich jak <ph id="ph1">`for`</ph> i <ph id="ph2">`foreach`</ph> (w języku C#) i <ph id="ph3">`For`</ph> i <ph id="ph4">`For Each`</ph> (w języku Visual Basic) wykonaj kolejno z najniższym indeksie jako najwyższe lub z pierwszego obiektu w zestawie do ostatniego.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> methods do not.</source>
          <target state="translated">Z kolei <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> i <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> nie metody.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Because individual iterations of the loop run in parallel, they can begin and end in any order.</source>
          <target state="translated">Ponieważ poszczególnych iteracji pętli są uruchamiane równolegle, mogą rozpocząć i zakończyć w dowolnej kolejności.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> class allows individual iterations of parallel loops to interact with one another.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> Klasa umożliwia poszczególnych iteracji pętli równoległej na interakcję ze sobą.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> class allows you to:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> Klasa umożliwia:</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Exit the current iteration and prevent any additional iterations from starting by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Zakończ bieżącą iterację i zapobiec wszelkie dodatkowe iteracji uruchamianiu przez wywołanie metody <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>This does not affect iterations that have already begun execution.</source>
          <target state="translated">Nie dotyczy to iteracji, które już zostały rozpoczęte wykonywania.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Prevent any iterations with an index greater than the current index from executing by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Wszystkie iteracje z indeksem większa niż bieżący indeks uniemożliwić wykonywania przez wywołanie metody <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>This does not affect iterations that have already begun execution.</source>
          <target state="translated">Nie dotyczy to iteracji, które już zostały rozpoczęte wykonywania.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Determine whether an exception has occurred in any loop iteration by retrieving the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A&gt;</ph> property.</source>
          <target state="translated">Określić, czy wystąpił wyjątek w dowolnym iteracji pętli pobierając zaletą <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Determine whether any iteration of the loop has called the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method by retrieving the value of the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property.</source>
          <target state="translated">Określić, czy została wywołana żadnych iteracji pętli <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> metody pobierając zaletą <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>You can use this property to return from iterations of the loop that started before the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method but are still executing.</source>
          <target state="translated">Ta właściwość służy do zwrócenia z iteracji pętli, które uruchomiona przed wywołanie <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> metody, ale są nadal wykonywane.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Determine whether any iteration of the loop has called the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method or has thrown an exception by retrieving the value of the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property.</source>
          <target state="translated">Określić, czy wszystkie iteracji pętli została wywołana <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> metody lub wywołało wyjątek pobierając zaletą <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property.</source>
          <target state="translated">Wyjście z iteracji długotrwałe, którego indeks jest większy niż indeks iteracji, w którym Break została wywołana przez pobieranie wartości <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>The following example executes up to 100 iterations of a loop in parallel.</source>
          <target state="translated">Poniższy przykład wykonuje maksymalnie 100 iteracji pętli równolegle.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Wstrzymuje każdej iteracji dla losowo wybranym interwałem z zakresu od 1 do 1000 milisekund.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called.</source>
          <target state="translated">Określa losowo generowanej wartości, na które iteracji pętli <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metoda jest wywoływana.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>As the output from the example shows, no iterations whose index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value start after the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Jako dane wyjściowe w przykładzie pokazano, nie iteracji, którego indeks jest większy niż <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> początek wartości właściwości po wywołaniu <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Because iterations of the loop are still likely to be executing when the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called, each iteration calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property to check whether another iteration has called the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Ponieważ iteracji pętli są nadal mogą być wykonywane podczas <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metoda jest wywoływana, wywołuje każdej iteracji <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> właściwość do sprawdzenia, czy inny iteracji została wywołana <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>If  the property value is <ph id="ph1">`true`</ph>, the iteration checks the value of the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property and, if it is greater than the current iteration's index value, returns immediately.</source>
          <target state="translated">Jeśli wartość właściwości jest <ph id="ph1">`true`</ph>, iteracji sprawdza wartość <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> właściwości i, jeśli jest większa niż wartość indeksu bieżącej iteracji, zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> instance is meant to be used only within the body of the loop to which an instance was provided.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> wystąpienia jest przeznaczona do użycia tylko w treści pętli, do którego podano wystąpienia.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>It is not safe to use a provided <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</source>
          <target state="translated">Nie jest bezpieczne użyć podanego <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> wystąpienia po pętli skojarzone zostaje zakończona, ani bezpiecznie jawnie oddaniem do innych wątków i mają te wątków do niego dostęp w dowolnym momencie.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>A different <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> instance will be provided to each thread involved in a loop.</source>
          <target state="translated">Inną <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> wystąpienia, które zostaną dostarczone do każdego wątku zaangażowane w pętli.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Communicates that the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</source>
          <target state="translated">Komunikuje się, że <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> pętla powinna zakończyć wykonywania iteracji poza bieżącą iterację wygodne najwcześniejszą systemu.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> indicates that no iterations after the current iteration should be run.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> Wskazuje nie iteracji po bieżącej iteracji powinna być uruchamiana.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>It effectively cancels any additional iterations of the loop.</source>
          <target state="translated">Umożliwia anulowanie skutecznie wszelkie dodatkowe iteracji pętli.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>However, it does not stop any iterations that have already begun execution.</source>
          <target state="translated">Jednak nie zatrzymuje wszystkie iteracje już rozpoczęto wykonywanie.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>For example, if <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</source>
          <target state="translated">Na przykład jeśli <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> jest wywoływana z 100 iteracji pętli równoległej iteracja z zakresu od 0 do 1000, wszystkie iteracje mniej niż 100 powinien nadal wykonywania, ale iteracji od 101 do 1000, które nie zostały uruchomione nie są wykonywane.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>For long-running iterations that may already be executing, <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> sets the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property to the current iteration's index if the current index is less than the current value of <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>.</source>
          <target state="translated">Dla iteracji długotrwałe, które mogą być już wykonuje <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> ustawia <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> indeks bieżącej iteracji, jeśli bieżący indeks jest mniejszy niż bieżąca wartość dla właściwości <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</source>
          <target state="translated">Aby zatrzymać iteracji, którego indeks jest większy niż najniższy iteracji podziału pochodzący z wykonania na konkurencyjnych, należy wykonać następujące:</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Check whether the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Sprawdź, czy <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> jest właściwość <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Exit from the iteration if its index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value.</source>
          <target state="translated">Wyjść z iteracji, jeśli jego indeksu jest większa niż <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> wartości właściwości.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>The example provides an illustration.</source>
          <target state="translated">Przykład stanowi ilustrację.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> is typically employed in search-based algorithms where an ordering is present in the data source.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> Zazwyczaj jest stosowanych w algorytmów na podstawie wyszukiwania, których kolejność znajduje się w źródle danych.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>The following example executes up to 100 iterations of a loop in parallel.</source>
          <target state="translated">Poniższy przykład wykonuje maksymalnie 100 iteracji pętli równolegle.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Wstrzymuje każdej iteracji dla losowo wybranym interwałem z zakresu od 1 do 1000 milisekund.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called.</source>
          <target state="translated">Określa losowo generowanej wartości, na które iteracji pętli <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metoda jest wywoływana.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>As the output from the example shows, no iterations whose index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value start after the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Jako dane wyjściowe w przykładzie pokazano, nie iteracji, którego indeks jest większy niż <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> początek wartości właściwości po wywołaniu <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Because iterations of the loop are still likely to be executing when the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called, each iteration calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property to check whether another iteration has called the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Ponieważ iteracji pętli są nadal mogą być wykonywane podczas <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metoda jest wywoływana, wywołuje każdej iteracji <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> właściwość do sprawdzenia, czy inny iteracji została wywołana <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>If  the property value is <ph id="ph1">`true`</ph>, the iteration checks the value of the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property and, if it is greater than the current iteration's index value, returns immediately.</source>
          <target state="translated">Jeśli wartość właściwości jest <ph id="ph1">`true`</ph>, iteracji sprawdza wartość <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> właściwości i, jeśli jest większa niż wartość indeksu bieżącej iteracji, zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> method was previously called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> Wcześniej wywołano metodę.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> may not be used in combination by iterations of the same loop.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> i <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> nie mogą być używane w połączeniu przez iteracji pętli tej samej.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ParallelLoopState.IsExceptional">
          <source>Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</source>
          <target state="translated">Pobiera informacje, czy wszystkie iteracji pętli zgłosił wyjątek, który wystąpił nieobsługiwany przez ten iteracji.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsExceptional">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an unhandled exception was thrown; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli wystąpił nieobsługiwany wyjątek; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>Gets whether any iteration of the loop has called the <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> method.</source>
          <target state="translated">Pobiera informację, czy została wywołana żadnych iteracji pętli <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if any iteration has stopped the loop by calling the <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> method; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli dowolną iterację zatrzymał pętli poprzez wywołanie <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> metody; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>For long-running iterations of the loop, you can retrieve the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property to determine whether any iterations of the loop that began execution before the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method are still executing.</source>
          <target state="translated">Dla długotrwałe iteracji pętli, można pobrać wartość <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> właściwości w celu określenia, czy wszystkie iteracji pętli rozpoczęcia wykonywania przed wywołaniem do <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> metody są nadal wykonywane.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>You can then use the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property to determine whether they should return immediately or execute normally.</source>
          <target state="translated">Następnie można użyć wartości <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> właściwość, aby ustalić, czy powinien zwrócić natychmiast lub wykonać normalnie.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>The following example executes up to 10,000 iterations of a loop in parallel.</source>
          <target state="translated">Poniższy przykład wykonuje maksymalnie 10 000 iteracji pętli równolegle.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Wstrzymuje każdej iteracji dla losowo wybranym interwałem z zakresu od 1 do 1000 milisekund.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method is called.</source>
          <target state="translated">Określa losowo generowanej wartości, na które iteracji pętli <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> metoda jest wywoływana.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>Because iterations of the loop are still likely to be executing when the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method is called, the lambda expression calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> method to check whether another iteration has called the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Ponieważ iteracji pętli są nadal mogą być wykonywane podczas <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> metoda jest wywoływana, wywołania wyrażenia lambda <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> , aby sprawdzić, czy inny iteracji została wywołana <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>If it returns <ph id="ph1">`true`</ph>, the iteration returns immediately.</source>
          <target state="translated">Jeśli zmienna zwraca <ph id="ph1">`true`</ph>, iteracji zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Gets the lowest iteration of the loop from which <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> was called.</source>
          <target state="translated">Pobiera najniższy iteracji pętli, z którego <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> została wywołana.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>The lowest iteration from which <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> was called.</source>
          <target state="translated">Najniższa iteracji, z którego <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> została wywołana.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>In the case of a <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /&gt;</ph> loop, the value is based on an internally-generated index.</source>
          <target state="translated">W przypadku liczby <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /&gt;</ph> pętli, wartość jest oparta na indeks wygenerowane wewnętrznie.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>It is possible for multiple iterations of a parallel loop to call the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Użytkownik może przejść przez wiele iteracji pętli równoległej do wywołania <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>If they do, this value is the smallest index of an iteration that called <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>.</source>
          <target state="translated">Jeśli nie, ta wartość jest najmniejszy indeks iteracji, który wywołał <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>If no iteration of the loop called <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>, this property returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Jeśli nie iteracji pętli o nazwie <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>, ta właściwość zwraca <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Note that the property value is unaffected by calls to the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Należy pamiętać, że wartość właściwości jest poza zasięgiem wywołania <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>In long-running iterations in which all iterations after the iteration that calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method need not run, the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property is used to terminate iterations that began execution before the call to the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">W iteracji długotrwałe, w których wszystkie iteracje po iteracji, który wywołuje <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> — metoda nie należy uruchomić, <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> właściwość jest używana do zakończenia iteracji rozpoczęcia wykonywania przed wywołaniem do <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</source>
          <target state="translated">Aby zatrzymać iteracji, którego indeks jest większy niż najniższy iteracji podziału pochodzący z wykonania na konkurencyjnych, należy wykonać następujące:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Check whether the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Sprawdź, czy <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> jest właściwość <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Exit from the iteration if its index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value.</source>
          <target state="translated">Wyjść z iteracji, jeśli jego indeksu jest większa niż <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> wartości właściwości.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>The example provides an illustration.</source>
          <target state="translated">Przykład stanowi ilustrację.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>The following example executes up to 100 iterations of a loop in parallel.</source>
          <target state="translated">Poniższy przykład wykonuje maksymalnie 100 iteracji pętli równolegle.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Wstrzymuje każdej iteracji dla losowo wybranym interwałem z zakresu od 1 do 1000 milisekund.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called.</source>
          <target state="translated">Określa losowo generowanej wartości, na które iteracji pętli <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metoda jest wywoływana.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>This prevents iterations whose index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value from starting after the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method, but it does not affect any iterations that have already begun executing.</source>
          <target state="translated">Zapobiega to iteracji, którego indeks jest większy niż <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> wartość właściwości uruchomienie po wywołaniu <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metody, ale nie wpływa na wszystkie iteracje już rozpoczęto wykonywanie.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>To prevent these from completing, each iteration calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> method to check whether another iteration has called the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Aby uniknąć tych ukończenie, wywołuje każdej iteracji <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> , aby sprawdzić, czy inny iteracji została wywołana <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>If so, the iteration checks the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property and, if it is greater than the current iteration's index value, returns immediately.</source>
          <target state="translated">Jeśli tak, iteracji sprawdza wartość <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> właściwości i, jeśli jest większa niż wartość indeksu bieżącej iteracji, zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Note that, because the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</source>
          <target state="translated">Należy zauważyć, że ponieważ <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> wartość jest poza zakresem poza pętlą równoległe, należy go przypisać do zmiennej, która jest widoczne na zewnątrz pętli, jeśli chcesz zachować jego wartość.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</source>
          <target state="translated">Pobiera informację, czy powinny być kończone bieżącej iteracji pętli oparciu żądań wysyłanych przez to lub inne iteracji.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current iteration should exit; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli bieżącą iterację powinny być kończone; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph> under any of the following conditions:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> Właściwość jest ustawiona na <ph id="ph2">`true`</ph> we wszystkich następujących warunków:</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>An iteration of the loop calls <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>.</source>
          <target state="translated">Iteracji pętli wywołań <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>An iteration of the loop throws an exception.</source>
          <target state="translated">Iteracji pętli zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>The loop is canceled.</source>
          <target state="translated">Pętla zostało anulowane.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>When this property is <ph id="ph1">`true`</ph>, the <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel&gt;</ph> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</source>
          <target state="translated">Gdy ta właściwość jest <ph id="ph1">`true`</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel&gt;</ph> klasy aktywnego podejmie próbę zabrania rozpoczęcie wykonywania dodatkowych iteracji pętli.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>However, there may be cases where it is unable to prevent additional iterations from starting.</source>
          <target state="translated">Jednak może być przypadkach, gdy jest nie można zapobiec dodatkowe iteracji uruchamianiu.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>It may also be the case that a long-running iteration has already begun execution.</source>
          <target state="translated">Może to być również przypadku iteracji długotrwałe rozpoczął już wykonywania.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>In such cases, iterations may explicitly check the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property and cease execution if the property returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">W takich przypadkach iteracji może jawnie sprawdziła <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> właściwości i zaprzestanie wykonanie, jeśli właściwość zwraca <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>The following example executes up to 100 iterations of a loop in parallel.</source>
          <target state="translated">Poniższy przykład wykonuje maksymalnie 100 iteracji pętli równolegle.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Wstrzymuje każdej iteracji dla losowo wybranym interwałem z zakresu od 1 do 1000 milisekund.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called.</source>
          <target state="translated">Określa losowo generowanej wartości, na które iteracji pętli <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metoda jest wywoływana.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>This prevents iterations whose index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value from starting after the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method, but it does not affect any iterations that have already begun executing.</source>
          <target state="translated">Zapobiega to iteracji, którego indeks jest większy niż <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> wartość właściwości uruchomienie po wywołaniu <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metody, ale nie wpływa na wszystkie iteracje już rozpoczęto wykonywanie.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>To prevent these from completing, each iteration calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> method to check whether another iteration has called the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Aby uniknąć tych ukończenie, wywołuje każdej iteracji <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> , aby sprawdzić, czy inny iteracji została wywołana <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>If so, the iteration checks the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property and, if it is greater than the current iteration's index value, returns immediately.</source>
          <target state="translated">Jeśli tak, iteracji sprawdza wartość <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> właściwości i, jeśli jest większa niż wartość indeksu bieżącej iteracji, zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Communicates that the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> loop should cease execution at the system's earliest convenience.</source>
          <target state="translated">Komunikuje się, że <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> pętla powinna zakończyć wykonywania wygodne najwcześniejszą systemu.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method indicates that any iterations of the loop that have not yet started need not be run.</source>
          <target state="translated">Wywoływanie <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> — metoda oznacza, że iteracji pętli, które nie zostały jeszcze uruchomione nie muszą być uruchamiane.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>It effectively cancels any additional iterations of the loop.</source>
          <target state="translated">Umożliwia anulowanie skutecznie wszelkie dodatkowe iteracji pętli.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>However, it does not stop any iterations that have already begun execution.</source>
          <target state="translated">Jednak nie zatrzymuje wszystkie iteracje już rozpoczęto wykonywanie.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method causes the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property to return <ph id="ph3">`true`</ph> for any iteration of the loop that is still executing.</source>
          <target state="translated">Wywoływanie <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> metody powoduje, że <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> właściwości do zwrócenia <ph id="ph3">`true`</ph> dla dowolnego iteracji pętli, które jest nadal wykonywane.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>This is particularly useful for long-running iterations, which can check the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property and exit early if its value is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Jest to szczególnie przydatne podczas długotrwałych iteracji, które można sprawdzić <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> właściwości i Zakończ wcześniej, jeśli jego wartość wynosi <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> Zazwyczaj jest stosowanych w algorytmy na podstawie wyszukiwania, gdzie po wynik znaleziono, żadnych innych iteracji muszą można wykonać.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>The following example executes up to 10,000 iterations of a loop in parallel.</source>
          <target state="translated">Poniższy przykład wykonuje maksymalnie 10 000 iteracji pętli równolegle.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Wstrzymuje każdej iteracji dla losowo wybranym interwałem z zakresu od 1 do 1000 milisekund.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method is called.</source>
          <target state="translated">Określa losowo generowanej wartości, na które iteracji pętli <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> metoda jest wywoływana.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>As the output from the example shows, no iterations execute after the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Jak pokazano na dane wyjściowe z przykładu, iteracji nie wykonać po wywołaniu <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Because iterations of the loop are still likely to be executing when the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method is called, each iteration calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> method to check whether another iteration has called the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Ponieważ iteracji pętli są nadal mogą być wykonywane podczas <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> metoda jest wywoływana, wywołuje każdej iteracji <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> , aby sprawdzić, czy inny iteracji została wywołana <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>If it returns <ph id="ph1">`true`</ph>, the iteration returns immediately.</source>
          <target state="translated">Jeśli zmienna zwraca <ph id="ph1">`true`</ph>, iteracji zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> method was called previously.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> Wcześniej wywołano metodę.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> may not be used in combination by iterations of the same loop.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> i <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> nie mogą być używane w połączeniu przez iteracji pętli tej samej.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>