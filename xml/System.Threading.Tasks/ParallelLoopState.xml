<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ff2f2535885d0110dfb688ef430d745c05b838fe" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69099128" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="da743-101">Umożliwia wykonywanie iteracji pętli równoległych w celu współpracy z innymi iteracjami.</span><span class="sxs-lookup"><span data-stu-id="da743-101">Enables iterations of parallel loops to interact with other iterations.</span></span> <span data-ttu-id="da743-102">Wystąpienie tej klasy jest dostarczane przez <see cref="T:System.Threading.Tasks.Parallel" /> klasę do każdej pętli; nie można tworzyć wystąpień w kodzie.</span><span class="sxs-lookup"><span data-stu-id="da743-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da743-103">Należy zauważyć, że nie można utworzyć wystąpienia tej klasy.</span><span class="sxs-lookup"><span data-stu-id="da743-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="da743-104">Jest automatycznie generowana przez kompilator jako argument w wywołaniu <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> metody lub. <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="da743-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="da743-105">Przykład stanowi ilustrację.</span><span class="sxs-lookup"><span data-stu-id="da743-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="da743-106">Konstrukcje takie jak `for` i `foreach` (in C#) i `For` i `For Each` (w Visual Basic) wykonują sekwencyjnie od najniższego indeksu do najwyższego lub z pierwszego obiektu w zestawie do ostatniego.</span><span class="sxs-lookup"><span data-stu-id="da743-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="da743-107">Z kolei <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> metody i <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> nie.</span><span class="sxs-lookup"><span data-stu-id="da743-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="da743-108">Ze względu na to, że poszczególne iteracje pętli są uruchamiane równolegle, mogą zaczynać i kończyć się w dowolnej kolejności.</span><span class="sxs-lookup"><span data-stu-id="da743-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="da743-109"><xref:System.Threading.Tasks.ParallelLoopState> Klasa pozwala indywidualnym iteracjom pętli równoległych współpracujących ze sobą.</span><span class="sxs-lookup"><span data-stu-id="da743-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="da743-110"><xref:System.Threading.Tasks.ParallelLoopState> Klasa umożliwia:</span><span class="sxs-lookup"><span data-stu-id="da743-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="da743-111">Wyjdź z bieżącej iteracji i Zapobiegaj uruchamianiu jakichkolwiek dodatkowych iteracji przez wywołanie <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="da743-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="da743-112">Nie ma to wpływu na iteracje, które już rozpoczęły wykonywanie.</span><span class="sxs-lookup"><span data-stu-id="da743-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="da743-113">Uniemożliwiaj wykonywanie jakichkolwiek iteracji z indeksem większym niż bieżący indeks, wywołując <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodę.</span><span class="sxs-lookup"><span data-stu-id="da743-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="da743-114">Nie ma to wpływu na iteracje, które już rozpoczęły wykonywanie.</span><span class="sxs-lookup"><span data-stu-id="da743-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="da743-115">Ustal, czy wystąpił wyjątek w iteracji pętli, pobierając wartość <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="da743-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="da743-116">Ustal, czy jakakolwiek iteracja pętli nazywa <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metodę przez pobranie wartości <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="da743-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="da743-117">Tej właściwości można użyć do zwrócenia z iteracji pętli, która rozpoczęła się przed wywołaniem <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody, ale nadal są wykonywane.</span><span class="sxs-lookup"><span data-stu-id="da743-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="da743-118">Należy określić, czy jakakolwiek iteracja pętli nazywa się <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> lub <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Metoda lub zgłosiła wyjątek przez <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> pobranie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="da743-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="da743-119">Wyjdź z długotrwałej iteracji, której indeks jest większy niż indeks iteracji, który został wywołany przez pobranie wartości <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="da743-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da743-120">Poniższy przykład wykonuje równolegle do 100 iteracji pętli.</span><span class="sxs-lookup"><span data-stu-id="da743-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="da743-121">Każda iteracja wstrzymuje się dla losowego interwału od 1 do 1 000 milisekund.</span><span class="sxs-lookup"><span data-stu-id="da743-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="da743-122">Generowana losowo wartość określa, na której iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wywoływana jest metoda.</span><span class="sxs-lookup"><span data-stu-id="da743-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="da743-123">Dane wyjściowe z przykładu pokazują, że żadne iteracje, których indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość właściwości, rozpocznie się po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="da743-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="da743-124">Ponieważ iteracje pętli nadal mogą być wykonywane, gdy <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wywoływana jest metoda, każda iteracja wywołuje właściwość, aby sprawdzić, <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> czy <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> inna iteracja nazywa metodę.</span><span class="sxs-lookup"><span data-stu-id="da743-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="da743-125">Jeśli wartość właściwości jest `true`, iteracji sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości i, jeśli jest większa niż bieżąca wartość indeksu bieżącej iteracji, zwraca natychmiast.</span><span class="sxs-lookup"><span data-stu-id="da743-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="da743-126"><see cref="T:System.Threading.Tasks.ParallelLoopState" /> Wystąpienie jest przeznaczone do użycia tylko w obrębie treści pętli, do której zostało dostarczone wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="da743-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span></span>  <span data-ttu-id="da743-127">Korzystanie z podanego <see cref="T:System.Threading.Tasks.ParallelLoopState" /> wystąpienia po zakończeniu skojarzonej pętli nie jest bezpieczne, ani nie jest bezpieczne w sposób jawny dla innych wątków i czy te wątki mają do nich dostęp w dowolnym momencie.</span><span class="sxs-lookup"><span data-stu-id="da743-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span></span>  <span data-ttu-id="da743-128">Inne <see cref="T:System.Threading.Tasks.ParallelLoopState" /> wystąpienie zostanie dostarczone dla każdego wątku, w którym zajdzie pętla.</span><span class="sxs-lookup"><span data-stu-id="da743-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="da743-129">Równoległość danych (Biblioteka zadań równoległych)</span><span class="sxs-lookup"><span data-stu-id="da743-129">Data Parallelism (Task Parallel Library)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="da743-130">Komunikuje się, <see cref="T:System.Threading.Tasks.Parallel" /> że pętla powinna zaprzestać wykonywania iteracji poza bieżącą iteracją w najwcześniejszym wygodie systemu.</span><span class="sxs-lookup"><span data-stu-id="da743-130">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da743-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A>wskazuje, że nie należy uruchamiać iteracji po bieżącej iteracji.</span><span class="sxs-lookup"><span data-stu-id="da743-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="da743-132">Efektywnie anuluje wszelkie dodatkowe iteracje pętli.</span><span class="sxs-lookup"><span data-stu-id="da743-132">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="da743-133">Nie zatrzymuje jednak żadnych iteracji, które już rozpoczęły wykonywanie.</span><span class="sxs-lookup"><span data-stu-id="da743-133">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="da743-134">Na przykład jeśli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> jest wywoływana z ewentualna szczytowa iteracji pętli równoległej iteracji z 0 do 1 000, wszystkie iteracje mniejsze niż 100 powinny być nadal uruchamiane, ale iteracje z 101 do 1000, które nie zostały jeszcze uruchomione, nie są wykonywane.</span><span class="sxs-lookup"><span data-stu-id="da743-134">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="da743-135">W przypadku długotrwałych iteracji, które mogły być już wykonywane, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> ustawia właściwość na indeks bieżącej iteracji, jeśli bieżący indeks jest mniejszy <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>niż bieżąca wartość.</span><span class="sxs-lookup"><span data-stu-id="da743-135">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="da743-136">Aby zatrzymać iteracje, których indeks jest większy niż najniższa iteracja przerwania od konkurującego wykonania, należy wykonać następujące czynności:</span><span class="sxs-lookup"><span data-stu-id="da743-136">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="da743-137">Sprawdź, <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> czy właściwość jest `true`.</span><span class="sxs-lookup"><span data-stu-id="da743-137">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="da743-138">Wyjdź z iteracji, jeśli jego indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość właściwości.</span><span class="sxs-lookup"><span data-stu-id="da743-138">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="da743-139">Przykład stanowi ilustrację.</span><span class="sxs-lookup"><span data-stu-id="da743-139">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="da743-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A>jest zazwyczaj używany w algorytmach opartych na wyszukiwaniach, w których kolejność jest obecna w źródle danych.</span><span class="sxs-lookup"><span data-stu-id="da743-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da743-141">Poniższy przykład wykonuje równolegle do 100 iteracji pętli.</span><span class="sxs-lookup"><span data-stu-id="da743-141">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="da743-142">Każda iteracja wstrzymuje się dla losowego interwału od 1 do 1 000 milisekund.</span><span class="sxs-lookup"><span data-stu-id="da743-142">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="da743-143">Generowana losowo wartość określa, na której iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wywoływana jest metoda.</span><span class="sxs-lookup"><span data-stu-id="da743-143">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="da743-144">Dane wyjściowe z przykładu pokazują, że żadne iteracje, których indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość właściwości, rozpocznie się po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="da743-144">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="da743-145">Ponieważ iteracje pętli nadal mogą być wykonywane, gdy <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wywoływana jest metoda, każda iteracja wywołuje właściwość, aby sprawdzić, <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> czy <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> inna iteracja nazywa metodę.</span><span class="sxs-lookup"><span data-stu-id="da743-145">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="da743-146">Jeśli wartość właściwości jest `true`, iteracji sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości i, jeśli jest większa niż bieżąca wartość indeksu bieżącej iteracji, zwraca natychmiast.</span><span class="sxs-lookup"><span data-stu-id="da743-146">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="da743-147"><see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> Metoda została wcześniej wywołana.</span><span class="sxs-lookup"><span data-stu-id="da743-147">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span></span> <span data-ttu-id="da743-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />i <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> nie mogą być używane w połączeniu z iteracjami tej samej pętli.</span><span class="sxs-lookup"><span data-stu-id="da743-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="da743-149">Równoległość danych (Biblioteka zadań równoległych)</span><span class="sxs-lookup"><span data-stu-id="da743-149">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="da743-150">Pobiera czy jakakolwiek iteracja pętli zgłosiła wyjątek, który wystąpił nieobsłużony przez tę iterację.</span><span class="sxs-lookup"><span data-stu-id="da743-150">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span></span></summary>
        <value><span data-ttu-id="da743-151"><see langword="true" />Jeśli wystąpił nieobsługiwany wyjątek; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="da743-151"><see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="da743-152">Równoległość danych (Biblioteka zadań równoległych)</span><span class="sxs-lookup"><span data-stu-id="da743-152">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="da743-153">Pobiera czy iteracja pętli nazywa <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> metodę.</span><span class="sxs-lookup"><span data-stu-id="da743-153">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span></span></summary>
        <value><span data-ttu-id="da743-154"><see langword="true" />Jeśli dowolna iteracja zatrzymała pętlę <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> przez wywołanie metody; <see langword="false" />w przeciwnym razie,.</span><span class="sxs-lookup"><span data-stu-id="da743-154"><see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da743-155">W przypadku długotrwałych iteracji pętli można pobrać wartość <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> właściwości, aby określić, czy jakiekolwiek iteracje pętli, które rozpoczęły wykonywanie przed wywołaniem <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody nadal są wykonywane.</span><span class="sxs-lookup"><span data-stu-id="da743-155">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="da743-156">Następnie można użyć wartości <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> właściwości, aby określić, czy mają być zwracane natychmiast, czy normalnie wykonywane.</span><span class="sxs-lookup"><span data-stu-id="da743-156">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da743-157">Poniższy przykład wykonuje równolegle do 10 000 iteracji pętli.</span><span class="sxs-lookup"><span data-stu-id="da743-157">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="da743-158">Każda iteracja wstrzymuje się dla losowego interwału od 1 do 1 000 milisekund.</span><span class="sxs-lookup"><span data-stu-id="da743-158">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="da743-159">Generowana losowo wartość określa, na której iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> wywoływana jest metoda.</span><span class="sxs-lookup"><span data-stu-id="da743-159">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="da743-160">Ponieważ iteracje pętli nadal mogą być wykonywane, gdy <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> wywoływana jest metoda, wyrażenie lambda <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> wywołuje metodę, aby sprawdzić, czy <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> inna iteracja nazywa metodę.</span><span class="sxs-lookup"><span data-stu-id="da743-160">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="da743-161">Jeśli zwróci `true`, iteracja zwraca natychmiast.</span><span class="sxs-lookup"><span data-stu-id="da743-161">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="da743-162">Równoległość danych (Biblioteka zadań równoległych)</span><span class="sxs-lookup"><span data-stu-id="da743-162">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="da743-163">Pobiera najniższą iterację pętli, z której <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> została wywołana.</span><span class="sxs-lookup"><span data-stu-id="da743-163">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span></summary>
        <value><span data-ttu-id="da743-164">Najniższa iteracja, <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> z której została wywołana.</span><span class="sxs-lookup"><span data-stu-id="da743-164">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span> <span data-ttu-id="da743-165">W przypadku <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> pętli wartość jest oparta na wygenerowanym wewnętrznie indeksie.</span><span class="sxs-lookup"><span data-stu-id="da743-165">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da743-166">Istnieje możliwość wywołania <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody przez wiele iteracji pętli równoległej.</span><span class="sxs-lookup"><span data-stu-id="da743-166">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="da743-167">Jeśli tak, ta wartość jest najmniejszym indeksem iteracji, która została <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>wywołana.</span><span class="sxs-lookup"><span data-stu-id="da743-167">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="da743-168">Jeśli żadna iteracja pętli nie zostanie <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>wywołana, ta właściwość `null`zwraca.</span><span class="sxs-lookup"><span data-stu-id="da743-168">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="da743-169">Należy zauważyć, że wywołania <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody nie wpływają na wartość właściwości.</span><span class="sxs-lookup"><span data-stu-id="da743-169">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="da743-170">W długotrwałych iteracjach <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> , w których wszystkie iteracje po iteracji wywołującej metodę nie muszą zostać uruchomione, właściwość służy do kończenia iteracji, które rozpoczęły wykonywanie <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> przed wywołaniem metody.</span><span class="sxs-lookup"><span data-stu-id="da743-170">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="da743-171">Aby zatrzymać iteracje, których indeks jest większy niż najniższa iteracja przerwania od konkurującego wykonania, należy wykonać następujące czynności:</span><span class="sxs-lookup"><span data-stu-id="da743-171">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="da743-172">Sprawdź, <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> czy właściwość jest `true`.</span><span class="sxs-lookup"><span data-stu-id="da743-172">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="da743-173">Wyjdź z iteracji, jeśli jego indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość właściwości.</span><span class="sxs-lookup"><span data-stu-id="da743-173">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="da743-174">Przykład stanowi ilustrację.</span><span class="sxs-lookup"><span data-stu-id="da743-174">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da743-175">Poniższy przykład wykonuje równolegle do 100 iteracji pętli.</span><span class="sxs-lookup"><span data-stu-id="da743-175">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="da743-176">Każda iteracja wstrzymuje się dla losowego interwału od 1 do 1 000 milisekund.</span><span class="sxs-lookup"><span data-stu-id="da743-176">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="da743-177">Generowana losowo wartość określa, na której iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wywoływana jest metoda.</span><span class="sxs-lookup"><span data-stu-id="da743-177">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="da743-178">Pozwala to uniknąć iteracji, których indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość właściwości od momentu wywołania <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody, ale nie ma wpływu na iteracje, które już rozpoczęły wykonywanie.</span><span class="sxs-lookup"><span data-stu-id="da743-178">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="da743-179">Aby zapobiec wykonywaniu tych kroków, każda iteracja <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> wywołuje metodę w celu sprawdzenia, czy inna iteracja <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> nazywa metodę.</span><span class="sxs-lookup"><span data-stu-id="da743-179">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="da743-180">Jeśli tak, iteracja sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości i, jeśli jest większa niż bieżąca wartość indeksu bieżącej iteracji, zwraca natychmiast.</span><span class="sxs-lookup"><span data-stu-id="da743-180">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="da743-181">Należy zwrócić uwagę, że <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> ponieważ wartość znajduje się poza zakresem pętli równoległej, należy ją przypisać do zmiennej, która jest widoczna poza pętlą, jeśli chcesz zachować jej wartość.</span><span class="sxs-lookup"><span data-stu-id="da743-181">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="da743-182">Równoległość danych (Biblioteka zadań równoległych)</span><span class="sxs-lookup"><span data-stu-id="da743-182">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="da743-183">Pobiera czy bieżąca iteracja pętli powinna zostać zakończona na podstawie żądań wykonywanych przez ten lub inne iteracje.</span><span class="sxs-lookup"><span data-stu-id="da743-183">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span></span></summary>
        <value><span data-ttu-id="da743-184"><see langword="true" />Jeśli bieżąca iteracja powinna zakończyć działanie; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="da743-184"><see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da743-185">Właściwość jest ustawiana na `true` jeden z następujących warunków: <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A></span><span class="sxs-lookup"><span data-stu-id="da743-185">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="da743-186">Iteracja wywołań <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> pętli lub <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span><span class="sxs-lookup"><span data-stu-id="da743-186">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="da743-187">Iteracja pętli zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="da743-187">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="da743-188">Pętla została anulowana.</span><span class="sxs-lookup"><span data-stu-id="da743-188">The loop is canceled.</span></span>  
  
 <span data-ttu-id="da743-189">Gdy ta właściwość ma `true`wartość <xref:System.Threading.Tasks.Parallel> , Klasa będzie proaktywnie próbować zabronić wykonania dodatkowych iteracji pętli od uruchomienia.</span><span class="sxs-lookup"><span data-stu-id="da743-189">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="da743-190">Mogą jednak wystąpić sytuacje, w których nie można zapobiec uruchomieniu dodatkowych iteracji.</span><span class="sxs-lookup"><span data-stu-id="da743-190">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="da743-191">Może również być przypadkiem, że długotrwała iteracja już rozpoczęła wykonywanie.</span><span class="sxs-lookup"><span data-stu-id="da743-191">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="da743-192">W takich przypadkach iteracje mogą jawnie sprawdzić <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Właściwość i zaprzestanie wykonywania, jeśli właściwość zwraca. `true`</span><span class="sxs-lookup"><span data-stu-id="da743-192">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da743-193">Poniższy przykład wykonuje równolegle do 100 iteracji pętli.</span><span class="sxs-lookup"><span data-stu-id="da743-193">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="da743-194">Każda iteracja wstrzymuje się dla losowego interwału od 1 do 1 000 milisekund.</span><span class="sxs-lookup"><span data-stu-id="da743-194">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="da743-195">Generowana losowo wartość określa, na której iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wywoływana jest metoda.</span><span class="sxs-lookup"><span data-stu-id="da743-195">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="da743-196">Pozwala to uniknąć iteracji, których indeks jest większy niż <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> wartość właściwości od momentu wywołania <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metody, ale nie ma wpływu na iteracje, które już rozpoczęły wykonywanie.</span><span class="sxs-lookup"><span data-stu-id="da743-196">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="da743-197">Aby zapobiec wykonywaniu tych kroków, każda iteracja <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> wywołuje metodę w celu sprawdzenia, czy inna iteracja <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> nazywa metodę.</span><span class="sxs-lookup"><span data-stu-id="da743-197">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="da743-198">Jeśli tak, iteracja sprawdza wartość <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> właściwości i, jeśli jest większa niż bieżąca wartość indeksu bieżącej iteracji, zwraca natychmiast.</span><span class="sxs-lookup"><span data-stu-id="da743-198">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="da743-199">Równoległość danych (Biblioteka zadań równoległych)</span><span class="sxs-lookup"><span data-stu-id="da743-199">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="da743-200">Komunikuje się, <see cref="T:System.Threading.Tasks.Parallel" /> że pętla powinna zaprzestać wykonywania na najwcześniejszym wygodie systemu.</span><span class="sxs-lookup"><span data-stu-id="da743-200">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da743-201"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Wywołanie metody wskazuje, że nie trzeba uruchamiać wszystkich iteracji pętli, które nie zostały jeszcze uruchomione.</span><span class="sxs-lookup"><span data-stu-id="da743-201">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="da743-202">Efektywnie anuluje wszelkie dodatkowe iteracje pętli.</span><span class="sxs-lookup"><span data-stu-id="da743-202">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="da743-203">Nie zatrzymuje jednak żadnych iteracji, które już rozpoczęły wykonywanie.</span><span class="sxs-lookup"><span data-stu-id="da743-203">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="da743-204">Wywołanie metody powoduje, <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> że właściwość zwraca `true` dla każdej iteracji pętli, która jest nadal wykonywana. <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A></span><span class="sxs-lookup"><span data-stu-id="da743-204">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="da743-205">Jest to szczególnie przydatne w przypadku długotrwałych iteracji, które mogą sprawdzić <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> Właściwość i zakończyć wczesne, jeśli wartość jest. `true`</span><span class="sxs-lookup"><span data-stu-id="da743-205">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="da743-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>jest zazwyczaj stosowany w algorytmach opartych na wyszukiwaniu, gdzie po znalezieniu wyniku nie trzeba wykonywać żadnych innych iteracji.</span><span class="sxs-lookup"><span data-stu-id="da743-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da743-207">Poniższy przykład wykonuje równolegle do 10 000 iteracji pętli.</span><span class="sxs-lookup"><span data-stu-id="da743-207">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="da743-208">Każda iteracja wstrzymuje się dla losowego interwału od 1 do 1 000 milisekund.</span><span class="sxs-lookup"><span data-stu-id="da743-208">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="da743-209">Generowana losowo wartość określa, na której iteracji pętli <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> wywoływana jest metoda.</span><span class="sxs-lookup"><span data-stu-id="da743-209">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="da743-210">Dane wyjściowe z przykładu pokazują, że żadne iteracje nie są wykonywane po wywołaniu <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="da743-210">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="da743-211">Ponieważ iteracje pętli nadal mogą być wykonywane, gdy <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> wywoływana jest metoda, każda iteracja <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> wywołuje metodę, aby sprawdzić, czy <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> inna iteracja nazywa metodę.</span><span class="sxs-lookup"><span data-stu-id="da743-211">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="da743-212">Jeśli zwróci `true`, iteracja zwraca natychmiast.</span><span class="sxs-lookup"><span data-stu-id="da743-212">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="da743-213"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> Metoda została wcześniej wywołana.</span><span class="sxs-lookup"><span data-stu-id="da743-213">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span></span> <span data-ttu-id="da743-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />i <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> nie mogą być używane w połączeniu z iteracjami tej samej pętli.</span><span class="sxs-lookup"><span data-stu-id="da743-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="da743-215">Równoległość danych (Biblioteka zadań równoległych)</span><span class="sxs-lookup"><span data-stu-id="da743-215">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
