<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ValueTask`1.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86c946e9ceec2676cfbc1b9aed30223dbac578baafd.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">946e9ceec2676cfbc1b9aed30223dbac578baafd</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>The result.</source>
          <target state="translated">Wynik.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>Provides a value type that wraps a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> and a <ph id="ph2">&lt;typeparamref name="TResult" /&gt;</ph>, only one of which is used.</source>
          <target state="translated">Zawiera typ wartości, który opakowuje <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> i <ph id="ph2">&lt;typeparamref name="TResult" /&gt;</ph>tylko jeden z którym jest używany.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>A method may return an instance of this value type when it's likely that the result of its operation will be available synchronously, and when it's expected to be invoked so frequently that the cost of allocating a new <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> for each call will be prohibitive.</source>
          <target state="translated">Metoda może zwracać tego typu wartości, gdy jest prawdopodobne, że wynik tej operacji będzie można synchronicznie, i gdy można oczekiwać, można wywołać wystąpienia tak często który koszt alokowanie nowej <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> dla każdego wywołania będą zaporowe.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>There are tradeoffs to using a <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> instead of a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
          <target state="translated">Ma skutków ubocznych przy użyciu <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> zamiast <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>For example, while a <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> can help avoid an allocation in the case where the successful result is available synchronously, it also contains two fields, whereas a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> as a reference type is a single field.</source>
          <target state="translated">Na przykład <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> mogą pomóc uniknąć alokacji w sytuacji, gdy wynikiem pomyślnym są dostępne synchronicznie, także program zawiera dwa pola, natomiast <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> jako odwołanie typu jest jedno pole.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>This means that a method call returns two fields worth of data instead of one, which is more data to copy.</source>
          <target state="translated">Oznacza to, że wywołanie metody zwraca dwa pola wartości danych, zamiast, czyli większej ilości danych, aby skopiować.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>It also means, that if a method that returns a <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> is awaited within an async method, the state machine for that async method will be larger, because it must store a struct containing two fields instead of a single reference.</source>
          <target state="translated">Oznacza to również, że jeśli metoda, która zwraca <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> jest oczekiwane w obrębie metody asynchronicznej automatu stanów dla tej metody asynchronicznej jest większy, ponieważ musi przechowywać struktury zawierające pola dwóch zamiast jedno odwołanie.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>For uses other than consuming the result of an asynchronous operation using await, <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> can lead to a more convoluted programming model that requires more allocations.</source>
          <target state="translated">Dla używa innego niż wykorzystywanie wynik operacji asynchronicznej przy użyciu await, <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> może prowadzić do bardziej zwichrowanych modelu programowania, który wymaga więcej alokacji.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>For example, consider a method that could return either a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> with a cached task as a common result or a <ph id="ph2">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>.</source>
          <target state="translated">Rozważmy na przykład metoda, która może zwracać <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> z pamięci podręcznej zadania w wyniku tego wspólnego lub <ph id="ph2">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>If the consumer of the result wants to use it as a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> in a method like <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A&gt;</ph>, the <ph id="ph4">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> must first be converted to a <ph id="ph5">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using <ph id="ph6">&lt;xref:System.Threading.Tasks.ValueTask%601.AsTask%2A&gt;</ph>, leading to an allocation that would have been avoided if a cached <ph id="ph7">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> had been used in the first place.</source>
          <target state="translated">Jeśli klient wynik chce go używać jako <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> w metodzie, takie jak <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph> lub <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> najpierw musi zostać przekonwertowany do <ph id="ph5">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> przy użyciu <ph id="ph6">&lt;xref:System.Threading.Tasks.ValueTask%601.AsTask%2A&gt;</ph>, prowadzących do alokacji, który będzie uniknąć, jeśli buforowane <ph id="ph7">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> została użyta w pierwszej kolejności.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>As such, the default choice for any asynchronous method should be to return a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
          <target state="translated">Wybór domyślny dla dowolnej metody asynchronicznej powinna być do zwrócenia <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> lub <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>Only if performance analysis proves it worthwhile should a <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> be used instead of a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
          <target state="translated">Tylko wtedy, gdy analiza wydajności okazuje zastanowić powinien <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> można użyć zamiast <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>There is no non-generic version of <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>, as the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.CompletedTask&gt;</ph> property may be used to hand back a successfully completed singleton in the case where a method returning a <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> completes synchronously and successfully.</source>
          <target state="translated">Nie ma wersji nieogólnego elementu <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>, jako <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.CompletedTask&gt;</ph> właściwość może być używana do ponownie przekazanie pomyślnie zakończono pojedynczą w przypadku, gdy metoda zwróci <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> zakończeniu synchronicznie i pomyślnie.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>The use of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> type is supported starting with C# 7, and is not supported by any version of Visual Basic.</source>
          <target state="translated">Korzystanie z <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> typu jest obsługiwane począwszy od 7 C# i nie jest obsługiwana przez wszystkie wersje programu Visual Basic.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Task{`0})">
          <source>The task.</source>
          <target state="translated">Zadanie.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Task{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> class using the supplied task that represents the operation.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> przy użyciu dostarczonego zadanie reprezentujące operację.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Task{`0})">
          <source>The <ph id="ph1">&lt;paramref name="task" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="task" /&gt;</ph> Argument jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.#ctor(`0)">
          <source>The result.</source>
          <target state="translated">Wynik.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.#ctor(`0)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> class using the supplied result of a successful operation.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> przy użyciu dostarczonego wynik powodzenie operacji.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.AsTask">
          <source>Retrieves a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> object that represents this <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph>.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> obiekt, który reprezentuje to <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.AsTask">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> object that is wrapped in this <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> if one exists, or a new <ph id="ph3">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> object that represents the result.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> Obiektu, który jest opakowany w tym <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> istnieje, czy nowy <ph id="ph3">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> obiekt, który reprezentuje wynik.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.ConfigureAwait(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to attempt to marshal the continuation back to the captured context; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> próba zorganizowania kontynuacji z powrotem do przechwyconych kontekstu; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.ConfigureAwait(System.Boolean)">
          <source>Configures an awaiter for this value.</source>
          <target state="translated">Konfiguruje awaiter dla tej wartości.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.ConfigureAwait(System.Boolean)">
          <source>The configured awaiter.</source>
          <target state="translated">Awaiter skonfigurowany.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.CreateAsyncMethodBuilder">
          <source>Creates a method builder for use with an async method.</source>
          <target state="translated">Tworzy konstruktora metoda do użycia z metody asynchronicznej.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.CreateAsyncMethodBuilder">
          <source>The created builder.</source>
          <target state="translated">Konstruktor utworzony.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Object)">
          <source>The object to compare with the current object.</source>
          <target state="translated">Obiekt do porównania z bieżącym obiektem.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Object)">
          <source>Determines whether the specified object is equal to the current object.</source>
          <target state="translated">Określa, czy określony obiekt jest równy bieżącemu obiektowi.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified object is equal to the current object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli określony obiekt jest taki sam jak bieżący obiekt; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Threading.Tasks.ValueTask{`0})">
          <source>The object to compare with the current object.</source>
          <target state="translated">Obiekt do porównania z bieżącym obiektem.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Threading.Tasks.ValueTask{`0})">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> object is equal to the current <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> object.</source>
          <target state="translated">Określa, czy określony <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> obiekt jest taki sam, jak bieżący <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Threading.Tasks.ValueTask{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified object is equal to the current object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli określony obiekt jest taki sam jak bieżący obiekt; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.GetAwaiter">
          <source>Creates an awaiter for this value.</source>
          <target state="translated">Tworzy awaiter dla tej wartości.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.GetAwaiter">
          <source>The awaiter.</source>
          <target state="translated">Awaiter.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Zwraca kod skrótu dla tego wystąpienia.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.GetHashCode">
          <source>The hash code for the current object.</source>
          <target state="translated">Wartość skrótu dla bieżącego obiektu.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ValueTask`1.IsCanceled">
          <source>Gets a value that indicates whether this object represents a canceled operation.</source>
          <target state="translated">Pobiera wartość wskazującą, czy ten obiekt reprezentuje Anulowano operację.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.IsCanceled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a canceled operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli ten obiekt reprezentuje anulowanej operacji; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ValueTask`1.IsCompleted">
          <source>Gets a value that indicates whether this object represents a completed operation.</source>
          <target state="translated">Pobiera wartość wskazującą, czy ten obiekt reprezentuje ukończoną operację.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.IsCompleted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a completed operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli ten obiekt reprezentuje ukończoną operację; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ValueTask`1.IsCompletedSuccessfully">
          <source>Gets a value that indicates whether this object represents a successfully completed operation.</source>
          <target state="translated">Pobiera wartość wskazującą, czy ten obiekt reprezentuje pomyślnie Zakończono operację.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.IsCompletedSuccessfully">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a successfully completed operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli ten obiekt reprezentuje pomyślnie Zakończono operację; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ValueTask`1.IsFaulted">
          <source>Gets a value that indicates whether this object represents a failed operation.</source>
          <target state="translated">Pobiera wartość wskazującą, czy ten obiekt reprezentuje operację zakończoną niepowodzeniem.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.IsFaulted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a failed operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli ten obiekt reprezentuje operację zakończoną niepowodzeniem; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>The first value to compare.</source>
          <target state="translated">Pierwsza wartość do porównania.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>The second value to compare.</source>
          <target state="translated">Druga wartość do porównania.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>Compares two values for equality.</source>
          <target state="translated">Porównuje dwie wartości pod kątem równości.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> values are equal; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli dwa <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> wartości są równe; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>The first value to compare.</source>
          <target state="translated">Pierwsza wartość do porównania.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>The seconed value to compare.</source>
          <target state="translated">Seconed wartość do porównania.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>Determines whether two <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> values are unequal.</source>
          <target state="translated">Określa, czy dwa <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> wartości są równe.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> values are not equal; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli dwa <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> wartości nie są równe; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ValueTask`1.Result">
          <source>Gets the result.</source>
          <target state="translated">Pobiera wynik.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.Result">
          <source>The result.</source>
          <target state="translated">Wynik.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.Result">
          <source>If this <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> wraps a successful result, this property returns it directly.</source>
          <target state="translated">Jeśli ta <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> zawija pomyślnego wyniku, ta właściwość zwraca go bezpośrednio.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.Result">
          <source>If it wraps a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, the behavior of <ph id="ph2">&lt;xref:System.Threading.Tasks.ValueTask%601.Result%2A&gt;</ph> is similar to the behavior of accessing <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> on the wrapped task: if the task hasn't completed, accessing the property blocks the calling thread until it completes; if the task has completed successfully, the property returns the result; if the task has faulted or was cancellecd, accessing the property throws an exception.</source>
          <target state="translated">Jeśli jest zawijany <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, zachowanie <ph id="ph2">&lt;xref:System.Threading.Tasks.ValueTask%601.Result%2A&gt;</ph> jest podobny do uzyskiwania dostępu do zachowania <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> opakowana zadania: Jeśli nie można ukończyć zadania, uzyskiwanie dostępu do właściwości blokuje wątek wywołujący dopóki nie ukończy; Jeśli zadanie zostało ukończone pomyślnie właściwość zwraca wynik; Jeśli zadanie ma błędny lub został cancellecd, uzyskiwanie dostępu do właściwości zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.Result">
          <source>The thrown exception is not wrapped in an <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph>, which is different from the behavior of <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> in the same situation.</source>
          <target state="translated">Zwrócony wyjątek nie jest ujęte w <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph>, która różni się od zachowania <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> w tej samej sytuacji.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.ToString">
          <source>Returns a string that represents the current object.</source>
          <target state="translated">Zwraca ciąg, który reprezentuje bieżący obiekt.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.ToString">
          <source>A string that represents the current object.</source>
          <target state="translated">Ciąg, który reprezentuje bieżący obiekt.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>