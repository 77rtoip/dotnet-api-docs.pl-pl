<Namespace Name="System.Xml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b9d93fd68b550f524fd02f3cb0af6df61ab8e864" />
    <Meta Name="ms.sourcegitcommit" Value="d0bb31ec8354fa58c62c2a646057eec11d3e2150" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/17/2018" />
    <Meta Name="ms.locfileid" Value="34758853" />
  </Metadata>
  <Docs>
    <summary>
      <see cref="N:System.Xml" /> Przestrzeń nazw zapewnia obsługę oparte na standardach przetwarzania XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="std"></a>   
## <a name="supported-standards"></a>Obsługiwane standardy  
 <xref:System.Xml> Przestrzeń nazw obsługuje następujące standardy:  
  
-   XML 1.0, w tym obsługę definicji DTD: [http://www.w3.org/TR/2006/REC-xml-20060816/](http://www.w3.org/TR/2006/REC-xml-20060816/)  
  
-   Obszary nazw XML, zarówno strumienia poziomu i modelu DOM: [http://www.w3.org/TR/REC-xml-names/](http://www.w3.org/TR/REC-xml-names/)  
  
-   Schematy XML: [http://www.w3.org/2001/XMLSchema](http://www.w3.org/2001/XMLSchema)  
  
-   Wyrażenia XPath: [http://www.w3.org/TR/xpath](http://www.w3.org/TR/xpath)  
  
-   Przekształcenia XSLT: [http://www.w3.org/TR/xslt](http://www.w3.org/TR/xslt)  
  
-   DOM poziomu 1 Core: [http://www.w3.org/TR/REC-DOM-Level-1/](http://www.w3.org/TR/REC-DOM-Level-1/)  
  
-   Podstawowe na poziomie 2 modelu DOM: [http://www.w3.org/TR/DOM-Level-2/](http://www.w3.org/TR/DOM-Level-2/)  
  
 Zobacz sekcję [różnice względem specyfikacji W3C](#diff) dwóch przypadkach, w których klasy XML różnią się od zaleceń W3C.  
  
<a name="related"></a>   
## <a name="related-namespaces"></a>Pokrewne obszary nazw  
 .NET Framework oferuje również inne przestrzenie nazw dla operacji związanych z plikiem XML. Aby uzyskać listę, opisy i linki, zobacz [przestrzenie nazw System.Xml](http://msdn.microsoft.com/library/gg145036.aspx) strony sieci Web.  
  
<a name="async"></a>   
## <a name="processing-xml-asynchronously"></a>Asynchronicznie przetwarzania XML  
 <xref:System.Xml.XmlReader?displayProperty=nameWithType> i <xref:System.Xml.XmlWriter?displayProperty=nameWithType> klasy zawierają wiele metod asynchronicznych, które są oparte na. Metody te można zidentyfikować przez ciąg "Async" na końcu nazwy. Za pomocą tych metod można napisać kod asynchroniczny, która jest podobna do kodu synchronicznego i można przeprowadzić migrację istniejącego kodu synchronicznego do kodu asynchronicznego łatwe.  
  
-   Użycie metod asynchronicznych w aplikacjach w przypadku, gdy istnieje znaczne opóźnienie strumienia. Należy unikać używania asynchronicznych interfejsów API dla strumienia pamięci lub operacji odczytu/zapisu strumienia pliku lokalnego. Strumień wejściowy <xref:System.Xml.XmlTextReader>, i <xref:System.Xml.XmlTextWriter> powinien obsługiwać również operacji asynchronicznych. W przeciwnym razie wątki nadal będą zablokowane przez operacje We/Wy.  
  
-   Nie zaleca się mieszanie wywołań funkcji synchroniczne i asynchroniczne, ponieważ może zapomniano użyć elementu `await` — słowo kluczowe lub użyj synchronicznych interfejsów API, gdzie asynchroniczne jest to konieczne.  
  
-   Nie należy ustawiać <xref:System.Xml.XmlReaderSettings.Async%2A?displayProperty=nameWithType> lub <xref:System.Xml.XmlWriterSettings.Async%2A?displayProperty=nameWithType> flaga `true` Jeśli nie zamierzasz używać na metodę asynchroniczną.  
  
-   Jeśli nie pamiętasz określić `await` — słowo kluczowe, po wywołaniu metody asynchronicznej, wyniki są niedeterministyczne: może pojawić się wynik oczekiwano lub wyjątek.  
  
-   Gdy <xref:System.Xml.XmlReader> odczytuje obiekt węzła duże pole tekstowe, może być wartość fragment tekstu w pamięci podręcznej i zwraca węzeł tekstowy, dlatego podczas pobierania <xref:System.Xml.XmlReader.Value%2A?displayProperty=nameWithType> właściwość może zostać zablokowany przez operację We/Wy. Użyj <xref:System.Xml.XmlReader.GetValueAsync%2A?displayProperty=nameWithType> metodę, aby uzyskać wartości tekstowej w trybie asynchronicznym, lub użyj <xref:System.Xml.XmlReader.ReadValueChunkAsync%2A?displayProperty=nameWithType> metodę w celu odczytania dużym tekstem blokowania we fragmentach.  
  
-   Kiedy używasz <xref:System.Xml.XmlWriter> obiektu, wywołaj <xref:System.Xml.XmlWriter.FlushAsync%2A?displayProperty=nameWithType> metoda przed wywołaniem <xref:System.Xml.XmlWriter.Close%2A?displayProperty=nameWithType> unikanie zablokowania operacji We/Wy.  
  
<a name="diff"></a>   
## <a name="differences-from-the-w3c-specs"></a>Różnice z specyfikacje W3C  
 W dwóch przypadkach obejmujących ograniczenia dotyczące modelu grupy składników schematu <xref:System.Xml> przestrzeni nazw różni się od zaleceń W3C.  
  
 **Spójność w deklaracji elementu:**  
  
 W niektórych przypadkach, w przypadku używania grup podstawienia <xref:System.Xml> implementacji nie mogą spełniać "schematu składnika ograniczenie: Element deklaracji spójne" opisanej w [ograniczenia dotyczące składników schematu grupy modelu ](http://go.microsoft.com/fwlink/?LinkId=137029) sekcji Specyfikacja W3C.  
  
 Na przykład następujący schemat zawiera elementy, które mają taką samą nazwę, ale różnych typów, w tym samym modelu zawartości i grup podstawienia są używane. Powinno to spowodować błąd, ale <xref:System.Xml> kompiluje i sprawdza poprawność schematu bez błędów.  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>   
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
  
   <xs:element name="e1" type="t1"/>  
   <xs:complexType name="t1"/>  
  
   <xs:element name="e2" type="t2" substitutionGroup="e1"/>  
      <xs:complexType name="t2">  
         <xs:complexContent>  
            <xs:extension base="t1">  
         </xs:extension>  
      </xs:complexContent>  
   </xs:complexType>  
  
   <xs:complexType name="t3">  
      <xs:sequence>  
         <xs:element ref="e1"/>  
         <xs:element name="e2" type="xs:int"/>  
      </xs:sequence>  
   </xs:complexType>  
</xs:schema>  
```  
  
 W tym schemacie wpisz `t3` zawiera sekwencję elementów. Ze względu na podstawienia, odwołanie do elementu `e1` z sekwencji może spowodować albo w elemencie `e1` typu `t1` lub w elemencie `e2` typu `t2`. Ostatnim przypadku mogłyby spowodować sekwencję dwóch `e2` elementów, gdy jest ona typu `t2` , a drugi to typu `xs:int`.  
  
 **Uznanie autorstwa unikatowości:**  
  
 W następujących warunkach <xref:System.Xml> implementacji nie spełnia "schematu składnika ograniczenie: unikatowy cząstki autorstwa," opisanej w [ograniczenia dotyczące składników schematu grupy modelu](http://go.microsoft.com/fwlink/?LinkId=137029) sekcji z Specyfikacja W3C.  
  
-   Jeden z elementów w grupie odwołuje się do innego elementu.  
  
-   Odnośny element jest elementem głównym grupy podstawienia.  
  
-   Grupa podstawienia zawiera element, który ma taką samą nazwę jak jeden z elementów w grupie.  
  
-   Kardynalność elementu, który odwołuje się element head grupy podstawienia i element o takiej samej nazwie elementu grupy podstawienia nie zostanie usunięty (minOccurs < maxOccurs).  
  
-   Definicja elementu, który odwołuje się w nagłówku grupy podstawiania poprzedza definicję elementu z taką samą nazwę jak element grupy podstawienia.  
  
 Na przykład w poniższym schemacie model zawartości jest niejednoznaczne i powinno spowodować błąd kompilacji, ale <xref:System.Xml> kompiluje schematu bez błędów.  
  
```xml  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
  
  <xs:element name="e1" type="xs:int"/>  
  <xs:element name="e2" type="xs:int" substitutionGroup="e1"/>  
  
  <xs:complexType name="t3">  
    <xs:sequence>  
      <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
      <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
    </xs:sequence>  
  </xs:complexType>  
  
  <xs:element name="e3" type="t3"/>  
</xs:schema>  
```  
  
 Jeśli zostanie podjęta próba weryfikacji następujący kod XML dla powyższego schematu, sprawdzanie poprawności zakończy się niepowodzeniem z następującym komunikatem: "element"e3"ma nieprawidłowy element podrzędny elementu"e2"." i <xref:System.Xml.Schema.XmlSchemaValidationException> zostanie zgłoszony wyjątek.  
  
```xml  
<e3>  
  <e2>1</e2>  
  <e2>2</e2>  
</e3>  
```  
  
 Aby obejść ten problem, można wymienić deklaracji elementu w dokumencie XSD. Na przykład:  
  
```xml  
<xs:sequence>  
  <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
  <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
</xs:sequence>  
```  
  
 staje się to:  
  
```xml  
<xs:sequence>  
  <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
  <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
</xs:sequence>  
```  
  
 Oto inny przykład ten sam problem:  
  
```xml  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
   <xs:element name="e1" type="xs:string"/>  
   <xs:element name="e2" type="xs:string" substitutionGroup="e1"/>  
  
   <xs:complexType name="t3">  
      <xs:sequence>  
         <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
         <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
      </xs:sequence>  
   </xs:complexType>  
   <xs:element name="e3" type="t3"/>  
</xs:schema>  
```  
  
 Jeśli zostanie podjęta próba weryfikacji następujący kod XML dla powyższego schematu, sprawdzanie poprawności zakończy się niepowodzeniem z powodu następującego wyjątku: "nieobsługiwany wyjątek: System.Xml.Schema.XmlSchemaValidationException: element el"e2"jest nieprawidłowy — wartość"abc"jest nieprawidłowa uwzględnieniu jego typu danych 'http://www.w3.org/2001/XMLSchema:int"— ciąg"abc"nie jest prawidłową wartość Int32."
  
```xml  
<e3><e2>abc</e2></e3>  
```  
  
<a name="security"></a>   
## <a name="security-considerations"></a>Zagadnienia dotyczące bezpieczeństwa  
 Typy i elementy członkowskie w <xref:System.Xml> zależą od przestrzeni nazw [system zabezpieczeń .NET](~/docs/standard/security/index.md). W poniższych sekcjach omówiono problemy z zabezpieczeniami, które są specyficzne dla technologii XML.
  
 Należy również zauważyć, że gdy używasz <xref:System.Xml> typów i członków, jeśli plik XML zawiera dane, które ma potencjalny wpływ na zachowanie prywatności, którą należy wdrożyć aplikację w taki sposób, że szanuje prywatność użytkowników końcowych.
  
 **Dostęp zewnętrzny**  
  
 Wiele technologii XML mają możliwość pobierania inne dokumenty podczas przetwarzania. Na przykład definicja typu dokumentu (DTD) mogą znajdować się w dokumencie analizowana. DTD może także znajdować się w zewnętrznym dokumencie, który odwołuje się do niej dokument analizowana. Język definicji schematu XML (XSD) i technologii XSLT również mieć możliwość uwzględnienia informacji z innych plików. Te zasoby zewnętrzne może powodować pewne problemy dotyczące zabezpieczeń. Na przykład należy zagwarantować, że aplikacja pobiera pliki tylko z zaufanych witryn i czy plik pobierany nie zawiera danych złośliwe.  
  
 <xref:System.Xml.XmlUrlResolver> Klasa jest używana do ładowania dokumentów XML i do rozwiązania zasobów zewnętrznych, takich jak jednostki, definicje DTD lub schematów i zaimportuj lub dyrektywy #include.  
  
 Można zastąpić tę klasę i określ <xref:System.Xml.XmlResolver> obiekt ma być używany. Użyj <xref:System.Xml.XmlSecureResolver> klasy, jeśli trzeba otworzyć zasób, które nie mają kontroli nad lub które nie jest zaufany. <xref:System.Xml.XmlSecureResolver> Opakowuje <xref:System.Xml.XmlResolver> i pozwala ograniczyć zasoby, do którego bazowego <xref:System.Xml.XmlResolver> ma dostęp do.  
  
 **Odmowa usługi**  
  
 Poniższe scenariusze są uznawane za mniej podatne na ataki ponieważ <xref:System.Xml> klasy zapewniać środki ochrony z takich ataków.  
  
-   Analizowanie tekstu danych XML.  
  
-   Analizowanie danych binarnych XML, jeśli dane binarne XML został wygenerowany przez program Microsoft SQL Server.  
  
-   Zapisywanie dokumentów XML i fragmentów ze źródeł danych do systemu plików, strumieni <xref:System.IO.TextWriter>, lub <xref:System.Text.StringBuilder>.  
  
-   Ładowanie dokumentów do obiektu modelu DOM (Document Object), jeśli używasz <xref:System.Xml.XmlReader> obiektu i <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A?displayProperty=nameWithType> równa <xref:System.Xml.DtdProcessing.Prohibit?displayProperty=nameWithType>.  
  
-   Nawigacja obiektu DOM w LICZBIE.  
  
 Następujące scenariusze nie są zalecane, jeśli masz obawy atakom typu odmowa usługi lub jeśli pracujesz w środowisku niezaufanym.  
  
-   Przetwarzanie elementu DTD.  
  
-   Przetwarzanie schematu. W tym dodawanie niezaufanego schematów do kolekcji schematów, kompilując niezaufanego schematów i sprawdzanie poprawności przy użyciu niezaufanego schematów.  
  
-   Przetwarzanie XSLT.  
  
-   Podczas analizowania strumieniem dowolnego użytkownika dostarczonych danych binarnych XML.  
  
-   Dom w LICZBIE operacji takich jak zapytania, edytowanie, przenoszenie podrzędne drzewa między dokumentami i zapisywanie obiekty DOM.  
  
 Jeśli masz obawy typu "odmowa" problemy z usługą lub masz do czynienia z niezaufanego źródła, nie należy włączać przetwarzanie elementu DTD. To jest domyślnie wyłączony na <xref:System.Xml.XmlReader> obiekty, które <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> metoda tworzy.  
  
> [!NOTE]
>  <xref:System.Xml.XmlTextReader> Umożliwia przetwarzanie domyślnie elementu DTD. Użyj <xref:System.Xml.XmlTextReader.DtdProcessing%2A?displayProperty=nameWithType> właściwości, aby wyłączyć tę funkcję.  
  
 Jeśli masz przetwarzanie elementu DTD, włączone, możesz użyć <xref:System.Xml.XmlSecureResolver> klasy, aby ograniczyć zasoby, do którego <xref:System.Xml.XmlReader> mogą uzyskiwać dostęp do. Istnieje również możliwość projektowania aplikacji tak, aby przetwarzania XML jest pamięć i ograniczonego czasu. Na przykład można skonfigurować limity czasu w aplikacji ASP.NET.  
  
 **Zagadnienia dotyczące przetwarzania**  
  
 Ponieważ dokumentów XML może zawierać odwołania do innych plików, jest trudny do określenia, jak dużo mocy obliczeniowej jest wymagany do analizowania dokumentu XML. Na przykład dokumenty XML może zawierać DTD. Jeśli DTD zawiera zagnieżdżone jednostek lub złożonych modeli zawartości, może potrwać nadmierne ilości czasu na analizy dokumentu.  
  
 Korzystając z <xref:System.Xml.XmlReader>, umożliwia ograniczenie rozmiaru dokumentu, który może być analizowane przez ustawienie <xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A?displayProperty=nameWithType> właściwości. Można ograniczyć liczbę znaków, które wynikają z rozwijanie jednostek, ustawiając <xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A?displayProperty=nameWithType> właściwości. W tematach odwołania odpowiednie przykłady ustawienie tych właściwości.  
  
 Technologie XSD i XSLT oferują dodatkowe możliwości, które mogą wpłynąć na wydajność przetwarzania. Na przykład istnieje możliwość utworzenia schematu XML, który wymaga znacznej ilości czasu przetwarzania podczas oceny za pośrednictwem stosunkowo mały dokumentu. Istnieje również możliwość osadzania blokach skryptu w arkuszu stylów XSLT. Obu przypadkach stanowić potencjalne zagrożenie bezpieczeństwa do swojej aplikacji.  
  
 Podczas tworzenia aplikacji, która używa <xref:System.Xml.Xsl.XslCompiledTransform> klasy, należy pamiętać o następujących elementów i ich skutki:  
  
-   XSLT, obsługa skryptów jest domyślnie wyłączona. Powinna być włączona obsługa skryptów XSLT, tylko wtedy, gdy wymagana jest obsługa skryptów i pracy w pełni zaufanym środowisku.  
  
-   Przekształcenie XSLT `document()` funkcja jest domyślnie wyłączona. Po włączeniu `document()` funkcji, ograniczanie zasobów, które mogą być udostępniane przez przekazanie <xref:System.Xml.XmlSecureResolver> obiekt <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType> metody.  
  
-   Obiekty rozszerzeń są domyślnie włączone. Jeśli <xref:System.Xml.Xsl.XsltArgumentList> obiekt, który zawiera obiekty rozszerzeń jest przekazywany do <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType> metody, rozszerzenie obiekty są używane.  
  
-   Arkuszy stylów XSLT może zawierać odwołania do innych plików i bloków osadzonych skryptów. Złośliwy użytkownik może wykorzystać to poprzez dostarczanie danych lub arkusze stylów, który, po wykonaniu może spowodować systemu do przetwarzania, dopóki komputer jest za mało zasobów.  
  
-   Aplikacje XSLT, które działają w środowisku mieszanym zaufania może spowodować fałszowania arkusza stylów. Na przykład złośliwy użytkownik może załadować obiektu z arkusza stylów szkodliwych i przekazują do innego użytkownika, który następnie wywołuje <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType> metody i wykonuje przekształcenie.  
  
 Te problemy dotyczące zabezpieczeń, można zminimalizować, nie włączając skryptów lub `document()` działać, jeśli arkusz stylów pochodzi z zaufanego źródła i nie akceptuje <xref:System.Xml.Xsl.XslCompiledTransform> obiektów, arkuszy stylów XSLT lub źródle danych XML z niezaufanego źródła.  
  
 **Obsługa wyjątków**  
  
 Wyjątki zgłaszane przez składniki poziomu niższe może ujawnić informacje o ścieżce, które mają być widoczne w aplikacji. Aplikacje należy przechwytywać wyjątki i odpowiednio je przetwarzać.  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Xml.Xsl" />
    <altmember cref="N:System.Xml.Schema" />
    <altmember cref="N:System.Xml.Linq" />
  </Docs>
</Namespace>