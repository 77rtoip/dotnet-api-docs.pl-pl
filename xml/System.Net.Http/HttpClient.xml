<Type Name="HttpClient" FullName="System.Net.Http.HttpClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="46aa1ae27ca1b4fb5ce82b784f8a9302a506e467" /><Meta Name="ms.sourcegitcommit" Value="d2dc7b29150110865ef8f199ee7463d9568fc696" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/25/2019" /><Meta Name="ms.locfileid" Value="58414076" /></Metadata><TypeSignature Language="C#" Value="public class HttpClient : System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpClient extends System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="DocId" Value="T:System.Net.Http.HttpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpClient&#xA;Inherits HttpMessageInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpClient : System::Net::Http::HttpMessageInvoker" />
  <TypeSignature Language="F#" Value="type HttpClient = class&#xA;    inherit HttpMessageInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Http</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Http.HttpMessageInvoker</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b2167-101">Udostępnia klasę bazową do wysyłania żądań HTTP i odbierania odpowiedzi HTTP z zasobu zidentyfikowanego z użyciem identyfikatora URI.</span><span class="sxs-lookup"><span data-stu-id="b2167-101">Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-102"><xref:System.Net.Http.HttpClient> Wystąpienia klasy działa jako sesji do wysyłania żądań HTTP.</span><span class="sxs-lookup"><span data-stu-id="b2167-102">The <xref:System.Net.Http.HttpClient> class instance acts as a session to send HTTP requests.</span></span> <span data-ttu-id="b2167-103"><xref:System.Net.Http.HttpClient> Wystąpienia to zbiór ustawienia stosowane do wszystkich żądań, wykonywane przez to wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="b2167-103">An <xref:System.Net.Http.HttpClient> instance is a collection of settings applied to all requests executed by that instance.</span></span> <span data-ttu-id="b2167-104">Ponadto każdy <xref:System.Net.Http.HttpClient> wystąpienie korzysta z własnej puli połączeń, izolując żądań z żądań wykonywanych przez inne <xref:System.Net.Http.HttpClient> wystąpień.</span><span class="sxs-lookup"><span data-stu-id="b2167-104">In addition, every <xref:System.Net.Http.HttpClient> instance uses its own connection pool, isolating its requests from requests executed by other <xref:System.Net.Http.HttpClient> instances.</span></span>  
  
 <span data-ttu-id="b2167-105"><xref:System.Net.Http.HttpClient> Działa również jako klasę bazową, aby uzyskać bardziej szczegółowe klientów HTTP.</span><span class="sxs-lookup"><span data-stu-id="b2167-105">The <xref:System.Net.Http.HttpClient> also acts as a base class for more specific HTTP clients.</span></span> <span data-ttu-id="b2167-106">Przykładem może być FacebookHttpClient, zapewniając dodatkowe metody specyficzne dla usługi sieci web usługi Facebook (metoda GetFriends, na przykład).</span><span class="sxs-lookup"><span data-stu-id="b2167-106">An example would be a FacebookHttpClient providing additional methods specific to a Facebook web service (a GetFriends method, for instance).</span></span> <span data-ttu-id="b2167-107">Klasy pochodne powinny przesłaniać nie wirtualne metody w klasie.</span><span class="sxs-lookup"><span data-stu-id="b2167-107">Derived classes should not override the virtual methods on the class.</span></span> <span data-ttu-id="b2167-108">Zamiast tego należy użyć przeciążenia konstruktora, który akceptuje <xref:System.Net.Http.HttpMessageHandler> skonfigurować wszelkie przed lub po żądania przetwarzania zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="b2167-108">Instead, use a constructor overload that accepts <xref:System.Net.Http.HttpMessageHandler> to configure any pre- or post-request processing instead.</span></span>
  
 <span data-ttu-id="b2167-109">Domyślnie na .NET Framework i platformy Mono <xref:System.Net.HttpWebRequest> służy do wysyłania żądań do serwera.</span><span class="sxs-lookup"><span data-stu-id="b2167-109">By default on .NET Framework and Mono, <xref:System.Net.HttpWebRequest> is used to send requests to the server.</span></span> <span data-ttu-id="b2167-110">To zachowanie może być modyfikowane za pośrednictwem różnych kanałów w jedno z przeciążeń konstruktora, biorąc <xref:System.Net.Http.HttpMessageHandler> wystąpienia jako parametr.</span><span class="sxs-lookup"><span data-stu-id="b2167-110">This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> instance as parameter.</span></span> <span data-ttu-id="b2167-111">Jeśli wymaganych funkcji, takich jak uwierzytelnianie i buforowanie <xref:System.Net.Http.WebRequestHandler> może być używany do konfigurowania ustawień i będzie można wystąpienia przekazane do konstruktora.</span><span class="sxs-lookup"><span data-stu-id="b2167-111">If features like authentication or caching are required, <xref:System.Net.Http.WebRequestHandler> can be used to configure settings and the instance can be passed to the constructor.</span></span> <span data-ttu-id="b2167-112">Zwrócone obsługi mogą być przekazywane do jednego z przeciążeń konstruktora, biorąc <xref:System.Net.Http.HttpMessageHandler> parametru.</span><span class="sxs-lookup"><span data-stu-id="b2167-112">The returned handler can be passed to one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> parameter.</span></span>  
  
 <span data-ttu-id="b2167-113">Jeśli w aplikacji za pomocą <xref:System.Net.Http.HttpClient> i pokrewne klasy w <xref:System.Net.Http> przestrzeni nazw zamierza pobieranie dużych ilości danych (50 megabajtów lub więcej), a następnie aplikacja powinna strumienia te pliki do pobrania i nie używać domyślnego buforowania.</span><span class="sxs-lookup"><span data-stu-id="b2167-113">If an app using <xref:System.Net.Http.HttpClient> and related classes in the <xref:System.Net.Http> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering.</span></span> <span data-ttu-id="b2167-114">Jeśli domyślne buforowanie jest używany będzie stać się bardzo duże użycie pamięci klienta, mogłoby spowodować znaczne zmniejszenie wydajności.</span><span class="sxs-lookup"><span data-stu-id="b2167-114">If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.</span></span>  
  
 <span data-ttu-id="b2167-115">Bezpieczne dla wątków, są następujące metody:</span><span class="sxs-lookup"><span data-stu-id="b2167-115">The following methods are thread safe:</span></span>  
  
1.  <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>  
  
2.  <xref:System.Net.Http.HttpClient.DeleteAsync%2A>  
  
3.  <xref:System.Net.Http.HttpClient.GetAsync%2A>  
  
4.  <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>  
  
5.  <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>  
  
6.  <xref:System.Net.Http.HttpClient.GetStringAsync%2A>  
  
7.  <xref:System.Net.Http.HttpClient.PostAsync%2A>  
  
8.  <xref:System.Net.Http.HttpClient.PutAsync%2A>  
  
9. <xref:System.Net.Http.HttpClient.SendAsync%2A>  
  
 <span data-ttu-id="b2167-116"><xref:System.Net.Http.HttpClient> jest przeznaczony do jednorazowego utworzenia i ponownie używane w całym cyklu życia aplikacji.</span><span class="sxs-lookup"><span data-stu-id="b2167-116"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="b2167-117">Utworzenie wystąpienia klasy HttpClient dla każdego żądania będą wyczerpać liczbę gniazd, które są dostępne pod dużym obciążeniem.</span><span class="sxs-lookup"><span data-stu-id="b2167-117">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="b2167-118">To spowoduje błędy SocketException.</span><span class="sxs-lookup"><span data-stu-id="b2167-118">This will result in SocketException errors.</span></span> <span data-ttu-id="b2167-119">Poniżej przedstawiono przykład poprawnie za pomocą elementu HttpClient.</span><span class="sxs-lookup"><span data-stu-id="b2167-119">Below is an example using HttpClient correctly.</span></span>  
  
```csharp
public class GoodController : ApiController
{
    // OK
    private static readonly HttpClient HttpClient;

    static GoodController()
    {
        HttpClient = new HttpClient();
    }
}
```  
  
<span data-ttu-id="b2167-120"><xref:System.Net.Http.HttpClient> To ogólny interfejs API, który otacza funkcjonalność niższego poziomu dostępne na poszczególnych platformach, w którym jest uruchomiona.</span><span class="sxs-lookup"><span data-stu-id="b2167-120">The <xref:System.Net.Http.HttpClient> is a high-level API that wraps the lower-level functionality available on each platform where it runs.</span></span>

<span data-ttu-id="b2167-121">Na każdej platformie <xref:System.Net.Http.HttpClient> próbuje użyć najbardziej transportu:</span><span class="sxs-lookup"><span data-stu-id="b2167-121">On each platform, <xref:System.Net.Http.HttpClient> tries to use the best available transport:</span></span>

| <span data-ttu-id="b2167-122">**Host/środowiska uruchomieniowego**</span><span class="sxs-lookup"><span data-stu-id="b2167-122">**Host/Runtime**</span></span>            | <span data-ttu-id="b2167-123">**Wewnętrznej bazy danych**</span><span class="sxs-lookup"><span data-stu-id="b2167-123">**Backend**</span></span>                                                                               |
| --------------------------- | ----------------------------------------------------------------------------------------- |
| <span data-ttu-id="b2167-124">Windows/.NET Framework</span><span class="sxs-lookup"><span data-stu-id="b2167-124">Windows/.NET Framework</span></span>      | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="b2167-125">Windows/Mono</span><span class="sxs-lookup"><span data-stu-id="b2167-125">Windows/Mono</span></span>                | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="b2167-126">Windows/UWP</span><span class="sxs-lookup"><span data-stu-id="b2167-126">Windows/UWP</span></span>                 | <span data-ttu-id="b2167-127">Natywne Windows <xref:System.Net.Http.WinHttpHandler> (obsługą protokołu HTTP 2.0)</span><span class="sxs-lookup"><span data-stu-id="b2167-127">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="b2167-128">Windows/platformy .NET Core 1.0 w wersji 2.0</span><span class="sxs-lookup"><span data-stu-id="b2167-128">Windows/.NET Core 1.0-2.0</span></span>   | <span data-ttu-id="b2167-129">Natywne Windows <xref:System.Net.Http.WinHttpHandler> (obsługą protokołu HTTP 2.0)</span><span class="sxs-lookup"><span data-stu-id="b2167-129">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="b2167-130">Android/Xamarin</span><span class="sxs-lookup"><span data-stu-id="b2167-130">Android/Xamarin</span></span>             | <span data-ttu-id="b2167-131">Wybrany w czasie kompilacji.</span><span class="sxs-lookup"><span data-stu-id="b2167-131">Selected at build-time.</span></span> <span data-ttu-id="b2167-132">Można użyć <xref:System.Net.HttpWebRequest> lub być skonfigurowana do używania systemu Android native [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span><span class="sxs-lookup"><span data-stu-id="b2167-132">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Android's native [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span></span> |
| <span data-ttu-id="b2167-133">dla systemu iOS, tvOS i watchOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="b2167-133">iOS, tvOS, watchOS/Xamarin</span></span>  | <span data-ttu-id="b2167-134">Wybrany w czasie kompilacji.</span><span class="sxs-lookup"><span data-stu-id="b2167-134">Selected at build-time.</span></span> <span data-ttu-id="b2167-135">Można użyć <xref:System.Net.HttpWebRequest> lub być skonfigurowana do używania firmy Apple [ `NSUrlSession` ](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (obsługą protokołu HTTP 2.0)</span><span class="sxs-lookup"><span data-stu-id="b2167-135">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="b2167-136">macOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="b2167-136">macOS/Xamarin</span></span>               | <span data-ttu-id="b2167-137">Wybrany w czasie kompilacji.</span><span class="sxs-lookup"><span data-stu-id="b2167-137">Selected at build-time.</span></span> <span data-ttu-id="b2167-138">Można użyć <xref:System.Net.HttpWebRequest> lub być skonfigurowana do używania firmy Apple [ `NSUrlSession` ](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (obsługą protokołu HTTP 2.0)</span><span class="sxs-lookup"><span data-stu-id="b2167-138">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="b2167-139">macOS/Mono</span><span class="sxs-lookup"><span data-stu-id="b2167-139">macOS/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="b2167-140">System macOS/.NET Core 1.0 w wersji 2.0</span><span class="sxs-lookup"><span data-stu-id="b2167-140">macOS/.NET Core 1.0-2.0</span></span>     | <span data-ttu-id="b2167-141">`libcurl`-na podstawie transportu HTTP (HTTP 2.0 stanie)</span><span class="sxs-lookup"><span data-stu-id="b2167-141">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="b2167-142">Linux/Mono</span><span class="sxs-lookup"><span data-stu-id="b2167-142">Linux/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="b2167-143">Linux/platformy .NET Core 1.0 w wersji 2.0</span><span class="sxs-lookup"><span data-stu-id="b2167-143">Linux/.NET Core 1.0-2.0</span></span>     | <span data-ttu-id="b2167-144">`libcurl`-na podstawie transportu HTTP (HTTP 2.0 stanie)</span><span class="sxs-lookup"><span data-stu-id="b2167-144">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="b2167-145">.NET core 2.1 i nowsze</span><span class="sxs-lookup"><span data-stu-id="b2167-145">.NET Core 2.1 and later</span></span>     | <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType>                    |

<span data-ttu-id="b2167-146">Użytkownicy mogą również konfigurować określonego transportu dla <xref:System.Net.Http.HttpClient> wywołując <xref:System.Net.Http.HttpClient.%23ctor*> konstruktora przyjmującego <xref:System.Net.Http.HttpMessageHandler>.</span><span class="sxs-lookup"><span data-stu-id="b2167-146">Users can also configure a specific transport for <xref:System.Net.Http.HttpClient> by invoking the <xref:System.Net.Http.HttpClient.%23ctor*> constructor that takes an <xref:System.Net.Http.HttpMessageHandler>.</span></span>

### <a name="httpclient-and-net-core"></a><span data-ttu-id="b2167-147">HttpClient i .NET Core</span><span class="sxs-lookup"><span data-stu-id="b2167-147">HttpClient and .NET Core</span></span>

<span data-ttu-id="b2167-148">Począwszy od platformy .NET Core 2.1, <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> klasy zamiast `HttpClientHandler` dostarcza implementację posługują się wyższego poziomu klasy sieciowe HTTP, takich jak `HttpClient`.</span><span class="sxs-lookup"><span data-stu-id="b2167-148">Starting with .NET Core 2.1, the <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> class instead of `HttpClientHandler` provides the implementation used by higher-level HTTP networking classes such as `HttpClient`.</span></span> <span data-ttu-id="b2167-149">Korzystanie z <xref:System.Net.Http.SocketsHttpHandler> oferuje następujące korzyści:</span><span class="sxs-lookup"><span data-stu-id="b2167-149">The use of <xref:System.Net.Http.SocketsHttpHandler> offers a number of advantages:</span></span>

- <span data-ttu-id="b2167-150">Poprawa istotnie poprawiającą wydajność w porównaniu z poprzednim wdrożenia.</span><span class="sxs-lookup"><span data-stu-id="b2167-150">A significant performance improvement when compared with the previous implementation.</span></span>

- <span data-ttu-id="b2167-151">Eliminacja zależności platformy, która upraszcza wdrażanie i obsługę.</span><span class="sxs-lookup"><span data-stu-id="b2167-151">The elimination of platform dependencies, which simplifies deployment and servicing.</span></span> <span data-ttu-id="b2167-152">Na przykład `libcurl` nie jest już zależności na platformie .NET Core dla systemów macOS i platformy .NET Core dla systemu Linux.</span><span class="sxs-lookup"><span data-stu-id="b2167-152">For example, `libcurl` is no longer a dependency on .NET Core for macOS and .NET Core for Linux.</span></span>

- <span data-ttu-id="b2167-153">Spójne zachowanie na wszystkich platformach .NET.</span><span class="sxs-lookup"><span data-stu-id="b2167-153">Consistent behavior across all .NET platforms.</span></span>

<span data-ttu-id="b2167-154">Jeśli ta zmiana jest niepożądany, można skonfigurować aplikację do starszej wersji <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> zamiast tego na wiele sposobów:</span><span class="sxs-lookup"><span data-stu-id="b2167-154">If this change is undesirable, you can configure your application to use the older <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> instead in a number of ways:</span></span>

- <span data-ttu-id="b2167-155">Przez wywołanie metody <xref:System.AppContext.SetSwitch%2A?displayProperty=nameWithType> metody w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="b2167-155">By calling the <xref:System.AppContext.SetSwitch%2A?displayProperty=nameWithType> method as follows:</span></span>

   ```csharp
   AppContext.SetSwitch("System.Net.Http.UseSocketsHttpHandler", false);
   ```

   ```vb
   AppContext.SetSwitch("System.Net.Http.UseSocketsHttpHandler", False)
   ``` 
- <span data-ttu-id="b2167-156">Definiując `System.Net.Http.UseSocketsHttpHandler` przełącznika w *. netcore.runtimeconfig.json* pliku konfiguracji:</span><span class="sxs-lookup"><span data-stu-id="b2167-156">By defining the `System.Net.Http.UseSocketsHttpHandler` switch in the *.netcore.runtimeconfig.json* configuration file:</span></span>

  ```json
  "runtimeOptions": {
    "configProperties": {
        "System.Net.Http.UseSocketsHttpHandler": false
    }
  }
  ```
  
- <span data-ttu-id="b2167-157">Definiując zmienną środowiskową o nazwie `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER` i ustawieniem dla niego opcję `false` lub równa 0.</span><span class="sxs-lookup"><span data-stu-id="b2167-157">By defining an environment variable named `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER` and setting it to either `false` or 0.</span></span>

## Examples  
 [!code-csharp[System.Net.Http.HttpClient#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.http.httpclient/cs/source.cs#1)]  
  
 <span data-ttu-id="b2167-158">W poprzednim przykładzie kodu użyto `async Task Main()` punktu wejścia.</span><span class="sxs-lookup"><span data-stu-id="b2167-158">The preceding code example uses an `async Task Main()` entry point.</span></span> <span data-ttu-id="b2167-159">Ta funkcja wymaga C# 7.1 lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="b2167-159">That feature requires C# 7.1 or later.</span></span>
 
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=245696"><span data-ttu-id="b2167-160">Łączenie z usługą sieci web</span><span class="sxs-lookup"><span data-stu-id="b2167-160">Connecting to a web service</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245697"><span data-ttu-id="b2167-161">Szybki start: Łączenie za pomocą elementu HttpClient</span><span class="sxs-lookup"><span data-stu-id="b2167-161">Quickstart: Connecting using HttpClient</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245699"><span data-ttu-id="b2167-162">Jak używać klasy HttpClient obsługi</span><span class="sxs-lookup"><span data-stu-id="b2167-162">How to use HttpClient handlers</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245698"><span data-ttu-id="b2167-163">Jak zabezpieczyć HttpClient połączeń</span><span class="sxs-lookup"><span data-stu-id="b2167-163">How to secure HttpClient connections</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=242550"><span data-ttu-id="b2167-164">Przykładowe klasy HttpClient</span><span class="sxs-lookup"><span data-stu-id="b2167-164">HttpClient Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2167-165">Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.Http.HttpClient" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="b2167-165">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-166"><xref:System.Net.Http.HttpClient> jest przeznaczony do jednorazowego utworzenia i ponownie używane w całym cyklu życia aplikacji.</span><span class="sxs-lookup"><span data-stu-id="b2167-166"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="b2167-167">Utworzenie wystąpienia klasy HttpClient dla każdego żądania będą wyczerpać liczbę gniazd, które są dostępne pod dużym obciążeniem.</span><span class="sxs-lookup"><span data-stu-id="b2167-167">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="b2167-168">To spowoduje błędy SocketException.</span><span class="sxs-lookup"><span data-stu-id="b2167-168">This will result in SocketException errors.</span></span> <span data-ttu-id="b2167-169">Poniżej przedstawiono przykład poprawnie za pomocą elementu HttpClient.</span><span class="sxs-lookup"><span data-stu-id="b2167-169">Below is an example using HttpClient correctly.</span></span>  
  
```csharp  
public class GoodController : ApiController  
{  
    // OK  
    private static readonly HttpClient HttpClient;  
  
    static GoodController()  
    {  
        HttpClient = new HttpClient();  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b2167-170">Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.Http.HttpClient" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="b2167-170">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="b2167-171">Stos programu obsługi HTTP używany do wysyłania żądań.</span><span class="sxs-lookup"><span data-stu-id="b2167-171">The HTTP handler stack to use for sending requests.</span></span></param>
        <summary><span data-ttu-id="b2167-172">Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.Http.HttpClient" /> klasy za pomocą określonego programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="b2167-172">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with a specific handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-173">`handler` zostaną usunięte przez wywołanie metody [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose).</span><span class="sxs-lookup"><span data-stu-id="b2167-173">`handler` will be disposed of by calling [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-174"><paramref name="handler" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-174">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler, bool disposeHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler, disposeHandler As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler, bool disposeHandler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler * bool -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient (handler, disposeHandler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
        <Parameter Name="disposeHandler" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="b2167-175"><see cref="T:System.Net.Http.HttpMessageHandler" /> Odpowiedzialna za przetwarzanie komunikatów odpowiedzi HTTP.</span><span class="sxs-lookup"><span data-stu-id="b2167-175">The <see cref="T:System.Net.Http.HttpMessageHandler" /> responsible for processing the HTTP response messages.</span></span></param>
        <param name="disposeHandler"><span data-ttu-id="b2167-176"><see langword="true" /> Jeśli wewnętrznym programem obsługi powinny być usuwane przez [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose), <see langword="false" /> Jeśli zamierzasz użyć ponownie wewnętrznym programem obsługi.</span><span class="sxs-lookup"><span data-stu-id="b2167-176"><see langword="true" /> if the inner handler should be disposed of by [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose), <see langword="false" /> if you intend to reuse the inner handler.</span></span></param>
        <summary><span data-ttu-id="b2167-177">Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.Http.HttpClient" /> klasy za pomocą określonego programu obsługi.</span><span class="sxs-lookup"><span data-stu-id="b2167-177">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with a specific handler.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-178"><paramref name="handler" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-178">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public Uri BaseAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseAddress As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ BaseAddress { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseAddress : Uri with get, set" Usage="System.Net.Http.HttpClient.BaseAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b2167-179">Pobiera lub ustawia adres podstawowy z identyfikatora URI (Uniform Resource) zasobu internetowego używanego podczas wysyłania żądań.</span><span class="sxs-lookup"><span data-stu-id="b2167-179">Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></summary>
        <value><span data-ttu-id="b2167-180">Adres podstawowy z identyfikatora URI (Uniform Resource) zasobu internetowego używanego podczas wysyłania żądań.</span><span class="sxs-lookup"><span data-stu-id="b2167-180">The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-181">Podczas wysyłania <xref:System.Net.Http.HttpRequestMessage> z względny identyfikator Uri komunikatu, identyfikator Uri zostanie dodany do <xref:System.Net.Http.HttpClient.BaseAddress%2A> właściwości, aby utworzyć bezwzględny identyfikator Uri.</span><span class="sxs-lookup"><span data-stu-id="b2167-181">When sending a <xref:System.Net.Http.HttpRequestMessage> with a relative Uri, the message Uri will be added to the <xref:System.Net.Http.HttpClient.BaseAddress%2A> property to create an absolute Uri.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPendingRequests">
      <MemberSignature Language="C#" Value="public void CancelPendingRequests ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelPendingRequests() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.CancelPendingRequests" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelPendingRequests ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelPendingRequests();" />
      <MemberSignature Language="F#" Value="member this.CancelPendingRequests : unit -&gt; unit" Usage="httpClient.CancelPendingRequests " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b2167-182">Anuluje wszystkie oczekujące żądania, w tym wystąpieniu.</span><span class="sxs-lookup"><span data-stu-id="b2167-182">Cancel all pending requests on this instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-183">Po wywołaniu tej metody <xref:System.Net.Http.HttpClient> wystąpienia, nadal może służyć do wykonywania dodatkowych żądań.</span><span class="sxs-lookup"><span data-stu-id="b2167-183">After calling this method, the <xref:System.Net.Http.HttpClient> instance can still be used to execute additional requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestHeaders">
      <MemberSignature Language="C#" Value="public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultRequestHeaders As HttpRequestHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Http::Headers::HttpRequestHeaders ^ DefaultRequestHeaders { System::Net::Http::Headers::HttpRequestHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestHeaders : System.Net.Http.Headers.HttpRequestHeaders" Usage="System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Headers.HttpRequestHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b2167-184">Pobiera nagłówki, które mają być wysyłane z każdym żądaniem.</span><span class="sxs-lookup"><span data-stu-id="b2167-184">Gets the headers which should be sent with each request.</span></span></summary>
        <value><span data-ttu-id="b2167-185">Nagłówki, które mają być wysyłane z każdym żądaniem.</span><span class="sxs-lookup"><span data-stu-id="b2167-185">The headers which should be sent with each request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-186">Nagłówki, ustaw dla tej właściwości nie trzeba będzie ponownie ustawiać na komunikaty żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-186">Headers set on this property don't need to be set on request messages again.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2167-187">Wyślij żądanie USUŃ do określonego identyfikatora Uri jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-187">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-188">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-188">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="b2167-189">Wyślij żądanie USUŃ do określonego identyfikatora Uri jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-189">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-190">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-190">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-191">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-191">This operation will not block.</span></span> <span data-ttu-id="b2167-192">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-192">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-193"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-193">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2167-194">Komunikat żądania został już wysłany przez <see cref="T:System.Net.Http.HttpClient" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="b2167-194">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-195">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-195">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-196">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-196">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="b2167-197">Wyślij żądanie USUŃ do określonego identyfikatora Uri jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-197">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-198">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-198">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-199">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-199">This operation will not block.</span></span> <span data-ttu-id="b2167-200">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-200">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-201"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-201">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2167-202">Komunikat żądania został już wysłany przez <see cref="T:System.Net.Http.HttpClient" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="b2167-202">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-203">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-203">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-204">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-204">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b2167-205">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="b2167-205">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="b2167-206">Wyślij żądanie Usuń do określonego identyfikatora Uri z tokenem anulowania jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-206">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-207">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-207">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-208">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-208">This operation will not block.</span></span> <span data-ttu-id="b2167-209">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-209">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-210"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-210">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2167-211">Komunikat żądania został już wysłany przez <see cref="T:System.Net.Http.HttpClient" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="b2167-211">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-212">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-212">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-213">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-213">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b2167-214">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="b2167-214">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="b2167-215">Wyślij żądanie Usuń do określonego identyfikatora Uri z tokenem anulowania jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-215">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-216">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-216">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-217">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-217">This operation will not block.</span></span> <span data-ttu-id="b2167-218">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-218">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-219"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-219">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2167-220">Komunikat żądania został już wysłany przez <see cref="T:System.Net.Http.HttpClient" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="b2167-220">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-221">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-221">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="httpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="b2167-222"><see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> do wersji tylko niezarządzane zasoby.</span><span class="sxs-lookup"><span data-stu-id="b2167-222"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="b2167-223">Zwalnia zasoby niezarządzane używane przez <see cref="T:System.Net.Http.HttpClient" /> i opcjonalnie usuwa zarządzane zasoby.</span><span class="sxs-lookup"><span data-stu-id="b2167-223">Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpClient" /> and optionally disposes of the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-224">Ta metoda jest wywoływana przez publiczną `Dispose()` metody i <xref:System.Object.Finalize%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="b2167-224">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="b2167-225">`Dispose()` wywołuje chronioną metodę `Dispose(Boolean)` metody z `disposing` parametr `true`.</span><span class="sxs-lookup"><span data-stu-id="b2167-225">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="b2167-226"><xref:System.Object.Finalize%2A> wywołuje `Dispose` z `disposing` równa `false`.</span><span class="sxs-lookup"><span data-stu-id="b2167-226"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="b2167-227">Gdy `disposing` parametr jest `true`, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane że <xref:System.Net.Http.HttpClient> odwołania.</span><span class="sxs-lookup"><span data-stu-id="b2167-227">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpClient> references.</span></span> <span data-ttu-id="b2167-228">Ta metoda wywołuje `Dispose()` metoda każdego obiektu, do którego istnieje odwołanie.</span><span class="sxs-lookup"><span data-stu-id="b2167-228">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 <span data-ttu-id="b2167-229">Gdy ta metoda jest wywoływana, <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> metoda jest wywoływana, aby przerwać wszystkie oczekujące żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-229">When this method is called, the <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> method is called to abort all pending requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2167-230">Wyślij żądanie POBIERZ do określonego identyfikatora Uri jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-230">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-231">Operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-231">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-232">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-232">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="b2167-233">Wyślij żądanie POBIERZ do określonego identyfikatora Uri jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-233">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-234">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-234">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-235">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-235">This operation will not block.</span></span> <span data-ttu-id="b2167-236">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-236">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-237"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-237">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-238">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-238">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-239">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-239">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="b2167-240">Wyślij żądanie POBIERZ do określonego identyfikatora Uri jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-240">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-241">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-241">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-242">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-242">This operation will not block.</span></span> <span data-ttu-id="b2167-243">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-243">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-244"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-244">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-245">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-245">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-246">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-246">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="b2167-247">Wartość opcji zakończenia aplikacji HTTP, która wskazuje, kiedy operację należy uznać za zakończoną.</span><span class="sxs-lookup"><span data-stu-id="b2167-247">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="b2167-248">Wyślij żądanie Pobierz do określonego identyfikatora Uri z opcją uzupełniania HTTP jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-248">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-249">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-249">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-250">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-250">This operation will not block.</span></span> <span data-ttu-id="b2167-251">Zwrócony <xref:System.Threading.Tasks.Task%601> obiekt na podstawie `completionOption` parametru po odczycie części lub całości odpowiedź (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-251">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-252"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-252">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-253">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-253">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-254">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-254">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b2167-255">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="b2167-255">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="b2167-256">Wyślij żądanie Pobierz do określonego identyfikatora Uri z tokenem anulowania jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-256">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-257">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-257">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-258">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-258">This operation will not block.</span></span> <span data-ttu-id="b2167-259">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-259">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-260"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-260">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-261">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-261">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-262">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-262">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="b2167-263">Wartość opcji zakończenia aplikacji HTTP, która wskazuje, kiedy operację należy uznać za zakończoną.</span><span class="sxs-lookup"><span data-stu-id="b2167-263">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="b2167-264">Wyślij żądanie Pobierz do określonego identyfikatora Uri z opcją uzupełniania HTTP jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-264">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-265">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-265">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-266">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-266">This operation will not block.</span></span> <span data-ttu-id="b2167-267">Zwrócony <xref:System.Threading.Tasks.Task%601> obiekt na podstawie `completionOption` parametru po odczycie części lub całości odpowiedź (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-267">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-268"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-268">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-269">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-269">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-270">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-270">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b2167-271">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="b2167-271">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="b2167-272">Wyślij żądanie Pobierz do określonego identyfikatora Uri z tokenem anulowania jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-272">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-273">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-273">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-274">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-274">This operation will not block.</span></span> <span data-ttu-id="b2167-275">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-275">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-276"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-276">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-277">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-277">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-278">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-278">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="b2167-279">Wartość opcji zakończenia HTTP, która wskazuje, kiedy operację należy uznać za ukończone.</span><span class="sxs-lookup"><span data-stu-id="b2167-279">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b2167-280">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="b2167-280">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="b2167-281">Wyślij żądanie Pobierz do określonego identyfikatora Uri z opcją uzupełniania HTTP i token anulowania, jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-281">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-282">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-282">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-283">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-283">This operation will not block.</span></span> <span data-ttu-id="b2167-284">Zwrócony <xref:System.Threading.Tasks.Task%601> obiekt na podstawie `completionOption` parametru po odczycie części lub całości odpowiedź (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-284">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-285"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-285">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-286">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-286">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-287">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-287">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="b2167-288">Wartość opcji zakończenia HTTP, która wskazuje, kiedy operację należy uznać za ukończone.</span><span class="sxs-lookup"><span data-stu-id="b2167-288">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b2167-289">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="b2167-289">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="b2167-290">Wyślij żądanie Pobierz do określonego identyfikatora Uri z opcją uzupełniania HTTP i token anulowania, jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-290">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-291">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-291">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-292">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-292">This operation will not block.</span></span> <span data-ttu-id="b2167-293">Zwrócony <xref:System.Threading.Tasks.Task%601> obiekt na podstawie `completionOption` parametru po odczycie części lub całości odpowiedź (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-293">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-294"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-294">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-295">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-295">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteArrayAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2167-296">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako tablicę bajtów w operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="b2167-296">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-297">Operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-297">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-298">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-298">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="b2167-299">Wysyła żądanie GET do określonego identyfikatora Uri i zwrócenie treść odpowiedzi jako tablicę bajtów w operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="b2167-299">Sends a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-300">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-300">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-301">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-301">This operation will not block.</span></span> <span data-ttu-id="b2167-302">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="b2167-302">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-303"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-303">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-304">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-304">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As Uri) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : Uri -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-305">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-305">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="b2167-306">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako tablicę bajtów w operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="b2167-306">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-307">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-307">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-308">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-308">This operation will not block.</span></span> <span data-ttu-id="b2167-309">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="b2167-309">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-310"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-310">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-311">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-311">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStreamAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2167-312">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako strumień w operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="b2167-312">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-313">Operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-313">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-314">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-314">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="b2167-315">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako strumień w operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="b2167-315">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-316">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-316">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-317">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-317">This operation will not block.</span></span> <span data-ttu-id="b2167-318">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczytaniu nagłówków odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="b2167-318">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="b2167-319">Ta metoda odczytu, ani nie buforować treść odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="b2167-319">This method does not read nor buffer the response body.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-320"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-320">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-321">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-321">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-322">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-322">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="b2167-323">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako strumień w operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="b2167-323">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-324">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-324">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-325">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-325">This operation will not block.</span></span> <span data-ttu-id="b2167-326">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczytaniu nagłówków odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="b2167-326">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="b2167-327">Ta metoda odczytu, ani nie buforować treść odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="b2167-327">This method does not read nor buffer the response body.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-328"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-328">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-329">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-329">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStringAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2167-330">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako ciąg w operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="b2167-330">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-331">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-331">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-332">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-332">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="b2167-333">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako ciąg w operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="b2167-333">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-334">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-334">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-335">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-335">This operation will not block.</span></span> <span data-ttu-id="b2167-336">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="b2167-336">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-337"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-337">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-338">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-338">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As Uri) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : Uri -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-339">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-339">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="b2167-340">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako ciąg w operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="b2167-340">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-341">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-341">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-342">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-342">This operation will not block.</span></span> <span data-ttu-id="b2167-343">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="b2167-343">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-344"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-344">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-345">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-345">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaxResponseContentBufferSize">
      <MemberSignature Language="C#" Value="public long MaxResponseContentBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxResponseContentBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxResponseContentBufferSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxResponseContentBufferSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxResponseContentBufferSize : int64 with get, set" Usage="System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b2167-346">Pobiera lub ustawia maksymalną liczbę bajtów do zbuforowania podczas odczytywania zawartości odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="b2167-346">Gets or sets the maximum number of bytes to buffer when reading the response content.</span></span></summary>
        <value><span data-ttu-id="b2167-347">Maksymalna liczba bajtów do zbuforowania podczas odczytywania zawartości odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="b2167-347">The maximum number of bytes to buffer when reading the response content.</span></span> <span data-ttu-id="b2167-348">Wartość domyślna tej właściwości to 2 gigabajty.</span><span class="sxs-lookup"><span data-stu-id="b2167-348">The default value for this property is 2 gigabytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-349">Aplikację można ustawić <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> właściwość niższą wartość celu ograniczenia rozmiaru odpowiedzi do bufora podczas odczytywania odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="b2167-349">An app can set the <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property to a lower value to limit the size of the response to buffer when reading the response.</span></span> <span data-ttu-id="b2167-350">Jeśli rozmiar treści odpowiedzi jest większa niż <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> właściwości, zgłaszany jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="b2167-350">If the size of the response content is greater than the  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b2167-351">Określony rozmiar jest mniejszy niż lub równe zero.</span><span class="sxs-lookup"><span data-stu-id="b2167-351">The size specified is less than or equal to zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2167-352">Operacja została już uruchomiona w ramach bieżącego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="b2167-352">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b2167-353">Bieżące wystąpienie zostało usunięte.</span><span class="sxs-lookup"><span data-stu-id="b2167-353">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="content">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="content">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="content">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="content">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2167-354">Wyślij żądanie WYŚLIJ do określonego identyfikatora Uri jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-354">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-355">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-355">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-356">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-356">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="b2167-357">Zawartość żądania HTTP wysyłana do serwera.</span><span class="sxs-lookup"><span data-stu-id="b2167-357">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="b2167-358">Wyślij żądanie WYŚLIJ do określonego identyfikatora Uri jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-358">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-359">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-359">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-360">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-360">This operation will not block.</span></span> <span data-ttu-id="b2167-361">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-361">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-362"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-362">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-363">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-363">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-364">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-364">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="b2167-365">Zawartość żądania HTTP wysyłana do serwera.</span><span class="sxs-lookup"><span data-stu-id="b2167-365">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="b2167-366">Wyślij żądanie WYŚLIJ do określonego identyfikatora Uri jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-366">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-367">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-367">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-368">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-368">This operation will not block.</span></span> <span data-ttu-id="b2167-369">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-369">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-370"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-370">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-371">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-371">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-372">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-372">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="b2167-373">Zawartość żądania HTTP wysyłana do serwera.</span><span class="sxs-lookup"><span data-stu-id="b2167-373">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b2167-374">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="b2167-374">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="b2167-375">Wyślij z tokenem anulowania żądanie POST jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-375">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-376">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-376">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-377">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-377">This operation will not block.</span></span> <span data-ttu-id="b2167-378">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-378">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-379"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-379">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-380">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-380">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-381">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-381">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="b2167-382">Zawartość żądania HTTP wysyłana do serwera.</span><span class="sxs-lookup"><span data-stu-id="b2167-382">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b2167-383">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="b2167-383">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="b2167-384">Wyślij z tokenem anulowania żądanie POST jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-384">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-385">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-385">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-386">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-386">This operation will not block.</span></span> <span data-ttu-id="b2167-387">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-387">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-388"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-388">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-389">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-389">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PutAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2167-390">Wyślij żądanie UMIEŚĆ do określonego identyfikatora Uri jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-390">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-391">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-391">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-392">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-392">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="b2167-393">Zawartość żądania HTTP wysyłana do serwera.</span><span class="sxs-lookup"><span data-stu-id="b2167-393">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="b2167-394">Wyślij żądanie UMIEŚĆ do określonego identyfikatora Uri jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-394">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-395">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-395">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-396">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-396">This operation will not block.</span></span> <span data-ttu-id="b2167-397">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-397">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-398"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-398">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-399">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-399">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-400">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-400">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="b2167-401">Zawartość żądania HTTP wysyłana do serwera.</span><span class="sxs-lookup"><span data-stu-id="b2167-401">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="b2167-402">Wyślij żądanie UMIEŚĆ do określonego identyfikatora Uri jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-402">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-403">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-403">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-404">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-404">This operation will not block.</span></span> <span data-ttu-id="b2167-405">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-405">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-406"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-406">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-407">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-407">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-408">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-408">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="b2167-409">Zawartość żądania HTTP wysyłana do serwera.</span><span class="sxs-lookup"><span data-stu-id="b2167-409">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b2167-410">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="b2167-410">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="b2167-411">Wyślij z tokenem anulowania żądanie PUT jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-411">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-412">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-412">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-413">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-413">This operation will not block.</span></span> <span data-ttu-id="b2167-414">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-414">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-415"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-415">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-416">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-416">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="b2167-417">Wysłano identyfikator Uri żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-417">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="b2167-418">Zawartość żądania HTTP wysyłana do serwera.</span><span class="sxs-lookup"><span data-stu-id="b2167-418">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b2167-419">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="b2167-419">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="b2167-420">Wyślij z tokenem anulowania żądanie PUT jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-420">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-421">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-421">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-422">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-422">This operation will not block.</span></span> <span data-ttu-id="b2167-423">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-423">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-424"><paramref name="requestUri" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-424">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-425">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-425">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2167-426">Wyślij żądanie HTTP jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-426">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-427">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-427">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="b2167-428">Komunikat żądania HTTP do wysłania.</span><span class="sxs-lookup"><span data-stu-id="b2167-428">The HTTP request message to send.</span></span></param>
        <summary><span data-ttu-id="b2167-429">Wyślij żądanie HTTP jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-429">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-430">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-430">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-431">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-431">This operation will not block.</span></span> <span data-ttu-id="b2167-432">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zostanie ukończone po całej odpowiedzi, w tym zawartości jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="b2167-432">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-433"><paramref name="request" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-433">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2167-434">Komunikat żądania został już wysłany przez <see cref="T:System.Net.Http.HttpClient" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="b2167-434">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-435">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-435">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="b2167-436">Komunikat żądania HTTP do wysłania.</span><span class="sxs-lookup"><span data-stu-id="b2167-436">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="b2167-437">Podczas operacji powinno zająć (jak najszybciej odpowiedzi lub po odczytaniu całej odpowiedzi zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-437">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <summary><span data-ttu-id="b2167-438">Wyślij żądanie HTTP jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-438">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-439">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-439">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-440">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-440">This operation will not block.</span></span> <span data-ttu-id="b2167-441">W zależności od wartości `completionOption` parametr, zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się natychmiast odpowiedzi lub całej odpowiedzi, w tym zawartości jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="b2167-441">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-442"><paramref name="request" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-442">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2167-443">Komunikat żądania został już wysłany przez <see cref="T:System.Net.Http.HttpClient" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="b2167-443">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-444">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-444">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="b2167-445">Komunikat żądania HTTP do wysłania.</span><span class="sxs-lookup"><span data-stu-id="b2167-445">The HTTP request message to send.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b2167-446">Token anulowania do anulowania operacji.</span><span class="sxs-lookup"><span data-stu-id="b2167-446">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="b2167-447">Wyślij żądanie HTTP jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-447">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-448">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-448">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-449">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-449">This operation will not block.</span></span> <span data-ttu-id="b2167-450">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zostanie ukończone po całej odpowiedzi, w tym zawartości jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="b2167-450">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-451"><paramref name="request" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-451">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2167-452">Komunikat żądania został już wysłany przez <see cref="T:System.Net.Http.HttpClient" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="b2167-452">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-453">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-453">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="b2167-454">Komunikat żądania HTTP do wysłania.</span><span class="sxs-lookup"><span data-stu-id="b2167-454">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="b2167-455">Podczas operacji powinno zająć (jak najszybciej odpowiedzi lub po odczytaniu całej odpowiedzi zawartości).</span><span class="sxs-lookup"><span data-stu-id="b2167-455">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b2167-456">Token anulowania do anulowania operacji.</span><span class="sxs-lookup"><span data-stu-id="b2167-456">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="b2167-457">Wyślij żądanie HTTP jako operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-457">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b2167-458">Obiekt zadania reprezentujący operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="b2167-458">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-459">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="b2167-459">This operation will not block.</span></span> <span data-ttu-id="b2167-460">W zależności od wartości `completionOption` parametr, zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się natychmiast odpowiedzi lub całej odpowiedzi, w tym zawartości jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="b2167-460">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2167-461"><paramref name="request" /> Jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-461">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2167-462">Komunikat żądania został już wysłany przez <see cref="T:System.Net.Http.HttpClient" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="b2167-462">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="b2167-463">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="b2167-463">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public TimeSpan Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Timeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan with get, set" Usage="System.Net.Http.HttpClient.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b2167-464">Pobiera lub ustawia zakres czasu oczekiwania, zanim upłynie limit czasu żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-464">Gets or sets the timespan to wait before the request times out.</span></span></summary>
        <value><span data-ttu-id="b2167-465">Zakres czasu oczekiwania przed limit czasu żądania.</span><span class="sxs-lookup"><span data-stu-id="b2167-465">The timespan to wait before the request times out.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2167-466">Wartość domyślna to 100 000 milisekund (100 sekund).</span><span class="sxs-lookup"><span data-stu-id="b2167-466">The default value is 100,000 milliseconds (100 seconds).</span></span>  
  
 <span data-ttu-id="b2167-467">Aby ustawić nieskończony limit czasu, ustaw wartość właściwości <xref:System.Threading.Timeout.InfiniteTimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="b2167-467">To set an infinite timeout, set the property value to <xref:System.Threading.Timeout.InfiniteTimeSpan>.</span></span>  
  
 <span data-ttu-id="b2167-468">Kwerendy systemu nazw domen (DNS) może potrwać do 15 sekund, aby zwrócić lub przekraczają limit czasu. Jeśli żądanie zawiera nazwę hosta, który wymaga rozpoznawania i ustawisz <xref:System.Net.Http.HttpClient.Timeout%2A> do wartości mniejszej niż 15 sekund może potrwać 15 sekund lub tylko przed <xref:System.Net.WebException> jest generowany, aby wskazać, przekroczenie limitu czasu na żądanie.</span><span class="sxs-lookup"><span data-stu-id="b2167-468">A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref:System.Net.Http.HttpClient.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request.</span></span>  
  
 <span data-ttu-id="b2167-469">Ten sam limit czasu będą stosowane dla wszystkich żądań za pomocą tego <xref:System.Net.Http.HttpClient> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="b2167-469">The same timeout will apply for all requests using this <xref:System.Net.Http.HttpClient> instance.</span></span>  <span data-ttu-id="b2167-470">Można również ustawić różne limitów czasu dla poszczególnych żądań przy użyciu <xref:System.Threading.CancellationTokenSource> nad zadaniem.</span><span class="sxs-lookup"><span data-stu-id="b2167-470">You may also set different timeouts for individual requests using a <xref:System.Threading.CancellationTokenSource> on a task.</span></span> <span data-ttu-id="b2167-471">Należy zauważyć, że tylko krótszej z dwóch przekroczeń limitu czasu zostaną zastosowane.</span><span class="sxs-lookup"><span data-stu-id="b2167-471">Note that only the shorter of the two timeouts will apply.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b2167-472">Określono limit czasu jest mniejsza niż zero, a nie <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span><span class="sxs-lookup"><span data-stu-id="b2167-472">The timeout specified is less than or equal to zero and is not <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2167-473">Operacja została już uruchomiona w ramach bieżącego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="b2167-473">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b2167-474">Bieżące wystąpienie zostało usunięte.</span><span class="sxs-lookup"><span data-stu-id="b2167-474">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
