<Type Name="HttpClient" FullName="System.Net.Http.HttpClient">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="293f37daee8fffe2b290b14746ec3af85db7d76c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39871455" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HttpClient : System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpClient extends System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="DocId" Value="T:System.Net.Http.HttpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpClient&#xA;Inherits HttpMessageInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpClient : System::Net::Http::HttpMessageInvoker" />
  <TypeSignature Language="F#" Value="type HttpClient = class&#xA;    inherit HttpMessageInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Http</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Http.HttpMessageInvoker</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="c15bc-101">Udostępnia klasę bazową do wysyłania żądań HTTP i odbierania odpowiedzi HTTP z zasobu zidentyfikowanego z użyciem identyfikatora URI.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c15bc-101">Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-102"><xref:System.Net.Http.HttpClient> Wystąpienia klasy działa jako sesji do wysyłania żądań HTTP.</span><span class="sxs-lookup"><span data-stu-id="c15bc-102">The <xref:System.Net.Http.HttpClient> class instance acts as a session to send HTTP requests.</span></span> <span data-ttu-id="c15bc-103"><xref:System.Net.Http.HttpClient> Wystąpienia to zbiór ustawienia stosowane do wszystkich żądań, wykonywane przez to wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="c15bc-103">An <xref:System.Net.Http.HttpClient> instance is a collection of settings applied to all requests executed by that instance.</span></span> <span data-ttu-id="c15bc-104">Ponadto każdy <xref:System.Net.Http.HttpClient> wystąpienie korzysta z własnej puli połączeń, izolując żądań z żądań wykonywanych przez inne <xref:System.Net.Http.HttpClient> wystąpień.</span><span class="sxs-lookup"><span data-stu-id="c15bc-104">In addition, every <xref:System.Net.Http.HttpClient> instance uses its own connection pool, isolating its requests from requests executed by other <xref:System.Net.Http.HttpClient> instances.</span></span>  
  
 <span data-ttu-id="c15bc-105"><xref:System.Net.Http.HttpClient> Działa również jako klasę bazową, aby uzyskać bardziej szczegółowe klientów HTTP.</span><span class="sxs-lookup"><span data-stu-id="c15bc-105">The <xref:System.Net.Http.HttpClient> also acts as a base class for more specific HTTP clients.</span></span> <span data-ttu-id="c15bc-106">Przykładem może być FacebookHttpClient, zapewniając dodatkowe metody specyficzne dla usługi sieci web usługi Facebook (metoda GetFriends, na przykład).</span><span class="sxs-lookup"><span data-stu-id="c15bc-106">An example would be a FacebookHttpClient providing additional methods specific to a Facebook web service (a GetFriends method, for instance).</span></span> <span data-ttu-id="c15bc-107">Klasy pochodne powinny przesłaniać nie wirtualne metody w klasie.</span><span class="sxs-lookup"><span data-stu-id="c15bc-107">Derived classes should not override the virtual methods on the class.</span></span> <span data-ttu-id="c15bc-108">Zamiast tego należy użyć przeciążenia konstruktora, który akceptuje <xref:System.Net.Http.HttpMessageHandler> skonfigurować wszelkie przed lub po żądania przetwarzania zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="c15bc-108">Instead, use a constructor overload that accepts <xref:System.Net.Http.HttpMessageHandler> to configure any pre- or post-request processing instead.</span></span>
  
 <span data-ttu-id="c15bc-109">Domyślnie <xref:System.Net.HttpWebRequest> będzie używany do wysyłania żądań do serwera.</span><span class="sxs-lookup"><span data-stu-id="c15bc-109">By default, <xref:System.Net.HttpWebRequest> will be used to send requests to the server.</span></span> <span data-ttu-id="c15bc-110">To zachowanie może być modyfikowane za pośrednictwem różnych kanałów w jedno z przeciążeń konstruktora, biorąc <xref:System.Net.Http.HttpMessageHandler> wystąpienia jako parametr.</span><span class="sxs-lookup"><span data-stu-id="c15bc-110">This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> instance as parameter.</span></span> <span data-ttu-id="c15bc-111">Jeśli wymaganych funkcji, takich jak uwierzytelnianie i buforowanie <xref:System.Net.Http.WebRequestHandler> może być używany do konfigurowania ustawień i będzie można wystąpienia przekazane do konstruktora.</span><span class="sxs-lookup"><span data-stu-id="c15bc-111">If features like authentication or caching are required, <xref:System.Net.Http.WebRequestHandler> can be used to configure settings and the instance can be passed to the constructor.</span></span> <span data-ttu-id="c15bc-112">Zwrócone obsługi mogą być przekazywane do jednego z przeciążeń konstruktora, biorąc <xref:System.Net.Http.HttpMessageHandler> parametru.</span><span class="sxs-lookup"><span data-stu-id="c15bc-112">The returned handler can be passed to one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> parameter.</span></span>  
  
 <span data-ttu-id="c15bc-113">Jeśli w aplikacji za pomocą <xref:System.Net.Http.HttpClient> i pokrewne klasy w <xref:System.Net.Http> przestrzeni nazw zamierza pobieranie dużych ilości danych (50 megabajtów lub więcej), a następnie aplikacja powinna strumienia te pliki do pobrania i nie używać domyślnego buforowania.</span><span class="sxs-lookup"><span data-stu-id="c15bc-113">If an app using <xref:System.Net.Http.HttpClient> and related classes in the  <xref:System.Net.Http> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering.</span></span> <span data-ttu-id="c15bc-114">Jeśli domyślne buforowanie jest używany będzie stać się bardzo duże użycie pamięci klienta, mogłoby spowodować znaczne zmniejszenie wydajności.</span><span class="sxs-lookup"><span data-stu-id="c15bc-114">If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.</span></span>  
  
 <span data-ttu-id="c15bc-115">Bezpieczne dla wątków, są następujące metody:</span><span class="sxs-lookup"><span data-stu-id="c15bc-115">The following methods are thread safe:</span></span>  
  
1.  <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>  
  
2.  <xref:System.Net.Http.HttpClient.DeleteAsync%2A>  
  
3.  <xref:System.Net.Http.HttpClient.GetAsync%2A>  
  
4.  <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>  
  
5.  <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>  
  
6.  <xref:System.Net.Http.HttpClient.GetStringAsync%2A>  
  
7.  <xref:System.Net.Http.HttpClient.PostAsync%2A>  
  
8.  <xref:System.Net.Http.HttpClient.PutAsync%2A>  
  
9. <xref:System.Net.Http.HttpClient.SendAsync%2A>  
  
 <span data-ttu-id="c15bc-116"><xref:System.Net.Http.HttpClient> jest przeznaczony do jednorazowego utworzenia i ponownie używane w całym cyklu życia aplikacji.</span><span class="sxs-lookup"><span data-stu-id="c15bc-116"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="c15bc-117">Utworzenie wystąpienia klasy HttpClient dla każdego żądania będą wyczerpać liczbę gniazd, które są dostępne pod dużym obciążeniem.</span><span class="sxs-lookup"><span data-stu-id="c15bc-117">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="c15bc-118">To spowoduje błędy SocketException.</span><span class="sxs-lookup"><span data-stu-id="c15bc-118">This will result in SocketException errors.</span></span> <span data-ttu-id="c15bc-119">Poniżej przedstawiono przykład poprawnie za pomocą elementu HttpClient.</span><span class="sxs-lookup"><span data-stu-id="c15bc-119">Below is an example using HttpClient correctly.</span></span>  
  
```csharp  
public class GoodController : ApiController  
{  
    // OK  
    private static readonly HttpClient HttpClient;  
  
    static GoodController()  
    {  
        HttpClient = new HttpClient();  
    }  
}  
  
```  
  
<span data-ttu-id="c15bc-120"><xref:System.Net.Http.HttpClient> To ogólny interfejs API, który otacza funkcjonalność niższego poziomu dostępne na poszczególnych platformach, w którym jest uruchomiona.</span><span class="sxs-lookup"><span data-stu-id="c15bc-120">The <xref:System.Net.Http.HttpClient> is a high-level API that wraps the lower-level functionality available on each platform where it runs.</span></span>

<span data-ttu-id="c15bc-121">Na każdej platformie <xref:System.Net.Http.HttpClient> próbuje użyć najbardziej transportu:</span><span class="sxs-lookup"><span data-stu-id="c15bc-121">On each platform, <xref:System.Net.Http.HttpClient> tries to use the best available transport:</span></span>

| <span data-ttu-id="c15bc-122">**Host/środowiska uruchomieniowego**</span><span class="sxs-lookup"><span data-stu-id="c15bc-122">**Host/Runtime**</span></span>            | <span data-ttu-id="c15bc-123">**Wewnętrznej bazy danych**</span><span class="sxs-lookup"><span data-stu-id="c15bc-123">**Backend**</span></span>                                                                               |
| --------------------------- | ----------------------------------------------------------------------------------------- |
| <span data-ttu-id="c15bc-124">Windows/.NET Framework</span><span class="sxs-lookup"><span data-stu-id="c15bc-124">Windows/.NET Framework</span></span>      | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="c15bc-125">Windows/Mono</span><span class="sxs-lookup"><span data-stu-id="c15bc-125">Windows/Mono</span></span>                | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="c15bc-126">Windows/UWP</span><span class="sxs-lookup"><span data-stu-id="c15bc-126">Windows/UWP</span></span>                 | <span data-ttu-id="c15bc-127">Natywne Windows <xref:System.Net.Http.WinHttpHandler> (obsługą protokołu HTTP 2.0)</span><span class="sxs-lookup"><span data-stu-id="c15bc-127">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="c15bc-128">Windows/.NET Core</span><span class="sxs-lookup"><span data-stu-id="c15bc-128">Windows/.NET Core</span></span>           | <span data-ttu-id="c15bc-129">Natywne Windows <xref:System.Net.Http.WinHttpHandler> (obsługą protokołu HTTP 2.0)</span><span class="sxs-lookup"><span data-stu-id="c15bc-129">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="c15bc-130">Android/Xamarin</span><span class="sxs-lookup"><span data-stu-id="c15bc-130">Android/Xamarin</span></span>             | <span data-ttu-id="c15bc-131">Wybrany w czasie kompilacji.</span><span class="sxs-lookup"><span data-stu-id="c15bc-131">Selected at build-time.</span></span> <span data-ttu-id="c15bc-132">Można użyć <xref:System.Net.HttpWebRequest> lub być skonfigurowana do używania systemu Android native [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span><span class="sxs-lookup"><span data-stu-id="c15bc-132">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Android's native [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span></span> |
| <span data-ttu-id="c15bc-133">dla systemu iOS, tvOS i watchOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="c15bc-133">iOS, tvOS, watchOS/Xamarin</span></span>  | <span data-ttu-id="c15bc-134">Wybrany w czasie kompilacji.</span><span class="sxs-lookup"><span data-stu-id="c15bc-134">Selected at build-time.</span></span> <span data-ttu-id="c15bc-135">Można użyć <xref:System.Net.HttpWebRequest> lub być skonfigurowana do używania firmy Apple [ `NSUrlSession` ](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (obsługą protokołu HTTP 2.0)</span><span class="sxs-lookup"><span data-stu-id="c15bc-135">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="c15bc-136">macOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="c15bc-136">macOS/Xamarin</span></span>               | <span data-ttu-id="c15bc-137">Wybrany w czasie kompilacji.</span><span class="sxs-lookup"><span data-stu-id="c15bc-137">Selected at build-time.</span></span> <span data-ttu-id="c15bc-138">Można użyć <xref:System.Net.HttpWebRequest> lub być skonfigurowana do używania firmy Apple [ `NSUrlSession` ](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (obsługą protokołu HTTP 2.0)</span><span class="sxs-lookup"><span data-stu-id="c15bc-138">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="c15bc-139">macOS/Mono</span><span class="sxs-lookup"><span data-stu-id="c15bc-139">macOS/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                                          |
| <span data-ttu-id="c15bc-140">macOS/.NET Core</span><span class="sxs-lookup"><span data-stu-id="c15bc-140">macOS/.NET Core</span></span>             | <span data-ttu-id="c15bc-141">`libcurl`-na podstawie transportu HTTP (HTTP 2.0 stanie)</span><span class="sxs-lookup"><span data-stu-id="c15bc-141">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="c15bc-142">Linux/Mono</span><span class="sxs-lookup"><span data-stu-id="c15bc-142">Linux/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="c15bc-143">Linux/.NET Core</span><span class="sxs-lookup"><span data-stu-id="c15bc-143">Linux/.NET Core</span></span>             | <span data-ttu-id="c15bc-144">`libcurl`-na podstawie transportu HTTP (HTTP 2.0 stanie)</span><span class="sxs-lookup"><span data-stu-id="c15bc-144">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |

<span data-ttu-id="c15bc-145">Użytkownicy mogą również konfigurować określonego transportu dla <xref:System.Net.Http.HttpClient> wywołując <xref:System.Net.Http.HttpClient.%23ctor*> konstruktora przyjmującego <xref:System.Net.Http.HttpMessageHandler>.</span><span class="sxs-lookup"><span data-stu-id="c15bc-145">Users can also configure a specific transport for <xref:System.Net.Http.HttpClient> by invoking the <xref:System.Net.Http.HttpClient.%23ctor*> constructor that takes an <xref:System.Net.Http.HttpMessageHandler>.</span></span>

### <a name="httpclient-and-net-core"></a><span data-ttu-id="c15bc-146">HttpClient i .NET Core</span><span class="sxs-lookup"><span data-stu-id="c15bc-146">HttpClient and .NET Core</span></span>

<span data-ttu-id="c15bc-147">Począwszy od platformy .NET Core 2.1, <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> klasy zamiast `HttpClientHandler` dostarcza implementację posługują się wyższego poziomu klasy sieciowe HTTP, takich jak `HttpClient`.</span><span class="sxs-lookup"><span data-stu-id="c15bc-147">Starting with .NET Core 2.1, the <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> class instead of `HttpClientHandler` provides the implementation used by higher-level HTTP networking classes such as `HttpClient`.</span></span> <span data-ttu-id="c15bc-148">Można skonfigurować aplikację do starszej wersji <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> zamiast przez wywołanie <xref:System.AppContext.SetSwitch%2A> metody w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="c15bc-148">You can configure your application to use the older <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> instead by calling the <xref:System.AppContext.SetSwitch%2A> method as follows:</span></span>

```csharp
AppContext.SetSwitch("System.Net.Http.useSocketsHttpHandler", false);
```
```vb
AppContext.SetSwitch("System.Net.Http.useSocketsHttpHandler", False)
``` 
  
## Examples  
 [!code-csharp[System.Net.Http.HttpClient#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.http.httpclient/cs/source.cs#1)]  
  
 <span data-ttu-id="c15bc-149">W poprzednim przykładzie kodu użyto `async Task Main()` punktu wejścia.</span><span class="sxs-lookup"><span data-stu-id="c15bc-149">The preceding code example uses an `async Task Main()` entry point.</span></span> <span data-ttu-id="c15bc-150">Ta funkcja wymaga C# 7.1 lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="c15bc-150">That feature requires C# 7.1 or later.</span></span>
 
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c15bc-151">Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.Http.HttpClient" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-151">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-152"><xref:System.Net.Http.HttpClient> jest przeznaczony do jednorazowego utworzenia i ponownie używane w całym cyklu życia aplikacji.</span><span class="sxs-lookup"><span data-stu-id="c15bc-152"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="c15bc-153">Utworzenie wystąpienia klasy HttpClient dla każdego żądania będą wyczerpać liczbę gniazd, które są dostępne pod dużym obciążeniem.</span><span class="sxs-lookup"><span data-stu-id="c15bc-153">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="c15bc-154">To spowoduje błędy SocketException.</span><span class="sxs-lookup"><span data-stu-id="c15bc-154">This will result in SocketException errors.</span></span> <span data-ttu-id="c15bc-155">Poniżej przedstawiono przykład poprawnie za pomocą elementu HttpClient.</span><span class="sxs-lookup"><span data-stu-id="c15bc-155">Below is an example using HttpClient correctly.</span></span>  
  
```csharp  
public class GoodController : ApiController  
{  
    // OK  
    private static readonly HttpClient HttpClient;  
  
    static GoodController()  
    {  
        HttpClient = new HttpClient();  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c15bc-156">Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.Http.HttpClient" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-156">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
      </Parameters>
      <Docs>
        <param name="handler">
          <span data-ttu-id="c15bc-157">Stos programu obsługi HTTP używany do wysyłania żądań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-157">The HTTP handler stack to use for sending requests.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-158">Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.Http.HttpClient" /> klasy za pomocą określonego programu obsługi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-158">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with a specific handler.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-159">`handler` zostaną usunięte przez wywołanie metody [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose).</span><span class="sxs-lookup"><span data-stu-id="c15bc-159">`handler` will be disposed of by calling [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-160">
            <paramref name="handler" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-160">The <paramref name="handler" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler, bool disposeHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler, disposeHandler As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler, bool disposeHandler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler * bool -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient (handler, disposeHandler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
        <Parameter Name="disposeHandler" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler">
          <span data-ttu-id="c15bc-161">
            <see cref="T:System.Net.Http.HttpMessageHandler" /> Odpowiedzialna za przetwarzanie komunikatów odpowiedzi HTTP.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-161">The <see cref="T:System.Net.Http.HttpMessageHandler" /> responsible for processing the HTTP response messages.</span>
          </span>
        </param>
        <param name="disposeHandler">
          <span data-ttu-id="c15bc-162">
            <see langword="true" /> Jeśli wewnętrznym programem obsługi powinny być usuwane przez [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose), <see langword="false" /> Jeśli zamierzasz użyć ponownie wewnętrznym programem obsługi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-162">
              <see langword="true" /> if the inner handler should be disposed of by [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose), <see langword="false" /> if you intend to reuse the inner handler.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-163">Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.Http.HttpClient" /> klasy za pomocą określonego programu obsługi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-163">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with a specific handler.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-164">
            <paramref name="handler" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-164">The <paramref name="handler" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public Uri BaseAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseAddress As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ BaseAddress { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseAddress : Uri with get, set" Usage="System.Net.Http.HttpClient.BaseAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c15bc-165">Pobiera lub ustawia adres podstawowy z identyfikatora URI (Uniform Resource) zasobu internetowego używanego podczas wysyłania żądań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-165">Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c15bc-166">Adres podstawowy z identyfikatora URI (Uniform Resource) zasobu internetowego używanego podczas wysyłania żądań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-166">The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-167">Podczas wysyłania <xref:System.Net.Http.HttpRequestMessage> z względny identyfikator Uri komunikatu, identyfikator Uri zostanie dodany do <xref:System.Net.Http.HttpClient.BaseAddress%2A> właściwości, aby utworzyć bezwzględny identyfikator Uri.</span><span class="sxs-lookup"><span data-stu-id="c15bc-167">When sending a <xref:System.Net.Http.HttpRequestMessage> with a relative Uri, the message Uri will be added to the <xref:System.Net.Http.HttpClient.BaseAddress%2A> property to create an absolute Uri.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPendingRequests">
      <MemberSignature Language="C#" Value="public void CancelPendingRequests ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelPendingRequests() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.CancelPendingRequests" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelPendingRequests ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelPendingRequests();" />
      <MemberSignature Language="F#" Value="member this.CancelPendingRequests : unit -&gt; unit" Usage="httpClient.CancelPendingRequests " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c15bc-168">Anuluje wszystkie oczekujące żądania, w tym wystąpieniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-168">Cancel all pending requests on this instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-169">Po wywołaniu tej metody <xref:System.Net.Http.HttpClient> wystąpienia, nadal może służyć do wykonywania dodatkowych żądań.</span><span class="sxs-lookup"><span data-stu-id="c15bc-169">After calling this method, the <xref:System.Net.Http.HttpClient> instance can still be used to execute additional requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestHeaders">
      <MemberSignature Language="C#" Value="public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultRequestHeaders As HttpRequestHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Http::Headers::HttpRequestHeaders ^ DefaultRequestHeaders { System::Net::Http::Headers::HttpRequestHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestHeaders : System.Net.Http.Headers.HttpRequestHeaders" Usage="System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Headers.HttpRequestHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c15bc-170">Pobiera nagłówki, które mają być wysyłane z każdym żądaniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-170">Gets the headers which should be sent with each request.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c15bc-171">Nagłówki, które mają być wysyłane z każdym żądaniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-171">The headers which should be sent with each request.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-172">Nagłówki, ustaw dla tej właściwości nie trzeba będzie ponownie ustawiać na komunikaty żądania.</span><span class="sxs-lookup"><span data-stu-id="c15bc-172">Headers set on this property don't need to be set on request messages again.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c15bc-173">Wyślij żądanie USUŃ do określonego identyfikatora Uri jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-173">Send a DELETE request to the specified Uri as an asynchronous operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-174">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-174">The Uri the request is sent to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-175">Wyślij żądanie USUŃ do określonego identyfikatora Uri jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-175">Send a DELETE request to the specified Uri as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-176">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-176">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-177">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-177">This operation will not block.</span></span> <span data-ttu-id="c15bc-178">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-178">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-179">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-179">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c15bc-180">Komunikat żądania został już wysłany przez <see cref="T:System.Net.Http.HttpClient" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-180">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-181">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-181">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-182">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-182">The Uri the request is sent to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-183">Wyślij żądanie USUŃ do określonego identyfikatora Uri jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-183">Send a DELETE request to the specified Uri as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-184">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-184">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-185">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-185">This operation will not block.</span></span> <span data-ttu-id="c15bc-186">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-186">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-187">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-187">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c15bc-188">Komunikat żądania został już wysłany przez <see cref="T:System.Net.Http.HttpClient" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-188">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-189">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-189">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-190">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-190">The Uri the request is sent to.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c15bc-191">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-191">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-192">Wyślij żądanie Usuń do określonego identyfikatora Uri z tokenem anulowania jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-192">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-193">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-193">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-194">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-194">This operation will not block.</span></span> <span data-ttu-id="c15bc-195">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-195">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-196">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-196">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c15bc-197">Komunikat żądania został już wysłany przez <see cref="T:System.Net.Http.HttpClient" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-197">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-198">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-198">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-199">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-199">The Uri the request is sent to.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c15bc-200">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-200">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-201">Wyślij żądanie Usuń do określonego identyfikatora Uri z tokenem anulowania jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-201">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-202">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-202">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-203">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-203">This operation will not block.</span></span> <span data-ttu-id="c15bc-204">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-204">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-205">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-205">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c15bc-206">Komunikat żądania został już wysłany przez <see cref="T:System.Net.Http.HttpClient" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-206">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-207">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-207">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="httpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="c15bc-208">
            <see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> do wersji tylko niezarządzane zasoby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-208">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-209">Zwalnia zasoby niezarządzane używane przez <see cref="T:System.Net.Http.HttpClient" /> i opcjonalnie usuwa zarządzane zasoby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-209">Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpClient" /> and optionally disposes of the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-210">Ta metoda jest wywoływana przez publiczną `Dispose()` metody i <xref:System.Object.Finalize%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c15bc-210">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="c15bc-211">`Dispose()` wywołuje chronioną metodę `Dispose(Boolean)` metody z `disposing` parametr `true`.</span><span class="sxs-lookup"><span data-stu-id="c15bc-211">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="c15bc-212"><xref:System.Object.Finalize%2A> wywołuje `Dispose` z `disposing` równa `false`.</span><span class="sxs-lookup"><span data-stu-id="c15bc-212"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="c15bc-213">Gdy `disposing` parametr jest `true`, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane że <xref:System.Net.Http.HttpClient> odwołania.</span><span class="sxs-lookup"><span data-stu-id="c15bc-213">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpClient> references.</span></span> <span data-ttu-id="c15bc-214">Ta metoda wywołuje `Dispose()` metoda każdego obiektu, do którego istnieje odwołanie.</span><span class="sxs-lookup"><span data-stu-id="c15bc-214">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 <span data-ttu-id="c15bc-215">Gdy ta metoda jest wywoływana, <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> metoda jest wywoływana, aby przerwać wszystkie oczekujące żądania.</span><span class="sxs-lookup"><span data-stu-id="c15bc-215">When this method is called, the <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> method is called to abort all pending requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c15bc-216">Wyślij żądanie POBIERZ do określonego identyfikatora Uri jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-216">Send a GET request to the specified Uri as an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-217">Operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-217">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-218">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-218">The Uri the request is sent to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-219">Wyślij żądanie POBIERZ do określonego identyfikatora Uri jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-219">Send a GET request to the specified Uri as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-220">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-220">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-221">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-221">This operation will not block.</span></span> <span data-ttu-id="c15bc-222">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-222">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-223">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-223">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-224">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-224">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-225">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-225">The Uri the request is sent to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-226">Wyślij żądanie POBIERZ do określonego identyfikatora Uri jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-226">Send a GET request to the specified Uri as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-227">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-227">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-228">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-228">This operation will not block.</span></span> <span data-ttu-id="c15bc-229">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-229">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-230">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-230">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-231">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-231">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-232">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-232">The Uri the request is sent to.</span>
          </span>
        </param>
        <param name="completionOption">
          <span data-ttu-id="c15bc-233">Wartość opcji zakończenia aplikacji HTTP, która wskazuje, kiedy operację należy uznać za zakończoną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-233">An HTTP completion option value that indicates when the operation should be considered completed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-234">Wyślij żądanie Pobierz do określonego identyfikatora Uri z opcją uzupełniania HTTP jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-234">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-235">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-235">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-236">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-236">This operation will not block.</span></span> <span data-ttu-id="c15bc-237">Zwrócony <xref:System.Threading.Tasks.Task%601> obiekt na podstawie `completionOption` parametru po odczycie części lub całości odpowiedź (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-237">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-238">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-238">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-239">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-239">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-240">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-240">The Uri the request is sent to.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c15bc-241">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-241">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-242">Wyślij żądanie Pobierz do określonego identyfikatora Uri z tokenem anulowania jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-242">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-243">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-243">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-244">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-244">This operation will not block.</span></span> <span data-ttu-id="c15bc-245">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-245">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-246">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-246">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-247">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-247">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-248">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-248">The Uri the request is sent to.</span>
          </span>
        </param>
        <param name="completionOption">
          <span data-ttu-id="c15bc-249">Wartość opcji zakończenia aplikacji HTTP, która wskazuje, kiedy operację należy uznać za zakończoną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-249">An HTTP completion option value that indicates when the operation should be considered completed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-250">Wyślij żądanie Pobierz do określonego identyfikatora Uri z opcją uzupełniania HTTP jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-250">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-251">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-251">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-252">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-252">This operation will not block.</span></span> <span data-ttu-id="c15bc-253">Zwrócony <xref:System.Threading.Tasks.Task%601> obiekt na podstawie `completionOption` parametru po odczycie części lub całości odpowiedź (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-253">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-254">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-254">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-255">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-255">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-256">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-256">The Uri the request is sent to.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c15bc-257">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-257">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-258">Wyślij żądanie Pobierz do określonego identyfikatora Uri z tokenem anulowania jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-258">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-259">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-259">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-260">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-260">This operation will not block.</span></span> <span data-ttu-id="c15bc-261">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-261">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-262">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-262">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-263">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-263">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-264">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-264">The Uri the request is sent to.</span>
          </span>
        </param>
        <param name="completionOption">
          <span data-ttu-id="c15bc-265">Wartość opcji zakończenia HTTP, która wskazuje, kiedy operację należy uznać za ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-265">An HTTP  completion option value that indicates when the operation should be considered completed.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c15bc-266">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-266">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-267">Wyślij żądanie Pobierz do określonego identyfikatora Uri z opcją uzupełniania HTTP i token anulowania, jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-267">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-268">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-268">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-269">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-269">This operation will not block.</span></span> <span data-ttu-id="c15bc-270">Zwrócony <xref:System.Threading.Tasks.Task%601> obiekt na podstawie `completionOption` parametru po odczycie części lub całości odpowiedź (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-270">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-271">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-271">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-272">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-272">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-273">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-273">The Uri the request is sent to.</span>
          </span>
        </param>
        <param name="completionOption">
          <span data-ttu-id="c15bc-274">Wartość opcji zakończenia HTTP, która wskazuje, kiedy operację należy uznać za ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-274">An HTTP  completion option value that indicates when the operation should be considered completed.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c15bc-275">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-275">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-276">Wyślij żądanie Pobierz do określonego identyfikatora Uri z opcją uzupełniania HTTP i token anulowania, jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-276">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-277">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-277">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-278">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-278">This operation will not block.</span></span> <span data-ttu-id="c15bc-279">Zwrócony <xref:System.Threading.Tasks.Task%601> obiekt na podstawie `completionOption` parametru po odczycie części lub całości odpowiedź (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-279">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-280">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-280">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-281">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-281">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteArrayAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c15bc-282">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako tablicę bajtów w operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-282">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-283">Operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-283">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-284">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-284">The Uri the request is sent to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-285">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako tablicę bajtów w operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-285">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-286">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-286">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-287">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-287">This operation will not block.</span></span> <span data-ttu-id="c15bc-288">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="c15bc-288">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-289">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-289">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-290">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-290">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As Uri) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : Uri -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-291">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-291">The Uri the request is sent to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-292">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako tablicę bajtów w operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-292">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-293">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-293">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-294">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-294">This operation will not block.</span></span> <span data-ttu-id="c15bc-295">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="c15bc-295">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-296">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-296">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-297">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-297">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStreamAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c15bc-298">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako strumień w operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-298">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-299">Operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-299">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-300">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-300">The Uri the request is sent to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-301">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako strumień w operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-301">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-302">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-302">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-303">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-303">This operation will not block.</span></span> <span data-ttu-id="c15bc-304">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczytaniu nagłówków odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="c15bc-304">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="c15bc-305">Ta metoda odczytu, ani nie buforować treść odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="c15bc-305">This method does not read nor buffer the response body.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-306">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-306">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-307">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-307">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-308">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-308">The Uri the request is sent to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-309">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako strumień w operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-309">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-310">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-310">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-311">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-311">This operation will not block.</span></span> <span data-ttu-id="c15bc-312">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczytaniu nagłówków odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="c15bc-312">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="c15bc-313">Ta metoda odczytu, ani nie buforować treść odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="c15bc-313">This method does not read nor buffer the response body.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-314">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-314">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-315">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-315">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStringAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c15bc-316">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako ciąg w operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-316">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-317">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-317">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-318">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-318">The Uri the request is sent to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-319">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako ciąg w operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-319">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-320">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-320">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-321">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-321">This operation will not block.</span></span> <span data-ttu-id="c15bc-322">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="c15bc-322">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-323">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-323">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-324">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-324">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As Uri) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : Uri -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-325">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-325">The Uri the request is sent to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-326">Wyślij żądanie POBIERZ do określonego identyfikatora Uri i zwróć treść odpowiedzi jako ciąg w operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-326">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-327">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-327">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-328">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-328">This operation will not block.</span></span> <span data-ttu-id="c15bc-329">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="c15bc-329">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-330">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-330">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-331">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-331">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MaxResponseContentBufferSize">
      <MemberSignature Language="C#" Value="public long MaxResponseContentBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxResponseContentBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxResponseContentBufferSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxResponseContentBufferSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxResponseContentBufferSize : int64 with get, set" Usage="System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c15bc-332">Pobiera lub ustawia maksymalną liczbę bajtów do zbuforowania podczas odczytywania zawartości odpowiedzi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-332">Gets or sets the maximum number of bytes to buffer when reading the response content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c15bc-333">Maksymalna liczba bajtów do zbuforowania podczas odczytywania zawartości odpowiedzi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-333">The maximum number of bytes to buffer when reading the response content.</span>
          </span>
          <span data-ttu-id="c15bc-334">Wartość domyślna tej właściwości to 2 gigabajty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-334">The default value for this property is 2 gigabytes.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-335">Aplikację można ustawić <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> właściwość niższą wartość celu ograniczenia rozmiaru odpowiedzi do bufora podczas odczytywania odpowiedzi.</span><span class="sxs-lookup"><span data-stu-id="c15bc-335">An app can set the <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property to a lower value to limit the size of the response to buffer when reading the response.</span></span> <span data-ttu-id="c15bc-336">Jeśli rozmiar treści odpowiedzi jest większa niż <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> właściwości, zgłaszany jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="c15bc-336">If the size of the response content is greater than the  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c15bc-337">Określony rozmiar jest mniejszy niż lub równe zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-337">The size specified is less than or equal to zero.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c15bc-338">Operacja została już uruchomiona w ramach bieżącego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-338">An operation has already been started on the current instance.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c15bc-339">Bieżące wystąpienie zostało usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-339">The current instance has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="content">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="content">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="content">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="content">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c15bc-340">Wyślij żądanie WYŚLIJ do określonego identyfikatora Uri jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-340">Send a POST request to the specified Uri as an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-341">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-341">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-342">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-342">The Uri the request is sent to.</span>
          </span>
        </param>
        <param name="content">
          <span data-ttu-id="c15bc-343">Zawartość żądania HTTP wysyłana do serwera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-343">The HTTP request content sent to the server.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-344">Wyślij żądanie WYŚLIJ do określonego identyfikatora Uri jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-344">Send a POST request to the specified Uri as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-345">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-345">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-346">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-346">This operation will not block.</span></span> <span data-ttu-id="c15bc-347">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-347">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-348">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-348">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-349">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-349">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-350">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-350">The Uri the request is sent to.</span>
          </span>
        </param>
        <param name="content">
          <span data-ttu-id="c15bc-351">Zawartość żądania HTTP wysyłana do serwera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-351">The HTTP request content sent to the server.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-352">Wyślij żądanie WYŚLIJ do określonego identyfikatora Uri jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-352">Send a POST request to the specified Uri as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-353">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-353">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-354">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-354">This operation will not block.</span></span> <span data-ttu-id="c15bc-355">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-355">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-356">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-356">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-357">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-357">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-358">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-358">The Uri the request is sent to.</span>
          </span>
        </param>
        <param name="content">
          <span data-ttu-id="c15bc-359">Zawartość żądania HTTP wysyłana do serwera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-359">The HTTP request content sent to the server.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c15bc-360">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-360">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-361">Wyślij z tokenem anulowania żądanie POST jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-361">Send a POST request with a cancellation token as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-362">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-362">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-363">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-363">This operation will not block.</span></span> <span data-ttu-id="c15bc-364">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-364">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-365">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-365">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-366">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-366">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-367">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-367">The Uri the request is sent to.</span>
          </span>
        </param>
        <param name="content">
          <span data-ttu-id="c15bc-368">Zawartość żądania HTTP wysyłana do serwera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-368">The HTTP request content sent to the server.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c15bc-369">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-369">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-370">Wyślij z tokenem anulowania żądanie POST jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-370">Send a POST request with a cancellation token as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-371">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-371">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-372">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-372">This operation will not block.</span></span> <span data-ttu-id="c15bc-373">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-373">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-374">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-374">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-375">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-375">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PutAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c15bc-376">Wyślij żądanie UMIEŚĆ do określonego identyfikatora Uri jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-376">Send a PUT request to the specified Uri as an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-377">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-377">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-378">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-378">The Uri the request is sent to.</span>
          </span>
        </param>
        <param name="content">
          <span data-ttu-id="c15bc-379">Zawartość żądania HTTP wysyłana do serwera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-379">The HTTP request content sent to the server.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-380">Wyślij żądanie UMIEŚĆ do określonego identyfikatora Uri jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-380">Send a PUT request to the specified Uri as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-381">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-381">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-382">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-382">This operation will not block.</span></span> <span data-ttu-id="c15bc-383">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-383">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-384">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-384">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-385">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-385">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-386">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-386">The Uri the request is sent to.</span>
          </span>
        </param>
        <param name="content">
          <span data-ttu-id="c15bc-387">Zawartość żądania HTTP wysyłana do serwera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-387">The HTTP request content sent to the server.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-388">Wyślij żądanie UMIEŚĆ do określonego identyfikatora Uri jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-388">Send a PUT request to the specified Uri as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-389">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-389">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-390">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-390">This operation will not block.</span></span> <span data-ttu-id="c15bc-391">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-391">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-392">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-392">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-393">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-393">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-394">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-394">The Uri the request is sent to.</span>
          </span>
        </param>
        <param name="content">
          <span data-ttu-id="c15bc-395">Zawartość żądania HTTP wysyłana do serwera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-395">The HTTP request content sent to the server.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c15bc-396">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-396">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-397">Wyślij z tokenem anulowania żądanie PUT jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-397">Send a PUT request with a cancellation token as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-398">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-398">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-399">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-399">This operation will not block.</span></span> <span data-ttu-id="c15bc-400">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-400">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-401">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-401">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-402">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-402">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri">
          <span data-ttu-id="c15bc-403">Wysłano identyfikator Uri żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-403">The Uri the request is sent to.</span>
          </span>
        </param>
        <param name="content">
          <span data-ttu-id="c15bc-404">Zawartość żądania HTTP wysyłana do serwera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-404">The HTTP request content sent to the server.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c15bc-405">Token odwołania, używany przez inne obiekty lub wątki do otrzymania powiadomienia o anulowaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-405">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-406">Wyślij z tokenem anulowania żądanie PUT jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-406">Send a PUT request with a cancellation token as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-407">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-407">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-408">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-408">This operation will not block.</span></span> <span data-ttu-id="c15bc-409">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po odczycie całej odpowiedzi (w tym zawartości).</span><span class="sxs-lookup"><span data-stu-id="c15bc-409">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-410">
            <paramref name="requestUri" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-410">The <paramref name="requestUri" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-411">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-411">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c15bc-412">Wyślij żądanie HTTP jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-412">Send an HTTP request as an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-413">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-413">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
      </Parameters>
      <Docs>
        <param name="request">
          <span data-ttu-id="c15bc-414">Komunikat żądania HTTP do wysłania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-414">The HTTP request message to send.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-415">Wyślij żądanie HTTP jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-415">Send an HTTP request as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-416">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-416">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-417">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-417">This operation will not block.</span></span> <span data-ttu-id="c15bc-418">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zostanie ukończone po całej odpowiedzi, w tym zawartości jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="c15bc-418">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-419">
            <paramref name="request" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-419">The <paramref name="request" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c15bc-420">Komunikat żądania został już wysłany przez <see cref="T:System.Net.Http.HttpClient" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-420">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-421">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-421">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="request">
          <span data-ttu-id="c15bc-422">Komunikat żądania HTTP do wysłania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-422">The HTTP request message to send.</span>
          </span>
        </param>
        <param name="completionOption">
          <span data-ttu-id="c15bc-423">Podczas operacji powinno zająć (jak najszybciej odpowiedzi lub po odczytaniu całej odpowiedzi zawartości).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-423">When the operation should complete (as soon as a response is available or after reading the whole response content).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-424">Wyślij żądanie HTTP jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-424">Send an HTTP request as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-425">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-425">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-426">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-426">This operation will not block.</span></span> <span data-ttu-id="c15bc-427">W zależności od wartości `completionOption` parametr, zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się natychmiast odpowiedzi lub całej odpowiedzi, w tym zawartości jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="c15bc-427">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-428">
            <paramref name="request" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-428">The <paramref name="request" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c15bc-429">Komunikat żądania został już wysłany przez <see cref="T:System.Net.Http.HttpClient" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-429">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-430">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-430">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request">
          <span data-ttu-id="c15bc-431">Komunikat żądania HTTP do wysłania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-431">The HTTP request message to send.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c15bc-432">Token anulowania do anulowania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-432">The cancellation token to cancel operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-433">Wyślij żądanie HTTP jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-433">Send an HTTP request as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-434">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-434">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-435">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-435">This operation will not block.</span></span> <span data-ttu-id="c15bc-436">Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zostanie ukończone po całej odpowiedzi, w tym zawartości jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="c15bc-436">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-437">
            <paramref name="request" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-437">The <paramref name="request" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c15bc-438">Komunikat żądania został już wysłany przez <see cref="T:System.Net.Http.HttpClient" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-438">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-439">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-439">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request">
          <span data-ttu-id="c15bc-440">Komunikat żądania HTTP do wysłania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-440">The HTTP request message to send.</span>
          </span>
        </param>
        <param name="completionOption">
          <span data-ttu-id="c15bc-441">Podczas operacji powinno zająć (jak najszybciej odpowiedzi lub po odczytaniu całej odpowiedzi zawartości).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-441">When the operation should complete (as soon as a response is available or after reading the whole response content).</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="c15bc-442">Token anulowania do anulowania operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-442">The cancellation token to cancel operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c15bc-443">Wyślij żądanie HTTP jako operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-443">Send an HTTP request as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c15bc-444">Obiekt zadania reprezentujący operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-444">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-445">Ta operacja nie będzie blokować.</span><span class="sxs-lookup"><span data-stu-id="c15bc-445">This operation will not block.</span></span> <span data-ttu-id="c15bc-446">W zależności od wartości `completionOption` parametr, zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się natychmiast odpowiedzi lub całej odpowiedzi, w tym zawartości jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="c15bc-446">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c15bc-447">
            <paramref name="request" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-447">The <paramref name="request" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c15bc-448">Komunikat żądania został już wysłany przez <see cref="T:System.Net.Http.HttpClient" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-448">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Http.HttpRequestException">
          <span data-ttu-id="c15bc-449">Żądanie nie powiodło się z powodu problemu bazowego takich jak łączność sieciową, błąd DNS, weryfikacji certyfikatu serwera lub przekroczenia limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-449">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public TimeSpan Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Timeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan with get, set" Usage="System.Net.Http.HttpClient.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c15bc-450">Pobiera lub ustawia zakres czasu oczekiwania, zanim upłynie limit czasu żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-450">Gets or sets the timespan to wait before the request times out.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c15bc-451">Zakres czasu oczekiwania przed limit czasu żądania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-451">The timespan to wait before the request times out.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c15bc-452">Wartość domyślna to 100 000 milisekund (100 sekund).</span><span class="sxs-lookup"><span data-stu-id="c15bc-452">The default value is 100,000 milliseconds (100 seconds).</span></span>  
  
 <span data-ttu-id="c15bc-453">Aby ustawić nieskończony limit czasu, ustaw wartość właściwości <xref:System.Threading.Timeout.InfiniteTimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="c15bc-453">To set an infinite timeout, set the property value to <xref:System.Threading.Timeout.InfiniteTimeSpan>.</span></span>  
  
 <span data-ttu-id="c15bc-454">Kwerendy systemu nazw domen (DNS) może potrwać do 15 sekund, aby zwrócić lub przekraczają limit czasu. Jeśli żądanie zawiera nazwę hosta, który wymaga rozpoznawania i ustawisz <xref:System.Net.Http.HttpClient.Timeout%2A> do wartości mniejszej niż 15 sekund może potrwać 15 sekund lub tylko przed <xref:System.Net.WebException> jest generowany, aby wskazać, przekroczenie limitu czasu na żądanie.</span><span class="sxs-lookup"><span data-stu-id="c15bc-454">A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref:System.Net.Http.HttpClient.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request.</span></span>  
  
 <span data-ttu-id="c15bc-455">Ten sam limit czasu będą stosowane dla wszystkich żądań za pomocą tego <xref:System.Net.Http.HttpClient> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="c15bc-455">The same timeout will apply for all requests using this <xref:System.Net.Http.HttpClient> instance.</span></span>  <span data-ttu-id="c15bc-456">Można również ustawić różne limitów czasu dla poszczególnych żądań przy użyciu <xref:System.Threading.CancellationTokenSource> nad zadaniem.</span><span class="sxs-lookup"><span data-stu-id="c15bc-456">You may also set different timeouts for individual requests using a <xref:System.Threading.CancellationTokenSource> on a task.</span></span> <span data-ttu-id="c15bc-457">Należy zauważyć, że tylko krótszej z dwóch przekroczeń limitu czasu zostaną zastosowane.</span><span class="sxs-lookup"><span data-stu-id="c15bc-457">Note that only the shorter of the two timeouts will apply.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c15bc-458">Określono limit czasu jest mniejsza niż zero, a nie <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-458">The timeout specified is less than or equal to zero and is not <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c15bc-459">Operacja została już uruchomiona w ramach bieżącego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-459">An operation has already been started on the current instance.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c15bc-460">Bieżące wystąpienie zostało usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c15bc-460">The current instance has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>