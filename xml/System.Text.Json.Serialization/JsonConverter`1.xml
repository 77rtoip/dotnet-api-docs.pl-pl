<Type Name="JsonConverter&lt;T&gt;" FullName="System.Text.Json.Serialization.JsonConverter&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="447b339089909b0729da02b01cf83d01a5f89601" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69100063" /></Metadata><TypeSignature Language="C#" Value="public abstract class JsonConverter&lt;T&gt; : System.Text.Json.Serialization.JsonConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit JsonConverter`1&lt;T&gt; extends System.Text.Json.Serialization.JsonConverter" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Serialization.JsonConverter`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class JsonConverter(Of T)&#xA;Inherits JsonConverter" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class JsonConverter abstract : System::Text::Json::Serialization::JsonConverter" />
  <TypeSignature Language="F#" Value="type JsonConverter&lt;'T&gt; = class&#xA;    inherit JsonConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Text.Json.Serialization.JsonConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T"><span data-ttu-id="01e5d-101">Typ obiektu lub wartości obsługiwany przez konwerter.</span><span class="sxs-lookup"><span data-stu-id="01e5d-101">The type of object or value handled by the converter.</span></span></typeparam>
    <summary><span data-ttu-id="01e5d-102">Konwertuje obiekt lub wartość na lub z formatu JSON.</span><span class="sxs-lookup"><span data-stu-id="01e5d-102">Converts an object or value to or from JSON.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal JsonConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonConverter`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; JsonConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01e5d-103">Inicjuje nowe <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="01e5d-103">Initializes a new <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvert">
      <MemberSignature Language="C#" Value="public override bool CanConvert (Type typeToConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvert(class System.Type typeToConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvert (typeToConvert As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvert(Type ^ typeToConvert);" />
      <MemberSignature Language="F#" Value="override this.CanConvert : Type -&gt; bool" Usage="jsonConverter.CanConvert typeToConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeToConvert"><span data-ttu-id="01e5d-104">Typ do porównania.</span><span class="sxs-lookup"><span data-stu-id="01e5d-104">The type to compare against.</span></span></param>
        <summary><span data-ttu-id="01e5d-105">Określa, czy określony typ może być konwertowany.</span><span class="sxs-lookup"><span data-stu-id="01e5d-105">Determines whether the specified type can be converted.</span></span></summary>
        <returns><span data-ttu-id="01e5d-106"><see langword="true" />Jeśli typ można skonwertować; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="01e5d-106"><see langword="true" /> if the type can be converted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="01e5d-107">Domyślna implementacja to Return `true` , gdy `typeToConvert` Equals równa `typeof(T)`się.</span><span class="sxs-lookup"><span data-stu-id="01e5d-107">The default implementation is to return `true` when `typeToConvert` equals `typeof(T)`.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract T Read (ref System.Text.Json.Utf8JsonReader reader, Type typeToConvert, System.Text.Json.JsonSerializerOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T Read(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type typeToConvert, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read (ByRef reader As Utf8JsonReader, typeToConvert As Type, options As JsonSerializerOptions) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract T Read(System::Text::Json::Utf8JsonReader % reader, Type ^ typeToConvert, System::Text::Json::JsonSerializerOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member Read :  * Type * System.Text.Json.JsonSerializerOptions -&gt; 'T" Usage="jsonConverter.Read (reader, typeToConvert, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="typeToConvert" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="01e5d-108">Czytelnik.</span><span class="sxs-lookup"><span data-stu-id="01e5d-108">The reader.</span></span></param>
        <param name="typeToConvert"><span data-ttu-id="01e5d-109">Typ do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="01e5d-109">The type to convert.</span></span></param>
        <param name="options"><span data-ttu-id="01e5d-110">Obiekt, który określa opcje serializacji do użycia.</span><span class="sxs-lookup"><span data-stu-id="01e5d-110">An object that specifies serialization options to use.</span></span></param>
        <summary><span data-ttu-id="01e5d-111">Odczytuje i konwertuje kod JSON na typ <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="01e5d-111">Reads and converts the JSON to type <typeparamref name="T" />.</span></span></summary>
        <returns><span data-ttu-id="01e5d-112">Przekonwertowana wartość.</span><span class="sxs-lookup"><span data-stu-id="01e5d-112">The converted value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract void Write (System.Text.Json.Utf8JsonWriter writer, T value, System.Text.Json.JsonSerializerOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Text.Json.Utf8JsonWriter writer, !T value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Write (writer As Utf8JsonWriter, value As T, options As JsonSerializerOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Write(System::Text::Json::Utf8JsonWriter ^ writer, T value, System::Text::Json::JsonSerializerOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Text.Json.Utf8JsonWriter * 'T * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="jsonConverter.Write (writer, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="01e5d-113">Składnik zapisywania do zapisu.</span><span class="sxs-lookup"><span data-stu-id="01e5d-113">The writer to write to.</span></span></param>
        <param name="value"><span data-ttu-id="01e5d-114">Wartość do przekonwertowania na format JSON.</span><span class="sxs-lookup"><span data-stu-id="01e5d-114">The value to convert to JSON.</span></span></param>
        <param name="options"><span data-ttu-id="01e5d-115">Obiekt, który określa opcje serializacji do użycia.</span><span class="sxs-lookup"><span data-stu-id="01e5d-115">An object that specifies serialization options to use.</span></span></param>
        <summary><span data-ttu-id="01e5d-116">Zapisuje określoną wartość w formacie JSON.</span><span class="sxs-lookup"><span data-stu-id="01e5d-116">Writes a specified value as JSON.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="01e5d-117">Konwerter może zgłosić dowolny wyjątek, ale powinien zgłosić <xref:System.Text.Json.JsonException> , kiedy nie można utworzyć pliku JSON.</span><span class="sxs-lookup"><span data-stu-id="01e5d-117">A converter may throw any exception, but it should throw <xref:System.Text.Json.JsonException> when the JSON cannot be created.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
