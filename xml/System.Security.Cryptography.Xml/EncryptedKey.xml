<Type Name="EncryptedKey" FullName="System.Security.Cryptography.Xml.EncryptedKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="13b1ddc53c37605d41c488bd5d383ec25fb53fac" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36625984" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EncryptedKey : System.Security.Cryptography.Xml.EncryptedType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EncryptedKey extends System.Security.Cryptography.Xml.EncryptedType" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Xml.EncryptedKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EncryptedKey&#xA;Inherits EncryptedType" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncryptedKey sealed : System::Security::Cryptography::Xml::EncryptedType" />
  <TypeSignature Language="F#" Value="type EncryptedKey = class&#xA;    inherit EncryptedType" />
  <AssemblyInfo>
    <AssemblyName>System.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.Xml.EncryptedType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje <see langword="&lt;EncryptedKey&gt;" /> element szyfrowanie XML. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa reprezentuje `<EncryptedKey>` element szyfrowanie XML. `<EncryptedKey>` Element służy do wysyłania kluczy szyfrowania. On można tworzyć w autonomicznej dokumentu XML, można umieścić w dokumencie aplikacji lub znajdować się wewnątrz `<EncryptedData>` element jako element podrzędny `<KeyInfo>` elementu. Wartości klucza są zawsze szyfrowane do adresata. Gdy `<EncryptedKey>` jest odszyfrowywany, wynikowy klucz ma zostać udostępnione `<EncryptionMethod>` algorytm bez żadnych dodatkowych czynności.  
  
 `<EncryptedKey>` Element jest podobny do `<EncryptedData>` elementu <xref:System.Security.Cryptography.Xml.EncryptedData> klasy z tą różnicą, że dane zaszyfrowane jest zawsze wartość klucza.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób do szyfrowania i odszyfrowywania — element XML przy użyciu <xref:System.Security.Cryptography.Xml.EncryptedKey> klasy. W tym przykładzie wyświetlono następnie wartości różnych właściwości <xref:System.Security.Cryptography.Xml.EncryptedKey> klasy do konsoli.  
  
 [!code-csharp[Cryptography.XML.EncryptedKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.EncryptedKey/cs/example.cs#1)]
 [!code-vb[Cryptography.XML.EncryptedKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.EncryptedKey/vb/example.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncryptedKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedKey.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncryptedKey();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor tworzy nowe wystąpienie klasy <xref:System.Security.Cryptography.Xml.EncryptedKey> klasy. Aby uzyskać więcej informacji na standardach szyfrowania XML, zobacz dokument XML szyfrowania składni i przetwarzania w http://www.w3.org/TR/xmlenc-core/.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób do szyfrowania i odszyfrowywania — element XML przy użyciu <xref:System.Security.Cryptography.Xml.EncryptedKey> klasy. W tym przykładzie wyświetlono następnie wartości różnych właściwości <xref:System.Security.Cryptography.Xml.EncryptedKey> klasy do konsoli.  
  
 [!code-csharp[Cryptography.XML.EncryptedKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.EncryptedKey/cs/example.cs#1)]
 [!code-vb[Cryptography.XML.EncryptedKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.EncryptedKey/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddReference">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje<see langword="" />element odwołania do <see langword="&amp;lt;ReferenceList&amp;gt;" /> elementu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddReference">
      <MemberSignature Language="C#" Value="public void AddReference (System.Security.Cryptography.Xml.DataReference dataReference);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddReference(class System.Security.Cryptography.Xml.DataReference dataReference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedKey.AddReference(System.Security.Cryptography.Xml.DataReference)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddReference(System::Security::Cryptography::Xml::DataReference ^ dataReference);" />
      <MemberSignature Language="F#" Value="member this.AddReference : System.Security.Cryptography.Xml.DataReference -&gt; unit" Usage="encryptedKey.AddReference dataReference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataReference" Type="System.Security.Cryptography.Xml.DataReference" />
      </Parameters>
      <Docs>
        <param name="dataReference">A <see cref="T:System.Security.Cryptography.Xml.DataReference" /> obiekt do dodania do <see cref="P:System.Security.Cryptography.Xml.EncryptedKey.ReferenceList" /> właściwości.</param>
        <summary>Dodaje <see langword="&lt;DataReference&gt;" /> elementu <see langword="&lt;ReferenceList&gt;" /> elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda dodaje <xref:System.Security.Cryptography.Xml.DataReference> do obiektu <xref:System.Security.Cryptography.Xml.EncryptedKey.ReferenceList%2A> właściwość <xref:System.Security.Cryptography.Xml.EncryptedKey> obiektu. `<DataReference>` Wskazuje element do zaszyfrowanych danych, która została zaszyfrowana przy użyciu klucz określony w `<EncryptedKey>` elementu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddReference">
      <MemberSignature Language="C#" Value="public void AddReference (System.Security.Cryptography.Xml.KeyReference keyReference);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddReference(class System.Security.Cryptography.Xml.KeyReference keyReference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedKey.AddReference(System.Security.Cryptography.Xml.KeyReference)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddReference(System::Security::Cryptography::Xml::KeyReference ^ keyReference);" />
      <MemberSignature Language="F#" Value="member this.AddReference : System.Security.Cryptography.Xml.KeyReference -&gt; unit" Usage="encryptedKey.AddReference keyReference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyReference" Type="System.Security.Cryptography.Xml.KeyReference" />
      </Parameters>
      <Docs>
        <param name="keyReference">A <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> obiekt do dodania do <see cref="P:System.Security.Cryptography.Xml.EncryptedKey.ReferenceList" /> właściwości.</param>
        <summary>Dodaje <see langword="&lt;KeyReference&gt;" /> elementu <see langword="&lt;ReferenceList&gt;" /> elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda dodaje A <xref:System.Security.Cryptography.Xml.KeyReference> do obiektu <xref:System.Security.Cryptography.Xml.EncryptedKey.ReferenceList%2A> właściwość <xref:System.Security.Cryptography.Xml.EncryptedKey> obiektu. `<KeyReference>` Wskazuje element zaszyfrowanego klucza, która została zaszyfrowana przy użyciu klucz określony w `<EncryptedKey>` elementu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CarriedKeyName">
      <MemberSignature Language="C#" Value="public string CarriedKeyName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CarriedKeyName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.EncryptedKey.CarriedKeyName" />
      <MemberSignature Language="VB.NET" Value="Public Property CarriedKeyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CarriedKeyName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CarriedKeyName : string with get, set" Usage="System.Security.Cryptography.Xml.EncryptedKey.CarriedKeyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia opcjonalny <see langword="&lt;CarriedKeyName&gt;" /> element szyfrowanie XML.</summary>
        <value>Ciąg reprezentujący nazwę wartości klucza.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `<CarriedKeyName>` Element jest opcjonalny element, który kojarzy nazwę użytkownika do odczytu o wartości klucza. Ta nazwa może następnie służyć do odwołania klucza przy użyciu `<KeyName>` w elemencie `<KeyInfo>` elementu. Taki sam `<CarriedKeyName>` wartości elementu, w odróżnieniu od wartości Identyfikatora może wystąpić wiele razy w ramach pojedynczego dokumentu. Wartość klucza musi być taka sama we wszystkich `<EncryptedKey>` elementy zidentyfikowane o takim samym `<CarriedKeyName>` nazwie w dokumencie XML. Należy pamiętać, że ponieważ biały znak jest istotny wartości `<KeyName>` elementu biały znak jest również istotne wartości `<CarriedKeyName>` elementu.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób do szyfrowania i odszyfrowywania — element XML przy użyciu <xref:System.Security.Cryptography.Xml.EncryptedKey> klasy. W tym przykładzie wyświetlono następnie wartości różnych właściwości <xref:System.Security.Cryptography.Xml.EncryptedKey> klasy do konsoli.  
  
 [!code-csharp[Cryptography.XML.EncryptedKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.EncryptedKey/cs/example.cs#1)]
 [!code-vb[Cryptography.XML.EncryptedKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.EncryptedKey/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXml">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlElement GetXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlElement GetXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedKey.GetXml" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetXml () As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlElement ^ GetXml();" />
      <MemberSignature Language="F#" Value="override this.GetXml : unit -&gt; System.Xml.XmlElement" Usage="encryptedKey.GetXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca reprezentację XML <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> obiektu.</summary>
        <returns>
          <see cref="T:System.Xml.XmlElement" /> Reprezentujący <see langword="&lt;EncryptedKey&gt;" /> element szyfrowanie XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia output `<EncryptedKey>` elementu w języku XML.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> Wartość jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadXml">
      <MemberSignature Language="C#" Value="public override void LoadXml (System.Xml.XmlElement value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void LoadXml(class System.Xml.XmlElement value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.EncryptedKey.LoadXml(System.Xml.XmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub LoadXml (value As XmlElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void LoadXml(System::Xml::XmlElement ^ value);" />
      <MemberSignature Language="F#" Value="override this.LoadXml : System.Xml.XmlElement -&gt; unit" Usage="encryptedKey.LoadXml value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Xml.XmlElement" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Xml.XmlElement" /> Reprezentujący element XML do użycia na potrzeby <see langword="&lt;EncryptedKey&gt;" /> elementu.</param>
        <summary>Ładuje określony informacje XML na <see langword="&lt;EncryptedKey&gt;" /> element szyfrowanie XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody można załadować istniejącego elementu XML do `<EncryptedKey>` element reprezentowany przez <xref:System.Security.Cryptography.Xml.EncryptedData> obiektu.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób do szyfrowania i odszyfrowywania — element XML przy użyciu <xref:System.Security.Cryptography.Xml.EncryptedKey> klasy. W tym przykładzie wyświetlono następnie wartości różnych właściwości <xref:System.Security.Cryptography.Xml.EncryptedKey> klasy do konsoli.  
  
 [!code-csharp[Cryptography.XML.EncryptedKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.EncryptedKey/cs/example.cs#1)]
 [!code-vb[Cryptography.XML.EncryptedKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.EncryptedKey/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="value" /> Nie zawiera parametru <see cref="T:System.Security.Cryptography.Xml.CipherData" /> elementu.</exception>
      </Docs>
    </Member>
    <Member MemberName="Recipient">
      <MemberSignature Language="C#" Value="public string Recipient { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Recipient" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.EncryptedKey.Recipient" />
      <MemberSignature Language="VB.NET" Value="Public Property Recipient As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Recipient { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Recipient : string with get, set" Usage="System.Security.Cryptography.Xml.EncryptedKey.Recipient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia opcjonalny <see langword="Recipient" /> atrybut w XML szyfrowania.</summary>
        <value>Ciąg reprezentujący wartość <see langword="Recipient" /> atrybutu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `<Recipient>` Atrybutu jest opcjonalny atrybut, który zawiera informacje, o których odbiorcy ma tę wartość klucza zaszyfrowanego. Jego zawartość jest aplikacji zależnej.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób do szyfrowania i odszyfrowywania — element XML przy użyciu <xref:System.Security.Cryptography.Xml.EncryptedKey> klasy. W tym przykładzie wyświetlono następnie wartości różnych właściwości <xref:System.Security.Cryptography.Xml.EncryptedKey> klasy do konsoli.  
  
 [!code-csharp[Cryptography.XML.EncryptedKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.EncryptedKey/cs/example.cs#1)]
 [!code-vb[Cryptography.XML.EncryptedKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.EncryptedKey/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceList">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.ReferenceList ReferenceList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.ReferenceList ReferenceList" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.EncryptedKey.ReferenceList" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReferenceList As ReferenceList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::ReferenceList ^ ReferenceList { System::Security::Cryptography::Xml::ReferenceList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReferenceList : System.Security.Cryptography.Xml.ReferenceList" Usage="System.Security.Cryptography.Xml.EncryptedKey.ReferenceList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.ReferenceList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see langword="&lt;ReferenceList&gt;" /> element szyfrowanie XML.</summary>
        <value>A <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `<ReferenceList>` Element jest opcjonalny element, który zawiera łącza do danych i kluczy szyfrowana przy użyciu tego klucza. Lista odwołania może zawierać wiele odwołań do `<EncryptedKey>` i `<EncryptedData>` elementów za pomocą `<KeyReference>` i `<DataReference>` elementy odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób do szyfrowania i odszyfrowywania — element XML przy użyciu <xref:System.Security.Cryptography.Xml.EncryptedKey> klasy. W tym przykładzie wyświetlono następnie wartości różnych właściwości <xref:System.Security.Cryptography.Xml.EncryptedKey> klasy do konsoli.  
  
 [!code-csharp[Cryptography.XML.EncryptedKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.EncryptedKey/cs/example.cs#1)]
 [!code-vb[Cryptography.XML.EncryptedKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.EncryptedKey/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>