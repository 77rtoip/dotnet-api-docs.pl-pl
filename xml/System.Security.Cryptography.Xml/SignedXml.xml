<Type Name="SignedXml" FullName="System.Security.Cryptography.Xml.SignedXml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="02f845bdc2132c33ab7f7710522f2ed742dabc3f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36531081" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SignedXml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SignedXml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Xml.SignedXml" />
  <TypeSignature Language="VB.NET" Value="Public Class SignedXml" />
  <TypeSignature Language="C++ CLI" Value="public ref class SignedXml" />
  <TypeSignature Language="F#" Value="type SignedXml = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia otokę w obiekcie podpisu XML core ułatwiające tworzenie podpisów XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml> Klasa jest implementacją .NET Framework w sieci World Wide Web konsorcjum W3C [składni podpisu XML i specyfikacja przetwarzania](https://www.w3.org/TR/xmldsig-core/), znanej również jako XMLDSIG (podpis cyfrowy XML).  XMLDSIG jest oparta na standardach i interoperacyjne sposobem podpisywanie i weryfikowanie całości lub części dokumentu XML lub inne dane, które jest adresowana z zasobów identyfikator URI (Uniform).  
  
 Użyj <xref:System.Security.Cryptography.Xml.SignedXml> klasy, gdy należy udostępnić podpisane dane XML między aplikacji lub organizacje w standardowy sposób.  Wszystkie dane podpisany przy użyciu tej klasy można sprawdzić przy implementacji zgodnych ze specyfikacją W3C XMLDSIG.  
  
 <xref:System.Security.Cryptography.Xml.SignedXml> Klasa służy do tworzenia następujące trzy rodzaje podpisy cyfrowe XML:  
  
|Typ podpisu|Opis|  
|--------------------|-----------------|  
|Przekształcenie podpisu|Podpis jest zawarty w elemencie XML podpisywany.|  
|Obejmujące podpisu|Podpisem XML znajduje się w <`Signature`> elementu.|  
|Wewnętrzny odłączonego podpisu|Podpis i podpisem XML znajdują się w tym samym dokumencie, ale nie zawiera innych.|  
  
 Istnieje również czwarty rodzaj podpisu o nazwie zewnętrznych odłączonego podpisu, czyli gdy dane i podpis znajdują się w oddzielnych dokumentów XML. Podpisy odłączyć zewnętrznych nie są obsługiwane przez <xref:System.Security.Cryptography.Xml.SignedXml> klasy.  
  
## <a name="the-structure-of-an--xml-signature"></a>Struktury podpisu XML  
 Tworzy XMLDSIG <`Signature`> element, który zawiera podpis cyfrowy dokumentu XML lub innych danych, który jest adresowana z identyfikatora URI.  <`Signature`> Element opcjonalnie może zawierać informacje o tym, gdzie znaleźć klucz, który będzie zweryfikować podpisu i który algorytm kryptograficzny został użyty do podpisania. Podstawowa struktura znajduje się w następujący sposób:  
  
```xml  
  
<Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">  
    <SignedInfo>  
      <CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>  
      <SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>  
      <Reference URI="">  
        <Transforms>  
          <Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>  
        </Transforms>  
        <DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>  
        <DigestValue>Base64EncodedValue==</DigestValue>  
      </Reference>  
    </SignedInfo>  
    <SignatureValue>AnotherBase64EncodedValue===</SignatureValue>  
  </Signature>  
  
```  
  
 Główne elementy tej struktury są:  
  
 <`CanonicalizationMethod`> — Element  
 Określa zasady ponowne zapisywanie `Signature` element na podstawie tekstu/XML do bajtów do weryfikacji podpisu. Wartością domyślną w programie .NET Framework jest http://www.w3.org/TR/2001/REC-xml-c14n-20010315, który identyfikuje algorytm godne zaufania. Ten element jest reprezentowana przez <xref:System.Security.Cryptography.Xml.SignedInfo.CanonicalizationMethod%2A?displayProperty=nameWithType> właściwości.  
  
 <`SignatureMethod`> — Element  
 Określa algorytm używany do generowania podpisu i sprawdzania poprawności, która została zastosowana do <`Signature`> elementem wartość <`SignatureValue`>. W przykładzie powyżej wartości http://www.w3.org/2000/09/xmldsig#rsa-sha1 identyfikuje podpisu RSA PKCS1 SHA-1. Ten element jest reprezentowana przez <xref:System.Security.Cryptography.Xml.SignedXml.SignatureMethod%2A> właściwości.  
  
 <`SignatureValue`> — Element  
 Określa podpis kryptograficznych dla <`Signature`> elementu. Jeśli podpis nie sprawdza, następnie część <`Signature`> bloku został zmodyfikowany, a dokument jest uznawane za nieprawidłowe. Tak długo, jak <`CanonicalizationMethod`> wartość jest godne zaufania, ta wartość jest wysoce odporne na próby naruszenia. Ten element jest reprezentowana przez <xref:System.Security.Cryptography.Xml.SignedXml.SignatureValue%2A> właściwości.  
  
 `URI` Atrybut <`Reference`> — element  
 Określa obiekt danych przy użyciu identyfikatora URI odwołania. Ten atrybut jest reprezentowana przez <xref:System.Security.Cryptography.Xml.Reference.Uri%2A?displayProperty=nameWithType> właściwości.  
  
-   Nieokreślenie `URI` atrybutu, oznacza to, że ustawienie <xref:System.Security.Cryptography.Xml.Reference.Uri%2A?displayProperty=nameWithType> właściwości `null`, oznacza to, że aplikacja odbierająca może znać tożsamość obiektu. W większości przypadków `null` URI spowodują wyjątek. Nie używaj `null` identyfikatora URI, chyba że aplikacja jest współdziałanie z protokołem, którego wymaga.  
  
-   Ustawienie `URI` atrybutu na ciąg pusty oznacza, że element główny dokumentu jest podpisywana, formę przekształcenie podpisu.  
  
-   Jeśli wartość `URI` atrybutu rozpoczyna się od #, a następnie wartość musi być rozpoznawana elementu w bieżącym dokumencie. Ten formularz może służyć ze wszystkimi typami obsługiwanych podpisu (transformacjach podpis obejmujące podpisu lub podpis odłączyć wewnętrznego).  
  
-   Cokolwiek innego jest uznawany za podpisu zasobu zewnętrznego odłączony i nie jest obsługiwana przez <xref:System.Security.Cryptography.Xml.SignedXml> klasy.  
  
 <`Transforms`> — Element  
 Uporządkowana lista zawiera <`Transform`> została rozłożona elementy, które opisują sposób osoby podpisującej otrzymanych obiektu danych. Algorytm przekształcenia jest podobna do metody zapewniania kanoniczności, ale zamiast ponowne zapisywanie <`Signature`> elementu go ponownie zapisuje zawartość oznaczona `URI` atrybut <`Reference`> elementu. <`Transforms`> Reprezentowany przez element <xref:System.Security.Cryptography.Xml.TransformChain> klasy.  
  
-   Każdy algorytm przekształcenia jest zdefiniowany jako biorąc jako dane wejściowe XML (XPath zestaw węzłów) lub bajtów. Jeśli format bieżących danych różni się od wymagania wprowadzania przekształcania, są stosowane reguły konwersji.  
  
-   Każdy algorytm przekształcenia jest zdefiniowany jako produkujących XML lub bajty jako dane wyjściowe.  
  
-   Jeśli dane wyjściowe ostatniego algorytm przekształcenia nie jest zdefiniowany w bajtach (lub nie określono żadnych transformacje), następnie metoda zapewniania kanoniczności http://www.w3.org/TR/2001/REC-xml-c14n-20010315 jest używany jako niejawne transformacji (nawet jeśli inny algorytm została określona w <`CanonicalizationMethod`> element).  
  
-   Wartość http://www.w3.org/2000/09/xmldsig#enveloped-signature przekształcenia algorytm koduje reguły, która jest interpretowana jako remove <`Signature`> elementu z dokumentu. W przeciwnym razie wartość weryfikator przekształcenie podpisu będą szyfrowane dokumencie, łącznie z podpisu, ale osoby podpisującej będzie mieć rozłożona dokumentu przed zastosowaniem podpisu, co może prowadzić do różnych odpowiedzi.  
  
 <`DigestMethod`> — Element  
 Określa metody tworzenia skrótu (skrót kryptograficzny) do zastosowania do zawartości po przekształceniu identyfikowane przez `URI` atrybut <`Reference`> elementu. To jest reprezentowana przez <xref:System.Security.Cryptography.Xml.Reference.DigestMethod%2A?displayProperty=nameWithType> właściwości.  
  
## <a name="choosing-a-canonicalization-method"></a>Wybieranie metody zapewniania kanoniczności  
 O ile współdziałania ze specyfikacją, która wymaga użycia inną wartość, zalecane jest użycie domyślnej metody zapewniania kanoniczności w programie .NET Framework, która jest algorytm XML C14N 1.0, którego wartość jest http://www.w3.org/TR/2001/REC-xml-c14n-20010315. Algorytm XML C14N 1.0 jest wymagana obsługiwany przez implementacje wszystkich XMLDSIG, szczególnie w przypadku, ponieważ jest on niejawne końcowego przekształcenie do zastosowania.  
  
 Dostępne są wersje zapewniania kanoniczności algorytmy, które obsługuje komentarzy zachowania. Zachowywanie komentarz metody zapewniania kanoniczności nie są zalecane, ponieważ ich narusza zasadę "Zaloguj się, co jest widoczne". Oznacza to, komentarze w <`Signature`> elementu nie można zmienić logika przetwarzania dla realizację podpis, jest jedynie jakie podpis wartości. W połączeniu z algorytmem słabych podpisów, umożliwiając komentarze, aby być uwzględniane zapewnia swobody niepotrzebnych atakująca wymusić kolizji wyznaczania wartości skrótu, wprowadzenie zmodyfikowany dokumentu są wyświetlane uzasadnione.  W programie .NET Framework tylko wbudowane canonicalizers są obsługiwane domyślnie. Aby obsługiwać canonicalizers dodatkowe lub niestandardowe, zobacz <xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A> właściwości. Jeśli dokument używa metody zapewniania kanoniczności, która nie znajduje się w kolekcji reprezentowany przez <xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A> właściwości, a następnie <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> metoda zwróci `false`.  
  
> [!NOTE]
>  Bardzo obrony aplikacji można usunąć wartości nie oczekuje osoby podpisujące do użycia z <xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A> kolekcji.  
  
## <a name="are-the-reference-values-safe-from-tampering"></a>Czy przed naruszeniem wartości odwołania?  
 Tak, <`Reference`> wartości są bezpieczne naruszeniu.  .NET framework sprawdza <`SignatureValue`> obliczeń przed przetworzeniem wszystkich <`Reference`> wartości skojarzone z nimi przekształca i przerwie wcześnie w celu uniknięcia instrukcji przetwarzania mogą okazać się złośliwe.  
  
## <a name="choosing-the-elements-to-sign"></a>Wybieranie elementów do podpisania  
 Zalecane jest użycie wartości "" dla `URI` atrybutu (lub ustaw <xref:System.Security.Cryptography.Xml.Reference.Uri%2A> pusty ciąg dla właściwości), jeśli to możliwe. Oznacza to, że cały dokument jest uznawany za do obliczeń szyfrowane, co oznacza, że cały dokument jest chroniony przed naruszeniem.  
  
 Bardzo często, aby wyświetlić `URI` wartości w formularzu kotwice, takich jak #foo odwołujących się do elementu, którego atrybut ID jest "foo". Niestety jest łatwy w tym celu niepowołane ponieważ dotyczy tylko zawartość elementu docelowego nie kontekstu. SMTP ta różnica jest znany jako zawijania podpisu XML (XSW).  
  
 Aplikacja uwzględnia komentarzy semantyczne (który nie jest typowe w przypadku zajmuje się XML), następnie należy użyć "#xpointer(/)" zamiast "", a "#xpointer(id('foo'))" zamiast "#foo". Wersje #xpointer są interpretowane jako tym komentarzy, gdy formularze nazwa_skrócona wyłączenie się komentarze.  
  
 Jeśli użytkownik musi zaakceptować dokumenty, które są tylko częściowo chronione i chcesz zapewnić odczytują tę samą zawartość chroniona podpisu, użyj <xref:System.Security.Cryptography.Xml.SignedXml.GetIdElement%2A> metody.  
  
## <a name="security-considerations-about-the-keyinfo-element"></a>Zagadnienia dotyczące zabezpieczeń o elemencie KeyInfo  
 Dane w opcjonalnym <`KeyInfo`> elementu (oznacza to, <xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A> właściwości), który zawiera klucz, aby zweryfikować podpisu, nie należy ufać.  
  
 W szczególności, <xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A> wartość reprezentuje systemu od zera klucza publicznego RSA, DSA lub ECDSA, dokument można zostały naruszone, pomimo <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> raportowania jest prawidłowy podpis metody.  Może to się zdarzyć jednostki czynności, po prostu naruszeniu ma wygenerowanie nowego klucza i ponowne podpisanie zmodyfikowany dokumentu z tego nowego klucza. Tak chyba że aplikacji sprawdza, czy klucz publiczny jest oczekiwana wartość, dokument powinien być traktowany tak, jakby zostały naruszone. Wymaga to zbadać klucza publicznego osadzony w dokumencie i listę znanych wartości dla kontekstu dokumentu weryfikacji aplikacji. Na przykład jeśli dokument można rozumieć wydawane przez znanych użytkowników, możesz sprawdzić klucza z listą znanych kluczy używanych przez tego użytkownika.  
  
 Można również sprawdzić po przetworzeniu dokumentu za pomocą klucza <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey%2A> metody zamiast <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> metody. Jednak optymalne zabezpieczeń, należy sprawdzić klucz wcześniej.  
  
 Alternatywnie należy wziąć pod uwagę użytkownika w trakcie zarejestrowany kluczy publicznych, zamiast odczytywanie <`KeyInfo`> elementu.  
  
## <a name="security-considerations-about-the-x509data-element"></a>Zagadnienia dotyczące zabezpieczeń dotyczące elementu X509Data  
 Opcjonalny <`X509Data`> element jest elementem podrzędnym elementu <`KeyInfo`> element i zawiera co najmniej jeden X509 certyfikatów lub identyfikatory X509 certyfikatów. Dane w <`X509Data`> element nie należy także dodatkowo z natury zaufanych.  
  
 Podczas weryfikowania dokument z osadzonego <`X509Data`> elementu, .NET Framework sprawdza tylko że danych jest rozpoznawana jako X509 certyfikatu, którego klucz publiczny pomyślnie można sprawdzić poprawności podpisu dokumentu. W przeciwieństwie do wywoływania <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> metody z `verifySignatureOnly` parametru `false`, nie odwołania jest sprawdzane zaznaczono łańcuch zaufania i wygaśnięcia nie jest weryfikowany. Nawet jeśli sam certyfikat wyodrębnia i przekazuje je do aplikacji <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> metody z `verifySignatureOnly` parametru `false`, która jest nadal weryfikacji nie są wystarczające, aby zapobiec modyfikowaniu dokumentu. Ten certyfikat musi nadal jest weryfikowany jako możliwy odpowiednie dla dokument jest podpisany.  
  
 Przy użyciu osadzony certyfikat podpisywania zapewnić strategii przydatne obrotu klucza, czy w <`X509Data`> sekcji lub w treści dokumentu. Korzystając z tej metody aplikacji należy ręcznie wyodrębnienie certyfikatu i sprawdzania poprawności podobnie jak:  
  
-   Certyfikat został wystawiony bezpośrednio lub za pośrednictwem łańcuch przez urząd certyfikacji, którego certyfikat publiczny jest osadzony w aplikacji.  
  
     Przy użyciu listy zaufania wprowadzone do systemu operacyjnego bez dodatkowe kontrole, takie jak nazwa podmiotu znane, nie są wystarczające zapobiec modyfikowaniu w <xref:System.Security.Cryptography.Xml.SignedXml>.  
  
-   Certyfikat został zweryfikowany nie zostały wygasła w momencie podpisywania dokumentów (lub "teraz" dla niemal przetwarzania dokumentów w czasie rzeczywistym).  
  
-   Długotrwałe certyfikatów wystawionych przez urząd certyfikacji, który obsługuje odwołania Sprawdź, czy certyfikat nie został odwołany.  
  
-   Podmiot certyfikatu jest weryfikowany jako możliwy odpowiednie do bieżącego dokumentu.  
  
## <a name="choosing-the-transform-algorithm"></a>Wybieranie algorytm przekształcenia  
 Jeśli współdziałania ze specyfikacją, która ma być definiowane określone wartości (na przykład XrML), należy postępować zgodnie ze specyfikacją.  Jeśli masz przekształcenie podpisu (takie jak kiedy podpisywania całego dokumentu), a następnie należy użyć http://www.w3.org/2000/09/xmldsig#enveloped-signature (reprezentowany przez <xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform> klasy). Można określić również niejawne transformacji XML C14N, ale nie jest konieczne.  Podpis obejmujących punkty kontrolne lub odłączone niezbędne są nie transformacji. Niejawne transformacji XML C14N odpowiada on za wszystko.  
  
 Z zabezpieczeniami zaktualizowane wprowadzone przez [biuletyn zabezpieczeń firmy Microsoft MS16-035](https://technet.microsoft.com/en-us/library/security/ms16-035.aspx), .NET Framework ma ograniczone transformacje, które można używane w dokumencie weryfikacji domyślnie z niezaufanych transformacje powoduje <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>do zawsze zwracają `false`. W szczególności transformacje, które wymagają dodatkowych danych wejściowych (określony jako elementy podrzędne w pliku XML) nie są już dozwolone z powodu ich podatności nadużycia złośliwych użytkowników. W3C informacją o tym, unikając transformacje XPath i XSLT, które są dwie główne przekształcenia wpływ tych ograniczeń.  
  
## <a name="the-problem-with-external-references"></a>Problem z odwołania zewnętrzne  
 Jeśli aplikacja nie sprawdza, czy odwołań zewnętrznych nie jest odpowiednia dla bieżącego kontekstu, może być użyte w sposób zapewnienia wiele luk w zabezpieczeniach (w tym informacje Denial of Service, Distributed odbicia Denial of Service, Ujawnienie obejścia podpisu i zdalne wykonywanie kodu). Nawet jeśli były aplikacji można sprawdzić poprawności odwołania zewnętrznego identyfikatora URI, pozostanie problem zasobu ładowany dwa razy: po podczas aplikacji odczytuje go, a po podczas <xref:System.Security.Cryptography.Xml.SignedXml> ona odczytana. Ponieważ nie ma żadnej gwarancji, że odczytu aplikacji i zarządzania dokumentami Sprawdź, czy czynności mają taką samą zawartość, podpisu nie zapewnia wiarygodności.  
  
 Podane ryzyka odwołań zewnętrznych <xref:System.Security.Cryptography.Xml.SignedXml> spowoduje zgłoszenie wyjątku po napotkaniu odwołania zewnętrznego.  Aby uzyskać więcej informacji na temat tego problemu, zobacz [artykułu KB 3148821](https://support.microsoft.com/en-us/kb/3148821).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zalogowania się i sprawdzić za pomocą podpisu w transformacjach całego dokumentu XML.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/VB/exampleenvelope.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź pojedynczy element dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SignedXml();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zalogowania się i sprawdzić za pomocą podpisu w transformacjach całego dokumentu XML.  
  
 [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/VB/sample.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź obiekt adresowanego identyfikator URI (Uniform Resource) przy użyciu odłączonego podpisu.  
  
 [!code-cpp[XMLDSIG - Signature - Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CPP/sample.cpp#1)]
 [!code-csharp[XMLDSIG - Signature - Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CS/sample.cs#1)]
 [!code-vb[XMLDSIG - Signature - Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/XMLDSIG - Signature - Detached/VB/sample.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź pojedynczy element dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedXml (System.Xml.XmlDocument document);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlDocument document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.#ctor(System.Xml.XmlDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (document As XmlDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SignedXml(System::Xml::XmlDocument ^ document);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Xml.SignedXml : System.Xml.XmlDocument -&gt; System.Security.Cryptography.Xml.SignedXml" Usage="new System.Security.Cryptography.Xml.SignedXml document" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="document" Type="System.Xml.XmlDocument" />
      </Parameters>
      <Docs>
        <param name="document">
          <see cref="T:System.Xml.XmlDocument" /> Obiektu na potrzeby inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.Xml.SignedXml" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> klasy z określonego dokumentu XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zalogowania się i sprawdzić za pomocą podpisu w transformacjach całego dokumentu XML.  
  
 [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/VB/sample.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź obiekt adresowanego identyfikator URI (Uniform Resource) przy użyciu odłączonego podpisu.  
  
 [!code-cpp[XMLDSIG - Signature - Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CPP/sample.cpp#1)]
 [!code-csharp[XMLDSIG - Signature - Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CS/sample.cs#1)]
 [!code-vb[XMLDSIG - Signature - Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/XMLDSIG - Signature - Detached/VB/sample.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź pojedynczy element dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="document" /> Parametr jest <see langword="null" />.  - lub - <paramref name="document" /> parametru zawiera wartość null <see cref="P:System.Xml.XmlDocument.DocumentElement" /> właściwości.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedXml (System.Xml.XmlElement elem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlElement elem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.#ctor(System.Xml.XmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elem As XmlElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SignedXml(System::Xml::XmlElement ^ elem);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Xml.SignedXml : System.Xml.XmlElement -&gt; System.Security.Cryptography.Xml.SignedXml" Usage="new System.Security.Cryptography.Xml.SignedXml elem" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elem" Type="System.Xml.XmlElement" />
      </Parameters>
      <Docs>
        <param name="elem">
          <see cref="T:System.Xml.XmlElement" /> Obiektu na potrzeby inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.Xml.SignedXml" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> klasy z określonego <see cref="T:System.Xml.XmlElement" /> obiektu.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="elem" /> Parametr jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddObject">
      <MemberSignature Language="C#" Value="public void AddObject (System.Security.Cryptography.Xml.DataObject dataObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddObject(class System.Security.Cryptography.Xml.DataObject dataObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.AddObject(System.Security.Cryptography.Xml.DataObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddObject(System::Security::Cryptography::Xml::DataObject ^ dataObject);" />
      <MemberSignature Language="F#" Value="member this.AddObject : System.Security.Cryptography.Xml.DataObject -&gt; unit" Usage="signedXml.AddObject dataObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataObject" Type="System.Security.Cryptography.Xml.DataObject" />
      </Parameters>
      <Docs>
        <param name="dataObject">
          <see cref="T:System.Security.Cryptography.Xml.DataObject" /> Obiekt do dodania do listy obiektów do podpisania.</param>
        <summary>Dodaje <see cref="T:System.Security.Cryptography.Xml.DataObject" /> obiekt do listy obiektów do podpisania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.AddObject%2A> Metoda dodaje <`Object`> elementu, który reprezentuje obiekt, aby podpisać do <`Signature`> element podpisu cyfrowego XML.  
  
 <xref:System.Security.Cryptography.Xml.SignedXml.AddObject%2A> Wewnętrznie wywołuje metodę <xref:System.Security.Cryptography.Xml.Signature.AddObject%2A> metody <xref:System.Security.Cryptography.Xml.Signature> zamknięte przez obiekt <xref:System.Security.Cryptography.Xml.SignedXml> obiektu.  Można również dodać <xref:System.Security.Cryptography.Xml.DataObject> obiektu poprzez bezpośrednie wywoływanie <xref:System.Security.Cryptography.Xml.Signature.AddObject%2A> metody z <xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A> właściwości.  
  
 Aby uzyskać więcej informacji na temat podpisy cyfrowe XML zobacz specyfikację XMLDSIG dostępne pod adresem www.w3.org/TR/xmldsig-core/.  
  
   
  
## Examples  
 Następujący kod przykładowy oblicza i podpis XML.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml-AddObject-AddReference/CPP/example.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml-AddObject-AddReference/CS/example.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml-AddObject-AddReference/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddReference">
      <MemberSignature Language="C#" Value="public void AddReference (System.Security.Cryptography.Xml.Reference reference);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddReference(class System.Security.Cryptography.Xml.Reference reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.AddReference(System.Security.Cryptography.Xml.Reference)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddReference(System::Security::Cryptography::Xml::Reference ^ reference);" />
      <MemberSignature Language="F#" Value="member this.AddReference : System.Security.Cryptography.Xml.Reference -&gt; unit" Usage="signedXml.AddReference reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Security.Cryptography.Xml.Reference" />
      </Parameters>
      <Docs>
        <param name="reference">
          <see cref="T:System.Security.Cryptography.Xml.Reference" /> Obiekt, który opisano metody tworzenia skrótu, wartość skrótu i przekształcenie służące do tworzenia podpisu cyfrowego XML.</param>
        <summary>Dodaje <see cref="T:System.Security.Cryptography.Xml.Reference" /> do obiektu <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiekt, który opisano metody tworzenia skrótu, wartość skrótu i przekształcenie służące do tworzenia podpisu cyfrowego XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.AddReference%2A> Metoda dodaje <`Reference`> elementu <xref:System.Security.Cryptography.Xml.SignedXml> obiekt, który opisano metody tworzenia skrótu, wartość skrótu i przekształcenie służące do tworzenia podpisu cyfrowego XML.  <`Reference`> Podelement jest element <`SignedInfo`> elementu.  
  
 <xref:System.Security.Cryptography.Xml.SignedXml.AddReference%2A> Wewnętrznie wywołuje metodę <xref:System.Security.Cryptography.Xml.SignedInfo.AddReference%2A> metody <xref:System.Security.Cryptography.Xml.SignedInfo> zamknięte przez obiekt <xref:System.Security.Cryptography.Xml.SignedXml> obiektu.  Można również dodać <xref:System.Security.Cryptography.Xml.Reference> obiektu poprzez bezpośrednie wywoływanie <xref:System.Security.Cryptography.Xml.SignedInfo.AddReference%2A> metody z <xref:System.Security.Cryptography.Xml.SignedXml.SignedInfo%2A> właściwości.  
  
 Aby uzyskać więcej informacji na temat podpisy cyfrowe XML zobacz specyfikację XMLDSIG dostępne pod adresem www.w3.org/TR/xmldsig-core/.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zalogowania się i sprawdzić za pomocą podpisu w transformacjach całego dokumentu XML.  
  
 [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/VB/sample.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź obiekt adresowanego identyfikator URI (Uniform Resource) przy użyciu odłączonego podpisu.  
  
 [!code-cpp[XMLDSIG - Signature - Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CPP/sample.cpp#1)]
 [!code-csharp[XMLDSIG - Signature - Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CS/sample.cs#1)]
 [!code-vb[XMLDSIG - Signature - Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/XMLDSIG - Signature - Detached/VB/sample.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź pojedynczy element dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CheckSignature">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> sprawdza właściwości.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public bool CheckSignature ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignature() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignature" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignature () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignature();" />
      <MemberSignature Language="F#" Value="member this.CheckSignature : unit -&gt; bool" Usage="signedXml.CheckSignature " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Określa, czy <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwość sprawdza przy użyciu klucza publicznego w podpisie.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> sprawdza właściwości; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda również oblicza skrót odwołań i wartości podpisu.  
  
 Jeśli dokument XML został podpisany z podpisem X.509 <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> metoda będzie Wyszukaj w sklepie "Książka adresowa" certyfikatów umożliwiających weryfikację. Na przykład, jeśli certyfikat jest wywoływany przez podmiot klucza identyfikator (SKI) <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> — metoda będzie wybierz certyfikatów przy użyciu tego SKI i spróbuj je po kolei, dopóki nie można sprawdzić certyfikatu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zalogowania się i sprawdzić za pomocą podpisu w transformacjach całego dokumentu XML.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/VB/exampleenvelope.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź obiekt adresowanego identyfikator URI (Uniform Resource) przy użyciu odłączonego podpisu.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CPP/exampledetached.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CS/exampledetached.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/VB/exampledetached.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź pojedynczy element dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" /> Właściwość klucza publicznego w podpisie nie pasuje do <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" /> właściwości.  - lub - nie można utworzyć opisu podpisu.  - lub nie można utworzyć algorytmu wyznaczania wartości skrótu.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public bool CheckSignature (System.Security.Cryptography.AsymmetricAlgorithm key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignature(class System.Security.Cryptography.AsymmetricAlgorithm key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.AsymmetricAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignature (key As AsymmetricAlgorithm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignature(System::Security::Cryptography::AsymmetricAlgorithm ^ key);" />
      <MemberSignature Language="F#" Value="member this.CheckSignature : System.Security.Cryptography.AsymmetricAlgorithm -&gt; bool" Usage="signedXml.CheckSignature key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Security.Cryptography.AsymmetricAlgorithm" />
      </Parameters>
      <Docs>
        <param name="key">Implementacja <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> właściwość, która przechowuje klucz do weryfikowania <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwości.</param>
        <summary>Określa, czy <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> sprawdza właściwości dla określonego klucza.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> sprawdza właściwości dla określonego klucza; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź obiekt adresowanego identyfikator URI (Uniform Resource) przy użyciu odłączonego podpisu.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CPP/exampledetached.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CS/exampledetached.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/VB/exampledetached.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zalogowania się i sprawdzić za pomocą podpisu w transformacjach całego dokumentu XML.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/VB/exampleenvelope.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" /> Właściwość <paramref name="key" /> parametr niezgodny <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" /> właściwości.  - lub - nie można utworzyć opisu podpisu.  - lub nie można utworzyć algorytmu wyznaczania wartości skrótu.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public bool CheckSignature (System.Security.Cryptography.KeyedHashAlgorithm macAlg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignature(class System.Security.Cryptography.KeyedHashAlgorithm macAlg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.KeyedHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignature (macAlg As KeyedHashAlgorithm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignature(System::Security::Cryptography::KeyedHashAlgorithm ^ macAlg);" />
      <MemberSignature Language="F#" Value="member this.CheckSignature : System.Security.Cryptography.KeyedHashAlgorithm -&gt; bool" Usage="signedXml.CheckSignature macAlg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="macAlg" Type="System.Security.Cryptography.KeyedHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="macAlg">Implementacja <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> przechowuje MAC do weryfikowania <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwości.</param>
        <summary>Określa, czy <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwość sprawdza algorytmu określony komunikat uwierzytelniania kodu (MAC).</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> sprawdza właściwości dla określonych komputerów MAC; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź obiekt adresowanego identyfikator URI (Uniform Resource) przy użyciu odłączonego podpisu.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/CPP/xmldsigdetachedkeyedhashalg.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/CS/xmldsigdetachedkeyedhashalg.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/VB/xmldsigdetachedkeyedhashalg.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź całego dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/CPP/xmldsigenvkeyedhashalg.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/CS/xmldsigenvkeyedhashalg.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/VB/xmldsigenvkeyedhashalg.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="macAlg" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <see cref="P:System.Security.Cryptography.HashAlgorithm.HashSize" /> Właściwości określonego <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> obiekt jest nieprawidłowy.  - lub - <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> jest właściwość <see langword="null" />.  - lub - nie można utworzyć transformacja kryptograficzna użytych do sprawdzenia podpisu.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public bool CheckSignature (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool verifySignatureOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignature(class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool verifySignatureOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignature (certificate As X509Certificate2, verifySignatureOnly As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignature(System::Security::Cryptography::X509Certificates::X509Certificate2 ^ certificate, bool verifySignatureOnly);" />
      <MemberSignature Language="F#" Value="member this.CheckSignature : System.Security.Cryptography.X509Certificates.X509Certificate2 * bool -&gt; bool" Usage="signedXml.CheckSignature (certificate, verifySignatureOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
        <Parameter Name="verifySignatureOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="certificate">
          <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> Obiektu do weryfikowania <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwości.</param>
        <param name="verifySignatureOnly">
          <see langword="true" /> można zweryfikować podpisu. <see langword="false" /> do weryfikowania podpisu i certyfikatów.</param>
        <summary>Określa, czy <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> sprawdza właściwości dla określonego <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> obiektu i, opcjonalnie, czy certyfikat jest prawidłowy.</summary>
        <returns>
          <see langword="true" /> Jeśli podpis jest nieprawidłowy; w przeciwnym razie <see langword="false" />.  - lub - <see langword="true" /> Jeśli podpisu i certyfikatów są prawidłowe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Certyfikat X.509 w wersji 1.1 programu .NET Framework nie został zweryfikowany.  W wersji 2.0 lub nowszej jest weryfikowany certyfikat X.509.  
  
 W wersji 2.0 lub nowszej programu .NET Framework <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> metoda będzie Wyszukaj w sklepie "Książka adresowa" certyfikatów umożliwiających weryfikację. Na przykład, jeśli certyfikat jest wywoływany przez podmiot klucza identyfikator (SKI) <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> — metoda będzie wybierz certyfikatów przy użyciu tego SKI i spróbuj je po kolei, dopóki nie można sprawdzić certyfikatu.  
  
   
  
## Examples  
 Poniższy przykładowy kod używa certyfikatu X.509 z magazynu certyfikatów podpisywania i Sprawdź dokument XML.  
  
 [!code-csharp[Security.Cryptography.Xml.SignedXml.CheckSignature(X509Certificate2,Boolean)#1](~/samples/snippets/csharp/VS_Snippets_CLR/Security.Cryptography.Xml.SignedXml.CheckSignature/cs/sample.cs#1)]
 [!code-vb[Security.Cryptography.Xml.SignedXml.CheckSignature(X509Certificate2,Boolean)#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Security.Cryptography.Xml.SignedXml.CheckSignature/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="certificate" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Nie można utworzyć opisu podpisu dla <paramref name="certificate" /> parametru.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignatureReturningKey">
      <MemberSignature Language="C#" Value="public bool CheckSignatureReturningKey (out System.Security.Cryptography.AsymmetricAlgorithm signingKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignatureReturningKey([out] class System.Security.Cryptography.AsymmetricAlgorithm&amp; signingKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey(System.Security.Cryptography.AsymmetricAlgorithm@)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignatureReturningKey (ByRef signingKey As AsymmetricAlgorithm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignatureReturningKey([Runtime::InteropServices::Out] System::Security::Cryptography::AsymmetricAlgorithm ^ % signingKey);" />
      <MemberSignature Language="F#" Value="member this.CheckSignatureReturningKey :  -&gt; bool" Usage="signedXml.CheckSignatureReturningKey signingKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signingKey" Type="System.Security.Cryptography.AsymmetricAlgorithm&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="signingKey">Gdy metoda zwróci wartość, zawiera implementację <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> przechowuje klucz publiczny w podpisie. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Określa, czy <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwość sprawdza przy użyciu klucza publicznego w podpisie.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwość sprawdza przy użyciu publicznego klucza w podpisie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź obiekt adresowanego identyfikator URI (Uniform Resource) przy użyciu odłączonego podpisu.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached/CPP/exampledetached.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached/CS/exampledetached.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached/VB/exampledetached.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź całego dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope/VB/exampleenvelope.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="signingKey" /> Parametr ma wartość null.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" /> Właściwość klucza publicznego w podpisie nie pasuje do <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" /> właściwości.  - lub - nie można utworzyć opisu podpisu.  - lub nie można utworzyć algorytmu wyznaczania wartości skrótu.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ComputeSignature">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Oblicza podpisu cyfrowego XML.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ComputeSignature">
      <MemberSignature Language="C#" Value="public void ComputeSignature ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ComputeSignature() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.ComputeSignature" />
      <MemberSignature Language="VB.NET" Value="Public Sub ComputeSignature ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ComputeSignature();" />
      <MemberSignature Language="F#" Value="member this.ComputeSignature : unit -&gt; unit" Usage="signedXml.ComputeSignature " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Oblicza podpisu cyfrowego XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.ComputeSignature%2A> Metoda tworzy podpis cyfrowy XML i tworzy wiele elementów XML potrzebne.  
  
 Należy ustawić danych do podpisania i <xref:System.Security.Cryptography.Xml.SignedXml.SigningKey%2A> właściwość przed wywołaniem tej metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź obiekt adresowanego identyfikator URI (Uniform Resource) przy użyciu odłączonego podpisu.  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CPP/xmldsigdetach.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CS/xmldsigdetach.cs#1)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/VB/xmldsigdetach.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź całego dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/CPP/xmldsigenv.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/CS/xmldsigenv.cs#1)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/VB/xmldsigenv.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <see cref="P:System.Security.Cryptography.Xml.SignedXml.SigningKey" /> Jest właściwość <see langword="null" />.  - lub - <see cref="P:System.Security.Cryptography.Xml.SignedXml.SigningKey" /> właściwość nie jest <see cref="T:System.Security.Cryptography.DSA" /> obiektu lub <see cref="T:System.Security.Cryptography.RSA" /> obiektu.  - lub - nie można załadować klucza.</exception>
      </Docs>
    </Member>
    <Member MemberName="ComputeSignature">
      <MemberSignature Language="C#" Value="public void ComputeSignature (System.Security.Cryptography.KeyedHashAlgorithm macAlg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ComputeSignature(class System.Security.Cryptography.KeyedHashAlgorithm macAlg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.ComputeSignature(System.Security.Cryptography.KeyedHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ComputeSignature (macAlg As KeyedHashAlgorithm)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ComputeSignature(System::Security::Cryptography::KeyedHashAlgorithm ^ macAlg);" />
      <MemberSignature Language="F#" Value="member this.ComputeSignature : System.Security.Cryptography.KeyedHashAlgorithm -&gt; unit" Usage="signedXml.ComputeSignature macAlg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="macAlg" Type="System.Security.Cryptography.KeyedHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="macAlg">A <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> obiekt przechowujący MAC ma być używany do obliczenia wartości <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwości.</param>
        <summary>Oblicza podpis cyfrowy XML przy użyciu algorytmu określony komunikat uwierzytelniania kodu (MAC).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.ComputeSignature%2A> Metoda tworzy podpis cyfrowy XML przy użyciu określony algorytm MAC i tworzy wiele elementów XML potrzebne.  
  
 Należy ustawić danych do podpisania przed wywołaniem tej metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź obiekt adresowanego identyfikator URI (Uniform Resource) przy użyciu odłączonego podpisu.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/CPP/xmldsigdetachedkeyedhashalg.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/CS/xmldsigdetachedkeyedhashalg.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/VB/xmldsigdetachedkeyedhashalg.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź całego dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/CPP/xmldsigenvkeyedhashalg.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/CS/xmldsigenvkeyedhashalg.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/VB/xmldsigenvkeyedhashalg.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="macAlg" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> Obiekt określony przez <paramref name="macAlg" /> parametr nie jest wystąpieniem <see cref="T:System.Security.Cryptography.HMACSHA1" />.  - lub - <see cref="P:System.Security.Cryptography.HashAlgorithm.HashSize" /> właściwości określonego <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> obiekt jest nieprawidłowy.  - lub - nie można utworzyć transformacja kryptograficzna użytych do sprawdzenia podpisu.</exception>
      </Docs>
    </Member>
    <Member MemberName="EncryptedXml">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.EncryptedXml EncryptedXml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.EncryptedXml EncryptedXml" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.EncryptedXml" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptedXml As EncryptedXml" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::EncryptedXml ^ EncryptedXml { System::Security::Cryptography::Xml::EncryptedXml ^ get(); void set(System::Security::Cryptography::Xml::EncryptedXml ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EncryptedXml : System.Security.Cryptography.Xml.EncryptedXml with get, set" Usage="System.Security.Cryptography.Xml.SignedXml.EncryptedXml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.EncryptedXml</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> obiektu, który definiuje reguły przetwarzania XML szyfrowania.</summary>
        <value>
          <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> Obiektu, który definiuje reguły przetwarzania XML szyfrowania.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIdElement">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlElement GetIdElement (System.Xml.XmlDocument document, string idValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlElement GetIdElement(class System.Xml.XmlDocument document, string idValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.GetIdElement(System.Xml.XmlDocument,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIdElement (document As XmlDocument, idValue As String) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlElement ^ GetIdElement(System::Xml::XmlDocument ^ document, System::String ^ idValue);" />
      <MemberSignature Language="F#" Value="abstract member GetIdElement : System.Xml.XmlDocument * string -&gt; System.Xml.XmlElement&#xA;override this.GetIdElement : System.Xml.XmlDocument * string -&gt; System.Xml.XmlElement" Usage="signedXml.GetIdElement (document, idValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Xml.XmlDocument" />
        <Parameter Name="idValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="document">
          <see cref="T:System.Xml.XmlDocument" /> Obiekt, aby pobrać <see cref="T:System.Xml.XmlElement" /> obiekt z.</param>
        <param name="idValue">Identyfikator <see cref="T:System.Xml.XmlElement" /> obiektu pobrać <see cref="T:System.Xml.XmlDocument" /> obiektu.</param>
        <summary>Zwraca <see cref="T:System.Xml.XmlElement" /> obiektu o określonym identyfikatorze z określonego <see cref="T:System.Xml.XmlDocument" /> obiektu.</summary>
        <returns>
          <see cref="T:System.Xml.XmlElement" /> Obiektu o określonym identyfikatorze z określonego <see cref="T:System.Xml.XmlDocument" /> obiekt, lub <see langword="null" /> , jeśli nie można go odnaleźć.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPublicKey">
      <MemberSignature Language="C#" Value="protected virtual System.Security.Cryptography.AsymmetricAlgorithm GetPublicKey ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Security.Cryptography.AsymmetricAlgorithm GetPublicKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.GetPublicKey" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetPublicKey () As AsymmetricAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Security::Cryptography::AsymmetricAlgorithm ^ GetPublicKey();" />
      <MemberSignature Language="F#" Value="abstract member GetPublicKey : unit -&gt; System.Security.Cryptography.AsymmetricAlgorithm&#xA;override this.GetPublicKey : unit -&gt; System.Security.Cryptography.AsymmetricAlgorithm" Usage="signedXml.GetPublicKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.AsymmetricAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca klucz publiczny podpisu.</summary>
        <returns>
          <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> Obiekt, który zawiera klucz publiczny podpisu, lub <see langword="null" /> Jeśli nie można odnaleźć klucza.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.GetPublicKey%2A> Metoda zwraca <xref:System.Security.Cryptography.AsymmetricAlgorithm> obiekt, który zawiera klucz publiczny, który może służyć do weryfikacji podpisu cyfrowego XML.  
  
 Klucz musi być równa albo <xref:System.Security.Cryptography.DSA> lub <xref:System.Security.Cryptography.RSA> klucza.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <see cref="P:System.Security.Cryptography.Xml.SignedXml.KeyInfo" /> Jest właściwość <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetXml">
      <MemberSignature Language="C#" Value="public System.Xml.XmlElement GetXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlElement GetXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.GetXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXml () As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlElement ^ GetXml();" />
      <MemberSignature Language="F#" Value="member this.GetXml : unit -&gt; System.Xml.XmlElement" Usage="signedXml.GetXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca reprezentację XML <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <returns>Reprezentacja XML <see cref="T:System.Security.Cryptography.Xml.Signature" /> obiektu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignedInfo" /> Jest właściwość <see langword="null" />.  - lub - <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureValue" /> jest właściwość <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="KeyInfo">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.KeyInfo KeyInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.KeyInfo KeyInfo" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.KeyInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyInfo As KeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::KeyInfo ^ KeyInfo { System::Security::Cryptography::Xml::KeyInfo ^ get(); void set(System::Security::Cryptography::Xml::KeyInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.KeyInfo : System.Security.Cryptography.Xml.KeyInfo with get, set" Usage="System.Security.Cryptography.Xml.SignedXml.KeyInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.KeyInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> obiektu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <value>
          <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> Obiektu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A> Reprezentuje właściwość <`KeyInfo`> element podpisu cyfrowego XML przy użyciu <xref:System.Security.Cryptography.Xml.KeyInfo> obiektów zawartych w ramach właściwości.  <`KeyInfo`> Podelement jest element <`Signature`> elementu.  
  
 Użyj <xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A> właściwości do osadzenia informacje związane z kluczem przeznaczone do identyfikowania klucz niezbędny do zweryfikowania dokumentu XML.  
  
 Aby uzyskać więcej informacji na temat `<KeyInfo>` elementu, zobacz specyfikację XMLDSIG, która jest dostępna w www.w3.org/TR/xmldsig-core/.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Security.Cryptography.Xml.KeyInfo> obiektu podczas podpisywania zasobu reprezentowanego przez Universal zasobów Identifier (URI).  W tym przykładzie podpis jest zapisywany w pliku.  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CPP/xmldsigdetach.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CS/xmldsigdetach.cs#1)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/VB/xmldsigdetach.vb#1)]  
  
 Poniższy przykład kodu wykorzystuje <xref:System.Security.Cryptography.Xml.KeyInfo> obiektu podczas podpisywania dokumentu XML.  W tym przykładzie podpis jest zapisywany w pliku.  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/CPP/xmldsigenv.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/CS/xmldsigenv.cs#1)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/VB/xmldsigenv.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadXml">
      <MemberSignature Language="C#" Value="public void LoadXml (System.Xml.XmlElement value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadXml(class System.Xml.XmlElement value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.LoadXml(System.Xml.XmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadXml (value As XmlElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadXml(System::Xml::XmlElement ^ value);" />
      <MemberSignature Language="F#" Value="member this.LoadXml : System.Xml.XmlElement -&gt; unit" Usage="signedXml.LoadXml value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Xml.XmlElement" />
      </Parameters>
      <Docs>
        <param name="value">Element XML załadować <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> stanu z.</param>
        <summary>Ładunki <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> stanu z elementem XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Security.Cryptography.Xml.SignedXml.LoadXml%2A> metodę sprawdzania dokumentu XML.  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CPP/xmldsigdetach.cpp#3)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigDetached#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CS/xmldsigdetach.cs#3)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/VB/xmldsigdetach.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="value" /> Parametru nie zawiera prawidłowej <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureValue" /> właściwości.  - lub - <paramref name="value" /> parametru nie zawiera prawidłowej <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignedInfo" /> właściwości.</exception>
      </Docs>
    </Member>
    <Member MemberName="m_signature">
      <MemberSignature Language="C#" Value="protected System.Security.Cryptography.Xml.Signature m_signature;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Security.Cryptography.Xml.Signature m_signature" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.m_signature" />
      <MemberSignature Language="VB.NET" Value="Protected m_signature As Signature " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Security::Cryptography::Xml::Signature ^ m_signature;" />
      <MemberSignature Language="F#" Value="val mutable m_signature : System.Security.Cryptography.Xml.Signature" Usage="System.Security.Cryptography.Xml.SignedXml.m_signature" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.Signature</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje <see cref="T:System.Security.Cryptography.Xml.Signature" /> obiektu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_strSigningKeyName">
      <MemberSignature Language="C#" Value="protected string m_strSigningKeyName;" />
      <MemberSignature Language="ILAsm" Value=".field family string m_strSigningKeyName" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.m_strSigningKeyName" />
      <MemberSignature Language="VB.NET" Value="Protected m_strSigningKeyName As String " />
      <MemberSignature Language="C++ CLI" Value="protected: System::String ^ m_strSigningKeyName;" />
      <MemberSignature Language="F#" Value="val mutable m_strSigningKeyName : string" Usage="System.Security.Cryptography.Xml.SignedXml.m_strSigningKeyName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje nazwę zainstalowanego klucza ma być używany do podpisywania <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver Resolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver Resolver" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.Resolver" />
      <MemberSignature Language="VB.NET" Value="Public Property Resolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ Resolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resolver : System.Xml.XmlResolver" Usage="System.Security.Cryptography.Xml.SignedXml.Resolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ustawia bieżący <see cref="T:System.Xml.XmlResolver" /> obiektu.</summary>
        <value>Bieżący <see cref="T:System.Xml.XmlResolver" /> obiektu. Wartości domyślne to <see cref="T:System.Xml.XmlSecureResolver" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver> Klasy rozpoznaje zasobów zewnętrznych XML o nazwie przez zasób identyfikator URI (Uniform). Jeśli nie ufasz źródłu pliku XML, możesz nie zezwala na dostęp do zasobów komputera o nazwie przez identyfikator URI pliku XML. Można użyć <xref:System.Security.Cryptography.Xml.SignedXml.Resolver%2A> właściwość, aby kontrolować poziom dostępu pliki XML do zasobów komputera, określając inną <xref:System.Xml.XmlResolver> obiektów. Jeśli nie chcesz zezwolić na dostęp, można ustawić tę właściwość `null` (`Nothing` w języku Visual Basic).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SafeCanonicalizationMethods">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; SafeCanonicalizationMethods { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; SafeCanonicalizationMethods" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SafeCanonicalizationMethods As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ SafeCanonicalizationMethods { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SafeCanonicalizationMethods : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>[Obsługiwane w programie .NET Framework 4.5.1 i nowszych wersjach]  Pobiera nazwy metody, której algorytmy zapewniania kanoniczności są jawnie dozwolone.</summary>
        <value>Kolekcja nazw metod bezpiecznie powodującymi canonical XML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metody zapewniania kanoniczności przekonwertować dokument XML do postaci kanonicznej. Aby uzyskać więcej informacji na temat canonical XML, zobacz [Canonical XML](http://www.w3.org/TR/xml-c14n) w witrynie sieci Web W3C.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Signature">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.Signature Signature { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.Signature Signature" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.Signature" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Signature As Signature" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::Signature ^ Signature { System::Security::Cryptography::Xml::Signature ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Signature : System.Security.Cryptography.Xml.Signature" Usage="System.Security.Cryptography.Xml.SignedXml.Signature" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.Signature</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Security.Cryptography.Xml.Signature" /> obiektu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <value>
          <see cref="T:System.Security.Cryptography.Xml.Signature" /> Obiektu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A> Reprezentuje właściwość <`Signature`> element podpisu cyfrowego XML przy użyciu <xref:System.Security.Cryptography.Xml.Signature> obiektów zawartych w ramach właściwości.  <`Signature`> Element jest elementem głównym używany do tworzenia podpisu cyfrowego XML i weryfikacji.  
  
 Użyj <xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A> właściwości do pobrania <xref:System.Security.Cryptography.Xml.Signature> obiekt używany przez <xref:System.Security.Cryptography.Xml.SignedXml> obiektu.  
  
 Aby uzyskać więcej informacji na temat `<Signature>` elementu, zobacz specyfikację XMLDSIG, która jest dostępna w www.w3.org/TR/xmldsig-core/.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A> właściwości zalogowania się i sprawdzić za pomocą podpisu w transformacjach całego dokumentu XML.  
  
 [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/VB/sample.vb#1)]  
  
 Poniższy przykład kodu wykorzystuje <xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A> właściwości zalogowania się i sprawdzić obiekt adresowanego identyfikator URI (Uniform Resource) przy użyciu odłączonego podpisu.  
  
 [!code-cpp[XMLDSIG - Signature - Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CPP/sample.cpp#1)]
 [!code-csharp[XMLDSIG - Signature - Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CS/sample.cs#1)]
 [!code-vb[XMLDSIG - Signature - Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/XMLDSIG - Signature - Detached/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureFormatValidator">
      <MemberSignature Language="C#" Value="public Func&lt;System.Security.Cryptography.Xml.SignedXml,bool&gt; SignatureFormatValidator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class System.Security.Cryptography.Xml.SignedXml, bool&gt; SignatureFormatValidator" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator" />
      <MemberSignature Language="VB.NET" Value="Public Property SignatureFormatValidator As Func(Of SignedXml, Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Func&lt;System::Security::Cryptography::Xml::SignedXml ^, bool&gt; ^ SignatureFormatValidator { Func&lt;System::Security::Cryptography::Xml::SignedXml ^, bool&gt; ^ get(); void set(Func&lt;System::Security::Cryptography::Xml::SignedXml ^, bool&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SignatureFormatValidator : Func&lt;System.Security.Cryptography.Xml.SignedXml, bool&gt; with get, set" Usage="System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Security.Cryptography.Xml.SignedXml,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera metodę delegowaną, która będzie wywoływana w celu weryfikacji podpisu XML format (nie kryptograficznych zabezpieczeń).</summary>
        <value>
          <see langword="true" /> Jeśli format jest dopuszczalna; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może służyć do zapewnienia służą tylko do niektórych transformacji lub podpis używany w niektórych algorytmu wyznaczania wartości skrótu i tak dalej.  
  
 Ustawienie właściwości `null` usuwa wszystkie Walidacja formatu podpisu z <xref:System.Security.Cryptography.Xml.SignedXml> obiektu.  
  
 Jeśli chcesz, aby uzyskać więcej łańcucha do niego i delegata bieżącego obiektu.  
  
 Jeśli konfigurujesz modułu sprawdzania poprawności formatu delegata podasz zostanie wyświetlony jako parametr wejściowy <xref:System.Security.Cryptography.Xml.SignedXml> obiekt weryfikowany i zwraca wartość logiczną — `true` Jeśli format jest dopuszczalna, `false` Jeśli nie jest. Jeśli delegat zwraca `false` z jakiejkolwiek przyczyny, <xref:System.Security.Cryptography.Xml.SignedXml> obiektu zgłasza, że podpis XML jest nieprawidłowy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureLength">
      <MemberSignature Language="C#" Value="public string SignatureLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignatureLength" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignatureLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignatureLength As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SignatureLength { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SignatureLength : string" Usage="System.Security.Cryptography.Xml.SignedXml.SignatureLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera długość podpisu dla bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <value>Długość podpisu dla bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureMethod">
      <MemberSignature Language="C#" Value="public string SignatureMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignatureMethod" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignatureMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SignatureMethod { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SignatureMethod : string" Usage="System.Security.Cryptography.Xml.SignedXml.SignatureMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera metodę podpisu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <value>Metoda podpisu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.SignatureMethod%2A> Reprezentuje właściwość <`SignatureMethod`> element podpisu cyfrowego XML za pomocą ciągu identyfikatora URI (Uniform Resource) zawartych w właściwości. <`SignatureMethod`> Podelement jest element <`SignedInfo`> elementu.  
  
 Użyj <xref:System.Security.Cryptography.Xml.SignedXml.SignatureMethod%2A> właściwości do pobrania <`SignatureMethod`> Identyfikator URI używany przez <xref:System.Security.Cryptography.Xml.SignedXml> obiektu. Ta właściwość jest tylko do odczytu. Aby uzyskać więcej informacji o określaniu programowo identyfikator URI dla <`SignatureMethod`> elementu, zobacz <xref:System.Security.Cryptography.Xml.SignedInfo.SignatureMethod%2A> właściwości.  
  
 Aby uzyskać więcej informacji na temat `<SignatureMethod>` elementu, zobacz specyfikację XMLDSIG, która jest dostępna w www.w3.org/TR/xmldsig-core/.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureValue">
      <MemberSignature Language="C#" Value="public byte[] SignatureValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SignatureValue" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignatureValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignatureValue As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SignatureValue { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SignatureValue : byte[]" Usage="System.Security.Cryptography.Xml.SignedXml.SignatureValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość podpisu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <value>Tablica bajtów zawierająca wartość podpisu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.SignatureValue%2A> Reprezentuje właściwość <`SignatureValue`> element podpisu cyfrowego XML przy użyciu tablicy bajtów zawartych w właściwości.  <`SignatureValue`> Podelement jest element <`Signature>` elementu.  
  
 Użyj <xref:System.Security.Cryptography.Xml.SignedXml.SignatureValue%2A> właściwości do pobierania wartości XML podpisu cyfrowego.  Ta właściwość jest wypełniane automatycznie po wprowadzeniu pomyślnym nawiązaniu połączenia z <xref:System.Security.Cryptography.Xml.SignedXml.ComputeSignature%2A> metody.  
  
 Aby uzyskać więcej informacji na temat `<SignatureValue>` elementu, zobacz specyfikację XMLDSIG, która jest dostępna w www.w3.org/TR/xmldsig-core/.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignedInfo">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.SignedInfo SignedInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.SignedInfo SignedInfo" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignedInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignedInfo As SignedInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::SignedInfo ^ SignedInfo { System::Security::Cryptography::Xml::SignedInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SignedInfo : System.Security.Cryptography.Xml.SignedInfo" Usage="System.Security.Cryptography.Xml.SignedXml.SignedInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.SignedInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> obiektu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <value>
          <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> Obiektu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.SignedInfo%2A> Reprezentuje właściwość <`SignedInfo`> element podpisu cyfrowego XML przy użyciu tablicy bajtów zawartych w właściwości.  <`SignedInfo`> Podelement jest element <`Signature>` elementu.  
  
 Użyj <xref:System.Security.Cryptography.Xml.SignedXml.SignedInfo%2A> właściwości do pobrania <xref:System.Security.Cryptography.Xml.SignedInfo> obiektu, który jest używany przez <xref:System.Security.Cryptography.Xml.SignedXml> obiekt, aby utworzyć podpis cyfrowy XML.  
  
 Aby uzyskać więcej informacji na temat `<SignedInfo>` elementu, zobacz specyfikację XMLDSIG, która jest dostępna w www.w3.org/TR/xmldsig-core/.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigningKey">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.AsymmetricAlgorithm SigningKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.AsymmetricAlgorithm SigningKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SigningKey" />
      <MemberSignature Language="VB.NET" Value="Public Property SigningKey As AsymmetricAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::AsymmetricAlgorithm ^ SigningKey { System::Security::Cryptography::AsymmetricAlgorithm ^ get(); void set(System::Security::Cryptography::AsymmetricAlgorithm ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SigningKey : System.Security.Cryptography.AsymmetricAlgorithm with get, set" Usage="System.Security.Cryptography.Xml.SignedXml.SigningKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.AsymmetricAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia klucz algorytmu asymetrycznego używany do podpisywania <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <value>Klucz algorytmu asymetrycznego, używany do podpisywania <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Security.Cryptography.Xml.SignedXml.SigningKey%2A> mają właściwości w celu określenia, klucza asymetrycznego, możesz używać do tworzenia podpisu cyfrowego XML.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zalogowania się i sprawdzić za pomocą podpisu w transformacjach całego dokumentu XML.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/VB/exampleenvelope.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź obiekt adresowanego identyfikator URI (Uniform Resource) przy użyciu odłączonego podpisu.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CPP/exampledetached.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CS/exampledetached.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/VB/exampledetached.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować i sprawdź pojedynczy element dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigningKeyName">
      <MemberSignature Language="C#" Value="public string SigningKeyName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SigningKeyName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SigningKeyName" />
      <MemberSignature Language="VB.NET" Value="Public Property SigningKeyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SigningKeyName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SigningKeyName : string with get, set" Usage="System.Security.Cryptography.Xml.SignedXml.SigningKeyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę zainstalowanego klucza ma być używany do podpisywania <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <value>Nazwa zainstalowanego klucza ma być używany do podpisywania <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDecryptionTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDecryptionTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDecryptionTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDecryptionTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDecryptionTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDecryptionTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator URI (Uniform Resource) dla transformacji deszyfrowania tryb XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl> pole jest "http://www.w3.org/2002/07/decrypt#XML".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/2002/07/decrypt#XML.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigBase64TransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigBase64TransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigBase64TransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigBase64TransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigBase64TransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigBase64TransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator URI (Uniform Resource) dla podstawowej transformacji 64. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl> pole jest "http://www.w3.org/2000/09/xmldsig#base64".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigBase64Transform> Klasa implementuje przekształcenia opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/2000/09/xmldsig#base64.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia członkami <xref:System.Security.Cryptography.Xml.XmlDsigBase64Transform> klasy.  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigBase64Transform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigBase64Transform/CPP/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigBase64Transform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigBase64Transform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigBase64Transform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigBase64Transform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigC14NTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigC14NTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigC14NTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigC14NTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigC14NTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigC14NTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolitego identyfikatora zasobów (URI) dla transformacji XML kanonicznej. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl> pole jest "http://www.w3.org/TR/2001/REC-xml-c14n-20010315".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform> Klasa implementuje przekształcenia opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/TR/2001/REC-xml-c14n-20010315.  
  
 To pole ma taką samą wartość jak <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl> pola.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania członkami <xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform> klasy.  
  
 [!code-cpp[System.Security.Cryptography.XML.XMLDsigC14NTransform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigC14NTransform/CPP/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.XML.XMLDsigC14NTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigC14NTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.XML.XMLDsigC14NTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigC14NTransform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigC14NWithCommentsTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigC14NWithCommentsTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigC14NWithCommentsTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigC14NWithCommentsTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigC14NWithCommentsTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigC14NWithCommentsTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator URI (Uniform Resource) dla transformacji Canonical XML, z komentarzami. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl> pole jest "http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments ".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform> Klasa implementuje przekształcenia opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments.  
  
 To pole ma taką samą wartość jak <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl> pola.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigCanonicalizationUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigCanonicalizationUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigCanonicalizationUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigCanonicalizationUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigCanonicalizationUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigCanonicalizationUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator URI (Uniform Resource) dla algorytm kanonizacji standardowe podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl> pole jest "http://www.w3.org/TR/2001/REC-xml-c14n-20010315".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform> Klasa implementuje przekształcenia opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/TR/2001/REC-xml-c14n-20010315.  
  
 To pole ma taką samą wartość jak <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl> pola.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigCanonicalizationWithCommentsUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigCanonicalizationWithCommentsUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigCanonicalizationWithCommentsUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigCanonicalizationWithCommentsUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigCanonicalizationWithCommentsUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigCanonicalizationWithCommentsUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator URI (Uniform Resource) dla algorytm kanonizacji standardowe podpisy cyfrowe XML i zawiera komentarze. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl> pole jest "http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform> Klasa implementuje przekształcenia opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments.  
  
 To pole ma taką samą wartość jak <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl> pola.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigDSAUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigDSAUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigDSAUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigDSAUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigDSAUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigDSAUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) standardu <see cref="T:System.Security.Cryptography.DSA" /> algorytm podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl> pole jest "http://www.w3.org/2000/09/xmldsig#dsa-sha1".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/2000/09/xmldsig#dsa-sha1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigEnvelopedSignatureTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigEnvelopedSignatureTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigEnvelopedSignatureTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigEnvelopedSignatureTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigEnvelopedSignatureTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigEnvelopedSignatureTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator URI (Uniform Resource) dla transformacji przekształcenie podpisu. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl> pole jest "http://www.w3.org/2000/09/xmldsig#enveloped-signature".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform> Klasa implementuje przekształcenia opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/2000/09/xmldsig#enveloped-signature.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia członkami <xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform> klasy.  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform/cpp/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigExcC14NTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigExcC14NTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigExcC14NTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigExcC14NTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigExcC14NTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigExcC14NTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator URI (Uniform Resource) na wyłączność kanonizacji XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl> pole jest "http://www.w3.org/2001/10/xml-exc-c14n#".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform> Klasa implementuje przekształcenia opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/2001/10/xml-exc-c14n#.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób podpisywanie i weryfikowanie dokumentu XML przy użyciu <xref:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform> klasy.  Ten przykład tworzy koperty podpisu.  
  
 [!code-cpp[Cryptography.Xml.XmlDsigExcC14NTransform#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NTransform/CPP/example.cpp#1)]
 [!code-csharp[Cryptography.Xml.XmlDsigExcC14NTransform#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NTransform/CS/example.cs#1)]
 [!code-vb[Cryptography.Xml.XmlDsigExcC14NTransform#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NTransform/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigExcC14NWithCommentsTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigExcC14NWithCommentsTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigExcC14NWithCommentsTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigExcC14NWithCommentsTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigExcC14NWithCommentsTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigExcC14NWithCommentsTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator URI (Uniform Resource) na wyłączność kanonizacji XML, z komentarzami. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl> pole jest "http://www.w3.org/2001/10/xml-exc-c14n#WithComments".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform> Klasa implementuje przekształcenia opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/2001/10/xml-exc-c14n#WithComments.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób podpisywanie i weryfikowanie dokumentu XML przy użyciu <xref:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform> klasy.  Ten przykład tworzy koperty podpisu.  
  
 [!code-cpp[Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NWithCommentsTransform/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NWithCommentsTransform/CS/sample.cs#1)]
 [!code-vb[Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NWithCommentsTransform/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigHMACSHA1Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigHMACSHA1Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigHMACSHA1Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigHMACSHA1Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigHMACSHA1Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigHMACSHA1Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) standardu <see cref="T:System.Security.Cryptography.HMACSHA1" /> algorytm podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url> pole jest "http://www.w3.org/2000/09/xmldsig#hmac-sha1".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/2000/09/xmldsig#hmac-sha1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigMinimalCanonicalizationUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigMinimalCanonicalizationUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigMinimalCanonicalizationUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigMinimalCanonicalizationUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigMinimalCanonicalizationUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigMinimalCanonicalizationUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator URI (Uniform Resource) dla algorytmu standardowe minimalnego zapewniania kanoniczności dla podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl> pole jest "http://www.w3.org/2000/09/xmldsig#minimal".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/2000/09/xmldsig#minimal.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigNamespaceUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigNamespaceUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigNamespaceUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigNamespaceUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigNamespaceUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigNamespaceUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator URI (Uniform Resource) dla standardowych przestrzeni nazw dla podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl> pole jest "http://www.w3.org/2000/09/xmldsig#".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/2000/09/xmldsig#.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigRSASHA1Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigRSASHA1Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigRSASHA1Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigRSASHA1Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigRSASHA1Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigRSASHA1Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) standardu <see cref="T:System.Security.Cryptography.RSA" /> podpis metody podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url> pole jest "http://www.w3.org/2000/09/xmldsig#rsa-sha1".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/2000/09/xmldsig#rsa-sha1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigRSASHA256Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigRSASHA256Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigRSASHA256Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigRSASHA256Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigRSASHA256Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigRSASHA256Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) dla <see cref="T:System.Security.Cryptography.RSA" /> algorytmu SHA-256 podpis metody odmiana podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url> pole jest "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w [ https://www.w3.org/2001/04/xmldsig-more#rsa-sha256 ](https://www.w3.org/2001/04/xmldsig-more#rsa-sha256).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigRSASHA384Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigRSASHA384Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigRSASHA384Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigRSASHA384Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigRSASHA384Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigRSASHA384Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) dla <see cref="T:System.Security.Cryptography.RSA" /> algorytmu SHA-384 podpis metody odmiana podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url> pole jest "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w [ https://www.w3.org/2001/04/xmldsig-more#rsa-sha384 ](https://www.w3.org/2001/04/xmldsig-more#rsa-sha384).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigRSASHA512Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigRSASHA512Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigRSASHA512Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigRSASHA512Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigRSASHA512Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigRSASHA512Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) dla <see cref="T:System.Security.Cryptography.RSA" /> SHA-512 podpis metody odmiana podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url> pole jest "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w [ https://www.w3.org/2001/04/xmldsig-more#rsa-sha512 ](https://www.w3.org/2001/04/xmldsig-more#rsa-sha512).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigSHA1Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigSHA1Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigSHA1Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigSHA1Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigSHA1Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigSHA1Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) standardu <see cref="T:System.Security.Cryptography.SHA1" /> szyfrowanego metodę podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url> pole jest "http://www.w3.org/2000/09/xmldsig#sha1".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/2000/09/xmldsig#sha1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigSHA256Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigSHA256Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigSHA256Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigSHA256Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigSHA256Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigSHA256Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) standardu <see cref="T:System.Security.Cryptography.SHA256" /> szyfrowanego metodę podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url> pole jest "http://www.w3.org/2001/04/xmlenc#sha256".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w [ http://www.w3.org/2001/04/xmlenc#sha256 ](http://www.w3.org/2001/04/xmlenc#sha256).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigSHA384Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigSHA384Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigSHA384Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigSHA384Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigSHA384Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigSHA384Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) standardu <see cref="T:System.Security.Cryptography.SHA384" /> szyfrowanego metodę podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url> pole jest "http://www.w3.org/2001/04/xmldsig-more#sha384".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w [ https://www.w3.org/2001/04/xmldsig-more#sha384 ](https://www.w3.org/2001/04/xmldsig-more#sha384).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigSHA512Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigSHA512Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigSHA512Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigSHA512Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigSHA512Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigSHA512Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) standardu <see cref="T:System.Security.Cryptography.SHA512" /> szyfrowanego metodę podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url> pole jest "http://www.w3.org/2001/04/xmlenc#sha512".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w [ http://www.w3.org/2001/04/xmlenc#sha512 ](http://www.w3.org/2001/04/xmlenc#sha512).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigXPathTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigXPathTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigXPathTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigXPathTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigXPathTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigXPathTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje Uniform Resource Identifier (URI) dla XML Path Language (XPath). To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl> pole jest "http://www.w3.org/TR/1999/REC-xpath-19991116".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigXPathTransform> Klasa implementuje przekształcenia opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/TR/1999/REC-xpath-19991116.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania członkami <xref:System.Security.Cryptography.Xml.XmlDsigXPathTransform> klasy.  
  
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigXPathTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXPathTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigXPathTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXPathTransform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigXsltTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigXsltTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigXsltTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigXsltTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigXsltTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigXsltTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) dla przekształceń XSLT. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl> pole jest "http://www.w3.org/TR/1999/REC-xslt-19991116".  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> Klasa implementuje przekształcenia opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz specyfikację sieci World Wide Web konsorcjum W3C w http://www.w3.org/TR/1999/REC-xslt-19991116.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia członkami <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> klasy.  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CPP/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlLicenseTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlLicenseTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlLicenseTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlLicenseTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlLicenseTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlLicenseTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator URI (Uniform Resource) dla algorytmu przekształcenia licencji używać do normalizowania licencji XrML podpisów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl> pole jest "urn: mpeg:mpeg21:2003:01-REL-R-NS:licenseTransform"  
  
 Użyj tego pola wygodnie podania wartości do jednego z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlLicenseTransform> Klasa implementuje przekształcenia opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl> pola.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>