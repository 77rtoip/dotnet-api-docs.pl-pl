<Type Name="SignedXml" FullName="System.Security.Cryptography.Xml.SignedXml">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eab3f6cbf6419368f543fc94257746a6152a8b04" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67247006" /></Metadata><TypeSignature Language="C#" Value="public class SignedXml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SignedXml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Xml.SignedXml" />
  <TypeSignature Language="VB.NET" Value="Public Class SignedXml" />
  <TypeSignature Language="C++ CLI" Value="public ref class SignedXml" />
  <TypeSignature Language="F#" Value="type SignedXml = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia otokę dla obiektu podpisu XML core ułatwiające tworzenie podpisów XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml> Klasa jest implementacją .NET World Wide Web Consortium (W3C) [składni podpisu XML i specyfikacja przetwarzania](https://www.w3.org/TR/xmldsig-core/), znanego również jako XMLDSIG (podpis cyfrowy XML). XMLDSIG jest oparte na standardach i interoperacyjne sposobem Zaloguj się i sprawdź w całości lub części dokumentu XML lub inne dane mogą być adresowane z jednolite zasobów identyfikator (URI).
  
 Użyj <xref:System.Security.Cryptography.Xml.SignedXml> klasy zawsze wtedy, gdy zachodzi potrzeba udostępniania podpisane dane XML między aplikacjami lub organizacje w sposób standardowy. Wszelkie dane podpisany przy użyciu tej klasy można zweryfikować przez odpowiadające implementacji specyfikacji XMLDSIG W3C.
  
 <xref:System.Security.Cryptography.Xml.SignedXml> Klasy można utworzyć trzy rodzaje podpisy cyfrowe XML:  
  
|Typ podpisu|Opis|  
|--------------------|-----------------|  
|Przekształcenie podpisu|Podpis jest zawarty w elemencie XML były podpisane.|  
|Podpis obejmujących punkty kontrolne|Podpisany kod XML znajduje się w obrębie `<Signature>` elementu.|  
|Wewnętrzny odłączonego podpisu|Podpis i podpisem XML znajdują się w tym samym dokumencie, ale żaden element zawiera drugi.|  
  
 Istnieje również czwarty rodzaj sygnatura o nazwie zewnętrznego odłączonego podpisu, czyli gdy danych i podpis znajdują się w oddzielnych dokumentów XML. Zewnętrzne podpisów odłączony nie są obsługiwane przez <xref:System.Security.Cryptography.Xml.SignedXml> klasy.  
  
## <a name="the-structure-of-an-xml-signature"></a>Struktura podpis XML  

Tworzy XMLDSIG `<Signature>` element, który zawiera podpis cyfrowy dokumentu XML lub inne dane mogą być adresowane z identyfikatora URI. `<Signature>` Element opcjonalnie może zawierać informacje o tym, gdzie znaleźć klucz, który zweryfikuje podpisu i który algorytm kryptograficzny został użyty do podpisania. Podstawowa struktura jest następująca:  
  
```xml
<Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">  
    <SignedInfo>  
      <CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>  
      <SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>  
      <Reference URI="">  
        <Transforms>  
          <Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>  
        </Transforms>  
        <DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>  
        <DigestValue>Base64EncodedValue==</DigestValue>  
      </Reference>  
    </SignedInfo>  
    <SignatureValue>AnotherBase64EncodedValue===</SignatureValue>  
</Signature>
```  
  
Główne części tej struktury są:  
  
- `<CanonicalizationMethod>` — Element

    Określa reguły dotyczące poprawiania `Signature` elementu z tekstu/XML do bajtów do weryfikacji podpisu. Wartość domyślna na platformie .NET to <http://www.w3.org/TR/2001/REC-xml-c14n-20010315>, identyfikujący algorytm godne zaufania. Ten element jest reprezentowany przez <xref:System.Security.Cryptography.Xml.SignedInfo.CanonicalizationMethod%2A?displayProperty=nameWithType> właściwości.  
  
- `<SignatureMethod>` — Element

   Określa algorytm używany do generowania podpisu i sprawdzanie poprawności, która została zastosowana do `<Signature>` element, aby wygenerować wartość w `<SignatureValue>`. W poprzednim przykładzie wartość <http://www.w3.org/2000/09/xmldsig#rsa-sha1> identyfikuje podpisu RSA PKCS1 SHA-1. Ten element jest reprezentowany przez <xref:System.Security.Cryptography.Xml.SignedXml.SignatureMethod%2A> właściwości.  
  
- `<SignatureValue>` — Element

   Określa podpis kryptograficznych dla `<Signature>` elementu. Jeśli ta sygnatura nie weryfikuje, następnie część `<Signature>` bloku została naruszona, a dokument jest uznawane za nieprawidłowe. Tak długo, jak `<CanonicalizationMethod>` wartość jest godny zaufania, ta wartość jest bardzo odporne na naruszenia bezpieczeństwa. Ten element jest reprezentowany przez <xref:System.Security.Cryptography.Xml.SignedXml.SignatureValue%2A> właściwości.  
  
- `URI` Atrybutu `<Reference>` — element  

   Określa obiekt danych za pomocą odwołanie do identyfikatora URI. Ten atrybut jest reprezentowany przez <xref:System.Security.Cryptography.Xml.Reference.Uri%2A?displayProperty=nameWithType> właściwości.  
  
   - Brak określenia `URI` atrybutu, oznacza to, że ustawienie <xref:System.Security.Cryptography.Xml.Reference.Uri%2A?displayProperty=nameWithType> właściwości `null`, oznacza, że aplikacja odbierająca oczekuje muszą znać tożsamość obiektu. W większości przypadków `null` identyfikatora URI, wynikiem będzie wyjątek. Nie używaj `null` identyfikatora URI, chyba że aplikacja jest współdziałanie z protokołem, który tego wymaga.  
  
   - Ustawienie `URI` atrybut pusty ciąg wskazuje na to, że element główny dokumentu jest podpisywana, formularza przekształcenie podpisu.  
  
   - Jeśli wartość `URI` atrybut, który rozpoczyna się od #, a następnie wartość musi zostać rozpoznany elementu w bieżącym dokumencie. Ten formularz może służyć ze wszystkimi typami obsługiwanych podpisu (opakowany podpis obejmujące podpis lub wewnętrzny odłączonego podpisu).  
  
   - Czymkolwiek jest uznawany za podpisu zewnętrznego zasobu odłączona i nie jest obsługiwana przez <xref:System.Security.Cryptography.Xml.SignedXml> klasy.  
  
- `<Transforms>` — Element  

   Zawiera listy uporządkowanej `<Transform>` została rozłożona elementy, które opisują, jak osoby podpisującej uzyskać obiekt danych. Algorytm transformacji jest podobny do metody canonicalization, ale zamiast ponownego zapisywania adresów `<Signature>` elementu go ponownie zapisuje zawartość identyfikowane przez `URI` atrybutu `<Reference>` elementu. `<Transforms>` Element jest reprezentowany przez <xref:System.Security.Cryptography.Xml.TransformChain> klasy.  
  
   - Każdy algorytm transformacji jest zdefiniowany jako biorąc XML (XPath zestaw węzłów) lub bajtów jako dane wejściowe. Jeśli format aktualnych danych różni się od wymagań wejściowych przekształcenia, są stosowane reguły konwersji.  
  
   - Każdy algorytm transformacji jest zdefiniowany jako produkcji jako dane wyjściowe XML lub bajtów.  
  
   - Jeśli dane wyjściowe ostatniego algorytm przekształcenie nie jest zdefiniowany w bajtach (lub nie określono żadnych przekształcenia), a następnie [canonicalization, Metoda](https://www.w3.org/TR/2001/REC-xml-c14n-20010315) służy jako niejawne transformacji (nawet, jeśli inny algorytm została określona w `<CanonicalizationMethod>`elementu).  
  
   - Wartość <http://www.w3.org/2000/09/xmldsig#enveloped-signature> przekształcenia algorytm koduje reguł, który jest interpretowany jako Usuń `<Signature>` elementu z dokumentu. W przeciwnym razie weryfikatora podpisu opakowany będą szyfrowane dokumencie, łącznie z podpisu, ale osoby podpisującej będzie mają rozłożona dokumentu przed zastosowaniem podpisu, co prowadzi do różnych odpowiedzi.  

- `<DigestMethod>` — Element
 
   Identyfikuje metodę skrót (skrót kryptograficzny) można zastosować przekształconej zawartości, które są identyfikowane za pomocą `URI` atrybutu `<Reference>` elementu. To jest reprezentowany przez <xref:System.Security.Cryptography.Xml.Reference.DigestMethod%2A?displayProperty=nameWithType> właściwości.  
  
## <a name="choosing-a-canonicalization-method"></a>Wybieranie metody canonicalization  
 Chyba że współdziałanie ze specyfikacją, w którym wymagane jest użycie innej wartości, zalecane jest użycie domyślnej .NET canonicalization metody, która jest algorytm XML C14N 1.0, w których wartość jest <http://www.w3.org/TR/2001/REC-xml-c14n-20010315>. Algorytm XML C14N 1.0 jest wymagana obsługiwany przez wszystkich implementacjach XMLDSIG, szczególnie w przypadku, ponieważ jest niejawne końcowego przekształcenie do zastosowania.  
  
 Dostępne są wersje canonicalization algorytmy, które obsługują przy komentarzami. Zachowywanie komentarz metody kanoniczną nie są zalecane, ponieważ ich narusza zasadę "Zaloguj się, co jest widoczne". Oznacza to, komentarzy w `<Signature>` element nie ma wpływu na logika przetwarzania jak podpis jest przeprowadzane, jest jedynie jakie podpis wartości. W połączeniu z algorytmem słabych podpisów, dzięki czemu komentarze, aby być uwzględnione zapewnia osoba atakująca niepotrzebne użytkownicy mogą wymusić kolizji wyznaczania wartości skrótu, dzięki czemu zmodyfikowany dokumentu są wyświetlane uzasadnione.  W .NET Framework tylko wbudowane canonicalizers są obsługiwane domyślnie. Aby obsługiwać dodatkowe lub niestandardowe canonicalizers, zobacz <xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A> właściwości. Jeśli dokument używa metody canonicalization, która nie znajduje się w kolekcji, reprezentowane przez <xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A> właściwości, a następnie <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> metoda zwróci `false`.  
  
> [!NOTE]
>  Bardzo obrony aplikacji można usunąć wszelkie wartości nie oczekuje na które podpisały do użycia z <xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A> kolekcji.  
  
## <a name="are-the-reference-values-safe-from-tampering"></a>Wartości odwołania są bezpieczne przed ingerencją osób niepowołanych?  
 Tak, `<Reference>` wartości są bezpieczne przed ingerencją osób niepowołanych. Weryfikuje .NET `<SignatureValue>` obliczeń przed przetworzeniem wszystkich `<Reference>` wartości i ich skojarzone przekształca i zostanie przerwany wcześnie, aby uniknąć instrukcje przetwarzania mogą okazać się złośliwe.  
  
## <a name="choosing-the-elements-to-sign"></a>Wybieranie elementów do podpisania  
 Firma Microsoft zaleca, aby używać wartości "" dla `URI` atrybutu (lub ustaw <xref:System.Security.Cryptography.Xml.Reference.Uri%2A> właściwość ciągiem pustym), jeśli to możliwe. Oznacza to, że cały dokument jest uznawany za obliczeń szyfrowane, co oznacza, że cały dokument jest chroniony przed ingerencją osób niepowołanych.  
  
 Często zdarza się wyświetlić `URI` wartości w formularzu kotwic, takich jak #foo, odnoszące się do elementu, którego atrybut ID jest "foo". Niestety to proste, aby dało się, ponieważ dotyczy to tylko zawartość elementu docelowego nie kontekstu. Nadużywanie wykonywania tego rozróżnienia jest znany jako zawijania podpisu XML (XSW).  
  
 W przypadku aplikacji uwzględnia semantycznego komentarzy (który jest nie typowych gdy zajmujących się XML), następnie należy używać "#xpointer(/)" zamiast "", a "#xpointer(id('foo'))" zamiast "#foo". Wersje #xpointer są interpretowane jako komentarze, w tym podczas formularzy shortname wyłączenie się komentarze.  
  
 Jeśli musisz zaakceptować dokumentów, które są tylko częściowo chronione i chce mieć pewność, odczytujesz taką samą zawartość chroniona podpis, użyj <xref:System.Security.Cryptography.Xml.SignedXml.GetIdElement%2A> metody.  
  
## <a name="security-considerations-about-the-keyinfo-element"></a>Zagadnienia dotyczące zabezpieczeń dotyczące elementu KeyInfo  
 Dane w opcjonalnym `<KeyInfo>` — element (oznacza to, <xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A> właściwości), który zawiera klucz, który można zweryfikować podpisu, nie należy powierzać.  
  
 W szczególności, gdy <xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A> wartość reprezentuje bez klucza publicznego RSA, DSA lub ECDSA, dokument może zostały naruszone, pomimo <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> Metoda raportowania, czy podpis jest nieprawidłowy.  Można to zrobić, ponieważ jednostki wykonywania, po prostu naruszeniem musi wygenerować nowy klucz i ponowne podpisywanie dokumentu zmodyfikowany za pomocą tego nowego klucza. Tak chyba że aplikacja sprawdza, czy klucz publiczny jest oczekiwana wartość, dokument powinny być traktowane tak, jakby zostały naruszone. Wymaga zbadania klucza publicznego osadzony w dokumencie i weryfikować ją z listą znane wartości dla kontekstu dokumentu aplikacji. Na przykład jeśli dokument można rozumieć wydawane przez znanego użytkownika, możesz sprawdzić klucza z listą znanych klucze używane przez tego użytkownika.  
  
 Można również sprawdzić po przetworzeniu dokumentu przy użyciu klucza <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey%2A> metody zamiast <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> metody. Jednak optymalną bezpieczeństwa należy sprawdzić, klucz wcześniej.  
  
 Alternatywnie należy wziąć pod uwagę podjęcie próby użytkownika zarejestrowany kluczy publicznych, zamiast odczytu, co znajduje się w `<KeyInfo>` elementu.  
  
## <a name="security-considerations-about-the-x509data-element"></a>Zagadnienia dotyczące zabezpieczeń dotyczące elementu X509Data  
 Opcjonalny `<X509Data>` element jest elementem podrzędnym `<KeyInfo>` elementu i zawiera co najmniej jeden X509 certyfikatów lub identyfikatory X509 certyfikatów. Dane w `<X509Data>` element powinien również nie być dodatkowo z natury zaufanych.  
  
 Podczas weryfikowania dokumentu z osadzonego `<X509Data>` elementu .NET sprawdza tylko, że dane jest rozpoznawana jako X509 certyfikat, którego klucz publiczny pomyślnie można sprawdzić poprawności podpisu dokumentu. W przeciwieństwie do wywoływania <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> metody z `verifySignatureOnly` parametr `false`, jest wykonywane żadne sprawdzenie odwołania, bez łańcuch zaufania jest zaznaczone i wygaśnięcia nie jest weryfikowany. Nawet jeśli aplikacja wyodrębnia sam certyfikat i przekazuje go do <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> metody z `verifySignatureOnly` parametr `false`, która jest nadal weryfikacji nie są wystarczające, aby zapobiec modyfikowaniu dokumentu. Ten certyfikat nadal musi zostać zweryfikowany jako odpowiednie dla danego dokumentu były podpisane.  
  
 Przy użyciu osadzonego certyfikatu podpisywania może zapewnić strategie przydatne wymiany kluczy, czy w `<X509Data>` sekcji lub w treści dokumentu. To podejście aplikacji należy ręcznie wyodrębnić certyfikatu i sprawdzenia poprawności podobnie do:  
  
-   Certyfikat został wystawiony bezpośrednio lub za pośrednictwem łańcuch przez urząd certyfikacji (CA) którego certyfikat publiczny jest osadzony w aplikacji.  
  
     Przy użyciu listy zaufania dostarczane przez system operacyjny bez dodatkowe czynności kontrolne, takie jak nazwa podmiotu znane, nie są wystarczające do uniknięcia niepowołanych manipulacji w <xref:System.Security.Cryptography.Xml.SignedXml>.  
  
-   Certyfikat został zweryfikowany nie zostały wygasła w momencie podpisywania dokumentów (lub "now" dla niemal przetwarzania dokumentów w czasie rzeczywistym).  
  
-   Długotrwałe certyfikatów wystawianych przez urząd certyfikacji, który obsługuje odwołań Sprawdź, czy certyfikat nie został odwołany.  
  
-   Podmiot certyfikatu jest weryfikowany jako możliwy odpowiednie do bieżącego dokumentu.  
  
## <a name="choosing-the-transform-algorithm"></a>Wybieranie algorytmu przekształcenia  
 Jeśli współdziałania ze specyfikacją, która ma określone określone wartości (na przykład XrML), następnie należy wykonać specyfikacji. Jeśli masz przekształcenie podpisu (takie jak czas podpisywania całego dokumentu), a następnie należy użyć <http://www.w3.org/2000/09/xmldsig#enveloped-signature> (reprezentowany przez <xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform> klasy). Można określić także niejawne przekształcenie XML C14N, ale nie jest konieczne.  Podpisu obejmujących punkty kontrolne lub odłączony nie transformacje są wymagane. Niejawne Przekształcanie XML C14N zajmuje się wszystkiego.  
  
 O aktualizacjach zabezpieczeń wynikające z [biuletyn zabezpieczeń firmy Microsoft MS16-035](https://docs.microsoft.com/security-updates/securitybulletins/2016/ms16-035), platformy .NET ma ograniczone przekształcenia, które można używane w weryfikację dokumentu Weryfikacja domyślnie, za pomocą niezaufanego przekształceń, powodując <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> na zawsze Zwróć `false`. W szczególności przekształceń, które wymagają dodatkowych danych wejściowych (określonego jako elementy podrzędne w pliku XML) nie są już dozwolone z powodu ich podatności nadużycie przez złośliwych użytkowników. W3C z informacją o tym unikanie przekształceń XPath i XSLT, które są dwie główne przekształcenia wpływ tych ograniczeń.  
  
## <a name="the-problem-with-external-references"></a>Problem z odwołania zewnętrzne  
 Jeśli aplikacja nie sprawdza, czy odwołania zewnętrzne nie jest odpowiednia dla bieżącego kontekstu, może być nadużywany w sposób zapewnienia wielu luk w zabezpieczeniach (łącznie z informacjami "odmowa usługi", Distributed odbicia Denial of Service, Ujawnienie obejścia podpisu i zdalne wykonywanie kodu). Nawet wtedy, gdy aplikacja były można zweryfikować odwołania zewnętrznego identyfikatora URI, będą nadal problem zasobu ładowane dwa razy: po gdy aplikacja odczytuje go, a po podczas <xref:System.Security.Cryptography.Xml.SignedXml> ona odczytana. Ponieważ nie ma żadnej gwarancji, że w dokumencie i Odczyt aplikacji Sprawdź, czy kroki mają taką samą zawartość, podpis nie zapewnia stopnia zaufania.  
  
 Biorąc pod uwagę ryzyko odwołania zewnętrzne <xref:System.Security.Cryptography.Xml.SignedXml> spowoduje zgłoszenie wyjątku w przypadku napotkania odwołaniem zewnętrznym.  Aby uzyskać więcej informacji na temat tego problemu, zobacz [artykuł bazy wiedzy 3148821](https://support.microsoft.com/kb/3148821).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować całego dokumentu XML przy użyciu przekształcenie podpisu.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/VB/exampleenvelope.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować pojedynczy element dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://www.w3.org/TR/xmldsig-bestpractices">Najlepsze rozwiązania podpisu XML</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SignedXml();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować całego dokumentu XML przy użyciu przekształcenie podpisu.  
  
 [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/VB/sample.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować obiekt adresowalnych identyfikator (URI) przy użyciu podpisu odłączony.  
  
 [!code-cpp[XMLDSIG - Signature - Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CPP/sample.cpp#1)]
 [!code-csharp[XMLDSIG - Signature - Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CS/sample.cs#1)]
 [!code-vb[XMLDSIG - Signature - Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/XMLDSIG - Signature - Detached/VB/sample.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować pojedynczy element dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedXml (System.Xml.XmlDocument document);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlDocument document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.#ctor(System.Xml.XmlDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (document As XmlDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SignedXml(System::Xml::XmlDocument ^ document);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Xml.SignedXml : System.Xml.XmlDocument -&gt; System.Security.Cryptography.Xml.SignedXml" Usage="new System.Security.Cryptography.Xml.SignedXml document" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="document" Type="System.Xml.XmlDocument" />
      </Parameters>
      <Docs>
        <param name="document"><see cref="T:System.Xml.XmlDocument" /> Obiekt, aby użyć, aby zainicjować nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.Xml.SignedXml" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> klasy z określonego dokumentu XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować całego dokumentu XML przy użyciu przekształcenie podpisu.  
  
 [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/VB/sample.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować obiekt adresowalnych identyfikator (URI) przy użyciu podpisu odłączony.  
  
 [!code-cpp[XMLDSIG - Signature - Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CPP/sample.cpp#1)]
 [!code-csharp[XMLDSIG - Signature - Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CS/sample.cs#1)]
 [!code-vb[XMLDSIG - Signature - Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/XMLDSIG - Signature - Detached/VB/sample.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować pojedynczy element dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="document" /> Parametr <see langword="null" />.  
  
—lub— 
<paramref name="document" /> Parametr zawiera wartość null <see cref="P:System.Xml.XmlDocument.DocumentElement" /> właściwości.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedXml (System.Xml.XmlElement elem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlElement elem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.#ctor(System.Xml.XmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elem As XmlElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SignedXml(System::Xml::XmlElement ^ elem);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Xml.SignedXml : System.Xml.XmlElement -&gt; System.Security.Cryptography.Xml.SignedXml" Usage="new System.Security.Cryptography.Xml.SignedXml elem" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elem" Type="System.Xml.XmlElement" />
      </Parameters>
      <Docs>
        <param name="elem"><see cref="T:System.Xml.XmlElement" /> Obiekt, aby użyć, aby zainicjować nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.Xml.SignedXml" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> klasy z określonego <see cref="T:System.Xml.XmlElement" /> obiektu.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="elem" /> Parametr <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddObject">
      <MemberSignature Language="C#" Value="public void AddObject (System.Security.Cryptography.Xml.DataObject dataObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddObject(class System.Security.Cryptography.Xml.DataObject dataObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.AddObject(System.Security.Cryptography.Xml.DataObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddObject(System::Security::Cryptography::Xml::DataObject ^ dataObject);" />
      <MemberSignature Language="F#" Value="member this.AddObject : System.Security.Cryptography.Xml.DataObject -&gt; unit" Usage="signedXml.AddObject dataObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataObject" Type="System.Security.Cryptography.Xml.DataObject" />
      </Parameters>
      <Docs>
        <param name="dataObject"><see cref="T:System.Security.Cryptography.Xml.DataObject" /> Obiekt do dodania do listy obiektów, które były podpisane.</param>
        <summary>Dodaje <see cref="T:System.Security.Cryptography.Xml.DataObject" /> obiekt do listy obiektów, które były podpisane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.AddObject%2A> Metoda dodaje `<Object>` element, który reprezentuje obiekt były podpisane do `<Signature>` element podpis cyfrowy XML.  
  
 <xref:System.Security.Cryptography.Xml.SignedXml.AddObject%2A> Wewnętrznie wywołania metod <xref:System.Security.Cryptography.Xml.Signature.AddObject%2A> metody <xref:System.Security.Cryptography.Xml.Signature> zamknięte przez obiekt <xref:System.Security.Cryptography.Xml.SignedXml> obiektu.  Można również dodać <xref:System.Security.Cryptography.Xml.DataObject> obiekt poprzez bezpośrednie wywoływanie <xref:System.Security.Cryptography.Xml.Signature.AddObject%2A> metody z <xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A> właściwości.  
  
 Aby uzyskać więcej informacji na temat podpisy cyfrowe XML, zobacz [specyfikacji XMLDSIG](https://www.w3.org/TR/xmldsig-core/).  
  
   
  
## Examples  
 Następujące kodu przykładzie oblicza i podpis XML.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml-AddObject-AddReference/CPP/example.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml-AddObject-AddReference/CS/example.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml-AddObject-AddReference/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddReference">
      <MemberSignature Language="C#" Value="public void AddReference (System.Security.Cryptography.Xml.Reference reference);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddReference(class System.Security.Cryptography.Xml.Reference reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.AddReference(System.Security.Cryptography.Xml.Reference)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddReference(System::Security::Cryptography::Xml::Reference ^ reference);" />
      <MemberSignature Language="F#" Value="member this.AddReference : System.Security.Cryptography.Xml.Reference -&gt; unit" Usage="signedXml.AddReference reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Security.Cryptography.Xml.Reference" />
      </Parameters>
      <Docs>
        <param name="reference"><see cref="T:System.Security.Cryptography.Xml.Reference" /> Obiekt, który opisuje metody digest, wartości skrótu i przekształcenie służące do tworzenia podpisu cyfrowego XML.</param>
        <summary>Dodaje <see cref="T:System.Security.Cryptography.Xml.Reference" /> obiekt <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiekt, który opisuje metody digest, wartości skrótu i przekształcenie służące do tworzenia podpisu cyfrowego XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.AddReference%2A> Metoda dodaje `<Reference>` elementu <xref:System.Security.Cryptography.Xml.SignedXml> obiekt, który opisuje metody digest, wartości skrótu i przekształcenie służące do tworzenia podpisu cyfrowego XML.  `<Reference>` Element jest podelement `<SignedInfo>` elementu.  
  
 <xref:System.Security.Cryptography.Xml.SignedXml.AddReference%2A> Wewnętrznie wywołania metod <xref:System.Security.Cryptography.Xml.SignedInfo.AddReference%2A> metody <xref:System.Security.Cryptography.Xml.SignedInfo> zamknięte przez obiekt <xref:System.Security.Cryptography.Xml.SignedXml> obiektu.  Można również dodać <xref:System.Security.Cryptography.Xml.Reference> obiekt poprzez bezpośrednie wywoływanie <xref:System.Security.Cryptography.Xml.SignedInfo.AddReference%2A> metody z <xref:System.Security.Cryptography.Xml.SignedXml.SignedInfo%2A> właściwości.  
  
 Aby uzyskać więcej informacji na temat podpisy cyfrowe XML, zobacz [specyfikacji XMLDSIG](https://www.w3.org/TR/xmldsig-core/).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować całego dokumentu XML przy użyciu przekształcenie podpisu.  
  
 [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/VB/sample.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować obiekt adresowalnych identyfikator (URI) przy użyciu podpisu odłączony.  
  
 [!code-cpp[XMLDSIG - Signature - Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CPP/sample.cpp#1)]
 [!code-csharp[XMLDSIG - Signature - Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CS/sample.cs#1)]
 [!code-vb[XMLDSIG - Signature - Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/XMLDSIG - Signature - Detached/VB/sample.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować pojedynczy element dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CheckSignature">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> sprawdza właściwości.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public bool CheckSignature ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignature() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignature" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignature () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignature();" />
      <MemberSignature Language="F#" Value="member this.CheckSignature : unit -&gt; bool" Usage="signedXml.CheckSignature " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Określa, czy <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> sprawdza właściwości, za pomocą klucza publicznego w podpisie.</summary>
        <returns><see langword="true" /> Jeśli <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> sprawdza właściwości; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda oblicza również podsumowanie odniesienia i wartość podpisu.  
  
 Jeśli dokument XML został podpisany za pomocą podpisu X.509 <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> metoda będzie Wyszukaj w sklepie "Książka adresowa" certyfikatów umożliwiających weryfikację. Na przykład, jeśli certyfikat jest wywoływany przez podmiot klucz identyfikatora (NARCIARSKIE) <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> metoda będzie wybierz certyfikatów za pomocą tego NARCIARSKIE i spróbuj je jeden po drugim dopóki go zweryfikować certyfikatu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować całego dokumentu XML przy użyciu przekształcenie podpisu.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/VB/exampleenvelope.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować obiekt adresowalnych identyfikator (URI) przy użyciu podpisu odłączony.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CPP/exampledetached.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CS/exampledetached.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/VB/exampledetached.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować pojedynczy element dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" /> Właściwość klucza publicznego w podpisie nie pasuje do <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" /> właściwości.  
  
—lub— 
Nie można utworzyć opis podpisu.  
  
— lub 
Nie można utworzyć algorytmu wyznaczania wartości skrótu.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public bool CheckSignature (System.Security.Cryptography.AsymmetricAlgorithm key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignature(class System.Security.Cryptography.AsymmetricAlgorithm key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.AsymmetricAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignature (key As AsymmetricAlgorithm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignature(System::Security::Cryptography::AsymmetricAlgorithm ^ key);" />
      <MemberSignature Language="F#" Value="member this.CheckSignature : System.Security.Cryptography.AsymmetricAlgorithm -&gt; bool" Usage="signedXml.CheckSignature key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Security.Cryptography.AsymmetricAlgorithm" />
      </Parameters>
      <Docs>
        <param name="key">Implementacja <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> właściwość, która zawiera klucz, który ma być używany w celu sprawdzenia <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwości.</param>
        <summary>Określa, czy <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwość sprawdza dla określonego klucza.</summary>
        <returns><see langword="true" /> Jeśli <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwość sprawdza dla określonego klucza; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować obiekt adresowalnych identyfikator (URI) przy użyciu podpisu odłączony.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CPP/exampledetached.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CS/exampledetached.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/VB/exampledetached.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować całego dokumentu XML przy użyciu przekształcenie podpisu.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/VB/exampleenvelope.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> Parametr <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" /> Właściwość <paramref name="key" /> parametr nie jest zgodny <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" /> właściwości.  
  
—lub— 
Nie można utworzyć opis podpisu.  
  
— lub 
Nie można utworzyć algorytmu wyznaczania wartości skrótu.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public bool CheckSignature (System.Security.Cryptography.KeyedHashAlgorithm macAlg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignature(class System.Security.Cryptography.KeyedHashAlgorithm macAlg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.KeyedHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignature (macAlg As KeyedHashAlgorithm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignature(System::Security::Cryptography::KeyedHashAlgorithm ^ macAlg);" />
      <MemberSignature Language="F#" Value="member this.CheckSignature : System.Security.Cryptography.KeyedHashAlgorithm -&gt; bool" Usage="signedXml.CheckSignature macAlg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="macAlg" Type="System.Security.Cryptography.KeyedHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="macAlg">Implementacja <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> przechowuje MAC, który ma być używany w celu sprawdzenia <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwości.</param>
        <summary>Określa, czy <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwość sprawdza algorytmu określony komunikat uwierzytelniania kod (MAC).</summary>
        <returns><see langword="true" /> Jeśli <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwość sprawdza dla określonego komputera MAC; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować obiekt adresowalnych identyfikator (URI) przy użyciu podpisu odłączony.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/CPP/xmldsigdetachedkeyedhashalg.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/CS/xmldsigdetachedkeyedhashalg.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/VB/xmldsigdetachedkeyedhashalg.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować całego dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/CPP/xmldsigenvkeyedhashalg.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/CS/xmldsigenvkeyedhashalg.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/VB/xmldsigenvkeyedhashalg.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="macAlg" /> Parametr <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><see cref="P:System.Security.Cryptography.HashAlgorithm.HashSize" /> Właściwości określonego <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> obiektu jest nieprawidłowy.  
  
—lub— 
<see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> Właściwość <see langword="null" />.  
  
—lub— 
Nie można utworzyć transformacji kryptograficzne używane do sprawdzania podpisu.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public bool CheckSignature (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool verifySignatureOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignature(class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool verifySignatureOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignature (certificate As X509Certificate2, verifySignatureOnly As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignature(System::Security::Cryptography::X509Certificates::X509Certificate2 ^ certificate, bool verifySignatureOnly);" />
      <MemberSignature Language="F#" Value="member this.CheckSignature : System.Security.Cryptography.X509Certificates.X509Certificate2 * bool -&gt; bool" Usage="signedXml.CheckSignature (certificate, verifySignatureOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="verifySignatureOnly" Type="System.Boolean" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="certificate"><see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> Obiektu do weryfikowania <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwości.</param>
        <param name="verifySignatureOnly"><see langword="true" /> można zweryfikować podpisu. <see langword="false" /> do weryfikowania podpisu i certyfikatu.</param>
        <summary>Określa, czy <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwość sprawdza się w określonym <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> obiektu i, opcjonalnie, czy certyfikat jest prawidłowy.</summary>
        <returns><see langword="true" /> Jeśli podpis jest nieprawidłowy; w przeciwnym razie <see langword="false" />.  
  
—lub— 
 <see langword="true" /> Jeśli podpis i certyfikat są ważne. w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Certyfikat X.509 w wersji 1.1 programu .NET Framework nie został zweryfikowany.  W wersji 2.0 lub nowszej certyfikat X.509 jest weryfikowany.  
  
 W wersji 2.0 i nowsze wersje programu .NET Framework <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> metoda będzie Wyszukaj w sklepie "Książka adresowa" certyfikatów umożliwiających weryfikację. Na przykład, jeśli certyfikat jest wywoływany przez podmiot klucz identyfikatora (NARCIARSKIE) <xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A> metoda będzie wybierz certyfikatów za pomocą tego NARCIARSKIE i spróbuj je jeden po drugim dopóki go zweryfikować certyfikatu.  
  
   
  
## Examples  
 Poniższy przykład kodu używa certyfikatu X.509 z magazynu certyfikatów do podpisywania i sprawdź dokumentu XML.  
  
 [!code-csharp[Security.Cryptography.Xml.SignedXml.CheckSignature(X509Certificate2,Boolean)#1](~/samples/snippets/csharp/VS_Snippets_CLR/Security.Cryptography.Xml.SignedXml.CheckSignature/cs/sample.cs#1)]
 [!code-vb[Security.Cryptography.Xml.SignedXml.CheckSignature(X509Certificate2,Boolean)#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Security.Cryptography.Xml.SignedXml.CheckSignature/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="certificate" /> Parametr <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Opis sygnatury nie mógł zostać utworzony dla <paramref name="certificate" /> parametru.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignatureReturningKey">
      <MemberSignature Language="C#" Value="public bool CheckSignatureReturningKey (out System.Security.Cryptography.AsymmetricAlgorithm signingKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignatureReturningKey([out] class System.Security.Cryptography.AsymmetricAlgorithm&amp; signingKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey(System.Security.Cryptography.AsymmetricAlgorithm@)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignatureReturningKey (ByRef signingKey As AsymmetricAlgorithm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignatureReturningKey([Runtime::InteropServices::Out] System::Security::Cryptography::AsymmetricAlgorithm ^ % signingKey);" />
      <MemberSignature Language="F#" Value="member this.CheckSignatureReturningKey :  -&gt; bool" Usage="signedXml.CheckSignatureReturningKey signingKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signingKey" Type="System.Security.Cryptography.AsymmetricAlgorithm" RefType="out" />
      </Parameters>
      <Docs>
        <param name="signingKey">Po powrocie z tej metody zawiera implementację <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> zawierający klucz publiczny w podpisie. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Określa, czy <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> sprawdza właściwości, za pomocą klucza publicznego w podpisie.</summary>
        <returns><see langword="true" /> Jeśli <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwość sprawdza przy użyciu publicznego klucza w podpisie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować obiekt adresowalnych identyfikator (URI) przy użyciu podpisu odłączony.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached/CPP/exampledetached.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached/CS/exampledetached.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached/VB/exampledetached.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować całego dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope/VB/exampleenvelope.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="signingKey" /> Parametr ma wartość null.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" /> Właściwość klucza publicznego w podpisie nie pasuje do <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" /> właściwości.  
  
—lub— 
Nie można utworzyć opis podpisu.  
  
— lub 
Nie można utworzyć algorytmu wyznaczania wartości skrótu.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ComputeSignature">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Oblicza podpis cyfrowy XML.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ComputeSignature">
      <MemberSignature Language="C#" Value="public void ComputeSignature ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ComputeSignature() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.ComputeSignature" />
      <MemberSignature Language="VB.NET" Value="Public Sub ComputeSignature ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ComputeSignature();" />
      <MemberSignature Language="F#" Value="member this.ComputeSignature : unit -&gt; unit" Usage="signedXml.ComputeSignature " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Oblicza podpis cyfrowy XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.ComputeSignature%2A> Metoda tworzy podpis cyfrowy XML i tworzy wiele elementów XML potrzebne.  
  
 Należy ustawić dane, które mają być podpisane i <xref:System.Security.Cryptography.Xml.SignedXml.SigningKey%2A> właściwości przed wywołaniem tej metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować obiekt adresowalnych identyfikator (URI) przy użyciu podpisu odłączony.  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CPP/xmldsigdetach.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CS/xmldsigdetach.cs#1)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/VB/xmldsigdetach.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować całego dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/CPP/xmldsigenv.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/CS/xmldsigenv.cs#1)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/VB/xmldsigenv.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><see cref="P:System.Security.Cryptography.Xml.SignedXml.SigningKey" /> Właściwość <see langword="null" />.  
  
—lub— 
<see cref="P:System.Security.Cryptography.Xml.SignedXml.SigningKey" /> Właściwość nie jest <see cref="T:System.Security.Cryptography.DSA" /> obiektu lub <see cref="T:System.Security.Cryptography.RSA" /> obiektu.  
  
—lub— 
Nie można załadować klucza.</exception>
      </Docs>
    </Member>
    <Member MemberName="ComputeSignature">
      <MemberSignature Language="C#" Value="public void ComputeSignature (System.Security.Cryptography.KeyedHashAlgorithm macAlg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ComputeSignature(class System.Security.Cryptography.KeyedHashAlgorithm macAlg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.ComputeSignature(System.Security.Cryptography.KeyedHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ComputeSignature (macAlg As KeyedHashAlgorithm)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ComputeSignature(System::Security::Cryptography::KeyedHashAlgorithm ^ macAlg);" />
      <MemberSignature Language="F#" Value="member this.ComputeSignature : System.Security.Cryptography.KeyedHashAlgorithm -&gt; unit" Usage="signedXml.ComputeSignature macAlg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="macAlg" Type="System.Security.Cryptography.KeyedHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="macAlg">A <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> obiekt, który przechowuje MAC, który ma być używany do obliczenia wartości <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> właściwości.</param>
        <summary>Oblicza podpis cyfrowy XML przy użyciu algorytmu określony komunikat uwierzytelniania kod (MAC).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.ComputeSignature%2A> Metoda tworzy podpis cyfrowy XML przy użyciu określonego algorytmu MAC i tworzy wiele elementów XML potrzebne.  
  
 Należy ustawić dane były podpisane przed wywołaniem tej metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować obiekt adresowalnych identyfikator (URI) przy użyciu podpisu odłączony.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/CPP/xmldsigdetachedkeyedhashalg.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/CS/xmldsigdetachedkeyedhashalg.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/VB/xmldsigdetachedkeyedhashalg.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować całego dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/CPP/xmldsigenvkeyedhashalg.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/CS/xmldsigenvkeyedhashalg.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/VB/xmldsigenvkeyedhashalg.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="macAlg" /> Parametr <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> Obiekt określony przez <paramref name="macAlg" /> parametr nie jest wystąpieniem <see cref="T:System.Security.Cryptography.HMACSHA1" />.  
  
—lub— 
<see cref="P:System.Security.Cryptography.HashAlgorithm.HashSize" /> Właściwości określonego <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> obiektu jest nieprawidłowy.  
  
—lub— 
Nie można utworzyć transformacji kryptograficzne używane do sprawdzania podpisu.</exception>
      </Docs>
    </Member>
    <Member MemberName="EncryptedXml">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.EncryptedXml EncryptedXml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.EncryptedXml EncryptedXml" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.EncryptedXml" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptedXml As EncryptedXml" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::EncryptedXml ^ EncryptedXml { System::Security::Cryptography::Xml::EncryptedXml ^ get(); void set(System::Security::Cryptography::Xml::EncryptedXml ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EncryptedXml : System.Security.Cryptography.Xml.EncryptedXml with get, set" Usage="System.Security.Cryptography.Xml.SignedXml.EncryptedXml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.EncryptedXml</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> obiekt, który definiuje reguły przetwarzania XML szyfrowania.</summary>
        <value><see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> Obiekt, który definiuje reguły przetwarzania XML szyfrowania.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIdElement">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlElement GetIdElement (System.Xml.XmlDocument document, string idValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlElement GetIdElement(class System.Xml.XmlDocument document, string idValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.GetIdElement(System.Xml.XmlDocument,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIdElement (document As XmlDocument, idValue As String) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlElement ^ GetIdElement(System::Xml::XmlDocument ^ document, System::String ^ idValue);" />
      <MemberSignature Language="F#" Value="abstract member GetIdElement : System.Xml.XmlDocument * string -&gt; System.Xml.XmlElement&#xA;override this.GetIdElement : System.Xml.XmlDocument * string -&gt; System.Xml.XmlElement" Usage="signedXml.GetIdElement (document, idValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Xml.XmlDocument" />
        <Parameter Name="idValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="document"><see cref="T:System.Xml.XmlDocument" /> Obiektu do pobrania <see cref="T:System.Xml.XmlElement" /> obiektu z.</param>
        <param name="idValue">Identyfikator <see cref="T:System.Xml.XmlElement" /> obiektu do pobrania z <see cref="T:System.Xml.XmlDocument" /> obiektu.</param>
        <summary>Zwraca <see cref="T:System.Xml.XmlElement" /> obiektu o określonym identyfikatorze z określonego <see cref="T:System.Xml.XmlDocument" /> obiektu.</summary>
        <returns><see cref="T:System.Xml.XmlElement" /> Obiektu o określonym identyfikatorze z określonego <see cref="T:System.Xml.XmlDocument" /> obiektu lub <see langword="null" /> Jeśli nie można go odnaleźć.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPublicKey">
      <MemberSignature Language="C#" Value="protected virtual System.Security.Cryptography.AsymmetricAlgorithm GetPublicKey ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Security.Cryptography.AsymmetricAlgorithm GetPublicKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.GetPublicKey" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetPublicKey () As AsymmetricAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Security::Cryptography::AsymmetricAlgorithm ^ GetPublicKey();" />
      <MemberSignature Language="F#" Value="abstract member GetPublicKey : unit -&gt; System.Security.Cryptography.AsymmetricAlgorithm&#xA;override this.GetPublicKey : unit -&gt; System.Security.Cryptography.AsymmetricAlgorithm" Usage="signedXml.GetPublicKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.AsymmetricAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca klucz publiczny podpisu.</summary>
        <returns><see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> Obiekt, który zawiera klucz publiczny podpisu, lub <see langword="null" /> Jeśli nie można odnaleźć klucza.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.GetPublicKey%2A> Metoda zwraca <xref:System.Security.Cryptography.AsymmetricAlgorithm> obiekt, który zawiera klucz publiczny, który może służyć do sprawdzenie podpisu cyfrowego XML.  
  
 Klucz musi być albo <xref:System.Security.Cryptography.DSA> lub <xref:System.Security.Cryptography.RSA> klucza.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><see cref="P:System.Security.Cryptography.Xml.SignedXml.KeyInfo" /> Właściwość <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetXml">
      <MemberSignature Language="C#" Value="public System.Xml.XmlElement GetXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlElement GetXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.GetXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXml () As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlElement ^ GetXml();" />
      <MemberSignature Language="F#" Value="member this.GetXml : unit -&gt; System.Xml.XmlElement" Usage="signedXml.GetXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca reprezentację XML <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <returns>Reprezentacja XML <see cref="T:System.Security.Cryptography.Xml.Signature" /> obiektu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><see cref="P:System.Security.Cryptography.Xml.SignedXml.SignedInfo" /> Właściwość <see langword="null" />.  
  
—lub— 
<see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureValue" /> Właściwość <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="KeyInfo">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.KeyInfo KeyInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.KeyInfo KeyInfo" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.KeyInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyInfo As KeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::KeyInfo ^ KeyInfo { System::Security::Cryptography::Xml::KeyInfo ^ get(); void set(System::Security::Cryptography::Xml::KeyInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.KeyInfo : System.Security.Cryptography.Xml.KeyInfo with get, set" Usage="System.Security.Cryptography.Xml.SignedXml.KeyInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.KeyInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> obiektu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <value><see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> Obiektu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A> Reprezentuje właściwość `<KeyInfo>` podpis cyfrowy XML przy użyciu elementu <xref:System.Security.Cryptography.Xml.KeyInfo> obiektów znajdujących się w ramach właściwości.  `<KeyInfo>` Element jest podelement `<Signature>` elementu.  
  
 Użyj <xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A> właściwości, aby osadzić informacje związane z kluczem mają na celu ułatwienie identyfikacji klucza, które są wymagane do weryfikacji dokumentu XML.  
  
 Aby uzyskać więcej informacji na temat `<KeyInfo>` elementu, zobacz [specyfikacji XMLDSIG](https://www.w3.org/TR/xmldsig-core/).  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Security.Cryptography.Xml.KeyInfo> obiektu podczas logowania się do zasobu, reprezentowane przez uniwersalny identyfikator (URI).  Ten przykład zapisuje podpis w nowym pliku.  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CPP/xmldsigdetach.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CS/xmldsigdetach.cs#1)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/VB/xmldsigdetach.vb#1)]  
  
 Poniższy przykład kodu wykorzystuje <xref:System.Security.Cryptography.Xml.KeyInfo> obiektu podczas rejestrowania się w dokumencie XML.  Ten przykład zapisuje podpis w nowym pliku.  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/CPP/xmldsigenv.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/CS/xmldsigenv.cs#1)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/VB/xmldsigenv.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadXml">
      <MemberSignature Language="C#" Value="public void LoadXml (System.Xml.XmlElement value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadXml(class System.Xml.XmlElement value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.LoadXml(System.Xml.XmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadXml (value As XmlElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadXml(System::Xml::XmlElement ^ value);" />
      <MemberSignature Language="F#" Value="member this.LoadXml : System.Xml.XmlElement -&gt; unit" Usage="signedXml.LoadXml value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Xml.XmlElement" />
      </Parameters>
      <Docs>
        <param name="value">Element XML do załadowania <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> stanu z.</param>
        <summary>Ładunki <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> stanu z elementu XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Security.Cryptography.Xml.SignedXml.LoadXml%2A> metodę, aby sprawdzić dokumentu XML.  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CPP/xmldsigdetach.cpp#3)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigDetached#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CS/xmldsigdetach.cs#3)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/VB/xmldsigdetach.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> Parametr <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="value" /> Parametr nie zawiera prawidłowego <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureValue" /> właściwości.  
  
—lub— 
<paramref name="value" /> Parametr nie zawiera prawidłowego <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignedInfo" /> właściwości.</exception>
      </Docs>
    </Member>
    <Member MemberName="m_signature">
      <MemberSignature Language="C#" Value="protected System.Security.Cryptography.Xml.Signature m_signature;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Security.Cryptography.Xml.Signature m_signature" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.m_signature" />
      <MemberSignature Language="VB.NET" Value="Protected m_signature As Signature " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Security::Cryptography::Xml::Signature ^ m_signature;" />
      <MemberSignature Language="F#" Value="val mutable m_signature : System.Security.Cryptography.Xml.Signature" Usage="System.Security.Cryptography.Xml.SignedXml.m_signature" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.Signature</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje <see cref="T:System.Security.Cryptography.Xml.Signature" /> obiektu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_strSigningKeyName">
      <MemberSignature Language="C#" Value="protected string m_strSigningKeyName;" />
      <MemberSignature Language="ILAsm" Value=".field family string m_strSigningKeyName" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.m_strSigningKeyName" />
      <MemberSignature Language="VB.NET" Value="Protected m_strSigningKeyName As String " />
      <MemberSignature Language="C++ CLI" Value="protected: System::String ^ m_strSigningKeyName;" />
      <MemberSignature Language="F#" Value="val mutable m_strSigningKeyName : string" Usage="System.Security.Cryptography.Xml.SignedXml.m_strSigningKeyName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje nazwę zainstalowany klucz służący do podpisywania <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver Resolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver Resolver" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.Resolver" />
      <MemberSignature Language="VB.NET" Value="Public Property Resolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ Resolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resolver : System.Xml.XmlResolver" Usage="System.Security.Cryptography.Xml.SignedXml.Resolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ustawia bieżący <see cref="T:System.Xml.XmlResolver" /> obiektu.</summary>
        <value>Bieżący <see cref="T:System.Xml.XmlResolver" /> obiektu. Wartości domyślne to <see cref="T:System.Xml.XmlSecureResolver" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver> Klasy jest rozpoznawana jako zasoby zewnętrzne XML o nazwie przez jednolite zasobów identyfikator (URI). Jeśli nie ufasz źródłu pliku XML, możesz nie chcieć zezwala na dostęp do zasobów na komputerze o nazwie określonej przez identyfikator URI pliku XML. Możesz użyć <xref:System.Security.Cryptography.Xml.SignedXml.Resolver%2A> właściwości, aby sterować poziomem dostęp pliki XML do zasobów na komputerze, określając inną <xref:System.Xml.XmlResolver> obiektów. Jeśli nie chcesz zezwolić na dostęp do wszystkich, można ustawić tę właściwość `null` (`Nothing` w języku Visual Basic).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SafeCanonicalizationMethods">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; SafeCanonicalizationMethods { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; SafeCanonicalizationMethods" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SafeCanonicalizationMethods As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ SafeCanonicalizationMethods { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SafeCanonicalizationMethods : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwy metody, w której algorytmy canonicalization są jawnie dozwolone.</summary>
        <value>Kolekcja nazw metod, które tworzą bezpiecznie canonical XML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Canonicalization konwertują dokumentu XML do postaci kanonicznej. Aby uzyskać więcej informacji o canonical XML, zobacz [Canonical XML](https://www.w3.org/TR/xml-c14n) w witrynie internetowej W3C.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Signature">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.Signature Signature { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.Signature Signature" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.Signature" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Signature As Signature" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::Signature ^ Signature { System::Security::Cryptography::Xml::Signature ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Signature : System.Security.Cryptography.Xml.Signature" Usage="System.Security.Cryptography.Xml.SignedXml.Signature" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.Signature</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Security.Cryptography.Xml.Signature" /> obiektu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <value><see cref="T:System.Security.Cryptography.Xml.Signature" /> Obiektu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A> Reprezentuje właściwość `<Signature>` podpis cyfrowy XML przy użyciu elementu <xref:System.Security.Cryptography.Xml.Signature> obiektów znajdujących się w ramach właściwości.  `<Signature>` Element jest elementem główny używany do tworzenia podpisu cyfrowego XML i weryfikacji.  
  
 Użyj <xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A> właściwość służąca do pobierania <xref:System.Security.Cryptography.Xml.Signature> obiekt używany przez <xref:System.Security.Cryptography.Xml.SignedXml> obiektu.  
  
 Aby uzyskać więcej informacji na temat `<Signature>` elementu, zobacz [specyfikacji XMLDSIG](https://www.w3.org/TR/xmldsig-core/).
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A> właściwość zalogowania się i sprawdź całego dokumentu XML przy użyciu przekształcenie podpisu.  
  
 [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/VB/sample.vb#1)]  
  
 Poniższy przykład kodu wykorzystuje <xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A> właściwość zalogowania się i sprawdź obiekt adresowalnych identyfikator (URI) przy użyciu podpisu odłączony.  
  
 [!code-cpp[XMLDSIG - Signature - Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CPP/sample.cpp#1)]
 [!code-csharp[XMLDSIG - Signature - Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CS/sample.cs#1)]
 [!code-vb[XMLDSIG - Signature - Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/XMLDSIG - Signature - Detached/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureFormatValidator">
      <MemberSignature Language="C#" Value="public Func&lt;System.Security.Cryptography.Xml.SignedXml,bool&gt; SignatureFormatValidator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class System.Security.Cryptography.Xml.SignedXml, bool&gt; SignatureFormatValidator" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator" />
      <MemberSignature Language="VB.NET" Value="Public Property SignatureFormatValidator As Func(Of SignedXml, Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Func&lt;System::Security::Cryptography::Xml::SignedXml ^, bool&gt; ^ SignatureFormatValidator { Func&lt;System::Security::Cryptography::Xml::SignedXml ^, bool&gt; ^ get(); void set(Func&lt;System::Security::Cryptography::Xml::SignedXml ^, bool&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SignatureFormatValidator : Func&lt;System.Security.Cryptography.Xml.SignedXml, bool&gt; with get, set" Usage="System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Security.Cryptography.Xml.SignedXml,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera metodę delegowaną, która zostanie wywołana w celu sprawdzania poprawności formatu podpisu XML (nie kryptograficznych zabezpieczeń).</summary>
        <value><see langword="true" /> Jeśli format jest dopuszczalne; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może służyć do upewnij się, że tylko niektórych przekształceń, które są używane lub że podpis używa pewnych algorytmu wyznaczania wartości skrótu i tak dalej.  
  
 Ustawienie właściwości `null` spowoduje usunięcie wszystkich sprawdzanie poprawności formatu podpisu z <xref:System.Security.Cryptography.Xml.SignedXml> obiektu.  
  
 Jeśli chcesz, można odczytać bieżącej delegata i łańcuch do niej obiektu.  
  
 Jeśli konfigurujesz moduł weryfikacji formatu delegata podasz, zostanie wyświetlony jako parametr wejściowy <xref:System.Security.Cryptography.Xml.SignedXml> obiektu weryfikowana i zwraca wartość typu Boolean - `true` Jeśli format jest dopuszczalna, `false` Jeśli tak nie jest. Jeśli delegat zwraca `false` z jakiegokolwiek powodu, <xref:System.Security.Cryptography.Xml.SignedXml> obiektu zgłosi, że podpis XML jest nieprawidłowy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureLength">
      <MemberSignature Language="C#" Value="public string SignatureLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignatureLength" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignatureLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignatureLength As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SignatureLength { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SignatureLength : string" Usage="System.Security.Cryptography.Xml.SignedXml.SignatureLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera długość podpisu dla bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <value>Długość podpisu dla bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureMethod">
      <MemberSignature Language="C#" Value="public string SignatureMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignatureMethod" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignatureMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SignatureMethod { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SignatureMethod : string" Usage="System.Security.Cryptography.Xml.SignedXml.SignatureMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera metodę podpisu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <value>Metoda podpisu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.SignatureMethod%2A> Reprezentuje właściwość `<SignatureMethod>` elementu podpis cyfrowy XML za pomocą ciągu identyfikatora URI (Uniform Resource) zawartych w właściwości. `<SignatureMethod>` Element jest podelement `<SignedInfo>` elementu.  
  
 Użyj <xref:System.Security.Cryptography.Xml.SignedXml.SignatureMethod%2A> właściwość służąca do pobierania `<SignatureMethod>` identyfikator URI używany przez <xref:System.Security.Cryptography.Xml.SignedXml> obiektu. Ta właściwość jest tylko do odczytu. Aby uzyskać więcej informacji na temat programowego określania identyfikatora URI dla `<SignatureMethod>` elementu, zobacz <xref:System.Security.Cryptography.Xml.SignedInfo.SignatureMethod%2A> właściwości.  
  
 Aby uzyskać więcej informacji na temat `<SignatureMethod>` elementu, zobacz [specyfikacji XMLDSIG](https://www.w3.org/TR/xmldsig-core/).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureValue">
      <MemberSignature Language="C#" Value="public byte[] SignatureValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SignatureValue" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignatureValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignatureValue As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SignatureValue { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SignatureValue : byte[]" Usage="System.Security.Cryptography.Xml.SignedXml.SignatureValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość podpisu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <value>Tablica bajtów, która zawiera wartość podpisu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.SignatureValue%2A> Reprezentuje właściwość `<SignatureValue>` elementu podpis cyfrowy XML przy użyciu tablicy bajtów zawartych w właściwości.  `<SignatureValue>` Element jest podelement `<Signature>` elementu.  
  
 Użyj <xref:System.Security.Cryptography.Xml.SignedXml.SignatureValue%2A> właściwość służąca do pobierania wartości podpis cyfrowy XML.  Ta właściwość jest wypełniane automatycznie po wprowadzeniu pomyślnego <xref:System.Security.Cryptography.Xml.SignedXml.ComputeSignature%2A> metody.  
  
 Aby uzyskać więcej informacji na temat `<SignatureValue>` elementu, zobacz [specyfikacji XMLDSIG](https://www.w3.org/TR/xmldsig-core/).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignedInfo">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.SignedInfo SignedInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.SignedInfo SignedInfo" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignedInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignedInfo As SignedInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::SignedInfo ^ SignedInfo { System::Security::Cryptography::Xml::SignedInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SignedInfo : System.Security.Cryptography.Xml.SignedInfo" Usage="System.Security.Cryptography.Xml.SignedXml.SignedInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.SignedInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> obiektu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <value><see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> Obiektu bieżącego <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.SignedInfo%2A> Reprezentuje właściwość `<SignedInfo>` elementu podpis cyfrowy XML przy użyciu tablicy bajtów zawartych w właściwości.  `<SignedInfo>` Element jest podelement `<Signature>` elementu.  
  
 Użyj <xref:System.Security.Cryptography.Xml.SignedXml.SignedInfo%2A> właściwość służąca do pobierania <xref:System.Security.Cryptography.Xml.SignedInfo> obiekt, który jest używany przez <xref:System.Security.Cryptography.Xml.SignedXml> obiekt, aby utworzyć podpis cyfrowy XML.  
  
 Aby uzyskać więcej informacji na temat `<SignedInfo>` elementu, zobacz [specyfikacji XMLDSIG](https://www.w3.org/TR/xmldsig-core/).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigningKey">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.AsymmetricAlgorithm SigningKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.AsymmetricAlgorithm SigningKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SigningKey" />
      <MemberSignature Language="VB.NET" Value="Public Property SigningKey As AsymmetricAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::AsymmetricAlgorithm ^ SigningKey { System::Security::Cryptography::AsymmetricAlgorithm ^ get(); void set(System::Security::Cryptography::AsymmetricAlgorithm ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SigningKey : System.Security.Cryptography.AsymmetricAlgorithm with get, set" Usage="System.Security.Cryptography.Xml.SignedXml.SigningKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.AsymmetricAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia klucz algorytmu asymetrycznego użytego do podpisania <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <value>Klucz algorytmu asymetrycznego, używany do podpisywania <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Security.Cryptography.Xml.SignedXml.SigningKey%2A> właściwości w celu określenia klucza asymetrycznego, użytkownik ma być używany do tworzenia podpisu cyfrowego XML.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować całego dokumentu XML przy użyciu przekształcenie podpisu.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/VB/exampleenvelope.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować obiekt adresowalnych identyfikator (URI) przy użyciu podpisu odłączony.  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CPP/exampledetached.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CS/exampledetached.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/VB/exampledetached.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak zarejestrować oraz zweryfikować pojedynczy element dokumentu XML przy użyciu podpisu obejmujących punkty kontrolne.  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigningKeyName">
      <MemberSignature Language="C#" Value="public string SigningKeyName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SigningKeyName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SigningKeyName" />
      <MemberSignature Language="VB.NET" Value="Public Property SigningKeyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SigningKeyName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SigningKeyName : string with get, set" Usage="System.Security.Cryptography.Xml.SignedXml.SigningKeyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę zainstalowany klucz służący do podpisywania <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</summary>
        <value>Nazwa zainstalowany klucz służący do podpisywania <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> obiektu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDecryptionTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDecryptionTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDecryptionTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDecryptionTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDecryptionTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDecryptionTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) dla transformacji deszyfrowania tryb XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl> pole jest <http://www.w3.org/2002/07/decrypt#XML>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz [Specyfikacja konsorcjum World Wide Web Consortium (W3C)](https://www.w3.org/2002/07/decrypt#XML).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigBase64TransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigBase64TransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigBase64TransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigBase64TransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigBase64TransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigBase64TransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator (URI) dla podstawowej transformacji 64. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl> pole jest <http://www.w3.org/2000/09/xmldsig#base64>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigBase64Transform> Klasa implementuje przekształcenie opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz [schematu World Wide Web Consortium (W3C)](https://www.w3.org/2000/09/xmldsig#base64).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia elementów członkowskich <xref:System.Security.Cryptography.Xml.XmlDsigBase64Transform> klasy.  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigBase64Transform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigBase64Transform/CPP/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigBase64Transform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigBase64Transform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigBase64Transform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigBase64Transform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigC14NTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigC14NTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigC14NTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigC14NTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigC14NTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigC14NTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) dla przekształcenie kanonicznym XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl> pole jest <http://www.w3.org/TR/2001/REC-xml-c14n-20010315>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform> Klasa implementuje przekształcenie opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz World Wide Web Consortium (W3C) [Canonical XML](https://www.w3.org/TR/2001/REC-xml-c14n-20010315) specyfikacji.  
  
 To pole ma taką samą wartość jak <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl> pola.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywołania elementów członkowskich <xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform> klasy.  
  
 [!code-cpp[System.Security.Cryptography.XML.XMLDsigC14NTransform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigC14NTransform/CPP/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.XML.XMLDsigC14NTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigC14NTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.XML.XMLDsigC14NTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigC14NTransform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigC14NWithCommentsTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigC14NWithCommentsTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigC14NWithCommentsTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigC14NWithCommentsTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigC14NWithCommentsTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigC14NWithCommentsTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) dla przekształcenie kanonicznym XML, z komentarzami. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl> pole jest <http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform> Klasa implementuje przekształcenie opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz World Wide Web Consortium (W3C) [Canonical XML](https://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments) specyfikacji.  
  
 To pole ma taką samą wartość jak <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl> pola.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigCanonicalizationUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigCanonicalizationUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigCanonicalizationUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigCanonicalizationUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigCanonicalizationUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigCanonicalizationUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator (URI) dla algorytmu standardowego canonicalization dla podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl> pole jest <http://www.w3.org/TR/2001/REC-xml-c14n-20010315>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform> Klasa implementuje przekształcenie opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz World Wide Web Consortium (W3C) [Canonical XML](https://www.w3.org/TR/2001/REC-xml-c14n-20010315) specyfikacji.  
  
 To pole ma taką samą wartość jak <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl> pola.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigCanonicalizationWithCommentsUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigCanonicalizationWithCommentsUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigCanonicalizationWithCommentsUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigCanonicalizationWithCommentsUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigCanonicalizationWithCommentsUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigCanonicalizationWithCommentsUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator (URI) dla algorytmu standardowego canonicalization dla podpisy cyfrowe XML i zawiera komentarze. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl> pole jest <http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform> Klasa implementuje przekształcenie opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz World Wide Web Consortium (W3C) [Canonical XML](https://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments) specyfikacji.  
  
 To pole ma taką samą wartość jak <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl> pola.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigDSAUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigDSAUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigDSAUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigDSAUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigDSAUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigDSAUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) standardu <see cref="T:System.Security.Cryptography.DSA" /> algorytm podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl> pole jest <http://www.w3.org/2000/09/xmldsig#dsa-sha1>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz [schematu World Wide Web Consortium (W3C)](https://www.w3.org/2000/09/xmldsig#dsa-sha1).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigEnvelopedSignatureTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigEnvelopedSignatureTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigEnvelopedSignatureTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigEnvelopedSignatureTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigEnvelopedSignatureTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigEnvelopedSignatureTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator (URI) dla transformacji przekształcenie podpisu. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl> pole jest <http://www.w3.org/2000/09/xmldsig#enveloped-signature>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform> Klasa implementuje przekształcenie opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz [schematu World Wide Web Consortium (W3C)](https://www.w3.org/2000/09/xmldsig#enveloped-signature).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia elementów członkowskich <xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform> klasy.  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform/cpp/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigExcC14NTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigExcC14NTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigExcC14NTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigExcC14NTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigExcC14NTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigExcC14NTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator (URI) dla wyłącznej canonicalization XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl> pole jest <http://www.w3.org/2001/10/xml-exc-c14n#>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform> Klasa implementuje przekształcenie opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz [Specyfikacja konsorcjum World Wide Web Consortium (W3C)](https://www.w3.org/2001/10/xml-exc-c14n).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje jak utworzyć i sprawdzić, dokumentów XML za pomocą <xref:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform> klasy.  Ten przykład umożliwia utworzenie koperty podpisu.  
  
 [!code-cpp[Cryptography.Xml.XmlDsigExcC14NTransform#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NTransform/CPP/example.cpp#1)]
 [!code-csharp[Cryptography.Xml.XmlDsigExcC14NTransform#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NTransform/CS/example.cs#1)]
 [!code-vb[Cryptography.Xml.XmlDsigExcC14NTransform#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NTransform/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigExcC14NWithCommentsTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigExcC14NWithCommentsTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigExcC14NWithCommentsTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigExcC14NWithCommentsTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigExcC14NWithCommentsTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigExcC14NWithCommentsTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator (URI) dla wyłącznej canonicalization XML, z komentarzami. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl> pole jest <http://www.w3.org/2001/10/xml-exc-c14n#WithComments>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform> Klasa implementuje przekształcenie opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz [Specyfikacja konsorcjum World Wide Web Consortium (W3C)](https://www.w3.org/2001/10/xml-exc-c14n#WithComments).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje jak utworzyć i sprawdzić, dokumentów XML za pomocą <xref:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform> klasy.  Ten przykład umożliwia utworzenie koperty podpisu.  
  
 [!code-cpp[Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NWithCommentsTransform/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NWithCommentsTransform/CS/sample.cs#1)]
 [!code-vb[Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NWithCommentsTransform/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigHMACSHA1Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigHMACSHA1Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigHMACSHA1Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigHMACSHA1Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigHMACSHA1Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigHMACSHA1Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) standardu <see cref="T:System.Security.Cryptography.HMACSHA1" /> algorytm podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url> pole jest <http://www.w3.org/2000/09/xmldsig#hmac-sha1>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz [Specyfikacja konsorcjum World Wide Web Consortium (W3C)](https://www.w3.org/2000/09/xmldsig#hmac-sha1).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigMinimalCanonicalizationUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigMinimalCanonicalizationUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigMinimalCanonicalizationUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigMinimalCanonicalizationUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigMinimalCanonicalizationUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigMinimalCanonicalizationUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator (URI) dla algorytmu standardowego canonicalization minimalny dla podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl> pole jest <http://www.w3.org/2000/09/xmldsig#minimal>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz [Specyfikacja konsorcjum World Wide Web Consortium (W3C)](https://www.w3.org/2000/09/xmldsig#minimal).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigNamespaceUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigNamespaceUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigNamespaceUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigNamespaceUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigNamespaceUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigNamespaceUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator (URI) dla standardowych przestrzeni nazw XML podpisów cyfrowych. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl> pole jest <http://www.w3.org/2000/09/xmldsig#>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz [schematu World Wide Web Consortium (W3C)](https://www.w3.org/2000/09/xmldsig).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigRSASHA1Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigRSASHA1Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigRSASHA1Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigRSASHA1Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigRSASHA1Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigRSASHA1Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) standardu <see cref="T:System.Security.Cryptography.RSA" /> podpis metody podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url> pole jest <http://www.w3.org/2000/09/xmldsig#rsa-sha1>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz [schematu World Wide Web Consortium (W3C)](https://www.w3.org/2000/09/xmldsig#rsa-sha1).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigRSASHA256Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigRSASHA256Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigRSASHA256Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigRSASHA256Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigRSASHA256Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigRSASHA256Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) dla <see cref="T:System.Security.Cryptography.RSA" /> algorytmu SHA-256 podpis metody odmiany dla podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url> pole jest <http://www.w3.org/2001/04/xmldsig-more#rsa-sha256>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz [Specyfikacja konsorcjum World Wide Web Consortium (W3C)](https://www.w3.org/2001/04/xmldsig-more#rsa-sha256).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigRSASHA384Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigRSASHA384Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigRSASHA384Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigRSASHA384Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigRSASHA384Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigRSASHA384Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) dla <see cref="T:System.Security.Cryptography.RSA" /> algorytmu SHA-384 podpis metody odmiany dla podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url> pole jest <http://www.w3.org/2001/04/xmldsig-more#rsa-sha384>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz [Specyfikacja konsorcjum World Wide Web Consortium (W3C)](https://www.w3.org/2001/04/xmldsig-more#rsa-sha384).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigRSASHA512Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigRSASHA512Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigRSASHA512Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigRSASHA512Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigRSASHA512Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigRSASHA512Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) dla <see cref="T:System.Security.Cryptography.RSA" /> SHA-512 podpis metody odmiany dla podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url> pole jest <http://www.w3.org/2001/04/xmldsig-more#rsa-sha512>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz [Specyfikacja konsorcjum World Wide Web Consortium (W3C)](https://www.w3.org/2001/04/xmldsig-more#rsa-sha512).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigSHA1Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigSHA1Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigSHA1Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigSHA1Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigSHA1Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigSHA1Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) standardu <see cref="T:System.Security.Cryptography.SHA1" /> szyfrowane metodę podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url> pole jest <http://www.w3.org/2000/09/xmldsig#sha1>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz [schematu World Wide Web Consortium (W3C)](https://www.w3.org/2000/09/xmldsig#sha1).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigSHA256Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigSHA256Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigSHA256Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigSHA256Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigSHA256Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigSHA256Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) standardu <see cref="T:System.Security.Cryptography.SHA256" /> szyfrowane metodę podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url> pole jest <http://www.w3.org/2001/04/xmlenc#sha256>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz [Specyfikacja konsorcjum World Wide Web Consortium (W3C)](https://www.w3.org/2001/04/xmlenc#sha256).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigSHA384Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigSHA384Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigSHA384Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigSHA384Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigSHA384Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigSHA384Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) standardu <see cref="T:System.Security.Cryptography.SHA384" /> szyfrowane metodę podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url> pole jest <http://www.w3.org/2001/04/xmldsig-more#sha384>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz [Specyfikacja konsorcjum World Wide Web Consortium (W3C)](https://www.w3.org/2001/04/xmldsig-more#sha384).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigSHA512Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigSHA512Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigSHA512Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigSHA512Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigSHA512Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigSHA512Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) standardu <see cref="T:System.Security.Cryptography.SHA512" /> szyfrowane metodę podpisy cyfrowe XML. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url> pole jest <http://www.w3.org/2001/04/xmlenc#sha512>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 Aby uzyskać więcej informacji, zobacz [Specyfikacja konsorcjum World Wide Web Consortium (W3C)](https://www.w3.org/2001/04/xmlenc#sha512).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigXPathTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigXPathTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigXPathTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigXPathTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigXPathTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigXPathTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikatora Uniform Resource Identifier (URI) dla języka ścieżki XML (XPath). To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl> pole jest <http://www.w3.org/TR/1999/REC-xpath-19991116>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigXPathTransform> Klasa implementuje przekształcenie opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz [Specyfikacja konsorcjum World Wide Web Consortium (W3C)](https://www.w3.org/TR/1999/REC-xpath-19991116).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywołania elementów członkowskich <xref:System.Security.Cryptography.Xml.XmlDsigXPathTransform> klasy.  
  
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigXPathTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXPathTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigXPathTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXPathTransform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigXsltTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigXsltTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigXsltTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigXsltTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigXsltTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigXsltTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje jednolity identyfikator zasobów (URI) dla przekształceń XSLT. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl> pole jest <http://www.w3.org/TR/1999/REC-xslt-19991116>.  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> Klasa implementuje przekształcenie opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl> pola.  
  
 Aby uzyskać więcej informacji, zobacz [Specyfikacja konsorcjum World Wide Web Consortium (W3C)](https://www.w3.org/TR/1999/REC-xslt-19991116).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia elementów członkowskich <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> klasy.  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CPP/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlLicenseTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlLicenseTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlLicenseTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlLicenseTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlLicenseTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlLicenseTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje identyfikator (URI) dla licencji przekształcenie algorytm normalizacji XrML licencji dla podpisów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl> pole jest "urn: mpeg:mpeg21:2003:01-REL-R-NS:licenseTransform"  
  
 Użyj tego pola, wygodnie podania wartości na jeden z atrybutów identyfikatora URI używany do XMLDSIG elementu.  
  
 <xref:System.Security.Cryptography.Xml.XmlLicenseTransform> Klasa implementuje przekształcenie opisanego przez <xref:System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl> pola.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>