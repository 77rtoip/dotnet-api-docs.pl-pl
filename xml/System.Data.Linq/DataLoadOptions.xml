<Type Name="DataLoadOptions" FullName="System.Data.Linq.DataLoadOptions">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="96d0a9b25df23c8e50f076be3f0b33ceaf0820c2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DataLoadOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataLoadOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.DataLoadOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataLoadOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataLoadOptions sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="70052-101">Umożliwia natychmiastowe ładowania oraz filtrowanie powiązanych danych.</span>
      <span class="sxs-lookup">
        <span data-stu-id="70052-101">Provides for immediate loading and filtering of related data.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="general"></a><span data-ttu-id="70052-102">Ogólne</span><span class="sxs-lookup"><span data-stu-id="70052-102">General</span></span>  
 <span data-ttu-id="70052-103">Określona w zapytaniu dla obiekt faktycznie pobrać tylko żądanego obiektu.</span><span class="sxs-lookup"><span data-stu-id="70052-103">When you query for an object, you actually retrieve only the object you requested.</span></span> <span data-ttu-id="70052-104">*Powiązane* obiekty nie są automatycznie dołączone w tym samym czasie.</span><span class="sxs-lookup"><span data-stu-id="70052-104">The *related* objects are not automatically fetched at the same time.</span></span> <span data-ttu-id="70052-105">(Aby uzyskać więcej informacji, zobacz [zapytań w relacji](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md).)</span><span class="sxs-lookup"><span data-stu-id="70052-105">(For more information, see [Querying Across Relationships](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md).)</span></span>  
  
 <span data-ttu-id="70052-106"><xref:System.Data.Linq.DataLoadOptions> Klasa udostępnia dwie metody uzyskania bezpośredniego ładowania określonego powiązanych danych.</span><span class="sxs-lookup"><span data-stu-id="70052-106">The <xref:System.Data.Linq.DataLoadOptions> class provides two methods to achieve immediate loading of specified related data.</span></span> <span data-ttu-id="70052-107"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> Metoda umożliwia natychmiastowe ładowania danych dotyczących do głównego celu.</span><span class="sxs-lookup"><span data-stu-id="70052-107">The <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> method allows for immediate loading of data related to the main target.</span></span> <span data-ttu-id="70052-108"><xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> Metoda pozwala na filtrowanie powiązanych obiektów.</span><span class="sxs-lookup"><span data-stu-id="70052-108">The <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> method allows for filtering related objects.</span></span>  
  
## <a name="rules"></a><span data-ttu-id="70052-109">Reguły</span><span class="sxs-lookup"><span data-stu-id="70052-109">Rules</span></span>  
 <span data-ttu-id="70052-110">Należy zauważyć następujące reguły dotyczące <xref:System.Data.Linq.DataLoadOptions> użycia:</span><span class="sxs-lookup"><span data-stu-id="70052-110">Note the following rules regarding <xref:System.Data.Linq.DataLoadOptions> usage:</span></span>  
  
-   <span data-ttu-id="70052-111">Przypisywanie <xref:System.Data.Linq.DataLoadOptions> do <xref:System.Data.Linq.DataContext> po wykonaniu pierwszej kwerendy generuje wyjątek.</span><span class="sxs-lookup"><span data-stu-id="70052-111">Assigning a <xref:System.Data.Linq.DataLoadOptions> to a <xref:System.Data.Linq.DataContext> after the first query has been executed generates an exception.</span></span>  
  
-   <span data-ttu-id="70052-112">Modyfikowanie <xref:System.Data.Linq.DataLoadOptions> po przypisaniu do <xref:System.Data.Linq.DataContext> generuje wyjątek</span><span class="sxs-lookup"><span data-stu-id="70052-112">Modifying a <xref:System.Data.Linq.DataLoadOptions> after it has been assigned to a <xref:System.Data.Linq.DataContext> generates an exception</span></span>  
  
## <a name="cycle-handling"></a><span data-ttu-id="70052-113">Obsługa cyklu</span><span class="sxs-lookup"><span data-stu-id="70052-113">Cycle Handling</span></span>  
 <span data-ttu-id="70052-114"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> i <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> dyrektywy nie musi tworzyć cykle.</span><span class="sxs-lookup"><span data-stu-id="70052-114"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> and <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> directives must not create cycles.</span></span> <span data-ttu-id="70052-115">Następujące reprezentują przykłady takich wykresów:</span><span class="sxs-lookup"><span data-stu-id="70052-115">The following represent examples of such graphs:</span></span>  
  
-   <span data-ttu-id="70052-116">Przykład 1: Self cykliczne</span><span class="sxs-lookup"><span data-stu-id="70052-116">Example 1: Self recursive</span></span>  
  
    -   `dlo.LoadWith<Employee>(e => e.Reports);`  
  
-   <span data-ttu-id="70052-117">Przykład 2: Back wskaźników</span><span class="sxs-lookup"><span data-stu-id="70052-117">Example 2: Back-pointers</span></span>  
  
    -   `dlo.LoadWith <Customer>(c => C.Orders);`  
  
    -   `dlo.LoadWith <Order>(o => o.Customer);`  
  
-   <span data-ttu-id="70052-118">Przykład 3: Dłużej cykli</span><span class="sxs-lookup"><span data-stu-id="70052-118">Example 3: Longer cycles</span></span>  
  
     <span data-ttu-id="70052-119">Mimo że nie powinno to nastąpić w dobrze znormalizowane modelu, jest możliwe.</span><span class="sxs-lookup"><span data-stu-id="70052-119">Although this should not occur in a well-normalized model, it is possible.</span></span>  
  
    -   `dlo.LoadWith <A>(a => a.Bs);`  
  
    -   `dlo.LoadWith <B>(b => b.Cs);`  
  
    -   `dlo.LoadWith <C>(c => c.As);`  
  
-   <span data-ttu-id="70052-120">Przykład 4: Self podzapytania cykliczne</span><span class="sxs-lookup"><span data-stu-id="70052-120">Example 4: Self recursive subQueries</span></span>  
  
    -   `dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));`  
  
-   <span data-ttu-id="70052-121">Przykład 5: Dłużej podzapytania cykliczne</span><span class="sxs-lookup"><span data-stu-id="70052-121">Example 5: Longer recursive subqueries</span></span>  
  
    -   `dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`  
  
    -   `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));`  
  
 <span data-ttu-id="70052-122">Poniżej przedstawiono niektóre reguły ogólne, które ułatwiają zrozumienie zdarzenia występujące w tych scenariuszach.</span><span class="sxs-lookup"><span data-stu-id="70052-122">The following are some general rules that help you understand what occurs in these scenarios.</span></span>  
  
 <span data-ttu-id="70052-123">**Operacja LoadWith** każde wywołanie <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> sprawdza, czy cykle zostały wprowadzone do wykresu.</span><span class="sxs-lookup"><span data-stu-id="70052-123">**LoadWith** Each call to <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> checks whether cycles have been introduced into the graph.</span></span> <span data-ttu-id="70052-124">Jeśli, jak w przykładach 1, 2 i 3, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="70052-124">If there are, as in Examples 1, 2, and 3, an exception is thrown.</span></span>  
  
 <span data-ttu-id="70052-125">**AssociateWith** aparatu w czasie wykonywania nie dotyczą istniejących klauzule podzapytania relacji wewnątrz wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="70052-125">**AssociateWith** The engine at run time does not apply the existing SubQuery clauses to the relationship inside the expression.</span></span>  
  
-   <span data-ttu-id="70052-126">Na przykład 4 `Where` klauzuli jest wykonywane względem wszystkich `A`, nie tylko te podrzędna filtrowane według wyrażenia podzapytania (ponieważ może to być cykliczne)</span><span class="sxs-lookup"><span data-stu-id="70052-126">In Example 4, the `Where` clause is executed against all `A`, not just the ones sub-filtered by the SubQuery expression itself (because that would be recursive)</span></span>  
  
-   <span data-ttu-id="70052-127">W przykładzie 5 pierwszy `Where` klauzuli jest stosowane do wszystkich `B`s, nawet wtedy, gdy istnieją podzapytania na `B`.</span><span class="sxs-lookup"><span data-stu-id="70052-127">In Example 5, the first `Where` clause is applied to all the `B`s, even though there are subqueries on `B`.</span></span> <span data-ttu-id="70052-128">Drugi `Where` klauzuli jest stosowane do wszystkich `A`podzapytania s nawet wtedy, gdy istnieją na `A`.</span><span class="sxs-lookup"><span data-stu-id="70052-128">The second `Where` clause is applied to all the `A`s even though there are subqueries on `A`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70052-129">Po pobraniu `Customers` z przykładowej bazy danych Northwind możesz użyć <xref:System.Data.Linq.DataLoadOptions> Aby określić, że `Orders` jest również mają zostać pobrane.</span><span class="sxs-lookup"><span data-stu-id="70052-129">When you retrieve `Customers` from the Northwind sample database, you can use <xref:System.Data.Linq.DataLoadOptions> to specify that `Orders` is also to be retrieved.</span></span> <span data-ttu-id="70052-130">Można nawet określić który podzestaw `Orders` do pobrania.</span><span class="sxs-lookup"><span data-stu-id="70052-130">You can even specify which subset of `Orders` to retrieve.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLoadOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataLoadOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="70052-131">Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Linq.DataLoadOptions" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-131">Initializes a new instance of the <see cref="T:System.Data.Linq.DataLoadOptions" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith">
      <MemberSignature Language="C#" Value="public void AssociateWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssociateWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="70052-132">Identyfikuje zapytania, który ma być używany dla określonego pola jeden do wielu lub właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-132">Identifies the query to be used on a particular one-to-many field or property.</span>
          </span>
          <span data-ttu-id="70052-133">Należy pamiętać o następujących kwestiach:</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-133">Note the following:</span>
          </span>
          <span data-ttu-id="70052-134">Jeśli wyrażenie nie rozpoczyna się pole lub właściwość, która reprezentuje relacji jeden do wielu, jest zwracany wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-134">If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</span>
          </span>
          <span data-ttu-id="70052-135">Jeśli operator inny niż prawidłowy operator pojawi się w wyrażeniu, jest zwracany wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-135">If an operator other than a valid operator appears in the expression, an exception is thrown.</span>
          </span>
          <span data-ttu-id="70052-136">Prawidłowe operatory są następujące:</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-136">Valid operators are as follows:</span>
          </span>
          <span data-ttu-id="70052-137">Gdzie</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-137">Where</span>
          </span>
          <span data-ttu-id="70052-138">OrderBy</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-138">OrderBy</span>
          </span>
          <span data-ttu-id="70052-139">ThenBy</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-139">ThenBy</span>
          </span>
          <span data-ttu-id="70052-140">OrderByDescending</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-140">OrderByDescending</span>
          </span>
          <span data-ttu-id="70052-141">ThenByDescending</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-141">ThenByDescending</span>
          </span>
          <span data-ttu-id="70052-142">Take</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-142">Take</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70052-143">Filtry pobrać obiektów dla określonej relacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-143">Filters the objects retrieved for a particular relationship.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70052-144">W poniższym przykładzie pętli wewnętrznej wykonuje iterację tylko na te `Orders` które nie zostały wysłane dzisiaj.</span><span class="sxs-lookup"><span data-stu-id="70052-144">In the following example, the inner loop iterates only over those `Orders` that have not been shipped today.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AssociateWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void AssociateWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="70052-145">Typ, który jest zapytanie względem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-145">The type that is queried against.</span>
          </span>
          <span data-ttu-id="70052-146">Jeśli typ jest Niemapowane, jest zwracany wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-146">If the type is unmapped, an exception is thrown.</span>
          </span>
        </typeparam>
        <param name="expression">
          <span data-ttu-id="70052-147">Identyfikuje zapytania, który ma być używany dla określonego pola jeden do wielu lub właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-147">Identifies the query to be used on a particular one-to-many field or property.</span>
          </span>
          <span data-ttu-id="70052-148">Należy pamiętać o następujących kwestiach:</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-148">Note the following:</span>
          </span>
          <span data-ttu-id="70052-149">Jeśli wyrażenie nie rozpoczyna się pole lub właściwość, która reprezentuje relacji jeden do wielu, jest zwracany wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-149">If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</span>
          </span>
          <span data-ttu-id="70052-150">Jeśli operator inny niż prawidłowy operator pojawi się w wyrażeniu, jest zwracany wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-150">If an operator other than a valid operator appears in the expression, an exception is thrown.</span>
          </span>
          <span data-ttu-id="70052-151">Prawidłowe operatory są następujące:</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-151">Valid operators are as follows:</span>
          </span>
          <span data-ttu-id="70052-152">Gdzie</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-152">Where</span>
          </span>
          <span data-ttu-id="70052-153">OrderBy</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-153">OrderBy</span>
          </span>
          <span data-ttu-id="70052-154">ThenBy</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-154">ThenBy</span>
          </span>
          <span data-ttu-id="70052-155">OrderByDescending</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-155">OrderByDescending</span>
          </span>
          <span data-ttu-id="70052-156">ThenByDescending</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-156">ThenByDescending</span>
          </span>
          <span data-ttu-id="70052-157">Take</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-157">Take</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70052-158">Filtruje pobrane dla określonego relacji obiekty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-158">Filters objects retrieved for a particular relationship.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70052-159">Aby uzyskać informacje dotyczące zapobiegania cykle, zobacz <xref:System.Data.Linq.DataLoadOptions>.</span><span class="sxs-lookup"><span data-stu-id="70052-159">For information about how to avoid cycles, see <xref:System.Data.Linq.DataLoadOptions>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70052-160">W poniższym przykładzie pętli wewnętrznej wykonuje iterację tylko na te `Orders` które nie zostały wysłane dzisiaj.</span><span class="sxs-lookup"><span data-stu-id="70052-160">In the following example, the inner loop iterates only over those `Orders` that have not been shipped today.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssociationCriteria">
      <MemberSignature Language="C#" Value="public bool GetAssociationCriteria (System.Reflection.MemberInfo memberInfo, out System.Linq.Expressions.LambdaExpression associationCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetAssociationCriteria(class System.Reflection.MemberInfo memberInfo, [out] class System.Linq.Expressions.LambdaExpression&amp; associationCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.GetAssociationCriteria(System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetAssociationCriteria(System::Reflection::MemberInfo ^ memberInfo, [Runtime::InteropServices::Out] System::Linq::Expressions::LambdaExpression ^ % associationCriteria);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
        <Parameter Name="associationCriteria" Type="System.Linq.Expressions.LambdaExpression&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="associationCriteria">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImmediate">
      <MemberSignature Language="C#" Value="public bool IsImmediate (System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsImmediate(class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.IsImmediate(System.Reflection.MemberInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsImmediate(System::Reflection::MemberInfo ^ memberInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith">
      <MemberSignature Language="C#" Value="public void LoadWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="70052-161">Wyrażenie lambda identyfikuje pokrewnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-161">A lambda expression that identifies the related material.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70052-162">Pobiera określony danych związanych z głównego celu za pomocą wyrażenia lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-162">Retrieves specified data related to the main target by using a lambda expression.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70052-163">W poniższym przykładzie wszystkie `Orders` dla wszystkich `Customers` kto znajdują się w Londynie są pobierane, gdy zapytanie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="70052-163">In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed.</span></span> <span data-ttu-id="70052-164">W rezultacie, kolejne dostęp do `Orders` właściwość `Customer` obiektu nie spowoduje wyzwolenia Nowa kwerenda bazy danych.</span><span class="sxs-lookup"><span data-stu-id="70052-164">As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void LoadWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void LoadWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="70052-165">Typ, który jest zapytanie względem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-165">Type that is queried against.</span>
          </span>
          <span data-ttu-id="70052-166">W przypadku Niemapowane tego typu, jest zwracany wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-166">If this type is unmapped, an exception is thrown.</span>
          </span>
        </typeparam>
        <param name="expression">
          <span data-ttu-id="70052-167">Określa pole lub właściwość do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-167">Identifies the field or property to be retrieved.</span>
          </span>
          <span data-ttu-id="70052-168">Jeśli wyrażenie nie identyfikuje pole lub właściwość, która reprezentuje relacja jeden do jednego lub jeden do wielu, jest zwracany wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-168">If the expression does not identify a field or property that represents a one-to-one or one-to-many relationship, an exception is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="70052-169">Określa, które obiekty podrzędne można pobrać po przesłaniu zapytania dla obiekt typu T.</span>
          <span class="sxs-lookup">
            <span data-stu-id="70052-169">Specifies which sub-objects to retrieve when a query is submitted for an object of type T.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70052-170">Nie można określić ładowanie dwa poziomy relacji (na przykład `Orders.OrderDetails`).</span><span class="sxs-lookup"><span data-stu-id="70052-170">You cannot specify the loading of two levels of relationships (for example, `Orders.OrderDetails`).</span></span> <span data-ttu-id="70052-171">W tych scenariuszach należy określić dwa oddzielne <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="70052-171">In these scenarios you must specify two separate <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> methods.</span></span>  
  
 <span data-ttu-id="70052-172">Aby uniknąć cyklicznie, zobacz uwagi w sekcji <xref:System.Data.Linq.DataLoadOptions>.</span><span class="sxs-lookup"><span data-stu-id="70052-172">To avoid cycling, see Remarks section in <xref:System.Data.Linq.DataLoadOptions>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70052-173">W poniższym przykładzie wszystkie `Orders` dla wszystkich `Customers` kto znajdują się w Londynie są pobierane, gdy zapytanie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="70052-173">In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed.</span></span> <span data-ttu-id="70052-174">W rezultacie, kolejne dostęp do `Orders` właściwość `Customer` obiektu nie spowoduje wyzwolenia Nowa kwerenda bazy danych.</span><span class="sxs-lookup"><span data-stu-id="70052-174">As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>