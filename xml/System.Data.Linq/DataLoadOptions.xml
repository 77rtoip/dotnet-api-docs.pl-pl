<Type Name="DataLoadOptions" FullName="System.Data.Linq.DataLoadOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c7aa513988ea0a5a91f9a421524e885230400520" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69128350" /></Metadata><TypeSignature Language="C#" Value="public sealed class DataLoadOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataLoadOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.DataLoadOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataLoadOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataLoadOptions sealed" />
  <TypeSignature Language="F#" Value="type DataLoadOptions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="699f6-101">Umożliwia natychmiastowe ładowanie i filtrowanie powiązanych danych.</span><span class="sxs-lookup"><span data-stu-id="699f6-101">Provides for immediate loading and filtering of related data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="general"></a><span data-ttu-id="699f6-102">Ogólne</span><span class="sxs-lookup"><span data-stu-id="699f6-102">General</span></span>  
 <span data-ttu-id="699f6-103">Podczas wykonywania zapytania o obiekt faktycznie pobierany jest tylko żądany obiekt.</span><span class="sxs-lookup"><span data-stu-id="699f6-103">When you query for an object, you actually retrieve only the object you requested.</span></span> <span data-ttu-id="699f6-104">Obiekty *powiązane* nie są automatycznie pobierane w tym samym czasie.</span><span class="sxs-lookup"><span data-stu-id="699f6-104">The *related* objects are not automatically fetched at the same time.</span></span> <span data-ttu-id="699f6-105">(Aby uzyskać więcej informacji, zobacz [zapytania dotyczące relacji](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md).)</span><span class="sxs-lookup"><span data-stu-id="699f6-105">(For more information, see [Querying Across Relationships](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md).)</span></span>  
  
 <span data-ttu-id="699f6-106"><xref:System.Data.Linq.DataLoadOptions> Klasa oferuje dwie metody do natychmiastowego ładowania określonych powiązanych danych.</span><span class="sxs-lookup"><span data-stu-id="699f6-106">The <xref:System.Data.Linq.DataLoadOptions> class provides two methods to achieve immediate loading of specified related data.</span></span> <span data-ttu-id="699f6-107"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> Metoda umożliwia natychmiastowe ładowanie danych związanych z głównym elementem docelowym.</span><span class="sxs-lookup"><span data-stu-id="699f6-107">The <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> method allows for immediate loading of data related to the main target.</span></span> <span data-ttu-id="699f6-108"><xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> Metoda umożliwia filtrowanie obiektów pokrewnych.</span><span class="sxs-lookup"><span data-stu-id="699f6-108">The <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> method allows for filtering related objects.</span></span>  
  
## <a name="rules"></a><span data-ttu-id="699f6-109">Przepisy</span><span class="sxs-lookup"><span data-stu-id="699f6-109">Rules</span></span>  
 <span data-ttu-id="699f6-110">Należy zwrócić uwagę na następujące <xref:System.Data.Linq.DataLoadOptions> zasady dotyczące użycia:</span><span class="sxs-lookup"><span data-stu-id="699f6-110">Note the following rules regarding <xref:System.Data.Linq.DataLoadOptions> usage:</span></span>  
  
-   <span data-ttu-id="699f6-111">Przypisanie do a <xref:System.Data.Linq.DataContext> po wykonaniu pierwszego zapytania generuje wyjątek. <xref:System.Data.Linq.DataLoadOptions></span><span class="sxs-lookup"><span data-stu-id="699f6-111">Assigning a <xref:System.Data.Linq.DataLoadOptions> to a <xref:System.Data.Linq.DataContext> after the first query has been executed generates an exception.</span></span>  
  
-   <span data-ttu-id="699f6-112">Modyfikacja elementu <xref:System.Data.Linq.DataLoadOptions> po przypisaniu go do elementu <xref:System.Data.Linq.DataContext> generuje wyjątek</span><span class="sxs-lookup"><span data-stu-id="699f6-112">Modifying a <xref:System.Data.Linq.DataLoadOptions> after it has been assigned to a <xref:System.Data.Linq.DataContext> generates an exception</span></span>  
  
## <a name="cycle-handling"></a><span data-ttu-id="699f6-113">Obsługa cyklu</span><span class="sxs-lookup"><span data-stu-id="699f6-113">Cycle Handling</span></span>  
 <span data-ttu-id="699f6-114"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>dyrektywy <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> i nie mogą tworzyć cykli.</span><span class="sxs-lookup"><span data-stu-id="699f6-114"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> and <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> directives must not create cycles.</span></span> <span data-ttu-id="699f6-115">Poniżej przedstawiono przykłady takich wykresów:</span><span class="sxs-lookup"><span data-stu-id="699f6-115">The following represent examples of such graphs:</span></span>  
  
-   <span data-ttu-id="699f6-116">Przykład 1: Samodzielne cykliczne</span><span class="sxs-lookup"><span data-stu-id="699f6-116">Example 1: Self recursive</span></span>  
  
    -   `dlo.LoadWith<Employee>(e => e.Reports);`  
  
-   <span data-ttu-id="699f6-117">Przykład 2: Wskaźniki zwrotne</span><span class="sxs-lookup"><span data-stu-id="699f6-117">Example 2: Back-pointers</span></span>  
  
    -   `dlo.LoadWith <Customer>(c => C.Orders);`  
  
    -   `dlo.LoadWith <Order>(o => o.Customer);`  
  
-   <span data-ttu-id="699f6-118">Przykład 3: Dłuższe cykle</span><span class="sxs-lookup"><span data-stu-id="699f6-118">Example 3: Longer cycles</span></span>  
  
     <span data-ttu-id="699f6-119">Chociaż nie powinna to występować w dobrze znormalizowanym modelu, jest to możliwe.</span><span class="sxs-lookup"><span data-stu-id="699f6-119">Although this should not occur in a well-normalized model, it is possible.</span></span>  
  
    -   `dlo.LoadWith <A>(a => a.Bs);`  
  
    -   `dlo.LoadWith <B>(b => b.Cs);`  
  
    -   `dlo.LoadWith <C>(c => c.As);`  
  
-   <span data-ttu-id="699f6-120">Przykład 4: Samodzielne podzapytania cykliczne</span><span class="sxs-lookup"><span data-stu-id="699f6-120">Example 4: Self recursive subQueries</span></span>  
  
    -   `dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));`  
  
-   <span data-ttu-id="699f6-121">Przykład 5: Dłuższe podzapytania cykliczne</span><span class="sxs-lookup"><span data-stu-id="699f6-121">Example 5: Longer recursive subqueries</span></span>  
  
    -   `dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`  
  
    -   `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));`  
  
 <span data-ttu-id="699f6-122">Poniżej przedstawiono niektóre ogólne reguły, które pomagają zrozumieć, co dzieje się w tych scenariuszach.</span><span class="sxs-lookup"><span data-stu-id="699f6-122">The following are some general rules that help you understand what occurs in these scenarios.</span></span>  
  
 <span data-ttu-id="699f6-123">**LoadWith** Każde wywołanie <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> sprawdza, czy cykle zostały wprowadzone do grafu.</span><span class="sxs-lookup"><span data-stu-id="699f6-123">**LoadWith** Each call to <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> checks whether cycles have been introduced into the graph.</span></span> <span data-ttu-id="699f6-124">Jeśli istnieją, jak w przykładach 1, 2 i 3, zgłaszany jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="699f6-124">If there are, as in Examples 1, 2, and 3, an exception is thrown.</span></span>  
  
 <span data-ttu-id="699f6-125">**AssociateWith** Aparat w czasie wykonywania nie stosuje istniejących klauzul subquery do relacji wewnątrz wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="699f6-125">**AssociateWith** The engine at run time does not apply the existing SubQuery clauses to the relationship inside the expression.</span></span>  
  
-   <span data-ttu-id="699f6-126">W przykładzie 4 `Where` klauzula jest wykonywana względem wszystkich `A`, nie tylko tych podfiltrowanych przez podzapytanie podzapytania (ponieważ byłyby cykliczne)</span><span class="sxs-lookup"><span data-stu-id="699f6-126">In Example 4, the `Where` clause is executed against all `A`, not just the ones sub-filtered by the SubQuery expression itself (because that would be recursive)</span></span>  
  
-   <span data-ttu-id="699f6-127">W przykładzie 5 pierwsza `Where` klauzula jest stosowana do `B`wszystkich s, nawet jeśli istnieją podzapytania `B`.</span><span class="sxs-lookup"><span data-stu-id="699f6-127">In Example 5, the first `Where` clause is applied to all the `B`s, even though there are subqueries on `B`.</span></span> <span data-ttu-id="699f6-128">Druga `Where` klauzula jest stosowana do wszystkich s, `A`chociaż istnieją podzapytania `A`.</span><span class="sxs-lookup"><span data-stu-id="699f6-128">The second `Where` clause is applied to all the `A`s even though there are subqueries on `A`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="699f6-129">Gdy pobierasz `Customers` z przykładowej bazy danych Northwind, możesz użyć <xref:System.Data.Linq.DataLoadOptions> , aby określić `Orders` , który jest również pobierany.</span><span class="sxs-lookup"><span data-stu-id="699f6-129">When you retrieve `Customers` from the Northwind sample database, you can use <xref:System.Data.Linq.DataLoadOptions> to specify that `Orders` is also to be retrieved.</span></span> <span data-ttu-id="699f6-130">Można nawet określić, który podzbiór `Orders` ma zostać pobrany.</span><span class="sxs-lookup"><span data-stu-id="699f6-130">You can even specify which subset of `Orders` to retrieve.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLoadOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataLoadOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="699f6-131">Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Linq.DataLoadOptions" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="699f6-131">Initializes a new instance of the <see cref="T:System.Data.Linq.DataLoadOptions" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith">
      <MemberSignature Language="C#" Value="public void AssociateWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssociateWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberSignature Language="F#" Value="member this.AssociateWith : System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="dataLoadOptions.AssociateWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="699f6-132">Identyfikuje zapytanie, które ma być używane dla konkretnego pola lub właściwości "jeden do wielu".</span><span class="sxs-lookup"><span data-stu-id="699f6-132">Identifies the query to be used on a particular one-to-many field or property.</span></span> <span data-ttu-id="699f6-133">Należy pamiętać o następujących kwestiach:</span><span class="sxs-lookup"><span data-stu-id="699f6-133">Note the following:</span></span>  
  
 <span data-ttu-id="699f6-134">Jeśli wyrażenie nie zaczyna się od pola lub właściwości, które reprezentuje relację jeden do wielu, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="699f6-134">If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</span></span>  
  
 <span data-ttu-id="699f6-135">Jeśli operator inny niż prawidłowy operator występuje w wyrażeniu, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="699f6-135">If an operator other than a valid operator appears in the expression, an exception is thrown.</span></span> <span data-ttu-id="699f6-136">Prawidłowe operatory są następujące:</span><span class="sxs-lookup"><span data-stu-id="699f6-136">Valid operators are as follows:</span></span>  
  
 <span data-ttu-id="699f6-137">Gdzie</span><span class="sxs-lookup"><span data-stu-id="699f6-137">Where</span></span>  
  
 <span data-ttu-id="699f6-138">OrderBy</span><span class="sxs-lookup"><span data-stu-id="699f6-138">OrderBy</span></span>  
  
 <span data-ttu-id="699f6-139">ThenBy</span><span class="sxs-lookup"><span data-stu-id="699f6-139">ThenBy</span></span>  
  
 <span data-ttu-id="699f6-140">OrderByDescending</span><span class="sxs-lookup"><span data-stu-id="699f6-140">OrderByDescending</span></span>  
  
 <span data-ttu-id="699f6-141">ThenByDescending</span><span class="sxs-lookup"><span data-stu-id="699f6-141">ThenByDescending</span></span>  
  
 <span data-ttu-id="699f6-142">Take</span><span class="sxs-lookup"><span data-stu-id="699f6-142">Take</span></span></param>
        <summary><span data-ttu-id="699f6-143">Filtruje obiekty pobrane dla konkretnej relacji.</span><span class="sxs-lookup"><span data-stu-id="699f6-143">Filters the objects retrieved for a particular relationship.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="699f6-144">W poniższym przykładzie pętla wewnętrzna wykonuje iterację tylko w odniesieniu do tych `Orders` , które nie zostały wysłane dzisiaj.</span><span class="sxs-lookup"><span data-stu-id="699f6-144">In the following example, the inner loop iterates only over those `Orders` that have not been shipped today.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AssociateWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void AssociateWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="member this.AssociateWith : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; unit" Usage="dataLoadOptions.AssociateWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="699f6-145">Typ, dla którego jest wykonywane zapytanie.</span><span class="sxs-lookup"><span data-stu-id="699f6-145">The type that is queried against.</span></span>  
  
 <span data-ttu-id="699f6-146">Jeśli typ jest niezamapowany, zgłaszany jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="699f6-146">If the type is unmapped, an exception is thrown.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="699f6-147">Identyfikuje zapytanie, które ma być używane dla konkretnego pola lub właściwości "jeden do wielu".</span><span class="sxs-lookup"><span data-stu-id="699f6-147">Identifies the query to be used on a particular one-to-many field or property.</span></span> <span data-ttu-id="699f6-148">Należy pamiętać o następujących kwestiach:</span><span class="sxs-lookup"><span data-stu-id="699f6-148">Note the following:</span></span>  
  
 <span data-ttu-id="699f6-149">Jeśli wyrażenie nie zaczyna się od pola lub właściwości, które reprezentuje relację jeden do wielu, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="699f6-149">If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</span></span>  
  
 <span data-ttu-id="699f6-150">Jeśli operator inny niż prawidłowy operator występuje w wyrażeniu, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="699f6-150">If an operator other than a valid operator appears in the expression, an exception is thrown.</span></span> <span data-ttu-id="699f6-151">Prawidłowe operatory są następujące:</span><span class="sxs-lookup"><span data-stu-id="699f6-151">Valid operators are as follows:</span></span>  
  
 <span data-ttu-id="699f6-152">Gdzie</span><span class="sxs-lookup"><span data-stu-id="699f6-152">Where</span></span>  
  
 <span data-ttu-id="699f6-153">OrderBy</span><span class="sxs-lookup"><span data-stu-id="699f6-153">OrderBy</span></span>  
  
 <span data-ttu-id="699f6-154">ThenBy</span><span class="sxs-lookup"><span data-stu-id="699f6-154">ThenBy</span></span>  
  
 <span data-ttu-id="699f6-155">OrderByDescending</span><span class="sxs-lookup"><span data-stu-id="699f6-155">OrderByDescending</span></span>  
  
 <span data-ttu-id="699f6-156">ThenByDescending</span><span class="sxs-lookup"><span data-stu-id="699f6-156">ThenByDescending</span></span>  
  
 <span data-ttu-id="699f6-157">Take</span><span class="sxs-lookup"><span data-stu-id="699f6-157">Take</span></span></param>
        <summary><span data-ttu-id="699f6-158">Filtruje obiekty pobrane dla konkretnej relacji.</span><span class="sxs-lookup"><span data-stu-id="699f6-158">Filters objects retrieved for a particular relationship.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="699f6-159">Aby uzyskać informacje o tym, jak uniknąć cykli, zobacz <xref:System.Data.Linq.DataLoadOptions>.</span><span class="sxs-lookup"><span data-stu-id="699f6-159">For information about how to avoid cycles, see <xref:System.Data.Linq.DataLoadOptions>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="699f6-160">W poniższym przykładzie pętla wewnętrzna wykonuje iterację tylko w odniesieniu do tych `Orders` , które nie zostały wysłane dzisiaj.</span><span class="sxs-lookup"><span data-stu-id="699f6-160">In the following example, the inner loop iterates only over those `Orders` that have not been shipped today.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssociationCriteria">
      <MemberSignature Language="C#" Value="public bool GetAssociationCriteria (System.Reflection.MemberInfo memberInfo, out System.Linq.Expressions.LambdaExpression associationCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetAssociationCriteria(class System.Reflection.MemberInfo memberInfo, [out] class System.Linq.Expressions.LambdaExpression&amp; associationCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.GetAssociationCriteria(System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetAssociationCriteria(System::Reflection::MemberInfo ^ memberInfo, [Runtime::InteropServices::Out] System::Linq::Expressions::LambdaExpression ^ % associationCriteria);" />
      <MemberSignature Language="F#" Value="member this.GetAssociationCriteria : System.Reflection.MemberInfo *  -&gt; bool" Usage="dataLoadOptions.GetAssociationCriteria (memberInfo, associationCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="associationCriteria" Type="System.Linq.Expressions.LambdaExpression" RefType="out" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="associationCriteria">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImmediate">
      <MemberSignature Language="C#" Value="public bool IsImmediate (System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsImmediate(class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.IsImmediate(System.Reflection.MemberInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsImmediate(System::Reflection::MemberInfo ^ memberInfo);" />
      <MemberSignature Language="F#" Value="member this.IsImmediate : System.Reflection.MemberInfo -&gt; bool" Usage="dataLoadOptions.IsImmediate memberInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith">
      <MemberSignature Language="C#" Value="public void LoadWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberSignature Language="F#" Value="member this.LoadWith : System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="dataLoadOptions.LoadWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="699f6-161">Wyrażenie lambda, które identyfikuje materiał pokrewny.</span><span class="sxs-lookup"><span data-stu-id="699f6-161">A lambda expression that identifies the related material.</span></span></param>
        <summary><span data-ttu-id="699f6-162">Pobiera określone dane związane z głównym elementem docelowym przy użyciu wyrażenia lambda.</span><span class="sxs-lookup"><span data-stu-id="699f6-162">Retrieves specified data related to the main target by using a lambda expression.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="699f6-163">W poniższym przykładzie wszystkie `Orders` dla `Customers` wszystkich osób, które znajdują się w Londynie, są pobierane po wykonaniu zapytania.</span><span class="sxs-lookup"><span data-stu-id="699f6-163">In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed.</span></span> <span data-ttu-id="699f6-164">W efekcie dostęp do `Orders` właściwości `Customer` na obiekcie nie wyzwala nowej kwerendy bazy danych.</span><span class="sxs-lookup"><span data-stu-id="699f6-164">As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void LoadWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void LoadWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="member this.LoadWith : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; unit" Usage="dataLoadOptions.LoadWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="699f6-165">Typ, dla którego jest wykonywane zapytanie.</span><span class="sxs-lookup"><span data-stu-id="699f6-165">Type that is queried against.</span></span>  
  
 <span data-ttu-id="699f6-166">Jeśli ten typ jest niezamapowany, zgłaszany jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="699f6-166">If this type is unmapped, an exception is thrown.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="699f6-167">Określa pole lub właściwość, która ma zostać pobrana.</span><span class="sxs-lookup"><span data-stu-id="699f6-167">Identifies the field or property to be retrieved.</span></span>  
  
 <span data-ttu-id="699f6-168">Jeśli wyrażenie nie identyfikuje pola lub właściwości, która reprezentuje relację jeden-do-jednego lub jeden-do-wielu, zgłaszany jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="699f6-168">If the expression does not identify a field or property that represents a one-to-one or one-to-many relationship, an exception is thrown.</span></span></param>
        <summary><span data-ttu-id="699f6-169">Określa, które obiekty podrzędne mają być pobierane po przesłaniu zapytania dla obiektu typu T.</span><span class="sxs-lookup"><span data-stu-id="699f6-169">Specifies which sub-objects to retrieve when a query is submitted for an object of type T.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="699f6-170">Nie można określić ładowania dwóch poziomów relacji (na przykład `Orders.OrderDetails`).</span><span class="sxs-lookup"><span data-stu-id="699f6-170">You cannot specify the loading of two levels of relationships (for example, `Orders.OrderDetails`).</span></span> <span data-ttu-id="699f6-171">W tych scenariuszach należy określić dwie oddzielne <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="699f6-171">In these scenarios you must specify two separate <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> methods.</span></span>  
  
 <span data-ttu-id="699f6-172">Aby uniknąć cykliczności, zobacz uwagi w <xref:System.Data.Linq.DataLoadOptions>sekcji.</span><span class="sxs-lookup"><span data-stu-id="699f6-172">To avoid cycling, see Remarks section in <xref:System.Data.Linq.DataLoadOptions>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="699f6-173">W poniższym przykładzie wszystkie `Orders` dla `Customers` wszystkich osób, które znajdują się w Londynie, są pobierane po wykonaniu zapytania.</span><span class="sxs-lookup"><span data-stu-id="699f6-173">In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed.</span></span> <span data-ttu-id="699f6-174">W efekcie dostęp do `Orders` właściwości `Customer` na obiekcie nie wyzwala nowej kwerendy bazy danych.</span><span class="sxs-lookup"><span data-stu-id="699f6-174">As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
