<Type Name="ChangeConflictCollection" FullName="System.Data.Linq.ChangeConflictCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="630a465975a37bba59ed206a03ebe6837efbad9f" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63894792" /></Metadata><TypeSignature Language="C#" Value="public sealed class ChangeConflictCollection : System.Collections.Generic.ICollection&lt;System.Data.Linq.ObjectChangeConflict&gt;, System.Collections.Generic.IEnumerable&lt;System.Data.Linq.ObjectChangeConflict&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ChangeConflictCollection extends System.Object implements class System.Collections.Generic.ICollection`1&lt;class System.Data.Linq.ObjectChangeConflict&gt;, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Linq.ObjectChangeConflict&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.ChangeConflictCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ChangeConflictCollection&#xA;Implements ICollection, ICollection(Of ObjectChangeConflict), IEnumerable(Of ObjectChangeConflict)" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChangeConflictCollection sealed : System::Collections::Generic::ICollection&lt;System::Data::Linq::ObjectChangeConflict ^&gt;, System::Collections::Generic::IEnumerable&lt;System::Data::Linq::ObjectChangeConflict ^&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type ChangeConflictCollection = class&#xA;    interface ICollection&lt;ObjectChangeConflict&gt;&#xA;    interface ICollection&#xA;    interface seq&lt;ObjectChangeConflict&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Data.Linq.ObjectChangeConflict&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Data.Linq.ObjectChangeConflict&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="2a87c-101">Zwraca kolekcję obiektów związane z konfliktów współbieżności.</span><span class="sxs-lookup"><span data-stu-id="2a87c-101">Returns a collection of objects involved in concurrency conflicts.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2a87c-102">W poniższym przykładzie, który pobiera informacje o obiektach w konflikcie `db.ChangeConflicts` reprezentuje kolekcję tych obiektów.</span><span class="sxs-lookup"><span data-stu-id="2a87c-102">In the following example that retrieves information about objects in conflict, `db.ChangeConflicts` represents the collection of those objects.</span></span>  
  
 [!code-csharp[System.Data.Linq.ObjectChangeConflict#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.objectchangeconflict/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.ObjectChangeConflict#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.objectchangeconflict/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ChangeConflictCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="changeConflictCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a87c-103">Usuwa wszystkie konflikty z kolekcji.</span><span class="sxs-lookup"><span data-stu-id="2a87c-103">Removes all conflicts from the collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Data.Linq.ObjectChangeConflict item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Data.Linq.ObjectChangeConflict item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ChangeConflictCollection.Contains(System.Data.Linq.ObjectChangeConflict)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As ObjectChangeConflict) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Data::Linq::ObjectChangeConflict ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Contains : System.Data.Linq.ObjectChangeConflict -&gt; bool&#xA;override this.Contains : System.Data.Linq.ObjectChangeConflict -&gt; bool" Usage="changeConflictCollection.Contains item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Data.Linq.ObjectChangeConflict" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="2a87c-104">Określony konflikt.</span><span class="sxs-lookup"><span data-stu-id="2a87c-104">The specified conflict.</span></span></param>
        <summary><span data-ttu-id="2a87c-105">Określa, czy dany konflikt jest członkiem kolekcji.</span><span class="sxs-lookup"><span data-stu-id="2a87c-105">Specifies whether a given conflict is a member of the collection.</span></span></summary>
        <returns><span data-ttu-id="2a87c-106"><see langword="true" /> Jeśli określony konflikt jest elementem członkowskim kolekcji; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2a87c-106"><see langword="true" /> if the specified conflict is a member of the collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Data.Linq.ObjectChangeConflict[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Data.Linq.ObjectChangeConflict[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ChangeConflictCollection.CopyTo(System.Data.Linq.ObjectChangeConflict[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As ObjectChangeConflict(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;System::Data::Linq::ObjectChangeConflict ^&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : System.Data.Linq.ObjectChangeConflict[] * int -&gt; unit&#xA;override this.CopyTo : System.Data.Linq.ObjectChangeConflict[] * int -&gt; unit" Usage="changeConflictCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Data.Linq.ObjectChangeConflict[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="2a87c-107">Tablica do skopiowania do.</span><span class="sxs-lookup"><span data-stu-id="2a87c-107">The array to copy to.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="2a87c-108">Indeks tablicy, której kopia jest uruchomienie.</span><span class="sxs-lookup"><span data-stu-id="2a87c-108">The array index where the copy is to start.</span></span></param>
        <summary><span data-ttu-id="2a87c-109">Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</span><span class="sxs-lookup"><span data-stu-id="2a87c-109">For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a87c-110">Kopiuje elementy kolekcji do tablicy.</span><span class="sxs-lookup"><span data-stu-id="2a87c-110">Copies the elements of the collection to an array.</span></span>  
  
 <span data-ttu-id="2a87c-111">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="2a87c-111">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2a87c-112">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.ChangeConflictCollection> wystąpienia jest rzutowany na <xref:System.Collections.ICollection> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="2a87c-112">It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ChangeConflictCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Data.Linq.ChangeConflictCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a87c-113">Zwraca liczbę konfliktów w kolekcji</span><span class="sxs-lookup"><span data-stu-id="2a87c-113">Returns the number of conflicts in the collection</span></span></summary>
        <value><span data-ttu-id="2a87c-114">integer</span><span class="sxs-lookup"><span data-stu-id="2a87c-114">integer</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Data.Linq.ObjectChangeConflict&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Data.Linq.ObjectChangeConflict&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ChangeConflictCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of ObjectChangeConflict)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::Data::Linq::ObjectChangeConflict ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Data.Linq.ObjectChangeConflict&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Data.Linq.ObjectChangeConflict&gt;" Usage="changeConflictCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Data.Linq.ObjectChangeConflict&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a87c-115">Zwraca moduł wyliczający dla kolekcji.</span><span class="sxs-lookup"><span data-stu-id="2a87c-115">Returns the enumerator for the collection.</span></span></summary>
        <returns><span data-ttu-id="2a87c-116">Moduł wyliczający dla kolekcji.</span><span class="sxs-lookup"><span data-stu-id="2a87c-116">An enumerator for the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ObjectChangeConflict this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.ObjectChangeConflict Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ChangeConflictCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As ObjectChangeConflict" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::ObjectChangeConflict ^ default[int] { System::Data::Linq::ObjectChangeConflict ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Data.Linq.ObjectChangeConflict" Usage="System.Data.Linq.ChangeConflictCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ObjectChangeConflict</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2a87c-117">Indeksowanie w kolekcji elementów, konflikt.</span><span class="sxs-lookup"><span data-stu-id="2a87c-117">Index in the collection of the item in conflict.</span></span></param>
        <summary><span data-ttu-id="2a87c-118">Zwraca element w konflikcie.</span><span class="sxs-lookup"><span data-stu-id="2a87c-118">Returns an item in conflict.</span></span></summary>
        <value><span data-ttu-id="2a87c-119"><see cref="T:System.Data.Linq.ObjectChangeConflict" /> Reprezentujący element w konflikcie.</span><span class="sxs-lookup"><span data-stu-id="2a87c-119">An <see cref="T:System.Data.Linq.ObjectChangeConflict" /> representing the item in conflict.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (System.Data.Linq.ObjectChangeConflict item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(class System.Data.Linq.ObjectChangeConflict item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ChangeConflictCollection.Remove(System.Data.Linq.ObjectChangeConflict)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As ObjectChangeConflict) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(System::Data::Linq::ObjectChangeConflict ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : System.Data.Linq.ObjectChangeConflict -&gt; bool&#xA;override this.Remove : System.Data.Linq.ObjectChangeConflict -&gt; bool" Usage="changeConflictCollection.Remove item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Data.Linq.ObjectChangeConflict" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="2a87c-120">Konflikt do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="2a87c-120">The conflict to remove.</span></span></param>
        <summary><span data-ttu-id="2a87c-121">Określa, czy określony konflikt zostanie usunięty z kolekcji.</span><span class="sxs-lookup"><span data-stu-id="2a87c-121">Specifies whether the specified conflict is removed from the collection.</span></span></summary>
        <returns><span data-ttu-id="2a87c-122"><see langword="true" /> Jeśli <see cref="T:System.Data.Linq.ObjectChangeConflict" /> jest usunięty z kolekcji; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2a87c-122"><see langword="true" /> if the <see cref="T:System.Data.Linq.ObjectChangeConflict" /> is removed from the collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ResolveAll">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2a87c-123">Usuwa wszystkie konflikty w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="2a87c-123">Resolves all conflicts in the collection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ResolveAll">
      <MemberSignature Language="C#" Value="public void ResolveAll (System.Data.Linq.RefreshMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResolveAll(valuetype System.Data.Linq.RefreshMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResolveAll (mode As RefreshMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResolveAll(System::Data::Linq::RefreshMode mode);" />
      <MemberSignature Language="F#" Value="member this.ResolveAll : System.Data.Linq.RefreshMode -&gt; unit" Usage="changeConflictCollection.ResolveAll mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.Linq.RefreshMode" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="2a87c-124">Jedną z opcji dostępnych w <see cref="T:System.Data.Linq.RefreshMode" />.</span><span class="sxs-lookup"><span data-stu-id="2a87c-124">One of the options available in <see cref="T:System.Data.Linq.RefreshMode" />.</span></span></param>
        <summary><span data-ttu-id="2a87c-125">Rozpoznaje wszystkie konflikty w kolekcji przy użyciu określonej strategii.</span><span class="sxs-lookup"><span data-stu-id="2a87c-125">Resolves all conflicts in the collection by using the specified strategy.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveAll">
      <MemberSignature Language="C#" Value="public void ResolveAll (System.Data.Linq.RefreshMode mode, bool autoResolveDeletes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResolveAll(valuetype System.Data.Linq.RefreshMode mode, bool autoResolveDeletes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResolveAll (mode As RefreshMode, autoResolveDeletes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResolveAll(System::Data::Linq::RefreshMode mode, bool autoResolveDeletes);" />
      <MemberSignature Language="F#" Value="member this.ResolveAll : System.Data.Linq.RefreshMode * bool -&gt; unit" Usage="changeConflictCollection.ResolveAll (mode, autoResolveDeletes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.Linq.RefreshMode" />
        <Parameter Name="autoResolveDeletes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="2a87c-126">Strategia do użycia w celu rozwiązania konfliktu.</span><span class="sxs-lookup"><span data-stu-id="2a87c-126">The strategy to use to resolve the conflict.</span></span></param>
        <param name="autoResolveDeletes"><span data-ttu-id="2a87c-127">W przypadku opcji true automatycznie rozwiązuje konflikty, które wynikają z zmodyfikowanego obiektu, który nie jest już w bazie danych.</span><span class="sxs-lookup"><span data-stu-id="2a87c-127">If true, automatically resolves conflicts that result from a modified object that is no longer in the database.</span></span></param>
        <summary><span data-ttu-id="2a87c-128">Rozpoznaje wszystkie konflikty w kolekcji przy użyciu określonej strategii.</span><span class="sxs-lookup"><span data-stu-id="2a87c-128">Resolves all conflicts in the collection by using the specified strategy.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Data.Linq.ObjectChangeConflict&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;ObjectChangeConflict&gt;.Add (System.Data.Linq.ObjectChangeConflict item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Data.Linq.ObjectChangeConflict&gt;.Add(class System.Data.Linq.ObjectChangeConflict item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection&lt;System#Data#Linq#ObjectChangeConflict&gt;#Add(System.Data.Linq.ObjectChangeConflict)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As ObjectChangeConflict) Implements ICollection(Of ObjectChangeConflict).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Data.Linq.ObjectChangeConflict&gt;.Add(System::Data::Linq::ObjectChangeConflict ^ item) = System::Collections::Generic::ICollection&lt;System::Data::Linq::ObjectChangeConflict ^&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Data.Linq.ObjectChangeConflict" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="2a87c-129">Element do dodania.</span><span class="sxs-lookup"><span data-stu-id="2a87c-129">The item to add.</span></span></param>
        <summary><span data-ttu-id="2a87c-130">Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" />.</span><span class="sxs-lookup"><span data-stu-id="2a87c-130">For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a87c-131">Dodaje element do kolekcji.</span><span class="sxs-lookup"><span data-stu-id="2a87c-131">Adds an item to the collection.</span></span>  
  
 <span data-ttu-id="2a87c-132">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="2a87c-132">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2a87c-133">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.ChangeConflictCollection> wystąpienia jest rzutowany na <xref:System.Collections.Generic.ICollection%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="2a87c-133">It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Data.Linq.ObjectChangeConflict&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;System.Data.Linq.ObjectChangeConflict&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;System.Data.Linq.ObjectChangeConflict&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection&lt;System#Data#Linq#ObjectChangeConflict&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of ObjectChangeConflict).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;System::Data::Linq::ObjectChangeConflict&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;System.Data.Linq.ObjectChangeConflict&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a87c-134">Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</span><span class="sxs-lookup"><span data-stu-id="2a87c-134">For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</span></span></summary>
        <value><span data-ttu-id="2a87c-135"><see langword="true" /> Jeśli kolekcja jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="2a87c-135"><see langword="true" /> if the collection is read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a87c-136">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="2a87c-136">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2a87c-137">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.ChangeConflictCollection> wystąpienia jest rzutowany na <xref:System.Collections.Generic.ICollection%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="2a87c-137">It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="2a87c-138">Nazwa tablicy.</span><span class="sxs-lookup"><span data-stu-id="2a87c-138">Name of the array.</span></span></param>
        <param name="index"><span data-ttu-id="2a87c-139">Indeks tablicy.</span><span class="sxs-lookup"><span data-stu-id="2a87c-139">Index of the array.</span></span></param>
        <summary><span data-ttu-id="2a87c-140">Kopiuje kolekcję do tablicy.</span><span class="sxs-lookup"><span data-stu-id="2a87c-140">Copies the collection to an array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a87c-141">Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.ICollection.IsSynchronized" />.</span><span class="sxs-lookup"><span data-stu-id="2a87c-141">For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</span></span></summary>
        <value><span data-ttu-id="2a87c-142"><see langword="true" /> Jeśli dostęp do kolekcji jest synchronizowany (bezpieczna wątkowo); w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2a87c-142"><see langword="true" /> if access to the collection is synchronized (thread-safe); otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a87c-143">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="2a87c-143">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2a87c-144">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.ChangeConflictCollection> wystąpienia jest rzutowany na <xref:System.Collections.ICollection> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="2a87c-144">It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2a87c-145">Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.ICollection.IsSynchronized" />.</span><span class="sxs-lookup"><span data-stu-id="2a87c-145">For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</span></span></summary>
        <value><span data-ttu-id="2a87c-146">Obiekt, który może służyć do synchronizowania dostępu do kolekcji.</span><span class="sxs-lookup"><span data-stu-id="2a87c-146">An object that can be used to synchronize access to the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a87c-147">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="2a87c-147">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2a87c-148">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.ChangeConflictCollection> wystąpienia jest rzutowany na <xref:System.Collections.ICollection> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="2a87c-148">It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a87c-149">Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="2a87c-149">For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</span></span></summary>
        <returns><span data-ttu-id="2a87c-150">Moduł wyliczający, który iteruje po kolekcji.</span><span class="sxs-lookup"><span data-stu-id="2a87c-150">An enumerator that iterates through a collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a87c-151">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="2a87c-151">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2a87c-152">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.ChangeConflictCollection> wystąpienia jest rzutowany na <xref:System.Collections.IEnumerable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="2a87c-152">It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>