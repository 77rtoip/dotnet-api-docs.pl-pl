<Type Name="Binary" FullName="System.Data.Linq.Binary">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="81a70bdf5bb482364db23cd76201435d5f64f14b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Binary : IEquatable&lt;System.Data.Linq.Binary&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit Binary extends System.Object implements class System.IEquatable`1&lt;class System.Data.Linq.Binary&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Binary" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Binary&#xA;Implements IEquatable(Of Binary)" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binary sealed : IEquatable&lt;System::Data::Linq::Binary ^&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Data.Linq.Binary&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7ee2e-101">Reprezentuje niezmienne bloku danych binarnych.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7ee2e-101">Represents an immutable block of binary data.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binary (byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binary(cli::array &lt;System::Byte&gt; ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="7ee2e-102">Liczba bajtów reprezentujący dane binarne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-102">The bytes representing the binary data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ee2e-103">Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Linq.Binary" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-103">Initializes a new instance of the <see cref="T:System.Data.Linq.Binary" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ee2e-104">Gdy`null` została przekazana do tego konstruktora zamiast wymagane tablicę bajtów, <xref:System.ArgumentNullException?displayProperty=nameWithType> wyjątku.</span><span class="sxs-lookup"><span data-stu-id="7ee2e-104">When`null` is passed to this constructor instead of the required array of bytes, a <xref:System.ArgumentNullException?displayProperty=nameWithType> exception is thrown.</span></span> <span data-ttu-id="7ee2e-105">Nie należy polegać na ten problem, ponieważ może ulec zmianie w przyszłości.</span><span class="sxs-lookup"><span data-stu-id="7ee2e-105">Do not rely on this behavior because it may change in the future.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7ee2e-106">Określa, czy dwa obiekty binarne są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-106">Determines whether two binary objects are equal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Data.Linq.Binary other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Data.Linq.Binary other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Binary) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Data::Linq::Binary ^ other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Data.Linq.Binary" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="7ee2e-107">
            <see cref="T:System.Object" /> Do którego bieżący obiekt jest porównywana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-107">The <see cref="T:System.Object" /> to which the current object is being compared.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ee2e-108">Określa, czy dwa obiekty binarne są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-108">Determines whether two binary objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ee2e-109">
            <see langword="true" /> Jeśli dwa obiekty binarne są równe; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-109">
              <see langword="true" /> if the two binary objects are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="7ee2e-110">
            <see cref="T:System.Object" /> Do porównania z bieżącym <see cref="T:System.Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-110">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ee2e-111">Określa, czy określony <see cref="T:System.Object" /> jest taki sam, jak bieżący <see cref="T:System.Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-111">Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ee2e-112">
            <see langword="true" /> Jeśli dwa obiekty binarne są równe; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-112">
              <see langword="true" /> if the two binary objects are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7ee2e-113">Pełni rolę funkcji skrótu dla określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-113">Serves as a hash function for a particular type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ee2e-114">Wartość skrótu dla bieżącego obiektu binarnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-114">A hash code for the current binary object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Binary.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ee2e-115">Pobiera długość obiektu binarnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-115">Gets the length of the binary object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ee2e-116">Liczba całkowita reprezentująca długość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-116">An integer representing the length.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Data.Linq.Binary binary1, System.Data.Linq.Binary binary2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Data.Linq.Binary binary1, class System.Data.Linq.Binary binary2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (binary1 As Binary, binary2 As Binary) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Data::Linq::Binary ^ binary1, System::Data::Linq::Binary ^ binary2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binary1" Type="System.Data.Linq.Binary" />
        <Parameter Name="binary2" Type="System.Data.Linq.Binary" />
      </Parameters>
      <Docs>
        <param name="binary1">
          <span data-ttu-id="7ee2e-117">Pierwszy obiekt binarny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-117">First binary object.</span>
          </span>
        </param>
        <param name="binary2">
          <span data-ttu-id="7ee2e-118">Drugi obiekt binarny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-118">Second binary object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ee2e-119">Opisuje relację równości między dwoma obiektami binarnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-119">Describes the equality relationship between two binary objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ee2e-120">
            <see langword="true" /> Jeśli obiekty binarne są równe; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-120">
              <see langword="true" /> if the binary objects are equal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ee2e-121">Zwraca `true` obu `null` , ale zwraca `false` Jeśli jest tylko jeden `null`.</span><span class="sxs-lookup"><span data-stu-id="7ee2e-121">Returns `true` if both are `null` but returns `false` if only one is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Data.Linq.Binary (byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Data.Linq.Binary op_Implicit(unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.op_Implicit(System.Byte[])~System.Data.Linq.Binary" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Byte()) As Binary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Data::Linq::Binary ^(cli::array &lt;System::Byte&gt; ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.Binary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="7ee2e-122">Tablica bajtów do przekonwertowania na wystąpienie <see cref="T:System.Data.Linq.Binary" /> typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-122">The array of bytes to convert into an instance of the <see cref="T:System.Data.Linq.Binary" /> type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ee2e-123">Włącza tablice bajtów do niejawnie można przekształcić <see cref="T:System.Data.Linq.Binary" /> typu w języku programowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-123">Enables arrays of bytes to be implicitly coerced to the <see cref="T:System.Data.Linq.Binary" /> type in a programming language.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ee2e-124">A <see cref="T:System.Data.Linq.Binary" /> klasa zawierająca coerced wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-124">A <see cref="T:System.Data.Linq.Binary" /> class containing the coerced value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ee2e-125">Gdy `null` jest przekazywana do tego operatora zamiast wymagane tablicę bajtów, [niejawna konwersja (Byte\<xref:System.ArgumentNullException?displayProperty=nameWithType > wyjątku.</span><span class="sxs-lookup"><span data-stu-id="7ee2e-125">When `null` is passed to this operator instead of the required array of bytes, a [Implicit Conversion (Byte\<xref:System.ArgumentNullException?displayProperty=nameWithType> exception is thrown.</span></span> <span data-ttu-id="7ee2e-126">Nie należy polegać na ten problem, ponieważ może ulec zmianie w przyszłości.</span><span class="sxs-lookup"><span data-stu-id="7ee2e-126">Do not rely on this behavior because it may change in the future.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Data.Linq.Binary binary1, System.Data.Linq.Binary binary2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Data.Linq.Binary binary1, class System.Data.Linq.Binary binary2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (binary1 As Binary, binary2 As Binary) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Data::Linq::Binary ^ binary1, System::Data::Linq::Binary ^ binary2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binary1" Type="System.Data.Linq.Binary" />
        <Parameter Name="binary2" Type="System.Data.Linq.Binary" />
      </Parameters>
      <Docs>
        <param name="binary1">
          <span data-ttu-id="7ee2e-127">Pierwszy obiekt binarny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-127">The first binary object.</span>
          </span>
        </param>
        <param name="binary2">
          <span data-ttu-id="7ee2e-128">Drugi obiekt binarny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-128">The second binary object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ee2e-129">Opisuje relację nierówności między dwoma obiektami binarnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-129">Describes the inequality relationship between two binary objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ee2e-130">
            <see langword="true" /> Jeśli nie są równe; obiekty binarne w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-130">
              <see langword="true" /> if the binary objects are not equal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ee2e-131">Zwraca `false` obu `null`, ale zwraca `true` jeśli spełniony jest `null`.</span><span class="sxs-lookup"><span data-stu-id="7ee2e-131">Returns `false` if both are `null`, but returns `true` if either is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public byte[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ToArray();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7ee2e-132">Zwraca tablicę bajtów reprezentujący bieżący obiekt binarny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-132">Returns an array of bytes that represents the current binary object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ee2e-133">Tablica bajtów zawierająca wartość bieżącego obiektu binarnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-133">A byte array that contains the value of the current binary object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Binary.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7ee2e-134">Zwraca <see cref="T:System.String" /> reprezentujący bieżący obiekt binarny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-134">Returns a <see cref="T:System.String" /> that represents the current binary object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ee2e-135">A <see cref="T:System.String" /> reprezentujący bieżący obiekt binarny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ee2e-135">A <see cref="T:System.String" /> that represents the current binary object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>