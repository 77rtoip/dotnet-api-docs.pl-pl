<Type Name="ITable&lt;TEntity&gt;" FullName="System.Data.Linq.ITable&lt;TEntity&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d2e2f1fff2aa010514ae27801284aae05717ff2f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69128055" /></Metadata><TypeSignature Language="C#" Value="public interface ITable&lt;TEntity&gt; : System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.Linq.IQueryable&lt;TEntity&gt; where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITable`1&lt;class TEntity&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.ITable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITable(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IQueryable(Of TEntity)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic interface class ITable : System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::Linq::IQueryable&lt;TEntity&gt;" />
  <TypeSignature Language="F#" Value="type ITable&lt;'Entity (requires 'Entity : null)&gt; = interface&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TEntity&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity"><span data-ttu-id="7faa3-101">Typ danych w tabeli.</span><span class="sxs-lookup"><span data-stu-id="7faa3-101">The type of the data in the table.</span></span></typeparam>
    <summary><span data-ttu-id="7faa3-102">Reprezentuje tabelę określonego typu w źródłowej bazie danych.</span><span class="sxs-lookup"><span data-stu-id="7faa3-102">Represents a table for a particular type in the underlying database.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7faa3-103">Aby uzyskać więcej informacji, zobacz <xref:System.Data.Linq.Table%601>.</span><span class="sxs-lookup"><span data-stu-id="7faa3-103">For more information, see <xref:System.Data.Linq.Table%601>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="abstract member Attach : 'Entity -&gt; unit" Usage="iTable.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="7faa3-104">Obiekt, który ma zostać dodany.</span><span class="sxs-lookup"><span data-stu-id="7faa3-104">The object to be added.</span></span></param>
        <summary><span data-ttu-id="7faa3-105">Gdy jest zastępowany, dołącza jednostkę rozłączoną lub "odłączoną" do nowej <see cref="T:System.Data.Linq.DataContext" /> , gdy oryginalne wartości są wymagane do optymistycznych kontroli współbieżności.</span><span class="sxs-lookup"><span data-stu-id="7faa3-105">When overridden, attaches a disconnected or "detached" entity to a new <see cref="T:System.Data.Linq.DataContext" /> when original values are required for optimistic concurrency checks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7faa3-106">Aby uzyskać więcej informacji, zobacz <xref:System.Data.Linq.Table%601.Attach%2A>.</span><span class="sxs-lookup"><span data-stu-id="7faa3-106">For more information, see <xref:System.Data.Linq.Table%601.Attach%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable`1.DeleteOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteOnSubmit(TEntity entity);" />
      <MemberSignature Language="F#" Value="abstract member DeleteOnSubmit : 'Entity -&gt; unit" Usage="iTable.DeleteOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="7faa3-107">Obiekt do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="7faa3-107">The object to delete.</span></span></param>
        <summary><span data-ttu-id="7faa3-108">Gdy jest zastępowany, program umieszcza jednostkę z tej tabeli <see langword="pending delete" /> w stanie.</span><span class="sxs-lookup"><span data-stu-id="7faa3-108">When overridden, puts an entity from this table into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7faa3-109">Aby uzyskać więcej informacji, zobacz <xref:System.Data.Linq.Table%601.DeleteOnSubmit%2A>.</span><span class="sxs-lookup"><span data-stu-id="7faa3-109">For more information, see <xref:System.Data.Linq.Table%601.DeleteOnSubmit%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable`1.InsertOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertOnSubmit(TEntity entity);" />
      <MemberSignature Language="F#" Value="abstract member InsertOnSubmit : 'Entity -&gt; unit" Usage="iTable.InsertOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="7faa3-110">Obiekt do wstawienia.</span><span class="sxs-lookup"><span data-stu-id="7faa3-110">The object to insert.</span></span></param>
        <summary><span data-ttu-id="7faa3-111">Gdy jest <see langword="pending insert" /> zastępowany, dodaje jednostkę w stanie do tego <see cref="T:System.Data.Linq.ITable`1" />.</span><span class="sxs-lookup"><span data-stu-id="7faa3-111">When overridden, adds an entity in a <see langword="pending insert" /> state to this <see cref="T:System.Data.Linq.ITable`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7faa3-112">Aby uzyskać więcej informacji, zobacz <xref:System.Data.Linq.Table%601.InsertOnSubmit%2A>.</span><span class="sxs-lookup"><span data-stu-id="7faa3-112">For more information, see <xref:System.Data.Linq.Table%601.InsertOnSubmit%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
