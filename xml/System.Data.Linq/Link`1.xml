<Type Name="Link&lt;T&gt;" FullName="System.Data.Linq.Link&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9b4d8307faa0473b3e65d4fb13aeb4557c6c5693" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36689245" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Link&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Link`1&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Link`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure Link(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class Link" />
  <TypeSignature Language="F#" Value="type Link&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">Typ elementów w źródle opóźnieniem.</typeparam>
    <summary>Umożliwia ładowanie odłożone poszczególnych właściwości (podobnie jak <see cref="T:System.Data.Linq.EntityRef`1" />).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po przypisaniu odroczonego źródła (<xref:System.Collections.Generic.IEnumerable%601>) do <xref:System.Data.Linq.Link%601>, <xref:System.Data.Linq.Link%601> ładuje wartość wyliczając źródłowego pierwszy czasu <xref:System.Data.Linq.Link%601.Value%2A> dostępu do właściwości.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Data.Linq.EntityRef`1" />
    <altmember cref="T:System.Data.Linq.EntitySet`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Linq.Link`1" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Link (System.Collections.Generic.IEnumerable&lt;T&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Link`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (source As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Link(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="new System.Data.Linq.Link&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Data.Linq.Link&lt;'T&gt;" Usage="new System.Data.Linq.Link&lt;'T&gt; source" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="source">Kolekcja źródłowa.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Linq.Link`1" /> struktury, umieszczając odwołanie do źródła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor umożliwia inicjowanie <xref:System.Data.Linq.Link%601> z ładujący odroczonego wartość (implementuje <xref:System.Collections.Generic.IEnumerable%601>)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Link (System.Data.Linq.Link&lt;T&gt; link);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Data.Linq.Link`1&lt;!T&gt; link) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Link`1.#ctor(System.Data.Linq.Link{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (link As Link(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Link(System::Data::Linq::Link&lt;T&gt; link);" />
      <MemberSignature Language="F#" Value="new System.Data.Linq.Link&lt;'T&gt; : System.Data.Linq.Link&lt;'T&gt; -&gt; System.Data.Linq.Link&lt;'T&gt;" Usage="new System.Data.Linq.Link&lt;'T&gt; link" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="link" Type="System.Data.Linq.Link&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="link">
          <see cref="T:System.Data.Linq.Link`1" /> Wystąpienie, z których chcesz skopiować.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Linq.Link`1" /> struktury przez skopiowanie wewnętrzny stan z innego <see cref="T:System.Data.Linq.Link`1" /> wystąpienia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Link (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Link`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Link(T value);" />
      <MemberSignature Language="F#" Value="new System.Data.Linq.Link&lt;'T&gt; : 'T -&gt; System.Data.Linq.Link&lt;'T&gt;" Usage="new System.Data.Linq.Link&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">Wartość właściwości.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Linq.Link`1" /> struktury za pomocą odwołań do wartości właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor należy użyć, gdy wartość właściwości jest już znany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasLoadedOrAssignedValue">
      <MemberSignature Language="C#" Value="public bool HasLoadedOrAssignedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasLoadedOrAssignedValue" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Link`1.HasLoadedOrAssignedValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasLoadedOrAssignedValue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasLoadedOrAssignedValue { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasLoadedOrAssignedValue : bool" Usage="System.Data.Linq.Link&lt;'T&gt;.HasLoadedOrAssignedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa, czy <see cref="T:System.Data.Linq.Link`1" /> został załadowany lub przypisana wartość.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Data.Linq.Link`1" /> został załadowany albo przypisaną wartość; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "Załadowany" oznacza, że dane zostały załadowane w czasie materialization lub ładowanie odłożone. "Przypisane" oznacza przyznanymi przez Ciebie ręcznie danych wartości.  
  
 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] używa tej właściwości, aby upewnić się, że <xref:System.Data.Linq.Link%601> ma wartość, tak aby nie powoduje wyzwolenia w celu dostępu odłożone ładowanie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="C#" Value="public bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Link`1.HasValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValue { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValue : bool" Usage="System.Data.Linq.Link&lt;'T&gt;.HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą, czy źródłowy ma wartość.</summary>
        <value>Zwraca <see langword="true" /> Jeśli źródła ma wartość przypisaną lub załadować (w tym null).</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Link`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); void set(T value); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T with get, set" Usage="System.Data.Linq.Link&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość przypisana do lub ładowane przez <see cref="T:System.Data.Linq.Link`1" />.</summary>
        <value>Wartość tej właściwości opóźnieniem.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>