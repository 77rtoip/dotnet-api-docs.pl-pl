<Type Name="ITable" FullName="System.Data.Linq.ITable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9d98f1ba77807707cbdd540c70ee9ea706981ed" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ITable : System.Collections.IEnumerable, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITable implements class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.ITable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITable&#xA;Implements IEnumerable, IQueryable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITable : System::Collections::IEnumerable, System::Linq::IQueryable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="669d0-101">Używany w scenariuszach lekko typu zapytania.</span>
      <span class="sxs-lookup">
        <span data-stu-id="669d0-101">Used for weakly typed query scenarios.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="669d0-102">Aby uzyskać więcej informacji na temat metod, zobacz <xref:System.Data.Linq.Table%601>.</span><span class="sxs-lookup"><span data-stu-id="669d0-102">For more information about methods, see <xref:System.Data.Linq.Table%601>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="669d0-103">Umożliwia zdeserializowany jednostek ma zostać skojarzony z nowe wystąpienie klasy <see cref="T:System.Data.Linq.DataContext" /> tak, że mogą zostać zaktualizowane lub usunięte z bazy danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-103">Allows deserialized entities to be associated with a new instance of a <see cref="T:System.Data.Linq.DataContext" /> so that they can be updated or deleted from the database.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="669d0-104">Aby uzyskać więcej informacji o sposobie używania tej metody, zobacz [pobierania danych i CUD operacje w aplikacjach warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="669d0-104">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="669d0-105">Jeśli brakuje wymaganego elementu członkowskiego <xref:System.Data.Linq.ChangeConflictException> jest generowany podczas <xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</span><span class="sxs-lookup"><span data-stu-id="669d0-105">If a required member is missing, a <xref:System.Data.Linq.ChangeConflictException> is thrown during <xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="669d0-106">Jednostka jest dołączony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-106">The entity to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="669d0-107">Dołącza jednostce <see cref="T:System.Data.Linq.DataContext" /> w stanie bez modyfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-107">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="669d0-108">Aby uzyskać więcej informacji o sposobie używania tej metody, zobacz [pobierania danych i CUD operacje w aplikacjach warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="669d0-108">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (object entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(object entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As Object, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Object ^ entity, bool asModified);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="669d0-109">Zestaw jednostek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-109">The collection of entities.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="669d0-110">
            <see langword="true" /> Aby dołączyć jednostek zmienione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-110">
              <see langword="true" /> to attach the entities as modified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="669d0-111">Dołącza wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w stanie zmodyfikowany lub bez modyfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-111">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="669d0-112">Aby uzyskać więcej informacji o sposobie używania tej metody, zobacz [pobierania danych i CUD operacje w aplikacjach warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="669d0-112">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (object entity, object original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(object entity, object original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As Object, original As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Object ^ entity, System::Object ^ original);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="original" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="669d0-113">Jednostka jest dołączony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-113">The entity to be attached.</span>
          </span>
        </param>
        <param name="original">
          <span data-ttu-id="669d0-114">Wystąpienie typu jednostki z elementów członkowskich danych, które zawierają oryginalnych wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-114">An instance of the same entity type with data members that contain the original values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="669d0-115">Dołącza jednostce <see cref="T:System.Data.Linq.DataContext" /> w obu stanie zmodyfikowany lub zmodyfikowane przez określenie zarówno jednostki i oryginalnego stanu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-115">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="669d0-116">Aby uzyskać więcej informacji o sposobie używania tej metody, zobacz [pobierania danych i CUD operacje w aplikacjach warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="669d0-116">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AttachAll">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="669d0-117">Dołącza wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w stanie zmodyfikowany lub bez modyfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-117">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AttachAll">
      <MemberSignature Language="C#" Value="public void AttachAll (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachAll(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll (entities As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachAll(System::Collections::IEnumerable ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="669d0-118">Zestaw jednostek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-118">The collection of entities.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="669d0-119">Dołącza wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w stanie zmodyfikowany lub bez modyfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-119">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="669d0-120">Aby uzyskać więcej informacji o sposobie używania tej metody, zobacz [pobierania danych i CUD operacje w aplikacjach warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="669d0-120">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachAll">
      <MemberSignature Language="C#" Value="public void AttachAll (System.Collections.IEnumerable entities, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachAll(class System.Collections.IEnumerable entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll (entities As IEnumerable, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachAll(System::Collections::IEnumerable ^ entities, bool asModified);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="669d0-121">Zestaw jednostek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-121">The collection of entities.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="669d0-122">
            <see langword="true" /> Aby dołączyć jednostek zmienione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-122">
              <see langword="true" /> to attach the entities as modified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="669d0-123">Dołącza wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w stanie zmodyfikowany lub bez modyfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-123">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="669d0-124">Aby uzyskać więcej informacji o sposobie używania tej metody, zobacz [pobierania danych i CUD operacje w aplikacjach warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="669d0-124">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ITable.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As DataContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataContext ^ Context { System::Data::Linq::DataContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="669d0-125">Pobiera <see cref="T:System.Data.Linq.DataContext" /> który został użyty do pobrania to <see cref="T:System.Data.Linq.ITable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-125">Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.ITable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="669d0-126">
            <see cref="T:System.Data.Linq.DataContext" /> Używane do pobierania <see cref="T:System.Data.Linq.ITable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-126">The <see cref="T:System.Data.Linq.DataContext" /> used to retrieve the <see cref="T:System.Data.Linq.ITable" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAllOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteAllOnSubmit (entities As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteAllOnSubmit(System::Collections::IEnumerable ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="669d0-127">Kolekcja, z których wszystkie elementy są usuwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-127">The collection from which all items are removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="669d0-128">Umieszcza wszystkie obiekty z kolekcji do <see langword="pending delete" /> stanu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-128">Puts all entities from the collection into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="669d0-129">Wywołanie <xref:System.Data.Linq.DataContext.SubmitChanges%2A> w celu wykonania rzeczywiste usunięcie w bazie danych.</span><span class="sxs-lookup"><span data-stu-id="669d0-129">Call <xref:System.Data.Linq.DataContext.SubmitChanges%2A> to perform the actual deletion in the database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteOnSubmit (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteOnSubmit(System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="669d0-130">Jednostka, która ma zostać usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-130">The entity to be removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="669d0-131">Umieszcza jednostki z tej tabeli do <see langword="pending delete" /> stanu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-131">Puts an entity from this table into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="669d0-132">Musi być dołączony odłączonych jednostek, aby można było usunąć.</span><span class="sxs-lookup"><span data-stu-id="669d0-132">Disconnected entities must be attached before they can be deleted.</span></span> <span data-ttu-id="669d0-133">Wywołanie <xref:System.Data.Linq.DataContext.SubmitChanges%2A> w celu wykonania rzeczywiste usunięcie w bazie danych.</span><span class="sxs-lookup"><span data-stu-id="669d0-133">Call <xref:System.Data.Linq.DataContext.SubmitChanges%2A> to perform the actual deletion in the database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiedMembers">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModifiedMembers (entity As Object) As ModifiedMemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ GetModifiedMembers(System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="669d0-134">Jednostka, z którego można pobrać tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-134">The entity from which to get the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="669d0-135">Zwraca tablicę zmodyfikowane elementy członkowskie, które zawierają ich bieżących i oryginalnych wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-135">Returns an array of modified members that contain their current and original values.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalEntityState">
      <MemberSignature Language="C#" Value="public object GetOriginalEntityState (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetOriginalEntityState(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalEntityState (entity As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetOriginalEntityState(System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="669d0-136">Jednostka, w których pierwotna wartość ma być pobrana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-136">The entity whose original value is to be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="669d0-137">Pobiera oryginalnych wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-137">Retrieves original values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="669d0-138">Kopia oryginalna jednostka.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-138">A copy of the original entity.</span>
          </span>
          <span data-ttu-id="669d0-139">Ma wartość null, jeśli jednostka przekazano nie są śledzone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-139">The value is null if the entity passed in is not tracked.</span>
          </span>
          <span data-ttu-id="669d0-140">Odłączonych jednostek odesłana przez klienta musi być dołączony przed <see cref="T:System.Data.Linq.DataContext" /> rozpocząć śledzenie stanu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-140">Disconnected entities sent back by a client must be attached before the <see cref="T:System.Data.Linq.DataContext" /> can begin to track their state.</span>
          </span>
          <span data-ttu-id="669d0-141">"Pierwotnego stanu" nowo dołączona jednostki jest określana na podstawie wartości dostarczany przez klienta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-141">The "original state" of a newly attached entity is established based on values supplied by the client.</span>
          </span>
          <span data-ttu-id="669d0-142">Kontekst danych nie śledzi stan odłączonych jednostek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-142">The data context does not track the state of disconnected entities.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="669d0-143">Należy pamiętać o następujących kwestiach:</span><span class="sxs-lookup"><span data-stu-id="669d0-143">Note the following:</span></span>  
  
-   <span data-ttu-id="669d0-144">Argument jednostki musi być inne niż null.</span><span class="sxs-lookup"><span data-stu-id="669d0-144">The entity argument must be non-null.</span></span> <span data-ttu-id="669d0-145">W przeciwnym razie jest zgłaszany wyjątek argumentu o wartości null.</span><span class="sxs-lookup"><span data-stu-id="669d0-145">Otherwise, a null argument exception is thrown.</span></span>  
  
-   <span data-ttu-id="669d0-146">W przypadku silnie typizowaną (`TEntity`), typ musi być zamapowana i musi być typu jednostki.</span><span class="sxs-lookup"><span data-stu-id="669d0-146">In the case of the strongly typed (`TEntity`) method, the type must be mapped and must be an entity type.</span></span> <span data-ttu-id="669d0-147">Oznacza to musi on mieć informacji o identyfikatorze obiektu jego mapowanie.</span><span class="sxs-lookup"><span data-stu-id="669d0-147">That is, it must have object ID information in its mapping.</span></span> <span data-ttu-id="669d0-148">W przeciwnym razie niewłaściwego typu wyjątku.</span><span class="sxs-lookup"><span data-stu-id="669d0-148">Otherwise, a wrong type exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAllOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAllOnSubmit (entities As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAllOnSubmit(System::Collections::IEnumerable ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="669d0-149">Jednostki do dodania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-149">The entities to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="669d0-150">Dodaje wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w <see langword="pending insert" /> stanu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-150">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a <see langword="pending insert" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="669d0-151">Wywołanie <xref:System.Data.Linq.DataContext.SubmitChanges%2A> przeprowadzić rzeczywiste wstawiania do bazy danych.</span><span class="sxs-lookup"><span data-stu-id="669d0-151">Call <xref:System.Data.Linq.DataContext.SubmitChanges%2A> to perform the actual insertion into the database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertOnSubmit (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertOnSubmit(System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="669d0-152">Jednostka do dodania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-152">The entity to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="669d0-153">Dodaje jednostki w <see langword="pending insert" /> stanu do tej tabeli.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-153">Adds an entity in a <see langword="pending insert" /> state to this table.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="669d0-154">Wywołanie <xref:System.Data.Linq.DataContext.SubmitChanges%2A> przeprowadzić rzeczywiste wstawiania do bazy danych.</span><span class="sxs-lookup"><span data-stu-id="669d0-154">Call <xref:System.Data.Linq.DataContext.SubmitChanges%2A> to perform the actual insertion into the database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ITable.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="669d0-155">Wskazuje, jeśli typ jednostek zawarty w tym <see cref="T:System.Data.Linq.ITable" /> wystąpienie ma klucz podstawowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-155">Indicates if the type of the entities contained in this <see cref="T:System.Data.Linq.ITable" /> instance has a primary key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="669d0-156">Zwraca <see langword="true" /> Jeśli typ jednostki nie ma klucza podstawowego; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="669d0-156">Returns <see langword="true" /> if the entity type does not have a primary key; otherwise, false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>