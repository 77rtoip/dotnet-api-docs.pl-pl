<Type Name="ITable" FullName="System.Data.Linq.ITable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f8b8f2e2bdd0c52e384f470a3a124febf32ac54e" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37680442" /></Metadata><TypeSignature Language="C#" Value="public interface ITable : System.Collections.IEnumerable, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITable implements class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.ITable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITable&#xA;Implements IEnumerable, IQueryable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITable : System::Collections::IEnumerable, System::Linq::IQueryable" />
  <TypeSignature Language="F#" Value="type ITable = interface&#xA;    interface IEnumerable&#xA;    interface IQueryable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="8e12e-101">Używany w scenariuszach słabo typizowaną zapytania.</span><span class="sxs-lookup"><span data-stu-id="8e12e-101">Used for weakly typed query scenarios.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e12e-102">Aby uzyskać więcej informacji o metodach, zobacz <xref:System.Data.Linq.Table%601>.</span><span class="sxs-lookup"><span data-stu-id="8e12e-102">For more information about methods, see <xref:System.Data.Linq.Table%601>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8e12e-103">Umożliwia zdeserializowany jednostek, które ma zostać skojarzony z nowe wystąpienie klasy <see cref="T:System.Data.Linq.DataContext" /> tak, aby mogą zostać zaktualizowane lub usunięte z bazy danych.</span><span class="sxs-lookup"><span data-stu-id="8e12e-103">Allows deserialized entities to be associated with a new instance of a <see cref="T:System.Data.Linq.DataContext" /> so that they can be updated or deleted from the database.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e12e-104">Aby uzyskać więcej informacji na temat sposobu używania tej metody, zobacz [pobierania danych i operacje CUD w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="8e12e-104">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="8e12e-105">Jeśli brakuje wymaganego elementu członkowskiego <xref:System.Data.Linq.ChangeConflictException> jest zgłaszany podczas <xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</span><span class="sxs-lookup"><span data-stu-id="8e12e-105">If a required member is missing, a <xref:System.Data.Linq.ChangeConflictException> is thrown during <xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="abstract member Attach : obj -&gt; unit" Usage="iTable.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="8e12e-106">Jednostka do podłączenia.</span><span class="sxs-lookup"><span data-stu-id="8e12e-106">The entity to be attached.</span></span></param>
        <summary><span data-ttu-id="8e12e-107">Dołącza jednostkę, aby <see cref="T:System.Data.Linq.DataContext" /> w stanie zostały zmodyfikowane.</span><span class="sxs-lookup"><span data-stu-id="8e12e-107">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e12e-108">Aby uzyskać więcej informacji na temat sposobu używania tej metody, zobacz [pobierania danych i operacje CUD w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="8e12e-108">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (object entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(object entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As Object, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Object ^ entity, bool asModified);" />
      <MemberSignature Language="F#" Value="abstract member Attach : obj * bool -&gt; unit" Usage="iTable.Attach (entity, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="8e12e-109">Kolekcja jednostek.</span><span class="sxs-lookup"><span data-stu-id="8e12e-109">The collection of entities.</span></span></param>
        <param name="asModified"><span data-ttu-id="8e12e-110"><see langword="true" /> Aby dołączyć jednostki jako zmodyfikowana.</span><span class="sxs-lookup"><span data-stu-id="8e12e-110"><see langword="true" /> to attach the entities as modified.</span></span></param>
        <summary><span data-ttu-id="8e12e-111">Dołącza wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w stanie zmodyfikowany lub zostały zmodyfikowane.</span><span class="sxs-lookup"><span data-stu-id="8e12e-111">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e12e-112">Aby uzyskać więcej informacji na temat sposobu używania tej metody, zobacz [pobierania danych i operacje CUD w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="8e12e-112">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (object entity, object original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(object entity, object original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As Object, original As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Object ^ entity, System::Object ^ original);" />
      <MemberSignature Language="F#" Value="abstract member Attach : obj * obj -&gt; unit" Usage="iTable.Attach (entity, original)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="original" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="8e12e-113">Jednostka do podłączenia.</span><span class="sxs-lookup"><span data-stu-id="8e12e-113">The entity to be attached.</span></span></param>
        <param name="original"><span data-ttu-id="8e12e-114">Wystąpienie typu jednostki z elementów członkowskich danych, które zawierają oryginalnych wartości.</span><span class="sxs-lookup"><span data-stu-id="8e12e-114">An instance of the same entity type with data members that contain the original values.</span></span></param>
        <summary><span data-ttu-id="8e12e-115">Dołącza jednostkę, aby <see cref="T:System.Data.Linq.DataContext" /> w dowolnym stanie zmodyfikowany lub zostały zmodyfikowane przez określenie jednostki i stanu pierwotnego.</span><span class="sxs-lookup"><span data-stu-id="8e12e-115">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e12e-116">Aby uzyskać więcej informacji na temat sposobu używania tej metody, zobacz [pobierania danych i operacje CUD w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="8e12e-116">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AttachAll">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8e12e-117">Dołącza wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w stanie zmodyfikowany lub zostały zmodyfikowane.</span><span class="sxs-lookup"><span data-stu-id="8e12e-117">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AttachAll">
      <MemberSignature Language="C#" Value="public void AttachAll (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachAll(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll (entities As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachAll(System::Collections::IEnumerable ^ entities);" />
      <MemberSignature Language="F#" Value="abstract member AttachAll : System.Collections.IEnumerable -&gt; unit" Usage="iTable.AttachAll entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="8e12e-118">Kolekcja jednostek.</span><span class="sxs-lookup"><span data-stu-id="8e12e-118">The collection of entities.</span></span></param>
        <summary><span data-ttu-id="8e12e-119">Dołącza wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w stanie zmodyfikowany lub zostały zmodyfikowane.</span><span class="sxs-lookup"><span data-stu-id="8e12e-119">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e12e-120">Aby uzyskać więcej informacji na temat sposobu używania tej metody, zobacz [pobierania danych i operacje CUD w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="8e12e-120">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachAll">
      <MemberSignature Language="C#" Value="public void AttachAll (System.Collections.IEnumerable entities, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachAll(class System.Collections.IEnumerable entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll (entities As IEnumerable, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachAll(System::Collections::IEnumerable ^ entities, bool asModified);" />
      <MemberSignature Language="F#" Value="abstract member AttachAll : System.Collections.IEnumerable * bool -&gt; unit" Usage="iTable.AttachAll (entities, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="8e12e-121">Kolekcja jednostek.</span><span class="sxs-lookup"><span data-stu-id="8e12e-121">The collection of entities.</span></span></param>
        <param name="asModified"><span data-ttu-id="8e12e-122"><see langword="true" /> Aby dołączyć jednostki jako zmodyfikowana.</span><span class="sxs-lookup"><span data-stu-id="8e12e-122"><see langword="true" /> to attach the entities as modified.</span></span></param>
        <summary><span data-ttu-id="8e12e-123">Dołącza wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w stanie zmodyfikowany lub zostały zmodyfikowane.</span><span class="sxs-lookup"><span data-stu-id="8e12e-123">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e12e-124">Aby uzyskać więcej informacji na temat sposobu używania tej metody, zobacz [pobierania danych i operacje CUD w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="8e12e-124">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ITable.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As DataContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataContext ^ Context { System::Data::Linq::DataContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Data.Linq.DataContext" Usage="System.Data.Linq.ITable.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8e12e-125">Pobiera <see cref="T:System.Data.Linq.DataContext" /> który został użyty do pobrania to <see cref="T:System.Data.Linq.ITable" />.</span><span class="sxs-lookup"><span data-stu-id="8e12e-125">Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.ITable" />.</span></span></summary>
        <value><span data-ttu-id="8e12e-126"><see cref="T:System.Data.Linq.DataContext" /> Służy do pobierania <see cref="T:System.Data.Linq.ITable" />.</span><span class="sxs-lookup"><span data-stu-id="8e12e-126">The <see cref="T:System.Data.Linq.DataContext" /> used to retrieve the <see cref="T:System.Data.Linq.ITable" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAllOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteAllOnSubmit (entities As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteAllOnSubmit(System::Collections::IEnumerable ^ entities);" />
      <MemberSignature Language="F#" Value="abstract member DeleteAllOnSubmit : System.Collections.IEnumerable -&gt; unit" Usage="iTable.DeleteAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="8e12e-127">Kolekcja, w którym wszystkie elementy są usuwane.</span><span class="sxs-lookup"><span data-stu-id="8e12e-127">The collection from which all items are removed.</span></span></param>
        <summary><span data-ttu-id="8e12e-128">Umieszcza wszystkie jednostki z kolekcji do <see langword="pending delete" /> stanu.</span><span class="sxs-lookup"><span data-stu-id="8e12e-128">Puts all entities from the collection into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e12e-129">Wywołaj <xref:System.Data.Linq.DataContext.SubmitChanges%2A> do wykonania rzeczywistego usunięcia w bazie danych.</span><span class="sxs-lookup"><span data-stu-id="8e12e-129">Call <xref:System.Data.Linq.DataContext.SubmitChanges%2A> to perform the actual deletion in the database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteOnSubmit (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteOnSubmit(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="abstract member DeleteOnSubmit : obj -&gt; unit" Usage="iTable.DeleteOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="8e12e-130">Jednostka, która ma zostać usunięty.</span><span class="sxs-lookup"><span data-stu-id="8e12e-130">The entity to be removed.</span></span></param>
        <summary><span data-ttu-id="8e12e-131">Umieszcza jednostki z tej tabeli do <see langword="pending delete" /> stanu.</span><span class="sxs-lookup"><span data-stu-id="8e12e-131">Puts an entity from this table into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e12e-132">Odłączone jednostki musi być podłączony, aby można było je usunąć.</span><span class="sxs-lookup"><span data-stu-id="8e12e-132">Disconnected entities must be attached before they can be deleted.</span></span> <span data-ttu-id="8e12e-133">Wywołaj <xref:System.Data.Linq.DataContext.SubmitChanges%2A> do wykonania rzeczywistego usunięcia w bazie danych.</span><span class="sxs-lookup"><span data-stu-id="8e12e-133">Call <xref:System.Data.Linq.DataContext.SubmitChanges%2A> to perform the actual deletion in the database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiedMembers">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModifiedMembers (entity As Object) As ModifiedMemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ GetModifiedMembers(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="abstract member GetModifiedMembers : obj -&gt; System.Data.Linq.ModifiedMemberInfo[]" Usage="iTable.GetModifiedMembers entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="8e12e-134">Jednostki, z którego można pobrać tablicy.</span><span class="sxs-lookup"><span data-stu-id="8e12e-134">The entity from which to get the array.</span></span></param>
        <summary><span data-ttu-id="8e12e-135">Zwraca tablicę zmodyfikowane elementy członkowskie, które zawierają swoje bieżące i oryginalne wartości.</span><span class="sxs-lookup"><span data-stu-id="8e12e-135">Returns an array of modified members that contain their current and original values.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalEntityState">
      <MemberSignature Language="C#" Value="public object GetOriginalEntityState (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetOriginalEntityState(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalEntityState (entity As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetOriginalEntityState(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="abstract member GetOriginalEntityState : obj -&gt; obj" Usage="iTable.GetOriginalEntityState entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="8e12e-136">Jednostka, w których oryginalna wartość znajduje się do pobrania.</span><span class="sxs-lookup"><span data-stu-id="8e12e-136">The entity whose original value is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="8e12e-137">Pobiera oryginalnych wartości.</span><span class="sxs-lookup"><span data-stu-id="8e12e-137">Retrieves original values.</span></span></summary>
        <returns><span data-ttu-id="8e12e-138">Kopia oryginalna jednostka.</span><span class="sxs-lookup"><span data-stu-id="8e12e-138">A copy of the original entity.</span></span> <span data-ttu-id="8e12e-139">Ma wartość null, jeśli jednostka przekazanej nie jest śledzone.</span><span class="sxs-lookup"><span data-stu-id="8e12e-139">The value is null if the entity passed in is not tracked.</span></span> <span data-ttu-id="8e12e-140">Odłączone jednostki odesłana przez klienta musi być dołączony przed <see cref="T:System.Data.Linq.DataContext" /> rozpocząć śledzenie ich stanu.</span><span class="sxs-lookup"><span data-stu-id="8e12e-140">Disconnected entities sent back by a client must be attached before the <see cref="T:System.Data.Linq.DataContext" /> can begin to track their state.</span></span> <span data-ttu-id="8e12e-141">"Pierwotnego stanu" w nowo dołączona jednostki zostanie nawiązane, na podstawie wartości dostarczone przez klienta.</span><span class="sxs-lookup"><span data-stu-id="8e12e-141">The "original state" of a newly attached entity is established based on values supplied by the client.</span></span> <span data-ttu-id="8e12e-142">Kontekst danych nie śledzi stan odłączonych jednostek.</span><span class="sxs-lookup"><span data-stu-id="8e12e-142">The data context does not track the state of disconnected entities.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e12e-143">Należy pamiętać o następujących kwestiach:</span><span class="sxs-lookup"><span data-stu-id="8e12e-143">Note the following:</span></span>  
  
-   <span data-ttu-id="8e12e-144">Argument jednostki musi być inna niż null.</span><span class="sxs-lookup"><span data-stu-id="8e12e-144">The entity argument must be non-null.</span></span> <span data-ttu-id="8e12e-145">W przeciwnym razie jest zgłaszany wyjątek argumentu o wartości null.</span><span class="sxs-lookup"><span data-stu-id="8e12e-145">Otherwise, a null argument exception is thrown.</span></span>  
  
-   <span data-ttu-id="8e12e-146">W przypadku silnie typizowaną (`TEntity`) metody, musi być zmapowany typ i musi być typem jednostki.</span><span class="sxs-lookup"><span data-stu-id="8e12e-146">In the case of the strongly typed (`TEntity`) method, the type must be mapped and must be an entity type.</span></span> <span data-ttu-id="8e12e-147">Oznacza to musi on mieć informacji o identyfikatorze obiektu w jego mapowania.</span><span class="sxs-lookup"><span data-stu-id="8e12e-147">That is, it must have object ID information in its mapping.</span></span> <span data-ttu-id="8e12e-148">W przeciwnym razie jest zgłaszany wyjątek nieprawidłowego typu.</span><span class="sxs-lookup"><span data-stu-id="8e12e-148">Otherwise, a wrong type exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAllOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAllOnSubmit (entities As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAllOnSubmit(System::Collections::IEnumerable ^ entities);" />
      <MemberSignature Language="F#" Value="abstract member InsertAllOnSubmit : System.Collections.IEnumerable -&gt; unit" Usage="iTable.InsertAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="8e12e-149">Jednostki do dodania.</span><span class="sxs-lookup"><span data-stu-id="8e12e-149">The entities to add.</span></span></param>
        <summary><span data-ttu-id="8e12e-150">Dodaje wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w <see langword="pending insert" /> stanu.</span><span class="sxs-lookup"><span data-stu-id="8e12e-150">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a <see langword="pending insert" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e12e-151">Wywołaj <xref:System.Data.Linq.DataContext.SubmitChanges%2A> do wykonania rzeczywistego wstawiania do bazy danych.</span><span class="sxs-lookup"><span data-stu-id="8e12e-151">Call <xref:System.Data.Linq.DataContext.SubmitChanges%2A> to perform the actual insertion into the database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertOnSubmit (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertOnSubmit(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="abstract member InsertOnSubmit : obj -&gt; unit" Usage="iTable.InsertOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="8e12e-152">Jednostka, która ma zostać dodana.</span><span class="sxs-lookup"><span data-stu-id="8e12e-152">The entity to be added.</span></span></param>
        <summary><span data-ttu-id="8e12e-153">Dodaje jednostki w usłudze <see langword="pending insert" /> stanu do tej tabeli.</span><span class="sxs-lookup"><span data-stu-id="8e12e-153">Adds an entity in a <see langword="pending insert" /> state to this table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e12e-154">Wywołaj <xref:System.Data.Linq.DataContext.SubmitChanges%2A> do wykonania rzeczywistego wstawiania do bazy danych.</span><span class="sxs-lookup"><span data-stu-id="8e12e-154">Call <xref:System.Data.Linq.DataContext.SubmitChanges%2A> to perform the actual insertion into the database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ITable.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Linq.ITable.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8e12e-155">Wskazuje, jeśli typ jednostek zawarty w tym <see cref="T:System.Data.Linq.ITable" /> wystąpienia ma klucz podstawowy.</span><span class="sxs-lookup"><span data-stu-id="8e12e-155">Indicates if the type of the entities contained in this <see cref="T:System.Data.Linq.ITable" /> instance has a primary key.</span></span></summary>
        <value><span data-ttu-id="8e12e-156">Zwraca <see langword="true" /> Jeśli typ jednostki nie ma klucza podstawowego; w przeciwnym razie wartość false.</span><span class="sxs-lookup"><span data-stu-id="8e12e-156">Returns <see langword="true" /> if the entity type does not have a primary key; otherwise, false.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>