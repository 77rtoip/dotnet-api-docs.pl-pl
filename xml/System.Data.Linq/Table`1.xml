<Type Name="Table&lt;TEntity&gt;" FullName="System.Data.Linq.Table&lt;TEntity&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="464ca0511256b1663123b55ea5ac4383f11a22f3" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51312552" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Table&lt;TEntity&gt; : System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource, System.Data.Linq.ITable, System.Linq.IQueryable&lt;TEntity&gt;, System.Linq.IQueryProvider where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Table`1&lt;class TEntity&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Data.Linq.ITable, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;, class System.Linq.IQueryProvider" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Table`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Table(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IListSource, IQueryable(Of TEntity), IQueryProvider, ITable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class Table sealed : System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource, System::Data::Linq::ITable, System::Linq::IQueryable&lt;TEntity&gt;, System::Linq::IQueryProvider" />
  <TypeSignature Language="F#" Value="type Table&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface ITable&#xA;    interface IQueryProvider&#xA;    interface IListSource&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Linq.ITable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity">
      <span data-ttu-id="62fc9-101">Typ danych w tabeli.</span>
      <span class="sxs-lookup">
        <span data-stu-id="62fc9-101">The type of the data in the table.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="62fc9-102">Reprezentuje tabelę dla określonego typu w źródłowej bazie danych.</span>
      <span class="sxs-lookup">
        <span data-stu-id="62fc9-102">Represents a table for a particular type in the underlying database.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-103">Ta klasa umożliwia zapytanie dotyczące tabeli i dodawania, usuwania i dołączyć obiektów.</span><span class="sxs-lookup"><span data-stu-id="62fc9-103">This class enables you to query over the table and add, remove, and attach objects.</span></span>  
  
 <span data-ttu-id="62fc9-104">Aplikacja może uzyskiwać dostęp do <xref:System.Data.Linq.Table%601> wystąpienie za pośrednictwem <xref:System.Data.Linq.DataContext.GetTable%2A> lub za pomocą silnie typizowane właściwości dla silnie typizowanej <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="62fc9-104">An application can access a <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> or by using a strongly typed property for the strongly typed <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="62fc9-105">Oznacza to gdy projektant generuje obiekt DataContext, generuje ona właściwości do reprezentowania każdej tabeli.</span><span class="sxs-lookup"><span data-stu-id="62fc9-105">That is, when the designer generates a DataContext object, it generates properties to represent each Table.</span></span> <span data-ttu-id="62fc9-106">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="62fc9-106">For example:</span></span>  
  
```  
[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SignOffTool")]  
public partial class DataClasses1DataContext : System.Data.Linq.DataContext {  
   public System.Data.Linq.Table<User> Users {  
      get {  
         return this.GetTable<User>();  
      }  
   }  
}  
```  
  
 <span data-ttu-id="62fc9-107">W tym silnie typizowaną DataContext mogą uzyskiwać dostęp właściwości użytkowników do pobrania `Table<User>`.</span><span class="sxs-lookup"><span data-stu-id="62fc9-107">For this strongly typed DataContext, you can access the Users property to get `Table<User>`.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62fc9-108">Dołącza jednostkę, aby <see cref="T:System.Data.Linq.DataContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-108">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-109">Użyj `Attach` metody z jednostkami, które zostały utworzone w jednym <xref:System.Data.Linq.DataContext>, serializowany do klienta, a następnie wykonać deserializacji (z powrotem zamiar przeprowadzić aktualizację lub operacja usuwania).</span><span class="sxs-lookup"><span data-stu-id="62fc9-109">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back (with the intention to perform an update or delete operation).</span></span> <span data-ttu-id="62fc9-110">Aby uzyskać więcej informacji, zobacz [pobierania danych i operacje CUD w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="62fc9-110">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="62fc9-111">Nie należy próbować `Attach` jednostki, która nie została odłączona, za pomocą serializacji.</span><span class="sxs-lookup"><span data-stu-id="62fc9-111">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="62fc9-112">Jednostki, które nie zostały zaszeregowane nadal utrzymuje skojarzenia z odroczonego modułów ładujących, które może spowodować nieoczekiwane wyniki, jeśli jednostka staje się śledzone przez drugi kontekstu danych.</span><span class="sxs-lookup"><span data-stu-id="62fc9-112">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 <span data-ttu-id="62fc9-113">Po dołączeniu nowej jednostki odroczone moduły ładujące przeznaczone dla dowolnej kolekcji podrzędnej (na przykład `EntitySet` kolekcji obiektów z skojarzone tabele) są inicjowane.</span><span class="sxs-lookup"><span data-stu-id="62fc9-113">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="62fc9-114">Gdy <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana, elementy członkowskie elementu podrzędnego kolekcje są umieszczane w `Unmodified` stanu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-114">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="62fc9-115">Aby zaktualizować elementów członkowskich kolekcji podrzędnej, należy jawnie wywołać `Attach` i określ tej jednostki.</span><span class="sxs-lookup"><span data-stu-id="62fc9-115">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="62fc9-116">`Attach` Dołącza wszystkie jednostki na grafie obiektu podanego obiektu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-116">`Attach` attaches all entities in the object graph of the provided object.</span></span> <span data-ttu-id="62fc9-117">Na przykład, poniższy kod C#:</span><span class="sxs-lookup"><span data-stu-id="62fc9-117">For example, the following C# code:</span></span>  
  
```  
using (SampleDataContext db = new SampleDataContext()) {  
    Employee employee = new Employee { employeeId = 1 };  
  
    Master master = new Master();  
    master.Employee = employee;  
  
    Child child = new Child();  
    child.Employee = employee;  
  
    db.Employees.Attach(employee);  
  
    master.Child = child;  
  
    db.Masters.InsertOnSubmit(master);  
  
    db.SubmitChanges();  
}  
  
```  
  
 <span data-ttu-id="62fc9-118">Jest równoważny kod języka Visual Basic:</span><span class="sxs-lookup"><span data-stu-id="62fc9-118">The equivalent Visual Basic code is:</span></span>  
  
```  
Using db As New SampleDataContext()    Dim employee As New Employee With { .employeeId = 1 }  
  
    Dim master As New Master()  
    master.Employee = employee  
  
    Dim child As New Child()  
    child.Employee = employee  
  
    db.Employees.Attach(employee)  
  
    master.Child = child  
  
    db.Masters.InsertOnSubmit(master)  
  
    db.SubmitChanges()  
  
End Using  
```  
  
 <span data-ttu-id="62fc9-119">Wywoływanie `Attach` na `Employee` dołącza pracowników, główne i podrzędne, ponieważ `Employee` zawiera relacje z zarówno węzła głównego, jak i podrzędnych.</span><span class="sxs-lookup"><span data-stu-id="62fc9-119">Calling `Attach` on `Employee` attaches employee, master, and child, because the `Employee` has relationships to both master and child.</span></span> <span data-ttu-id="62fc9-120">Należy jawnie wywołać `InsertOnSubmit` Zmień stan z przyłączonych do wstawionego.</span><span class="sxs-lookup"><span data-stu-id="62fc9-120">You must explicitly call `InsertOnSubmit` to change the state from attached to inserted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity -&gt; unit" Usage="table.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="62fc9-121">Oryginalnych wartości jednostki do dołączenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-121">The original values of the entity to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-122">Dołącza jednostki odłączone lub "odłączone" na nową <see cref="T:System.Data.Linq.DataContext" /> podczas oryginalnej wartości są wymagane do kontroli optymistycznej współbieżności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-122">Attaches a disconnected or "detached" entity to a new <see cref="T:System.Data.Linq.DataContext" /> when original values are required for optimistic concurrency checks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-123">Użyj `Attach` metody z jednostkami, które zostały utworzone w jednym <xref:System.Data.Linq.DataContext>, serializowany do klienta, a następnie wykonać deserializacji Wstecz, aby przeprowadzić aktualizację lub operacja usuwania.</span><span class="sxs-lookup"><span data-stu-id="62fc9-123">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back to perform an update or delete operation.</span></span> <span data-ttu-id="62fc9-124">Ponieważ nowe <xref:System.Data.Linq.DataContext> nie ma możliwości śledzenia, oryginalne wartości były dla odłączonych jednostek, klient jest odpowiedzialny za dostarczanie tych wartości.</span><span class="sxs-lookup"><span data-stu-id="62fc9-124">Because the new <xref:System.Data.Linq.DataContext> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values.</span></span> <span data-ttu-id="62fc9-125">W tej wersji programu <xref:System.Data.Linq.Table%601.Attach%2A>, jednostki zakłada, że w jego oryginalnej wartości.</span><span class="sxs-lookup"><span data-stu-id="62fc9-125">In this version of <xref:System.Data.Linq.Table%601.Attach%2A>, the entity is assumed to be in its original value state.</span></span> <span data-ttu-id="62fc9-126">Po wywołaniu tej metody, można zaktualizować jej pola, na przykład wraz z dodatkowymi danymi wysłanych z klienta.</span><span class="sxs-lookup"><span data-stu-id="62fc9-126">After calling this method, you can then update its fields, for example with additional data sent from the client.</span></span>  
  
 <span data-ttu-id="62fc9-127">Po dołączeniu nowej jednostki odroczone moduły ładujące przeznaczone dla dowolnej kolekcji podrzędnej (na przykład `EntitySet` kolekcji obiektów z skojarzone tabele) są inicjowane.</span><span class="sxs-lookup"><span data-stu-id="62fc9-127">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="62fc9-128">Gdy <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana, elementy członkowskie elementu podrzędnego kolekcje są umieszczane w `Unmodified` stanu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-128">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="62fc9-129">Aby zaktualizować elementów członkowskich kolekcji podrzędnej, należy jawnie wywołać `Attach` i określ tej jednostki.</span><span class="sxs-lookup"><span data-stu-id="62fc9-129">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="62fc9-130">Aby uzyskać więcej informacji, zobacz [pobierania danych i operacje CUD w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="62fc9-130">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="62fc9-131">Nie należy próbować `Attach` jednostki, która nie została odłączona, za pomocą serializacji.</span><span class="sxs-lookup"><span data-stu-id="62fc9-131">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="62fc9-132">Jednostki, które nie zostały zaszeregowane nadal utrzymuje skojarzenia z odroczonego modułów ładujących, które może spowodować nieoczekiwane wyniki, jeśli jednostka staje się śledzone przez drugi kontekstu danych.</span><span class="sxs-lookup"><span data-stu-id="62fc9-132">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * bool -&gt; unit" Usage="table.Attach (entity, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="62fc9-133">Jednostka do podłączenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-133">The entity to be attached.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="62fc9-134">
            <see langword="true" /> Aby dołączyć jednostkę ze zmianami; <see langword="false" /> można dołączyć jednostki jako niezmodyfikowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-134">
              <see langword="true" /> to attach the entity as modified; <see langword="false" /> to attach the entity as unmodified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-135">Dołącza jednostkę, aby <see cref="T:System.Data.Linq.DataContext" /> w stanie zmodyfikowany lub zostały zmodyfikowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-135">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-136">Jeśli dołączenie *zmodyfikowana*, jednostki albo musi zadeklarować członka wersji lub nie musi uczestniczyć w Sprawdzanie konfliktu aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="62fc9-136">If attaching *as modified*, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="62fc9-137">Po dołączeniu nowej jednostki odroczone moduły ładujące przeznaczone dla dowolnej kolekcji podrzędnej (na przykład `EntitySet` kolekcji obiektów z skojarzone tabele) są inicjowane.</span><span class="sxs-lookup"><span data-stu-id="62fc9-137">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="62fc9-138">Gdy <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana, elementy członkowskie elementu podrzędnego kolekcje są umieszczane w `Unmodified` stanu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-138">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="62fc9-139">Aby zaktualizować elementów członkowskich kolekcji podrzędnej, należy jawnie wywołać `Attach` i określ tej jednostki.</span><span class="sxs-lookup"><span data-stu-id="62fc9-139">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, TEntity original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, !TEntity original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, original As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, TEntity original);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * 'Entity -&gt; unit" Usage="table.Attach (entity, original)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="original" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="62fc9-140">Jednostka do podłączenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-140">The entity to be attached.</span>
          </span>
        </param>
        <param name="original">
          <span data-ttu-id="62fc9-141">Wystąpienie typu jednostki z elementów członkowskich danych, które zawierają oryginalnych wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-141">An instance of the same entity type with data members that contain the original values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-142">Dołącza jednostkę, aby <see cref="T:System.Data.Linq.DataContext" /> w dowolnym stanie zmodyfikowany lub zostały zmodyfikowane przez określenie jednostki i stanu pierwotnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-142">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-143">W poniższym przykładzie `Customer` obiektu została już skonfigurowana.</span><span class="sxs-lookup"><span data-stu-id="62fc9-143">In the following example, the `Customer` object is already correctly configured.</span></span> <span data-ttu-id="62fc9-144">Możesz wywołać `Attach` bez konieczności powtarzania aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="62fc9-144">You can call `Attach` without having to replay the updates.</span></span>  
  
 <span data-ttu-id="62fc9-145">Po dołączeniu nowej jednostki odroczone moduły ładujące przeznaczone dla dowolnej kolekcji podrzędnej (na przykład `EntitySet` kolekcji obiektów z skojarzone tabele) są inicjowane.</span><span class="sxs-lookup"><span data-stu-id="62fc9-145">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="62fc9-146">Gdy <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana, elementy członkowskie elementu podrzędnego kolekcje są umieszczane w `Unmodified` stanu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-146">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="62fc9-147">Aby zaktualizować elementów członkowskich kolekcji podrzędnej, należy jawnie wywołać `Attach` i określ tej jednostki.</span><span class="sxs-lookup"><span data-stu-id="62fc9-147">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 [!code-csharp[DLinqNTier#4](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#4)]
 [!code-vb[DLinqNTier#4](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AttachAll&lt;TSubEntity&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62fc9-148">Dołącza wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w stanie zmodyfikowany lub zostały zmodyfikowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-148">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-149">Jeśli dołączenie zmodyfikowana, jednostki albo musi zadeklarować członka wersji lub nie musi uczestniczyć w Sprawdzanie konfliktu aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="62fc9-149">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span>  
  
 <span data-ttu-id="62fc9-150">Po dołączeniu nowej jednostki odroczone moduły ładujące przeznaczone dla dowolnej kolekcji podrzędnej (na przykład `EntitySet` kolekcji obiektów z skojarzone tabele) są inicjowane.</span><span class="sxs-lookup"><span data-stu-id="62fc9-150">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="62fc9-151">Gdy <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana, elementy członkowskie elementu podrzędnego kolekcje są umieszczane w `Unmodified` stanu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-151">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="62fc9-152">Aby zaktualizować elementów członkowskich kolekcji podrzędnej, należy jawnie wywołać `Attach` i określ tej jednostki.</span><span class="sxs-lookup"><span data-stu-id="62fc9-152">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="62fc9-153">Aby uzyskać więcej informacji, zobacz [pobierania danych i operacje CUD w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="62fc9-153">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.AttachAll entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="62fc9-154">Typ jednostki do dołączenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-154">The type of entities to attach.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="62fc9-155">Kolekcja jednostek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-155">The collection of entities.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-156">Dołącza wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w stanie zmodyfikowany lub zostały zmodyfikowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-156">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-157">Ta metoda dołącza wszystkie jednostki w kolekcji na nową <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="62fc9-157">This method attaches all entities of a collection to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="62fc9-158">Po dołączeniu nowej jednostki odroczone moduły ładujące przeznaczone dla dowolnej kolekcji podrzędnej (na przykład `EntitySet` kolekcji obiektów z skojarzone tabele) są inicjowane.</span><span class="sxs-lookup"><span data-stu-id="62fc9-158">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="62fc9-159">Gdy <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana, elementy członkowskie elementu podrzędnego kolekcje są umieszczane w `Unmodified` stanu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-159">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="62fc9-160">Aby zaktualizować elementów członkowskich kolekcji podrzędnej, należy jawnie wywołać `Attach` i określ tej jednostki.</span><span class="sxs-lookup"><span data-stu-id="62fc9-160">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="62fc9-161">Aby uzyskać więcej informacji, zobacz [pobierania danych i operacje CUD w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="62fc9-161">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities, bool asModified) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity), asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; * bool -&gt; unit" Usage="table.AttachAll (entities, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="62fc9-162">Typ jednostki do dołączenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-162">The type of entities to attach.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="62fc9-163">Kolekcja jednostek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-163">The collection of entities.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="62fc9-164">
            <see langword="true" /> Jeśli obiekt ma znacznika czasu lub elementu członkowskiego RowVersion; <see langword="false" /> Jeśli oryginalne wartości są używane do sprawdzania optymistycznej współbieżności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-164">
              <see langword="true" /> if the object has a timestamp or RowVersion member; <see langword="false" /> if original values are being used for the optimistic concurrency check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-165">Dołącza wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w stanie zmodyfikowany lub zostały zmodyfikowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-165">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-166">Ta metoda dołącza wszystkie jednostki w kolekcji do <xref:System.Data.Linq.DataContext> albo *zmodyfikowane* lub *niezmodyfikowanego* stanu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-166">This method attaches all entities of a collection to the <xref:System.Data.Linq.DataContext> in either a *modified* or *unmodified* state.</span></span> <span data-ttu-id="62fc9-167">Jeśli dołączenie zmodyfikowana, jednostki albo musi zadeklarować członka wersji lub nie musi uczestniczyć w Sprawdzanie konfliktu aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="62fc9-167">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="62fc9-168">Jeśli dołączenie jako niezmodyfikowany, jednostki zakłada się, że reprezentują oryginalną wartość.</span><span class="sxs-lookup"><span data-stu-id="62fc9-168">If attaching as unmodified, the entity is assumed to represent the original value.</span></span> <span data-ttu-id="62fc9-169">Po wywołaniu tej metody, można zmodyfikować pola jednostki wraz z innymi informacjami z klienta przed <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="62fc9-169">After calling this method, the entity's fields can be modified with other information from the client before <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="62fc9-170">Aby uzyskać więcej informacji, zobacz [pobierania danych i operacje CUD w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="62fc9-170">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="62fc9-171">Po dołączeniu nowej jednostki odroczone moduły ładujące przeznaczone dla dowolnej kolekcji podrzędnej (na przykład `EntitySet` kolekcji obiektów z skojarzone tabele) są inicjowane.</span><span class="sxs-lookup"><span data-stu-id="62fc9-171">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="62fc9-172">Gdy <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana, elementy członkowskie elementu podrzędnego kolekcje są umieszczane w `Unmodified` stanu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-172">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="62fc9-173">Aby zaktualizować elementów członkowskich kolekcji podrzędnej, należy jawnie wywołać `Attach` i określ tej jednostki.</span><span class="sxs-lookup"><span data-stu-id="62fc9-173">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62fc9-174">W poniższym przykładzie pokazano, jak możesz zaktualizować `Order` obiektu na inny <xref:System.Data.Linq.DataContext> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="62fc9-174">The following example shows how you can update an `Order` object on a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="62fc9-175">W przykładzie założono, czy masz połączenie z bazą danych, a wprowadzono [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] pliku (w tym przypadku przykładowej bazy danych Northwind).</span><span class="sxs-lookup"><span data-stu-id="62fc9-175">The example assumes that you have a connection to a database and have made a [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] file for it (in this case, the Northwind sample database).</span></span>  
  
 [!code-csharp[DLinqNTier#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#1)]
 [!code-vb[DLinqNTier#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#1)]  
  
 <span data-ttu-id="62fc9-176">W poniższym przykładzie do obiektu jednostki do dołączenia ma relacji klucza obcego z innym obiektem i jest przechowywany w pamięci podręcznej, lecz nie jest dołączony.</span><span class="sxs-lookup"><span data-stu-id="62fc9-176">In the following example, an entity object to be attached has a foreign key relation with another object and is stored in the cache but not attached.</span></span> <span data-ttu-id="62fc9-177">Gdy wywołujesz <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, `ChangeProcessor` dodaje `Insert` operację dla wszystkich obiektów klucza obcego.</span><span class="sxs-lookup"><span data-stu-id="62fc9-177">When you call <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, the `ChangeProcessor` adds an `Insert` operation for all the foreign key objects.</span></span> <span data-ttu-id="62fc9-178">Jest to efekt uboczny, gdy wystąpienie jednostki jest użyć ponownie w innej <xref:System.Data.Linq.DataContext> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="62fc9-178">This is a side-effect when an entity instance is re-used in a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="62fc9-179">Z tego powodu [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] nie obsługuje ponownego użycia obiektów.</span><span class="sxs-lookup"><span data-stu-id="62fc9-179">For this reason, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support re-use of objects.</span></span>  
  
 [!code-csharp[DlinqNTier#7](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#7)]
 [!code-vb[DlinqNTier#7](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#7)]  
  
 <span data-ttu-id="62fc9-180">Poniższy przykład przedstawia scenariusz, w którym anulował wszystkich zamówień klienta A i B Klient przyjmuje na własność.</span><span class="sxs-lookup"><span data-stu-id="62fc9-180">The following example shows a scenario in which Customer A has canceled all orders and Customer B has taken ownership of them.</span></span> <span data-ttu-id="62fc9-181">Możesz dołączyć wszystkie zamówienia klienta, A w tym samym czasie.</span><span class="sxs-lookup"><span data-stu-id="62fc9-181">You can attach all orders of Customer A at the same time.</span></span>  
  
 [!code-csharp[DlinqNTier#3](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#3)]
 [!code-vb[DlinqNTier#3](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As DataContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataContext ^ Context { System::Data::Linq::DataContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Data.Linq.DataContext" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="62fc9-182">Pobiera <see cref="T:System.Data.Linq.DataContext" /> który został użyty do pobrania to <see cref="T:System.Data.Linq.Table`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-182">Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.Table`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="62fc9-183">Kontekst danych, który został użyty do pobrania w tej tabeli.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-183">The data context that has been used to retrieve this table.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void DeleteAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void DeleteAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.DeleteAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.DeleteAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="62fc9-184">Typ elementów do usunięcia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-184">The type of the elements to delete.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="62fc9-185">Jednostki do usunięcia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-185">The entities to delete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-186">Umieszcza wszystkie jednostki z kolekcji do <see langword="pending delete" /> stanu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-186">Puts all entities from the collection into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-187">Jednostki, które są umieszczane w stanie oczekiwanie na usunięcie przy użyciu tej metody nie są usuwane z wyników zapytania do momentu po <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="62fc9-187">Entities that are put into the pending delete state with this method do not disappear from query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="62fc9-188">Odłączone jednostki musi być podłączony, aby można było je usunąć.</span><span class="sxs-lookup"><span data-stu-id="62fc9-188">Disconnected entities must be attached before they can be deleted.</span></span> <span data-ttu-id="62fc9-189">Aby uzyskać więcej informacji, zobacz [pobierania danych i operacje CUD w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="62fc9-189">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="62fc9-190">Poniższy fragment kodu języka C# demonstruje jedno użycie tej metody:</span><span class="sxs-lookup"><span data-stu-id="62fc9-190">The following C# snippet shows one use for this method:</span></span>  
  
```  
IEnumerable<Customer> customersWithoutOrders = (from c in db.Customers  
   where c.Orders.Count == 0  
   select c).ToList();  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders);  
db.SubmitChanges();  
```  
  
 <span data-ttu-id="62fc9-191">W języku Visual Basic:</span><span class="sxs-lookup"><span data-stu-id="62fc9-191">In Visual Basic:</span></span>  
  
```  
Dim customersWithoutOrders As IEnumerable(Of Customer) = (From c In db.Customers _   
    Where c.Orders.Count = 0 _   
    Select c).ToList()  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders)  
db.SubmitChanges()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteOnSubmit(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.DeleteOnSubmit : 'Entity -&gt; unit" Usage="table.DeleteOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="62fc9-192">Jednostka do usunięcia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-192">The entity to be deleted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-193">Umieszcza jednostki z tej tabeli do <see langword="pending delete" /> stanu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-193">Puts an entity from this table into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-194">Usunięto jednostki nie są usuwane z wyników zapytania do momentu po <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="62fc9-194">The removed entity does not disappear from the query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="62fc9-195">Odłączone jednostki najpierw musi być podłączony, aby można było je usunąć.</span><span class="sxs-lookup"><span data-stu-id="62fc9-195">Disconnected entities must first be attached before they can be deleted.</span></span> <span data-ttu-id="62fc9-196">Aby uzyskać więcej informacji, zobacz [pobierania danych i operacje CUD w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="62fc9-196">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] <span data-ttu-id="62fc9-197">nie obsługuje ani nie rozpoznają operations usuwanie kaskadowe.</span><span class="sxs-lookup"><span data-stu-id="62fc9-197">does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="62fc9-198">Jeśli chcesz usunąć wiersz w tabeli, która ma ograniczenia względem jego, musisz któryś zbiór `ON DELETE CASCADE` reguły ograniczenie klucza obcego w bazie danych lub Użyj własnego kodu, aby najpierw usunąć obiekty podrzędne, które uniemożliwiają usunięcie obiektu nadrzędnego.</span><span class="sxs-lookup"><span data-stu-id="62fc9-198">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="62fc9-199">W przeciwnym razie jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="62fc9-199">Otherwise, an exception is thrown.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#3](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#3)]
 [!code-vb[System.Data.Linq.Table#3](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="table.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="62fc9-200">Pobiera moduł wyliczający, który iteruje po kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-200">Gets an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62fc9-201">Moduł wyliczający, który może służyć do iterowania po kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-201">An enumerator that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiedMembers">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModifiedMembers (entity As TEntity) As ModifiedMemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ GetModifiedMembers(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetModifiedMembers : 'Entity -&gt; System.Data.Linq.ModifiedMemberInfo[]" Usage="table.GetModifiedMembers entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="62fc9-202">Jednostki, z którego można pobrać tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-202">The entity from which to get the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-203">Zwraca tablicę zmodyfikowane elementy członkowskie, które zawierają swoje bieżące i oryginalne wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-203">Returns an array of modified members that contain their current and original values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62fc9-204">Tablica zmodyfikowane elementy członkowskie, które zawierają swoje bieżące i oryginalne wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-204">An array of modified members that contain their current and original values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNewBindingList">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IBindingList GetNewBindingList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.IBindingList GetNewBindingList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetNewBindingList" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNewBindingList () As IBindingList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::IBindingList ^ GetNewBindingList();" />
      <MemberSignature Language="F#" Value="member this.GetNewBindingList : unit -&gt; System.ComponentModel.IBindingList" Usage="table.GetNewBindingList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IBindingList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="62fc9-205">Tworzy nową listę dla powiązania ze źródłem danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-205">Creates a new list for binding to a data source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62fc9-206">Nowy <see cref="T:System.ComponentModel.IBindingList" /> dla powiązania ze źródłem danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-206">A new <see cref="T:System.ComponentModel.IBindingList" /> for binding to a data source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-207">Zwrócona lista obsługuje standardowe operacje, takie jak dodawania, usuwania, liczba operacji wstawienia i aktualizacje, ale zapisuje musi być jawnie zarządzane przez programistę.</span><span class="sxs-lookup"><span data-stu-id="62fc9-207">The returned list supports standard operations, such as additions, deletions, insertions, and updates, but saves must be explicitly managed by the programmer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalEntityState">
      <MemberSignature Language="C#" Value="public TEntity GetOriginalEntityState (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TEntity GetOriginalEntityState(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalEntityState (entity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TEntity GetOriginalEntityState(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetOriginalEntityState : 'Entity -&gt; 'Entity" Usage="table.GetOriginalEntityState entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="62fc9-208">Jednostka, w których oryginalny stan jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-208">The entity whose original state is to be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-209">Zwraca <see cref="T:System.Data.Linq.Table`1" /> wystąpienia, która zawiera oryginalny stan jednostki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-209">Returns a <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62fc9-210">A <see cref="T:System.Data.Linq.Table`1" /> wystąpienia, która zawiera oryginalny stan jednostki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-210">A <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-211">Ta metoda zwraca oryginalnej jednostki, ponieważ został on utworzony lub dołączonych do bieżącego <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="62fc9-211">This method returns the original state of an entity since it was either created or attached to the current <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="62fc9-212">Oryginalny stan jednostki, która serializacji i deserializacji musi być dostarczone przez mechanizm śledzenia niezależne i dostarczana, gdy jednostka jest dołączony do nowej <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="62fc9-212">The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="62fc9-213">Aby uzyskać więcej informacji, zobacz [pobierania danych i operacje CUD w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="62fc9-213">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void InsertAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void InsertAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.InsertAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.InsertAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="62fc9-214">Typ elementów do wstawienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-214">The type of the elements to insert.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="62fc9-215">Jednostki do dodania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-215">The entities to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-216">Dodaje wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w <see langword="pending insert" /> stanu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-216">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a <see langword="pending insert" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-217">Dodano jednostki nie będą w wynikach kwerendy aż po <xref:System.Data.Linq.DataContext.SubmitChanges%2A> została wywołana.</span><span class="sxs-lookup"><span data-stu-id="62fc9-217">The added entities will not be in query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertOnSubmit(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.InsertOnSubmit : 'Entity -&gt; unit" Usage="table.InsertOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="62fc9-218">Jednostka, która ma zostać dodana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-218">The entity to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-219">Dodaje jednostki w usłudze <see langword="pending insert" /> do tego stanu <see cref="T:System.Data.Linq.Table`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-219">Adds an entity in a <see langword="pending insert" /> state to this <see cref="T:System.Data.Linq.Table`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-220">Dodano jednostkę nie pojawi się w wynikach kwerendy z tej tabeli do momentu po <xref:System.Data.Linq.DataContext.SubmitChanges%2A> została wywołana.</span><span class="sxs-lookup"><span data-stu-id="62fc9-220">The added entity will not appear in query results from this table until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.Table#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Linq.ITable.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="62fc9-221">Pobiera wartość wskazującą, czy typ jednostek zawarty w tym <see cref="T:System.Data.Linq.Table`1" /> wystąpienia ma klucz podstawowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-221">Gets a value that indicates whether the type of the entities contained in this <see cref="T:System.Data.Linq.Table`1" /> instance has a primary key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="62fc9-222">
            <see langword="true" /> Jeśli typ jednostki nie ma klucza podstawowego; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-222">
              <see langword="true" /> if the entity type does not have a primary key; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;TEntity&gt; IEnumerable&lt;TEntity&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable&lt;TEntity&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of TEntity) Implements IEnumerable(Of TEntity).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;TEntity&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="62fc9-223">Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-223">Returns an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62fc9-224">Moduł wyliczający, który może służyć do iterowania po kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-224">An enumerator that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="62fc9-225">Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-225">Returns an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62fc9-226">Moduł wyliczający, który może służyć do iterowania po kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-226">An enumerator that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-227">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-227">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-228">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Collections.Generic.IEnumerable%601> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-228">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="62fc9-229">Pobiera wartość wskazującą, czy kolekcja jest kolekcją <see cref="T:System.Collections.IList" /> obiektów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-229">Gets a value that indicates whether the collection is a collection of <see cref="T:System.Collections.IList" /> objects.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="62fc9-230">
            <see langword="true" /> Jeśli kolekcja jest kolekcją <see cref="T:System.Collections.IList" /> obiekty; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-230">
              <see langword="true" /> if the collection is a collection of <see cref="T:System.Collections.IList" /> objects; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-231">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-231">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-232">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.ComponentModel.IListSource> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-232">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="62fc9-233">Zwraca <see cref="T:System.Collections.IList" /> , może być powiązana ze źródłem danych z obiektu, który nie implementuje <see cref="T:System.Collections.IList" /> sam.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-233">Returns an <see cref="T:System.Collections.IList" /> that can be bound to a data source from an object that does not implement an <see cref="T:System.Collections.IList" /> itself.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62fc9-234">
            <see cref="T:System.Collections.IList" /> Może być powiązana ze źródłem danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-234">An <see cref="T:System.Collections.IList" /> that can be bound to a data source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-235">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-235">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-236">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.ComponentModel.IListSource> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-236">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62fc9-237">Umożliwia zdeserializowany jednostek, które ma zostać skojarzony z nowe wystąpienie klasy <see cref="T:System.Data.Linq.DataContext" /> tak, aby mogą zostać zaktualizowane lub usunięte z bazy danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-237">Allows deserialized entities to be associated with a new instance of a <see cref="T:System.Data.Linq.DataContext" /> so that they can be updated or deleted from the database.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="62fc9-238">Jednostka do podłączenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-238">The entity to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-239">Dołącza jednostkę, aby <see cref="T:System.Data.Linq.DataContext" /> w stanie zostały zmodyfikowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-239">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-240">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-240">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-241">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Data.Linq.ITable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-241">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, asModified As Boolean) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, bool asModified) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="62fc9-242">Jednostka do podłączenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-242">The entity to be attached.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="62fc9-243">
            <see langword="true" /> Aby dołączyć jednostkę ze zmianami; <see langword="false" /> dołączony jednostki jako niezmodyfikowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-243">
              <see langword="true" /> to attach the entity as modified; <see langword="false" /> to attached the entity as unmodified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-244">Dołącza wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w stanie zmodyfikowany lub zostały zmodyfikowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-244">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-245">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-245">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-246">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Data.Linq.ITable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-246">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, object original);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, object original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, original As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, System::Object ^ original) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="original" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="62fc9-247">Jednostka do podłączenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-247">The entity to be attached.</span>
          </span>
        </param>
        <param name="original">
          <span data-ttu-id="62fc9-248">Wystąpienie typu jednostki z elementów członkowskich danych, które zawierają oryginalnych wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-248">An instance of the same entity type with data members that contain the original values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-249">Dołącza jednostkę, aby <see cref="T:System.Data.Linq.DataContext" /> w dowolnym stanie zmodyfikowany lub zostały zmodyfikowane przez określenie jednostki i stanu pierwotnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-249">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-250">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-250">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-251">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Data.Linq.ITable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-251">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.AttachAll">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62fc9-252">Dołącza wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w stanie zmodyfikowany lub zostały zmodyfikowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-252">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="62fc9-253">Kolekcja jednostek do podłączenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-253">The collection of entities to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-254">Dołącza wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w stanie zmodyfikowany lub zostały zmodyfikowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-254">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-255">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-255">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-256">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Data.Linq.ITable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-256">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable, asModified As Boolean) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities, bool asModified) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="62fc9-257">Kolekcja jednostek jako podłączonym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-257">The collection of entities to be attched.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="62fc9-258">
            <see langword="true" /> Aby dołączyć jednostek ze zmianami; <see langword="false" /> do dołączania jednostek jako niezmodyfikowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-258">
              <see langword="true" /> to attach the entities as modified; <see langword="false" /> to attach the entities as unmodified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-259">Dołącza wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w stanie zmodyfikowany lub zostały zmodyfikowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-259">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-260">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-260">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-261">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Data.Linq.ITable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-261">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteAllOnSubmit (entities As IEnumerable) Implements ITable.DeleteAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::DeleteAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="62fc9-262">Jednostki, usuwany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-262">The entities being removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-263">Umieszcza wszystkie jednostki z kolekcji do <see langword="pending delete" /> stanu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-263">Puts all entities from the collection into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-264">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-264">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-265">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Data.Linq.ITable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-265">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteOnSubmit (entity As Object) Implements ITable.DeleteOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::DeleteOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="62fc9-266">Jednostka, która ma zostać usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-266">The entity to be removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-267">Umieszcza jednostki z tej tabeli do <see langword="pending delete" /> stanu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-267">Puts an entity from this table into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-268">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-268">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-269">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Data.Linq.ITable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-269">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] <span data-ttu-id="62fc9-270">nie obsługuje ani nie rozpoznają operations usuwanie kaskadowe.</span><span class="sxs-lookup"><span data-stu-id="62fc9-270">does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="62fc9-271">Jeśli chcesz usunąć wiersz w tabeli, która ma ograniczenia względem jego, musisz któryś zbiór `ON DELETE CASCADE` reguły ograniczenie klucza obcego w bazie danych lub Użyj własnego kodu, aby najpierw usunąć obiekty podrzędne, które uniemożliwiają usunięcie obiektu nadrzędnego.</span><span class="sxs-lookup"><span data-stu-id="62fc9-271">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="62fc9-272">W przeciwnym razie jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="62fc9-272">Otherwise, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetModifiedMembers">
      <MemberSignature Language="C#" Value="System.Data.Linq.ModifiedMemberInfo[] ITable.GetModifiedMembers (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Data.Linq.ModifiedMemberInfo[] System.Data.Linq.ITable.GetModifiedMembers(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetModifiedMembers (entity As Object) As ModifiedMemberInfo() Implements ITable.GetModifiedMembers" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ System.Data.Linq.ITable.GetModifiedMembers(System::Object ^ entity) = System::Data::Linq::ITable::GetModifiedMembers;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="62fc9-273">Jednostki, z którego można uzyskać zmodyfikowane elementy członkowskie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-273">The entity from which to obtain the modified members.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-274">Zwraca tablicę zmodyfikowane elementy członkowskie, które zawierają swoje bieżące i oryginalne wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-274">Returns an array of modified members that contain their current and original values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62fc9-275">Tablica elementów członkowskich zmodyfikowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-275">An array of modified members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-276">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-276">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-277">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Data.Linq.ITable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-277">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetOriginalEntityState">
      <MemberSignature Language="C#" Value="object ITable.GetOriginalEntityState (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Data.Linq.ITable.GetOriginalEntityState(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetOriginalEntityState (entity As Object) As Object Implements ITable.GetOriginalEntityState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Data.Linq.ITable.GetOriginalEntityState(System::Object ^ entity) = System::Data::Linq::ITable::GetOriginalEntityState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="62fc9-278">Jednostka, w których oryginalny stan ma być dostępny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-278">The entity whose original state is to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-279">Pobiera oryginalnych wartości danej jednostki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-279">Retrieves original values of a given entity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62fc9-280">Kopia oryginalna jednostka.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-280">A copy of the original entity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-281">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-281">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-282">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Data.Linq.ITable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-282">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertAllOnSubmit (entities As IEnumerable) Implements ITable.InsertAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::InsertAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="62fc9-283">Kolekcja jednostek, które mają zostać dodane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-283">The collection of entities to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-284">Dodaje wszystkie jednostki w kolekcji do <see cref="T:System.Data.Linq.DataContext" /> w <see langword="pending insert" /> stanu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-284">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in an <see langword="pending insert" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-285">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-285">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-286">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Data.Linq.ITable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-286">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertOnSubmit (entity As Object) Implements ITable.InsertOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::InsertOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="62fc9-287">Jednostka do dodania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-287">The entity to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-288">Dodaje jednostki w usłudze <see langword="pending insert" /> stanu do tej tabeli.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-288">Adds an entity in a <see langword="pending insert" /> state to this table.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-289">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-289">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-290">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Data.Linq.ITable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-290">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.ElementType">
      <MemberSignature Language="C#" Value="Type System.Linq.IQueryable.ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Linq.IQueryable.ElementType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ElementType As Type Implements IQueryable.ElementType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System::Linq::IQueryable::ElementType { Type ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Linq.IQueryable.ElementType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="62fc9-291">Pobiera typ elementów, które są zwracane, gdy jest wykonywana drzewa wyrażeń skojarzone z tym obiektem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-291">Gets the type of the element(s) that are returned when the expression tree associated with this object is executed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="62fc9-292">Typ elementów, które są zwracane, gdy jest wykonywana drzewa wyrażeń skojarzone z tym obiektem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-292">The type of the element(s) that are returned when the expression tree associated with this object is executed.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-293">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-293">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-294">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Linq.IQueryable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-294">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Expression">
      <MemberSignature Language="C#" Value="System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression System.Linq.IQueryable.Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Expression As Expression Implements IQueryable.Expression" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::Expressions::Expression ^ System::Linq::IQueryable::Expression { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Linq.IQueryable.Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="62fc9-295">Pobiera drzewa wyrażeń, który jest skojarzony z tym wystąpieniem <see cref="T:System.Linq.IQueryable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-295">Gets the expression tree that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="62fc9-296">
            <see cref="T:System.Linq.Expressions.Expression" /> Skojarzony z tym wystąpieniem <see cref="T:System.Linq.IQueryable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-296">The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-297">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-297">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-298">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Linq.IQueryable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-298">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Provider">
      <MemberSignature Language="C#" Value="System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider System.Linq.IQueryable.Provider" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Provider As IQueryProvider Implements IQueryable.Provider" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::IQueryProvider ^ System::Linq::IQueryable::Provider { System::Linq::IQueryProvider ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Linq.IQueryable.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="62fc9-299">Pobiera dostawcę zapytań, który jest skojarzony z tym źródłem danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-299">Gets the query provider that is associated with this data source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="62fc9-300">
            <see cref="T:System.Linq.IQueryProvider" /> Skojarzony z tym źródłem danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-300">The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-301">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-301">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-302">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Linq.IQueryable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-302">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IQueryProvider.CreateQuery (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Linq.IQueryProvider.CreateQuery(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="62fc9-303">Wyrażenie zapytania, z którego jest wykonywane obliczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-303">The query expression from which the evaluation is performed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-304">Konstruuje <see cref="T:System.Linq.IQueryable" /> obiekt, który może służyć do oceny zapytanie, reprezentowane przez określone wyrażenie drzewa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-304">Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62fc9-305">
            <see cref="T:System.Linq.IQueryable" /> , Ocenić zapytanie, reprezentowane przez określone wyrażenie drzewa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-305">An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-306">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-306">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-307">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Linq.IQueryProvider> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-307">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable&lt;TResult&gt; IQueryProvider.CreateQuery&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!TResult&gt; System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual System::Linq::IQueryable&lt;TResult&gt; ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="62fc9-308">Typ danych w tabeli.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-308">The type of the data in the table.</span>
          </span>
        </typeparam>
        <param name="expression">
          <span data-ttu-id="62fc9-309">Wyrażenie zapytania, z którego jest wykonywane obliczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-309">The query expression from which the evaluation is performed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-310">Konstruuje <see cref="T:System.Linq.IQueryable`1" /> obiekt, który może służyć do oceny zapytanie, reprezentowane przez określone wyrażenie drzewa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-310">Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62fc9-311">
            <see cref="T:System.Linq.IQueryable`1" /> , Ocenić zapytanie, reprezentowane przez określone wyrażenie drzewa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-311">An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-312">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-312">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-313">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Linq.IQueryProvider> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-313">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute">
      <MemberSignature Language="C#" Value="object IQueryProvider.Execute (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Linq.IQueryProvider.Execute(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="62fc9-314">Wyrażenie kwerendy do wykonania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-314">The query expression to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-315">Wykonuje zapytanie, reprezentowane przez określone wyrażenie drzewa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-315">Executes the query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62fc9-316">Wartość będącą wynikiem wykonania określonego zapytania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-316">The value that results from executing the specified query.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-317">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-317">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-318">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Linq.IQueryProvider> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-318">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="TResult IQueryProvider.Execute&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !!TResult System.Linq.IQueryProvider.Execute&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual TResult System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="62fc9-319">Typ danych w tabeli.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-319">The type of the data in the table.</span>
          </span>
        </typeparam>
        <param name="expression">
          <span data-ttu-id="62fc9-320">Wyrażenie kwerendy do wykonania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-320">The query expression to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62fc9-321">Wykonuje zapytanie silnie typizowane reprezentowanego przez określone wyrażenie drzewa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-321">Executes the strongly-typed query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62fc9-322">Wartość będącą wynikiem wykonania określonego zapytania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-322">The value that results from executing the specified query.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62fc9-323">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="62fc9-323">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="62fc9-324">Mogą być używane tylko wtedy, gdy <xref:System.Data.Linq.Table%601> wystąpienia jest rzutowany na <xref:System.Linq.IQueryProvider> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="62fc9-324">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="table.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="62fc9-325">Zwraca ciąg reprezentujący tabelę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-325">Returns a string that represents the table.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62fc9-326">Ciąg reprezentujący tabelę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62fc9-326">A string representation of the table.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>