<Type Name="Table&lt;TEntity&gt;" FullName="System.Data.Linq.Table&lt;TEntity&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="639a8b0e519a1c8a36e4f27857928cf4fd909e2d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69128035" /></Metadata><TypeSignature Language="C#" Value="public sealed class Table&lt;TEntity&gt; : System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource, System.Data.Linq.ITable, System.Linq.IQueryable&lt;TEntity&gt;, System.Linq.IQueryProvider where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Table`1&lt;class TEntity&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Data.Linq.ITable, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;, class System.Linq.IQueryProvider" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Table`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Table(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IListSource, IQueryable(Of TEntity), IQueryProvider, ITable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class Table sealed : System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource, System::Data::Linq::ITable, System::Linq::IQueryable&lt;TEntity&gt;, System::Linq::IQueryProvider" />
  <TypeSignature Language="F#" Value="type Table&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface ITable&#xA;    interface IQueryProvider&#xA;    interface IListSource&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Linq.ITable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity"><span data-ttu-id="b1c92-101">Typ danych w tabeli.</span><span class="sxs-lookup"><span data-stu-id="b1c92-101">The type of the data in the table.</span></span></typeparam>
    <summary><span data-ttu-id="b1c92-102">Reprezentuje tabelę określonego typu w źródłowej bazie danych.</span><span class="sxs-lookup"><span data-stu-id="b1c92-102">Represents a table for a particular type in the underlying database.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-103">Ta klasa umożliwia wykonywanie zapytań względem tabeli oraz dodawanie, usuwanie i dołączanie obiektów.</span><span class="sxs-lookup"><span data-stu-id="b1c92-103">This class enables you to query over the table and add, remove, and attach objects.</span></span>  
  
 <span data-ttu-id="b1c92-104">Aplikacja może uzyskiwać dostęp <xref:System.Data.Linq.Table%601> do wystąpienia za pośrednictwem <xref:System.Data.Linq.DataContext.GetTable%2A> lub przy użyciu jednoznacznie wpisanej właściwości jednoznacznie wpisanej <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="b1c92-104">An application can access a <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> or by using a strongly typed property for the strongly typed <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="b1c92-105">Oznacza to, że gdy Projektant generuje obiekt DataContext, generuje właściwości do reprezentowania każdej tabeli.</span><span class="sxs-lookup"><span data-stu-id="b1c92-105">That is, when the designer generates a DataContext object, it generates properties to represent each Table.</span></span> <span data-ttu-id="b1c92-106">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="b1c92-106">For example:</span></span>  
  
```  
[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SignOffTool")]  
public partial class DataClasses1DataContext : System.Data.Linq.DataContext {  
   public System.Data.Linq.Table<User> Users {  
      get {  
         return this.GetTable<User>();  
      }  
   }  
}  
```  
  
 <span data-ttu-id="b1c92-107">Dla tego jednoznacznie określonego typu DataContext możesz uzyskać dostęp do właściwości użytkownicy, aby `Table<User>`uzyskać.</span><span class="sxs-lookup"><span data-stu-id="b1c92-107">For this strongly typed DataContext, you can access the Users property to get `Table<User>`.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1c92-108">Dołącza jednostkę do <see cref="T:System.Data.Linq.DataContext" />elementu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-108">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-109">Użyj metod z jednostkami, które zostały utworzone w jednym <xref:System.Data.Linq.DataContext>, serializacji do klienta, a następnie zdeserializować z powrotem (z zamiarem wykonania operacji aktualizowania lub usuwania). `Attach`</span><span class="sxs-lookup"><span data-stu-id="b1c92-109">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back (with the intention to perform an update or delete operation).</span></span> <span data-ttu-id="b1c92-110">Aby uzyskać więcej informacji, zobacz [operacje pobierania i cud danych w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="b1c92-110">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="b1c92-111">Nie należy próbować do `Attach` jednostki, która nie została odłączona przy użyciu serializacji.</span><span class="sxs-lookup"><span data-stu-id="b1c92-111">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="b1c92-112">Jednostki, które nie zostały serializowane, nadal utrzymują skojarzenia z odroczonymi ładowarkami, które mogą spowodować nieoczekiwane wyniki, jeśli jednostka stanie się śledzona przez drugi kontekst danych.</span><span class="sxs-lookup"><span data-stu-id="b1c92-112">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 <span data-ttu-id="b1c92-113">Po dołączeniu nowej jednostki są inicjowane odroczone ładowarki dla każdej kolekcji podrzędnej (na `EntitySet` przykład kolekcje jednostek ze skojarzonych tabel).</span><span class="sxs-lookup"><span data-stu-id="b1c92-113">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="b1c92-114">Gdy <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana, elementy członkowskie kolekcji podrzędnych są umieszczane `Unmodified` w stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-114">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="b1c92-115">Aby zaktualizować elementy członkowskie kolekcji podrzędnej, należy jawnie wywołać `Attach` i określić tę jednostkę.</span><span class="sxs-lookup"><span data-stu-id="b1c92-115">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="b1c92-116">`Attach`dołącza wszystkie jednostki na grafie obiektów podanego obiektu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-116">`Attach` attaches all entities in the object graph of the provided object.</span></span> <span data-ttu-id="b1c92-117">Na przykład następujący C# kod:</span><span class="sxs-lookup"><span data-stu-id="b1c92-117">For example, the following C# code:</span></span>  
  
```  
using (SampleDataContext db = new SampleDataContext()) {  
    Employee employee = new Employee { employeeId = 1 };  
  
    Master master = new Master();  
    master.Employee = employee;  
  
    Child child = new Child();  
    child.Employee = employee;  
  
    db.Employees.Attach(employee);  
  
    master.Child = child;  
  
    db.Masters.InsertOnSubmit(master);  
  
    db.SubmitChanges();  
}  
  
```  
  
 <span data-ttu-id="b1c92-118">Odpowiedni kod Visual Basic:</span><span class="sxs-lookup"><span data-stu-id="b1c92-118">The equivalent Visual Basic code is:</span></span>  
  
```  
Using db As New SampleDataContext()    Dim employee As New Employee With { .employeeId = 1 }  
  
    Dim master As New Master()  
    master.Employee = employee  
  
    Dim child As New Child()  
    child.Employee = employee  
  
    db.Employees.Attach(employee)  
  
    master.Child = child  
  
    db.Masters.InsertOnSubmit(master)  
  
    db.SubmitChanges()  
  
End Using  
```  
  
 <span data-ttu-id="b1c92-119">Wywołanie `Attach` `Employee` przy `Employee` dołączaniu pracownika, wzorca i elementu podrzędnego, ponieważ ma relacje z serwerem głównym i elementem podrzędnym.</span><span class="sxs-lookup"><span data-stu-id="b1c92-119">Calling `Attach` on `Employee` attaches employee, master, and child, because the `Employee` has relationships to both master and child.</span></span> <span data-ttu-id="b1c92-120">Należy jawnie wywołać `InsertOnSubmit` , aby zmienić stan z dołączone do wstawienia.</span><span class="sxs-lookup"><span data-stu-id="b1c92-120">You must explicitly call `InsertOnSubmit` to change the state from attached to inserted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity -&gt; unit" Usage="table.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="b1c92-121">Oryginalne wartości jednostki, która ma zostać dołączona.</span><span class="sxs-lookup"><span data-stu-id="b1c92-121">The original values of the entity to be attached.</span></span></param>
        <summary><span data-ttu-id="b1c92-122">Dołącza jednostkę rozłączoną lub "odłączono" do nowej <see cref="T:System.Data.Linq.DataContext" /> , gdy oryginalne wartości są wymagane do optymistycznych kontroli współbieżności.</span><span class="sxs-lookup"><span data-stu-id="b1c92-122">Attaches a disconnected or "detached" entity to a new <see cref="T:System.Data.Linq.DataContext" /> when original values are required for optimistic concurrency checks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-123">Użyj metod z jednostkami, które zostały utworzone w jednym <xref:System.Data.Linq.DataContext>, serializacji do klienta, a następnie zdeserializować z powrotem w celu wykonania operacji Update lub DELETE. `Attach`</span><span class="sxs-lookup"><span data-stu-id="b1c92-123">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back to perform an update or delete operation.</span></span> <span data-ttu-id="b1c92-124">Ponieważ nowy <xref:System.Data.Linq.DataContext> nie ma możliwości śledzenia wartości oryginalnych dla odłączonego obiektu, klient jest odpowiedzialny za dostarczanie tych wartości.</span><span class="sxs-lookup"><span data-stu-id="b1c92-124">Because the new <xref:System.Data.Linq.DataContext> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values.</span></span> <span data-ttu-id="b1c92-125">W tej wersji programu <xref:System.Data.Linq.Table%601.Attach%2A>przyjęto, że jednostka jest w stanie pierwotnej wartości.</span><span class="sxs-lookup"><span data-stu-id="b1c92-125">In this version of <xref:System.Data.Linq.Table%601.Attach%2A>, the entity is assumed to be in its original value state.</span></span> <span data-ttu-id="b1c92-126">Po wywołaniu tej metody można zaktualizować jej pola, na przykład dodatkowe dane wysyłane z klienta.</span><span class="sxs-lookup"><span data-stu-id="b1c92-126">After calling this method, you can then update its fields, for example with additional data sent from the client.</span></span>  
  
 <span data-ttu-id="b1c92-127">Po dołączeniu nowej jednostki są inicjowane odroczone ładowarki dla każdej kolekcji podrzędnej (na `EntitySet` przykład kolekcje jednostek ze skojarzonych tabel).</span><span class="sxs-lookup"><span data-stu-id="b1c92-127">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="b1c92-128">Gdy <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana, elementy członkowskie kolekcji podrzędnych są umieszczane `Unmodified` w stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-128">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="b1c92-129">Aby zaktualizować elementy członkowskie kolekcji podrzędnej, należy jawnie wywołać `Attach` i określić tę jednostkę.</span><span class="sxs-lookup"><span data-stu-id="b1c92-129">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="b1c92-130">Aby uzyskać więcej informacji, zobacz [operacje pobierania i cud danych w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="b1c92-130">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="b1c92-131">Nie należy próbować do `Attach` jednostki, która nie została odłączona przy użyciu serializacji.</span><span class="sxs-lookup"><span data-stu-id="b1c92-131">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="b1c92-132">Jednostki, które nie zostały serializowane, nadal utrzymują skojarzenia z odroczonymi ładowarkami, które mogą spowodować nieoczekiwane wyniki, jeśli jednostka stanie się śledzona przez drugi kontekst danych.</span><span class="sxs-lookup"><span data-stu-id="b1c92-132">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * bool -&gt; unit" Usage="table.Attach (entity, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="b1c92-133">Jednostka, która ma zostać dołączona.</span><span class="sxs-lookup"><span data-stu-id="b1c92-133">The entity to be attached.</span></span></param>
        <param name="asModified"><span data-ttu-id="b1c92-134"><see langword="true" />Aby dołączyć jednostkę jako zmodyfikowaną; <see langword="false" /> aby dołączyć jednostkę jako niezmodyfikowaną.</span><span class="sxs-lookup"><span data-stu-id="b1c92-134"><see langword="true" /> to attach the entity as modified; <see langword="false" /> to attach the entity as unmodified.</span></span></param>
        <summary><span data-ttu-id="b1c92-135">Dołącza jednostkę do <see cref="T:System.Data.Linq.DataContext" /> elementu w zmodyfikowanym lub niezmodyfikowanym stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-135">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-136">Jeśli dołączysz *jako zmodyfikowany*, jednostka musi albo zadeklarować składową wersji lub nie może uczestniczyć w sprawdzaniu konfliktów aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="b1c92-136">If attaching *as modified*, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="b1c92-137">Po dołączeniu nowej jednostki są inicjowane odroczone ładowarki dla każdej kolekcji podrzędnej (na `EntitySet` przykład kolekcje jednostek ze skojarzonych tabel).</span><span class="sxs-lookup"><span data-stu-id="b1c92-137">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="b1c92-138">Gdy <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana, elementy członkowskie kolekcji podrzędnych są umieszczane `Unmodified` w stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-138">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="b1c92-139">Aby zaktualizować elementy członkowskie kolekcji podrzędnej, należy jawnie wywołać `Attach` i określić tę jednostkę.</span><span class="sxs-lookup"><span data-stu-id="b1c92-139">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, TEntity original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, !TEntity original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, original As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, TEntity original);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * 'Entity -&gt; unit" Usage="table.Attach (entity, original)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="original" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="b1c92-140">Jednostka, która ma zostać dołączona.</span><span class="sxs-lookup"><span data-stu-id="b1c92-140">The entity to be attached.</span></span></param>
        <param name="original"><span data-ttu-id="b1c92-141">Wystąpienie tego samego typu jednostki z elementami członkowskimi danych, które zawierają oryginalne wartości.</span><span class="sxs-lookup"><span data-stu-id="b1c92-141">An instance of the same entity type with data members that contain the original values.</span></span></param>
        <summary><span data-ttu-id="b1c92-142">Dołącza jednostkę do <see cref="T:System.Data.Linq.DataContext" /> elementu w zmodyfikowanym lub niezmodyfikowanym stanie przez określenie zarówno jednostki, jak i jej oryginalnego stanu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-142">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-143">W poniższym przykładzie `Customer` obiekt jest już prawidłowo skonfigurowany.</span><span class="sxs-lookup"><span data-stu-id="b1c92-143">In the following example, the `Customer` object is already correctly configured.</span></span> <span data-ttu-id="b1c92-144">Można wywołać `Attach` bez konieczności powtarzania aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="b1c92-144">You can call `Attach` without having to replay the updates.</span></span>  
  
 <span data-ttu-id="b1c92-145">Po dołączeniu nowej jednostki są inicjowane odroczone ładowarki dla każdej kolekcji podrzędnej (na `EntitySet` przykład kolekcje jednostek ze skojarzonych tabel).</span><span class="sxs-lookup"><span data-stu-id="b1c92-145">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="b1c92-146">Gdy <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana, elementy członkowskie kolekcji podrzędnych są umieszczane `Unmodified` w stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-146">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="b1c92-147">Aby zaktualizować elementy członkowskie kolekcji podrzędnej, należy jawnie wywołać `Attach` i określić tę jednostkę.</span><span class="sxs-lookup"><span data-stu-id="b1c92-147">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 [!code-csharp[DLinqNTier#4](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#4)]
 [!code-vb[DLinqNTier#4](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AttachAll&lt;TSubEntity&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1c92-148">Dołącza wszystkie jednostki kolekcji do <see cref="T:System.Data.Linq.DataContext" /> elementu w zmodyfikowanym lub niezmodyfikowanym stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-148">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-149">Jeśli dołączysz jako zmodyfikowany, jednostka musi albo zadeklarować składową wersji lub nie może uczestniczyć w sprawdzaniu konfliktów aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="b1c92-149">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span>  
  
 <span data-ttu-id="b1c92-150">Po dołączeniu nowej jednostki są inicjowane odroczone ładowarki dla każdej kolekcji podrzędnej (na `EntitySet` przykład kolekcje jednostek ze skojarzonych tabel).</span><span class="sxs-lookup"><span data-stu-id="b1c92-150">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="b1c92-151">Gdy <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana, elementy członkowskie kolekcji podrzędnych są umieszczane `Unmodified` w stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-151">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="b1c92-152">Aby zaktualizować elementy członkowskie kolekcji podrzędnej, należy jawnie wywołać `Attach` i określić tę jednostkę.</span><span class="sxs-lookup"><span data-stu-id="b1c92-152">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="b1c92-153">Aby uzyskać więcej informacji, zobacz [operacje pobierania i cud danych w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="b1c92-153">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.AttachAll entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="b1c92-154">Typ jednostek do dołączenia.</span><span class="sxs-lookup"><span data-stu-id="b1c92-154">The type of entities to attach.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="b1c92-155">Kolekcja jednostek.</span><span class="sxs-lookup"><span data-stu-id="b1c92-155">The collection of entities.</span></span></param>
        <summary><span data-ttu-id="b1c92-156">Dołącza wszystkie jednostki kolekcji do <see cref="T:System.Data.Linq.DataContext" /> elementu w zmodyfikowanym lub niezmodyfikowanym stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-156">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-157">Ta metoda dołącza wszystkie jednostki kolekcji do nowej <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="b1c92-157">This method attaches all entities of a collection to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="b1c92-158">Po dołączeniu nowej jednostki są inicjowane odroczone ładowarki dla każdej kolekcji podrzędnej (na `EntitySet` przykład kolekcje jednostek ze skojarzonych tabel).</span><span class="sxs-lookup"><span data-stu-id="b1c92-158">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="b1c92-159">Gdy <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana, elementy członkowskie kolekcji podrzędnych są umieszczane `Unmodified` w stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-159">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="b1c92-160">Aby zaktualizować elementy członkowskie kolekcji podrzędnej, należy jawnie wywołać `Attach` i określić tę jednostkę.</span><span class="sxs-lookup"><span data-stu-id="b1c92-160">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="b1c92-161">Aby uzyskać więcej informacji, zobacz [operacje pobierania i cud danych w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="b1c92-161">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities, bool asModified) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity), asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; * bool -&gt; unit" Usage="table.AttachAll (entities, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="b1c92-162">Typ jednostek do dołączenia.</span><span class="sxs-lookup"><span data-stu-id="b1c92-162">The type of entities to attach.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="b1c92-163">Kolekcja jednostek.</span><span class="sxs-lookup"><span data-stu-id="b1c92-163">The collection of entities.</span></span></param>
        <param name="asModified"><span data-ttu-id="b1c92-164"><see langword="true" />Jeśli obiekt ma sygnaturę czasową lub element członkowski RowVersion; <see langword="false" /> Jeśli oryginalne wartości są używane do sprawdzania współbieżności optymistycznej.</span><span class="sxs-lookup"><span data-stu-id="b1c92-164"><see langword="true" /> if the object has a timestamp or RowVersion member; <see langword="false" /> if original values are being used for the optimistic concurrency check.</span></span></param>
        <summary><span data-ttu-id="b1c92-165">Dołącza wszystkie jednostki kolekcji do <see cref="T:System.Data.Linq.DataContext" /> elementu w zmodyfikowanym lub niezmodyfikowanym stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-165">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-166">Ta metoda dołącza wszystkie jednostki kolekcji do <xref:System.Data.Linq.DataContext> elementu w *zmodyfikowanym* lub niezmodyfikowanym stanie \*\* .</span><span class="sxs-lookup"><span data-stu-id="b1c92-166">This method attaches all entities of a collection to the <xref:System.Data.Linq.DataContext> in either a *modified* or *unmodified* state.</span></span> <span data-ttu-id="b1c92-167">Jeśli dołączysz jako zmodyfikowany, jednostka musi albo zadeklarować składową wersji lub nie może uczestniczyć w sprawdzaniu konfliktów aktualizacji.</span><span class="sxs-lookup"><span data-stu-id="b1c92-167">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="b1c92-168">W przypadku dołączania jako niemodyfikowane, przyjmuje się, że jednostka reprezentuje pierwotną wartość.</span><span class="sxs-lookup"><span data-stu-id="b1c92-168">If attaching as unmodified, the entity is assumed to represent the original value.</span></span> <span data-ttu-id="b1c92-169">Po wywołaniu tej metody pola jednostki można modyfikować przy użyciu innych informacji z klienta przed <xref:System.Data.Linq.DataContext.SubmitChanges%2A> wywołaniem.</span><span class="sxs-lookup"><span data-stu-id="b1c92-169">After calling this method, the entity's fields can be modified with other information from the client before <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="b1c92-170">Aby uzyskać więcej informacji, zobacz [operacje pobierania i cud danych w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="b1c92-170">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="b1c92-171">Po dołączeniu nowej jednostki są inicjowane odroczone ładowarki dla każdej kolekcji podrzędnej (na `EntitySet` przykład kolekcje jednostek ze skojarzonych tabel).</span><span class="sxs-lookup"><span data-stu-id="b1c92-171">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="b1c92-172">Gdy <xref:System.Data.Linq.DataContext.SubmitChanges%2A> jest wywoływana, elementy członkowskie kolekcji podrzędnych są umieszczane `Unmodified` w stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-172">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="b1c92-173">Aby zaktualizować elementy członkowskie kolekcji podrzędnej, należy jawnie wywołać `Attach` i określić tę jednostkę.</span><span class="sxs-lookup"><span data-stu-id="b1c92-173">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1c92-174">Poniższy przykład pokazuje, jak można zaktualizować `Order` obiekt w innym <xref:System.Data.Linq.DataContext> wystąpieniu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-174">The following example shows how you can update an `Order` object on a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="b1c92-175">W przykładzie przyjęto założenie, że masz połączenie z bazą danych i [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] plik został utworzony dla niego (w tym przypadku Przykładowa baza danych Northwind).</span><span class="sxs-lookup"><span data-stu-id="b1c92-175">The example assumes that you have a connection to a database and have made a [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] file for it (in this case, the Northwind sample database).</span></span>  
  
 [!code-csharp[DLinqNTier#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#1)]
 [!code-vb[DLinqNTier#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#1)]  
  
 <span data-ttu-id="b1c92-176">W poniższym przykładzie obiekt jednostki, który ma zostać dołączony, ma relację klucza obcego z innym obiektem i jest przechowywany w pamięci podręcznej, ale nie jest dołączony.</span><span class="sxs-lookup"><span data-stu-id="b1c92-176">In the following example, an entity object to be attached has a foreign key relation with another object and is stored in the cache but not attached.</span></span> <span data-ttu-id="b1c92-177">Po wywołaniu <xref:System.Data.Linq.DataContext.SubmitChanges%2A> `ChangeProcessor` , dodaje`Insert` operację dla wszystkich obiektów klucza obcego.</span><span class="sxs-lookup"><span data-stu-id="b1c92-177">When you call <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, the `ChangeProcessor` adds an `Insert` operation for all the foreign key objects.</span></span> <span data-ttu-id="b1c92-178">Jest to efekt uboczny, gdy wystąpienie jednostki jest ponownie używane w innym <xref:System.Data.Linq.DataContext> wystąpieniu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-178">This is a side-effect when an entity instance is re-used in a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="b1c92-179">Z tego powodu program [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] nie obsługuje ponownego wykorzystywania obiektów.</span><span class="sxs-lookup"><span data-stu-id="b1c92-179">For this reason, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support re-use of objects.</span></span>  
  
 [!code-csharp[DlinqNTier#7](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#7)]
 [!code-vb[DlinqNTier#7](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#7)]  
  
 <span data-ttu-id="b1c92-180">W poniższym przykładzie przedstawiono scenariusz, w którym klient A anulował wszystkie zamówienia, a klient B przebrał do nich własność.</span><span class="sxs-lookup"><span data-stu-id="b1c92-180">The following example shows a scenario in which Customer A has canceled all orders and Customer B has taken ownership of them.</span></span> <span data-ttu-id="b1c92-181">Można dołączać wszystkie zamówienia klienta A w tym samym czasie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-181">You can attach all orders of Customer A at the same time.</span></span>  
  
 [!code-csharp[DlinqNTier#3](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#3)]
 [!code-vb[DlinqNTier#3](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As DataContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataContext ^ Context { System::Data::Linq::DataContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Data.Linq.DataContext" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1c92-182">Pobiera, który został użyty do pobrania tego <see cref="T:System.Data.Linq.Table`1" />. <see cref="T:System.Data.Linq.DataContext" /></span><span class="sxs-lookup"><span data-stu-id="b1c92-182">Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.Table`1" />.</span></span></summary>
        <value><span data-ttu-id="b1c92-183">Kontekst danych, który został użyty do pobrania tej tabeli.</span><span class="sxs-lookup"><span data-stu-id="b1c92-183">The data context that has been used to retrieve this table.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void DeleteAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void DeleteAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.DeleteAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.DeleteAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="b1c92-184">Typ elementów do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="b1c92-184">The type of the elements to delete.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="b1c92-185">Jednostki do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="b1c92-185">The entities to delete.</span></span></param>
        <summary><span data-ttu-id="b1c92-186">Umieszcza wszystkie jednostki z kolekcji w <see langword="pending delete" /> stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-186">Puts all entities from the collection into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-187">Jednostki, które są umieszczane w stanie oczekiwania na usunięcie przy użyciu tej metody, nie znikają z <xref:System.Data.Linq.DataContext.SubmitChanges%2A> wyników zapytania, dopóki nie zostanie wywołana.</span><span class="sxs-lookup"><span data-stu-id="b1c92-187">Entities that are put into the pending delete state with this method do not disappear from query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="b1c92-188">Odłączone jednostki muszą zostać dołączone, aby można je było usunąć.</span><span class="sxs-lookup"><span data-stu-id="b1c92-188">Disconnected entities must be attached before they can be deleted.</span></span> <span data-ttu-id="b1c92-189">Aby uzyskać więcej informacji, zobacz [operacje pobierania i cud danych w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="b1c92-189">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="b1c92-190">Poniższy C# fragment kodu przedstawia jeden z użycia dla tej metody:</span><span class="sxs-lookup"><span data-stu-id="b1c92-190">The following C# snippet shows one use for this method:</span></span>  
  
```  
IEnumerable<Customer> customersWithoutOrders = (from c in db.Customers  
   where c.Orders.Count == 0  
   select c).ToList();  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders);  
db.SubmitChanges();  
```  
  
 <span data-ttu-id="b1c92-191">W Visual Basic:</span><span class="sxs-lookup"><span data-stu-id="b1c92-191">In Visual Basic:</span></span>  
  
```  
Dim customersWithoutOrders As IEnumerable(Of Customer) = (From c In db.Customers _   
    Where c.Orders.Count = 0 _   
    Select c).ToList()  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders)  
db.SubmitChanges()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteOnSubmit(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.DeleteOnSubmit : 'Entity -&gt; unit" Usage="table.DeleteOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="b1c92-192">Jednostka, która ma zostać usunięta.</span><span class="sxs-lookup"><span data-stu-id="b1c92-192">The entity to be deleted.</span></span></param>
        <summary><span data-ttu-id="b1c92-193">Umieszcza jednostkę z tej tabeli w <see langword="pending delete" /> stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-193">Puts an entity from this table into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-194">Usunięta jednostka nie znika z wyników zapytania, dopóki <xref:System.Data.Linq.DataContext.SubmitChanges%2A> nie zostanie wywołana.</span><span class="sxs-lookup"><span data-stu-id="b1c92-194">The removed entity does not disappear from the query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="b1c92-195">Aby można było usunąć odłączone jednostki, należy najpierw dołączyć do nich.</span><span class="sxs-lookup"><span data-stu-id="b1c92-195">Disconnected entities must first be attached before they can be deleted.</span></span> <span data-ttu-id="b1c92-196">Aby uzyskać więcej informacji, zobacz [operacje pobierania i cud danych w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="b1c92-196">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]<span data-ttu-id="b1c92-197">nie obsługuje ani nie rozpoznaje operacji kaskadowego usuwania.</span><span class="sxs-lookup"><span data-stu-id="b1c92-197">does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="b1c92-198">Jeśli chcesz usunąć wiersz w tabeli zawierającej ograniczenia, musisz ustawić `ON DELETE CASCADE` regułę w ograniczeniu klucza obcego w bazie danych lub użyć własnego kodu, aby najpierw usunąć obiekty podrzędne, które uniemożliwiają usunięcie obiektu nadrzędnego.</span><span class="sxs-lookup"><span data-stu-id="b1c92-198">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="b1c92-199">W przeciwnym razie jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="b1c92-199">Otherwise, an exception is thrown.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#3](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#3)]
 [!code-vb[System.Data.Linq.Table#3](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="table.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1c92-200">Pobiera moduł wyliczający, który wykonuje iterację kolekcji.</span><span class="sxs-lookup"><span data-stu-id="b1c92-200">Gets an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="b1c92-201">Moduł wyliczający, który może być używany do iteracji kolekcji.</span><span class="sxs-lookup"><span data-stu-id="b1c92-201">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiedMembers">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModifiedMembers (entity As TEntity) As ModifiedMemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ GetModifiedMembers(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetModifiedMembers : 'Entity -&gt; System.Data.Linq.ModifiedMemberInfo[]" Usage="table.GetModifiedMembers entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="b1c92-202">Jednostka, z której ma zostać pobrana tablica.</span><span class="sxs-lookup"><span data-stu-id="b1c92-202">The entity from which to get the array.</span></span></param>
        <summary><span data-ttu-id="b1c92-203">Zwraca tablicę zmodyfikowanych elementów członkowskich, które zawierają ich bieżące i oryginalne wartości.</span><span class="sxs-lookup"><span data-stu-id="b1c92-203">Returns an array of modified members that contain their current and original values.</span></span></summary>
        <returns><span data-ttu-id="b1c92-204">Tablica zmodyfikowanych elementów członkowskich, która zawiera ich bieżące i oryginalne wartości.</span><span class="sxs-lookup"><span data-stu-id="b1c92-204">An array of modified members that contain their current and original values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNewBindingList">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IBindingList GetNewBindingList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.IBindingList GetNewBindingList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetNewBindingList" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNewBindingList () As IBindingList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::IBindingList ^ GetNewBindingList();" />
      <MemberSignature Language="F#" Value="member this.GetNewBindingList : unit -&gt; System.ComponentModel.IBindingList" Usage="table.GetNewBindingList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IBindingList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1c92-205">Tworzy nową listę do powiązania ze źródłem danych.</span><span class="sxs-lookup"><span data-stu-id="b1c92-205">Creates a new list for binding to a data source.</span></span></summary>
        <returns><span data-ttu-id="b1c92-206">Nowe <see cref="T:System.ComponentModel.IBindingList" /> dla powiązania ze źródłem danych.</span><span class="sxs-lookup"><span data-stu-id="b1c92-206">A new <see cref="T:System.ComponentModel.IBindingList" /> for binding to a data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-207">Zwracana lista obsługuje operacje standardowe, takie jak dodawanie, usuwanie, wstawienia i aktualizacje, ale zapisywanie musi być jawnie zarządzane przez programistę.</span><span class="sxs-lookup"><span data-stu-id="b1c92-207">The returned list supports standard operations, such as additions, deletions, insertions, and updates, but saves must be explicitly managed by the programmer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalEntityState">
      <MemberSignature Language="C#" Value="public TEntity GetOriginalEntityState (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TEntity GetOriginalEntityState(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalEntityState (entity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TEntity GetOriginalEntityState(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetOriginalEntityState : 'Entity -&gt; 'Entity" Usage="table.GetOriginalEntityState entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="b1c92-208">Jednostka, której oryginalny stan ma zostać zwrócony.</span><span class="sxs-lookup"><span data-stu-id="b1c92-208">The entity whose original state is to be returned.</span></span></param>
        <summary><span data-ttu-id="b1c92-209"><see cref="T:System.Data.Linq.Table`1" /> Zwraca wystąpienie, które zawiera pierwotny stan jednostki.</span><span class="sxs-lookup"><span data-stu-id="b1c92-209">Returns a <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span></span></summary>
        <returns><span data-ttu-id="b1c92-210"><see cref="T:System.Data.Linq.Table`1" /> Wystąpienie, które zawiera pierwotny stan jednostki.</span><span class="sxs-lookup"><span data-stu-id="b1c92-210">A <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-211">Ta metoda zwraca oryginalny stan jednostki, ponieważ została utworzona lub dołączona do bieżącej <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="b1c92-211">This method returns the original state of an entity since it was either created or attached to the current <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="b1c92-212">Oryginalny stan jednostki, która została zserializowana i deserializowana, musi być zapewniony przez niezależny mechanizm śledzenia i dostarczany, gdy jednostka jest dołączona do <xref:System.Data.Linq.DataContext>nowej.</span><span class="sxs-lookup"><span data-stu-id="b1c92-212">The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="b1c92-213">Aby uzyskać więcej informacji, zobacz [operacje pobierania i cud danych w aplikacjach N-warstwowych (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="b1c92-213">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void InsertAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void InsertAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.InsertAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.InsertAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="b1c92-214">Typ elementów do wstawienia.</span><span class="sxs-lookup"><span data-stu-id="b1c92-214">The type of the elements to insert.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="b1c92-215">Jednostki do dodania.</span><span class="sxs-lookup"><span data-stu-id="b1c92-215">The entities to add.</span></span></param>
        <summary><span data-ttu-id="b1c92-216">Dodaje wszystkie jednostki kolekcji do <see cref="T:System.Data.Linq.DataContext" /> <see langword="pending insert" /> w stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-216">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a <see langword="pending insert" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-217">Dodane jednostki nie będą znajdować się w wynikach zapytania, <xref:System.Data.Linq.DataContext.SubmitChanges%2A> dopóki nie zostanie wywołane.</span><span class="sxs-lookup"><span data-stu-id="b1c92-217">The added entities will not be in query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertOnSubmit(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.InsertOnSubmit : 'Entity -&gt; unit" Usage="table.InsertOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="b1c92-218">Jednostka, która ma zostać dodana.</span><span class="sxs-lookup"><span data-stu-id="b1c92-218">The entity to be added.</span></span></param>
        <summary><span data-ttu-id="b1c92-219">Dodaje jednostkę w <see langword="pending insert" /> stanie do tego <see cref="T:System.Data.Linq.Table`1" />.</span><span class="sxs-lookup"><span data-stu-id="b1c92-219">Adds an entity in a <see langword="pending insert" /> state to this <see cref="T:System.Data.Linq.Table`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-220">Dodana jednostka nie zostanie wyświetlona w wynikach zapytania z tej tabeli, <xref:System.Data.Linq.DataContext.SubmitChanges%2A> dopóki nie zostanie wywołana.</span><span class="sxs-lookup"><span data-stu-id="b1c92-220">The added entity will not appear in query results from this table until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.Table#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Linq.ITable.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1c92-221">Pobiera wartość wskazującą, czy typ jednostek zawartych w tym <see cref="T:System.Data.Linq.Table`1" /> wystąpieniu ma klucz podstawowy.</span><span class="sxs-lookup"><span data-stu-id="b1c92-221">Gets a value that indicates whether the type of the entities contained in this <see cref="T:System.Data.Linq.Table`1" /> instance has a primary key.</span></span></summary>
        <value><span data-ttu-id="b1c92-222"><see langword="true" />Jeśli typ jednostki nie ma klucza podstawowego; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="b1c92-222"><see langword="true" /> if the entity type does not have a primary key; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;TEntity&gt; IEnumerable&lt;TEntity&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable&lt;TEntity&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of TEntity) Implements IEnumerable(Of TEntity).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;TEntity&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1c92-223">Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="b1c92-223">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="b1c92-224">Moduł wyliczający, który może być używany do iteracji kolekcji.</span><span class="sxs-lookup"><span data-stu-id="b1c92-224">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1c92-225">Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="b1c92-225">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="b1c92-226">Moduł wyliczający, który może być używany do iteracji kolekcji.</span><span class="sxs-lookup"><span data-stu-id="b1c92-226">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-227">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-227">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-228">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Collections.Generic.IEnumerable%601> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-228">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1c92-229">Pobiera wartość wskazującą, czy kolekcja jest kolekcją <see cref="T:System.Collections.IList" /> obiektów.</span><span class="sxs-lookup"><span data-stu-id="b1c92-229">Gets a value that indicates whether the collection is a collection of <see cref="T:System.Collections.IList" /> objects.</span></span></summary>
        <value><span data-ttu-id="b1c92-230"><see langword="true" />Jeśli kolekcja jest kolekcją <see cref="T:System.Collections.IList" /> obiektów; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-230"><see langword="true" /> if the collection is a collection of <see cref="T:System.Collections.IList" /> objects; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-231">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-231">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-232">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.ComponentModel.IListSource> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-232">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1c92-233">Zwraca wartość <see cref="T:System.Collections.IList" /> , która może być powiązana ze źródłem danych z obiektu, który nie implementuje samego siebie. <see cref="T:System.Collections.IList" /></span><span class="sxs-lookup"><span data-stu-id="b1c92-233">Returns an <see cref="T:System.Collections.IList" /> that can be bound to a data source from an object that does not implement an <see cref="T:System.Collections.IList" /> itself.</span></span></summary>
        <returns><span data-ttu-id="b1c92-234"><see cref="T:System.Collections.IList" /> Który można powiązać ze źródłem danych.</span><span class="sxs-lookup"><span data-stu-id="b1c92-234">An <see cref="T:System.Collections.IList" /> that can be bound to a data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-235">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-235">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-236">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.ComponentModel.IListSource> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-236">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1c92-237">Zezwala na skojarzenie jednostek z nowym wystąpieniem a <see cref="T:System.Data.Linq.DataContext" /> , aby można je było zaktualizować lub usunąć z bazy danych.</span><span class="sxs-lookup"><span data-stu-id="b1c92-237">Allows deserialized entities to be associated with a new instance of a <see cref="T:System.Data.Linq.DataContext" /> so that they can be updated or deleted from the database.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="b1c92-238">Jednostka, która ma zostać dołączona.</span><span class="sxs-lookup"><span data-stu-id="b1c92-238">The entity to be attached.</span></span></param>
        <summary><span data-ttu-id="b1c92-239">Dołącza jednostkę do <see cref="T:System.Data.Linq.DataContext" /> niezmodyfikowanego stanu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-239">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-240">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-240">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-241">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Data.Linq.ITable> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-241">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, asModified As Boolean) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, bool asModified) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="b1c92-242">Jednostka, która ma zostać dołączona.</span><span class="sxs-lookup"><span data-stu-id="b1c92-242">The entity to be attached.</span></span></param>
        <param name="asModified"><span data-ttu-id="b1c92-243"><see langword="true" />Aby dołączyć jednostkę jako zmodyfikowaną; <see langword="false" /> aby dołączyć jednostkę jako niezmodyfikowaną.</span><span class="sxs-lookup"><span data-stu-id="b1c92-243"><see langword="true" /> to attach the entity as modified; <see langword="false" /> to attached the entity as unmodified.</span></span></param>
        <summary><span data-ttu-id="b1c92-244">Dołącza wszystkie jednostki kolekcji do <see cref="T:System.Data.Linq.DataContext" /> elementu w zmodyfikowanym lub niezmodyfikowanym stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-244">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-245">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-245">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-246">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Data.Linq.ITable> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-246">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, object original);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, object original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, original As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, System::Object ^ original) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="original" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="b1c92-247">Jednostka, która ma zostać dołączona.</span><span class="sxs-lookup"><span data-stu-id="b1c92-247">The entity to be attached.</span></span></param>
        <param name="original"><span data-ttu-id="b1c92-248">Wystąpienie tego samego typu jednostki z elementami członkowskimi danych, które zawierają oryginalne wartości.</span><span class="sxs-lookup"><span data-stu-id="b1c92-248">An instance of the same entity type with data members that contain the original values.</span></span></param>
        <summary><span data-ttu-id="b1c92-249">Dołącza jednostkę do <see cref="T:System.Data.Linq.DataContext" /> elementu w zmodyfikowanym lub niezmodyfikowanym stanie przez określenie zarówno jednostki, jak i jej oryginalnego stanu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-249">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-250">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-250">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-251">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Data.Linq.ITable> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-251">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.AttachAll">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1c92-252">Dołącza wszystkie jednostki kolekcji do <see cref="T:System.Data.Linq.DataContext" /> elementu w zmodyfikowanym lub niezmodyfikowanym stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-252">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="b1c92-253">Kolekcja jednostek do dołączenia.</span><span class="sxs-lookup"><span data-stu-id="b1c92-253">The collection of entities to be attached.</span></span></param>
        <summary><span data-ttu-id="b1c92-254">Dołącza wszystkie jednostki kolekcji do <see cref="T:System.Data.Linq.DataContext" /> elementu w zmodyfikowanym lub niezmodyfikowanym stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-254">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-255">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-255">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-256">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Data.Linq.ITable> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-256">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable, asModified As Boolean) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities, bool asModified) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="b1c92-257">Kolekcja jednostek do dołączenia.</span><span class="sxs-lookup"><span data-stu-id="b1c92-257">The collection of entities to be attached.</span></span></param>
        <param name="asModified"><span data-ttu-id="b1c92-258"><see langword="true" />Aby dołączyć jednostki jako zmodyfikowane; <see langword="false" /> aby dołączyć jednostki jako niemodyfikowane.</span><span class="sxs-lookup"><span data-stu-id="b1c92-258"><see langword="true" /> to attach the entities as modified; <see langword="false" /> to attach the entities as unmodified.</span></span></param>
        <summary><span data-ttu-id="b1c92-259">Dołącza wszystkie jednostki kolekcji do <see cref="T:System.Data.Linq.DataContext" /> elementu w zmodyfikowanym lub niezmodyfikowanym stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-259">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-260">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-260">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-261">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Data.Linq.ITable> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-261">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteAllOnSubmit (entities As IEnumerable) Implements ITable.DeleteAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::DeleteAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="b1c92-262">Jednostki, które są usuwane.</span><span class="sxs-lookup"><span data-stu-id="b1c92-262">The entities being removed.</span></span></param>
        <summary><span data-ttu-id="b1c92-263">Umieszcza wszystkie jednostki z kolekcji w <see langword="pending delete" /> stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-263">Puts all entities from the collection into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-264">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-264">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-265">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Data.Linq.ITable> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-265">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteOnSubmit (entity As Object) Implements ITable.DeleteOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::DeleteOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="b1c92-266">Jednostka, która ma zostać usunięta.</span><span class="sxs-lookup"><span data-stu-id="b1c92-266">The entity to be removed.</span></span></param>
        <summary><span data-ttu-id="b1c92-267">Umieszcza jednostkę z tej tabeli w <see langword="pending delete" /> stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-267">Puts an entity from this table into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-268">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-268">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-269">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Data.Linq.ITable> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-269">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]<span data-ttu-id="b1c92-270">nie obsługuje ani nie rozpoznaje operacji kaskadowego usuwania.</span><span class="sxs-lookup"><span data-stu-id="b1c92-270">does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="b1c92-271">Jeśli chcesz usunąć wiersz w tabeli zawierającej ograniczenia, musisz ustawić `ON DELETE CASCADE` regułę w ograniczeniu klucza obcego w bazie danych lub użyć własnego kodu, aby najpierw usunąć obiekty podrzędne, które uniemożliwiają usunięcie obiektu nadrzędnego.</span><span class="sxs-lookup"><span data-stu-id="b1c92-271">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="b1c92-272">W przeciwnym razie jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="b1c92-272">Otherwise, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetModifiedMembers">
      <MemberSignature Language="C#" Value="System.Data.Linq.ModifiedMemberInfo[] ITable.GetModifiedMembers (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Data.Linq.ModifiedMemberInfo[] System.Data.Linq.ITable.GetModifiedMembers(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetModifiedMembers (entity As Object) As ModifiedMemberInfo() Implements ITable.GetModifiedMembers" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ System.Data.Linq.ITable.GetModifiedMembers(System::Object ^ entity) = System::Data::Linq::ITable::GetModifiedMembers;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="b1c92-273">Jednostka, z której mają zostać uzyskane zmodyfikowane elementy członkowskie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-273">The entity from which to obtain the modified members.</span></span></param>
        <summary><span data-ttu-id="b1c92-274">Zwraca tablicę zmodyfikowanych elementów członkowskich, które zawierają ich bieżące i oryginalne wartości.</span><span class="sxs-lookup"><span data-stu-id="b1c92-274">Returns an array of modified members that contain their current and original values.</span></span></summary>
        <returns><span data-ttu-id="b1c92-275">Tablica zmodyfikowanych elementów członkowskich.</span><span class="sxs-lookup"><span data-stu-id="b1c92-275">An array of modified members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-276">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-276">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-277">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Data.Linq.ITable> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-277">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetOriginalEntityState">
      <MemberSignature Language="C#" Value="object ITable.GetOriginalEntityState (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Data.Linq.ITable.GetOriginalEntityState(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetOriginalEntityState (entity As Object) As Object Implements ITable.GetOriginalEntityState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Data.Linq.ITable.GetOriginalEntityState(System::Object ^ entity) = System::Data::Linq::ITable::GetOriginalEntityState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="b1c92-278">Jednostka, do której jest dostęp oryginalny stan.</span><span class="sxs-lookup"><span data-stu-id="b1c92-278">The entity whose original state is to be accessed.</span></span></param>
        <summary><span data-ttu-id="b1c92-279">Pobiera oryginalne wartości danej jednostki.</span><span class="sxs-lookup"><span data-stu-id="b1c92-279">Retrieves original values of a given entity.</span></span></summary>
        <returns><span data-ttu-id="b1c92-280">Kopia oryginalnej jednostki.</span><span class="sxs-lookup"><span data-stu-id="b1c92-280">A copy of the original entity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-281">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-281">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-282">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Data.Linq.ITable> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-282">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertAllOnSubmit (entities As IEnumerable) Implements ITable.InsertAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::InsertAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="b1c92-283">Kolekcja jednostek do dodania.</span><span class="sxs-lookup"><span data-stu-id="b1c92-283">The collection of entities to be added.</span></span></param>
        <summary><span data-ttu-id="b1c92-284">Dodaje wszystkie jednostki kolekcji do <see cref="T:System.Data.Linq.DataContext" /> <see langword="pending insert" /> w stanie.</span><span class="sxs-lookup"><span data-stu-id="b1c92-284">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in an <see langword="pending insert" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-285">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-285">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-286">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Data.Linq.ITable> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-286">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertOnSubmit (entity As Object) Implements ITable.InsertOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::InsertOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="b1c92-287">Jednostka do dodania.</span><span class="sxs-lookup"><span data-stu-id="b1c92-287">The entity to add.</span></span></param>
        <summary><span data-ttu-id="b1c92-288">Dodaje jednostkę w <see langword="pending insert" /> stanie do tej tabeli.</span><span class="sxs-lookup"><span data-stu-id="b1c92-288">Adds an entity in a <see langword="pending insert" /> state to this table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-289">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-289">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-290">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Data.Linq.ITable> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-290">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.ElementType">
      <MemberSignature Language="C#" Value="Type System.Linq.IQueryable.ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Linq.IQueryable.ElementType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ElementType As Type Implements IQueryable.ElementType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System::Linq::IQueryable::ElementType { Type ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Linq.IQueryable.ElementType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.ElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1c92-291">Pobiera typ elementów, które są zwracane, gdy jest wykonywane drzewo wyrażenia skojarzone z tym obiektem.</span><span class="sxs-lookup"><span data-stu-id="b1c92-291">Gets the type of the element(s) that are returned when the expression tree associated with this object is executed.</span></span></summary>
        <value><span data-ttu-id="b1c92-292">Typ elementów, które są zwracane, gdy jest wykonywane drzewo wyrażenia skojarzone z tym obiektem.</span><span class="sxs-lookup"><span data-stu-id="b1c92-292">The type of the element(s) that are returned when the expression tree associated with this object is executed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-293">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-293">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-294">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Linq.IQueryable> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-294">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Expression">
      <MemberSignature Language="C#" Value="System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression System.Linq.IQueryable.Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Expression As Expression Implements IQueryable.Expression" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::Expressions::Expression ^ System::Linq::IQueryable::Expression { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Linq.IQueryable.Expression" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.Expression</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1c92-295">Pobiera drzewo wyrażenia skojarzone z tym wystąpieniem <see cref="T:System.Linq.IQueryable" />.</span><span class="sxs-lookup"><span data-stu-id="b1c92-295">Gets the expression tree that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span></span></summary>
        <value><span data-ttu-id="b1c92-296">Jest skojarzona z tym <see cref="T:System.Linq.IQueryable" />wystąpieniem. <see cref="T:System.Linq.Expressions.Expression" /></span><span class="sxs-lookup"><span data-stu-id="b1c92-296">The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-297">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-297">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-298">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Linq.IQueryable> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-298">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Provider">
      <MemberSignature Language="C#" Value="System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider System.Linq.IQueryable.Provider" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Provider As IQueryProvider Implements IQueryable.Provider" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::IQueryProvider ^ System::Linq::IQueryable::Provider { System::Linq::IQueryProvider ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Linq.IQueryable.Provider" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.Provider</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1c92-299">Pobiera dostawcę zapytań, który jest skojarzony z tym źródłem danych.</span><span class="sxs-lookup"><span data-stu-id="b1c92-299">Gets the query provider that is associated with this data source.</span></span></summary>
        <value><span data-ttu-id="b1c92-300"><see cref="T:System.Linq.IQueryProvider" /> Jest skojarzony z tym źródłem danych.</span><span class="sxs-lookup"><span data-stu-id="b1c92-300">The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-301">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-301">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-302">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Linq.IQueryable> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-302">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IQueryProvider.CreateQuery (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Linq.IQueryProvider.CreateQuery(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="b1c92-303">Wyrażenie zapytania, z którego jest przeprowadzana Ocena.</span><span class="sxs-lookup"><span data-stu-id="b1c92-303">The query expression from which the evaluation is performed.</span></span></param>
        <summary><span data-ttu-id="b1c92-304">Konstruuje <see cref="T:System.Linq.IQueryable" /> obiekt, który może oszacować zapytanie reprezentowane przez określone drzewo wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="b1c92-304">Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="b1c92-305"><see cref="T:System.Linq.IQueryable" /> , Który może oszacować zapytanie reprezentowane przez określone drzewo wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="b1c92-305">An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-306">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-306">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-307">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Linq.IQueryProvider> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-307">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable&lt;TResult&gt; IQueryProvider.CreateQuery&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!TResult&gt; System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual System::Linq::IQueryable&lt;TResult&gt; ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="b1c92-308">Typ danych w tabeli.</span><span class="sxs-lookup"><span data-stu-id="b1c92-308">The type of the data in the table.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="b1c92-309">Wyrażenie zapytania, z którego jest przeprowadzana Ocena.</span><span class="sxs-lookup"><span data-stu-id="b1c92-309">The query expression from which the evaluation is performed.</span></span></param>
        <summary><span data-ttu-id="b1c92-310">Konstruuje <see cref="T:System.Linq.IQueryable`1" /> obiekt, który może oszacować zapytanie reprezentowane przez określone drzewo wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="b1c92-310">Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="b1c92-311"><see cref="T:System.Linq.IQueryable`1" /> , Który może oszacować zapytanie reprezentowane przez określone drzewo wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="b1c92-311">An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-312">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-312">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-313">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Linq.IQueryProvider> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-313">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute">
      <MemberSignature Language="C#" Value="object IQueryProvider.Execute (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Linq.IQueryProvider.Execute(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="b1c92-314">Wyrażenie zapytania, które ma zostać wykonane.</span><span class="sxs-lookup"><span data-stu-id="b1c92-314">The query expression to execute.</span></span></param>
        <summary><span data-ttu-id="b1c92-315">Wykonuje zapytanie reprezentowane przez określone drzewo wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="b1c92-315">Executes the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="b1c92-316">Wartość, która wynika z wykonania określonego zapytania.</span><span class="sxs-lookup"><span data-stu-id="b1c92-316">The value that results from executing the specified query.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-317">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-317">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-318">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Linq.IQueryProvider> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-318">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="TResult IQueryProvider.Execute&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !!TResult System.Linq.IQueryProvider.Execute&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual TResult System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="b1c92-319">Typ danych w tabeli.</span><span class="sxs-lookup"><span data-stu-id="b1c92-319">The type of the data in the table.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="b1c92-320">Wyrażenie zapytania, które ma zostać wykonane.</span><span class="sxs-lookup"><span data-stu-id="b1c92-320">The query expression to execute.</span></span></param>
        <summary><span data-ttu-id="b1c92-321">Wykonuje zapytanie o jednoznacznie określonym typie reprezentowane przez określone drzewo wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="b1c92-321">Executes the strongly-typed query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="b1c92-322">Wartość, która wynika z wykonania określonego zapytania.</span><span class="sxs-lookup"><span data-stu-id="b1c92-322">The value that results from executing the specified query.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1c92-323">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="b1c92-323">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b1c92-324">Może być używana tylko wtedy, <xref:System.Data.Linq.Table%601> gdy wystąpienie jest rzutowane <xref:System.Linq.IQueryProvider> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-324">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="table.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1c92-325">Zwraca ciąg, który reprezentuje tabelę.</span><span class="sxs-lookup"><span data-stu-id="b1c92-325">Returns a string that represents the table.</span></span></summary>
        <returns><span data-ttu-id="b1c92-326">Reprezentacja tabeli w postaci ciągu.</span><span class="sxs-lookup"><span data-stu-id="b1c92-326">A string representation of the table.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
